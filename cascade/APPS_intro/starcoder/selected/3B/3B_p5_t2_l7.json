[
    {
        "number": 4000,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [(int(x) - 1, int(y) - 1) for x, y in stdin.split()[1:].split(\",\")]\n    visited = [False] * n\n    visited[0] = visited[1] = True\n\n    def dfs(node):\n        if visited[node]:\n            return 0\n\n        visited[node] = True\n        max_simple_path = 1\n\n        for neighbor in edges:\n            if neighbor[0] == node or neighbor[1] == node:\n                continue\n\n            child_path = dfs(neighbor[0]) + dfs(neighbor[1])\n            max_simple_path = max(max_simple_path, child_path)\n\n        return max_simple_path\n\n    max_simple_path = dfs(0)\n    a, b, c = 0, 1, 2\n\n    for i in range(3):\n        if visited[i]:\n            continue\n\n        visited[i] = True\n        current_simple_path = dfs(i)\n\n        if current_simple_path + max_simple_path > max_simple_path:\n            max_simple_path = current_simple_path\n            a, b, c = i, 3 if i < 2 else 1, 3 if i == 2 else i\n\n    return str(max_simple_path) + \"\\n\" + str(a + 1) + \" \" + str(b + 1) + \" \" + str(c + 1)\n\n\ndef",
        "test": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\\n\"",
        "num_ids": 1792,
        "indeed": false
    },
    {
        "number": 4001,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, *ds = map(int, stdin.split())\n    x = 0\n    y = 0\n    for d in ds:\n        if x == 0:\n            x = d\n        elif y == 0:\n            y = d\n    if x == 0 or y == 0:\n        return \"IMPOSSIBLE\"\n    return str(x) + \" \" + str(y)\n\nprint(solution(open(\"input.txt\").read()))",
        "test": "assert solution(\"5\\n5 1 2 3 4\") == \"5 1\"",
        "num_ids": 1230,
        "indeed": false
    },
    {
        "number": 4002,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [[int(x) for x in stdin.split()] for _ in range(n)]\n    a.sort(key=lambda x: sum(x), reverse=True)\n    max_sum = 0\n    for row in a:\n        if sum(row) % k == 0 and len(row) <= m // 2:\n            max_sum = max(max_sum, sum(row))\n    return str(max_sum)",
        "test": "assert solution(",
        "num_ids": 851,
        "indeed": false
    },
    {
        "number": 4003,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a = sorted(set(a))\n    max_len = 0\n    current_len = 1\n    for i in range(1, len(a)):\n        if a[i] - a[i - 1] == 1:\n            current_len += 1\n        else:\n            if current_len > max_len:\n                max_len = current_len\n            current_len = 1\n    if current_len > max_len:\n        max_len = current_len\n    moves = []\n    for i in range(1, len(a)):\n        if a[i] - a[i - 1] == 1:\n            moves.append('L')\n            a.pop(i)\n        else:\n            moves.append('R')\n    if a[0]!= 1:\n        moves.append('L')\n    moves = moves[::-1]\n    print(max_len)\n    print(''.join(moves))\n\n\ndef",
        "test": "assert solution(\"7\\n1 3 5 6 5 4 2\\n\") == \"6\\nLRLRRR\"",
        "num_ids": 1201,
        "indeed": false
    },
    {
        "number": 4004,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    def min_diff(arr):\n        arr = sorted(arr)\n        diff = arr[1] - arr[0]\n        for i in range(2, len(arr)):\n            if arr[i] - arr[i - 1]!= diff:\n                return -1\n        return diff\n\n    min_diff_value = min_diff(a)\n\n    if min_diff_value == -1:\n        return -1\n    else:\n        return str(min_diff_value)\n\ntest_cases = \"\"\"\n6\n1 4 4 7 4 1\n3\n5\n2 2 5 2 5\n3\n4\n1 3 3 7\n-1\n2\n2 8\n3\n\"\"\"\n\nfor test in test_cases.split('\\n'):\n    print(solution(test))",
        "test": "assert solution(",
        "num_ids": 836,
        "indeed": false
    },
    {
        "number": 4005,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    x5, y5, x6, y6 = map(int, stdin.split())\n\n    if all(x3 < x4 < x5 < x6 < x2, all(y3 < y4 < y5 < y6 < y2)):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(input()) == \"NO\"",
        "num_ids": 1421,
        "indeed": false
    },
    {
        "number": 4006,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    visited = set()\n    \n    def f(x):\n        nonlocal count\n        nonlocal visited\n        if x in visited:\n            return visited[x]\n        visited[x] = x\n        new_x = x + 1\n        while new_x % 10 == 0:\n            new_x //= 10\n        count += 1\n        return f(new_x)\n    \n    f(n)\n    return str(count)",
        "test": "assert solution(\"10\") == \"19\"",
        "num_ids": 533,
        "indeed": false
    },
    {
        "number": 4007,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    friends = list(map(int, stdin.split()[1:]))\n\n    for i in range(n):\n        while not all(friends[j]!= i for j in range(i)):\n            index = friends[i]\n            friends[i] = friends[j]\n            friends[j] = index\n\n    return \" \".join(map(str, friends))\n",
        "test": "assert solution(\"7 0 0 1 4 0 6\\n\") == \"7 3 2 1 4 5 6\\n\"",
        "num_ids": 970,
        "indeed": false
    },
    {
        "number": 4008,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    colors = set()\n    for num in a:\n        colors.add(num)\n\n    for i in range(1, k + 1):\n        if i not in colors:\n            return \"NO\"\n\n    for num in a:\n        if colors.count(num) < i:\n            return \"NO\"\n\n    for i in range(1, k + 1):\n        if len(set(a[:a.index(num)] + a[a.index(num) + 1:]))!= i:\n            return \"NO\"\n\n    return \"YES\" + \" \".join(map(str, a))\n\n\ndef",
        "test": "assert solution(input()) == \"YES\"",
        "num_ids": 996,
        "indeed": false
    },
    {
        "number": 4009,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    num = [1] * n\n    count = 0\n    \n    for i in range(1, x + 1):\n        if num[-i] == 0:\n            if num[-i + 1] == 0:\n                count += 1\n            else:\n                num[-i + 1] = 0\n                break\n    \n    if num.count(1) > 0:\n        return str(count + 1)\n    else:\n        return str(count + 2)",
        "test": "assert solution(\"11 5 1\\n11010100101\") == \"3\"",
        "num_ids": 801,
        "indeed": false
    },
    {
        "number": 4010,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[1])\n    a = list(map(int, stdin.split()[2:n+2]))\n\n    def is_palindrome(arr):\n        return arr == arr[::-1]\n\n    def is_subsequence(arr1, arr2):\n        return all(arr1[i] in arr2 for i in range(len(arr1)))\n\n    has_palindrome = False\n    for i in range(n):\n        for j in range(i+1, n):\n            if is_palindrome(a[i:j+1]):\n                has_palindrome = True\n                break\n        if has_palindrome:\n            break\n\n    if has_palindrome:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\") == \"YES\\nYES\\nNO\\nYES\\nNO\"",
        "num_ids": 1387,
        "indeed": false
    },
    {
        "number": 4011,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(digit) for digit in stdin.split()[1]]\n    f = list(map(int, stdin.split()[2:].split()))\n\n    def f_map(x: int) -> int:\n        return f[x - 1]\n\n    def replace_segment(start: int, end: int) -> str:\n        return ''.join(map(f_map, range(start, end + 1)))\n\n    max_number = a[0]\n    for i in range(n - 1):\n        current_segment = a[i] + a[i + 1]\n        if current_segment > max_number:\n            max_number = current_segment\n\n    return str(max_number)\n",
        "test": "assert solution(\"5\\n11111\\n9 8 7 6 5 4 3 2 1\\n\") == \"99999\\n\"",
        "num_ids": 939,
        "indeed": false
    },
    {
        "number": 4012,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    t = 0\n    res = float('inf')\n    while a <= b <= c:\n        a, b, c = map(int, stdin.split())\n        t += 1\n        if b % a == 0 and c % b == 0:\n            res = min(res, t)\n    return str(res)\n\nfor line in sys.stdin:\n    stdin = line.strip()\n    print(solution(stdin))",
        "test": "assert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\\n\") == \"1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48\\n\"",
        "num_ids": 1451,
        "indeed": false
    },
    {
        "number": 4013,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    # Sort the array in descending order\n    a.sort(reverse=True)\n    \n    # Calculate the minimum possible instability\n    instability = max(a) - min(a)\n    \n    # Remove the element that minimizes the instability\n    if n > 1:\n        a.pop()\n        instability -= max(a)\n    \n    # Calculate the minimum possible instability after removing one element\n    if n > 2:\n        a.pop()\n        instability -= max(a)\n    \n    # Print the minimum possible instability\n    return str(instability)",
        "test": "assert solution(input(\"Input\\n\")) == \"Output\\n\"",
        "num_ids": 747,
        "indeed": false
    },
    {
        "number": 4014,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    def read_input() -> tuple[int, int, int]:\n        n, m = map(int, stdin.split())\n        exams = list(map(lambda x: list(map(int, x.split())), stdin.split('\\n')[1:]))\n        return n, m, exams\n\n    def can_prepare(i: int, j: int) -> bool:\n        return s_i <= j < d_i\n\n    def can_pass(i: int, j: int) -> bool:\n        return s_i <= j < d_i or s_i <= j < d_i - 1\n\n    def find_schedule(i: int) -> int:\n        if can_pass(i, j):\n            return m + 1\n        elif can_prepare(i, j):\n            return i\n        else:\n            return 0\n\n    n, m, exams = read_input()\n    s_i, d_i, c_i = 0, 0, 0\n    for exam in exams:\n        s_i, d_i, c_i = exam\n        for j in range(s_i, d_i):\n            if find_schedule(i)!= 0:\n                return find_schedule(i)\n\n    return -1\n\ndef",
        "test": "assert solution(\"\"\"5 2",
        "num_ids": 2028,
        "indeed": false
    },
    {
        "number": 4015,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n\n    if n == m:\n        return \"0\"\n\n    steps = 0\n    while n!= m:\n        n = n * 2 if n % 2 == 0 else n * 3\n        steps += 1\n\n    return str(steps)",
        "test": "assert solution(\"42 42\") == \"0\"",
        "num_ids": 618,
        "indeed": false
    },
    {
        "number": 4016,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.split()[1]\n    \n    i = 0\n    s = \"\"\n    \n    while s!= t:\n        s += t[i % n]\n        i += 1\n    \n    return s[:i]",
        "test": "assert solution(input().split()) == \"catcat\"",
        "num_ids": 685,
        "indeed": false
    },
    {
        "number": 4017,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    def is_good(arr):\n        return all(sum(arr[:i]) == sum(arr[i:]) for i in range(1, len(arr)))\n    \n    def find_nice_indices(arr):\n        for i in range(len(arr)):\n            if arr[i]!= arr[0]:\n                if is_good(arr[:i] + arr[i+1:]):\n                    return i+1\n        return 0\n    \n    count = find_nice_indices(a)\n    if count > 0:\n        print(count)\n        for i in range(count):\n            print(find_nice_indices(a), end=' ')\n    else:\n        print(count)",
        "test": "assert solution(\"4\\n8 3 5 2\") == \"2\\n1 4\\n\"",
        "num_ids": 893,
        "indeed": false
    },
    {
        "number": 4018,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    cost = [0] * n\n    subsequences = []\n    for i in range(1, n - k + 1):\n        subsequences.append(s[i:i + k])\n        cost[i] = sum(ord(c) - ord('a') for c in s[i:i + k])\n    subsequences.sort(key=lambda x: cost[x], reverse=True)\n    return str(cost[0]) if len(subsequences) >= k else \"-1\"\n",
        "test": "assert solution('5 6\\naaaaa') == '15'",
        "num_ids": 894,
        "indeed": false
    },
    {
        "number": 4019,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n\n    for i in range(m):\n        v, u = map(int, stdin.split())\n        graph[v].append(u)\n        graph[u].append(v)\n\n    def dfs(v, visited):\n        visited.add(v)\n        for neighbor in graph[v]:\n            if neighbor not in visited:\n                dfs(neighbor, visited)\n\n    spanning_tree = []\n    visited = set()\n    for i in range(1, n + 1):\n        if i!= 1 and (D - len(spanning_tree)) % 2 == 1:\n            continue\n        dfs(i, visited)\n        if len(spanning_tree) == D - 1:\n            break\n        spanning_tree.append(i)\n\n    if not spanning_tree:\n        return \"NO\"\n\n    spanning_tree.sort()\n    return \"YES\\n\" + \" \".join(map(str, spanning_tree))\n",
        "test": "assert solution(\"\"\"4 5 1",
        "num_ids": 1946,
        "indeed": false
    },
    {
        "number": 4020,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split()[0].split(':'))\n    h2, m2 = map(int, stdin.split()[1].split(':'))\n\n    if m1 % 2 == 0 or m2 % 2 == 0:\n        return 'Invalid'\n\n    if h2 - h1 >= 2:\n        h3 = (h1 + h2) // 2\n        m3 = (m1 + m2) // 2\n\n        return f'{h3:02d}:{m3:02d}'\n\n    return 'Invalid'",
        "test": "assert solution(\"11:10\\n11:12\\n\") == \"11:11\\n\"",
        "num_ids": 946,
        "indeed": false
    },
    {
        "number": 4021,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0:\n        return str(a // 2)\n    else:\n        return str((a - 1) // 2 + 1)",
        "test": "assert solution(\"2\") == \"1\"",
        "num_ids": 392,
        "indeed": false
    },
    {
        "number": 4022,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    segments = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    def is_degenerate(a, b):\n        return a == b or a + 1 == b or a - 1 == b\n\n    def intersect(p1: tuple, p2: tuple, q1: tuple, q2: tuple) -> tuple:\n        def slope(p, q):\n            return (q[1] - p[1]) / (q[0] - p[0])\n\n        def intersect_lines(p1: tuple, p2: tuple, q1: tuple, q2: tuple) -> tuple:\n            x1, y1 = p1\n            x2, y2 = p2\n            x3, y3 = q1\n            x4, y4 = q2\n\n            def det(a, b, c, d):\n                return a * b + c * d\n\n            def cross(a, b, c, d):\n                return a * (b[0] - c[0]) + b * (c[1] - d[1]) + c * d - d * (a[0] - b[0]) - b * (a[1] - c[1]) - c * (a[0] - d[0])\n\n            det1 = det(x1 - x3, y1 - y3, x2 - x3, y2 - y3)\n            det2 = det(x1 - x4, y1 - y4, x2 - x4, y2 - y4)\n\n            if det1 == 0 or det2 == 0:\n                return None\n\n            det3 = det(x3 - x4, y3 - y4, x1 - x2, y1 - y2)\n\n            if det3 == 0:\n                return (x1, y1)\n\n            x5 = det3 / det1\n            y5 = cross(det1, x1 - x3, y1 - y3, x4 - x3, y4 - y3) / det1\n\n            if 0 <= x5 <= x2 - x1 and 0 <= y5 <= y2 - y1:\n                return (x5, y5)\n            else:\n                return None\n\n        def intersect_segments(p1: tuple, p2: tuple, q1: tuple, q2: tuple) -> bool:\n            if is_degenerate(p1[0], p2[0]) or is_degenerate(q1[0], q2[0]):\n                return True\n\n            if abs(p1[1] - p2[1]) < 1e-10:\n                return abs(slope(p1, q1) * p1[0] + p1[1]) < 1e-10\n\n            if abs(q1[1] - q2[1]) < 1e-10:\n                return abs(slope(q1, p2) * q1[0] + q1[1]) < 1e-10\n\n            if abs(p1[0] - q1[0]) < 1e-10:\n                return abs(slope(p1, q1) * p1[1] + p1[0]) < 1e-10\n\n            if abs(q1[0] - p2[0]) < 1e-10:\n                return abs(slope(q1, p2) * q1[1] + q1[0]) < 1e-10\n\n            return intersect_lines(p1, p2, q1, q2) is not None\n\n        return intersect_segments(p1, p2, q1, q2)\n\n    def max_length(segments):\n        max_length = 0\n        for i in range(len(segments)):\n            for j in range(i + 1, len(segments)):\n                for k in range(j + 1, len(segments)):\n                    for l in range(k + 1, len(segments)):\n                        if intersect(segments[i], segments[j], segments[k], segments[l]):\n                            intersection = intersect(segments[i], segments[j], segments[k], segments[l])\n                            length = (intersection[1] - intersection[0]) ** 2 + (intersection[3] - intersection[2]) ** 2\n                            max_length = max(max_length, length)\n        return max_length\n\n    result = max_length(segments)\n    return str(result)",
        "test": "assert solution(input()) == \"2\"",
        "num_ids": 2587,
        "indeed": false
    },
    {
        "number": 4023,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    max_height = max(a)\n    \n    if max_height == 1:\n        return \"YES\"\n    \n    for i in range(len(a) - 1):\n        if a[i] == a[i + 1]:\n            a[i] += 1\n            a[i + 1] -= 1\n    \n    return \"YES\" if all(a[i] == a[0] for i in range(1, n)) and all(0 <= a[i] <= n - 1 for i in range(1, n)) else \"NO\"",
        "test": "assert solution(\"3\\n4 5 3\\n\") == \"NO\"",
        "num_ids": 721,
        "indeed": false
    },
    {
        "number": 4024,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(stdin.split()[1])\n    s.sort()\n    cost = 0\n    current = set()\n    for i in range(len(s)):\n        if len(current) >= k:\n            break\n        current.add(s[i])\n        cost += len(s) - i - 1\n    if len(current) < k:\n        return -1\n    return cost\n\n\ndef",
        "test": "assert solution(\"5 6\\naaaaa\\n\") == \"15\"",
        "num_ids": 925,
        "indeed": false
    },
    {
        "number": 4025,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    max_days = 0\n    days = [False] * 7\n    for i in range(1, 8):\n        days[i] = True\n    for i in range(a + b + c):\n        if days[i % 7]:\n            max_days = max(max_days, i // 7)\n    return str(max_days)",
        "test": "assert solution(\"3 2 2\\n\") == \"7\\n\"",
        "num_ids": 1455,
        "indeed": false
    },
    {
        "number": 4026,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[1:3])\n    types = [tuple(map(int, line.split())) for line in stdin.split()[3:3+n]]\n    squares = []\n    for x in range(m):\n        for y in range(m):\n            tiles = [types[i][x+y*2] for i in range(n)]\n            squares.append(tiles)\n    for i in range(len(squares)):\n        for j in range(i, len(squares)):\n            if squares[i] == squares[j][::-1]:\n                return \"YES\"\n    return \"NO\"",
        "test": "assert solution(\"\"\"",
        "num_ids": 2407,
        "indeed": false
    },
    {
        "number": 4027,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    # initialize variables\n    A = set()\n    B = set()\n    max_diff = float('-inf')\n\n    # iterate through the sequence\n    for num in range(1, n+1):\n        # check if the number can be added to A or B\n        if num in A:\n            B.add(num)\n        elif num in B:\n            A.add(num)\n        else:\n            if num > max_diff:\n                max_diff = num - max(A) + min(B)\n\n    # print the result\n    return str(max_diff)",
        "test": "assert solution(\"5\") == \"1\"",
        "num_ids": 752,
        "indeed": false
    },
    {
        "number": 4028,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    MOD = 10**9 + 7\n\n    def helper(s: str, i: int, cur: str, count: int) -> int:\n        if i == n:\n            if cur == s[:n]:\n                count += 1\n            return count\n\n        if cur[i] == ')':\n            return helper(s, i + 1, cur[:i] + '1' + cur[i + 1:], count)\n        elif cur[i] == '(':\n            return helper(s, i + 1, cur[:i] + '+' + cur[i + 1:], count)\n        else:\n            return helper(s, i + 1, cur + cur[i], count)\n\n    count = helper(s, 0, '', 0)\n    return str(count % MOD)\n",
        "test": "assert solution(3, \"(()\") == 4",
        "num_ids": 948,
        "indeed": false
    },
    {
        "number": 4029,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    # Find the first non-zero digit\n    i = 1\n    while n // 10 == 0:\n        i += 1\n        n //= 10\n        \n    # Move the non-zero digit to the end\n    move = 0\n    while i <= len(str(n)):\n        if str(n)[-i]!= '0':\n            break\n        move += 1\n        n = n * 10 + int(str(n)[-i])\n        i += 1\n        \n    # Move digits to the end\n    while i <= len(str(n)):\n        if n % 10!= 0:\n            break\n        move += 1\n        n = n // 10 * 10\n        i += 1\n        \n    # Make sure n is divisible by 25\n    if n % 25!= 0:\n        return -1\n    \n    return str(move)",
        "test": "assert solution(\"705\") == \"1\"",
        "num_ids": 580,
        "indeed": false
    },
    {
        "number": 4030,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    \n    # Count the frequency of each character\n    freq = {}\n    for c in s:\n        freq[c] = freq.get(c, 0) + 1\n    \n    # Initialize the color array\n    colors = [1] * n\n    \n    # Sort the characters by their frequency\n    sorted_chars = sorted(s, key=lambda x: (-freq[x], x))\n    \n    # Color the characters\n    for i, c in enumerate(sorted_chars):\n        colors[i] = freq[c]\n    \n    # Swap neighboring characters with the same color\n    for i in range(len(colors)):\n        for j in range(i + 1, len(colors)):\n            if colors[i]!= colors[j]:\n                colors[i], colors[j] = colors[j], colors[i]\n                break\n    \n    # Print the result\n    res = max(colors)\n    coloring = []\n    for c in colors:\n        coloring.append(c)\n    coloring = ''.join(map(str, coloring))\n    return f\"{res}\\n{coloring}\\n\"",
        "test": "assert solution(\"aaabbcbb\") == \"1 2 1 2 1 2 1 1\"",
        "num_ids": 1868,
        "indeed": false
    },
    {
        "number": 4031,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    strings = stdin.split('\\n')[1:]\n\n    def is_substring(a: str, b: str) -> bool:\n        return any(b[i:i+len(a)] == a for i in range(len(b)-len(a)+1))\n\n    def reorder(strings: List[str]) -> List[str]:\n        result = []\n        visited = set()\n\n        def dfs(idx: int) -> None:\n            if idx == len(strings):\n                result.append(''.join(strings))\n                return\n\n            for i in range(idx, len(strings)):\n                if is_substring(strings[idx], strings[i]) and i not in visited:\n                    visited.add(i)\n                    dfs(i + 1)\n                    visited.remove(i)\n\n        dfs(0)\n\n        return result\n\n    reordered_strings = reorder(strings)\n\n    if not reordered_strings:\n        return \"NO\"\n\n    return \"YES\\n\" + '\\n'.join(reordered_strings)\n",
        "test": "assert solution(\"5\\na\\nabacaba\\nba\\naba\\nabab\\n\") == \"NO\\n\"",
        "num_ids": 1474,
        "indeed": false
    },
    {
        "number": 4032,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    \n    left = []\n    right = []\n    \n    for problem in a:\n        if problem <= k:\n            left.append(problem)\n        else:\n            right.append(problem)\n    \n    count = 0\n    while left and right:\n        if count == n:\n            break\n        if left[0] <= k:\n            left.pop(0)\n            count += 1\n        else:\n            right.pop(0)\n            count += 1\n    \n    return str(count)",
        "test": "assert solution(input()) == '0'",
        "num_ids": 835,
        "indeed": false
    },
    {
        "number": 4033,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    # colors = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0, 14: 0}\n    colors = [0] * 15\n    colors[1] = a\n    colors[15] = b\n    colors = colors[:10]\n    stack = []\n    perimeter = 0\n\n    while colors[1] > 0 and colors[15] > 0:\n        if colors[1] == 1 and colors[15] == 1:\n            stack.append((1, 1))\n            colors[1] -= 1\n            colors[15] -= 1\n        elif colors[1] > 1 and colors[15] == 1:\n            stack.append((1, 1))\n            colors[1] -= 1\n        elif colors[1] == 1 and colors[15] > 1:\n            stack.append((1, 1))\n            colors[15] -= 1\n        else:\n            if stack:\n                last, num = stack.pop()\n                perimeter += 2 * num\n                if last == 1:\n                    colors[1] = num\n                else:\n                    colors[15] = num\n            else:\n                colors[1] = colors[1] - 1\n                colors[15] = colors[15] - 1\n\n    return str(perimeter)\n\ndef",
        "test": "assert solution(\"3 9\") == \"14\"",
        "num_ids": 1312,
        "indeed": false
    },
    {
        "number": 4034,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    colors = [0] * n\n    \n    def color(i):\n        if colors[i] == 0:\n            colors[i] = 1\n            return 0\n        else:\n            colors[i] = 0\n            return 1\n    \n    for i in range(n):\n        colors[i] = color(i)\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if colors[i]!= colors[j]:\n                colors[i], colors[j] = colors[j], colors[i]\n                break\n    \n    if colors!= list(range(n)):\n        return \"NO\"\n    else:\n        return \"YES \" + \"\".join(str(color(i)) for i in range(n))",
        "test": "assert solution(\"aaabbcbb\") == \"01011011\"",
        "num_ids": 1241,
        "indeed": false
    },
    {
        "number": 4035,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    def calc_price_before_tax(A: int, B: int, rate: float) -> int:\n        return max(0, A + B * (1 - rate))\n\n    tax_rates = [0.08, 0.1]\n    prices = []\n    for A_i, B_i in zip(range(1, A + 1), range(1, B + 1)):\n        for rate in tax_rates:\n            price = calc_price_before_tax(A_i, B_i, rate)\n            if price > 0:\n                prices.append(price)\n\n    if not prices:\n        return \"-1\"\n\n    prices.sort()\n    return str(prices[0])",
        "test": "assert solution(\"9 3\") == \"7\"",
        "num_ids": 953,
        "indeed": false
    },
    {
        "number": 4036,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    if n > 2*k:\n        return \"NO\"\n    \n    a = [0] * k\n    a[0] = 1\n    \n    for i in range(1, k):\n        if a[i-1] < 2*a[i]:\n            a[i] = a[i-1] + 1\n        else:\n            a[i] = 2*a[i]\n    \n    for i in range(k-1):\n        if a[i] < a[i+1] or a[i] > 2*a[i]:\n            return \"NO\"\n    \n    return \"YES\", *a",
        "test": "assert solution(\"8 3\") == \"NO\"",
        "num_ids": 904,
        "indeed": false
    },
    {
        "number": 4037,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = [int(stdin.split()[1:]) for _ in range(n)]\n    max_size = 0\n    current_size = 0\n    for i in range(n):\n        if r + a[i] >= 0:\n            current_size += 1\n            max_size = max(max_size, current_size)\n        else:\n            current_size = 0\n        r += a[i] * b[i]\n    return str(max_size)",
        "test": "assert solution('''3 4",
        "num_ids": 1017,
        "indeed": false
    },
    {
        "number": 4038,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, *numbers = map(int, stdin.split())\n\n    matrix = [[] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            matrix[i].append(numbers[n * i + j])\n\n    for i in range(n):\n        if matrix[i] == matrix[i][::-1]:\n            matrix[i] = matrix[i][::-1]\n        else:\n            break\n    else:\n        return \"NO\"\n\n    for j in range(n):\n        if [matrix[k][j] for k in range(n)] == [matrix[k][j] for k in range(n)][::-1]:\n            matrix[j] = [matrix[k][j] for k in range(n)][::-1]\n        else:\n            break\n    else:\n        return \"NO\"\n\n    return \"YES\\n\" + \"\\n\".join(\" \".join(str(x) for x in row) for row in matrix)",
        "test": "assert solution('3\\n1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3\\n1 3 1'",
        "num_ids": 1706,
        "indeed": false
    },
    {
        "number": 4039,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    def can_complete_projects(a: list, b: list) -> bool:\n        rating = 0\n        for i, (ai, bi) in enumerate(zip(a, b)):\n            rating += ai\n            rating += bi * i\n        return rating >= 0\n\n    n, r = map(int, stdin.split())\n    a, b = zip(*[list(map(int, line.split())) for line in stdin.splitlines()[1:]])\n\n    return \"YES\" if can_complete_projects(a, b) else \"NO\"\n\n\nprint(solution(open(\"example1.in\").read()))  # output: YES\nprint(solution(open(\"example2.in\").read()))  # output: YES\nprint(solution(open(\"example3.in\").read()))  # output: YES\nprint(solution(open(\"example4.in\").read()))  # output: NO",
        "test": "assert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"",
        "num_ids": 810,
        "indeed": false
    },
    {
        "number": 4040,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    platforms = [(0, 0) for _ in range(m)]\n\n    for i in range(1, m):\n        platforms[i] = (platforms[i - 1][0] + c[i - 1], platforms[i - 1][1])\n\n    for i in range(1, m):\n        platforms[i] = (max(platforms[i - 1][0], platforms[i][0]), platforms[i][1])\n\n    jump = 0\n    visited = [False] * (n + 2)\n    visited[0] = True\n    result = []\n\n    while jump < n + 1:\n        if not any(visited[i + d] for i in range(n + 1)):\n            result.append(jump)\n            visited[jump] = True\n            jump += d\n        else:\n            jump += 1\n\n    if jump == n + 1:\n        return \"YES\\n\" + \" \".join(str(i) for i in result)\n    else:\n        return \"NO\\n\"",
        "test": "assert solution('''7 3 2",
        "num_ids": 1866,
        "indeed": false
    },
    {
        "number": 4041,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    n = len(s)\n    m = len(t)\n\n    def lcp(a, b):\n        i, j = 0, 0\n        while i < len(a) and j < len(b):\n            if a[i] == b[j]:\n                i += 1\n                j += 1\n            else:\n                i = max(i - 1, 0)\n                j = 0\n        return j\n\n    def is_substring(s, t):\n        i, j = 0, 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n                j += 1\n            else:\n                i = i - j + 1\n                j = 0\n        return j == len(t)\n\n    lcp_s = [0] * n\n    lcp_t = [0] * m\n    lcp_r = [0] * m\n    for i in range(n):\n        lcp_s[i] = lcp_s[i - 1] + 1 if i > 0 else 0\n        while i + lcp_s[i] < n and s[i + lcp_s[i]] == s[i]:\n            lcp_s[i] += 1\n\n    for i in range(m):\n        lcp_t[i] = lcp_t[i - 1] + 1 if i > 0 else 0\n        while i + lcp_t[i] < m and t[i + lcp_t[i]] == t[i]:\n            lcp_t[i] += 1\n\n    for i in range(m - 1, -1, -1):\n        lcp_r[i] = lcp_r[i + 1] + 1 if i < m - 1 else 0\n        while i - lcp_r[i] >= 0 and t[i] == t[i - lcp_r[i]]:\n            lcp_r[i] += 1\n\n    lcp_r = lcp_r[::-1]\n\n    max_len = 0\n    for i in range(1, n - m + 1):\n        if is_substring(s[i:i + m], t) and (i + max(lcp_s[i + lcp_s[i + 1] - 1], lcp_t[lcp_t.index(lcp_r.index(lcp_t[i + lcp_t.index(lcp_r.index(lcp_t[i + lcp_t.index(lcp_r.index(lcp_t[i + lcp_t.index(lcp_r.index(lcp_t[i + lcp_t.index(lcp_r.index(lcp_t[i + lcp_t.index(lcp_r.index(lcp_t[i + lcp_t.index(lcp_r.index(lcp_t[i + lcp_t.index(lcp_r.index(lcp_t[i + lcp_t.index(lcp_r.index(lcp_t[i + lcp_t.index(lcp_r.index(lcp_t[i + lcp_t.index(lcp_r.index(lcp_t[i + lcp_t.index(lcp_r.index(lcp_t[i + lcp_t.index(lcp_r.index(lcp_t[i + lcp_t.index(lcp_r.index(lcp_t[i + lcp_t.index(lcp_r.index(lcp_t[i + lcp_t.index(lcp_r.index(lcp_t[i + lcp_t.index(lcp_r.index(lcp_t[i + lcp_t.index(lcp_r.index(lcp_t[i + lcp_t.index(lcp_r.index(lcp_t[i + lcp_t.index(lcp_r.index(lcp_t[i + lcp_t.index(lcp_r.index(lcp_t[i + lcp_t.index(lcp_r.index(lcp_t[i + lcp_t.index(lcp_r",
        "test": "assert solution(\"baaba\", \"ab\") == 2",
        "num_ids": 1749,
        "indeed": false
    },
    {
        "number": 4042,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    \n    if 0 < x < 5:\n        a = int(x * 10)\n        b = int(x * 100) % 10\n        c = 10 - b\n        d = (b * 10) % 10\n        e = 10 - d\n        f = int(x * 10000) % 10\n        g = (f * 10) % 10\n        h = 10 - g\n        i = (g * 10) % 10\n        j = 10 - i\n        k = int(x * 100000) % 10\n        l = (k * 10) % 10\n        m = 10 - l\n        n = (l * 10) % 10\n        o = 10 - n\n        \n        if a == c == e == o:\n            return f\"{a} {b} {c} {d} {e} {f} {g} {h} {i} {j} {k} {l} {m} {n} {o}\"\n        \n        if a == b == d == f == h == j == l == n:\n            return f\"{a} {b} {c} {d} {e} {f} {g} {h} {i} {j} {k} {l} {m} {n} {o}\"\n        \n        if c == d == e == f == g == h == i == l == m == o:\n            return f\"{a} {b} {c} {d} {e} {f} {g} {h} {i} {j} {k} {l} {m} {n} {o}\"\n        \n        if b == c == d == e == f == g == h == i == j == k:\n            return f\"{a} {b} {c} {d} {e} {f} {g} {h} {i} {j} {k} {l} {m} {n} {o}\"\n        \n        if a == c == e == o or b == c == e == o or c == d == e == o:\n            return f\"{a} {b} {c} {d} {e} {f} {g} {h} {i} {j} {k} {l} {m} {n} {o}\"\n        \n        if d == e == f == g == h == i == j == k == l == m:\n            return f\"{a} {b} {c} {d} {e} {f} {g} {h} {i} {j} {k} {l} {m} {n} {o}\"\n        \n        if a == b == c or a == b == d or a == b == e or a == c == d or a == c == e or a == d == e or b == c == d or b == c == e or b == d == e or c == d == e:\n            return f\"{a} {b} {c} {d} {e} {f} {g} {h} {i} {j} {k} {l} {m} {n} {o}\"\n        \n        if a == b or a == c or a == d or a == e or b == c or b == d or b == e or c == d or c == e or d == e:\n            return f\"{a} {b} {c} {d} {e} {f} {g} {h} {i} {j} {k} {l} {m} {n} {o}\"\n        \n        if a == b == c == d == e == f or a == b == c == d == e == g or a == b == c == d == e == h or a == b == c == d == f == g or a == b == c == d == f == h or a == b == c == e == f == g or a == b == c == e == f == h or a == b == d == f == g or a == b == d == f == h or a == b == e == f == g or a == b == e == f == h or a == c == d == f == g or a == c == d == f == h or a == c == e == f == g or a == c == e == f == h or a == d == f == g or a == d == f == h or a == e == f == g or a == e == f == h:\n            return f\"{a} {b} {c} {d} {e} {",
        "test": "assert solution('2.572479') == '10 3', 'Solution 1 does not work for input 2.572479'",
        "num_ids": 1922,
        "indeed": false
    },
    {
        "number": 4043,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if n <= 2 or d <= 0 or k <= 0 or n - 1 > d:\n        return \"NO\"\n\n    import networkx as nx\n\n    graph = nx.Graph()\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u, v = map(int, input().split())\n        adj[u].append(v)\n        adj[v].append(u)\n        graph.add_edge(u, v)\n\n    leaves = [u for u, degree in graph.degree() if degree <= k]\n    max_degree = max(graph.degree(u) for u in leaves)\n    leaves = [u for u in leaves if graph.degree(u) == max_degree]\n\n    if leaves:\n        leaves.sort()\n        return \"YES\\n\" + \" \".join(f\"{u} {v}\" for u in leaves for v in leaves if graph.has_edge(u, v)) + \"\\n\"\n    else:\n        return \"NO\\n\"",
        "test": "assert solution(\"6 2 3\") == \"NO\"",
        "num_ids": 1863,
        "indeed": false
    },
    {
        "number": 4044,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    if a + b < x:\n        return \"Invalid input\"\n    \n    s = \"\"\n    for i in range(a + b):\n        if s.count(\"1\") == x - 1:\n            s += \"0\"\n        else:\n            s += \"1\"\n    \n    return s",
        "test": "assert solution(\"3 3 3\") == \"101100\"",
        "num_ids": 688,
        "indeed": false
    },
    {
        "number": 4045,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = map(str, stdin.split())\n    a = list(s)\n    b = list(t)\n\n    if s in a or s in b or t in a or t in b:\n        return \"NO\"\n\n    a.sort()\n    b.sort()\n\n    for i in range(1, len(a)):\n        if a[i]!= a[i - 1]:\n            a[i] = 'b'\n\n    for i in range(1, len(b)):\n        if b[i]!= b[i - 1]:\n            b[i] = 'c'\n\n    res = \"\"\n    for i in range(len(a)):\n        res += a[i]\n        res += b[i]\n\n    if len(res) % 3!= 0:\n        res += 'a'\n\n    return \"YES\" + res",
        "test": "assert solution(\"3\\naa\\nbc\") == \"YES\\nacbacbab\"",
        "num_ids": 1531,
        "indeed": false
    },
    {
        "number": 4046,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, *q = map(int, stdin.split())\n    if n - len(set(q)) > 1:\n        return -1\n    q.sort(reverse=True)\n    for i in range(n):\n        if q[i] - i == n - 1:\n            return sorted(range(1, n + 1))\n    return -1\n",
        "test": "assert solution('5 1 1 1\\n') == '1 2 3 4 5\\n'",
        "num_ids": 955,
        "indeed": false
    },
    {
        "number": 4047,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, *x = map(int, stdin.split())\n    \n    x.sort()\n    \n    left = x[0]\n    right = x[-1]\n    \n    if left!= right:\n        return \"0\"\n    \n    if left == 0:\n        return \"1\"\n    \n    def coin_count(x: int) -> int:\n        if x == 0:\n            return 1\n        else:\n            return coin_count(x - 1) + coin_count(x)\n    \n    left_count = coin_count(left)\n    right_count = coin_count(right)\n    \n    if left_count > right_count:\n        return str(left_count)\n    else:\n        return str(right_count)\n    \n",
        "test": "assert solution(\"5\\n2 2 2 3 3\\n\") == \"2\"",
        "num_ids": 893,
        "indeed": false
    },
    {
        "number": 4048,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    i, j = 1, 1\n    while True:\n        if i * j == n:\n            break\n        elif i * j < n:\n            count += 1\n            i += 1\n        else:\n            count += 1\n            j += 1\n    return str(count)",
        "test": "assert solution(\"10\") == \"5\"",
        "num_ids": 655,
        "indeed": false
    },
    {
        "number": 4049,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, a1, a2, a3, b1, b2, b3 = map(int, stdin.split())\n    min_rounds = 0\n    max_rounds = 0\n\n    for i in range(n):\n        a_rock, a_paper, a_scissors = a1 - i * a2, a2 - i * a3, a3 - i * a1\n        b_rock, b_paper, b_scissors = b1 - i * b2, b2 - i * b3, b3 - i * b1\n\n        if a_rock == b_scissors or a_scissors == b_paper or a_paper == b_rock:\n            max_rounds = max(max_rounds, i + 1)\n        else:\n            min_rounds = min(min_rounds, i + 1)\n\n    return f\"{min_rounds} {max_rounds}\"\n",
        "test": "assert solution(\"15\\n5 5 5\\n5 5 5\") == \"0 15\"",
        "num_ids": 1236,
        "indeed": false
    },
    {
        "number": 4050,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    blocks = []\n    for i in range(n):\n        left = right = i\n        while left > 0 and a[left-1] == a[i]:\n            left -= 1\n        while right < n and a[right] == a[i]:\n            right += 1\n        blocks.append((left, right))\n    blocks.sort(key=lambda x: sum(a[x[0]:x[1]+1]))\n    ans = []\n    for i in range(len(blocks)):\n        l, r = blocks[i]\n        if i == 0 or (l!= blocks[i-1][1] + 1):\n            ans.append((l, r))\n    k = len(ans)\n    print(k)\n    for i in range(k):\n        l, r = ans[i]\n        print(l, r)\n    return \"\"",
        "test": "assert solution(input()) == \"2\\n3 4\\n1 1\\n\", \"Test case 2 failed\"",
        "num_ids": 1268,
        "indeed": false
    },
    {
        "number": 4051,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n\n    # Spaghetti sort\n    stack = [[0] * n for _ in range(n)]\n    for i in range(n):\n        stack[i][arr[i] - 1] = 1\n\n    while any(s!= [0] * n for s in stack):\n        max_height = -1\n        for i in range(n):\n            if stack[i].count(1) > max_height:\n                max_height = stack[i].count(1)\n                max_index = i\n\n        for i in range(n):\n            if stack[i].count(1) == max_height:\n                if i > max_index:\n                    stack[max_index].pop()\n                else:\n                    stack[i].pop(0)\n                arr.append(max_height)\n                break\n\n        stack[max_index] = [0] * n\n\n    # Check if the array can be sorted correctly\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1] > 2:\n            return \"NO\"\n\n    return \"YES\"\n",
        "test": "assert solution(\"3\\n1 2 3\") == \"YES\"",
        "num_ids": 1383,
        "indeed": false
    },
    {
        "number": 4052,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n    s.replace(\" \", \"\")\n    t.replace(\" \", \"\")\n    \n    # check if t is a substring of s\n    if t in s:\n        return \"0\"\n    \n    # check if it is possible to obtain t by swapping adjacent characters\n    moves = set()\n    for i in range(n):\n        if s[i]!= t[i]:\n            for j in range(i + 1, n):\n                if s[j]!= t[j]:\n                    moves.add((i, j))\n                    moves.add((j, i))\n    \n    if not moves:\n        return \"-1\"\n    \n    # count the number of moves\n    k = len(moves)\n    \n    # print the moves\n    for move in moves:\n        i, j = move\n        print(i + 1, j + 1)\n    \n    # return the number of moves\n    return k",
        "test": "assert solution('4\\nabcd\\naccd\\n') == '-1'",
        "num_ids": 1355,
        "indeed": false
    },
    {
        "number": 4053,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    prefixes = stdin.split()[1:]\n    suffixes = stdin.split()[1:]\n    prefix_chars = ['P'] * len(prefixes)\n    suffix_chars = ['S'] * len(suffixes)\n\n    for i in range(1, n):\n        prefix_chars[i] = 'P'\n        suffix_chars[i] = 'S'\n\n    for i in range(1, len(prefixes)):\n        if len(set(prefixes[i]) & set(prefixes[i - 1])) > 0:\n            prefix_chars[i] = 'P'\n\n    for i in range(1, len(suffixes)):\n        if len(set(suffixes[i]) & set(suffixes[i - 1])) > 0:\n            suffix_chars[i] = 'S'\n\n    return ''.join(prefix_chars + suffix_chars)\n\n\ndef",
        "test": "assert solution(\"3\\na\\naa\\naa\\n\") == \"PPSS\"",
        "num_ids": 2269,
        "indeed": false
    },
    {
        "number": 4054,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    return str(max(a))",
        "test": "assert solution(\"3 6 9 12 15\") == \"2\"",
        "num_ids": 478,
        "indeed": false
    },
    {
        "number": 4055,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    house = [int(x) for x in stdin.split()[1:]]\n\n    def find_min_k(house):\n        flats = sorted(set(house))\n        min_k = 0\n        for i in range(1, len(flats)):\n            if house[i] == 0 and house[i - 1] == 0 and house[i + 1] == 0:\n                min_k = max(min_k, i)\n        return min_k\n\n    return str(find_min_k(house))",
        "test": "assert solution(open(\"input.txt\", \"r\").read()) == \"0\", \"Second example failed\"",
        "num_ids": 999,
        "indeed": false
    },
    {
        "number": 4056,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                count += 1\n                \n    return str(count)",
        "test": "assert solution(open(\"input.txt\").read().strip()) == \"1\", \"Test 1 failed\"",
        "num_ids": 583,
        "indeed": false
    },
    {
        "number": 4057,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    coins = list(map(int, stdin.split()))\n    n = len(coins)\n    pockets = [[] for _ in range(n+1)]\n    used_coins = []\n    \n    for coin in coins:\n        for i in range(1, n+1):\n            if i == coin:\n                pockets[i].append(coin)\n            else:\n                if pockets[i] and pockets[i][0] == coin:\n                    used_coins.append(coin)\n                    pockets[i].pop(0)\n                    break\n                if not pockets[i]:\n                    pockets[i].append(coin)\n                    break\n                \n    return str(len(used_coins))",
        "test": "assert solution(\"6\\n1 2 4 3 3 2\") == \"2\"",
        "num_ids": 824,
        "indeed": false
    },
    {
        "number": 4058,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def find_heater(a, pos):\n        for i in range(pos - r + 1, pos + r):\n            if a[i]:\n                return i\n        return -1\n\n    def min_heaters_to_warm_up_whole_house(a):\n        max_pos = max(i for i, x in enumerate(a) if x)\n        min_heaters = 1\n        for i in range(max_pos):\n            pos = find_heater(a, i)\n            if pos == -1:\n                return -1\n            if pos == i:\n                min_heaters += 1\n            else:\n                return -1\n        return min_heaters\n\n    min_heaters = min_heaters_to_warm_up_whole_house(a)\n    return str(min_heaters) if min_heaters!= -1 else \"IMPOSSIBLE\"\n",
        "test": "assert solution(\"5 3\\n1 0 0 0 1\\n\") == \"2\\n\"",
        "num_ids": 1435,
        "indeed": false
    },
    {
        "number": 4059,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    count = 0\n    for a in range(1, n+1):\n        for b in range(1, n-a+1):\n            c = n - a*b\n            if c > 0 and a*b + c == n:\n                count += 1\n\n    return str(count)",
        "test": "assert solution(\"3\") == \"3\", \"Sample Input: 3, Expected Output: 3\"",
        "num_ids": 493,
        "indeed": false
    },
    {
        "number": 4060,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n\n    def change_type(i: int, s: str) -> str:\n        if s[i] == ')':\n            return '('\n        return ')'\n\n    def is_regular(s: str) -> bool:\n        stack = []\n        for i, c in enumerate(s):\n            if c == '(':\n                stack.append(i)\n            elif c == ')':\n                if not stack:\n                    return False\n                top = stack.pop()\n                if change_type(top, s)!= s:\n                    return False\n                stack.append(i)\n        return not stack\n\n    positions = []\n    for i in range(n):\n        if is_regular(s):\n            positions.append(i)\n\n    return str(len(positions))\n",
        "test": "assert solution(\"()()()\") == \"0\"",
        "num_ids": 681,
        "indeed": false
    },
    {
        "number": 4061,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    s, t = set(s), set(t)\n    max_length = 0\n    for i in range(1, len(s) - len(t) + 1):\n        j = 0\n        while j <= len(s) - len(t) - i:\n            if s[j:j + len(t)] == t:\n                max_length = max(max_length, i)\n                j += 1\n            else:\n                j += 1\n    return str(max_length)",
        "test": "assert solution(\"baaba\") == \"2\"",
        "num_ids": 709,
        "indeed": false
    },
    {
        "number": 4062,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    # take input from stdin\n    a, b, c, d = map(int, stdin.split())\n\n    # check if a \\leq x \\leq b and c\\leq y \\leq d hold\n    if a <= 0 or b <= 0 or c <= 0 or d <= 0:\n        return \"Error\"\n\n    # check if x and y are integers\n    if not (isinstance(a, int) and isinstance(b, int) and isinstance(c, int) and isinstance(d, int)):\n        return \"Error\"\n\n    # calculate maximum possible value of x \\times y\n    max_x_times_y = a * b * c * d\n\n    return str(max_x_times_y)",
        "test": "assert solution(\"1 2 1 1\") == \"2\"",
        "num_ids": 729,
        "indeed": false
    },
    {
        "number": 4063,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    d = list(map(int, stdin.split()[1:]))\n\n    ARC_count = 0\n    ABC_count = 0\n\n    for difficulty in d:\n        if difficulty >= 5:\n            ARC_count += 1\n        else:\n            ABC_count += 1\n\n    if ARC_count == ABC_count:\n        return str(ARC_count)\n    else:\n        return str(min(ARC_count, ABC_count))",
        "test": "assert solution(\"8\\n1 2 3 4 5 6 7 8\") == \"4\"",
        "num_ids": 713,
        "indeed": false
    },
    {
        "number": 4064,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    \n    max_good_times = 0\n    current_good_times = 0\n    \n    for i in range(n):\n        current_time = i * h\n        \n        if l <= current_time < r:\n            current_good_times += 1\n            if current_good_times > max_good_times:\n                max_good_times = current_good_times\n        else:\n            current_good_times = 0\n    \n    return str(max_good_times)\n\ntest_input = '''7 24 21 23\n16 17 14 20 20 11 22'''\n\nprint(solution(test_input))",
        "test": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == \"3\"",
        "num_ids": 762,
        "indeed": false
    },
    {
        "number": 4065,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = sorted(set(a))\n    p = len(a)\n    for i in range(1, p - 1):\n        if a[i + 1] > a[i] * 2:\n            p = i + 1\n            break\n\n    return str(p)",
        "test": "assert solution(\"5\\n2 10 50 110 250\\n\") == \"1\"",
        "num_ids": 1001,
        "indeed": false
    },
    {
        "number": 4066,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    a.sort()\n\n    min_lcm = a[0] * a[1]\n\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            if (a[i] * a[j]) % min_lcm == 0:\n                min_lcm = (a[i] * a[j])\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i] * a[j]) == min_lcm:\n                return f\"{i + 1} {j + 1}\"\n",
        "test": "assert solution(\"5\\n5 2 11 3 7\\n\") == \"2 4\"",
        "num_ids": 1317,
        "indeed": false
    },
    {
        "number": 4067,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if n % 3!= 0:\n        return \"\"\n\n    def get_ternary(digit: int) -> str:\n        return \"0\" * (digit // 3) + \"1\" if digit % 3 == 0 else \"2\"\n\n    def count_zeros(s: str) -> int:\n        return s.count(\"0\")\n\n    def count_ones(s: str) -> int:\n        return s.count(\"1\")\n\n    def count_twos(s: str) -> int:\n        return s.count(\"2\")\n\n    def count_zeros_ones(s: str) -> int:\n        return count_zeros(s) + count_ones(s)\n\n    def count_ones_twos(s: str) -> int:\n        return count_ones(s) + count_twos(s)\n\n    def replace_zeros(s: str, zeros: int) -> str:\n        return s[:zeros] + \"0\" + s[zeros + 1 :]\n\n    def replace_ones(s: str, ones: int) -> str:\n        return s[:ones] + \"1\" + s[ones + 1 :]\n\n    def replace_twos(s: str, twos: int) -> str:\n        return s[:twos] + \"2\" + s[twos + 1 :]\n\n    def replace(s: str, zeros: int, ones: int, twos: int) -> str:\n        return replace_zeros(s, zeros) + replace_ones(s, ones) + replace_twos(s, twos)\n\n    def solve() -> str:\n        zeros = count_zeros(s)\n        ones = count_ones(s)\n        twos = count_twos(s)\n        if zeros >= ones and ones >= twos:\n            return replace(s, zeros, ones, twos)\n\n        min_diff = 10**10\n        for i in range(1, 3):\n            zeros = count_zeros(s)\n            ones = count_ones(s)\n            twos = count_twos(s)\n            diff = abs(zeros - ones) + abs(ones - twos)\n            if diff < min_diff:\n                min_diff = diff\n                min_zeros, min_ones, min_twos = zeros, ones, twos\n\n        return replace(s, min_zeros, min_ones, min_twos)\n\n    return solve()",
        "test": "assert solution(\"6\\n000000\") == \"001122\"",
        "num_ids": 1499,
        "indeed": false
    },
    {
        "number": 4068,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def count_ways(i: int) -> int:\n        if i == 0:\n            return 1\n        else:\n            return count_ways(i - 1) * (a[i - 1] - a[i - 2]) % (10 ** 9 + 7)\n\n    def count_ways_without_breaking_steps(i: int) -> int:\n        if i == 0:\n            return 1\n        else:\n            return (\n                count_ways_without_breaking_steps(i - 1)\n                * (a[i - 1] - a[i - 2] + 1)\n                % (10 ** 9 + 7)\n            )\n\n    ways_to_top_without_breaking_steps = count_ways_without_breaking_steps(n)\n    ways_to_top = count_ways(n)\n\n    return str(ways_to_top_without_breaking_steps - ways_to_top)\n",
        "test": "assert solution(\"3 1\\n1\\n\") == \"0\"",
        "num_ids": 987,
        "indeed": false
    },
    {
        "number": 4069,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n\n    def move(x, d):\n        return x + d\n\n    steps = [move(X, D)]\n    for _ in range(K - 1):\n        steps.append(move(steps[-1], D))\n\n    abs_steps = [abs(steps[i] - steps[i - 1]) for i in range(1, len(steps))]\n    return str(min(abs_steps))",
        "test": "assert solution(\"10 3 -5\") == \"1\"",
        "num_ids": 589,
        "indeed": false
    },
    {
        "number": 4070,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 100:\n        return \"0\"\n    if n < 1000:\n        return \"1\"\n    if n < 10000:\n        return \"2\"\n    if n < 100000:\n        return \"3\"\n    if n < 1000000:\n        return \"4\"\n    if n < 10000000:\n        return \"5\"\n    if n < 100000000:\n        return \"6\"\n    if n < 1000000000:\n        return \"7\"\n    if n < 10000000000:\n        return \"8\"\n    if n < 100000000000:\n        return \"9\"\n    return \"10\"",
        "test": "assert solution(\"14\") == \"0\"",
        "num_ids": 554,
        "indeed": false
    },
    {
        "number": 4071,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    result = a * 27\n    return str(result)",
        "test": "assert solution(\"3\") == \"27\"",
        "num_ids": 218,
        "indeed": false
    },
    {
        "number": 4072,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 10 or a > 999:\n        return \"0\"\n    return \"1\"",
        "test": "assert solution(\"927\") == \"1\"",
        "num_ids": 277,
        "indeed": false
    },
    {
        "number": 4073,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(x) for x in stdin.split()[1:]]\n    a = [x if x > 0 else x * -1 for x in a]\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if i == n - 1:\n            break\n        ans += abs(a[i] - a[i + 1])\n    return str(ans)",
        "test": "assert solution(\"4\\n2 5 3 1\\n\") == \"4\"",
        "num_ids": 713,
        "indeed": false
    },
    {
        "number": 4074,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    n, k = map(int, stdin.split())\n    result = []\n\n    for i in range(k):\n        count = 0\n        temp_n = n\n        while temp_n >= 0:\n            count += 1\n            temp_n -= 1\n\n        result.append(count)\n\n    gcd_result = 1\n    for num in result:\n        gcd_result = gcd(gcd_result, num)\n\n    return str(gcd_result)\n\ndef",
        "test": "assert solution(\"5\\n8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733\\n\") == \"2\\n8\\n1\\n999999733\\n1\\n\"",
        "num_ids": 1533,
        "indeed": false
    },
    {
        "number": 4075,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    inputs = stdin.split('\\n')\n    N, M = [int(x) for x in inputs[0].split()]\n    switches = [[int(x) for x in inputs[i+1].split()] for i in range(N)]\n    p = [int(x) for x in inputs[N+1].split()]\n\n    # Calculate combinations\n    count = 0\n    for i in range(1, 1 << N):\n        on_count = 0\n        for j in range(N):\n            if i & (1 << j):\n                on_count += sum(switches[j])\n        if on_count % 2 == p[0]:\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\\n\") == \"1\"",
        "num_ids": 1339,
        "indeed": false
    },
    {
        "number": 4076,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n\n    # Calculate the angular velocity of the minute hand\n    delta_time = (H * 3600 + M * 60) / 120\n    angular_velocity = 360 / delta_time\n\n    # Calculate the distance between the unfixed endpoints of the hands\n    distance = A + B * math.cos(angular_velocity * (H * 60 + M * 1))\n\n    return f\"{distance:.9f}\"",
        "test": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\", \"Incorrect solution for sample input 3 4 9 0\"",
        "num_ids": 1361,
        "indeed": false
    },
    {
        "number": 4077,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    count = 0\n    for i in range(n):\n        if a[i] == m:\n            count += 1\n    return str(count)\n\ndef",
        "test": "assert solution(\"3 1\\n1 1 1\") == \"6\"",
        "num_ids": 717,
        "indeed": false
    },
    {
        "number": 4078,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    segments = []\n\n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        segments.append([l, r])\n\n    def get_max_sum(indices):\n        total = 0\n        max_sum = 0\n\n        for i in range(n):\n            if i in indices:\n                total += a[i]\n            else:\n                total -= a[i]\n\n            max_sum = max(max_sum, total)\n\n        return max_sum\n\n    def get_min_sum(indices):\n        total = 0\n        min_sum = 0\n\n        for i in range(n):\n            if i in indices:\n                total += a[i]\n            else:\n                total -= a[i]\n\n            min_sum = min(min_sum, total)\n\n        return min_sum\n\n    def is_valid(indices):\n        max_sum = get_max_sum(indices)\n        min_sum = get_min_sum(indices)\n\n        return max_sum - min_sum <= 1\n\n    solutions = []\n\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            if is_valid([i - 1, j - 1]):\n                solutions.append([i - 1, j - 1])\n\n    for i in range(2, n + 1):\n        for j in range(i, n + 1):\n            if is_valid([i - 1, j - 1, n - 1 - i, n - 1 - j]):\n                solutions.append([i - 1, j - 1, n - 1 - i, n - 1 - j])\n\n    if not solutions:\n        return \"0\\n0\\n\"\n\n    q = min(len(solutions), m)\n    c = [0] * q\n\n    for i in range(q):\n        c[i] = solutions[i][0]\n\n    return f\"{get_max_sum(c)}\\n{q}\\n{c[0]}\\n{c[1]}\\n\" if q == 2 else f\"{len(solutions)}\\n{solutions[0]}\\n{solutions[1]}\\n\"\n",
        "test": "assert solution(input()) == \"7\\n2\\n3 2\"",
        "num_ids": 2598,
        "indeed": false
    },
    {
        "number": 4079,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    def is_diverse(s: str) -> bool:\n        if len(set(s))!= len(s):\n            return False\n        positions = [i for i, c in enumerate(s) if c in s]\n        if len(positions) < 2:\n            return False\n        return all(positions[i] + 1 == positions[i + 1] for i in range(len(positions) - 1))\n\n    strings = stdin.split('\\n')\n    result = []\n    for s in strings:\n        if is_diverse(s):\n            result.append('Yes')\n        else:\n            result.append('No')\n\n    return '\\n'.join(result)\n",
        "test": "assert solution(\"fced\\nxyz\\nr\\ndabcef\\naz\\naa\\nbad\\nbabc\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\"",
        "num_ids": 741,
        "indeed": false
    },
    {
        "number": 4080,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.split())\n        segments.append([l, r])\n\n    def max_sum(a, segments):\n        max_sum = 0\n        for segment in segments:\n            left, right = segment\n            max_sum += max(a[left - 1], a[right])\n        return max_sum\n\n    b = []\n    for i in range(n):\n        max_sum_so_far = max_sum(a, segments)\n        if max_sum_so_far == 0:\n            b.append(a[i])\n        else:\n            b.append(max_sum_so_far - 1)\n\n    max_sum_so_far = max_sum(b, segments)\n\n    q = len(b)\n    c = []\n    for i in range(q):\n        max_sum_so_far -= 1\n        if max_sum_so_far == 0:\n            c.append(i + 1)\n            max_sum_so_far = max_sum(b, segments)\n\n    if len(set(c)) > 1:\n        print(max(set(c)))\n    else:\n        print(c[0])\n\n    return \"Case #{}: {}\".format(1, max_sum_so_far)\n",
        "test": "assert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"",
        "num_ids": 2032,
        "indeed": false
    },
    {
        "number": 4081,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    max_length = 1\n    current_length = 1\n    current_sequence = [a[0]]\n\n    for i in range(1, n):\n        if a[i] == current_sequence[-1]:\n            current_length += 1\n        else:\n            current_sequence.append(a[i])\n            current_length = 1\n\n        if current_length > max_length:\n            max_length = current_length\n\n    sequence = current_sequence\n    sequence.sort()\n    sequence.reverse()\n\n    result = \"\"\n    for num in sequence:\n        if num == a[0]:\n            result += \"L\"\n        else:\n            result += \"R\"\n\n    return f\"{max_length}\\n{result}\"\n\n\ntest_case = \"7\\n1 3 5 6 7 4 2\"\nprint(solution(test_case))\n\ntest_case = \"3\\n1 2 3\"\nprint(solution(test_case))\n\ntest_case = \"4\\n1 2 4 3\"\nprint(solution(test_case))",
        "test": "assert solution(\"7\\n1 3 5 6 7 4 2\\n\") == \"7\\nLRLRLLL\\n\"",
        "num_ids": 1130,
        "indeed": false
    },
    {
        "number": 4082,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    max_length = 0\n    current_length = 1\n\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n\n    max_length = max(max_length, current_length)\n\n    return str(max_length)",
        "test": "assert solution(\"\"\"5",
        "num_ids": 729,
        "indeed": false
    },
    {
        "number": 4083,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    left = 0\n    right = 0\n    count = 0\n\n    while count < k:\n        if (right - left) % 2 == 0:\n            left += 1\n        else:\n            right += 1\n\n        if right - left == n:\n            count += 1\n\n    return str(min(left, right))\n",
        "test": "assert solution(\"5 3\\n1 2 3 4 5\\n\") == \"2\"",
        "num_ids": 779,
        "indeed": false
    },
    {
        "number": 4084,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    red = 0\n    blue = 0\n\n    while blue < A + B:\n        blue += red\n        red = max(0, red - A)\n\n    return str(blue)",
        "test": "assert solution('5 1 2 3 4') == '12'",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 4085,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.split('\\n')[0])\n    for _ in range(queries):\n        n = int(stdin.split('\\n')[1])\n        divisors = list(map(int, stdin.split('\\n')[2].split()))\n        if len(set(divisors)) == 1 and divisors[0] == 1:\n            print(-1)\n            continue\n        x = 1\n        while True:\n            if x not in divisors:\n                break\n            x += 1\n        print(x)",
        "test": "assert solution(\"1\\n2\\n1\\n2\\n1\\n2\") == \"4\\n2\"",
        "num_ids": 1070,
        "indeed": false
    },
    {
        "number": 4086,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    seen = set()\n    result = []\n    left = 0\n    right = 0\n    \n    while right < n:\n        if a[right] not in seen:\n            seen.add(a[right])\n            result.append(a[right])\n            left += 1\n        right += 1\n    \n    return f\"{left} {' '.join(map(str, result))}\"",
        "test": "assert solution(\"5\\n2 4 2 4 4\") == \"2\\n2 4\\n\"",
        "num_ids": 890,
        "indeed": false
    },
    {
        "number": 4087,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    digits = [int(d) for d in str(a)]\n    sum_of_digits = sum(digits)\n    \n    if sum_of_digits % 4 == 0:\n        if sum_of_digits % 3 == 0:\n            return str(a + 1)\n        else:\n            while sum_of_digits % 3!= 0:\n                a += 1\n                digits = [int(d) for d in str(a)]\n                sum_of_digits = sum(digits)\n            return str(a)\n    else:\n        while sum_of_digits % 4!= 0:\n            a += 1\n            digits = [int(d) for d in str(a)]\n            sum_of_digits = sum(digits)\n        return str(a)",
        "test": "assert solution(\"432\") == \"435\"",
        "num_ids": 932,
        "indeed": false
    },
    {
        "number": 4088,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split('\\n')[0])\n    for _ in range(test_cases):\n        s, m, b = stdin.split('\\n')[1].split()\n        b = list(map(int, b.split()))\n        s = list(s)\n        t = \"\"\n        for i in range(1, len(s)):\n            if s[i]!= s[i - 1]:\n                t += s[i - 1]\n        if t == s:\n            print(\" \".join(map(str, b)))\n        else:\n            print(\" \".join(map(str, [0] * m)))",
        "test": "assert solution(\"aab\")[0] == \"aab\"",
        "num_ids": 1253,
        "indeed": false
    },
    {
        "number": 4089,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    num = 1\n    names = 'a'\n    while num <= N:\n        print(names, end=' ')\n        if num % 26 == 0:\n            names = names[:-1] + chr(ord(names[-1]) + 1)\n        else:\n            names = names[:-1] + chr(ord(names[-1]) + 1)\n        num += 1\n    return names",
        "test": "assert solution(\"1\\n\") == \"b\", \"Sample Input 1\"",
        "num_ids": 1770,
        "indeed": false
    },
    {
        "number": 4090,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    text = stdin.split()[1:]\n    text = ''.join(text)\n    segments = []\n    for i in range(len(text)):\n        for j in range(i + 1, len(text) + 1):\n            segments.append(text[i:j])\n    min_len = len(text)\n    for i in range(1, len(segments) - 1):\n        for j in range(i + 1, len(segments)):\n            if len(set(segments[i]) & set(segments[j])) == 2:\n                abbreviation = ''.join(sorted(set(segments[i]) | set(segments[j])))\n                if len(abbreviation) < min_len:\n                    min_len = len(abbreviation)\n    return str(min_len)",
        "test": "assert solution(\"a ab a a b ab a a b c\") == 13",
        "num_ids": 1347,
        "indeed": false
    },
    {
        "number": 4091,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # Build a dp table to store the max profit of solutions\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][1] = a[i - 1]\n\n    for i in range(2, k + 1):\n        for j in range(1, n + 1):\n            if j == 1:\n                dp[j][i] = dp[j - 1][i - 1]\n            else:\n                dp[j][i] = max(dp[j - 1][i], dp[j][i - 1] + a[j - 1])\n\n    # Find the maximum profit in each day\n    max_profit = 0\n    for i in range(1, n + 1):\n        max_profit = max(max_profit, dp[i][k])\n\n    # Find the optimal distribution\n    opt = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        opt[i][1] = 1\n\n    for i in range(2, k + 1):\n        for j in range(1, n + 1):\n            if j == 1:\n                opt[j][i] = opt[j - 1][i - 1]\n            else:\n                opt[j][i] = opt[j - 1][i]\n                if dp[j - 1][i] == dp[j][i - 1] + a[j - 1]:\n                    opt[j][i] = max(opt[j][i], opt[j - 1][i] + 1)\n\n    # Find the maximum profit in each day\n    max_profit = 0\n    for i in range(1, n + 1):\n        max_profit = max(max_profit, max(dp[i][k], opt[i][k]))\n\n    # Print the maximum profit and the optimal distribution\n    return str(max_profit) + '\\n' +''.join(map(str, opt[1][n]))\n",
        "test": "assert solution(\"\"\"\\",
        "num_ids": 1644,
        "indeed": false
    },
    {
        "number": 4092,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    \n    a = list(set(a))\n    if a[0] == 0 or a[-1] == 0:\n        return \"0\"\n    \n    a.sort()\n    \n    def find_zero_sum_subsegment(start, end):\n        subsegment_sum = 0\n        for i in range(start, end):\n            subsegment_sum += a[i]\n            if subsegment_sum == 0:\n                return True\n        return False\n    \n    zero_sum_subsegments = []\n    start = 0\n    end = 1\n    \n    while end < n:\n        if find_zero_sum_subsegment(start, end):\n            zero_sum_subsegments.append((start, end-1))\n            start = end\n        end += 1\n    \n    if zero_sum_subsegments:\n        return str(len(zero_sum_subsegments))\n    else:\n        return \"0\"",
        "test": "assert solution(\"5\\n4 -2 3 -9 2\") == \"0\"",
        "num_ids": 1193,
        "indeed": false
    },
    {
        "number": 4093,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split('\\n')[0])\n    for _ in range(test_cases):\n        n, m = map(int, stdin.split('\\n')[1].split())\n        a = [0] * n\n        a[0] = 1\n        a[-1] = m\n        max_difference = abs(a[-1] - a[0])\n        for i in range(1, n-1):\n            a[i] = a[i-1] + a[i+1]\n            max_difference = max(max_difference, abs(a[i] - a[i+1]))\n        print(max_difference)",
        "test": "assert solution(input()) == '2\\n'",
        "num_ids": 1327,
        "indeed": false
    },
    {
        "number": 4094,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n\n    count = 0\n    multiple = 0\n\n    for number in range(1, 10**6 + 1):\n        if number % K == 0:\n            count += 1\n            if count == 1:\n                multiple = number\n\n    if count == 0:\n        return -1\n    else:\n        return str(multiple)",
        "test": "assert solution(\"7\") == \"7\"",
        "num_ids": 507,
        "indeed": false
    },
    {
        "number": 4095,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()[1:]))\n\n    def find_median(p):\n        sorted_p = sorted(p)\n        mid = len(sorted_p) // 2\n        return sorted_p[mid]\n\n    pairs = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(find_median(p[i:j + 1]) - m) <= 1:\n                pairs.append((i, j))\n\n    print(len(pairs))\n    return \"\\n\".join(map(str, pairs))\n\ninput_data = \"\"\"5 4\n2 4 5 3 1\"\"\"\n\nprint(solution(input_data))",
        "test": "assert solution(input().strip()) == \"1\"",
        "num_ids": 1111,
        "indeed": false
    },
    {
        "number": 4096,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    cups = 0\n    days = 0\n\n    for i, a in enumerate(a):\n        if cups + a <= m:\n            cups += a\n        else:\n            days += 1\n            cups = a\n\n    if days == 0:\n        return str(days)\n    else:\n        return \"-1\"",
        "test": "assert solution(\"7 10\\n1 3 4 2 1 4 2\\n\") == \"2\"",
        "num_ids": 742,
        "indeed": false
    },
    {
        "number": 4097,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1].split()))\n\n    # Check if the sequence is already an arithmetic progression\n    for i in range(len(b) - 1):\n        if b[i] + 1!= b[i + 1] or b[i] - 1!= b[i + 1]:\n            return -1\n\n    # Find the minimum number of elements to change to make the sequence an arithmetic progression\n    count = 0\n    i = 0\n    while i < len(b) - 1:\n        if b[i] + 1 == b[i + 1]:\n            count += 1\n            i += 1\n        elif b[i] - 1 == b[i + 1]:\n            count += 1\n            b[i] -= 1\n            i += 1\n        else:\n            break\n\n    return str(count)",
        "test": "assert solution(\"2\\n500 500\\n\") == \"0\"",
        "num_ids": 1239,
        "indeed": false
    },
    {
        "number": 4098,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def balanced(team: List[int]) -> bool:\n        if len(team) == 1:\n            return False\n        for i in range(len(team)):\n            for j in range(i + 1, len(team)):\n                if abs(team[i] - team[j]) > 5:\n                    return False\n        return True\n\n    teams = []\n    for i in range(k):\n        team = []\n        for j in range(n):\n            if j in teams:\n                continue\n            while not balanced(team + [j]):\n                team = team[:-1]\n            if len(team) == k:\n                break\n        if len(team)!= k:\n            continue\n        teams.append(team)\n\n    total = sum(len(t) for t in teams)\n    return str(max(total, len(teams)))",
        "test": "assert solution(input()) == \"2\\n\"",
        "num_ids": 1334,
        "indeed": false
    },
    {
        "number": 4099,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def count_points(a):\n        total = 0\n        for i in range(n-1, -1, -1):\n            total += a[i]\n        return total\n\n    count = count_points(a)\n    if count >= m:\n        return str(count - m)\n    return \"-1\"\n",
        "test": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"",
        "num_ids": 762,
        "indeed": false
    },
    {
        "number": 4100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    scores = [K] * N\n    for i in range(N - 1):\n        scores[i] -= 1\n    scores = [score for score in scores if score > 0]\n    result = []\n    for i in range(N):\n        if i in scores and A[i - 1] == 1:\n            result.append(\"Yes\")\n        else:\n            result.append(\"No\")\n    return \"\\n\".join(result)",
        "test": "assert solution(\"\"\"",
        "num_ids": 1180,
        "indeed": false
    },
    {
        "number": 4101,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = []\n    \n    for i in range(n):\n        row = list(map(int, stdin.split()))\n        matrix.append(row)\n    \n    inverse_rows = ['0' for _ in range(n)]\n    inverse_cols = ['0' for _ in range(m)]\n    \n    for i in range(n):\n        row_sum = sum(matrix[i])\n        if row_sum == m:\n            for j in range(m):\n                matrix[i][j] = 1 - matrix[i][j]\n                inverse_rows[i] = '1'\n        else:\n            for j in range(m):\n                matrix[i][j] = 1 - matrix[i][j]\n    \n    for j in range(m):\n        col_sum = sum(row[j] for row in matrix)\n        if col_sum == n:\n            for i in range(n):\n                matrix[i][j] = 1 - matrix[i][j]\n                inverse_cols[j] = '1'\n        else:\n            for i in range(n):\n                matrix[i][j] = 1 - matrix[i][j]\n    \n    for i in range(n):\n        for j in range(m):\n            matrix[i][j] = 1 - matrix[i][j]\n    \n    sorted_matrix = [[0 for _ in range(m)] for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(m):\n            sorted_matrix[i][j] = matrix[i][j]\n    \n    return 'YES' + ''.join(inverse_rows) + '\\n' + 'YES' + ''.join(inverse_cols) + '\\n' + ''.join([''.join(str(sorted_matrix[i][j]) for j in range(m)) for i in range(n)])\n\ndef",
        "test": "assert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\\n1011\"",
        "num_ids": 2626,
        "indeed": false
    },
    {
        "number": 4102,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    digits = [int(digit) for digit in stdin]\n    \n    if len(digits) == 1 and digits[0] == 0:\n        return \"Yes\"\n    \n    is_palindrome = True\n    \n    for i in range(len(digits)):\n        if digits[i]!= digits[-1-i]:\n            is_palindrome = False\n            break\n            \n    return \"Yes\" if is_palindrome else \"No\"",
        "test": "assert solution(\"373\") == \"Yes\"",
        "num_ids": 446,
        "indeed": false
    },
    {
        "number": 4103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, b, a = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n\n    # Initialize variables\n    max_segments = 0\n    total_charge = 0\n    is_exposed = 0\n    current_segment = 0\n\n    # Loop through segments\n    while current_segment < n:\n        if s[current_segment] == 1:\n            is_exposed = 1\n        else:\n            is_exposed = 0\n\n        # Calculate the charge to use\n        if is_exposed and total_charge < b:\n            total_charge += 1\n        elif total_charge < a:\n            total_charge += 1\n\n        # Update max segments and current segment\n        max_segments = max(max_segments, current_segment + 1)\n        current_segment += 1\n\n    return str(max_segments)\n",
        "test": "assert solution(",
        "num_ids": 1279,
        "indeed": false
    },
    {
        "number": 4104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    def evaluate_expression(expression: str) -> int:\n        stack = []\n        for token in expression.split():\n            if token.isdigit():\n                stack.append(int(token))\n            elif token in ['+', '-']:\n                b = stack.pop()\n                a = stack.pop()\n                if token == '+':\n                    stack.append(a + b)\n                else:\n                    stack.append(a - b)\n        return stack[0]\n\n    expression = stdin.strip()\n    if expression.count('-') == 0:\n        return \"0\"\n    elif expression.count('+') == 1:\n        return str(evaluate_expression(expression))\n    else:\n        return \"Error: Input is invalid. Both minus and plus signs are required.\"\n",
        "test": "assert solution(\"2+2\") == \"-46\"",
        "num_ids": 1205,
        "indeed": false
    },
    {
        "number": 4105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    # initialize the color choices of man and woman\n    b_choices = [0] * n\n    g_choices = [0] * n\n    \n    # try different color choices for each pair\n    for i in range(n):\n        for j in range(i + 1, n):\n            # check if colors are different\n            if b_choices[i] == b_choices[j] or g_choices[i] == g_choices[j]:\n                continue\n            \n            # check if there is a pair with the same color for man and woman\n            if b_choices[i] == g_choices[j] or g_choices[i] == b_choices[j]:\n                continue\n            \n            # find a new color for man and woman\n            b_choices[i] += 1\n            g_choices[j] += 1\n            \n            # check if the conditions are satisfied\n            if i > 0 and (b_choices[i] == b_choices[i - 1] or g_choices[i] == g_choices[i - 1]):\n                b_choices[i] -= 1\n                g_choices[j] -= 1\n                continue\n            \n            if i < n - 1 and (b_choices[i] == b_choices[i + 1] or g_choices[i] == g_choices[i + 1]):\n                b_choices[i] -= 1\n                g_choices[j] -= 1\n                continue\n            \n            if j > 0 and (b_choices[j] == b_choices[j - 1] or g_choices[j] == g_choices[j - 1]):\n                b_choices[i] -= 1\n                g_choices[j] -= 1\n                continue\n            \n            if j < n - 1 and (b_choices[j] == b_choices[j + 1] or g_choices[j] == g_choices[j + 1]):\n                b_choices[i] -= 1\n                g_choices[j] -= 1\n                continue\n            \n            # if all conditions are satisfied, print the new color choices\n            print(\"YES\")\n            print(b_choices[i], g_choices[i])\n            print(b_choices[j], g_choices[j])\n            return\n    \n    # if no suitable color choices are found, print \"NO\"\n    print(\"NO\")\n    return",
        "test": "assert solution(\"10 4\") == \"YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n\"",
        "num_ids": 2195,
        "indeed": false
    },
    {
        "number": 4106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    beauty_count = 0\n    for i in range(len(a) - 1):\n        if a[i] < a[i + 1]:\n            beauty_count += 1\n\n    if beauty_count < k:\n        return -1\n\n    dp = [[0] * (n + 1) for _ in range(x + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, x + 1):\n            dp[j][i] = dp[j][i - 1]\n\n            if a[i - 1] <= j:\n                dp[j][i] = max(dp[j][i], dp[j - a[i - 1]][i - 1] + a[i - 1])\n\n    return str(dp[x][n])",
        "test": "assert solution(\"6 1 5\\n10 30 30 70 10 10\") == \"-1\"",
        "num_ids": 1410,
        "indeed": false
    },
    {
        "number": 4107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(stdin.split()[1])\n    min_cost = float('inf')\n    for i in range(1, n + 1):\n        if s[i - 1] == '1':\n            cost = i\n        else:\n            cost = 0\n        if i - k >= 1:\n            min_cost = min(min_cost, i + k - 1 + cost)\n        if i + k <= n:\n            min_cost = min(min_cost, i - k + 1 + cost)\n    return str(min_cost)",
        "test": "assert solution(\"5 2\\n00100\") == \"3\"",
        "num_ids": 1137,
        "indeed": false
    },
    {
        "number": 4108,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    can_be_made_equal = True\n\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            can_be_made_equal = False\n            break\n\n    return \"Yes\" if can_be_made_equal else \"No\"\n",
        "test": "assert solution(\"ababcd\\nxyz\\n\") == \"No\"",
        "num_ids": 857,
        "indeed": false
    },
    {
        "number": 4109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = int(stdin.split()[1])\n    C = []\n    for _ in range(n):\n        c, a = map(int, stdin.split())\n        C.append((c, a))\n\n    A = []\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        A.append((a, b))\n\n    C = sorted(C, key=lambda x: (-x[0], x[1]))\n    A = sorted(A, key=lambda x: (-x[0], x[1]))\n\n    dp = [[0] * (x + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n\n    for i in range(n + 1):\n        for j in range(x + 1):\n            if i == 0:\n                dp[i][j] = 0\n            elif j == 0:\n                dp[i][j] = float('inf')\n            else:\n                for c, a in C:\n                    if i - 1 >= c:\n                        dp[i][j] = min(dp[i][j], dp[i - 1][j - a])\n                for a, b in A:\n                    if j - 1 >= b:\n                        dp[i][j] = min(dp[i][j], dp[i][j - b] + c)\n\n    if dp[n][x] == float('inf'):\n        return \"IMPOSSIBLE\"\n    else:\n        return dp[n][x]",
        "test": "assert solution(\"Takahashi\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n",
        "num_ids": 2697,
        "indeed": false
    },
    {
        "number": 4110,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    input_data = [int(x) for x in stdin.split()]\n    D, G = input_data[:2]\n    p = input_data[2:]\n    p_list = [x for x in p]\n\n    def perfect_bonus(p: int) -> int:\n        return max(0, 100 - p * 100)\n\n    problem_scores = [100 * i for i in range(1, D + 1)]\n    base_score = sum(problem_scores)\n\n    perfect_bonuses = [perfect_bonus(i) for i in range(1, D + 1)]\n    perfect_bonus_sum = sum(perfect_bonuses)\n\n    total_score = base_score + perfect_bonus_sum\n\n    while total_score < G:\n        best_problem = min(p_list, key=p_list.index)\n        p_list.remove(best_problem)\n        problem_scores.remove(best_problem)\n        base_score -= perfect_bonuses.pop(0)\n        perfect_bonus_sum -= perfect_bonuses.pop(0)\n        total_score = base_score + perfect_bonus_sum\n\n    return str(len(p_list))",
        "test": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"",
        "num_ids": 1444,
        "indeed": false
    },
    {
        "number": 4111,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort()\n\n    odd_sum = 0\n    even_sum = 0\n    indices = []\n\n    for i, weight in enumerate(a):\n        if i % 2 == 0:\n            even_sum += weight\n        else:\n            odd_sum += weight\n\n        if i < n - 1:\n            indices.append(i)\n\n        if even_sum == odd_sum:\n            return str(len(indices))\n\n    return \"0\"",
        "test": "assert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"",
        "num_ids": 886,
        "indeed": false
    },
    {
        "number": 4112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    a.sort(reverse=True)\n    beauty_sum = sum(a)\n\n    if x > len(a):\n        return -1\n\n    reposted_count = 0\n    reposted_beauty = 0\n\n    for i in range(x):\n        if i < k:\n            reposted_count += 1\n            reposted_beauty += a[i]\n        else:\n            reposted_beauty -= a[i - k]\n\n        if reposted_beauty > 0:\n            reposted_count += 1\n\n    return str(beauty_sum - reposted_beauty)",
        "test": "assert solution(\"6 1 5\\n10 30 30 70 10 10\") == \"-1\"",
        "num_ids": 1175,
        "indeed": false
    },
    {
        "number": 4113,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    \n    if N == 0:\n        return \"Yes\"\n    \n    cakes = N // 4\n    doughnuts = N % 4\n    \n    if cakes * 4 + doughnuts * 7 == N:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"5\") == \"No\"",
        "num_ids": 472,
        "indeed": false
    },
    {
        "number": 4114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1:n+1]))\n    y = list(map(int, stdin.split()[n+1:2*n+1]))\n    h = list(map(int, stdin.split()[2*n+1:]))\n    \n    center_x = 0\n    center_y = 0\n    max_altitude = 0\n    \n    for i in range(n):\n        max_altitude = max(max_altitude, h[i])\n        center_x += x[i]\n        center_y += y[i]\n    \n    center_x = center_x // n\n    center_y = center_y // n\n    \n    result = str(center_x) + \" \" + str(center_y) + \" \" + str(max_altitude)\n    \n    return result\n\ninput_data = \"\"\"4\n2 3 5\n2 1 5\n1 2 5\n3 2 5\"\"\"\n\noutput = solution(input_data)\nprint(output)",
        "test": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"",
        "num_ids": 1222,
        "indeed": false
    },
    {
        "number": 4115,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if S == S[::-1]:\n        return \"1\"\n    min_hugs = float(\"inf\")\n    for i in range(len(S)):\n        for j in range(i + 1, len(S) + 1):\n            palindrome = S[i:j]\n            if palindrome == palindrome[::-1]:\n                min_hugs = min(min_hugs, j - i)\n    return str(min_hugs)\n",
        "test": "assert solution(\"redcoder\") == \"1\"",
        "num_ids": 664,
        "indeed": false
    },
    {
        "number": 4116,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if 1 <= n <= 100:\n        for i in range(1, 10):\n            for j in range(1, 10):\n                if i * j == n:\n                    return \"Yes\"\n        return \"No\"\n    return \"Invalid Input\"",
        "test": "assert solution(\"10\") == \"Yes\"",
        "num_ids": 379,
        "indeed": true
    },
    {
        "number": 4117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, *lengths = map(int, stdin.split())\n    lengths = set(lengths)\n    if len(lengths)!= len(lengths):\n        return 'No'\n\n    def backtrack(left, target, used):\n        if len(used) == 3:\n            if target == 0:\n                return 1\n            else:\n                return 0\n\n        count = 0\n        for i in range(left, n + 1):\n            if i not in used:\n                used.add(i)\n                count += backtrack(i + 1, target - lengths[i], used)\n                used.remove(i)\n        return count\n\n    return str(backtrack(1, sum(lengths), set()))",
        "test": "assert solution(\"5\\n4 4 9 7 5\") == \"5\", \"The output is incorrect!\"",
        "num_ids": 1042,
        "indeed": false
    },
    {
        "number": 4118,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        A, B = map(int, stdin.split())\n        result = A * B\n        return str(result)\n    except ValueError:\n        return \"-1\"",
        "test": "assert solution(\"2 5\") == \"10\"",
        "num_ids": 508,
        "indeed": false
    },
    {
        "number": 4119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    coordinates = list(map(int, stdin.split()))\n\n    visited = set(coordinates)\n    moves = 0\n\n    while len(visited) < m:\n        for i in range(len(coordinates)):\n            if coordinates[i] not in visited:\n                piece_index = i\n                break\n        else:\n            return \"Impossible\"\n\n        moves += 1\n\n        if coordinates[piece_index] % 2 == 0:\n            coordinates[piece_index] += 1\n        else:\n            coordinates[piece_index] -= 1\n\n        visited.add(coordinates[piece_index])\n\n    return str(moves)",
        "test": "assert solution('2 5\\n10 12 1 2 14') == '5'",
        "num_ids": 866,
        "indeed": false
    },
    {
        "number": 4120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[1:])\n    cities = list(range(1, n + 1))\n    roads = []\n    for i in range(m):\n        a, b = map(int, stdin.split()[i + 1].split())\n        roads.append((a, b))\n\n    def is_valid(roads: List[Tuple[int, int]], cities: List[int]) -> bool:\n        city_to_roads = defaultdict(list)\n        for road in roads:\n            city_to_roads[road[0]].append(road)\n            city_to_roads[road[1]].append(road)\n\n        visited = set()\n        def bfs(city: int, roads: List[Tuple[int, int]]) -> int:\n            nonlocal visited\n            visited.add(city)\n            for next_city, next_roads in city_to_roads[city]:\n                if next_city in visited:\n                    return 0\n                if not roads:\n                    return 1\n                if bfs(next_city, next_roads[:-1]) == 0:\n                    roads.pop()\n                    return 1\n            return 0\n\n        return bfs(cities[0], roads)\n\n    def min_sum_distances(cities: List[int], roads: List[Tuple[int, int]]) -> int:\n        min_sum = float('inf')\n        for i in range(len(cities) - 1):\n            for j in range(i + 1, len(cities)):\n                dist = min(cities[i] - cities[j], cities[j] - cities[i])\n                min_sum = min(min_sum, dist)\n        return min_sum\n\n    options = []\n    for i in range(1, 2 ** (m - 1)):\n        roads_chosen = []\n        for j in range(1, 2 ** (m - 1)):\n            if (i & j) == 0:\n                roads_chosen.append(j)\n        if len(roads_chosen)!= n - 1:\n            continue\n        if is_valid(roads_chosen, cities):\n            min_sum = min_sum_distances(cities, roads_chosen)\n            options.append(bin(min_sum)[2:].zfill(m))\n\n    return str(len(options)) + '\\n' + '\\n'.join(options)\n\ninput_data = '''\n4 4 3\n1 2\n2 3\n1 4\n4 3\n\nOutput\n2\n1110\n1011\n\nInput\n4 6 3\n1 2\n2 3\n1 4\n4 3\n2 4\n1 3\n\nOutput\n1\n101001\n\nInput\n5 6 2\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\n\nOutput\n2\n111100\n110110\n'''\n\nprint(solution(input_data))",
        "test": "assert solution(input()) == \"2\\n111100\\n110110\"",
        "num_ids": 2209,
        "indeed": false
    },
    {
        "number": 4121,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    stack = []\n\n    for part in a:\n        if stack:\n            if stack[-1] == part:\n                stack.pop()\n            elif stack[-1] < part:\n                stack.append(part)\n        else:\n            stack.append(part)\n\n    return \"YES\" if all(stack) else \"NO\"\n",
        "test": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"",
        "num_ids": 1351,
        "indeed": false
    },
    {
        "number": 4122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    if sum(d)!= 0:\n        return \"0\"\n    for i in range(n):\n        if d[i]!= 0:\n            H += d[i]\n            if H <= 0:\n                return str(i + 1)\n    return \"-1\"",
        "test": "assert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"",
        "num_ids": 853,
        "indeed": false
    },
    {
        "number": 4123,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    freq = {}\n    for i in range(n - 1):\n        key = s[i:i+2]\n        if key in freq:\n            freq[key] += 1\n        else:\n            freq[key] = 1\n\n    sorted_freq = sorted(freq.items(), key=lambda x: (-x[1], x[0]))\n    for pair in sorted_freq:\n        if pair[1] > 1:\n            return pair[0]\n\n    return None",
        "test": "assert solution(\"7\\nABACABA\\n\") == \"AB\"",
        "num_ids": 849,
        "indeed": false
    },
    {
        "number": 4124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n\n    if len(s) > len(t):\n        s, t = t, s\n\n    def delete_first_char(str: str) -> str:\n        if len(str) == 0:\n            return ''\n        return str[1:]\n\n    def is_equal(str1: str, str2: str) -> bool:\n        if len(str1)!= len(str2):\n            return False\n        return delete_first_char(str1) == delete_first_char(str2)\n\n    def min_moves(s: str, t: str) -> int:\n        if is_equal(s, t):\n            return 0\n\n        moves = 0\n        i, j = 0, 0\n        while i < len(s) and j < len(t):\n            if s[i] < t[j]:\n                moves += 1\n                i += 1\n            elif s[i] > t[j]:\n                moves += 1\n                j += 1\n            else:\n                i += 1\n                j += 1\n\n        return moves + len(s) + len(t) - 2 * i\n\n    return str(min_moves(s, t))\n\n\ndef",
        "test": "assert solution('codeforces\\nyes') == '9'",
        "num_ids": 1057,
        "indeed": false
    },
    {
        "number": 4125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    cities = list(map(int, stdin.split()))\n    cities.remove(X)\n    cities.sort()\n    \n    max_d = 1\n    for i in range(len(cities)):\n        y = cities[i]\n        if y == X:\n            continue\n        \n        if y > X:\n            d = y - X\n            if d >= 2:\n                max_d = max(max_d, d)\n        else:\n            d = X - y\n            if d >= 2:\n                max_d = max(max_d, d)\n                \n    return str(max_d)\n\nwith open(\"input.txt\", \"r\") as file:\n    stdin = file.read()\n\nprint(solution(stdin))",
        "test": "assert solution(\"3 3\\n1 7 11\\n\") == \"2\"",
        "num_ids": 874,
        "indeed": false
    },
    {
        "number": 4126,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) % 2 == 0 or len(s) < 3 or len(s) > 99:\n        return \"No\"\n\n    is_strong = True\n    for i in range(len(s) // 2):\n        if s[i]!= s[-i - 1]:\n            is_strong = False\n            break\n\n    for i in range(len(s) // 2 + 1, len(s) - 1):\n        if s[i]!= s[-i - 1]:\n            is_strong = False\n            break\n\n    if is_strong:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution('a') == 'No'",
        "num_ids": 759,
        "indeed": false
    },
    {
        "number": 4127,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    # Input: A B\n    a, b = map(int, stdin.split())\n\n    # Compute A * B\n    result = a * b\n\n    # Truncate the fractional part\n    result = int(result)\n\n    # Print the result as an integer\n    print(result)",
        "test": "assert solution(\"198 1.10\") == \"217\", \"Incorrect answer.\"",
        "num_ids": 430,
        "indeed": false
    },
    {
        "number": 4128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    def count_ways(n: int) -> int:\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        return (n * (n - 1) * count_ways(n - 1)) // 2\n\n    n = int(stdin)\n    return str(count_ways(n))",
        "test": "assert solution(",
        "num_ids": 682,
        "indeed": false
    },
    {
        "number": 4129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    roads = {}\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        roads[(u, v)] = True\n        roads[(v, u)] = True\n    graph = [[] for _ in range(n + 1)]\n    for u, v in roads:\n        graph[u].append(v)\n        graph[v].append(u)\n    visited = [False] * (n + 1)\n    visited[s] = True\n    queue = [(s, 0)]\n    result = 0\n    while queue:\n        u, level = queue.pop(0)\n        for v in graph[u]:\n            if not visited[v]:\n                visited[v] = True\n                queue.append((v, level + 1))\n                result = max(result, level)\n    if result == 0:\n        return \"0\"\n    return str(result)\n\ndef",
        "test": "assert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\\n\") == \"1\\n\"",
        "num_ids": 1375,
        "indeed": false
    },
    {
        "number": 4130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    def can_make_team(a, w):\n        for i in range(len(a)):\n            if a[i] + w > 150000:\n                return False\n        return True\n\n    left = right = 0\n    max_len = 0\n    while left < n and right <= 150000:\n        while can_make_team(a[left:right], right):\n            right += 1\n        max_len = max(max_len, right - left)\n        left += 1\n\n    return str(max_len)",
        "test": "assert solution(\"6\\n1 1 1 4 4 4\\n\") == \"5\"",
        "num_ids": 918,
        "indeed": false
    },
    {
        "number": 4131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cities = []\n    for i in range(m):\n        p, y = map(int, stdin.split())\n        p -= 1\n        if p >= n:\n            p = n - 1\n        cities.append((p, y))\n    cities.sort(key=lambda x: (x[0], x[1]))\n    result = []\n    for i in range(m):\n        p, y = cities[i]\n        result.append(f\"{'0'*(6-len(str(p)))}{p}{y:06d}\")\n    return '\\n'.join(result)\n\ndef",
        "test": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\\n\") == \"000001000002\\n000002000001\\n000001000001\\n\"",
        "num_ids": 1276,
        "indeed": false
    },
    {
        "number": 4132,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    A.sort()\n    if A[N-1] == 1:\n        return '0'\n    a, b = 1, N-1\n    while a < b:\n        mid = (a + b) // 2\n        if sum(A[mid-1:mid+1]) >= 1:\n            b = mid\n        else:\n            a = mid + 1\n    return str(min(A[a-1:a+1]))",
        "test": "assert solution(\"4\\n2 10 8 40\") == \"2\"",
        "num_ids": 989,
        "indeed": false
    },
    {
        "number": 4133,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    golorp_name = stdin.strip()\n    if len(golorp_name) < 4 or len(golorp_name) > 10:\n        return \"false\"\n\n    # Check if the golorp name is a valid Befunge program\n    def is_valid_befunge_program(program: str) -> bool:\n        if len(program) % 2!= 0:\n            return False\n        for i, char in enumerate(program):\n            if char not in \".,-<>[]\":\n                return False\n            if char == \">\":\n                if i == len(program) - 1 or program[i + 1]!= \",\":\n                    return False\n            elif char == \"<\":\n                if i == 0 or program[i - 1]!= \",\":\n                    return False\n            elif char == \"[\":\n                if i == len(program) - 1 or program[i + 1]!= \"]\":\n                    return False\n            elif char == \"]\":\n                if i == 0 or program[i - 1]!= \"]\":\n                    return False\n            elif char in \".,-<>[]\":\n                if i == 0 or program[i - 1] == \",\":\n                    return False\n        return True\n\n    # Check if the golorp is a Befunge program\n    if not is_valid_befunge_program(golorp_name):\n        return \"false\"\n\n    def get_befunge_output(program: str) -> str:\n        output = []\n        cursor = 0\n        while cursor < len(program):\n            char = program[cursor]\n            if char == \">\":\n                output.append(str(int(golorp_name[int(golorp_name[cursor + 1])]) - 1))\n                cursor += 2\n            elif char == \"<\":\n                output.append(str(int(golorp_name[int(golorp_name[cursor - 1])]) - 1))\n                cursor += 2\n            elif char == \"[\":\n                output.append(str(golorp_name[int(golorp_name[cursor + 1])]))\n                cursor += 2\n            elif char == \"]\":\n                output.append(str(golorp_name[int(golorp_name[cursor - 1])]))\n                cursor += 2\n            elif char in \".,-<>[]\":\n                output.append(golorp_name[int(golorp_name[cursor])])\n                cursor += 1\n        return \"\".join(output)\n\n    output = get_befunge_output(golorp_name)\n    if output == \"false\":\n        return \"false\"\n\n    return output",
        "test": "assert solution('?(__-_+_/_____):-__>__,_____<__.') == 'false'",
        "num_ids": 2224,
        "indeed": false
    },
    {
        "number": 4134,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    grid = [list(map(int, stdin.split())) for _ in range(n)]\n    paths = 0\n\n    for i in range(1, n):\n        for j in range(1, m):\n            if grid[i][j] == 0:\n                continue\n            # Check if current cell is a valid target\n            if grid[i][j]!= k and (grid[i][j] ^ grid[i - 1][j])!= k and (grid[i][j] ^ grid[i][j - 1])!= k:\n                paths += 1\n\n    return str(paths)\n",
        "test": "assert solution(\"3 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n\") == \"5\\n\"",
        "num_ids": 1215,
        "indeed": false
    },
    {
        "number": 4135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = stdin.split()[1]\n    t = list(t)\n    \n    for d in range(1, n+1):\n        if t.count(str(d)) > 0:\n            t.reverse()\n            break\n    \n    return ''.join(t)",
        "test": "assert solution(input()) == 'thisisexampletwo', 'Test 2 failed'",
        "num_ids": 502,
        "indeed": false
    },
    {
        "number": 4136,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)",
        "test": "assert solution(\"5 14\") == \"19\"",
        "num_ids": 302,
        "indeed": true
    },
    {
        "number": 4137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    def interpret(program: str) -> int:\n        memory = [0] * 30000\n        pointer = 0\n        i = 0\n        while i < len(program):\n            instruction = program[i]\n            if instruction == '>':\n                pointer += 1\n            elif instruction == '<':\n                pointer -= 1\n            elif instruction == '+':\n                memory[pointer] = (memory[pointer] + 1) % 256\n            elif instruction == '-':\n                memory[pointer] = (memory[pointer] - 1) % 256 if memory[pointer] > 0 else 255\n            elif instruction == '.':\n                print(chr(memory[pointer]), end='')\n            elif instruction == '[':\n                if memory[pointer] == 0:\n                    open_brackets = 1\n                    i += 1\n                else:\n                    open_brackets = 1\n            elif instruction == ']':\n                open_brackets -= 1\n                if open_brackets == 0:\n                    i += 1\n            i += 1\n        return memory[0]\n\n    expression = stdin.strip()\n    expression = expression.replace('+', '++>').replace('-', '++>-').replace(' ', '')\n    expression = expression.replace('++>', '>++').replace('++>-', '>++>-')\n    expression = expression.replace('>', '>').replace('<', '<').replace('+', '+').replace('-', '-')\n\n    program = expression.replace('>', '[-]>').replace('<', '[-]<').replace('+', '[-]>+').replace('-', '[-]<-').replace('.', '[.]').replace('[', '[').replace(']', ']')\n\n    return str(interpret(program))",
        "test": "assert solution(\"9-7\") == \"+++++++++>+++++++>\"",
        "num_ids": 4106,
        "indeed": false
    },
    {
        "number": 4138,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    queries = int(lines[0])\n    sequence = list(map(int, lines[1].split()))\n    k_query = list(map(int, lines[2].split()))\n\n    result = []\n    for k in k_query:\n        if k <= 1:\n            result.append(0)\n        elif k <= len(sequence):\n            result.append(sequence[k - 1] // 10 ** (len(str(sequence[k - 1])) - k) % 10)\n        else:\n            result.append(0)\n\n    return \"\\n\".join(map(str, result))",
        "test": "assert solution(\"4\\n2132\\n506\\n999999999999999999\\n1000000000000000000\") == \"8\\n2\\n4\\n1\\n\"",
        "num_ids": 2031,
        "indeed": false
    },
    {
        "number": 4139,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        if i % 7 == 0 and i % 5 == 0 and i % 3 == 0:\n            count += 1\n    return str(count)\n\ndef",
        "test": "assert solution('575') == '4'",
        "num_ids": 485,
        "indeed": false
    },
    {
        "number": 4140,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    tiles = list(stdin.strip())\n    n = len(tiles)\n\n    # Count the number of black tiles\n    black_tiles = sum(1 for tile in tiles if tile == \"0\")\n\n    # Check if we can satisfy the condition\n    if black_tiles > n // 2:\n        return \"1\"\n\n    # Check for adjacent black tiles\n    for i in range(n - 1):\n        if tiles[i] == \"0\" and tiles[i + 1] == \"0\":\n            black_tiles += 1\n\n    # Check for adjacent white tiles\n    for i in range(n - 1):\n        if tiles[i] == \"1\" and tiles[i + 1] == \"1\":\n            black_tiles -= 1\n\n    return str(abs(black_tiles))",
        "test": "assert solution(\"000\") == \"1\"",
        "num_ids": 796,
        "indeed": false
    },
    {
        "number": 4141,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n\n    even_numbers = [x for x in A if x % 2 == 0]\n\n    if sum([True for x in even_numbers if x % 3 == 0 or x % 5 == 0]) == len(even_numbers):\n        return \"APPROVED\"\n    else:\n        return \"DENIED\"",
        "test": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"",
        "num_ids": 600,
        "indeed": true
    },
    {
        "number": 4142,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    \n    # Check if every character in an odd position is R, U, or D\n    for i in range(1, len(S), 2):\n        if S[i] not in ['L', 'R', 'U', 'D']:\n            return \"No\"\n    \n    # Check if every character in an even position is L, U, or D\n    for i in range(2, len(S), 2):\n        if S[i] not in ['L', 'R', 'U', 'D']:\n            return \"No\"\n    \n    return \"Yes\"",
        "test": "assert solution(\"URDRLRUD\") == \"Yes\"",
        "num_ids": 869,
        "indeed": false
    },
    {
        "number": 4143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d, e = map(int, stdin.split())\n    time = [0] * (10**6 + 1)\n    time[1] = 1\n    time[2] = 1 + a\n    time[3] = 1 + a + b\n    time[4] = 1 + a + b + c\n    time[5] = 1 + a + b + c + d\n    time[6] = 1 + a + b + c + d + e\n\n    for i in range(7, 10**6 + 1):\n        time[i] = min(time[i], time[i - 1] + 60)\n\n    return str(time[10**6])",
        "test": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\\n\") == \"7\"",
        "num_ids": 1829,
        "indeed": false
    },
    {
        "number": 4144,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    MOD = 10**9 + 7\n    count = 0\n    \n    for i in range(N):\n        if i == 0 or i == N - 1:\n            count += 1\n        else:\n            count += N - 1 - i\n    \n    return str(count % MOD)",
        "test": "assert solution(\"2\\n\") == \"2\"",
        "num_ids": 1191,
        "indeed": false
    },
    {
        "number": 4145,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    for i in range(x, 2, -1):\n        if i > 1 and all(i % j!= 0 for j in range(2, int(i ** 0.5) + 1)):\n            return str(i)\n    return \"\"",
        "test": "assert solution(\"20\") == \"23\"",
        "num_ids": 470,
        "indeed": false
    },
    {
        "number": 4146,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    v = list(map(int, stdin.split()[1:]))\n\n    # check if sequence is /\\/\\/\\/\n    for i in range(len(v) - 2):\n        if v[i] == v[i + 2]:\n            return '1'\n\n    # make sequence /\\/\\/\\/\n    for i in range(len(v) - 2):\n        if v[i] < v[i + 2]:\n            v[i], v[i + 2] = v[i + 2], v[i]\n            break\n\n    # count unique elements\n    unique_elements = set(v)\n\n    # return minimum number of elements to replace\n    return str(len(unique_elements))\n",
        "test": "assert solution(\"4\\n3 1 3 2\") == \"1\"",
        "num_ids": 626,
        "indeed": false
    },
    {
        "number": 4147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    bamboos = sorted([int(i) for i in stdin.split()])\n    bamboos = bamboos[:N]\n\n    extension_magic = 2\n    shortening_magic = 10\n    composition_magic = 10\n\n    def is_valid(l):\n        return l <= C and l >= B\n\n    def extension():\n        nonlocal extension_magic\n        if not extension_magic:\n            return\n        for i in range(len(bamboos)):\n            if bamboos[i] < B:\n                bamboos[i] += 1\n                extension_magic -= 1\n                break\n\n    def shortening():\n        nonlocal shortening_magic\n        if not shortening_magic:\n            return\n        for i in range(len(bamboos)):\n            if bamboos[i] >= B + 1:\n                bamboos[i] -= 1\n                shortening_magic -= 1\n                break\n\n    def composition():\n        nonlocal composition_magic\n        if not composition_magic:\n            return\n        for i in range(len(bamboos) - 1):\n            bamboos[i + 1] = bamboos[i] + bamboos[i + 1]\n        bamboos[-1] = bamboos[0] + bamboos[-1]\n        composition_magic -= 10\n\n    extension_magic = extension_magic\n    shortening_magic = shortening_magic\n    composition_magic = composition_magic\n\n    total_magic = extension_magic + shortening_magic + composition_magic\n    total_mp = total_magic * 10\n\n    return str(total_mp)\n",
        "test": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"",
        "num_ids": 2184,
        "indeed": false
    },
    {
        "number": 4148,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    result = \"\"\n\n    for char in sorted(s):\n        result += chr((ord(char) - 65 + n) % 26 + 65)\n\n    return result",
        "test": "assert solution(\"2\\nABCXYZ\") == \"CDEZAB\", \"Sample Input: 2\\nABCXYZ\"",
        "num_ids": 673,
        "indeed": false
    },
    {
        "number": 4149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.split())\n    b = list(map(int, b.split()))\n    a = b.copy()\n    count = 0\n    for i in range(1, n + 1):\n        if is_prime(a[i - 1]):\n            a.append(find_prime())\n        else:\n            a.append(find_max_divisor(a[i - 1]))\n            count += 1\n    a = random.sample(a, len(a))\n    return \" \".join(map(str, a))\n\n\ndef",
        "test": "assert solution(input()) == \"199999\"",
        "num_ids": 1309,
        "indeed": false
    },
    {
        "number": 4150,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0].split())\n    a = list(map(int, stdin.split()[1].split()))\n\n    team_1 = set()\n    team_2 = set()\n\n    def choose_students(team, chosen_students, k):\n        if len(chosen_students) < k:\n            return []\n        chosen_students.sort(key=lambda x: (x, -abs(x - i)))\n        return chosen_students[:k]\n\n    while len(team_1) < n and len(team_2) < n:\n        chosen_1 = choose_students(team_1, [], k)\n        chosen_2 = choose_students(team_2, [], k)\n\n        chosen = chosen_1 + chosen_2\n        chosen.sort(key=lambda x: (-a[x], -abs(x - i)))\n\n        for i in chosen:\n            if len(team_1) < n:\n                team_1.add(i)\n            else:\n                team_2.add(i)\n\n    return ''.join(str(1 if i in team_1 else 2) for i in range(n))",
        "test": "assert solution(\"5 1\\n2 1 3 5 4\") == \"22111\"",
        "num_ids": 1752,
        "indeed": false
    },
    {
        "number": 4151,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    MOD = 998244353\n\n    def count_renumerations(a: list) -> int:\n        n = len(a)\n        b = [0] * n\n        b[0] = 0\n\n        for i in range(1, n):\n            if a[i] == a[i - 1]:\n                b[i] = b[i - 1]\n            elif b[i] == b[i - 1] + 1:\n                b[i] = b[i - 1]\n            else:\n                b[i] = b[i - 1] + 1\n\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if a[i] == a[j] and b[i] == b[j]:\n                    count += 1\n\n        return count % MOD\n\n    return str(count_renumerations(a))",
        "test": "assert solution('''",
        "num_ids": 1746,
        "indeed": false
    },
    {
        "number": 4152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    n_good = 0\n    \n    for i in range(1, n):\n        if a[i] in a[i-1:0:-1]:\n            a[i-1:i] = []\n            n_good += i\n            break\n    \n    return str(n_good)\n\ndef",
        "test": "assert solution(\"5\\n1 2 3 4 5\") == \"2\"",
        "num_ids": 843,
        "indeed": false
    },
    {
        "number": 4153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = list(stdin.split()[1])\n\n    red_count = blue_count = 0\n    max_count = 0\n\n    for i in range(n):\n        if s[i] == '0':\n            red_count += 1\n        else:\n            blue_count += 1\n\n        if red_count == blue_count:\n            max_count = max(max_count, red_count)\n        else:\n            if red_count > blue_count:\n                red_count -= 1\n            else:\n                blue_count -= 1\n\n    return str(max_count)",
        "test": "assert solution('0011') == '4'",
        "num_ids": 941,
        "indeed": false
    },
    {
        "number": 4154,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    L, R = map(lambda x: list(map(int, x.split())), stdin.split())\n\n    l_set = set(L)\n    r_set = set(R)\n\n    count = 0\n\n    for i in range(N):\n        if i in l_set and i in r_set:\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"\"\"4 2",
        "num_ids": 924,
        "indeed": false
    },
    {
        "number": 4155,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    h = list(map(int, stdin.split()[1:]))\n\n    min_operations = float('inf')\n    for i in range(1, N + 1):\n        for j in range(i - 1, 0, -1):\n            if (j + 1) % 2 == 0:\n                continue\n            l, r = j - 1, j + 1\n            if l <= i <= r:\n                min_operations = min(min_operations, r - l)\n\n    return str(min_operations)\n",
        "test": "assert solution(\"4\\n1 2 2 1\") == \"2\"",
        "num_ids": 1031,
        "indeed": false
    },
    {
        "number": 4156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [[0] * (w + 1) for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, w + 1):\n            if j >= a[i - 1]:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - a[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    \n    return str(dp[n][w])\n\ninput_str = \"3 5\\n2 1 -3\"\noutput = solution(input_str)\nprint(output) # 3\n\ninput_str = \"2 4\\n-1 1\"\noutput = solution(input_str)\nprint(output) # 4\n\ninput_str = \"4 10\\n2 4 1 2\"\noutput = solution(input_str)\nprint(output) # 2",
        "test": "assert solution('3 5\\n2 1 -3\\n') == '3'",
        "num_ids": 1973,
        "indeed": false
    },
    {
        "number": 4157,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    sequence = list(map(int, stdin.split()[1:]))\n    \n    def divide_by_3(num: int) -> int:\n        return num // 3\n    \n    def multiply_by_2(num: int) -> int:\n        return num * 2\n    \n    # apply operations to the sequence\n    for _ in range(n - 1):\n        sequence = [divide_by_3(num) if num % 3 == 0 else multiply_by_2(num) for num in sequence]\n    \n    # print the final sequence\n    print(\" \".join(str(num) for num in sequence))",
        "test": "assert solution(\"4\\n42 28 84 126\\n\") == \"126 42 84 28\"",
        "num_ids": 962,
        "indeed": false
    },
    {
        "number": 4158,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1:]))\n\n    def is_power_of_two(n: int) -> bool:\n        return n > 0 and (n & (n - 1)) == 0\n\n    max_size = 1\n    for i in range(1, n):\n        if abs(x[i] - x[i - 1]) == 2:\n            max_size *= 2\n        else:\n            break\n\n    for size in range(max_size, 0, -1):\n        subset = set(x[i] for i in range(n) if abs(x[i] - x[i - size]) == 2**size)\n        if len(subset) == n:\n            return f\"{size}\\n{' '.join(map(str, sorted(subset)))}\"\n\n    return \"0\\n\"",
        "test": "assert solution(\"5\\n-1 2 5 8 11\") == \"1\\n8\\n\"",
        "num_ids": 1449,
        "indeed": false
    },
    {
        "number": 4159,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    Takahashi = B\n    Aoki = A\n\n    for _ in range(K):\n        if Takahashi > 0:\n            Takahashi -= 1\n        elif Aoki > 0:\n            Aoki -= 1\n        else:\n            break\n\n    print(Takahashi, Aoki)\n\n    return f\"{Takahashi} {Aoki}\"",
        "test": "assert solution(\"2 3 3\") == \"0 2\"",
        "num_ids": 769,
        "indeed": false
    },
    {
        "number": 4160,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    \n    if x <= 100:\n        return \"0\"\n    \n    interest_rate = 0.01\n    years = 0\n    balance = 100\n    \n    while balance < x:\n        balance *= (1 + interest_rate)\n        years += 1\n    \n    return str(years)",
        "test": "assert solution(\"103\") == \"3\"",
        "num_ids": 346,
        "indeed": false
    },
    {
        "number": 4161,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n\n    sum_gcd = 0\n\n    for a in range(1, K+1):\n        for b in range(1, K+1):\n            for c in range(1, K+1):\n                gcd = max(a, b, c)\n                if gcd > 1:\n                    sum_gcd += gcd\n\n    return str(sum_gcd)",
        "test": "assert solution(\"2\") == \"9\"",
        "num_ids": 501,
        "indeed": false
    },
    {
        "number": 4162,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    # Read input values from stdin\n    N = int(stdin.split()[0])\n    a_list = list(map(int, stdin.split()[1:]))\n\n    # Calculate f(m) for all m\n    f_list = []\n    for m in range(1, 10001):\n        f_list.append(sum(m % a for a in a_list))\n\n    # Find the maximum value of f\n    max_f = max(f_list)\n\n    # Return the maximum value of f\n    return str(max_f)",
        "test": "assert solution('3\\n3 4 6\\n') == '10'",
        "num_ids": 543,
        "indeed": false
    },
    {
        "number": 4163,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, *dice = map(int, stdin.split())\n\n    doublets = set()\n    for i in range(n - 3):\n        if dice[i] == dice[i + 1] == dice[i + 2]:\n            doublets.add(i)\n\n    if len(doublets) >= 3:\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "test": "assert solution(\"5\\n1 2\\n1 1\\n2 2\\n3 3\\n3 3\") == \"No\"",
        "num_ids": 943,
        "indeed": false
    },
    {
        "number": 4164,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    \n    result = r ** 2\n    result //= 1 ** 2\n    \n    return str(result)",
        "test": "assert solution(\"2\") == \"4\"",
        "num_ids": 441,
        "indeed": true
    },
    {
        "number": 4165,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    lengths = list(map(int, stdin.split()[1:]))\n\n    if len(lengths)!= n:\n        return \"No\"\n\n    if n < 3:\n        return \"Yes\"\n\n    if lengths[0] < lengths[1] + lengths[2]:\n        return \"No\"\n\n    return \"Yes\"",
        "test": "assert solution(\"5\\n1 2 3 4 5\") == \"No\"",
        "num_ids": 497,
        "indeed": false
    },
    {
        "number": 4166,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    s_list = [int(s) for s in stdin.split()]\n    c_list = [int(c) for c in stdin.split()]\n\n    def is_valid(s, c):\n        total = 0\n        for i in range(N):\n            digit = int(s[i])\n            if digit == 0 and i > 0:\n                return False\n            total += digit * c ** i\n        return total == 0\n\n    def find_smallest(c_list, s_list):\n        s_dict = {}\n        for s in s_list:\n            if s not in s_dict:\n                s_dict[s] = []\n            s_dict[s].append(c_list.pop(0))\n\n        for c in c_list:\n            if is_valid(str(c), c):\n                return c\n\n        return -1\n\n    return str(find_smallest(c_list, s_list))",
        "test": "assert solution(\"\"\"3 3",
        "num_ids": 1017,
        "indeed": false
    },
    {
        "number": 4167,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    result = 0\n\n    for a in range(1, n+1):\n        for b in range(1, n+1):\n            for c in range(1, n+1):\n                if (a + b) % k == 0 and (b + c) % k == 0 and (c + a) % k == 0:\n                    result += 1\n\n    return str(result)",
        "test": "assert solution(\"3 2\") == \"9\"",
        "num_ids": 721,
        "indeed": false
    },
    {
        "number": 4168,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = ''\n    sign = 1\n\n    if N == 0:\n        S = '0'\n    else:\n        if N < 0:\n            sign = -1\n            N = -N\n\n        while N > 0:\n            S = str(N % 2) + S\n            N //= 2\n\n    return S if sign == 1 else '1' + S",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 551,
        "indeed": false
    },
    {
        "number": 4169,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n\n    def buy_cans(cans: int, stores: int, a: int, b: int) -> int:\n        total_money = 0\n        for i in range(stores):\n            money = cans * a\n            if money <= m:\n                total_money += money\n            else:\n                cans_left = (m // a) + (m % a > 0)\n                total_money += cans_left * a\n        return total_money\n\n    result = float('inf')\n    for i in range(1, b + 1):\n        result = min(result, buy_cans(i, n, a, b))\n\n    return str(result)\n",
        "test": "assert solution(\"2 5\\n4 9\\n2 4\\n\") == \"12\"",
        "num_ids": 1022,
        "indeed": false
    },
    {
        "number": 4170,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    H = list(map(int, stdin.split()[1:]))\n\n    max_count = 0\n    start_index = 0\n\n    for i in range(1, N):\n        if H[i] > H[i - 1]:\n            if i - start_index > max_count:\n                max_count = i - start_index\n            start_index = i\n\n    if H[N - 1] > H[0]:\n        max_count += 1\n\n    return str(max_count)",
        "test": "assert solution(\"5\\n10 4 8 7 3\") == \"2\"",
        "num_ids": 648,
        "indeed": false
    },
    {
        "number": 4171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def binary_search(lo, hi):\n        while lo < hi:\n            mid = (lo + hi) // 2\n            if sum(1 for x in a[:mid] if x == k) >= k:\n                lo = mid\n            else:\n                hi = mid - 1\n        return lo\n\n    lo, hi = 1, n * 2\n    result = binary_search(lo, hi)\n    return str(result)",
        "test": "assert solution(b\"5 3\\n1 2 3 4 5\\n\") == b\"2\\n\"",
        "num_ids": 2098,
        "indeed": false
    },
    {
        "number": 4172,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    count = 0\n    moves = 0\n    i = 0\n    while count < k and i < n:\n        if a[i] == min(a):\n            a[i] += 1\n            count += 1\n        elif a[i] == max(a):\n            a[i] -= 1\n            count += 1\n        moves += 1\n        i += 1\n    \n    return str(moves)",
        "test": "assert solution(\"\"\"6 5",
        "num_ids": 1010,
        "indeed": false
    },
    {
        "number": 4173,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    queries = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    answers = [0] * len(queries)\n    \n    for i, (n, a, b) in enumerate(queries):\n        if n <= 2:\n            a, b = b, a\n        if n <= 1:\n            a, b = a, 1\n        \n        cost1 = a * n\n        cost2 = b * n\n        min_cost = min(cost1, cost2)\n        \n        if min_cost == cost1:\n            answers[i] = cost1\n        else:\n            answers[i] = cost2\n    \n    return '\\n'.join(map(str, answers))",
        "test": "assert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\\n\") == \"10\\n9\\n1000\\n42000000000000\\n\"",
        "num_ids": 1111,
        "indeed": false
    },
    {
        "number": 4174,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n\n    d = 0\n    count = 0\n\n    for i in range(1, n + 1):\n        d += l[i - 1]\n        if d > x:\n            count += 1\n            d -= l[i - 1]\n\n    return str(count)",
        "test": "assert solution(open(\"sample_input.txt\").read()) == \"2\"",
        "num_ids": 627,
        "indeed": false
    },
    {
        "number": 4175,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.strip().split('\\n')\n    n = int(words[0])\n    words = words[1:]\n\n    for word in words:\n        if len(word) < 1 or len(word) > 10:\n            return 'No'\n\n        if word[0] == word[-1]:\n            continue\n        else:\n            return 'No'\n\n    return 'Yes'",
        "test": "assert solution(stdin=\"3\\ncat\\ndog\\n123\\n\") == \"No\"",
        "num_ids": 708,
        "indeed": false
    },
    {
        "number": 4176,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n\n    min_pieces = (a + b - 2) // 2\n\n    return str(min_pieces)",
        "test": "assert solution(\"2 3\\n\") == \"6\"",
        "num_ids": 443,
        "indeed": false
    },
    {
        "number": 4177,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    input_string = stdin.strip()\n    output_string = \"\"\n    for char in input_string:\n        output_string += \"x\"\n    return output_string",
        "test": "assert solution(\"sardine\") == \"xxxxxxx\", \"Sample Input: sardine, Expected Output: xxxxxxxx\"",
        "num_ids": 709,
        "indeed": true
    },
    {
        "number": 4178,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, *heights = map(int, stdin.split())\n\n    def is_valid(heights: List[int]) -> bool:\n        for i in range(1, n):\n            if heights[i] < heights[i - 1]:\n                return False\n        return True\n\n    heights = list(heights)\n    if is_valid(heights):\n        return \"Yes\"\n    else:\n        heights[1] -= 1\n        if is_valid(heights):\n            return \"Yes\"\n        else:\n            return \"No\"\n",
        "test": "assert solution(\"5\\n1 2 1 1 3\") == \"Yes\"",
        "num_ids": 562,
        "indeed": false
    },
    {
        "number": 4179,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = map(int, stdin.split())\n    b = list(map(int, stdin.split()[1:]))\n    A = [list(map(int, stdin.split()[1:])) for _ in range(n)]\n\n    codes = 0\n    for i in range(n):\n        if sum(A[i]) + c > 0:\n            codes += 1\n\n    return str(codes)\n\nstdin = \"\"\"\n2 3 -10\n1 2 3\n3 2 1\n1 2 2\n\"\"\"\n\nprint(solution(stdin))",
        "test": "assert solution(\"\"\"",
        "num_ids": 802,
        "indeed": false
    },
    {
        "number": 4180,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 0 or n > 10000:\n        return \"Invalid input\"\n\n    bills = [1000] * 3 + [500] * 2 + [100] * 1\n    change = n\n    bills_required = 0\n    for bill in bills:\n        while change >= bill:\n            change -= bill\n            bills_required += 1\n\n    return str(bills_required)",
        "test": "assert solution(\"1900\") == \"100\"",
        "num_ids": 900,
        "indeed": false
    },
    {
        "number": 4181,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:N+1]))\n    B = list(map(int, stdin.split()[N+1:]))\n\n    def count_monsters(town: int) -> int:\n        return A[town] + count_monsters(town - 1) + count_monsters(town + 1)\n\n    def count_monsters_in_range(town: int, start: int, end: int) -> int:\n        return count_monsters_in_range(town - 1, start, end) + count_monsters_in_range(town + 1, start, end) + sum(B[town - 1:town + 2])\n\n    max_monsters = 0\n    for town in range(1, N + 1):\n        max_monsters = max(max_monsters, count_monsters(town) + count_monsters_in_range(town, town - 1, town))\n\n    return str(max_monsters)",
        "test": "assert solution(input()) == '9'",
        "num_ids": 1267,
        "indeed": false
    },
    {
        "number": 4182,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    N, M, X, Y = [int(input_list[i]) for i in range(1, 5)]\n    x_list = [int(input_list[i]) for i in range(5, 5 + N)]\n    y_list = [int(input_list[i]) for i in range(5 + N, 5 + N + M)]\n\n    # Check if there exists a value Z such that X < Z <= Y, x_1 < Z, y_1 >= Z\n    for i in range(N):\n        for j in range(M):\n            if x_list[i] < Z <= Y and x_list[i] < x_list[j] < Z:\n                return \"No War\"\n            if y_list[j] >= Z and y_list[j] < y_list[i] >= Z:\n                return \"No War\"\n\n    # Check if there exists a value Z such that Y < Z <= X, x_1 <= Z, y_1 < Z\n    for i in range(M):\n        for j in range(N):\n            if y_list[i] < Z <= X and x_list[i] <= Z and y_list[i] < y_list[j] < Z:\n                return \"No War\"\n\n    # Check if there exists a value Z such that X <= Z, x_1 < Z, y_1 <= Z, y_1 < Z\n    for i in range(N):\n        for j in range(M):\n            if x_list[i] <= Z and x_list[i] < x_list[j] < Z and y_list[i] <= Z and y_list[i] < y_list[j] < Z:\n                return \"No War\"\n\n    return \"War\"",
        "test": "assert solution(\"1 1 0 1\\n-2 3\\n0 5\\n\") == \"War\"",
        "num_ids": 1829,
        "indeed": false
    },
    {
        "number": 4183,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N, *T = map(int, stdin.split())\n    T = list(T)\n\n    while any(T):\n        T_new = []\n        for i, t in enumerate(T):\n            if t > 0:\n                if i == 0 or T[i - 1] == 0:\n                    T_new.append(t + T[i])\n                else:\n                    T_new.append(max(T[i], T[i - 1] - t))\n            else:\n                T_new.append(t)\n        T = T_new\n\n    total_time = sum(T)\n    return str(total_time)",
        "test": "assert solution(\"2\\n2\\n3\") == \"6\"",
        "num_ids": 627,
        "indeed": false
    },
    {
        "number": 4184,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    weights = list(map(int, stdin.split()[1:]))\n    t = 2\n    min_difference = float('inf')\n\n    for i in range(t, n):\n        s1 = sum(weights[:i])\n        s2 = sum(weights[i:])\n        difference = abs(s1 - s2)\n        if difference < min_difference:\n            min_difference = difference\n\n    return str(min_difference)",
        "test": "assert solution(\"3\\n1 2 3\") == \"0\"",
        "num_ids": 966,
        "indeed": true
    },
    {
        "number": 4185,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = []\n    for i in range(n):\n        row = list(map(int, stdin.split()))\n        matrix.append(row)\n\n    row1 = [1] * (m + 1)\n    row2 = [m + 1] * (m + 1)\n    row3 = list(range(1, n * m + 1, m))\n\n    for i in range(1, n):\n        matrix[i][0] = matrix[i - 1][m]\n        matrix[i][1] = matrix[i - 1][m - 1]\n\n    matrix[0][0] = row1[1]\n    matrix[0][1] = row1[2]\n    matrix[0][2:] = row1[3:]\n\n    matrix[1][0] = row2[1]\n    matrix[1][1] = row2[2]\n    matrix[1][2:] = row2[3:]\n\n    matrix[2:] = [row3[:m] + [row3[m]] + row3[m + 1:] for row3 in matrix[2:]]\n\n    return str(min(sum(row) for row in matrix))\n\n\ndef",
        "test": "assert solution(\"4 3\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\\n\") == \"0\\n\"",
        "num_ids": 1257,
        "indeed": false
    },
    {
        "number": 4186,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort()\n    cnt = 0\n    s = 0\n    for i in range(len(a) - 1):\n        s += a[i]\n        cnt += 1\n        if cnt == n // 2:\n            break\n    return str(s)",
        "test": "assert solution('''6",
        "num_ids": 771,
        "indeed": false
    },
    {
        "number": 4187,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    schedule = [int(x) for x in stdin.split()[1:]]\n    working_hours = 0\n    rest_hours = 0\n    for hour in schedule:\n        if hour == 0:\n            working_hours += 1\n        else:\n            rest_hours += 1\n    if rest_hours == 0:\n        return \"0\"\n    else:\n        return str(max(working_hours, rest_hours))",
        "test": "assert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\\n\"",
        "num_ids": 775,
        "indeed": false
    },
    {
        "number": 4188,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    facts = stdin.split()\n    index = int(facts[0]) - 1\n    if index < 0 or index >= len(facts):\n        return \"0\"\n    return facts[index]",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 1242,
        "indeed": false
    },
    {
        "number": 4189,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    cheeses = []\n    for line in stdin.split(\"\\n\"):\n        cheese_name, cheese_type = line.strip().split()\n        cheeses.append((cheese_name, cheese_type))\n\n    cheese_types = {cheese_type for cheese_name, cheese_type in cheeses}\n\n    cheese_types = sorted(cheese_types)\n\n    print(len(cheese_types))\n\n    return \"\"",
        "test": "assert solution(\"6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\\n\") == \"4\\n\"",
        "num_ids": 1161,
        "indeed": false
    },
    {
        "number": 4190,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    b = list(map(int, stdin.split()[2].split()))\n    \n    b.sort()\n    min_index = 0\n    for i in range(1, n):\n        if b[i] < b[min_index]:\n            min_index = i\n    \n    min_b = b[min_index]\n    min_c = [0] * n\n    \n    for i in range(n):\n        min_c[i] = (a[i] + min_b) % n\n    \n    return''.join(map(str, min_c))",
        "test": "assert solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\\n\") == \"0 0 0 1 0 2 4\\n\"",
        "num_ids": 1169,
        "indeed": false
    },
    {
        "number": 4191,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    # Convert the input string to a list of digits\n    digits = [int(digit) for digit in stdin.split()]\n\n    # Count the number of 0's and 1's in the input list\n    zero_count = digits.count(0)\n    one_count = digits.count(1)\n\n    # Determine the output digit based on the count\n    output_digit = 0\n    if zero_count == one_count:\n        output_digit = 0\n    elif zero_count > one_count:\n        output_digit = 1\n\n    # Convert the output digit to a string and return it\n    return str(output_digit)",
        "test": "assert solution(\"1\\n0\\n0\\n1\\n\") == \"0\"",
        "num_ids": 659,
        "indeed": false
    },
    {
        "number": 4192,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    D, T, S = input_list\n\n    if D > 10000 or T > 10000 or S > 10000 or D < 1 or T < 1 or S < 1:\n        return \"No\"\n\n    time_to_reach_place = D / S\n    if time_to_reach_place <= T:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"1000 15 80\") == \"Yes\"",
        "num_ids": 484,
        "indeed": true
    },
    {
        "number": 4193,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    n, *numbers = map(int, stdin.split())\n    numbers = set(numbers)\n    rows, cols = 3, 3\n    diagonals = [set(), set()]\n\n    # Mark the numbers\n    for num in numbers:\n        rows -= num // rows\n        cols -= num % cols\n        diagonals[0].add(num)\n        diagonals[1].add(num)\n\n    # Check whether we will have a bingo\n    for i, diagonal in enumerate(diagonals):\n        if len(diagonal) == 3:\n            return \"Yes\"\n\n    # If we didn't have a bingo, check whether the rows, columns, or diagonals are full\n    for i in range(rows):\n        row_full = all(numbers.issubset(set(row)))\n        if row_full:\n            return \"Yes\"\n\n    for j in range(cols):\n        col_full = all(numbers.issubset(set(col)))\n        if col_full:\n            return \"Yes\"\n\n    for i, diagonal in enumerate(diagonals):\n        diagonal_full = all(numbers.issubset(diagonal))\n        if diagonal_full:\n            return \"Yes\"\n\n    # If we didn't have a bingo, we didn't have a bingo\n    return \"No\"\n",
        "test": "assert solution(\"\"\"",
        "num_ids": 2149,
        "indeed": false
    },
    {
        "number": 4194,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    days_per_assignment = list(map(int, stdin.split()[1:]))\n    \n    days_per_assignment.sort()\n    \n    days_hanging_out = 0\n    current_day = days_per_assignment[0]\n    for i in range(1, m):\n        if current_day + days_per_assignment[i] > n:\n            return -1\n        days_hanging_out += n - current_day - days_per_assignment[i]\n        current_day = days_per_assignment[i]\n    \n    return str(days_hanging_out)",
        "test": "assert solution(\"41 2\\n5 6\") == \"30\"",
        "num_ids": 788,
        "indeed": false
    },
    {
        "number": 4195,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    \n    def is_happy(n: int) -> bool:\n        slow, fast = n, 0\n        while fast!= 0:\n            slow, fast = slow % 100, (slow // 100) + (fast % 100)\n            fast = fast ** 2 % 100\n        return slow == 1\n    \n    nums = [i for i in range(1, 101) if is_happy(i)]\n    \n    return str(nums[N-1])",
        "test": "assert solution(\"1 1\") == \"1\"",
        "num_ids": 645,
        "indeed": false
    },
    {
        "number": 4196,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n    mod = 10**9 + 7\n\n    def gcd(a: int, b: int) -> int:\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    def gcd_array(arr: List[int]) -> int:\n        if len(arr) == 1:\n            return arr[0]\n        else:\n            return gcd(arr[0], gcd_array(arr[1:]))\n\n    def gcd_helper(a: int, b: int) -> int:\n        if a == b:\n            return a\n        elif a > b:\n            return gcd_helper(a - b, b)\n        else:\n            return gcd_helper(a, b - a)\n\n    A_gcd = gcd_array(A)\n    max_gcd = 0\n    for i in range(1, 11):\n        new_A = [gcd_helper(a, i) % mod for a in A]\n        if max_gcd < gcd_array(new_A):\n            max_gcd = gcd_array(new_A)\n\n    return str(max_gcd)\n\ninput_file = \"input.txt\"\noutput_file = \"output.txt\"\n\nwith open(input_file, \"r\") as f:\n    stdin = f.read().strip()\n\nresult = solution(stdin)\n\nwith open(output_file, \"w\") as f:\n    f.write(result)",
        "test": "assert solution('5\\n1 2 3 4 5\\n') == '1'",
        "num_ids": 774,
        "indeed": false
    },
    {
        "number": 4197,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n\n    # check if A is valid\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] == A[j]:\n                return \"Invalid input\"\n\n    # create a list of tuples (A_i, i)\n    students = [(A[i], i) for i in range(N)]\n\n    # sort students by A_i\n    students.sort(key=lambda x: x[0])\n\n    # create a list of student numbers in the order they entered the classroom\n    result = [x[1] + 1 for x in students]\n\n    return \" \".join(map(str, result))",
        "test": "assert solution(\"2\\n1 2\") == \"1 2\"",
        "num_ids": 588,
        "indeed": false
    },
    {
        "number": 4198,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n\n    def calculate_price(n: int) -> int:\n        return int(A * n + B * len(str(n)))\n\n    highest_price = 0\n    highest_integer = 0\n\n    for n in range(1, 10**9 + 1):\n        price = calculate_price(n)\n        if price > X:\n            break\n        if price > highest_price:\n            highest_price = price\n            highest_integer = n\n\n    return str(highest_integer)",
        "test": "assert solution(\"10 7 100\") == \"9\"",
        "num_ids": 984,
        "indeed": false
    },
    {
        "number": 4199,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, k, *heights = list(map(int, stdin.split()))\n\n    tall_friends = 0\n    for i in range(n):\n        if heights[i] >= k:\n            tall_friends += 1\n\n    return str(tall_friends)\n\nstdin = \"4 150\\n150 140 100 200\"\nprint(solution(stdin))  # Output: 2",
        "test": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"",
        "num_ids": 574,
        "indeed": true
    },
    {
        "number": 4200,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    def find_popular_items(votes: List[int], k: int) -> int:\n        votes.sort(reverse=True)\n        count = 0\n        for vote in votes:\n            count += 1\n            if count == k:\n                return vote\n        return -1\n\n    n, m = map(int, stdin.split())\n    votes = list(map(int, stdin.split()[1:]))\n\n    popular_item = find_popular_items(votes, m)\n    if popular_item >= 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution('4 1\\n5 4 2 1') == 'Yes\\n'",
        "num_ids": 780,
        "indeed": false
    },
    {
        "number": 4201,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split())\n    grid = [list(row) for row in stdin.split('\\n')[1:]]\n\n    def paint_squares(row_index: int, col_index: int) -> int:\n        def is_black_square(i: int, j: int) -> bool:\n            return grid[i][j] == '#'\n\n        black_squares = 0\n        visited = set()\n        stack = [(row_index, col_index)]\n\n        while stack:\n            i, j = stack.pop()\n            if (i, j) in visited:\n                continue\n            visited.add((i, j))\n\n            if is_black_square(i, j):\n                black_squares += 1\n                if black_squares == K:\n                    return black_squares\n\n                stack.extend([(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)])\n\n        return black_squares\n\n    count = 0\n    for i in range(1, H):\n        for j in range(1, W):\n            if grid[i][j] == '.':\n                count += paint_squares(i, j)\n\n    count += paint_squares(0, 0)\n    count += paint_squares(H - 1, W - 1)\n\n    return str(count)",
        "test": "assert solution(\"\"\"2 3 2",
        "num_ids": 1509,
        "indeed": false
    },
    {
        "number": 4202,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    i = L\n    j = R\n    while True:\n        if i * j % 2019 < i * (j - 1) % 2019:\n            break\n        i += 1\n    return str(i * (j - 1) % 2019)",
        "test": "assert solution(\"2020 2040\") == \"2\"",
        "num_ids": 454,
        "indeed": false
    },
    {
        "number": 4203,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if not S or not S[0].isupper() or not S[2].islower():\n        return \"WA\"\n\n    for i in range(3, len(S) - 1):\n        if S[i] == \"C\" and S[i + 1] == \"C\":\n            return \"WA\"\n\n    for i in range(len(S)):\n        if S[i].isupper():\n            return \"WA\"\n\n    return \"AC\"",
        "test": "assert solution(\"aaaaa\") == \"WA\"",
        "num_ids": 584,
        "indeed": false
    },
    {
        "number": 4204,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.split()\n    S = int(S)\n    K = int(K)\n\n    def string_change(S):\n        change_dict = {2: \"22\", 3: \"333\", 4: \"4444\", 5: \"55555\", 6: \"666666\", 7: \"7777777\", 8: \"88888888\", 9: \"999999999\"}\n        for i in range(10):\n            S = S.replace(str(i), change_dict[i])\n        return S\n\n    def string_after_5e15_days(S):\n        for i in range(5e15):\n            S = string_change(S)\n        return S\n\n    result = string_after_5e15_days(S)\n    return result[K - 1]",
        "test": "assert solution(\"1214 4\") == \"2\"",
        "num_ids": 862,
        "indeed": false
    },
    {
        "number": 4205,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    p = list(map(int, stdin.split()[1:]))\n    p.sort()\n\n    if p == list(range(1, N+1)):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution(\"2\\n3 1 2\") == \"NO\"",
        "num_ids": 531,
        "indeed": false
    },
    {
        "number": 4206,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n >= 3:\n        if n % 3 == 0:\n            count += 1\n        n //= 10\n    return str(count)",
        "test": "assert solution(\"3121\") == \"2\"",
        "num_ids": 619,
        "indeed": false
    },
    {
        "number": 4207,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    b = list(map(int, stdin.split()[2].split()))\n    \n    c = []\n    for i in range(n):\n        c.append(a[i] * -1 + b[i])\n    \n    max_zeroes = 0\n    for d in range(-100, 101):\n        zeroes = 0\n        for i in range(n):\n            if c[i] % d!= 0:\n                zeroes += 1\n        max_zeroes = max(max_zeroes, zeroes)\n    \n    return str(max_zeroes)\n\ndef",
        "test": "assert solution(\"3\\n13 37 39\\n1 2 3\\n\") == \"2\\n\"",
        "num_ids": 946,
        "indeed": false
    },
    {
        "number": 4208,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    l = stdin.split()[1]\n    r = stdin.split()[2]\n\n    colors = set()\n    for i in range(n):\n        if l[i]!= '?':\n            colors.add(l[i])\n        if r[i]!= '?':\n            colors.add(r[i])\n\n    pairs = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (l[i]!= r[j]) and (l[i] in colors) and (r[j] in colors):\n                pairs.append((i, j))\n\n    if not pairs:\n        return \"0\"\n\n    max_pairs = len(pairs)\n    for i in range(len(pairs)):\n        for j in range(i + 1, len(pairs)):\n            if (l[pairs[i][0]] == l[pairs[j][0]]) and (r[pairs[i][1]] == r[pairs[j][1]]):\n                max_pairs = min(max_pairs, len(pairs))\n                pairs = [pairs[i], pairs[j]]\n                break\n\n    return str(max_pairs) + \"\\n\" + \"\\n\".join(map(lambda x: \" \".join(map(str, x)), pairs))\n",
        "test": "assert solution(\"\"\"",
        "num_ids": 1713,
        "indeed": false
    },
    {
        "number": 4209,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.strip().split())\n    a = sorted(set(a))\n    k = 0\n    blocks = set()\n\n    for i in range(n):\n        if not blocks or a[i] + blocks.pop()!= a[i]:\n            blocks.add(i)\n            k += 1\n            if k == n:\n                break\n\n    return str(k) + '\\n' + '\\n'.join(f'{l} {r}' for l, r in sorted(blocks))\n",
        "test": "assert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\\n1 1\"",
        "num_ids": 1688,
        "indeed": false
    },
    {
        "number": 4210,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    count = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            x = a[i] + a[j]\n            if x % k == 0:\n                count += 1\n\n    return str(count)",
        "test": "assert solution(\"4 2\\n2 78 4 10\\n\") == \"12\\n\"",
        "num_ids": 769,
        "indeed": false
    },
    {
        "number": 4211,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, *b = map(int, stdin.strip().split())\n    b = [b[i] for i in range(n - 1)]\n    b.append(max(b))\n    return str(max(b))",
        "test": "assert solution(\"4\\n1 2 3 4\") == \"10\"",
        "num_ids": 524,
        "indeed": false
    },
    {
        "number": 4212,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = map(int, stdin.split())\n    a_list = list(map(int, stdin.split()))\n    a_list.sort()\n    score = 0\n    max_score = 0\n\n    for i in range(1, N+1):\n        index = bisect_left(a_list, i)\n        if index == 0 or i - a_list[index-1]!= c_list[index-1]:\n            score += d_list[index-1]\n        max_score = max(score, max_score)\n        score = 0\n\n    return str(max_score)\n\nfrom bisect import bisect_left\nimport sys\n\ndef",
        "test": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\\n1 3 3 20\\n2 2 2 100\") == \"100\", \"Invalid solution\"",
        "num_ids": 1039,
        "indeed": false
    },
    {
        "number": 4213,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n\n    max_diff = 0\n    max_index = 0\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            diff = abs(A[i] - A[j])\n            if diff > max_diff:\n                max_diff = diff\n                max_index = i, j\n\n    return str(max_diff)",
        "test": "assert solution('4\\n1 4 6 3\\n') == '5'",
        "num_ids": 641,
        "indeed": true
    },
    {
        "number": 4214,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    towns = list(map(lambda x: list(map(int, x.split())), stdin.split()[1:]))\n    distances = []\n    for i in range(N):\n        for j in range(i+1, N):\n            dx = towns[i][0] - towns[j][0]\n            dy = towns[i][1] - towns[j][1]\n            distance = (dx**2 + dy**2)**0.5\n            distances.append((distance, (i, j)))\n\n    distances.sort(key=lambda x: x[0])\n    average_length = sum(distances[i][0] for i in range(N)) / N\n    return f\"{average_length:.6f}\"\n\ninput_str = \"\"\"3\n0 0\n1 0\n0 1\n\"\"\"\noutput = solution(input_str)\nprint(output) # Output: 2.27614",
        "test": "assert solution(\"\"\"",
        "num_ids": 1120,
        "indeed": false
    },
    {
        "number": 4215,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    total_length = A - B\n    print(total_length)\n    return \"\"",
        "test": "assert solution(\"12 4\") == \"4\"",
        "num_ids": 444,
        "indeed": false
    },
    {
        "number": 4216,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_value = float('inf')\n\n    for a in range(1, n + 1):\n        for b in range(1, n + 1):\n            if a * b == n:\n                value = max(len(str(a)), len(str(b)))\n                min_value = min(min_value, value)\n\n    return str(min_value)",
        "test": "assert solution(\"10000\") == \"3\"",
        "num_ids": 829,
        "indeed": false
    },
    {
        "number": 4217,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    foods = [set() for _ in range(m)]\n    for i in range(n):\n        k, *a = map(int, stdin.split())\n        for j, num in enumerate(a, start=1):\n            foods[j].add(num)\n    likes_all = all(set(food).issubset(foods[j]) for j, food in enumerate(foods, start=1))\n    return '1' if likes_all else '0'\n\nwith open('input.txt', 'r') as f:\n    stdin = f.read()\n\nprint(solution(stdin))",
        "test": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\\n2 3 2\") == \"1\"",
        "num_ids": 722,
        "indeed": false
    },
    {
        "number": 4218,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    # Create a list of odd numbers\n    odd_numbers = [x for x in range(1, N+1, 2)]\n    \n    # Calculate the probability of finding an odd number\n    odd_probability = len(odd_numbers) / N\n    \n    return str(round(odd_probability, 6))",
        "test": "assert solution(\"4\") == \"0.5000000000\"",
        "num_ids": 465,
        "indeed": false
    },
    {
        "number": 4219,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n    x = list(map(int, stdin.split()[1:]))\n    y = list(map(int, stdin.split()[1:]))\n\n    honest_persons = 0\n\n    for i in range(N):\n        if y[i] == 1:\n            honest_persons += 1\n\n    return str(honest_persons)\n\nsample_input = \"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\"\nprint(solution(sample_input))",
        "test": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == \"2\"",
        "num_ids": 1031,
        "indeed": false
    },
    {
        "number": 4220,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.split()[0])\n    S = stdin.split()[1]\n\n    if len(S) <= K:\n        return S\n\n    else:\n        return S[:K] + \"...\"",
        "test": "assert solution('7\\nnikoandsolstice') == 'nikoand...'",
        "num_ids": 449,
        "indeed": true
    },
    {
        "number": 4221,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    noun = stdin.strip()\n    if noun.endswith('s'):\n        plural = noun + 'es'\n    else:\n        plural = noun +'s'\n    return plural",
        "test": "assert solution(\"banana\") == \"bananas\"",
        "num_ids": 463,
        "indeed": true
    },
    {
        "number": 4222,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    a = [list(map(int, stdin.split())) for _ in range(k)]\n    count = 0\n\n    for i in range(n):\n        has_snack = False\n        for j in range(k):\n            if a[j][i] == 1:\n                has_snack = True\n                break\n        if not has_snack:\n            count += 1\n\n    print(count)\n    return \"Snuke {} has no snacks.\".format(i+1)",
        "test": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"",
        "num_ids": 958,
        "indeed": false
    },
    {
        "number": 4223,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    slimes = [s[i] for i in range(n)]\n    color_set = set()\n\n    for slime in slimes:\n        if slime in color_set:\n            break\n        color_set.add(slime)\n\n    if len(color_set) == 1:\n        return \"1\"\n    else:\n        return str(len(color_set))",
        "test": "assert solution(\"10\\naaaabaaca\\n\") == \"5\"",
        "num_ids": 686,
        "indeed": false
    },
    {
        "number": 4224,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = [x for x in a]\n\n    def divide_by_2(i: int) -> None:\n        a[i] //= 2\n\n    def multiply_by_3(i: int) -> None:\n        a[i] *= 3\n\n    result = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            divide_by_2(i)\n            result += 1\n        else:\n            multiply_by_3(i)\n            result += 1\n\n    return str(result)\n\nstdin = \"3\\n5 2 4\"\nprint(solution(stdin))",
        "test": "assert solution(\"3\\n5 2 4\") == \"3\"",
        "num_ids": 773,
        "indeed": false
    },
    {
        "number": 4225,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, k = map(int, stdin.split())\n    \n    # Maximum sum of cards chosen\n    max_sum = 0\n    # List to store the count of each card type\n    count = [0] * 3\n    \n    # Count the number of cards with each value\n    for card in [a, b, c]:\n        if card == 0:\n            count[0] += 1\n        elif card == -1:\n            count[1] += 1\n        else:\n            count[2] += 1\n    \n    # Calculate the maximum sum\n    for i in range(k):\n        max_sum += min(count)\n        count[min(count) - 1] += 1\n    \n    return str(max_sum)",
        "test": "assert solution(\"2 1 1 3\") == \"2\"",
        "num_ids": 857,
        "indeed": false
    },
    {
        "number": 4226,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    \n    if X <= 3:\n        return \"Yes\"\n    else:\n        if Y == 4:\n            return \"Yes\"\n        elif Y == 2:\n            return \"No\"\n        else:\n            return \"No\"",
        "test": "assert solution(\"5 10\") == \"No\", \"Expected No, got {}\".format(solution(\"5 10\"))",
        "num_ids": 580,
        "indeed": false
    },
    {
        "number": 4227,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        if a < b:\n            edges.append((a, b))\n        else:\n            edges.append((b, a))\n\n    edges.sort(key=lambda x: (x[0], x[1]))\n    graph = [[] for _ in range(n + 1)]\n    for a, b in edges:\n        graph[a].append(b)\n        graph[b].append(a)\n\n    visited = [False] * (n + 1)\n    paths = [[] for _ in range(n + 1)]\n\n    def backtrack(node: int) -> int:\n        if node == n + 1:\n            paths[node].append(visited.copy())\n            return 1\n\n        paths_count = 0\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                paths_count += backtrack(neighbor)\n                visited[neighbor] = False\n\n        return paths_count\n\n    paths_count = backtrack(1)\n\n    return str(paths_count)\n\n\ndef",
        "test": "assert solution(stdin) == expected_output, \"Test failed\"",
        "num_ids": 1121,
        "indeed": false
    },
    {
        "number": 4228,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    apples = [l + i for i in range(1, n + 1)]\n    apples.sort()\n\n    best_choice = -1\n    best_diff = float('inf')\n\n    for i in range(n):\n        current_diff = abs(sum(apples[:i]) - sum(apples))\n        if current_diff < best_diff:\n            best_choice = i\n            best_diff = current_diff\n\n    return apples[best_choice]\n\ninput_str = \"5 2\\n\"\nprint(solution(input_str))",
        "test": "assert solution(\"5 2\") == \"18\"",
        "num_ids": 724,
        "indeed": false
    },
    {
        "number": 4229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    \n    fizz_buzz = []\n    i = 1\n    \n    while len(fizz_buzz) < N:\n        if i % 3 == 0 and i % 5 == 0:\n            fizz_buzz.append('FizzBuzz')\n        elif i % 3 == 0:\n            fizz_buzz.append('Fizz')\n        elif i % 5 == 0:\n            fizz_buzz.append('Buzz')\n        else:\n            fizz_buzz.append(i)\n        i += 1\n    \n    return str(sum(fizz_buzz))",
        "test": "assert solution(\"15\\n\") == \"60\\n\"",
        "num_ids": 1120,
        "indeed": false
    },
    {
        "number": 4230,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    p = list(map(int, stdin.split()[1:]))\n\n    def find_nearest_to_x(p: List[int]) -> int:\n        min_diff = float('inf')\n        min_nearest = float('inf')\n\n        for num in p:\n            diff = abs(num - x)\n            if diff < min_diff:\n                min_diff = diff\n                min_nearest = num\n\n        return min_nearest\n\n    nearest = find_nearest_to_x(p)\n    print(nearest)\n    return \"\"\n\n\ndef",
        "test": "assert solution(\"9 10\\n1 2 3 4 5 6 7 8 9\") == \"1\"",
        "num_ids": 730,
        "indeed": false
    },
    {
        "number": 4231,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    h, w = map(int, stdin.split())\n\n    white_cells = H * W\n    remaining_white_cells = (H - h) * (W - w)\n\n    return str(white_cells - remaining_white_cells)",
        "test": "assert solution(\"3 2\\n2 1\") == \"1\"",
        "num_ids": 465,
        "indeed": false
    },
    {
        "number": 4232,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()[1:]))\n\n    x = 1\n    count = 0\n\n    while x <= 10**9:\n        if sum(1 for i in arr if i > x) <= k:\n            return str(x)\n        x += 1\n\n    return \"-1\"\n",
        "test": "assert solution(\"\"\"7 4",
        "num_ids": 713,
        "indeed": false
    },
    {
        "number": 4233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(line.rstrip()) for line in stdin.split('\\n') if line.strip()]\n    \n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                stars.append((i, j, 1))\n            elif grid[i][j] == '.':\n                for size in range(1, min(n, m) + 1):\n                    if size * size > n * m:\n                        break\n                    if i - size // 2 >= 0 and i + size // 2 <= n - 1 and j - size // 2 >= 0 and j + size // 2 <= m - 1:\n                        for si in range(size, 0, -1):\n                            for sj in range(size, 0, -1):\n                                if si * si + sj * sj <= size * size and i + si - size // 2 >= 0 and i + si + size // 2 <= n - 1 and j + sj - size // 2 >= 0 and j + sj + size // 2 <= m - 1:\n                                    stars.append((i + si - size // 2, j + sj - size // 2, si))\n    \n    if not stars:\n        return '-1'\n    \n    stars.sort(key=lambda x: (x[0], x[1], x[2]))\n    result = []\n    for i, j, size in stars:\n        result.append(f'{i} {j} {size}')\n    \n    return '\\n'.join(result)",
        "test": "assert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\\n\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"",
        "num_ids": 2007,
        "indeed": false
    },
    {
        "number": 4234,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    \n    good = True\n    for i in range(1, len(s), 2):\n        if s[i] == s[i - 1]:\n            good = False\n            break\n    \n    if good:\n        return \"0\" + s\n    else:\n        i = 1\n        j = 0\n        count = 0\n        \n        while i < len(s):\n            if s[i] == s[j]:\n                count += 1\n            else:\n                count = 1\n            \n            if count == 1:\n                j = i\n            i += 1\n        \n        return str(count) + s[j:]",
        "test": "assert solution('aabc') == '2\\nab'",
        "num_ids": 918,
        "indeed": false
    },
    {
        "number": 4235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n\n    degree = [0] * (n + 1)\n    for u in range(1, n + 1):\n        degree[u] = len(graph[u])\n\n    def get_adjacent(u: int) -> List[int]:\n        return graph[u]\n\n    def dfs(u: int, visited: Set[int]) -> List[int]:\n        if u in visited:\n            return [u]\n        visited.add(u)\n\n        adjacent = get_adjacent(u)\n        paths = []\n        for v in adjacent:\n            if degree[v] > 0:\n                paths.extend(dfs(v, visited))\n\n        return [u] + paths\n\n    visited = set()\n    paths = []\n    for u in range(1, n + 1):\n        if degree[u] > 0:\n            paths.extend(dfs(u, visited))\n\n    if len(paths) < m:\n        return \"NO\"\n\n    path = \"\"\n    for u in paths:\n        for v in graph[u]:\n            if u == v:\n                path += \"0\"\n            else:\n                path += \"1\"\n                break\n        else:\n            continue\n        break\n\n    return \"YES\" + path\n",
        "test": "assert solution(\"5 3\\n1 2\\n2 3\\n3 4\\n4 5\") == \"NO\"",
        "num_ids": 2223,
        "indeed": false
    },
    {
        "number": 4236,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n\n    def intersection(p: int, segments: list[tuple[int, int]]) -> int:\n        for l, r in segments:\n            if l <= p <= r:\n                return l\n            if r < p:\n                l = r + 1\n        return -1\n\n    points = set()\n    for i in range(1, m + 1):\n        if i not in points:\n            if intersection(i, segments) == -1:\n                points.add(i)\n\n    print(len(points))\n    for point in sorted(points):\n        print(point)\n\n    return \"\"\n\n\ndef",
        "test": "assert solution('''",
        "num_ids": 1113,
        "indeed": false
    },
    {
        "number": 4237,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    count = 0\n    for i in range(a, b+1):\n        if i % c!= 0 and i % d!= 0:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"4 9 2 3\") == \"2\"",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 4238,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    decimal_representation = str(N)\n    sum_of_digits = sum(int(digit) for digit in decimal_representation)\n    if sum_of_digits % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"123456789\") == \"Yes\"",
        "num_ids": 442,
        "indeed": false
    },
    {
        "number": 4239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 1\n    while True:\n        x = i ** 2\n        if x > n:\n            break\n        i += 1\n    return str(i)\n\ndef",
        "test": "assert solution(\"99\") == \"2\"",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 4240,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()[0].lower()\n    t = stdin.splitlines()[1].lower()\n\n    # Check if the strings are equal\n    if s == t:\n        return \"Yes\"\n\n    # Check if the strings are not equal\n    n = len(s)\n    m = len(t)\n    if n!= m:\n        return \"No\"\n\n    # Perform rotation operations\n    for _ in range(n // m):\n        s = t + s[m:]\n\n    # Check if the strings are equal after rotation\n    if s == t:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"kyoto\\ntokyo\") == \"Yes\", \"Incorrect output\"",
        "num_ids": 522,
        "indeed": false
    },
    {
        "number": 4241,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s = list(s)\n    t = list(t)\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+len(t)] == t:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"abcxyz\\nabcd\") == \"0\"",
        "num_ids": 581,
        "indeed": false
    },
    {
        "number": 4242,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    A, B, K = int(inputs[0]), int(inputs[1]), int(inputs[2])\n\n    divisors = [i for i in range(A + 1, B) if B % i == 0]\n    divisors.sort(reverse=True)\n\n    if K > len(divisors):\n        return None\n\n    return str(divisors[K - 1])",
        "test": "assert solution(\"8 12 2\") == \"2\"",
        "num_ids": 698,
        "indeed": false
    },
    {
        "number": 4243,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    yen_values = [500, 100, 50, 10, 5, 1]\n    happiness_points = [1000, 5, 5, 5, 5, 5]\n    max_happiness_points = 0\n\n    for i in range(len(yen_values)):\n        count = x // yen_values[i]\n        max_happiness_points += happiness_points[i] * count\n        x %= yen_values[i]\n\n    return str(max_happiness_points)",
        "test": "assert solution(\"1024\") == \"2020\"",
        "num_ids": 1003,
        "indeed": false
    },
    {
        "number": 4244,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    X = list(map(int, stdin.split()[1:]))\n    X.sort()\n    total_points = 0\n    for x in X:\n        total_points += (x - 2) ** 2\n    return str(total_points)",
        "test": "assert solution(\"2\\n1 4\") == \"5\"",
        "num_ids": 573,
        "indeed": false
    },
    {
        "number": 4245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input from stdin\n    A, B = map(int, stdin.split())\n\n    # Calculate the number of required power strips\n    count = 0\n    num_strips = 1\n    while A > 0:\n        A -= 1\n        count += 1\n        num_strips += 1\n\n    # Calculate the number of empty sockets for each power strip\n    sockets_per_strip = num_strips * B\n    empty_sockets_per_strip = A - sockets_per_strip\n\n    # Calculate the total number of empty sockets\n    total_empty_sockets = num_strips * (B - empty_sockets_per_strip)\n\n    # Print the result\n    print(count)\n    print(num_strips, \"power strips, each with\", sockets_per_strip, \"sockets, extend the socket into\", total_empty_sockets, \"empty sockets.\")",
        "test": "assert solution(\"4 10\") == \"3\\n\", \"Test case 1 failed\"",
        "num_ids": 658,
        "indeed": false
    },
    {
        "number": 4246,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    sunny = 0\n    cloudy = 0\n    rainy = 0\n\n    for i in range(len(S)):\n        if S[i] == 'S':\n            sunny += 1\n        elif S[i] == 'C':\n            cloudy += 1\n        elif S[i] == 'R':\n            rainy += 1\n\n    correct_days = 0\n    for i in range(len(T)):\n        if T[i] == 'S' and cloudy > 0:\n            correct_days += 1\n            cloudy -= 1\n        elif T[i] == 'C' and sunny > 0:\n            correct_days += 1\n            sunny -= 1\n        elif T[i] == 'R' and rainy > 0:\n            correct_days += 1\n            rainy -= 1\n\n    return str(correct_days)\n\ndef",
        "test": "assert solution(\"CSR\") == \"2\"",
        "num_ids": 704,
        "indeed": false
    },
    {
        "number": 4247,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, *p = map(int, stdin.split())\n    count = 0\n\n    for i in range(n - 2):\n        if p[i] < p[i + 2] and p[i] < p[i + 1]:\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"5\\n1 3 5 4 2\\n\") == \"2\"",
        "num_ids": 555,
        "indeed": false
    },
    {
        "number": 4248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    for line in stdin.split('\\n'):\n        point = tuple(map(float, line.strip().split()))\n        points.append(point)\n\n    n = len(points)\n    if n == 1:\n        x, y = points[0]\n        x_min, x_max = min(x, -x), max(x, -x)\n        y_min, y_max = min(y, -y), max(y, -y)\n        angle = 0\n        if x_max - x_min >= y_max - y_min:\n            angle = math.degrees(math.atan(y_max - y_min / (x_max - x_min)))\n        else:\n            angle = 180 - math.degrees(math.atan(x_max - x_min / (y_max - y_min)))\n        return str(angle)\n\n    def distance(p1, p2):\n        return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)\n\n    def angle(p1, p2, p3):\n        return math.degrees(math.acos((p1[0] - p2[0]) * (p3[0] - p2[0]) + (p1[1] - p2[1]) * (p3[1] - p2[1]) + (p1[2] - p2[2]) * (p3[2] - p2[2])))\n\n    angles = [angle(points[0], points[i], points[(i + 1) % n]) for i in range(n)]\n    max_angle = max(angles)\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if angle(points[i], points[j], points[(j + 1) % n]) == max_angle:\n                max_angle = angle(points[i], points[j], points[(j + 2) % n])\n\n    return str(max_angle)",
        "test": "assert solution(",
        "num_ids": 2958,
        "indeed": false
    },
    {
        "number": 4249,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    days = [0] * m\n    days[0] = 0\n\n    def dfs(curr):\n        if curr == m:\n            nonlocal days\n            return\n\n        for i in range(curr, n):\n            if days[i] > 0:\n                continue\n\n            days[i] = min(days[i], days[curr] + a[i])\n            dfs(curr + 1)\n            days[i] = 0\n\n    dfs(0)\n\n    if all(days[i] == 0 for i in range(m)):\n        return -1\n    else:\n        return min(days[i] for i in range(m) if days[i] > 0)",
        "test": "assert solution(open('input2.txt').read()) == '2'",
        "num_ids": 1124,
        "indeed": false
    },
    {
        "number": 4250,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n\n    s = [x for x in s if s.count(x) <= k]\n    if not s:\n        return \"\"\n\n    t = [x for x in s if x in s and s.count(x) == k]\n\n    if len(t) == 0:\n        return \"\"\n\n    return \" \".join(map(str, t))\n\n\ndef",
        "test": "assert solution(\"\"\"",
        "num_ids": 909,
        "indeed": false
    },
    {
        "number": 4251,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(i: int, j: int, s: List[int]) -> List[int]:\n        if i == n:\n            return s\n        s.append(a[i][j])\n        return dfs(i + 1, 0, s)\n\n    n, m = map(int, stdin.split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split())))\n\n    for i in range(n):\n        dfs(0, i, [])\n\n    max_k = 0\n    for i in range(n):\n        for j in range(m):\n            if i < n - 1:\n                if abs(a[i][j] - a[i + 1][j]) >= max_k:\n                    max_k = abs(a[i][j] - a[i + 1][j])\n            if j < m - 1:\n                if abs(a[i][j] - a[i][j + 1]) >= max_k:\n                    max_k = abs(a[i][j] - a[i][j + 1])\n\n    return str(max_k)\n",
        "test": "assert solution(\"\"\"",
        "num_ids": 1130,
        "indeed": false
    },
    {
        "number": 4252,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    name = stdin.split()[1]\n    \n    forbidden = \"xxx\"\n    forbidden_count = name.count(forbidden)\n    \n    if forbidden_count == 0:\n        return \"0\"\n    \n    count_x = 0\n    for i in range(1, n):\n        if name[i-1] == \"x\":\n            count_x += 1\n            if count_x >= 3:\n                forbidden_count -= 1\n                if forbidden_count == 0:\n                    return str(i)\n    \n    return str(n)",
        "test": "assert solution(\"5\\nxxoxx\") == \"0\"",
        "num_ids": 778,
        "indeed": false
    },
    {
        "number": 4253,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = 3 * r ** 2\n    return str(area)",
        "test": "assert solution(\"4\") == \"48\"",
        "num_ids": 264,
        "indeed": true
    },
    {
        "number": 4254,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    sheep, wolves = map(int, stdin.split())\n    if wolves >= sheep:\n        return \"unsafe\"\n    else:\n        return \"safe\"",
        "test": "assert solution(\"4 5\\n\") == \"unsafe\"",
        "num_ids": 374,
        "indeed": true
    },
    {
        "number": 4255,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    sides = list(map(int, stdin.split()))\n    sides.sort()\n    a, b, c = sides\n    \n    # calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # calculate the area of the triangle\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    \n    # round to the nearest integer and print the result\n    return str(round(area))",
        "test": "assert solution(\"3 4 5\") == \"6\"",
        "num_ids": 567,
        "indeed": true
    },
    {
        "number": 4256,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a <= b:\n        return \"0\"\n    return min(c, b // a)\n\nstdin = input()\nprint(solution(stdin))",
        "test": "assert solution('2 11 4') == '4'",
        "num_ids": 447,
        "indeed": false
    },
    {
        "number": 4257,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    result = A * B\n    return str(result)",
        "test": "assert solution(\"2 5\\n\") == \"10\"",
        "num_ids": 234,
        "indeed": true
    },
    {
        "number": 4258,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    \n    # Calculate the number of biscuits produced within 0.5 seconds after activation\n    Biscuits = 0\n    t = A\n    while t < T + 0.5:\n        Biscuits += B\n        t += A\n    \n    return str(Biscuits)",
        "test": "assert solution('3 5 7') == '10', 'Test failed'",
        "num_ids": 506,
        "indeed": true
    },
    {
        "number": 4259,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    k, a, b = map(int, stdin.split())\n\n    # calculate carry distance\n    carry_distance = (a + k - 1) // k * k\n\n    # check if the carry distance is between A and B\n    if a <= carry_distance <= b:\n        return \"OK\"\n    else:\n        return \"NG\"",
        "test": "assert solution('7\\n500 600') == 'OK'",
        "num_ids": 659,
        "indeed": true
    },
    {
        "number": 4260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    t, x = map(int, stdin.split())\n    return str(t * x)",
        "test": "assert solution(\"8 3\") == \"2.6666666667\"",
        "num_ids": 336,
        "indeed": false
    },
    {
        "number": 4261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n\n    if A > 0 and B >= A:\n        B -= A\n        print(B)\n    elif C > 0:\n        C -= B\n        B = 0\n        print(C)\n    else:\n        print(0)\n\n    return \"\"\n",
        "test": "assert solution(\"6 4 3\") == \"1\"",
        "num_ids": 581,
        "indeed": false
    },
    {
        "number": 4262,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    p = stdin.split()[1:]\n    q = stdin.split()[1:]\n\n    p_set = set(p)\n    q_set = set(q)\n\n    count = 0\n    for i in range(n):\n        if p_set.issubset(q_set):\n            count += 1\n            p_set.remove(q[i])\n            q_set.remove(p[i])\n\n    return str(count)",
        "test": "assert solution(\"3\\n1 3 2\\n3 1 2\") == \"3\"",
        "num_ids": 841,
        "indeed": false
    },
    {
        "number": 4263,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    longest_substring = \"\"\n    max_length = 0\n\n    for i in range(len(S) - 4):\n        substring = S[i:i + 5]\n        if substring.count('A') + substring.count('C') + substring.count('G') + substring.count('T') == 4:\n            if len(substring) > max_length:\n                longest_substring = substring\n                max_length = len(substring)\n\n    return str(max_length)",
        "test": "assert solution(\"AGGTAB\") == \"5\"",
        "num_ids": 723,
        "indeed": false
    },
    {
        "number": 4264,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        if len(str(i)) % 2 == 1:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"11\") == \"9\"",
        "num_ids": 319,
        "indeed": true
    },
    {
        "number": 4265,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.strip().split()\n    s = list(S)\n    t = list(T)\n    m, n = len(s), len(t)\n    dp = [[0] * (n+1) for _ in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if s[i-1] == t[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n\n    return str(dp[m][n])\n",
        "test": "assert solution(\"cupofcoffee\\ncupofhottea\") == \"4\"",
        "num_ids": 923,
        "indeed": false
    },
    {
        "number": 4266,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    k, x = map(int, stdin.split())\n    black_stones = set()\n\n    for i in range(-k, x + 1):\n        if i == x:\n            black_stones.add(x)\n        elif i % 2 == 0:\n            black_stones.add(i)\n\n    return''.join(map(str, sorted(black_stones)))",
        "test": "assert solution(\"3 7\") == \"5 6 7 8 9\"",
        "num_ids": 1351,
        "indeed": false
    },
    {
        "number": 4267,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X >= 30:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution('25') == 'No'",
        "num_ids": 237,
        "indeed": true
    },
    {
        "number": 4268,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    points = []\n\n    for i in range(n):\n        point = list(map(int, input().split()))\n        points.append(point)\n\n    distances = {}\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            distance = sqrt((points[i][d] - points[j][d])**2)\n            distances[(i, j)] = distance\n\n    integer_distances = [distance for distance in distances.values() if int(distance) == distance]\n\n    return str(len(integer_distances))\n\nwith open(\"input.txt\", \"r\") as input_file:\n    stdin = input_file.read()\n\noutput = solution(stdin)\n\nwith open(\"output.txt\", \"w\") as output_file:\n    output_file.write(output)",
        "test": "assert solution(open(\"input.txt\", \"r\").read()) == \"1\"",
        "num_ids": 920,
        "indeed": false
    },
    {
        "number": 4269,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n        return \"Bad\"\n    else:\n        return \"Good\"",
        "test": "assert solution(\"1234\") == \"Good\", \"Sample Input 2\"",
        "num_ids": 498,
        "indeed": true
    },
    {
        "number": 4270,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, *values = map(int, stdin.split())\n\n    def composition(values: list) -> float:\n        n = len(values)\n        if n == 1:\n            return values[0]\n        else:\n            return (composition(values[:-1]) + composition(values[1:])) / 2\n\n    return str(composition(values))",
        "test": "assert solution(\"2\\n3 4\") == \"3.5\"",
        "num_ids": 687,
        "indeed": false
    },
    {
        "number": 4271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    input_data = list(map(int, stdin.split()))\n\n    n = input_data[0]\n    dishes = input_data[1:n + 1]\n    dish_satisfaction_points = [input_data[i + 1:i + n + 1] for i in range(0, n - 1, 2)]\n\n    total_satisfaction_points = 0\n    for i in range(len(dishes)):\n        total_satisfaction_points += dish_satisfaction_points[i][i] + dish_satisfaction_points[i][i + 1]\n\n    return str(total_satisfaction_points)\n",
        "test": "assert solution(\"5\\n1 3 4 5 2\\n5 5 5 5 5\\n1 1 1 1 1\") == \"75\"",
        "num_ids": 902,
        "indeed": false
    },
    {
        "number": 4272,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n\n    count = 0\n    i = 0\n    while i + 2 <= n:\n        if s[i:i + 3] == \"ABC\":\n            count += 1\n        i += 1\n\n    return str(count)",
        "test": "assert solution(\"10\\nZABCDBABCQ\\n\") == \"2\"",
        "num_ids": 626,
        "indeed": true
    },
    {
        "number": 4273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    people = stdin.split()[1:]\n\n    def is_valid(name: str) -> bool:\n        return name[0] in \"MACEH\"\n\n    def has_duplicate_letters(name: str) -> bool:\n        return len(set(name)) < len(name)\n\n    def find_unique_combinations(people: List[str]) -> int:\n        valid_combinations = 0\n\n        for i in range(len(people) - 2):\n            for j in range(i + 1, len(people) - 1):\n                for k in range(j + 1, len(people)):\n                    if is_valid(people[i]) and is_valid(people[j]) and is_valid(people[k]) and has_duplicate_letters(people[i]) and has_duplicate_letters(people[j]) and has_duplicate_letters(people[k]):\n                        valid_combinations += 1\n\n        return valid_combinations\n\n    return str(find_unique_combinations(people))",
        "test": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\\n\") == \"2\"",
        "num_ids": 1474,
        "indeed": false
    },
    {
        "number": 4274,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m == n:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"3 3\") == \"Yes\"",
        "num_ids": 335,
        "indeed": true
    },
    {
        "number": 4275,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s)!= 6 or not s.islower():\n        return \"No\"\n    \n    if s[2] == s[3] and s[4] == s[5]:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"sippuu\") == \"Yes\"",
        "num_ids": 351,
        "indeed": true
    },
    {
        "number": 4276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    def find_route(t: int, c: list[int], min_t: int) -> int:\n        for i, cost in enumerate(c):\n            if cost + t <= min_t:\n                return i, cost + t\n        return -1, min_t\n\n    N, T = map(int, stdin.split())\n    c, t = [], []\n    for i in range(N):\n        c.append(int(stdin.split()[i + 1]))\n        t.append(int(stdin.split()[i + 2]))\n\n    c.sort()\n    t.sort()\n\n    i, min_t = find_route(T, c, t[0])\n    if i == -1:\n        return str(T)\n    else:\n        return str(c[i])",
        "test": "assert solution('''",
        "num_ids": 817,
        "indeed": false
    },
    {
        "number": 4277,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    taxi_cost = a * n\n    train_cost = taxi_cost + b\n    return str(min(train_cost, taxi_cost))",
        "test": "assert solution(\"4 2 9\") == \"8\"",
        "num_ids": 334,
        "indeed": false
    },
    {
        "number": 4278,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    strings = stdin.split('\\n')[1:]\n\n    anagrams_count = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if is_anagram(strings[i], strings[j]):\n                anagrams_count += 1\n\n    return str(anagrams_count)\n\n\ndef",
        "test": "assert solution(\"\"\"",
        "num_ids": 520,
        "indeed": false
    },
    {
        "number": 4279,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.split('\\n')[0])\n    result = []\n    n = len(stdin.split('\\n')[1]) - 1\n    k = 0\n    for i in range(queries):\n        k = int(stdin.split('\\n')[i+1])\n        result.append(ord(stdin.split('\\n')[i+1][k-1]))\n    return ''.join(str(x) for x in result)\n\ndef",
        "test": "assert solution(\"4\\n2132\\n506\\n999999999\\n1000000000\\n\") == \"829999998\\n\", \"example 2\"",
        "num_ids": 1024,
        "indeed": false
    },
    {
        "number": 4280,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    companies = [0] * n\n    roads = []\n\n    for i in range(n - 1):\n        x, y = map(int, stdin.split())\n        roads.append((x - 1, y - 1))\n\n    for i, (x, y) in enumerate(roads):\n        if companies[x]!= companies[y]:\n            companies[x] += 1\n        else:\n            companies[x] = 0\n\n    good_cities = 0\n    for company in companies:\n        if company!= 0:\n            good_cities += 1\n\n    return str(good_cities) + '\\n' +''.join(map(str, companies))\n\nprint(solution(\"\"\"6 2\n1 4\n4 3\n3 5\n3 6\n5 2\n\"\"\"))  # Output: 2 1 2 1 2\nprint(solution(\"\"\"4 2\n3 1\n1 4\n1 2\n\"\"\"))  # Output: 1 1 1 \nprint(solution(\"\"\"10 2\n10 3\n1 2\n1 3\n1 4\n2 5\n2 6\n2 7\n3 8\n3 9\n\"\"\"))  # Output: 3 1 1 3 2 3 1 3 1",
        "test": "assert solution(open(\"example2.in\").read()) == \"1\\n1 1 1 1\\n\"",
        "num_ids": 1787,
        "indeed": false
    },
    {
        "number": 4281,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1:]))\n\n    def min_max_occupied(moves):\n        min_occ = min(moves)\n        max_occ = max(moves)\n        return min_occ, max_occ\n\n    def is_valid(x):\n        return 0 <= x <= n + 1\n\n    def can_move(x, move):\n        return abs(x - move) <= 1\n\n    def move(x, move):\n        if can_move(x, move):\n            return move\n        return x\n\n    moves = []\n    for i in range(n):\n        x_i = x[i]\n        if is_valid(x_i - 1) and can_move(x_i - 1, move(x_i - 1, x_i - 1)):\n            moves.append(x_i - 1)\n        if is_valid(x_i + 1) and can_move(x_i + 1, move(x_i + 1, x_i + 1)):\n            moves.append(x_i + 1)\n        if is_valid(x_i - 1) and is_valid(x_i + 1) and can_move(x_i - 1, move(x_i - 1, x_i - 1)) and can_move(x_i + 1, move(x_i + 1, x_i + 1)):\n            moves.append(x_i)\n\n    min_occ, max_occ = min_max_occupied(moves)\n    return f\"{min_occ} {max_occ}\"",
        "test": "assert solution(\"\"\"4",
        "num_ids": 1488,
        "indeed": false
    },
    {
        "number": 4282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = [a[:2] for a in a]\n    p = [i for i in range(1, n+1)]\n    x = 1\n    for _ in range(2 * n):\n        x = (x - 1) % n + 1\n        p.remove(x)\n    return \" \".join(str(p[i-1]) for i in range(1, n+1))\n\ndef",
        "test": "assert solution(\"\"\"",
        "num_ids": 1137,
        "indeed": false
    },
    {
        "number": 4283,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort(reverse=True)\n    b, c = 0, 0\n    for i in range(n - 1):\n        c += a[i] - a[i + 1]\n        b = max(b, c)\n    return str(n - b)",
        "test": "assert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == \"10\"",
        "num_ids": 1080,
        "indeed": false
    },
    {
        "number": 4284,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.split('\\n')[0])\n\n    for i in range(queries):\n        k, n, a, b = map(int, stdin.split('\\n')[i+1].split())\n        if k > b:\n            print(-1)\n            continue\n\n        charges = [0] * (n+1)\n        charges[1] = a\n\n        for i in range(2, n+1):\n            if k > charges[i-1] + a:\n                charges[i] = charges[i-1] + a\n            elif k > charges[i-1] + b:\n                charges[i] = charges[i-1] + b\n            else:\n                charges[i] = charges[i-1]\n\n        print(max(charges[1:]))",
        "test": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\\n\") == \"4\\n-1\\n5\\n2\\n0\\n1\\n\"",
        "num_ids": 1091,
        "indeed": false
    },
    {
        "number": 4285,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n\n    MOD = 10**9 + 7\n\n    def num_subsequences(s: str) -> int:\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            dp[i] = (dp[i - 1] + 2 * dp[i - 2]) % MOD\n            if s[i - 1] == '?':\n                for j in range(i - 2, -1, -1):\n                    if s[j] == '?':\n                        dp[i] = (dp[i] + dp[j + 1]) % MOD\n                        break\n        return dp[n]\n\n    return str(num_subsequences(s))\n\nprint(solution(input()))",
        "test": "assert solution(input()) == \"2835\"",
        "num_ids": 1493,
        "indeed": false
    },
    {
        "number": 4286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    edges = []\n    for i in range(m):\n        x, y, w = map(int, stdin.split())\n        edges.append((x - 1, y - 1, w))\n    # sort edges by weight\n    edges.sort(key=lambda x: x[2])\n\n    # bipartite matching\n    def bipartite_matching(n: int, edges: List[Tuple[int, int, int]]) -> List[int]:\n        def bfs(u: int, visited: List[bool]) -> List[int]:\n            queue = [(u, 1)]\n            visited[u] = True\n            res = []\n            while queue:\n                v, _ = queue.pop(0)\n                for i, j, w in edges:\n                    if not visited[j] and w == 1:\n                        visited[j] = True\n                        res.append(j + 1)\n                        queue.append((j, 1))\n            return res\n\n        def matching(n: int, edges: List[Tuple[int, int, int]]) -> List[int]:\n            matching = [0] * n\n            for u in range(n):\n                if matching[u] == 0 and bfs(u, matching):\n                    return matching\n            return matching\n\n        matching_1 = matching(n, edges)\n        matching_2 = matching(n, edges)\n        return [1 if matching_1[u] > matching_2[u] else 2 for u in range(n)]\n\n    matching = bipartite_matching(n, edges)\n    # calculate minimum coins\n    total_cost = 0\n    for i in range(n):\n        for j in range(n):\n            if matching[i] == matching[j]:\n                total_cost += a[i] + a[j]\n    return str(total_cost)\n\n\ndef",
        "test": "assert solution(\"4 0\\n1 3 3 7\") == \"16\"",
        "num_ids": 1772,
        "indeed": false
    },
    {
        "number": 4287,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split())\n    segments = [list(map(int, stdin.split())) for _ in range(n)]\n    umbrellas = [(x, p) for x, p in map(list, stdin.split())]\n\n    for i, (l, r) in enumerate(segments):\n        if l > r:\n            segments[i] = segments[i][::-1]\n\n    def can_move(x: int, umbrellas: List[Tuple[int, int]]) -> bool:\n        if not umbrellas:\n            return True\n\n        for umbrella in umbrellas:\n            if x <= umbrella[0]:\n                return False\n\n        return True\n\n    def total_fatigue(x: int, umbrellas: List[Tuple[int, int]]) -> int:\n        fatigue = 0\n        for umbrella in umbrellas:\n            fatigue += umbrella[1]\n\n        return fatigue\n\n    x = 0\n    umbrellas_to_take = 1\n    fatigue = 0\n\n    while x < a:\n        if can_move(x, umbrellas[:umbrellas_to_take]):\n            fatigue += umbrellas_to_take * umbrellas[0][1]\n            umbrellas = umbrellas[1:]\n            umbrellas_to_take = 0\n        else:\n            umbrellas_to_take += 1\n            if not umbrellas:\n                return \"-1\"\n\n        x += 1\n\n    return str(fatigue)",
        "test": "assert solution(\"\"\"",
        "num_ids": 2010,
        "indeed": false
    },
    {
        "number": 4288,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == C and B!= A:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"5 7 5\") == \"Yes\"",
        "num_ids": 392,
        "indeed": false
    },
    {
        "number": 4289,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N, T, A, *H = map(int, stdin.split())\n\n    def find_closest_place(temp: int) -> int:\n        closest_place = -1\n        closest_diff = float('inf')\n\n        for i in range(N):\n            diff = abs(temp - T - H[i])\n            if diff < closest_diff:\n                closest_diff = diff\n                closest_place = i\n\n        return closest_place\n\n    return str(find_closest_place(A))\n",
        "test": "assert solution(\"2\\n12 5\\n3000 2000\\n\") == \"1\"",
        "num_ids": 1031,
        "indeed": false
    },
    {
        "number": 4290,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    \n    count = 0\n    for i in range(1, n+m):\n        for j in range(i+1, n+m, 2):\n            count += 1\n            \n    return str(count)",
        "test": "assert solution(\"2 1\") == \"1\"",
        "num_ids": 645,
        "indeed": false
    },
    {
        "number": 4291,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    S = stdin.split('\\n')[1]\n    queries = list(map(int, stdin.split('\\n')[2:]))\n    \n    count_ac = 0\n    for i in range(N):\n        for j in range(i + 1, N + 1):\n            if S[i] == 'A' and S[j - 1] == 'C' and S[j] == 'T' and S[j + 1] == 'A' and S[j + 2] == 'C':\n                count_ac += 1\n    \n    for l, r in queries:\n        if l == 1 and r == N:\n            print(count_ac)\n        else:\n            substring = S[l - 1: r]\n            count_substring = 0\n            for i in range(len(substring)):\n                if substring[i] == 'A' and substring[i + 1] == 'C' and substring[i + 2] == 'T' and substring[i + 3] == 'A' and substring[i + 4] == 'C':\n                    count_substring += 1\n            print(count_substring)",
        "test": "assert solution(\"8 3\\nACACTACG\\n3 7\\n2 3\\n1 8\") == \"2\\n0\\n3\"",
        "num_ids": 1044,
        "indeed": false
    },
    {
        "number": 4292,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n\n    min_price = float('inf')\n    for i in range(K):\n        selected_prices = [prices[j] for j in range(N) if j!= i]\n        selected_price = sum(selected_prices)\n        min_price = min(min_price, selected_price)\n\n    return str(min_price)",
        "test": "assert solution(\"7 5\\n100 100 50 200 100 100 50\") == \"500\"",
        "num_ids": 909,
        "indeed": false
    },
    {
        "number": 4293,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n    min_sum = float('inf')\n    for i in range(1, 5):\n        for j in range(i + 1, 5):\n            sum_ab = P * i + Q * (j - 1)\n            sum_ba = P * (j - 1) + Q * i\n            sum_ac = P * i + R * (j - 1)\n            sum_ca = P * (j - 1) + R * i\n            min_sum = min(min_sum, sum_ab, sum_ba, sum_ac, sum_ca)\n    return str(min_sum)",
        "test": "assert solution(\"1 3 4\") == \"4\"",
        "num_ids": 808,
        "indeed": false
    },
    {
        "number": 4294,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split())\n    if x < a:\n        return '0'\n    else:\n        return '10'",
        "test": "assert solution(\"3 5\") == \"0\"",
        "num_ids": 305,
        "indeed": true
    },
    {
        "number": 4295,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    min_value = abs(n - k)\n    operations = 1\n\n    while operations < n:\n        min_value = min(min_value, abs(n - k))\n        n = abs(n - k)\n        operations += 1\n\n    return str(min_value)",
        "test": "assert solution(\"7 4\") == \"1\"",
        "num_ids": 347,
        "indeed": false
    },
    {
        "number": 4296,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    if A[0] + A[1] + A[2] >= 22:\n        return \"bust\"\n    else:\n        return \"win\"",
        "test": "assert solution(\"5 7 9\") == \"win\"",
        "num_ids": 480,
        "indeed": true
    },
    {
        "number": 4297,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_positive_divisible_by_2_n = 1\n    while True:\n        if min_positive_divisible_by_2_n % 2 == 0 and min_positive_divisible_by_2_n % n == 0:\n            break\n        min_positive_divisible_by_2_n += 1\n    return str(min_positive_divisible_by_2_n)\n",
        "test": "assert solution(\"3\") == \"6\"",
        "num_ids": 706,
        "indeed": false
    },
    {
        "number": 4298,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    min_inspectors = float('inf')\n\n    for i in range(1, N+1):\n        min_inspectors = min(min_inspectors, N - i + D)\n\n    return str(min_inspectors)\n",
        "test": "assert solution(\"6 2\") == \"2\"",
        "num_ids": 544,
        "indeed": false
    },
    {
        "number": 4299,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 999:\n        raise ValueError(\"N must be a positive integer not exceeding 999.\")\n\n    if n % 10 in (2, 4, 5, 7, 9):\n        pronunciation = \"hon\"\n    elif n % 10 in (0, 1, 6, 8):\n        pronunciation = \"pon\"\n    else:\n        pronunciation = \"bon\"\n\n    print(pronunciation)\n\n    return pronunciation\n",
        "test": "assert solution(\"5\") == \"hon\", \"Sample Input 2\"",
        "num_ids": 772,
        "indeed": true
    },
    {
        "number": 4300,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    data = stdin.split()[1:]\n    data = list(map(int, data))\n    total_health_points = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_health_points += data[i] * data[j]\n    return str(total_health_points)",
        "test": "assert solution(\"3\\n3 1 2\\n\") == \"11\", \"Test 1 failed\"",
        "num_ids": 1061,
        "indeed": true
    },
    {
        "number": 4301,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    A = list(map(int, stdin.split('\\n')[1:]))\n    max_1 = max(A)\n    max_2 = A[-1]\n    for i in range(N):\n        if A[i] == max_1:\n            max_2 = max(A[i+1:], key=lambda x: x)\n        elif A[i] == max_2:\n            max_1 = max(A[i+1:], key=lambda x: x)\n    return '\\n'.join(map(str, [max_1, max_2]))",
        "test": "assert solution(\"5\\n1\\n2\\n3\\n4\\n5\\n\") == \"4\\n3\\n2\\n1\\n5\\n\"",
        "num_ids": 829,
        "indeed": false
    },
    {
        "number": 4302,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    coins = 0\n    size_A = A\n    size_B = B\n\n    while size_A >= 1 and size_B >= 1:\n        coins += min(size_A, size_B)\n\n        size_A -= 1\n        size_B -= 1\n\n    return str(coins)",
        "test": "assert solution(\"10 4\") == \"24\"",
        "num_ids": 469,
        "indeed": false
    },
    {
        "number": 4303,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    candles = list(map(int, stdin.split()))\n\n    def is_valid(candles):\n        if len(candles)!= n:\n            return False\n        for i in range(1, n):\n            if candles[i] <= candles[i - 1]:\n                return False\n        return True\n\n    def find_min_time(candles, k):\n        left, right = 0, max(candles)\n\n        while left <= right:\n            mid = (left + right) // 2\n            total_light = sum(candles[i] <= mid for i in range(n))\n            if total_light >= k:\n                right = mid - 1\n            else:\n                left = mid + 1\n\n        return left\n\n    if not is_valid(candles):\n        return \"Invalid input\"\n\n    return str(find_min_time(candles, k))\n\ndef",
        "test": "assert solution(\"\"\"",
        "num_ids": 1254,
        "indeed": false
    },
    {
        "number": 4304,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    \n    if a > b:\n        a, b = b, a\n    \n    height_of_towers = [1] * (a + b + 1)\n    height_of_towers[1] = 1\n    for i in range(2, a + b + 1):\n        height_of_towers[i] = 1 + height_of_towers[i - 1] + height_of_towers[i - 2]\n    \n    count_of_snow = 0\n    for i in range(1, a + b + 1):\n        if height_of_towers[i] == 1:\n            count_of_snow += 1\n    \n    return str(count_of_snow)",
        "test": "assert solution(\"1 3\") == \"1\"",
        "num_ids": 730,
        "indeed": false
    },
    {
        "number": 4305,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    count = 0\n    while H > 0:\n        H -= A\n        count += 1\n    return str(count)",
        "test": "assert solution(\"10 4\") == \"3\"",
        "num_ids": 316,
        "indeed": true
    },
    {
        "number": 4306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    return str(B - A) + \" \" + str(D - C)",
        "test": "assert solution('0 75 25 100') == '50', 'Test failed'",
        "num_ids": 311,
        "indeed": false
    },
    {
        "number": 4307,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    count = 0\n    for num in range(1, n+1):\n        if num % 2!= 0:\n            divisors = []\n            for i in range(1, num+1):\n                if num % i == 0:\n                    divisors.append(i)\n            if len(divisors) == 8:\n                count += 1\n\n    return str(count)",
        "test": "assert solution(\"105\") == \"1\", \"Solution is not correct.\"",
        "num_ids": 490,
        "indeed": true
    },
    {
        "number": 4308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    crackers = [0] * N\n    max_num = 0\n    min_num = 10**9\n    for i in range(K):\n        crackers[i] = int(stdin.split()[i+1])\n        max_num = max(max_num, crackers[i])\n        min_num = min(min_num, crackers[i])\n    diff = max(max_num - min_num, min_num - max_num)\n    return str(diff)",
        "test": "assert solution('7 3\\n') == '1'",
        "num_ids": 791,
        "indeed": false
    },
    {
        "number": 4309,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n)",
        "test": "assert solution(\"111\") == \"111\", \"Sample Input: 111\"",
        "num_ids": 806,
        "indeed": false
    },
    {
        "number": 4310,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    n = len(A)\n    dp = [0] * (n + 1)\n    dp[0] = 0\n\n    for i in range(n):\n        cost = abs(A[i] - A[i - 1])\n        dp[i + 1] = dp[i] + cost\n\n    return str(dp[n])\n",
        "test": "assert solution(stdin=\"1 6 3\\n\") == \"5\"",
        "num_ids": 534,
        "indeed": false
    },
    {
        "number": 4311,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    a = [s]\n    for i in range(1, 1000001):\n        if i % 2 == 0:\n            a.append(i)\n        else:\n            a.append(3 * i + 1)\n    a.sort()\n    for i in range(len(a) - 1):\n        if a[i]!= a[i + 1]:\n            return i + 1\n    return len(a)\n\n\ndef",
        "test": "assert solution(\"8\") == \"5\"",
        "num_ids": 805,
        "indeed": false
    },
    {
        "number": 4312,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a >= b >= c >= d:\n        return \"No\"\n    elif a >= b >= c:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"10 9 10 10\") == \"No\"",
        "num_ids": 962,
        "indeed": false
    },
    {
        "number": 4313,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, *values, *costs = map(int, stdin.split())\n    gems = [i for i in range(1, n + 1)]\n\n    max_x_y = 0\n\n    for gem in gems:\n        value = values[gem - 1]\n        cost = costs[gem - 1]\n\n        if value <= cost:\n            x = value\n        else:\n            x = cost\n\n        y = sum(costs)\n\n        max_x_y = max(max_x_y, x - y)\n\n    return str(max_x_y)\n",
        "test": "assert solution(open(\"input.txt\", \"r\").read()) == \"5\"",
        "num_ids": 712,
        "indeed": false
    },
    {
        "number": 4314,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    a = []\n    for _ in range(H):\n        a.append(list(stdin.readline().rstrip()))\n    final_state = [['.' for j in range(W)] for i in range(H)]\n\n    def compress_grid(i: int, j: int) -> None:\n        if final_state[i][j] == '.':\n            return\n        row_count = 1\n        while i + row_count < H and all(final_state[i + row_count][j] == '#' for _ in range(W)):\n            row_count += 1\n        final_state[i + row_count:i, :] = [['.' for j in range(W)] for _ in range(row_count)]\n        col_count = 1\n        while j + col_count < W and all(final_state[i][j + col_count] == '#' for _ in range(H)):\n            col_count += 1\n        final_state[:, j + col_count:j] = [['.' for i in range(H)] for _ in range(col_count)]\n\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '#':\n                compress_grid(i, j)\n\n    final_grid = []\n    for i in range(H):\n        row = ''.join(final_state[i])\n        final_grid.append(row)\n    return '\\n'.join(final_grid)\n",
        "test": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\\n\"",
        "num_ids": 1740,
        "indeed": false
    },
    {
        "number": 4315,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        radius = int(stdin)\n    except ValueError:\n        return \"Error: Invalid input\"\n\n    circumference = 2 * 3.14159 * radius\n    return f\"{circumference:.20f}\"",
        "test": "assert solution(\"1\") == \"6.28318530717958623200\"",
        "num_ids": 385,
        "indeed": false
    },
    {
        "number": 4316,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if len(S)!= 4:\n        return \"No\"\n\n    count_a = 0\n    count_s = 0\n    for c in S:\n        if c == \"A\":\n            count_a += 1\n        elif c == \"S\":\n            count_s += 1\n\n    if count_a == 2 and count_s == 2:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"ZZAA\") == \"No\"",
        "num_ids": 525,
        "indeed": false
    },
    {
        "number": 4317,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    largest = max(A + B, A - B, A * B)\n    return str(largest)",
        "test": "assert solution(\"-13 3\") == \"-10\"",
        "num_ids": 312,
        "indeed": true
    },
    {
        "number": 4318,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    N, *H = map(int, stdin.split())\n    count = 0\n\n    for i in range(N):\n        if H[i] >= H[0]:\n            count += 1\n\n    return str(count)\n",
        "test": "assert solution(\"4\\n6 5 6 8\") == \"3\"",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 4319,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    stairways = [0] * n\n    steps = []\n    \n    for i, x in enumerate(a):\n        steps.append(x)\n        stairways[i] = 1\n        while len(steps) > 1 and steps[-1] == steps[-2] + 1:\n            steps.pop()\n            stairways[-1] += 1\n    \n    print(len(stairways))\n    for x in steps:\n        print(x)\n    \n    return \"\"",
        "test": "assert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\\n\"",
        "num_ids": 825,
        "indeed": false
    },
    {
        "number": 4320,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    def lcm(a: int, b: int) -> int:\n        return (a * b) // gcd(a, b)\n\n    n = int(stdin.split()[0])\n    x = int(stdin.split()[1])\n    k = 1\n\n    while True:\n        if x + 2 * x + 4 * x + 8 * x + 16 * x + 32 * x + 64 * x + 128 * x + 256 * x + 512 * x + 1024 * x + 2048 * x == n:\n            break\n        k += 1\n\n    return str(k)\n\n\ndef",
        "test": "assert solution(\"1\\n2\\n1\\n7\\n4\\n333333333\\n333333328\") == \"1\\n2\\n1\\n7\\n4\\n333333333\\n333333328\"",
        "num_ids": 1340,
        "indeed": false
    },
    {
        "number": 4321,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    result = n\n    for _ in range(k):\n        if result % 10 == 0:\n            result //= 10\n        else:\n            result -= 1\n    return str(result)\n",
        "test": "assert solution(\"512 4\") == \"50\"",
        "num_ids": 583,
        "indeed": true
    },
    {
        "number": 4322,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    heights = list(map(int, stdin.split()[1:]))\n    k = 1\n    result = []\n\n    while len(result) < n:\n        max_height = max(heights)\n        for i in range(len(heights)):\n            if heights[i] - max_height <= 1:\n                result.append(heights[i])\n                heights.pop(i)\n                k += 1\n                break\n\n    print(k)\n    print(\" \".join(map(str, result)))",
        "test": "assert solution(\"5\\n3 7 5 1 5\\n\") == \"2\\n5 5\\n\"",
        "num_ids": 1363,
        "indeed": false
    },
    {
        "number": 4323,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = map(int, stdin.split()[2:n*2+2])\n    b = a\n    compressed_songs = []\n    i = 0\n    while i < n:\n        if sum(b) <= m:\n            compressed_songs.append(a[i])\n            b[i] = b[i] + b[i+1]\n        else:\n            break\n        i += 2\n    if not compressed_songs:\n        return \"-1\"\n    return str(len(compressed_songs))",
        "test": "assert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-1\"",
        "num_ids": 1148,
        "indeed": false
    },
    {
        "number": 4324,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(s: str) -> bool:\n        freq = {}\n        for c in s:\n            freq[c] = freq.get(c, 0) + 1\n        return len(freq) == b and all(freq[c] == b for c in set(s))\n\n    n, a, b = map(int, stdin.split())\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    for _ in range(t):\n        found = False\n        while not found:\n            substrings = [s[i:i+a] for i in range(n)]\n            for substring in substrings:\n                if is_valid(substring):\n                    found = True\n                    print(substring)\n                    break\n            else:\n                for i in range(len(s) - a + 1):\n                    substring = s[i:i+a]\n                    if is_valid(substring):\n                        s = s[:i] + s[i+a:]\n                        found = True\n                        break\n                else:\n                    s = s[1:]\n                    continue\n\nt = int(input())\nfor _ in range(t):\n    stdin = input()\n    solution(stdin)\n    print()",
        "test": "assert solution(input()) == \"tleelte\\nqwerty\\nvvvvvv\\nabcde\\n\"",
        "num_ids": 1480,
        "indeed": false
    },
    {
        "number": 4325,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, x, t = map(int, stdin.split())\n    \n    # Number of takoyaki pieces we can make in T minutes\n    max_pieces = t // x\n    \n    # Number of takoyaki pieces we can make in (T - (T % x)) minutes\n    min_pieces = max_pieces + 1\n    \n    # Minimum number of minutes needed to make N takoyaki\n    min_time = min_pieces * x\n    \n    return str(min_time)",
        "test": "assert solution('20 12 6') == '12', 'Sample Input 1'",
        "num_ids": 539,
        "indeed": false
    },
    {
        "number": 4326,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 1:\n        return \"1\"\n\n    max_groups = 1\n    groups_count = 0\n    for i in range(2, n + 1):\n        if i % 3 == 0:\n            groups_count += 1\n            if groups_count > max_groups:\n                max_groups = groups_count\n        else:\n            groups_count = 1\n\n    return str(max_groups)\n",
        "test": "assert solution('8\\n') == '2'",
        "num_ids": 557,
        "indeed": false
    },
    {
        "number": 4327,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n\n    # We can make one apple pie by simmering two of the three pieces of apple\n    max_pies = 1\n    while A >= 2:\n        A -= 2\n        P -= 3\n        max_pies += 1\n\n    # We can make two more apple pies by simmering the remaining piece and three more pieces obtained by cutting the whole apple\n    while P >= 3:\n        P -= 3\n        max_pies += 2\n\n    return str(max_pies)",
        "test": "assert solution(\"1 3\") == \"3\"",
        "num_ids": 577,
        "indeed": false
    },
    {
        "number": 4328,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a % b == 0:\n        return str(a + b)\n    else:\n        return str(b - a)",
        "test": "assert solution(\"2 4\") == \"2\"",
        "num_ids": 297,
        "indeed": false
    },
    {
        "number": 4329,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.strip().split()\n    if len(T) == len(S) + 1:\n        return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"chokudai\\nchokudaiz\") == \"Yes\"",
        "num_ids": 334,
        "indeed": false
    },
    {
        "number": 4330,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    \n    # Find the smallest K such that |A - K| = |B - K|\n    for k in range(a, b + 1):\n        if abs(a - k) == abs(b - k):\n            return str(k)\n    \n    return \"IMPOSSIBLE\"",
        "test": "assert solution(\"2 16\") == \"9\"",
        "num_ids": 522,
        "indeed": false
    },
    {
        "number": 4331,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if 100 <= n <= 999:\n        if n % 10 == 7:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"Invalid Input\"",
        "test": "assert solution(\"117\") == \"Yes\"",
        "num_ids": 312,
        "indeed": false
    },
    {
        "number": 4332,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return \"Yes\" if sum(int(d) for d in str(n)) % n == 0 else \"No\"",
        "test": "assert solution('13') == 'No'",
        "num_ids": 293,
        "indeed": false
    },
    {
        "number": 4333,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = -(x1 + y1 + x2 + y2), -(x1 + y1), -(x1 + y1 + x2 + y2), -(x1 + y1)\n    return f\"{x3},{y3},{x4},{y4}\"",
        "test": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"",
        "num_ids": 1237,
        "indeed": false
    },
    {
        "number": 4334,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    S, T = map(str.strip, stdin.split())\n    A, B = map(int, stdin.split())\n    U = input().strip()\n\n    if S == U or T == U:\n        raise ValueError(\"S=U or T=U\")\n\n    if S == T:\n        raise ValueError(\"S!=T\")\n\n    count_S = count_T = 0\n\n    for _ in range(A):\n        if S in T:\n            count_S += 1\n        if T in S:\n            count_T += 1\n\n    if count_S < count_T:\n        print(count_S, count_T)\n    else:\n        print(count_T, count_S)\n\n    return \"\"",
        "test": "assert solution(\"red blue\\n3 4\\nred\\n\") == \"2 4\"",
        "num_ids": 930,
        "indeed": false
    },
    {
        "number": 4335,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(int, stdin.split())\n    T = S * 2\n    \n    if S == T:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"6\\nabcabc\") == \"Yes\"",
        "num_ids": 503,
        "indeed": false
    },
    {
        "number": 4336,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    w, h, x, y = map(int, stdin.strip().split())\n    area = 0\n    for i in range(w + 1):\n        area = max(area, abs(i - x) * abs(i - x))\n    for i in range(h + 1):\n        area = max(area, abs(i - y) * abs(i - y))\n\n    if area > 0:\n        return f\"{area:.9f} {0}\"\n    else:\n        return f\"{area:.9f} {1}\"",
        "test": "assert solution(\"2 3 1 2\") == \"3.000000 0\", \"Sample Input\"",
        "num_ids": 1185,
        "indeed": false
    },
    {
        "number": 4337,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    colors = stdin.split()[1:]\n    colors_count = [colors.count(color) for color in set(colors)]\n\n    if colors_count[0] == colors_count[1] == colors_count[2]:\n        return \"Three\"\n    elif colors_count[0] == colors_count[1] == colors_count[3] == 0:\n        return \"Four\"\n    else:\n        return \"Four\"",
        "test": "assert solution(\"6\\nG W Y P Y W\") == \"Four\"",
        "num_ids": 802,
        "indeed": false
    },
    {
        "number": 4338,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    doors = [int(a) for a in stdin.split()[1:]]\n\n    for i in range(n):\n        if doors[i] == 0:\n            continue\n\n        if doors[i] - x >= 0:\n            doors[i] -= x\n        else:\n            doors[i] = 0\n\n    count = 0\n    for i in range(n):\n        if doors[i] == 0:\n            count += 1\n\n    return str(count)",
        "test": "assert solution(input()) == '2'",
        "num_ids": 1470,
        "indeed": false
    },
    {
        "number": 4339,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:n+1]))\n    b = list(map(int, stdin.split()[n+1:]))\n    \n    good_pairs = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                good_pairs += 1\n                \n    return str(good_pairs)",
        "test": "assert solution(\"5\\n4 8 2 6 2\\n4 5 4 1 3\") == \"7\"",
        "num_ids": 1010,
        "indeed": true
    },
    {
        "number": 4340,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a_new = []\n    for i in range(1, n + 1, 2):\n        a_new.append(a[i - 1])\n        a_new.append(a[i])\n    return \" \".join(map(str, a_new))",
        "test": "assert solution(\"10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\\n\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"",
        "num_ids": 1209,
        "indeed": false
    },
    {
        "number": 4341,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n    cycles = []\n\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        a, b = a - 1, b - 1\n        graph[a].append(b)\n        graph[b].append(a)\n\n    for vertex in range(1, n + 1):\n        if len(graph[vertex]) > 1:\n            cycles.append(vertex)\n            components = [vertex]\n\n            def dfs(vertex: int) -> None:\n                for neighbor in graph[vertex]:\n                    if neighbor not in components:\n                        components.append(neighbor)\n                        dfs(neighbor)\n\n            dfs(vertex)\n            for component in components:\n                if component in cycles:\n                    cycles.remove(component)\n\n    return str(len(cycles))\n",
        "test": "assert solution(",
        "num_ids": 1473,
        "indeed": false
    },
    {
        "number": 4342,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n\n    def dfs(u: int, color: int, parent: int, depth: int, res: list) -> None:\n        if color == 0:\n            return\n\n        for v in graph[u]:\n            if v!= parent:\n                dfs(v, color, u, depth + 1, res)\n\n    def dfs_count(u: int, color: int, parent: int, depth: int, count: int) -> int:\n        if color == 0:\n            return 0\n\n        for v in graph[u]:\n            if v!= parent:\n                count += dfs_count(v, color, u, depth + 1, count)\n\n        if count == 0 and color == 1 and depth > 1:\n            res.append((u, parent))\n\n        return count\n\n    n = int(stdin.readline().strip())\n    colors = list(map(int, stdin.readline().strip().split()))\n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        a, b = map(int, stdin.readline().strip().split())\n        a -= 1\n        b -= 1\n        graph[a].append(b)\n        graph[b].append(a)\n\n    res = []\n    dfs_count(0, colors[0], -1, 0, 0)\n    return str(len(res))",
        "test": "assert solution(\"\"\"5",
        "num_ids": 1712,
        "indeed": false
    },
    {
        "number": 4343,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    k, s, t = map(str, stdin.split())\n    if len(s)!= len(t):\n        raise ValueError(\"Strings must be of equal length\")\n    if len(set(s))!= k or len(set(t))!= k:\n        raise ValueError(\"Strings must consist of exactly k lowercase Latin letters\")\n    if s >= t:\n        raise ValueError(\"s must be lexicographically less than t\")\n    strings = []\n    for i in range(len(s)):\n        if s[i] < t[i]:\n            strings.append(s[:i] + t[i:])\n    strings.sort()\n    if len(strings) % 2 == 0:\n        return (strings[len(strings) // 2 - 1] + strings[len(strings) // 2]) // 2\n    return strings[len(strings) // 2]\n\n\ndef",
        "test": "assert solution(\"\"\"",
        "num_ids": 1335,
        "indeed": false
    },
    {
        "number": 4344,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    \n    if k > n:\n        return \"NO\"\n    \n    distinct_ratings = set()\n    team_members = []\n    for i in range(n):\n        if i not in team_members and a[i] not in distinct_ratings:\n            distinct_ratings.add(a[i])\n            team_members.append(i)\n            if len(team_members) == k:\n                break\n    \n    if len(team_members) < k:\n        return \"NO\"\n    \n    return \"YES\", \" \".join(map(str, team_members))\n\ndef",
        "test": "assert solution('5 4\\n15 13 15 15 12\\n') == 'NO'",
        "num_ids": 1034,
        "indeed": false
    },
    {
        "number": 4345,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:n+1]))\n    \n    increasing = True\n    decreasing = False\n    \n    for i in range(n-1):\n        if increasing:\n            if a[i+1] > a[i]:\n                increasing = False\n        elif decreasing:\n            if a[i+1] < a[i]:\n                decreasing = False\n    \n    if increasing:\n        return \"YES\\n\" + \" \".join(map(str, [0]*n))\n    elif decreasing:\n        return \"YES\\n\" + \" \".join(map(str, [1]*n))\n    else:\n        return \"NO\"",
        "test": "assert solution(\"5\\n1 2 4 0 2\\n\") == \"NO\"",
        "num_ids": 1595,
        "indeed": false
    },
    {
        "number": 4346,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    def is_lantern_visible(v, l, r):\n        for i in range(l, r+1, v):\n            if i in range(v, r+1, v) and (i not in range(l, r+1, v) or train_position in range(l, r+1)):\n                return False\n        return True\n\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        L, v, l, r = map(int, stdin.split()[1:])\n        train_position = r - (r % v)\n        print(sum(1 for _ in range(l, r+1) if is_lantern_visible(v, l, r)))",
        "test": "assert solution(\"\"\"\\",
        "num_ids": 1018,
        "indeed": false
    },
    {
        "number": 4347,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 2:\n        return \"1\"\n    if n == 4:\n        return \"3\"\n    if n % 2 == 0:\n        dance = [(i + 1) % n for i in range(n // 2)]\n        ways = 1\n        for i in range(1, n // 2):\n            for j in range(i):\n                if dance[i]!= dance[j]:\n                    new_dance = sorted(dance[j:i] + dance[:j] + dance[i+1:])\n                    if new_dance!= dance:\n                        ways += 1\n                        break\n        return str(ways)\n    return \"1\"",
        "test": "assert solution(\"2\") == \"1\"",
        "num_ids": 802,
        "indeed": false
    },
    {
        "number": 4348,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    \n    if k > n:\n        return \"\"\n    \n    result = \"\"\n    for i in range(k):\n        for j in range(97, 123):\n            if s.count(chr(j)) >= i:\n                s = s.replace(chr(j), \"\", 1)\n                result += chr(j)\n                break\n        else:\n            return \"\"\n    \n    if len(result) < n:\n        return \"\"\n    \n    return result",
        "test": "assert solution(\"15 9\\ncccaabababaccbc\") == \"cccccc\"",
        "num_ids": 2243,
        "indeed": false
    },
    {
        "number": 4349,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0].split())\n    k = list(map(int, stdin.split()[1].split()))\n    offers = [tuple(map(int, line.split())) for line in stdin.split()[2:]]\n\n    total_burles = sum(k)\n    total_sales = sum([len(set(k) & set(types)) for types in product(range(1, n + 1), repeat=k.index(max(k)) + 1)])\n    for d, t in offers:\n        total_sales += len(set(k) & set(t))\n\n    return str(total_burles + total_sales)",
        "test": "assert solution(input()) == \"20\"",
        "num_ids": 2270,
        "indeed": false
    },
    {
        "number": 4350,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0].split())\n    grid = []\n    for line in stdin.split()[1:]:\n        grid.append(list(line.rstrip()))\n\n    def draw_star(x, y, size):\n        nonlocal grid\n        if x < 0 or y < 0 or x >= n or y >= m:\n            return False\n        if grid[x][y]!= '*':\n            return False\n        grid[x][y] = '.'\n        for dx in [-1, 0, 1]:\n            for dy in [-1, 0, 1]:\n                if dx == 0 and dy == 0:\n                    continue\n                if 0 <= x + dx < n and 0 <= y + dy < m:\n                    if draw_star(x + dx, y + dy, size):\n                        return True\n        return True\n\n    stars_needed = 0\n    for x in range(n):\n        for y in range(m):\n            if grid[x][y] == '*' and draw_star(x, y, 1):\n                stars_needed += 1\n                draw_star(x, y, 1)\n                if stars_needed == n * m:\n                    return str(stars_needed)\n\n    return \"-1\"\n\n\ndef",
        "test": "assert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\\n\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\\n\"",
        "num_ids": 2049,
        "indeed": false
    },
    {
        "number": 4351,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 100 or N > 999:\n        return \"No\"\n\n    def is_palindrome(num: int) -> bool:\n        reversed_num = 0\n        temp = num\n        while temp > 0:\n            remainder = temp % 10\n            reversed_num = reversed_num * 10 + remainder\n            temp //= 10\n        return num == reversed_num\n\n    if is_palindrome(N):\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"123\") == \"No\", \"Failed for input '123'.\"",
        "num_ids": 461,
        "indeed": true
    },
    {
        "number": 4352,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        a, b = map(int, stdin.split())\n    except ValueError:\n        return \"Invalid input format\"\n\n    if 1 <= a <= 13 and 1 <= b <= 13:\n        return \"Alice\" if a > b else \"Bob\"\n    else:\n        return \"Invalid input\"\n",
        "test": "assert solution(\"8 6\") == \"Alice\"",
        "num_ids": 535,
        "indeed": false
    },
    {
        "number": 4353,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    # Replace all commas with spaces\n    s = s.replace(\",\", \" \")\n    return s",
        "test": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"",
        "num_ids": 303,
        "indeed": true
    },
    {
        "number": 4354,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    students = []\n    for i in range(1, n + 1):\n        x, y = map(int, stdin.split())\n        students.append((x, y))\n    checkpoints = []\n    for i in range(1, m + 1):\n        x, y = map(int, stdin.split())\n        checkpoints.append((x, y))\n\n    distances = []\n    for i, student in enumerate(students):\n        nearest_checkpoint_index = min(\n            range(m + 1), key=lambda j: abs(checkpoints[j][0] - student[0]) + abs(checkpoints[j][1] - student[1])\n        )\n        distances.append(abs(checkpoints[nearest_checkpoint_index][0] - student[0]) + abs(checkpoints[nearest_checkpoint_index][1] - student[1]))\n\n    return '\\n'.join(map(str, distances))",
        "test": "assert solution(\"5 3\\n0 0\\n1 0\\n2 1\\n3 2\\n4 3\") == \"1\\n3\\n5\"",
        "num_ids": 1285,
        "indeed": false
    },
    {
        "number": 4355,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    result = a + a ** 2 + a ** 3\n    return str(result)",
        "test": "assert solution(\"2\") == \"14\"",
        "num_ids": 219,
        "indeed": true
    },
    {
        "number": 4356,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    def to_binary(binary: str) -> str:\n        return binary.replace(\"#\", \"1\").replace(\".\", \"0\")\n\n    def shift_image(image: str, shift: int) -> str:\n        rows = len(image)\n        cols = len(image[0])\n        shifted = [[0] * cols for _ in range(rows)]\n        for i in range(rows):\n            for j in range(cols):\n                shifted_j = (j + shift) % cols\n                shifted[i][shifted_j] = image[i][j]\n        return shifted\n\n    n, m = map(int, stdin.split())\n    a = [to_binary(line.strip()) for line in stdin.strip().split(\":\")[1].split(\"\\n\")]\n    b = [to_binary(line.strip()) for line in stdin.strip().split(\":\")[2].split(\"\\n\")]\n\n    for _ in range(n):\n        a.pop(0)\n    for _ in range(m):\n        b.pop(0)\n\n    a_shifted = shift_image(a, m)\n    b_shifted = shift_image(b, n)\n\n    if a_shifted == b_shifted:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nsample_input = \"\"\"\n3 2\n",
        "test": "assert solution(\"\"\"",
        "num_ids": 1158,
        "indeed": false
    },
    {
        "number": 4357,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    A, B, C = map(int, stdin.split())\n\n    # Create formula\n    formula = f\"{C}{B}{A}\"\n\n    # Calculate maximum allowance\n    max_allowance = int(formula)\n    if C < 5:\n        max_allowance += 9\n    if B < 5:\n        max_allowance += 9\n    if A < 5:\n        max_allowance += 9\n\n    return str(max_allowance)",
        "test": "assert solution(\"1 5 2\") == \"53\"",
        "num_ids": 847,
        "indeed": false
    },
    {
        "number": 4358,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, *prices = map(int, stdin.split())\n\n    # Calculate the discount\n    discount = sum(prices) / 2\n\n    # Calculate the total amount\n    total_amount = sum(prices) - discount\n\n    return str(total_amount)",
        "test": "assert solution(stdin) == \"15950\"",
        "num_ids": 627,
        "indeed": false
    },
    {
        "number": 4359,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    dishes = [tuple(map(int, stdin.split())) for _ in range(5)]\n    dishes.sort(key=lambda x: x[1])\n    time = 0\n    order_time = 0\n    for dish in dishes:\n        if order_time < dish[0] and dish[0] - order_time >= 10:\n            order_time = dish[0]\n        time = max(time, order_time)\n    return str(time)",
        "test": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"",
        "num_ids": 876,
        "indeed": false
    },
    {
        "number": 4360,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n    \n    sum_inverses = 0\n    for a in A:\n        sum_inverses += 1 / a\n    \n    result = 1 / sum_inverses\n    return str(result)",
        "test": "assert solution(\"2\\n10 30\") == \"7.5\"",
        "num_ids": 637,
        "indeed": false
    },
    {
        "number": 4361,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    trees = []\n    for _ in range(n):\n        trees.append(int(stdin.split()[0]))\n    trees.sort()\n    h_max = max(trees)\n    h_min = min(trees)\n    result = h_max - h_min\n    return str(result)",
        "test": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\\n\") == \"2\"",
        "num_ids": 750,
        "indeed": false
    },
    {
        "number": 4362,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    alpha = stdin.upper()\n    if alpha.isupper():\n        return \"A\"\n    else:\n        return \"a\"",
        "test": "assert solution(\"A\") == \"A\"",
        "num_ids": 325,
        "indeed": false
    },
    {
        "number": 4363,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(int, stdin.split())\n\n    def triple_count():\n        for x in range(K + 1):\n            for y in range(x, K + 1):\n                for z in range(y, K + 1):\n                    if x + y + z == S:\n                        yield (x, y, z)\n\n    count = 0\n    for triple in triple_count():\n        count += 1\n    return str(count)\n\ninput_data = \"\"\"2 2\"\"\"\nprint(solution(input_data)) # Output: 6",
        "test": "assert solution(\"4 3\") == \"18\"",
        "num_ids": 827,
        "indeed": false
    },
    {
        "number": 4364,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s)!= 4:\n        return \"NA\"\n\n    s = int(s)\n    if s < 1000 or s > 9999:\n        return \"NA\"\n\n    year = s // 1000\n    month = (s // 100) % 10\n    day = s % 10\n\n    if day == 0 or month == 0 or year == 0:\n        return \"NA\"\n\n    if day > 31 or month > 12:\n        return \"NA\"\n\n    if year == 0 and month == 0:\n        return \"NA\"\n\n    if month < 10:\n        month = \"0\" + str(month)\n\n    if day < 10:\n        day = \"0\" + str(day)\n\n    if year == 0:\n        return \"MMYY\"\n\n    return \"YYMM\"",
        "test": "assert solution(\"1905\") == \"YYMM\"",
        "num_ids": 790,
        "indeed": false
    },
    {
        "number": 4365,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    count = 0\n    for i in range(1, K+1, 2):\n        for j in range(3, K+1, 2):\n            count += 1\n    return str(count)",
        "test": "assert solution(\"3\") == \"2\"",
        "num_ids": 491,
        "indeed": false
    },
    {
        "number": 4366,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a + b > 23:\n        return \"0\"\n    else:\n        return str(a + b)",
        "test": "assert solution(\"9 12\") == \"21\"",
        "num_ids": 401,
        "indeed": false
    },
    {
        "number": 4367,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n\n    if R == 0:\n        return \"0\"\n\n    if N == 1:\n        return str(R)\n\n    K = 0\n    while N >= 10:\n        N -= 10\n        K += 1\n\n    if K == 0:\n        return str(R)\n    else:\n        return str(R - 100 * (10 - K))",
        "test": "assert solution(\"2 2919\") == \"3719\"",
        "num_ids": 554,
        "indeed": false
    },
    {
        "number": 4368,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    count = 0\n    while N > 0:\n        N, remainder = divmod(N, K)\n        count += 1\n    return str(count)",
        "test": "assert solution(\"11 2\") == \"4\"",
        "num_ids": 358,
        "indeed": true
    },
    {
        "number": 4369,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    # Calculate number of sheets needed\n    sheets = n // 2\n    \n    # Add 1 if number of sheets is odd\n    if n % 2 == 1:\n        sheets += 1\n    \n    return str(sheets)",
        "test": "assert solution(\"5\") == \"3\", \"Test case 1 failed.\"",
        "num_ids": 349,
        "indeed": true
    },
    {
        "number": 4370,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a + b <= 16:\n        return \"Yay!\"\n    else:\n        return \":\"",
        "test": "assert solution(\"5 4\") == \"Yay!\"",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 4371,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    min_diff = float('inf')\n\n    for i in range(len(S) - 2):\n        X = int(S[i:i+3])\n        diff = abs(X - 753)\n        if diff < min_diff:\n            min_diff = diff\n\n    return str(min_diff)",
        "test": "assert solution(\"1234567876\") == \"34\", \"Wrong output for sample input\"",
        "num_ids": 537,
        "indeed": true
    },
    {
        "number": 4372,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.strip().split())\n    a.sort()\n    i, j = 0, n - 1\n    x = sum(a[i:j+1])\n    z = 0\n    while i < j:\n        x -= a[i]\n        i += 1\n        z += 1\n    return str(max(x, 0)) + \" \" + str(z)\n\ninput_data = \"\"\"\n3\n3 12 6\n2\n2 9\n7\n2 1000000000 4 6 8 4 2\n6\n13 52 0 13 26 52\n12 13\n\"\"\"\n\nprint(solution(input_data))",
        "test": "assert solution('2\\n2 9\\n') == '1 7\\n'",
        "num_ids": 860,
        "indeed": false
    },
    {
        "number": 4373,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort()\n    k = a.count(1)\n    if k == 0:\n        return '1'\n    elif k == 1:\n        return '2'\n    else:\n        count = 1\n        prev = a[0]\n        for i in range(1, n):\n            if a[i] - prev >= 2:\n                count += 1\n                prev = a[i]\n            else:\n                break\n        return str(count)",
        "test": "assert solution(\"3\\n1 1 1\") == \"1\"",
        "num_ids": 824,
        "indeed": false
    },
    {
        "number": 4374,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        edges.append((u - 1, v - 1))\n\n    # Finding the connected components\n    connected_components = set()\n    visited = set()\n    for i in range(n):\n        visited.add(i)\n        if i not in visited:\n            connected_components.add(i)\n            stack = [i]\n            while stack:\n                current = stack.pop()\n                for neighbor in edges[current]:\n                    if neighbor not in visited:\n                        visited.add(neighbor)\n                        stack.append(neighbor)\n    tree_vertices = sorted(connected_components)\n\n    # Checking if the diameter of the tree is minimal possible\n    tree_diameter = 0\n    for vertex in tree_vertices:\n        tree_diameter = max(tree_diameter, len(edges[vertex]))\n\n    # Adding the edges\n    added_edges = set()\n    for vertex in tree_vertices:\n        if len(edges[vertex]) > tree_diameter:\n            added_vertex = tree_vertices[tree_vertices.index(vertex) + 1]\n            added_edges.add((vertex, added_vertex))\n            added_edges.add((added_vertex, vertex))\n\n    # Sorting the added edges\n    added_edges = sorted(added_edges)\n\n    # Printing the output\n    print(tree_diameter)\n    for u, v in added_edges:\n        print(u + 1, v + 1)",
        "test": "assert solution(\"2 0\\n\") == \"1\\n1 2\\n\"",
        "num_ids": 1426,
        "indeed": false
    },
    {
        "number": 4375,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))[1:]\n    adj = [[] for _ in range(n + 1)]\n    for i in range(len(a) - 1):\n        u, v = map(int, stdin.split())\n        adj[u].append(v)\n        adj[v].append(u)\n    max_weight = 0\n    visited = set()\n    for u in range(1, n + 1):\n        if u not in visited:\n            visited.add(u)\n            max_weight = max(max_weight, dfs(u, visited, k, adj))\n    return str(max_weight)\n\n\ndef",
        "test": "assert solution(\"7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4\") == \"4\"",
        "num_ids": 1733,
        "indeed": false
    },
    {
        "number": 4376,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    def find_dormitory(room: int) -> int:\n        for i in range(n):\n            if a[i] < room <= a[i] + a[i]:\n                return i\n        return -1\n\n    result = []\n    for room in b:\n        dormitory = find_dormitory(room)\n        if dormitory!= -1:\n            result.append(str(dormitory) + \" \" + str(room))\n\n    return \"\\n\".join(result)",
        "test": "assert solution(input()) == \"1 5\\n2 1\\n2 9999999994\"",
        "num_ids": 1045,
        "indeed": false
    },
    {
        "number": 4377,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    x = [int(x) for x in stdin.split()]\n    x.sort()\n    return \" \".join([str(x[0]), str(x[1]), str(x[2])])",
        "test": "assert solution(\"\"\"",
        "num_ids": 1447,
        "indeed": false
    },
    {
        "number": 4378,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = list(stdin.split()[1])\n\n    min_recolors = float('inf')\n    min_t = None\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if s[i]!= s[j] and abs(i - j) == 1:\n                min_recolors = min(min_recolors, abs(s.index(s[i]) - s.index(s[j])))\n                min_t = s[:i] + s[i] + s[j] + s[i + 1:]\n\n    return str(min_recolors) + '\\n' + ''.join(min_t)",
        "test": "assert solution('8\\nBBBGBRRR\\n') == '2\\nBRBGBRGR\\n'",
        "num_ids": 1807,
        "indeed": false
    },
    {
        "number": 4379,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    x = a[0]\n    max_length = 0\n    subsequence = []\n\n    for i in range(n):\n        if a[i] == x + i + 1:\n            if i + 1 > max_length:\n                max_length = i + 1\n                subsequence = [i]\n            elif i + 1 == max_length:\n                subsequence.append(i)\n\n    return str(max_length) + '\\n' +''.join(map(str, subsequence))",
        "test": "assert solution(\"6\\n1 3 5 2 4 6\") == \"2\\n1 4\"",
        "num_ids": 1277,
        "indeed": false
    },
    {
        "number": 4380,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    for C in range(1, 4):\n        if A * B * C % 2 == 1:\n            return \"Yes\"\n\n    return \"No\"",
        "test": "assert solution(\"3 1\") == \"Yes\"",
        "num_ids": 393,
        "indeed": true
    },
    {
        "number": 4381,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if y % 2!= 0:\n        return \"Invalid input\"\n    if x == y:\n        return \"0\"\n    elif x < y:\n        return str(x)\n    else:\n        train_cost = x * 0.9\n        bus_cost = y * 0.5\n        total_cost = train_cost + bus_cost\n        return str(total_cost)",
        "test": "assert solution(\"81 58\") == \"110\"",
        "num_ids": 512,
        "indeed": false
    },
    {
        "number": 4382,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    password_set = set()\n    for i in range(1, 10):\n        for j in range(1, 10):\n            for k in range(1, 10):\n                password = f\"{i}{j}{k}\"\n                if len(password) == N:\n                    password_set.add(password)\n    return str(len(password_set))",
        "test": "assert solution(\"2\") == \"8\"",
        "num_ids": 514,
        "indeed": false
    },
    {
        "number": 4383,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    \n    if X == 7 or X == 5 or X == 3:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert solution('5') == 'YES'",
        "num_ids": 290,
        "indeed": true
    },
    {
        "number": 4384,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    if N <= 999:\n        label = \"ABC\" + str(N)\n    else:\n        label = \"ABD\" + str(N - 1000)\n\n    return label[0:3]",
        "test": "assert solution(\"999\") == \"ABC\"",
        "num_ids": 1402,
        "indeed": true
    },
    {
        "number": 4385,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n\n    if k == 0:\n        return \":(\\n\"\n\n    if a == 1 or b == 1 or c == 1 or d == 1 or e == 1 or k == 1:\n        return \"Yay!\\n\"\n\n    # Calculate the distances between the antennas\n    distances = [abs(a - b), abs(a - c), abs(a - d), abs(a - e), abs(b - c), abs(b - d), abs(b - e), abs(c - d), abs(c - e), abs(d - e)]\n\n    # Check if the distances are less than or equal to k\n    if all(d <= k for d in distances):\n        return \"Yay!\\n\"\n\n    return \":(\\n\"\n",
        "test": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\\n\"",
        "num_ids": 1864,
        "indeed": false
    },
    {
        "number": 4386,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    a, s = map(int, stdin.split())\n\n    if 3200 <= a < 5000:\n        print(s)\n    else:\n        print(\"red\")\n\n    return \"pink\"\n\nstdin = input()\nsolution(stdin)",
        "test": "assert solution(\"3200\\npink\") == \"pink\"",
        "num_ids": 351,
        "indeed": false
    },
    {
        "number": 4387,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    if R < 1200:\n        return \"ABC\"\n    elif R < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\"",
        "test": "assert solution(\"1200\") == \"ARC\"",
        "num_ids": 335,
        "indeed": true
    },
    {
        "number": 4388,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n = str(n)\n    result = \"\"\n    for digit in n:\n        if digit == \"1\":\n            result += \"9\"\n        elif digit == \"9\":\n            result += \"1\"\n        else:\n            result += digit\n    return result",
        "test": "assert solution(\"119\") == \"991\"",
        "num_ids": 470,
        "indeed": true
    },
    {
        "number": 4389,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    for i in range(t):\n        b = stdin.split('\\n')[i+1]\n        a = ''.join(sorted(b))\n        print(a)\n\ndef",
        "test": "assert solution(\"ac\") == \"abac\"",
        "num_ids": 416,
        "indeed": false
    },
    {
        "number": 4390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split('\\n')[0])\n    for _ in range(test_cases):\n        a, b = map(int, stdin.split('\\n')[1].split())\n        moves = 0\n        while a % b!= 0:\n            a += 1\n            moves += 1\n        print(moves)",
        "test": "assert solution(\"10 4\\n13 9\\n100 13\\n123 456\\n92 46\\n\") == \"2\\n5\\n4\\n333\\n0\"",
        "num_ids": 1719,
        "indeed": false
    },
    {
        "number": 4391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    a = a[::-1]\n    \n    a_sum = sum(a)\n    a_count = 0\n    max_sum = 0\n    max_segment = 0\n    \n    for i in range(n):\n        if i >= k:\n            a_sum += a[i - k]\n            a_count += 1\n            if a_count > max_segment:\n                max_segment = a_count\n                max_sum = a_sum\n        \n        if i + k < n:\n            a_sum -= a[i]\n    \n    heat_intensity = max_sum / max_segment\n    \n    return str(heat_intensity)\n\n\ndef",
        "test": "assert solution(\"4 3\\n3 4 1 2\") == \"2.666666666666667\"",
        "num_ids": 837,
        "indeed": false
    },
    {
        "number": 4392,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n, m = map(int, stdin.split()[1:])\n        a = list(map(int, stdin.split()[2:2+n]))\n        p = list(map(int, stdin.split()[2+n:2+n+m]))\n        if any(abs(a[p[i]] - a[p[i] - 1]) > 1 for i in range(m)):\n            print(\"NO\")\n        else:\n            print(\"YES\")",
        "test": "assert solution(input()) == \"YES\"",
        "num_ids": 1026,
        "indeed": false
    },
    {
        "number": 4393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = stdin.split()[1]\n    s = ''\n    for i in range(n):\n        s += t[i] * (i + 1)\n    return s",
        "test": "assert solution(\"ooopppssss\") == \"oops\"",
        "num_ids": 478,
        "indeed": false
    },
    {
        "number": 4394,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = {i + 1: [] for i in range(n)}\n    for _ in range(m):\n        u, v, w = map(int, stdin.split())\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n\n    edges = []\n    for i in range(1, n + 1):\n        for u, v, w in graph[i]:\n            edges.append((u, v, w))\n\n    edges.sort(key=lambda x: x[2])\n\n    dp = [0] * (n + 1)\n    dp[1] = edges[0][2]\n\n    for i in range(2, n + 1):\n        dp[i] = edges[0][2]\n        for u, v, w in edges:\n            if dp[u] + w < dp[i]:\n                dp[i] = dp[u] + w\n\n    k = dp[1]\n    cost = dp[1] * (n - 1)\n\n    for u, v, w in edges:\n        if dp[u] + w > k:\n            k -= dp[u]\n            cost -= dp[u] * (n - 1)\n        if dp[v] + w > k:\n            k -= dp[v]\n            cost -= dp[v] * (n - 1)\n\n    return str(cost)\n",
        "test": "assert solution('''",
        "num_ids": 2272,
        "indeed": false
    },
    {
        "number": 4395,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1].strip()\n\n    garland = {}\n    for i in range(n):\n        garland[i] = s[i]\n\n    def is_nice(garland: dict[int, str]) -> bool:\n        for i in range(n):\n            for j in range(i + 1, n):\n                if garland[i] == garland[j]:\n                    if abs(i - j) % 3!= 0:\n                        return False\n        return True\n\n    def recolor(garland: dict[int, str]) -> None:\n        min_recolor = float('inf')\n        min_t = []\n\n        for color in ['R', 'G', 'B']:\n            for i in range(n):\n                if garland[i] == color:\n                    for j in range(i + 1, n):\n                        if garland[j] == color:\n                            if abs(i - j) % 3 == 0:\n                                t = garland.copy()\n                                t[i], t[j] = t[j], t[i]\n                                if is_nice(t):\n                                    if len(t) < len(min_t):\n                                        min_t = t\n                                        min_recolor = min(min_recolor, len(t))\n\n    recolor(garland)\n\n    return str(min_recolor) + '\\n' + ''.join(min_t)",
        "test": "assert solution(\"7\\nRGBGRBB\") == \"3\\nRGBRGBR\"",
        "num_ids": 1586,
        "indeed": false
    },
    {
        "number": 4396,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    gifts = []\n    for _ in range(n):\n        x, u = input().split()\n        x = float(x)\n        if u == \"JPY\":\n            if 1 <= x <= 10**8:\n                gifts.append(x)\n        else:\n            if 0.00000001 <= x <= 100.00000000:\n                gifts.append(x)\n    total = sum(gifts)\n    jpy_per_btc = 380000.0\n    btc_per_jpy = 1.0 / jpy_per_btc\n    yen_per_btc = btc_per_jpy * jpy_per_btc\n    yen_total = yen_per_btc * total\n    return f\"{yen_total:.8f}\"",
        "test": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\\n\") == \"48000.0\"",
        "num_ids": 1245,
        "indeed": false
    },
    {
        "number": 4397,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N, i = map(int, stdin.split())\n    if i == 1:\n        j = N\n    elif i == N:\n        j = 1\n    else:\n        j = (i - 1) + (N - i)\n    return str(j)",
        "test": "assert solution(\"4 2\") == \"3\"",
        "num_ids": 298,
        "indeed": false
    },
    {
        "number": 4398,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = map(str, stdin.split())\n    result = \"\"\n\n    for i in range(len(s)):\n        result += s[i] + t[i]\n\n    return result",
        "test": "assert solution(\"2\\nip cc\") == \"icpc\"",
        "num_ids": 442,
        "indeed": true
    },
    {
        "number": 4399,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s == \"ABA\":\n        return \"Yes\"\n    return \"No\"",
        "test": "assert solution(\"BBB\") == \"No\"",
        "num_ids": 851,
        "indeed": false
    },
    {
        "number": 4400,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    S = stdin.strip()\n\n    # Initialize variables\n    max_consecutive_rainy_days = 0\n    current_consecutive_rainy_days = 0\n    current_day = 0\n\n    # Loop through each day\n    for i in range(len(S)):\n        # If the current character is S, increase the number of consecutive sunny days\n        if S[i] == 'S':\n            current_consecutive_rainy_days += 1\n        # If the current character is R, reset the number of consecutive rainy days to 0\n        elif S[i] == 'R':\n            current_consecutive_rainy_days = 0\n        # If the current character is not S or R, reset the number of consecutive sunny days to 0\n        else:\n            current_consecutive_rainy_days = 0\n\n        # Update the maximum number of consecutive rainy days if needed\n        if current_consecutive_rainy_days > max_consecutive_rainy_days:\n            max_consecutive_rainy_days = current_consecutive_rainy_days\n\n        # Move to the next day\n        current_day += 1\n\n    # Print the maximum number of consecutive rainy days\n    return str(max_consecutive_rainy_days)",
        "test": "assert solution(\"SRR\") == \"1\"",
        "num_ids": 748,
        "indeed": false
    },
    {
        "number": 4401,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n\n    box_a = x\n    box_b = y\n    box_c = z\n\n    box_a, box_b = box_b, box_a\n    box_a, box_c = box_c, box_a\n\n    result = f\"{box_a} {box_b} {box_c}\"\n    return result",
        "test": "assert solution(\"1 2 3\") == \"3 1 2\"",
        "num_ids": 555,
        "indeed": true
    },
    {
        "number": 4402,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    if A >= 13:\n        cost = B\n    elif A >= 6 and A <= 12:\n        cost = B / 2\n    elif A >= 5:\n        cost = 0\n    else:\n        cost = 1\n\n    return str(cost)",
        "test": "assert solution(\"30 100\") == \"100\"",
        "num_ids": 624,
        "indeed": false
    },
    {
        "number": 4403,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    n = len(S)\n    count = 0\n    i = 0\n    while i < n:\n        if S[i] == '+':\n            count += 1\n        elif S[i] == '-':\n            count -= 1\n        i += 1\n    return str(count)",
        "test": "assert solution(\"+-++\") == \"2\"",
        "num_ids": 462,
        "indeed": true
    },
    {
        "number": 4404,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    year, month, day = s.split('/')\n    year = int(year)\n    month = int(month)\n    day = int(day)\n    if month == 4 and day <= 30 and year == 2019:\n        return \"Heisei\"\n    else:\n        return \"TBD\"",
        "test": "assert solution('2019/04/30') == 'Heisei'",
        "num_ids": 532,
        "indeed": false
    },
    {
        "number": 4405,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    a = list(set(a))\n    a.sort()\n    max_problems = 0\n    curr_problems = 0\n    for i in range(1, len(a) + 1):\n        max_problems += i * i\n        curr_problems += i\n        if i == len(a) or a[i]!= a[i - 1]:\n            max_problems = max(max_problems, curr_problems)\n            curr_problems = 0\n    return str(max_problems)\n",
        "test": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == \"14\"",
        "num_ids": 1258,
        "indeed": false
    },
    {
        "number": 4406,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    ids = list(map(int, stdin.split()[1:]))\n    \n    conversations = []\n    for i in range(n):\n        if len(conversations) < k:\n            for j in range(k - len(conversations)):\n                conversations.append(0)\n            conversations[-1] = ids[i]\n        else:\n            removed_id = conversations.pop(0)\n            if removed_id == ids[i]:\n                for j in range(k):\n                    if conversations[j] == ids[i]:\n                        conversations[j] = 0\n    \n    return str(len(conversations)) +'' +''.join(str(c) for c in conversations)",
        "test": "assert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"",
        "num_ids": 1339,
        "indeed": false
    },
    {
        "number": 4407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    coins = list(map(int, stdin.split()))\n    queries = list(map(int, stdin.split()))\n\n    dp = [0] * (2 * 10 ** 9 + 1)\n    dp[0] = 1\n\n    for coin in coins:\n        dp[coin] = (dp[coin] + dp[coin - 1]) % (2 * 10 ** 9 + 7)\n\n    for b in queries:\n        if b > 2 * 10 ** 9:\n            print(-1)\n        else:\n            print(dp[2 * 10 ** 9 - b] - dp[b])\n\ninput_data = '''5 4\n2 4 8 2 4\n8\n5\n14\n10'''\n\nprint(solution(input_data))",
        "test": "assert solution('5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10') == '1\\n-1\\n3\\n2'",
        "num_ids": 1400,
        "indeed": false
    },
    {
        "number": 4408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    def count_cards_with_favorites(cards, favorite):\n        count = 0\n        for card in cards:\n            if card == favorite:\n                count += 1\n        return count\n\n    def get_max_total_joy_levels(n, k, cards, favorite, joy_levels):\n        def get_total_joy_levels(cards, joy_levels):\n            total = 0\n            for i, card in enumerate(cards):\n                if card == favorite:\n                    total += joy_levels[i]\n            return total\n\n        def max_total_joy_levels(cards, favorite, joy_levels):\n            max_total = 0\n            for i in range(1, n + 1):\n                total_joy_levels = get_total_joy_levels(cards[:i], joy_levels[:i])\n                if total_joy_levels > max_total:\n                    max_total = total_joy_levels\n            return max_total\n\n        return max_total_joy_levels(cards, favorite, joy_levels)\n\n    n, k = map(int, stdin.split())\n    cards = list(map(int, stdin.split()))\n    favorite_numbers = list(map(int, stdin.split()))\n    joy_levels = list(map(int, stdin.split()))\n\n    max_total_joy_levels = get_max_total_joy_levels(n, k, cards, favorite_numbers, joy_levels)\n\n    return str(max_total_joy_levels)\n",
        "test": "assert solution(\"\"\"4 3",
        "num_ids": 1533,
        "indeed": false
    },
    {
        "number": 4409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    count = 0\n    operations = []\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(a[i] - a[j]) == 1:\n                count += 1\n                operations.append((1, i, j))\n                a[i] += abs(a[i] - a[j])\n                a[j] -= abs(a[i] - a[j])\n\n    operations = sorted(operations, key=lambda x: x[0])\n    result = \"\"\n\n    for op in operations:\n        if op[0] == 1:\n            result += f\"{op[0]} {op[1]} {op[2]} \"\n\n    return str(count) + \" \" + result.strip()",
        "test": "assert solution(\"3\\n2 8 10\\n\") == \"2\\n2 2 1\\n2 3 2\\n\"",
        "num_ids": 1396,
        "indeed": false
    },
    {
        "number": 4410,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n, k = map(int, stdin.split()[1:3])\n        s = stdin.split()[3]\n        def can_sit(i):\n            return i-k >= 0 and i+k < n and s[i-k] == '0' and s[i+k] == '0'\n        free_tables = []\n        for i in range(n):\n            if s[i] == '0':\n                free_tables.append(i)\n            if can_sit(i):\n                return '1'\n        return str(len(free_tables))",
        "test": "assert solution(\"1 1\\n10\\n3 1\\n10101\\n2 2\\n110\\n1 1\\n1\") == \"0\\n1\\n0\"",
        "num_ids": 1321,
        "indeed": false
    },
    {
        "number": 4411,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = []\n    for i in range(n):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n\n    def is_bad(p: int) -> bool:\n        for l, r in segments:\n            if l <= p <= r:\n                return True\n        return False\n\n    def find_min_bad(start: int, end: int) -> int:\n        if start > end:\n            return start\n\n        mid = (start + end) // 2\n        if is_bad(mid):\n            return find_min_bad(start, mid - 1)\n        else:\n            return find_min_bad(mid + 1, end)\n\n    min_bad = find_min_bad(1, n)\n    result = []\n    for i in range(min_bad, n + 1):\n        if is_bad(i):\n            result.append(i)\n\n    print(len(result))\n    print(\" \".join(str(p) for p in result))\n\n    return \"\"\n",
        "test": "assert solution(\"\"\"",
        "num_ids": 1523,
        "indeed": false
    },
    {
        "number": 4412,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.split()[0])\n    for _ in range(queries):\n        n = int(stdin.split()[1])\n        a = [int(x) for x in stdin.split()[2:]]\n        a.sort(reverse=True)\n\n        def gcd(a, b):\n            return a if b == 0 else gcd(b, a % b)\n\n        def lcm(a, b):\n            return (a * b) // gcd(a, b)\n\n        def is_divisible(a, b):\n            return lcm(a, b) == a\n\n        if sum(a) % 2!= 0:\n            print(0)\n            continue\n\n        max_sum = 0\n        max_problems = [0, 0, 0]\n        for i in range(3):\n            for j in range(i + 1, 3):\n                if is_divisible(a[i], a[j]) and is_divisible(a[i], a[j]):\n                    continue\n                if not is_divisible(a[i], a[j]):\n                    max_problems[i] += a[j] - a[i]\n                if not is_divisible(a[j], a[i]):\n                    max_problems[j] += a[i] - a[j]\n                max_sum += max_problems[i] + max_problems[j]\n                if max_sum % 2 == 0:\n                    break\n            if max_sum % 2 == 0:\n                break\n\n        print(max_sum)\n\ndef",
        "test": "assert solution(open(\"test_input.txt\").read().strip()) == open(\"test_output.txt\").read().strip()",
        "num_ids": 1256,
        "indeed": false
    },
    {
        "number": 4413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a: int, b: int) -> int:\n        return a * b // gcd(a, b)\n\n    n, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    teams = set()\n    for i in range(n):\n        a[i] = abs(a[i])\n\n    for query in range(q):\n        l, r = map(int, stdin.split())\n        if r <= n:\n            for i in range(l, r):\n                a[i] = abs(a[i])\n\n        a.sort()\n        lcm_a = lcm(a[-1] - a[0], a[-2] - a[-3])\n\n        left = lcm_a\n        right = lcm_a\n        min_teams = 1\n\n        while left <= right:\n            mid = (left + right) // 2\n\n            count = 0\n            for i in range(n):\n                if gcd(mid, a[i]) <= 1:\n                    count += 1\n\n            if count <= n:\n                right = mid - 1\n            else:\n                left = mid + 1\n\n            if right < left:\n                min_teams = left\n\n        print(min_teams)\n\n\ndef",
        "test": "assert solution(\"4\\n2\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"2\\n1\\n2\\n1\"",
        "num_ids": 1258,
        "indeed": false
    },
    {
        "number": 4414,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, S = map(int, stdin.split())\n    a, b = map(int, input().split())\n    x, y = 0, 0\n    while n >= 1:\n        x += n // a\n        n %= a\n        y += 1\n    while y >= 1:\n        x += y // b\n        y %= b\n    if x >= S:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nimport sys\n\ntest_cases = int(input())\nfor _ in range(test_cases):\n    print(solution(input()))",
        "test": "assert solution(\"1 2 3 6\") == \"NO\\n\"",
        "num_ids": 1987,
        "indeed": false
    },
    {
        "number": 4415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(x) for x in stdin.split()[1:]]\n\n    increasing = set(a)\n    decreasing = set(a)\n\n    if len(increasing) < len(a):\n        increasing.add(max(a) + 1)\n    if len(decreasing) < len(a):\n        decreasing.add(min(a) - 1)\n\n    increasing = sorted(list(increasing))\n    decreasing = sorted(list(decreasing), reverse=True)\n\n    if increasing == decreasing:\n        return \"NO\"\n\n    return \"YES\\n1\\n{}\\n{}\\n{}\\n{}\".format(len(increasing), increasing, len(decreasing), decreasing)\n\n\ndef",
        "test": "assert solution(\"5\\n4 3 1 5 3\\n\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\\n\"",
        "num_ids": 1636,
        "indeed": false
    },
    {
        "number": 4416,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    books = list(map(lambda x: list(map(int, x.split())), stdin.split('\\n')[1:]))\n\n    def check(books, alice, bob, chosen):\n        if alice >= k or bob >= k:\n            return float('inf')\n\n        for i, (t, a, b) in enumerate(books):\n            if a == 1 and chosen.count(i) < k:\n                chosen.append(i)\n                time = t + check(books, alice + 1, bob, chosen)\n                chosen.pop()\n                return time\n            elif b == 1 and chosen.count(i) < k:\n                chosen.append(i)\n                time = t + check(books, alice, bob + 1, chosen)\n                chosen.pop()\n                return time\n\n        return 0\n\n    alice_time = check(books, 0, 0, [])\n    bob_time = check(books, 0, 0, [])\n\n    if alice_time == float('inf') or bob_time == float('inf'):\n        return -1\n    return alice_time + bob_time",
        "test": "assert solution(\"\"\"",
        "num_ids": 1624,
        "indeed": false
    },
    {
        "number": 4417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    queries = [list(map(int, line.split())) for line in stdin.split('\\n')]\n    \n    def find_max(prices: List[int], k: int) -> int:\n        prices.sort()\n        n = len(prices)\n        left, right = 0, prices[-1]\n        while left < n and right - left > k:\n            mid = (left + right) // 2\n            count = 0\n            for i in range(1, n):\n                if prices[i] - mid > k:\n                    count += n - i\n                    break\n            if count > n // 2:\n                left = mid + 1\n            else:\n                right = mid\n        return left if right - left <= k else -1\n    \n    for query in queries:\n        n, k = query[0], query[1]\n        a = [query[i] for i in range(2, 2 + n)]\n        b = find_max(a, k)\n        if b == -1:\n            print(-1)\n        else:\n            print(b)",
        "test": "assert solution(\"\"\"",
        "num_ids": 1932,
        "indeed": false
    },
    {
        "number": 4418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n\n    def check_good(a: list) -> bool:\n        for i in range(0, len(a), 6):\n            if a[i]!= 4 or a[i+1]!= 8 or a[i+2]!= 15 or a[i+3]!= 16 or a[i+4]!= 23 or a[i+5]!= 42:\n                return False\n        return True\n\n    count = 0\n    while len(a) > 0:\n        if check_good(a):\n            break\n        count += 1\n        a = a[1:]\n\n    return str(count)",
        "test": "assert solution(",
        "num_ids": 1060,
        "indeed": false
    },
    {
        "number": 4419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        a, b = map(int, stdin.split()[1:])\n        moves = 0\n        while a!= b:\n            moves += 1\n            k = random.randint(1, 10)\n            if k % 2 == 1:\n                a += k\n            else:\n                a -= k\n        print(moves)",
        "test": "assert solution(\"2 5\\n10 7\\n2 9\\n3 6\\n10 20\") == \"1\\n1\\n2\\n1\\n2\"",
        "num_ids": 812,
        "indeed": false
    },
    {
        "number": 4420,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        x, y, n = map(int, stdin.split()[1:])\n        max_k = -1\n        for k in range(n+1):\n            if k % x == y:\n                max_k = max(max_k, k)\n        print(max_k)",
        "test": "assert solution('''",
        "num_ids": 1337,
        "indeed": false
    },
    {
        "number": 4421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    candy_boxes = list(map(int, stdin.split()[1:]))\n\n    def is_valid(i, j):\n        return candy_boxes[i] + candy_boxes[j] % k == 0\n\n    boxes_count = 0\n    current_box = 0\n    gifts = []\n\n    while boxes_count < n:\n        if current_box == n:\n            current_box = 0\n\n        if is_valid(current_box, current_box + 1):\n            boxes_count += 2\n            gifts.append((current_box, current_box + 1))\n\n        current_box += 1\n\n    return str(boxes_count)\n\n\ndef",
        "test": "assert solution(\"8 2\\n1 2 2 3 2 4 6 10\\n\") == \"8\\n\"",
        "num_ids": 996,
        "indeed": false
    },
    {
        "number": 4422,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    S = stdin.split()[1]\n    S = S.lower()\n    return S",
        "test": "assert solution(\"3 1\\nABC\") == \"aBC\"",
        "num_ids": 362,
        "indeed": false
    },
    {
        "number": 4423,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, *restaurants = map(int, stdin.split())\n    restaurants.sort(key=lambda x: (x[0], -x[1]))\n    result = []\n    for i in range(n):\n        result.append(restaurants[i][0])\n    return \"\\n\".join(str(num) for num in result)\n\nstdin = \"6\\nkhabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\khabarovsk 40\"\nprint(solution(stdin))\n",
        "test": "assert solution(\"\"\"",
        "num_ids": 1054,
        "indeed": false
    },
    {
        "number": 4424,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    \n    # if K is less than or equal to 0 or if X is less than or equal to 0, return No\n    if K <= 0 or X <= 0:\n        return \"No\"\n    \n    # if K is equal to X, return Yes\n    if K == X:\n        return \"Yes\"\n    \n    # initialize the number of coins\n    coins_count = 0\n    \n    # loop until the sum of coins is greater than or equal to X\n    while coins_count < K:\n        # add 500-yen coin to the coins_count\n        coins_count += 500\n    \n    # if the coins count is less than X, return No\n    if coins_count < X:\n        return \"No\"\n    \n    # return Yes\n    return \"Yes\"",
        "test": "assert solution('3 900') == 'No'",
        "num_ids": 618,
        "indeed": false
    },
    {
        "number": 4425,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 1:\n        return '1.0'\n    if n == 1:\n        return '0.0'\n\n    probabilities = []\n    for i in range(1, n + 1):\n        p = 1 / n\n        if i <= k:\n            p *= (1 / 2) ** i\n        else:\n            p *= (1 / 2) ** (k - 1)\n        probabilities.append(p)\n\n    return f'{sum(probabilities) / (1 / n):.9f}'\n",
        "test": "assert solution(\"3 10\") == \"0.145833333333\", \"Incorrect output for sample input\"",
        "num_ids": 768,
        "indeed": false
    },
    {
        "number": 4426,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split()[0]\n\n    days = [\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"]\n    next_sunday_index = (days.index(S) + 1) % 7\n    next_sunday = days[next_sunday_index]\n\n    return str(next_sunday_index)",
        "test": "assert solution(\"SUN\") == \"1\"",
        "num_ids": 519,
        "indeed": false
    },
    {
        "number": 4427,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x2000 = map(int, stdin.split())\n\n    x2001 = r * x2000 - D\n    x2002 = r * x2001 - D\n    x2003 = r * x2002 - D\n    x2004 = r * x2003 - D\n    x2005 = r * x2004 - D\n    x2006 = r * x2005 - D\n    x2007 = r * x2006 - D\n    x2008 = r * x2007 - D\n    x2009 = r * x2008 - D\n    x2010 = r * x2009 - D\n\n    return f\"{x2001}\\n{x2002}\\n{x2003}\\n{x2004}\\n{x2005}\\n{x2006}\\n{x2007}\\n{x2008}\\n{x2009}\\n{x2010}\\n\"",
        "test": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\\n\"",
        "num_ids": 1310,
        "indeed": false
    },
    {
        "number": 4428,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, *d = map(int, stdin.split())\n    a, b, c = 0, 0, 0\n    \n    for num in d:\n        if num == 0:\n            a += 1\n        elif a == 0:\n            b += 1\n        else:\n            c += 1\n            \n    if a == b == c:\n        return str(a + b + c)\n    elif a + b > c:\n        return str(a + b)\n    else:\n        return str(a + c)",
        "test": "assert solution(\"5\\n1 3 1 1 4\\n\") == \"5\"",
        "num_ids": 1011,
        "indeed": false
    },
    {
        "number": 4429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    for i in range(t):\n        x, y, z = map(int, stdin.split('\\n')[i+1].split())\n        a, b, c = 0, 0, 0\n        if x == y or x == z or y == z:\n            if x > y and x > z:\n                a = x\n                b = y\n                c = z\n            elif y > x and y > z:\n                a = y\n                b = x\n                c = z\n            else:\n                a = z\n                b = x\n                c = y\n        else:\n            a = max(x, y)\n            b = max(a, z)\n            c = max(b, z)\n        if a == x and b == y and c == z:\n            print(\"YES\")\n            print(a, b, c)\n        else:\n            print(\"NO\")\n    return \"Done\"",
        "test": "assert solution(\"100 100 100\") == \"YES\\n100 100 100\"",
        "num_ids": 1281,
        "indeed": false
    },
    {
        "number": 4430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def helper(boxes, used_objects):\n        if len(boxes) == 0:\n            return 0\n        if len(used_objects) == n:\n            return max(helper(boxes, used_objects[1:]), helper(boxes[1:], used_objects[:-1]))\n\n        total_weight = 0\n        for box in boxes:\n            if box[0] == -1:\n                total_weight += box[1]\n            else:\n                used_objects.append(box[0])\n                total_weight += box[1]\n                if used_objects[-1] == n:\n                    return max(total_weight, helper(boxes, used_objects[:-1]))\n                used_objects.pop()\n\n        return max(helper(boxes, used_objects[1:]), helper(boxes[1:], used_objects[:-1]))\n\n    return str(helper(sorted([(0, k)], key=lambda x: -x[1]), []))\n",
        "test": "assert solution(\"\"\"",
        "num_ids": 1149,
        "indeed": false
    },
    {
        "number": 4431,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[2]\n    k_letters = set(stdin.split()[3])\n\n    def count_substrings(s: str) -> int:\n        count = 0\n        for i in range(1, len(s) - 1):\n            count += (s[i]!= s[i + 1]) + (s[i]!= s[i - 1])\n        return count\n\n    def count_substrings_with_letters(s: str, letters: set) -> int:\n        count = 0\n        for i in range(len(s) - 1):\n            if s[i] in letters and s[i + 1] in letters:\n                count += 1\n        return count\n\n    substrings = count_substrings(s)\n    substrings_with_letters = count_substrings_with_letters(s, k_letters)\n\n    return str(substrings_with_letters)\n\n\ndef",
        "test": "assert solution(input()) == \"21\"",
        "num_ids": 878,
        "indeed": false
    },
    {
        "number": 4432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_subsequence(seq: List[int], subseq: List[int]) -> bool:\n        for i, j in zip(seq, subseq):\n            if i == j:\n                return True\n        return False\n\n    def alternating_subsequence(seq: List[int]) -> int:\n        prev_sign = None\n        current_sum = 0\n        max_sum = 0\n\n        for i, sign in enumerate(seq):\n            if prev_sign == sign:\n                current_sum += 1\n            else:\n                max_sum = max(max_sum, current_sum)\n                current_sum = 1 if sign else -1\n\n            prev_sign = sign\n\n        max_sum = max(max_sum, current_sum)\n        return max_sum\n\n    def max_alternating_subsequence(seq: List[int], t: int) -> int:\n        max_length = 0\n        max_sum = float('-inf')\n\n        for i in range(1, t + 1):\n            length = 0\n            current_sum = 0\n            subseq_sum = 0\n\n            for j in range(len(seq) - i + 1):\n                current_subseq = seq[j:j + i]\n                subseq_sum += sum(current_subseq)\n\n                if i % 2 == 0:\n                    current_sum += subseq_sum\n                else:\n                    current_sum -= subseq_sum\n\n                length = max(length, current_sum)\n\n            max_length = max(max_length, length)\n            max_sum = max(max_sum, current_sum)\n\n        return max_sum\n\n    def max_by_size(seq: List[int], t: int) -> int:\n        max_length = 0\n        max_sum = 0\n\n        for i in range(1, t + 1):\n            length = 0\n            current_sum = 0\n            current_subseq = []\n\n            for j in range(len(seq) - i + 1):\n                current_subseq.append(seq[j + i - 1])\n                current_sum += seq[j + i - 1]\n\n                length = max(length, len(current_subseq))\n\n            max_length = max(max_length, length)\n            max_sum = max(max_sum, current_sum)\n\n        return max_sum\n\n    def main():\n        n = int(stdin.split()[0])\n        a = [int(x) for x in stdin.split()[1:]]\n\n        test_cases = int(stdin.split()[0])\n\n        for _ in range(test_cases):\n            result = max_by_size(a, test_cases)\n            print(result)\n\n    main()\n    return ''\n",
        "test": "assert solution(\"5\\n2\\n1 2\\n3 4\\n-1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"-1\\n-2\\n-3\\n-4\\n-5\\n-6\"",
        "num_ids": 3066,
        "indeed": false
    },
    {
        "number": 4433,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [list(map(int, stdin.split())) for _ in range(m)]\n\n    def find_spanning_tree(edges: list) -> list:\n        def dfs(v: int, used: list, result: list) -> None:\n            used[v] = True\n            result.append(v)\n            for i, e in enumerate(edges[v]):\n                if not used[e[1]]:\n                    dfs(e[1], used, result)\n\n        used = [False] * n\n        result = []\n        dfs(0, used, result)\n        return result\n\n    def find_maximum_degree(edges: list, spanning_tree: list) -> int:\n        degree = [0] * n\n        for edge in edges:\n            degree[edge[0]] += 1\n            degree[edge[1]] += 1\n\n        max_degree = max(degree)\n        return max_degree\n\n    spanning_tree = find_spanning_tree(edges)\n    max_degree = find_maximum_degree(edges, spanning_tree)\n\n    result = []\n    for v in spanning_tree:\n        result.append(str(v) + \" \" + str(degree[v]))\n\n    return \"\\n\".join(result)",
        "test": "assert solution(open(\"sample_input.txt\").read()) == \"\"\"",
        "num_ids": 2116,
        "indeed": false
    },
    {
        "number": 4434,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    for i in range(t):\n        n = int(stdin.split('\\n')[i+1])\n        board = []\n        for _ in range(n):\n            board.append([int(x) for x in stdin.split('\\n')[i+2]])\n        moves = bfs(board)\n        print(moves)\n\ndef",
        "test": "assert solution(open(\"input.txt\").read()) == \"0\\n40\\n41664916690999888\"",
        "num_ids": 2127,
        "indeed": false
    },
    {
        "number": 4435,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n\n    min_moves = [float('inf')] * n\n    min_moves[0] = 0\n\n    for i in range(1, n):\n        if a[i] % 2 == 0:\n            min_moves[i] = min(min_moves[i], min_moves[i - a[i]] + 1)\n        else:\n            min_moves[i] = min(min_moves[i], min_moves[i + a[i]] + 1)\n\n    print(*min_moves)",
        "test": "assert solution(open(\"input.txt\").read()) == \"1 1 1 2 -1 1 1 3 1 1\"",
        "num_ids": 1208,
        "indeed": false
    },
    {
        "number": 4436,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    test_cases = [int(stdin.split('\\n')[i + 1]) for i in range(n)]\n\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    for test_case in test_cases:\n        a, b, c = 1, 2, test_case\n        while gcd(a, b) > 1:\n            a, b = b, a % b\n\n        if a * b * c == test_case:\n            print(\"YES\")\n            print(f\"{a} {b} {c}\")\n        else:\n            print(\"NO\")\n\nwith open('input.txt', 'r') as f:\n    stdin = f.read()\n\nsolution(stdin)",
        "test": "assert solution('''4",
        "num_ids": 1179,
        "indeed": false
    },
    {
        "number": 4437,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    s = list(s)\n\n    def replace_even_length_prefix(prefix_index: int):\n        even_length_prefix = s[prefix_index:prefix_index + 2]\n        even_length_prefix_count = sum(1 for letter in even_length_prefix if letter == 'a' or letter == 'b')\n        new_letter = 'b' if even_length_prefix_count % 2 == 0 else 'a'\n        for i, letter in enumerate(even_length_prefix):\n            if letter == 'a':\n                s[prefix_index + i] = new_letter\n\n    min_operations = n\n    for prefix_index in range(1, n - 1, 2):\n        replace_even_length_prefix(prefix_index)\n        operations = sum(1 for letter in s if letter == 'a' or letter == 'b')\n        min_operations = min(min_operations, operations)\n        s[prefix_index] = 'b'\n\n    replace_even_length_prefix(n - 2)\n    operations = sum(1 for letter in s if letter == 'a' or letter == 'b')\n    min_operations = min(min_operations, operations)\n\n    return str(min_operations) +'' + ''.join(s)\n\ndef",
        "test": "assert solution(input()) == \"2\\nabba\\n\"",
        "num_ids": 1098,
        "indeed": false
    },
    {
        "number": 4438,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    def read_line() -> tuple[int, int]:\n        x, y = map(int, input().split())\n        return (x, y)\n\n    def get_level(point: tuple[int, int]) -> int:\n        if point[0] > 0:\n            return 1\n        elif point[1] > 0:\n            return 2\n        else:\n            return 3\n\n    n = int(stdin.split()[0])\n    key_points = [read_line() for _ in range(n)]\n    level = min(get_level(point) for point in key_points)\n\n    def check_valid(point: tuple[int, int]) -> bool:\n        if get_level(point) == level:\n            for adj in [(1, 0), (0, 1), (-1, 0), (0, -1)]:\n                if adj[0]!= point[0] - adj[0] or adj[1]!= point[1] - adj[1]:\n                    return False\n            return True\n        return False\n\n    visited = {key_points[0]}\n    distance = 0\n    while visited < set(key_points):\n        visited_keys = set()\n        for point in visited:\n            for adj in [(1, 0), (0, 1), (-1, 0), (0, -1)]:\n                new_point = (point[0] + adj[0], point[1] + adj[1])\n                if 0 <= new_point[0] < 2 and 0 <= new_point[1] < 2 and check_valid(new_point):\n                    visited_keys.add(new_point)\n        visited = visited_keys\n        distance += len(visited)\n\n    return str(distance)\n\n\ndef",
        "test": "assert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\") == \"9\"",
        "num_ids": 2063,
        "indeed": false
    },
    {
        "number": 4439,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == 1 and B == 3:\n        return \"3\"\n    elif A == 2 and B == 1:\n        return \"1\"\n    else:\n        return \"2\"",
        "test": "assert solution(\"3\\n1\\n\") == \"2\"",
        "num_ids": 403,
        "indeed": false
    },
    {
        "number": 4440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin)\n    max_volume = 0\n    for i in range(1, L+1):\n        for j in range(1, L+1):\n            for k in range(1, L+1):\n                volume = i * j * k\n                if volume > max_volume:\n                    max_volume = volume\n    return str(max_volume)",
        "test": "assert solution(\"9\") == \"3.000000000000\", \"Sample Input 2\"",
        "num_ids": 735,
        "indeed": false
    },
    {
        "number": 4441,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, *args = stdin.split()\n    n = int(n)\n    \n    if n == 1:\n        return \"Hello World\"\n    \n    a, b = map(int, args)\n    return str(a + b)",
        "test": "assert solution(\"1\\n\") == \"Hello World\"",
        "num_ids": 412,
        "indeed": true
    },
    {
        "number": 4442,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    \n    # Concatenate a copies of the digit a and b copies of the digit b\n    digit_a = str(a) * b\n    digit_b = str(b) * a\n    \n    # Compare the strings lexicographically\n    return digit_a if digit_a < digit_b else digit_b",
        "test": "assert solution(\"4 3\") == \"3333\"",
        "num_ids": 458,
        "indeed": true
    },
    {
        "number": 4443,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin.lower()\n    if c!= 'z':\n        return chr(ord(c) + 1)\n    else:\n        return 'z'",
        "test": "assert solution(\"a\") == \"b\", \"a is followed by b\"",
        "num_ids": 384,
        "indeed": true
    },
    {
        "number": 4444,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    return t + s",
        "test": "assert solution(\"oder atc\") == \"atcoder\"",
        "num_ids": 207,
        "indeed": true
    },
    {
        "number": 4445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = set(a)\n    a.remove(a.pop())\n    while a:\n        if len(a) % 2 == 0:\n            a.remove(max(a, key=lambda x: x % 2))\n        else:\n            a.remove(min(a, key=lambda x: x % 2))\n    return str(sum(a))",
        "test": "assert solution(\"6\\n5 1 2 4 6 3\\n\") == \"0\\n\"",
        "num_ids": 1057,
        "indeed": false
    },
    {
        "number": 4446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    max_points = 0\n\n    for i in range(n):\n        points = 0\n        for j in range(k):\n            if j == 0:\n                attack = a\n            elif j == 1:\n                attack = b\n            else:\n                continue\n\n            # If the opponent has skipped his turn\n            if points >= k:\n                break\n\n            # If the monster is dead\n            if h[i] <= 0:\n                break\n\n            # If the opponent is dead\n            if points >= k and h[i] >= 100:\n                break\n\n            # If the opponent can use the secret technique\n            if points + attack > k:\n                continue\n\n            # If the monster is dead after the attack\n            if h[i] - attack < 0:\n                points += 1\n                max_points = max(max_points, points)\n                continue\n\n            # If the opponent is dead after the attack\n            if h[i] - attack >= 100:\n                points += 1\n                continue\n\n            # If the monster is alive and not dead after the attack\n            points += 1\n            max_points = max(max_points, points)\n            h[i] -= attack\n\n    return str(max_points)",
        "test": "assert solution(\"1 1 100 99\\n100\") == \"1\"",
        "num_ids": 1411,
        "indeed": false
    },
    {
        "number": 4447,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # Calculate the count of elements for each remainder r\n    count = [0] * m\n    for i in range(n):\n        count[a[i] % m] += 1\n\n    # Calculate the minimum number of moves\n    min_moves = 0\n    for r in range(m):\n        min_moves += n // m + (n % m!= 0) * (count[r]!= 0)\n\n    # Calculate the array satisfying the condition\n    result = []\n    for i in range(n):\n        index = (a[i] + m) % m\n        if index == 0:\n            result.append(m)\n        else:\n            result.append(index)\n\n    return str(min_moves) + '\\n' +''.join(map(str, result))\n",
        "test": "assert solution(\"4 2\\n0 1 2 3\\n\") == \"0\\n0 1 2 3\\n\"",
        "num_ids": 1268,
        "indeed": false
    },
    {
        "number": 4448,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = list(map(int, stdin.split()))\n    d, t = list(map(int, stdin.split()))\n\n    def valid(i, j):\n        return k[i] > 0 and (t[i] not in [0, j] or d[j] <= i)\n\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if valid(i, j):\n            k[i] -= 1\n            i += 1\n        else:\n            j += 1\n\n    if all(k[i] > 0 for i in range(n)):\n        return \"0\"\n\n    min_day = -1\n    for i in range(n):\n        if k[i] > 0:\n            min_day = max(min_day, d[j] - 1)\n            j = max(j, t.index(i) + 1)\n\n    return str(min_day)\n",
        "test": "assert solution(\"\"\"",
        "num_ids": 1335,
        "indeed": false
    },
    {
        "number": 4449,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = sorted(set(a), reverse=True)\n    total_area = sum(a)\n    area_per_rectangle = total_area // n\n    area_left = total_area % n\n\n    if area_left > 0:\n        return \"NO\"\n\n    result = []\n    for i in range(n):\n        for j in range(4):\n            area = a[i] * 4\n            result.append(area)\n            area_left -= 1\n\n        if area_left > 0:\n            return \"NO\"\n\n    return \"YES\"\n\n\ndef",
        "test": "assert solution(\"2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\") == \"YES\\nYES\\nNO\\nYES\\nYES\"",
        "num_ids": 1187,
        "indeed": false
    },
    {
        "number": 4450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    adj_list = [[] for _ in range(n + 1)]\n    weights = [[] for _ in range(n + 1)]\n\n    for _ in range(m):\n        x, y, w = map(int, stdin.split())\n        adj_list[x].append((y, w))\n        weights[x].append(w)\n        adj_list[y].append((x, w))\n        weights[y].append(w)\n\n    d = [float('inf')] * (n + 1)\n    d[1] = 0\n    queue = [(1, 0)]\n\n    while queue:\n        u, distance = queue.pop(0)\n        if distance < d[u]:\n            continue\n\n        for v, w in adj_list[u]:\n            if d[u] + w < d[v]:\n                d[v] = d[u] + w\n                queue.append((v, d[v]))\n\n    d = [0] + d\n    result = [0] * (k + 1)\n\n    for i in range(1, n + 1):\n        for j in range(i):\n            if i!= j:\n                result[d[i] + d[j] - 1] += weights[i][j]\n\n    return str(result[k - 1])\n\nstdin = \"\"\"\n6 10 5\n2 5 1\n5 3 9\n6 2 2\n1 3 1\n5 1 8\n6 5 10\n1 6 5\n6 4 6\n3 6 2\n3 4 5\n\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"\n7 15 18\n2 6 3\n5 7 4\n6 5 4\n3 6 9\n6 7 7\n1 6 4\n7 1 6\n7 2 1\n4 3 2\n3 2 8\n5 3 6\n2 5 5\n3 7 9\n4 1 8\n2 1 1\n\"\"\"\n\nprint(solution(stdin))",
        "test": "assert solution('''",
        "num_ids": 2678,
        "indeed": false
    },
    {
        "number": 4451,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort()\n    k = 1\n    total_diversity = a[-1] - a[0]\n    while total_diversity * 2 < n * (2 * 10**5):\n        total_diversity *= 2\n        k += 1\n    if total_diversity == n * (2 * 10**5):\n        k = 1\n        total_diversity = 0\n        while total_diversity * 3 < n * (2 * 10**5):\n            total_diversity *= 2\n            k += 1\n    if total_diversity * 3 < n * (2 * 10**5):\n        total_diversity *= 3\n        k += 1\n    teams = [set() for _ in range(k)]\n    for i in range(n):\n        j = 0\n        while j < k and a[i] - total_diversity > a[j] + total_diversity:\n            j += 1\n        teams[j].add(i)\n    res = total_diversity\n    for team in teams:\n        res = max(res, max(team) - min(team))\n    print(res, k)\n    for team in teams:\n        print(len(team), *sorted(team))\n    return \" \".join(str(res) for res in [total_diversity, k] + [len(team) for team in teams])\n\n\ndef",
        "test": "assert solution(\"6\\n1 5 12 13 2 15\\n\") == \"7 2\\n2 2 1 1 2 1\"",
        "num_ids": 1561,
        "indeed": false
    },
    {
        "number": 4452,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    def is_round(num: int) -> bool:\n        if num < 10:\n            return True\n        return all(num % 10 == 0 for num in str(num))\n\n    def sum_of_round_numbers(n: int) -> str:\n        res = \"\"\n        while n > 0:\n            if is_round(n):\n                res = str(n) + \" \" + res\n            n //= 10\n        return res.strip()\n\n    def min_summands(n: int) -> int:\n        count = 0\n        while n > 0:\n            if is_round(n):\n                count += 1\n            n //= 10\n        return count\n\n    def min_summands_helper(n: int) -> int:\n        count = 0\n        while n > 0:\n            if is_round(n):\n                count += 1\n            n -= 1\n        return count\n\n    test_cases = int(stdin.split()[0])\n    for i in range(test_cases):\n        n = int(stdin.split()[1])\n        k = min_summands(n)\n        print(f\"{k} {sum_of_round_numbers(n)}\")",
        "test": "assert solution('5\\n5009\\n7\\n9876\\n10000\\n10\\n') == '2\\n5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10\\n'",
        "num_ids": 1113,
        "indeed": false
    },
    {
        "number": 4453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    q, n = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    \n    q_results = []\n    for _ in range(q):\n        p_temp = p.copy()\n        day = 0\n        result = [0] * n\n        for i in range(1, n + 1):\n            index = p_temp.index(i)\n            p_temp[index], p_temp[day] = p_temp[day], p_temp[index]\n            if p_temp[day] == 1:\n                result[i - 1] = day + 1\n            day += 1\n        q_results.append(' '.join(map(str, result)))\n        \n    return '\\n'.join(q_results)\n\ntest_case_1 = '''\n6\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n'''\n\nprint(solution(test_case_1))",
        "test": "assert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1 \\n3 3 3 \\n2 3 3 2 1 3 \\n1 \\n2 2 2 2 \\n4 4 4 1 4\"",
        "num_ids": 3165,
        "indeed": false
    },
    {
        "number": 4454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.split('\\n')[0])\n    for _ in range(queries):\n        n = int(stdin.split('\\n')[1])\n        coins = [int(x) for x in stdin.split('\\n')[2].split()]\n        answer = []\n        for coin in coins:\n            min_coins = float('inf')\n            for i in range(n):\n                if coins[i] < coin:\n                    continue\n                min_coins = min(min_coins, coins[i] - coin)\n            answer.append(min_coins)\n        print(' '.join(map(str, answer)))\n\ninput = '''\n3\n5\n1 2 3 4 5\n3\n1 2 2\n4\n1 1 1 1\n'''\n\nsolution(input)",
        "test": "assert solution('3\\n5\\n1 2 3 4 5\\n3\\n1 2 2\\n4\\n1 1 1 1') == '3\\n2\\n1'",
        "num_ids": 1141,
        "indeed": false
    },
    {
        "number": 4455,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    r = list(map(int, stdin.split()))\n    quarrel = []\n\n    for i in range(k):\n        x, y = map(int, stdin.split())\n        quarrel.append((x - 1, y - 1))\n\n    mentor_count = [0] * n\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if i in quarrel and j in quarrel:\n                continue\n\n            if r[i] > r[j]:\n                mentor_count[i] += 1\n                mentor_count[j] += 1\n\n    return \" \".join(str(count) for count in mentor_count)\n\n\nprint(solution(input()))",
        "test": "assert solution(\"\"\"\\",
        "num_ids": 1476,
        "indeed": false
    },
    {
        "number": 4456,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    q = list(map(int, stdin.split()))\n\n    def is_valid(s, p, q):\n        distinct_chars = set()\n        for i in range(n):\n            if s[p[i] - 1] in distinct_chars or s[q[i] - 1] in distinct_chars:\n                return False\n            distinct_chars.add(s[p[i] - 1])\n        return len(distinct_chars) >= k\n\n    if not is_valid(''.join(chr(ord('a') + i - 1) for i in p), p, q):\n        return \"NO\"\n\n    def backtrack(s, p, q):\n        if len(s) == n:\n            if is_valid(s, p, q):\n                return True\n            return False\n\n        for i in range(n):\n            if s[p[i] - 1] <= s[p[i + 1] - 1] and s[q[i] - 1] <= s[q[i + 1] - 1]:\n                s[p[i], q[i]] = s[p[i + 1], q[i + 1]] = s[p[i], q[i]] + 1\n                if backtrack(s, p, q):\n                    return True\n                s[p[i], q[i]] = s[p[i + 1], q[i + 1]] = s[p[i], q[i]] - 1\n\n        return False\n\n    s = ['a' + str(i) for i in range(n)]\n    if backtrack(s, p, q):\n        return \"YES\", \"\".join(s)\n    else:\n        return \"NO\"\n\nstdin = \"\"\"3 2\n1 2 3\n1 3 2\n\"\"\"\n\nprint(solution(stdin))",
        "test": "assert solution(\"2 3\\n1 2\\n3 2\") == \"YES\\nabc\"",
        "num_ids": 1942,
        "indeed": false
    },
    {
        "number": 4457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    \n    min_shots = float('inf')\n    min_order = []\n    \n    def dfs(i, shots, order):\n        if shots == 0:\n            nonlocal min_shots, min_order\n            min_shots = min(min_shots, shots)\n            min_order = order\n            return\n        \n        for j in range(i, n):\n            dfs(j + 1, shots, order + [j])\n    \n    dfs(0, 0, [])\n    \n    return f\"{min_shots}\\n{' '.join(map(str, min_order))}\"",
        "test": "assert solution(\"\"\"",
        "num_ids": 1092,
        "indeed": false
    },
    {
        "number": 4458,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, *perm = map(int, stdin.split())\n    count = 0\n    for i in range(1, n+1):\n        if i not in perm:\n            continue\n        for j in range(1, i):\n            if perm[i-1] <= perm[j-1]:\n                break\n        else:\n            count += 1\n    return str(count)\n\nwith open(\"input.txt\", \"r\") as file:\n    stdin = file.read()\n\nprint(solution(stdin))",
        "test": "assert solution(\"5\\n1 2 3 4 5\") == \"5\", \"Sample Input 2\"",
        "num_ids": 680,
        "indeed": false
    },
    {
        "number": 4459,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = map(int, stdin.split())\n    a_dict = {}\n    for num in a:\n        if num in a_dict:\n            a_dict[num] += 1\n        else:\n            a_dict[num] = 1\n    b = []\n    for key, value in a_dict.items():\n        if value == 1:\n            b.append(key)\n    min_length = min(len(b), len(a))\n    return str(min_length)",
        "test": "assert solution('4\\n3 3 3 3\\n') == '1'",
        "num_ids": 738,
        "indeed": false
    },
    {
        "number": 4460,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3, x_4, x_5 = map(int, stdin.split())\n    if x_1 == 0:\n        return str(1)\n    elif x_2 == 0:\n        return str(2)\n    elif x_3 == 0:\n        return str(3)\n    elif x_4 == 0:\n        return str(4)\n    else:\n        return str(5)",
        "test": "assert solution(\"0 2 3 4 5\") == \"1\"",
        "num_ids": 799,
        "indeed": true
    },
    {
        "number": 4461,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n\n    # Calculate the area of each piece\n    area_max = h * w\n    area_min = w * h\n\n    # Calculate the minimum possible area of each piece\n    area_max_min = min(area_max, area_min)\n    area_min_max = max(area_max, area_min)\n\n    # Calculate the minimum possible value of S_{max} - S_{min}\n    area_max_min_difference = area_max_min - area_min_max\n\n    return str(area_max_min_difference)",
        "test": "assert solution(\"3 5\") == \"0\"",
        "num_ids": 850,
        "indeed": false
    },
    {
        "number": 4462,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    for i in range(n - 1):\n        if a[i] % 4 == 0 and a[i + 1] % 4 == 0:\n            a[i], a[i + 1] = a[i + 1], a[i]\n            break\n\n    if a[0] % 4 == 0 and a[1] % 4 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"4\\n1 2 3 4\\n\") == \"No\", \"Test 2 failed\"",
        "num_ids": 744,
        "indeed": false
    },
    {
        "number": 4463,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s_chars = list(s)\n    t_chars = list(t)\n    \n    s_chars.sort()\n    t_chars.sort()\n    \n    for i in range(len(s_chars)):\n        if s_chars[i]!= t_chars[i]:\n            return \"Yes\"\n    \n    return \"No\"",
        "test": "assert solution(\"aba\\nbac\") == \"Yes\"",
        "num_ids": 614,
        "indeed": false
    },
    {
        "number": 4464,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        A, B, C = map(int, stdin.split())\n    except ValueError:\n        return \"NO\"\n\n    if A == 1:\n        return \"NO\"\n\n    mod_sum = 0\n    for i in range(1, B, A):\n        mod_sum += i\n        if mod_sum == C % B:\n            break\n\n    if mod_sum!= C % B:\n        return \"NO\"\n\n    return \"YES\"",
        "test": "assert solution(\"1 2 3\") == \"NO\", \"Input: 1 2 3; Expected: NO; Output: {}\".format(solution(\"1 2 3\"))",
        "num_ids": 846,
        "indeed": false
    },
    {
        "number": 4465,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    A, B = map(int, stdin.split())\n\n    # Calculate the area\n    area = A * B\n\n    # Print the result\n    print(area)\n\n    return ''",
        "test": "assert solution(\"2 2\") == \"1\"",
        "num_ids": 236,
        "indeed": false
    },
    {
        "number": 4466,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.split())\n    \n    # Check if there is enough room for all people\n    if Y + 2 * Z <= X:\n        return str(Y // 2)\n    \n    # Otherwise, we need to seat one person for each possible gap\n    for i in range(1, X // Y + 1):\n        if X - Y * (i - 1) >= 2 * Z:\n            return str(i)\n    \n    # If all the calculations fail, return an error message\n    return \"Error\"",
        "test": "assert solution(\"13 3 1\") == \"3\"",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 4467,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        return gcd(b, a % b) if b else a\n\n    N = int(stdin.split()[0])\n    a = [int(stdin.split()[i + 1]) for i in range(N)]\n    b = [int(stdin.split()[i + 1]) for i in range(2 * N)]\n    a.sort()\n    b.sort()\n    max_pairs = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if a[i] < a[j] and b[i] < b[j]:\n                max_pairs += 1\n    return str(max_pairs)\n",
        "test": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5\\n\") == \"2\"",
        "num_ids": 864,
        "indeed": false
    },
    {
        "number": 4468,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    ts = list(map(int, stdin.split()[1:]))\n    current_t = 0\n    total_time = 0\n    water_emitted = 0\n    for i, t_i in enumerate(ts):\n        current_t += t_i\n        if current_t >= t:\n            water_emitted += t\n            current_t -= t\n            if i > 0:\n                total_time += t\n    total_time += t * n\n    return str(total_time)",
        "test": "assert solution(input()) == '7'",
        "num_ids": 983,
        "indeed": false
    },
    {
        "number": 4469,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    shelf = [0]\n\n    for i in range(q):\n        command, book_id = stdin.split()[1].split()\n        book_id = int(book_id)\n\n        if command == 'L':\n            if book_id == 1:\n                shelf.append(1)\n                shelf.append(1)\n            else:\n                shelf.append(shelf[book_id - 2])\n        elif command == 'R':\n            if book_id == len(shelf):\n                shelf.append(len(shelf))\n                shelf.append(len(shelf))\n            else:\n                shelf.append(shelf[book_id - 1])\n        else:\n            l = min(book_id - 1, shelf.index(book_id))\n            r = min(len(shelf) - 1, shelf.index(book_id))\n            shelf[l] = r - l\n\n    return \" \".join([str(shelf.index(x) + 1) if x in shelf else \"0\" for x in range(1, len(shelf) + 1)])",
        "test": "assert solution(\"2\\n3\\n1\\n1\\n1\\n3\\n4\\n3\\n2\\n4\\n1\\n1\\n\") == \"1\\n1\\n2\"",
        "num_ids": 1714,
        "indeed": false
    },
    {
        "number": 4470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    result = []\n    for _ in range(q):\n        n = int(stdin.split()[1])\n        if n % 2 == 0:\n            n //= 2\n        elif n % 3 == 0:\n            n *= 2\n        elif n % 5 == 0:\n            n *= 4\n        if n == 1:\n            result.append(0)\n        else:\n            result.append(n)\n    for move in result:\n        print(move)\n    return \"\\n\".join(map(str, result))\n\n\ninput_str = \"\"\"\n7\n1\n10\n25\n30\n14\n27\n1000000000000000000\n\"\"\"\n\noutput_str = solution(input_str)\nprint(output_str)\n",
        "test": "assert solution('''",
        "num_ids": 1174,
        "indeed": false
    },
    {
        "number": 4471,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    result = []\n    for i in range(n):\n        result.append(a[i] - 1)\n        if a[i] > 0:\n            a[i] -= 2\n    return \"YES\" if all(a) else \"NO\"",
        "test": "assert solution(\"4\\n3\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"YES\"",
        "num_ids": 786,
        "indeed": false
    },
    {
        "number": 4472,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = stdin.split('\\n')[1]\n    b = stdin.split('\\n')[2]\n    \n    def preprocess(s: str) -> str:\n        for i in range(1, n, 2):\n            s = s[:i-1] + s[i] + s[i+1:]\n        for i in range(2, n, 2):\n            s = s[:i-2] + s[i] + s[i-1] + s[i+1]\n        return s\n    \n    a = preprocess(a)\n    b = preprocess(b)\n    \n    count = 0\n    i = 0\n    while i < n:\n        if a[i]!= b[i]:\n            count += 1\n            a[i], b[i] = b[i], a[i]\n        i += 1\n    \n    return str(count)\n\nstdin = '''\n7\nabacaba\nbacabaa\n'''\n\nprint(solution(stdin))  # Output: \"4\"\n\nstdin = '''\n5\nzcabd\ndbacz\n'''\n\nprint(solution(stdin))  # Output: \"0\"",
        "test": "assert solution(\"\"\"",
        "num_ids": 1809,
        "indeed": false
    },
    {
        "number": 4473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    queries = list(map(lambda x: list(map(int, x.split())), stdin.split()[1:]))\n    frogs = [0] * n\n\n    for i, query in enumerate(queries):\n        a, b, k = query[0], query[1], query[2]\n        for _ in range(k):\n            if i % 2 == 0:\n                frogs[(i + 1) % n] += a\n            else:\n                frogs[(i + 1) % n] -= b\n\n    return \" \".join(map(str, frogs))\n\n\ninput_ = \"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\"\noutput = solution(input_)\nprint(output)",
        "test": "assert solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\"",
        "num_ids": 1034,
        "indeed": false
    },
    {
        "number": 4474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    for _ in range(q):\n        n = int(stdin.split()[1])\n        result = find_good_numbers(n)\n        print(result)\n\ndef",
        "test": "assert solution(\"8\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n1000000000000000000\\n\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\\n1350851717672992089\\n\"",
        "num_ids": 1192,
        "indeed": false
    },
    {
        "number": 4475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        a, b, x, y, n = map(int, stdin.split()[1:])\n        if a < x or b < y:\n            continue\n        min_product = float('inf')\n        for _ in range(n):\n            if a > x:\n                a -= 1\n            if b > y:\n                b -= 1\n            product = a * b\n            if product < min_product:\n                min_product = product\n        print(min_product)",
        "test": "assert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70\\n77\\n55\\n10\"",
        "num_ids": 1602,
        "indeed": false
    },
    {
        "number": 4476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        return gcd(b, a % b) if b else a\n\n    def lcm(a: int, b: int) -> int:\n        return a * b // gcd(a, b)\n\n    def moves_to_get_b_from_a(a: int, b: int) -> int:\n        moves = 0\n        while a!= b:\n            moves += 1\n            a = (a + 1) % 2 * 3 + (a - 1) % 2 * 2\n        return moves\n\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        a, b = map(int, stdin.split()[1:])\n        print(moves_to_get_b_from_a(a, b))",
        "test": "assert solution(\"5\\n2 3\\n10 10\\n2 4\\n7 4\\n9 3\\n\") == \"1\\n0\\n2\\n2\\n1\"",
        "num_ids": 875,
        "indeed": false
    },
    {
        "number": 4477,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    apartment_numbers = []\n    for i in range(1, 10001):\n        if i == 10000:\n            break\n        if i // 10 == i % 10:\n            apartment_numbers.append(i)\n    for i in range(10, 100):\n        if i == 100:\n            break\n        if i // 10 == i % 10:\n            apartment_numbers.append(i)\n    for i in range(1000, 10000):\n        if i == 10000:\n            break\n        if i // 10 == i % 10:\n            apartment_numbers.append(i)\n\n    for x in stdin.split()[1:]:\n        if x in apartment_numbers:\n            for num in apartment_numbers:\n                if num // 10 == num % 10:\n                    apartment_numbers.remove(num)\n\n    return str(len(apartment_numbers))",
        "test": "assert solution('''4",
        "num_ids": 737,
        "indeed": false
    },
    {
        "number": 4478,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.split()[0])\n    pairs = []\n    for _ in range(k):\n        n = int(stdin.split()[1])\n        a = list(map(int, stdin.split()[2:2+n]))\n        pairs.append((n, a))\n\n    def dfs(i: int, j: int, cur_sum: int, n: int) -> str:\n        if cur_sum == 0:\n            return f\"{i} {n}\"\n\n        if cur_sum > 0:\n            return \"NO\"\n\n        if i == k or j == k:\n            return \"NO\"\n\n        return dfs(i+1, j, cur_sum, n)\n\n    def can_remove_one(i: int, j: int, cur_sum: int, n: int, x: int) -> str:\n        if cur_sum == 0:\n            return \"NO\"\n\n        if cur_sum > 0:\n            return \"NO\"\n\n        if i == k or j == k:\n            return \"NO\"\n\n        for y in range(x+1, n):\n            res = dfs(i, j, cur_sum - a[y], n)\n            if res!= \"NO\":\n                return res\n\n        return \"NO\"\n\n    for i in range(k):\n        for j in range(i+1, k):\n            n1, a1 = pairs[i]\n            n2, a2 = pairs[j]\n\n            if sum(a1) == sum(a2):\n                continue\n\n            for x in range(n1):\n                for y in range(x+1, n1):\n                    res = can_remove_one(i, j, sum(a1) - a[x] - a[y], n1, x)\n                    if res!= \"NO\":\n                        print(\"YES\")\n                        print(res)\n                        return \"\"\n\n            for x in range(n2):\n                for y in range(x+1, n2):\n                    res = can_remove_one(i, j, sum(a2) - a[x] - a[y], n2, x)\n                    if res!= \"NO\":\n                        print(\"YES\")\n                        print(res)\n                        return \"\"\n\n    print(\"NO\")",
        "test": "assert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\\n2\\n2 3\\n1\\n3\\n3 3 3\\n3\\n3 3 3\\n3 3\") == \"NO\\n2 3\\n1 2\\n1 2\\n1 2\"",
        "num_ids": 1881,
        "indeed": false
    },
    {
        "number": 4479,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    # convert input string to list of integers\n    A = [int(x) for x in stdin.split()]\n    \n    # find maximum possible sum of modified array\n    max_sum = max(sum(A[:i] + A[i+1:] + [A[i]]) for i in range(len(A)))\n    \n    return str(max_sum)",
        "test": "assert solution(\"1\\n4\\n2\\n3\\n1\\n\") == \"5\\n6\\n13\\n\"",
        "num_ids": 741,
        "indeed": false
    },
    {
        "number": 4480,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n\n    def can_partition(A: List[int]) -> bool:\n        total_sum = sum(A)\n        if total_sum % 2 == 1:\n            return False\n\n        target_sum = total_sum // 2\n        for i in range(len(A) - 2):\n            if A[i] + A[i + 1] + A[i + 2] == target_sum:\n                for j in range(i + 3, len(A)):\n                    if A[i] + A[i + 1] + A[i + 2] + A[j - 1] == target_sum:\n                        return True\n\n        return False\n\n    return str(can_partition(A))",
        "test": "assert solution([[0,2,1,-6,6,7,9,-1,2,0,1]]) == \"false\"",
        "num_ids": 1088,
        "indeed": false
    },
    {
        "number": 4481,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    votes = [list(set(input().split())) for _ in range(n)]\n    result = []\n\n    for i in range(n):\n        votes[i].sort()\n        if len(votes[i]) > 1:\n            result.append(\" \".join(votes[i]))\n\n    return \"\\n\".join(result)",
        "test": "assert solution(\"7\\nbeat\\nvet\\nbeet\\nbed\\nvet\\nbet\\nbeet\\n\") == \"beet\\nvet\\n\"",
        "num_ids": 874,
        "indeed": false
    },
    {
        "number": 4482,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = sorted(set(a))\n    a = [x for x in a]\n    min_cost = float(\"inf\")\n\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if a[i] == a[j]:\n                cost = 0\n            else:\n                cost = (a[i] - a[j]) ** 2\n\n            if cost < min_cost:\n                min_cost = cost\n\n    return str(min_cost)\n",
        "test": "assert solution('2\\n4 8') == '8'",
        "num_ids": 703,
        "indeed": false
    },
    {
        "number": 4483,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split())\n    left = x + a + b\n\n    cake_amount = 100\n    donut_amount = left // 100\n\n    if donut_amount > 0:\n        left -= donut_amount * 100\n        donut_amount = 0\n    else:\n        donut_amount = 0\n\n    while left >= cake_amount:\n        left -= cake_amount\n        cake_amount = 100\n        donut_amount += 1\n\n    return str(left)\n\nstdin = \"1234\\n150\\n100\"\nprint(solution(stdin)) # 84",
        "test": "assert solution(\"1234\\n150\\n100\") == \"84\"",
        "num_ids": 702,
        "indeed": false
    },
    {
        "number": 4484,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    MOD = 10**9 + 7\n    \n    def find_count(A: int, B: int, C: int, D: int) -> int:\n        def dfs(left: int, right: int, total: int, current: int) -> int:\n            if left == 0:\n                return total\n            if current > N + M:\n                return 0\n            if left > right:\n                return 0\n            if current % 2 == 0:\n                if left < 2:\n                    return 0\n                return dfs(left - 1, right, total + 1, current + 2)\n            else:\n                if left < 2:\n                    return 0\n                return dfs(left - 1, right, total + 1, current + 1)\n        \n        def is_valid(arr: List[int]) -> bool:\n            dog_count = sum(arr) // 2\n            monkey_count = sum(arr) - dog_count\n            return dog_count <= N and monkey_count <= M\n        \n        count = 0\n        for i in range(1, N + M + 1):\n            for j in range(i, N + M + 1):\n                count += dfs(i, j, 0, 0)\n                count %= MOD\n        \n        for i in range(N + M - 1, -1, -1):\n            for j in range(i, N + M - 1, -1):\n                count += dfs(i, j, 0, 0)\n                count %= MOD\n        \n        count *= 2\n        return count % MOD\n    \n    count = 1\n    while True:\n        A, B, C, D = 0, 0, 0, 0\n        for i in range(N):\n            for j in range(M):\n                if i + j < N:\n                    A += 1\n                if i + j < M:\n                    B += 1\n                if i + j >= N and j + i < M:\n                    C += 1\n                if i + j >= N and i + j < M:\n                    D += 1\n        count = find_count(A, B, C, D)\n        if count < MOD:\n            return str(count)",
        "test": "assert solution(\"2 2\") == \"8\"",
        "num_ids": 2099,
        "indeed": false
    },
    {
        "number": 4485,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N, M = map(int, lines[0].split())\n    islands = []\n    for i in range(1, N + 1):\n        islands.append(list(map(int, lines[i].split())))\n\n    islands.sort(key=lambda x: (x[0], x[1]))\n    for i in range(M):\n        for j in range(i + 1, M):\n            if islands[i][1] == N or islands[j][1] == N:\n                return \"POSSIBLE\"\n\n    return \"IMPOSSIBLE\"\n\n\nstdin = \"\"\"\n3 2\n1 2\n2 3\n\"\"\"\n\nprint(solution(stdin))",
        "test": "assert solution(\"3 2\\n1 2\\n1 3\") == \"IMPOSSIBLE\"",
        "num_ids": 1028,
        "indeed": false
    },
    {
        "number": 4486,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.lower()\n    n = len(s)\n    result = \"\"\n\n    for i in range(1, n, 2):\n        result += s[i]\n\n    return result\n\ndef",
        "test": "assert solution(\"atcoder\") == \"acdr\"",
        "num_ids": 387,
        "indeed": false
    },
    {
        "number": 4487,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    return \"YES\" if (A[-1] == B[0] and B[-1] == C[0]) or (B[-1] == C[0] and C[-1] == A[0]) else \"NO\"",
        "test": "assert solution(\"cat dog dogcat\") == \"NO\"",
        "num_ids": 419,
        "indeed": true
    },
    {
        "number": 4488,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    a, b = int(input_list[0]), int(input_list[1])\n\n    if a > b:\n        return \"GREATER\"\n    elif a < b:\n        return \"LESS\"\n    else:\n        return \"EQUAL\"",
        "test": "assert solution(\"36\\n24\") == \"GREATER\"",
        "num_ids": 332,
        "indeed": true
    },
    {
        "number": 4489,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N, *s_list = map(str, stdin.split())\n    M, *t_list = map(str, stdin.split())\n\n    s_dict = {s: 0 for s in s_list}\n    t_dict = {t: 0 for t in t_list}\n\n    blue_card = 0\n    red_card = 0\n    yen = 0\n\n    while blue_card < N and red_card < M:\n        if blue_card < N and blue_card_string == announced_string:\n            yen += 1\n            blue_card += 1\n        if red_card < M and red_card_string == announced_string:\n            yen -= 1\n            red_card += 1\n\n    return str(yen)",
        "test": "assert solution(r\"\"\"",
        "num_ids": 1328,
        "indeed": false
    },
    {
        "number": 4490,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    b = stdin[0]\n    if b == 'A':\n        return 'T'\n    elif b == 'C':\n        return 'G'\n    elif b == 'G':\n        return 'C'\n    else:\n        return 'A'",
        "test": "assert solution(\"A\") == \"T\"",
        "num_ids": 371,
        "indeed": true
    },
    {
        "number": 4491,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = [[int(x) for x in line.split()] for line in stdin.split('\\n')[1:]]\n    \n    def collect_candies(i: int, j: int) -> int:\n        visited = set()\n        collected = 0\n        stack = [(i, j)]\n        while stack:\n            r, c = stack.pop()\n            if (r, c) == (2, N):\n                break\n            visited.add((r, c))\n            if (r, c) == (1, 1):\n                collected += A[1][2]\n            elif (r, c) == (2, N):\n                collected += A[2][N]\n            else:\n                collected += A[r][c]\n            for dr, dc in [(-1, 0), (0, 1), (1, 0), (0, -1)]:\n                if (r + dr, c + dc) not in visited and 1 <= r + dr <= 2 and 1 <= c + dc <= N:\n                    stack.append((r + dr, c + dc))\n        return collected\n    \n    max_collected = 0\n    for i in range(1, N + 1):\n        for j in range(N + 1):\n            collected = collect_candies(i, j)\n            max_collected = max(max_collected, collected)\n    return str(max_collected)\n\nwith open(\"sample.in\", \"r\") as file:\n    sample_input = file.read()\n\nwith open(\"sample.out\", \"w\") as file:\n    file.write(solution(sample_input))\n\nwith open(\"input.in\", \"r\") as file:\n    input_data = file.read()\n\nwith open(\"output.out\", \"w\") as file:\n    file.write(solution(input_data))",
        "test": "assert solution(\"5\\n3 2 2 4 1\\n1 2 2 2 1\") == \"14\"",
        "num_ids": 1460,
        "indeed": false
    },
    {
        "number": 4492,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = list(map(int, stdin.split()))\n    x = 0\n\n    for i in range(N):\n        x += a[i]\n\n    while x > 0:\n        x -= a[0]\n        N -= 1\n\n        if N > 0:\n            for i in range(1, N):\n                a[i] += a[i - 1]\n\n    return str(N + 1)",
        "test": "assert solution(\"3 3\\n2 2 2\") == \"1\"",
        "num_ids": 721,
        "indeed": false
    },
    {
        "number": 4493,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    c = [[int(x) for x in row.split()] for row in stdin.split('\\n')]\n\n    a_1, a_2, a_3 = 0, 1, 0\n    b_1, b_2, b_3 = 1, 0, 1\n\n    for i in range(3):\n        for j in range(3):\n            if c[i][j] == 1:\n                if i == 0:\n                    if c[1][j] + c[2][j] == a_2 + b_2:\n                        a_1, a_2, a_3 = 0, 0, 1\n                        b_1, b_2, b_3 = 1, 0, 1\n                elif i == 1:\n                    if c[0][j] + c[2][j] == a_1 + b_2:\n                        a_1, a_2, a_3 = 0, 0, 1\n                        b_1, b_2, b_3 = 1, 0, 1\n                elif i == 2:\n                    if c[0][j] + c[1][j] == a_1 + b_1:\n                        a_1, a_2, a_3 = 0, 0, 1\n                        b_1, b_2, b_3 = 1, 0, 1\n\n    if a_1 == 0 and a_2 == 0 and a_3 == 1 and b_1 == 1 and b_2 == 0 and b_3 == 1:\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\\n\") == \"Yes\"",
        "num_ids": 1897,
        "indeed": false
    },
    {
        "number": 4494,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    if 'ABC' in stdin:\n        return 'ARC'\n    else:\n        return 'ABC'",
        "test": "assert solution(\"ABC\") == \"ARC\"",
        "num_ids": 249,
        "indeed": true
    },
    {
        "number": 4495,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    count = 0\n    for num in range(a, b + 1):\n        if num % x == 0:\n            count += 1\n    print(count)\n    return str(count)\n",
        "test": "assert solution(\"4 8 2\") == \"3\"",
        "num_ids": 347,
        "indeed": false
    },
    {
        "number": 4496,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    d = int(stdin)\n    \n    if d == 25:\n        return \"Christmas\"\n    elif d == 24:\n        return \"Christmas Eve\"\n    elif d == 23:\n        return \"Christmas Eve Eve\"\n    else:\n        return \"Christmas Eve Eve Eve\"",
        "test": "assert solution(\"25\") == \"Christmas\"",
        "num_ids": 447,
        "indeed": true
    },
    {
        "number": 4497,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    result = 0\n\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            count += 1\n        if count == 2:\n            result = i\n            break\n\n    return str(result)",
        "test": "assert solution(\"7\") == \"4\"",
        "num_ids": 620,
        "indeed": false
    },
    {
        "number": 4498,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n\n    if d <= a + c:\n        return \"Yes\"\n    elif d <= a + b + c:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"4 7 9 3\") == \"Yes\"",
        "num_ids": 418,
        "indeed": false
    },
    {
        "number": 4499,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    s_1, s_2, s_3 = stdin.split()\n    initial_letters = [s[0].upper() for s in (s_1, s_2, s_3)]\n    acronym = ''.join(initial_letters)\n    return acronym",
        "test": "assert solution(\"atcoder beginner contest\") == \"ABC\"",
        "num_ids": 352,
        "indeed": true
    },
    {
        "number": 4500,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    if a + b >= c:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"50 100 120\") == \"Yes\"",
        "num_ids": 359,
        "indeed": true
    },
    {
        "number": 4501,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    x = list(map(int, stdin.split()[1:]))\n    x.sort()\n    count = 1\n    total = sum(x)\n\n    while total < a:\n        count += 1\n        total += x[-1] - x[-count]\n\n    return str(count)\n\ninput_ = \"4 8\\n7 9 8 9\"\nprint(solution(input_))",
        "test": "assert solution(\"10 10\\n1 2 3 4 5 6 7 8 9 10\") == \"150\"",
        "num_ids": 1043,
        "indeed": false
    },
    {
        "number": 4502,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    b = []\n    for i in range(n):\n        b.append(a[i])\n        b.reverse()\n\n    return \" \".join(map(str, b))",
        "test": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"",
        "num_ids": 478,
        "indeed": true
    },
    {
        "number": 4503,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    h, n = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    \n    def can_win(a):\n        if not a:\n            return True\n        for i in range(len(a)):\n            for j in range(i+1, len(a)):\n                if a[i] == a[j]:\n                    return False\n        return True\n    \n    if can_win(a):\n        if h - sum(a) >= 0:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"1 100 10\\n1 100 100\\n\") == \"No\"",
        "num_ids": 943,
        "indeed": false
    },
    {
        "number": 4504,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    even_length = 0\n    odd_length = 0\n    for i in range(len(s)):\n        if s[i] in \"aeiou\":\n            even_length += 1\n            if i % 2 == 0:\n                if odd_length < even_length:\n                    odd_length = even_length\n        else:\n            odd_length += 1\n\n    return str(max(even_length, odd_length))",
        "test": "assert solution(\"abaababaab\") == \"6\"",
        "num_ids": 561,
        "indeed": false
    },
    {
        "number": 4505,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if len(S)!= 3 or S[0] not in ['a', 'b', 'c'] or S[1] not in ['a', 'b', 'c'] or S[2] not in ['a', 'b', 'c']:\n        return \"No\"\n    if S[0] == S[1] and S[0] == S[2]:\n        return \"Yes\"\n    elif S[0] == S[1] or S[0] == S[2] or S[1] == S[2]:\n        return \"No\"\n    else:\n        return \"Yes\"",
        "test": "assert solution('bac') == 'Yes'",
        "num_ids": 566,
        "indeed": false
    },
    {
        "number": 4506,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, *a, *b = map(int, stdin.split())\n    a.sort()\n    b.sort()\n    return str(sum(a[i] * b[i] for i in range(n)))",
        "test": "assert solution(\"\"\"",
        "num_ids": 1168,
        "indeed": false
    },
    {
        "number": 4507,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    special_offers = []\n    for line in stdin.split()[1:]:\n        x, y = map(int, line.split())\n        special_offers.append((x, y))\n\n    def min_cost(a: List[int]) -> int:\n        a.sort(reverse=True)\n        return sum(a[:k])\n\n    def min_cost_with_offers(a: List[int]) -> int:\n        a.sort(reverse=True)\n        cost = sum(a[:k])\n        for x, y in special_offers:\n            if k >= x:\n                cost -= y * y // 2\n        return cost\n\n    return str(min_cost(a)) if k <= n else str(min_cost_with_offers(a))\n",
        "test": "assert solution('''",
        "num_ids": 1114,
        "indeed": false
    },
    {
        "number": 4508,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    edges = [(int(x) - 1, int(y) - 1) for x, y in stdin.split()[1:n - 1]]\n\n    def dfs(vertex, distance, depth):\n        if distance > 2:\n            return\n\n        if depth > 0:\n            edges.append((vertex, 0))\n\n        for neighbor, _ in edges:\n            if neighbor == vertex:\n                continue\n\n            dfs(neighbor, distance + 1, depth + 1)\n\n    dfs(0, 0, 0)\n    edges.sort(key=lambda x: (x[0], -x[1]))\n    return str(len(edges))\n",
        "test": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\") == \"2\\n0\\n1\"",
        "num_ids": 1344,
        "indeed": false
    },
    {
        "number": 4509,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    count = 0\n    num = 1\n    while count < k - 1:\n        num += 1\n        if num % n!= 0:\n            count += 1\n    return str(num)\n\nwith open('input.txt', 'r') as file:\n    input_data = file.read().split('\\n')\n\nfor test_case in input_data:\n    print(solution(test_case))",
        "test": "assert solution(input()) == \"10\\n15\\n1999999999\\n113\\n1000000001\\n1\\n\"",
        "num_ids": 765,
        "indeed": false
    },
    {
        "number": 4510,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    id_list = list(map(int, stdin.split()[1:]))\n\n    conversations = []\n    for i in range(n):\n        for j in range(len(conversations)):\n            if conversations[j][0] in id_list[:i + 1]:\n                conversations.pop(j)\n        if len(conversations) < k:\n            conversations.append((id_list[i], i))\n        elif conversations[k - 1][1] > i:\n            conversations.pop(k - 1)\n            conversations.append((id_list[i], i))\n\n    result = [x[0] for x in conversations]\n    result.sort()\n    print(len(result))\n    print(*result, sep=' ')\n\n    return ''\n\n\ndef",
        "test": "assert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"",
        "num_ids": 1195,
        "indeed": false
    },
    {
        "number": 4511,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    turns = []\n    for i in range(1, n+1):\n        turns.append(list(map(int, stdin.split('\\n')[i].split())))\n    \n    def play_turn(turn: int, cards: list, index: int, damage: int):\n        if index == len(cards):\n            return damage\n        if cards[index][0] == turn:\n            if (turn % 10) == 0:\n                damage *= 2\n            return play_turn(turn, cards, index+1, damage)\n        return play_turn(turn, cards, index+1, damage)\n    \n    max_damage = 0\n    for turn in turns:\n        max_damage = max(max_damage, play_turn(turn[0], turn[1:], 0, 0))\n    \n    return str(max_damage)",
        "test": "assert solution(input()) == '263'",
        "num_ids": 1529,
        "indeed": false
    },
    {
        "number": 4512,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    s, queries = stdin.strip().split('\\n')\n    queries = [query.split() for query in queries.strip().split('\\n')]\n    result = []\n    \n    for query in queries:\n        if query[0] == '1':\n            pos, c = int(query[1]), query[2]\n            s = s[:pos] + c + s[pos + 1:]\n        else:\n            l, r = map(int, query[1:])\n            result.append(len(set(s[l-1:r])))\n    \n    return '\\n'.join(map(str, result))",
        "test": "assert solution(\"dfcbbcfeeedbaea\") == \"5\\n2\\n5\\n2\\n6\\ndef solution(stdin: str) -> str:\\n    pass\\n\"",
        "num_ids": 1141,
        "indeed": false
    },
    {
        "number": 4513,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(field: List[List[int]]) -> bool:\n        for i in range(9):\n            for j in range(9):\n                if len(set(field[i][j]))!= 1:\n                    return False\n        for i in range(3):\n            for j in range(3):\n                if len(set(field[i][j * 3 : (j + 1) * 3]))!= 1 or len(set(field[j][i * 3 : (i + 1) * 3]))!= 1:\n                    return False\n        for i in range(3):\n            for j in range(3):\n                for k in range(3):\n                    if len(set(field[i + k][j + k * 3 : j + (k + 1) * 3]))!= 1:\n                        return False\n        return True\n\n    def change_number(field: List[List[int]]) -> List[List[int]]:\n        changed = False\n        for i in range(9):\n            for j in range(9):\n                if field[i][j]!= 0:\n                    for num in range(1, 10):\n                        if num not in field[i][j]:\n                            field[i][j] = [num]\n                            if is_valid(field):\n                                return field\n                            else:\n                                field[i][j].remove(num)\n                            changed = True\n        return field if not changed else change_number(field)\n\n    def get_unique_numbers(field: List[List[int]]) -> List[int]:\n        return list(set(sum(sum(row) for row in field), 0))\n\n    def get_unique_numbers_for_row(field: List[List[int]]) -> List[int]:\n        return get_unique_numbers(field)\n\n    def get_unique_numbers_for_col(field: List[List[int]]) -> List[int]:\n        return get_unique_numbers(list(zip(*field)))\n\n    def get_unique_numbers_for_block(field: List[List[int]], i: int, j: int) -> List[int]:\n        return get_unique_numbers(\n            [\n                [field[i][j], field[i + k][j], field[i + k * 2][j]]\n                for k in range(3)\n            ]\n        )\n\n    def get_unique_numbers_for_group(field: List[List[int]], i: int, j: int) -> List[int]:\n        return get_unique_numbers(\n            [\n                [field[i][k], field[i + k][j], field[i + k * 2][k]]\n                for k in range(3)\n            ]\n        )\n\n    test_cases = int(stdin.split('\\n')[0])\n    for _ in range(test_cases):\n        field = [list(map(int, input().split())) for _ in range(9)]\n        changed_field = change_number(field)\n        print(\n            '\\n'.join(\n               ''.join(str(num) if num!= 0 else '.' for num in row)\n                for row in changed_field\n            )\n        )\n",
        "test": "assert solution(\"2\\n154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\\n\") == \"154873296\\n336592714\\n729641835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\\n\"",
        "num_ids": 2723,
        "indeed": false
    },
    {
        "number": 4514,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    parent = [0] * (n + 1)\n    for i in range(1, n + 1):\n        parent[i] = int(stdin.split()[i - 1])\n\n    subordinates = [[] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        subordinates[parent[i]].append(i)\n\n    def dfs(u, order):\n        order.append(u)\n        for v in subordinates[u]:\n            if not dfs(v, order):\n                return False\n        return True\n\n    def find_min(u, order):\n        min_index = u\n        for v in subordinates[u]:\n            if v not in order and v < min_index:\n                min_index = v\n        return min_index\n\n    result = []\n    for i in range(q):\n        u, k = map(int, stdin.split())\n        order = [u]\n        if dfs(u, order):\n            if k < len(order):\n                result.append(order[k])\n            else:\n                result.append(-1)\n        else:\n            result.append(-1)\n    return \" \".join(map(str, result))\n\ndef",
        "test": "assert solution(test_input) == test_output, \"Test failed\"",
        "num_ids": 1433,
        "indeed": false
    },
    {
        "number": 4515,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    for _ in range(t):\n        a, b, c, n = map(int, stdin.split('\\n')[1].split())\n        if (a + b + c) % n == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
        "test": "assert solution(\"5\\n5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\\nYES\\nNO\\nNO\\nYES\"",
        "num_ids": 799,
        "indeed": false
    },
    {
        "number": 4516,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n\n    p1 = [i + 1 if i < n - 1 else i for i in range(n)]\n    p2 = [i + 1 if i < n - 1 else i for i in range(n)]\n    p3 = [i + 1 if i < n - 1 else i for i in range(n)]\n    p4 = [i + 1 if i < n - 1 else i for i in range(n)]\n\n    p = [p1, p2, p3, p4][m - 1]\n\n    def dist(p, x):\n        return sum(abs(p.index(i) - p.index(x[i])) for i in range(m - 1))\n\n    f1 = dist(p1, x)\n    f2 = dist(p2, x)\n    f3 = dist(p3, x)\n    f4 = dist(p4, x)\n\n    return str(f1) + \" \" + str(f2) + \" \" + str(f3) + \" \" + str(f4)",
        "test": "assert solution(\"5 5\\n2 1 5 3 5\\n\") == \"9 8 12 6 8\\n\"",
        "num_ids": 1140,
        "indeed": false
    },
    {
        "number": 4517,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    def bfs(root: int, query: list) -> bool:\n        queue = collections.deque([root])\n        visited = set()\n        visited.add(root)\n        distance = {root: 0}\n        while queue:\n            u = queue.popleft()\n            for v in adj[u]:\n                if v not in visited and (query[distance[u]] in adj[v] or (distance[u] + 1) in adj[v]):\n                    visited.add(v)\n                    distance[v] = distance[u] + 1\n                    queue.append(v)\n        return True if all(distance[v] == len(query) for v in visited) else False\n\n    def dfs(u: int, visited: set) -> bool:\n        visited.add(u)\n        if u in adj[u]:\n            for v in adj[u]:\n                if v not in visited and dfs(v, visited):\n                    return True\n        return False\n\n    def is_path_valid(u: int) -> bool:\n        visited = set()\n        return dfs(u, visited)\n\n    def is_valid_query(query: list, distance: int) -> bool:\n        valid = True\n        for i in range(len(query)):\n            if query[i] not in adj[i + 1] and (distance in adj[i + 1] or (distance + 1) in adj[i + 1]):\n                valid = False\n                break\n        return valid\n\n    n, m = map(int, stdin.split())\n    adj = [set() for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u, v = map(int, stdin.split())\n        adj[u].add(v)\n        adj[v].add(u)\n    queries = stdin.split(\"\\n\")[n - 1].split()\n    queries = list(map(lambda x: list(map(int, x.split())), queries))\n    queries = [query for query in queries if len(query) == n]\n\n    result = []\n    for i, query in enumerate(queries):\n        if is_valid_query(query, i):\n            if bfs(1, query):\n                result.append(\"YES\")\n            else:\n                result.append(\"NO\")\n        else:\n            result.append(\"NO\")\n\n    return \"\\n\".join(result)\n",
        "test": "assert solution('''",
        "num_ids": 3112,
        "indeed": false
    },
    {
        "number": 4518,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    gangs = set(a)\n    for i in range(n):\n        gangs.discard(a[i])\n\n    if len(gangs) == 1:\n        return \"NO\"\n\n    gang_count = len(gangs)\n    roads = []\n\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if a[i]!= a[j] and a[i] in gangs and a[j] in gangs:\n                roads.append((i + 1, j + 1))\n\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if a[i] == a[j] and a[i] in gangs:\n                roads.append((i + 1, j + 1))\n\n    if not roads:\n        return \"NO\"\n\n    roads.sort()\n    for road in roads:\n        x, y = road\n        if x!= y:\n            for i in range(x - 1, y - 1):\n                if gangs[i] == a[x] and gangs[y - 1]!= a[y]:\n                    continue\n                if gangs[i]!= a[x]:\n                    break\n            else:\n                return \"YES\"\n\n    return \"NO\"\n",
        "test": "assert solution(\"1\\n1\\n1\") == \"NO\"",
        "num_ids": 3082,
        "indeed": false
    },
    {
        "number": 4519,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(stdin.split()[1])\n\n    def swap(i, j):\n        s[i], s[j] = s[j], s[i]\n\n    for i in range(k - 1):\n        for j in range(i + 1, n):\n            swap(i, j)\n\n    return ''.join(s)\n\n\ndef",
        "test": "assert solution(",
        "num_ids": 2027,
        "indeed": false
    },
    {
        "number": 4520,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = [map(int, stdin.split()) for _ in range(n)]\n\n    def is_bad(p: int) -> bool:\n        return sum(1 for s in segments for s_end in range(s[0], s[1] + 1) if s_end <= p) > k\n\n    bad_points = [p for p in range(1, n + 1) if is_bad(p)]\n\n    min_m = float('inf')\n    for m in range(1, len(bad_points) + 1):\n        for i in range(len(bad_points) - m + 1):\n            p_set = set(bad_points[i:i + m])\n            p_list = sorted(p for p in range(1, n + 1) if p not in p_set)\n            if len(p_list) < min_m:\n                min_m = len(p_list)\n                min_p_list = p_list\n\n    return str(min_m) + '\\n' +''.join(map(str, min_p_list))",
        "test": "assert solution(",
        "num_ids": 1526,
        "indeed": false
    },
    {
        "number": 4521,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1].split()))\n    v = list(map(int, stdin.split()[2].split()))\n\n    points = []\n    for i in range(n):\n        points.append((x[i], v[i]))\n\n    distances = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            distances.append(points[i][0] + points[j][0] - points[i][0] * points[j][1] + points[j][0] * points[i][1])\n\n    return str(sum(distances))",
        "test": "assert solution(input()) == '19', 'Test 2 failed'",
        "num_ids": 769,
        "indeed": false
    },
    {
        "number": 4522,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    edges = []\n    for i in range(n - 1):\n        u, v, w = map(int, stdin.split()[1 + 3 * i:1 + 3 * (i + 1)])\n        edges.append((u - 1, v - 1, w))\n    queries = list(map(int, stdin.split()[1 + 3 * n:]))\n\n    def dfs(u, visited):\n        nonlocal max_weight\n        visited.add(u)\n        for v, w in edges:\n            if v not in visited:\n                if w > max_weight[u]:\n                    max_weight[u] = w\n                    max_weight[v] = max(max_weight[v], w)\n                dfs(v, visited)\n\n    max_weight = [-1] * n\n    dfs(0, set())\n\n    def bfs(u, visited):\n        nonlocal pairs\n        visited.add(u)\n        for v, w in edges:\n            if v not in visited:\n                if w > max_weight[u]:\n                    max_weight[u] = w\n                    max_weight[v] = max(max_weight[v], w)\n                if w == max_weight[u]:\n                    pairs[u] += 1\n                    pairs[v] += 1\n                    bfs(v, visited)\n\n    pairs = [0] * n\n    for q in range(1, m + 1):\n        visited = set()\n        bfs(0, visited)\n        print(pairs[q - 1])\n",
        "test": "assert solution(\"\"\"7 5",
        "num_ids": 1863,
        "indeed": false
    },
    {
        "number": 4523,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[1])\n    a = list(map(int, stdin.split()[2:]))\n    a.sort()\n    \n    result = \"YES\"\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if abs(a[i] - a[j]) <= 1:\n                a.pop(min(i, j))\n                if len(a) == 1:\n                    result = \"NO\"\n                    break\n            elif abs(a[i] - a[j]) == 2:\n                a.remove(a[i])\n                a.remove(a[j])\n                if len(a) == 1:\n                    result = \"NO\"\n                    break\n    \n    return result\n\ndef",
        "test": "assert solution(\"\"\"",
        "num_ids": 1185,
        "indeed": false
    },
    {
        "number": 4524,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0].split())\n    a = int(stdin.split()[1], 2)\n    b = int(stdin.split()[2], 2)\n\n    while b > 0:\n        carry = a & b\n        a = a >> 1\n        b = carry << 1\n\n    return str((a + carry) % 998244353)\n",
        "test": "assert solution(\"4 5\\n1001\\n10101\") == \"11\"",
        "num_ids": 1233,
        "indeed": false
    },
    {
        "number": 4525,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[1])\n    a = [2 * i + 1 for i in range(n // 2)]\n    a.extend([2 * i for i in range(n // 2, n)])\n    a.sort()\n    return \"YES\\n\" + \" \".join(str(x) for x in a) if n % 2 == 0 and sum(a[:n // 2]) == sum(a[n // 2:]) else \"NO\\n\"\n\nfor _ in range(int(stdin.split()[0])):\n    print(solution(stdin))",
        "test": "assert solution(\"5\\n2\\n4\\n6\\n8\\n10\\n\") == \"NO\\nYES\\n2 4 1 5\\nNO\\nYES\\n2 4 6 8 1 3 5 11\\nNO\"",
        "num_ids": 2230,
        "indeed": false
    },
    {
        "number": 4526,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[1])\n    a = [int(x) for x in stdin.split()[2:]]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] == a[i] * 2:\n                    count += 1\n    return str(count)\n\nt = int(input())\nfor _ in range(t):\n    stdin = input()\n    print(solution(stdin))",
        "test": "assert solution(\"2\\n1 1\\n3\\n1 1 2\\n5\\n1 1 1 1 1\\n8\\n8 7 6 5 4 3 2 1\\n1\\n1\") == \"5\\n1\\n0\\n4\\n0\"",
        "num_ids": 1012,
        "indeed": false
    },
    {
        "number": 4527,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    def intersection(a: list, b: list) -> bool:\n        return a[1] >= b[0] and b[1] >= a[0]\n\n    def non_intersecting(a: list, b: list) -> bool:\n        return not any(intersection(a, c) or intersection(b, c) for c in segments)\n\n    n = int(stdin.split()[0])\n    segments = [list(map(int, stdin.split())) for _ in range(n)]\n    segments.sort(key=lambda x: (x[1] - x[0]))\n\n    max_size = 1\n    current_size = 1\n\n    for i in range(1, len(segments)):\n        if not non_intersecting(segments[i - 1], segments[i]):\n            current_size += 1\n        else:\n            max_size = max(max_size, current_size)\n            current_size = 1\n\n    max_size = max(max_size, current_size)\n\n    return str(max_size)\n\n\ndef",
        "test": "assert solution(\"4\\n4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7\") == \"3\\n4\\n2\\n7\\n\"",
        "num_ids": 1799,
        "indeed": false
    },
    {
        "number": 4528,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    result = []\n    for _ in range(t):\n        h, m = map(int, stdin.split()[1].split())\n        minutes_remaining = 60 - m\n        if minutes_remaining < 0:\n            h -= 1\n            minutes_remaining += 60\n        result.append(f\"{h}:{minutes_remaining:02d}\")\n    return \"\\n\".join(result)\n\ndef",
        "test": "assert solution(open(\"test_input.txt\").read()) == open(\"test_output.txt\").read()",
        "num_ids": 816,
        "indeed": false
    },
    {
        "number": 4529,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        s = stdin.readline().strip()\n        s = ''.join(filter(lambda x: x in 'LRUD', s))\n        if not s:\n            return -1\n        if len(s) == 1:\n            return s[0], s[0]\n        for i in range(1, len(s)-1):\n            if s[i-1] == 'L' and s[i+1] == 'R':\n                return s[i-1], s[i]\n            if s[i-1] == 'R' and s[i+1] == 'L':\n                return s[i-1], s[i]\n            if s[i-1] == 'U' and s[i+1] == 'D':\n                return s[i-1], s[i]\n            if s[i-1] == 'D' and s[i+1] == 'U':\n                return s[i-1], s[i]\n        return -1\n\nstdin = \"\"\"\n4\n4\nLRUD\n4\nLURD\n5\nRRUDU\n5\nLLDDR\n\"\"\"\n\nprint(solution(stdin))",
        "test": "assert solution(\"\"\"4",
        "num_ids": 1316,
        "indeed": false
    },
    {
        "number": 4530,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    skills = list(map(int, stdin.split()[1:]))\n    test_cases = int(stdin.split()[n + 1:])\n\n    for _ in range(test_cases):\n        skills.sort()\n        x = 1\n        while x <= n:\n            teams_count = 0\n            current_team_size = 0\n            current_skills = set()\n            for i in range(n):\n                if len(current_skills) == x and all(skills[i] == skills[j] for j in range(i + 1, n)):\n                    current_team_size += 1\n                    current_skills.add(skills[i])\n                elif len(current_skills) == x - 1:\n                    teams_count += 1\n            if current_team_size == x:\n                break\n            x += 1\n        print(x - 1)\n\ndef",
        "test": "assert solution(\"1\\n7\\n4 2 4 1 4 3 4\") == \"0\\n1\\n1\\n1\"",
        "num_ids": 1272,
        "indeed": false
    },
    {
        "number": 4531,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = list(a)\n    edges = []\n    for i in range(n - 1):\n        u, v = map(int, stdin.split())\n        u -= 1\n        v -= 1\n        edges.append((u, v))\n\n    def bfs(start):\n        q = [(start, 0)]\n        visited = [False] * n\n        visited[start] = True\n        while q:\n            u, d = q.pop(0)\n            if u == n - 1:\n                return d\n            for v in range(n):\n                if not visited[v] and (u, v) not in edges:\n                    visited[v] = True\n                    q.append((v, d + a[v]))\n\n    return str(max(map(bfs, range(n))))",
        "test": "assert solution(\"1\\n1337\") == \"0\"",
        "num_ids": 1325,
        "indeed": false
    },
    {
        "number": 4532,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    # Read the number of test cases\n    t = int(stdin.split()[0])\n\n    # Iterate through the test cases\n    for _ in range(t):\n        # Read the length of the array and the required divisior\n        n, k = map(int, stdin.split()[1].split())\n\n        # Read the array elements\n        a = list(map(int, stdin.split()[2].split()))\n\n        # Initialize the minimum number of moves\n        min_moves = 0\n\n        # Initialize the current index and the current value of x\n        current_index = 0\n        current_value = 0\n\n        # Iterate through the array\n        for i in range(n):\n            # Check if the current element is divisible by k\n            if a[i] % k == 0:\n                # If it is, check if the current value of x is greater than 0\n                if current_value > 0:\n                    # If it is, increment the minimum number of moves\n                    min_moves += 1\n\n                # Update the current index and the current value of x\n                current_index = i\n                current_value = 1\n\n            # If the current element is not divisible by k, increase the value of x\n            else:\n                # Check if the current value of x is greater than 0\n                if current_value > 0:\n                    # If it is, increment the minimum number of moves\n                    min_moves += 1\n\n                # Increase the value of x\n                current_value += 1\n\n        # Check if the current value of x is greater than 0\n        if current_value > 0:\n            # If it is, increment the minimum number of moves\n            min_moves += 1\n\n        # Print the minimum number of moves\n        print(min_moves)",
        "test": "assert solution(\"\"\"1 2 1 3",
        "num_ids": 1688,
        "indeed": false
    },
    {
        "number": 4533,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    children, cookies = map(int, stdin.split())\n    cookies.sort(reverse=True)\n    content_children = 0\n\n    for cookie in cookies:\n        if children >= 1 and cookie >= children[0]:\n            children[0] -= cookie\n            content_children += 1\n            if children[0] == 0:\n                break\n\n    return str(content_children)\n",
        "test": "assert solution(\"2 3\\n1 1\\n1 2\\n1 2 3\") == \"2\"",
        "num_ids": 871,
        "indeed": false
    },
    {
        "number": 4534,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 0:\n        return []\n    \n    triangle = [[1] * (n + 1)]\n    for i in range(1, n + 1):\n        row = [1]\n        for j in range(1, i + 1):\n            row.append(triangle[i - 1][j - 1] + triangle[i - 1][j])\n        triangle.append(row)\n    \n    return [str(row[n]) for row in triangle]",
        "test": "assert solution('3') == '[1, 3, 3, 1]'",
        "num_ids": 841,
        "indeed": false
    },
    {
        "number": 4535,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin, 2)\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return str(count)",
        "test": "assert solution(\"000000000000000000000000000001011\") == \"3\"",
        "num_ids": 677,
        "indeed": false
    },
    {
        "number": 4536,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    # convert the string input into a list of integers\n    nums = [int(x) for x in stdin.split(',')]\n\n    # add 1 to each element in the list\n    for i in range(len(nums)):\n        nums[i] += 1\n\n    # convert the list of integers back into a string\n    output = ', '.join(str(x) for x in nums)\n\n    return output",
        "test": "assert solution([4, 3, 2, 1]) == [4, 3, 2, 2]",
        "num_ids": 740,
        "indeed": false
    },
    {
        "number": 4537,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    largest = max(a + b, a - b, a * b)\n    return str(largest)\n",
        "test": "assert solution('3 1') == '4'",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 4538,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    points = [list(map(int, stdin.split())) for _ in range(N)]\n    points.sort(key=lambda x: (x[0]**2 + x[1]**2))\n    count = 0\n    for i in range(N):\n        if abs(points[i][0]) <= D and abs(points[i][1]) <= D:\n            count += 1\n    return str(count)",
        "test": "assert solution(input()) == '3'",
        "num_ids": 830,
        "indeed": false
    },
    {
        "number": 4539,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    is_harshad = True\n\n    def sum_of_digits(n: int) -> int:\n        return sum(map(int, str(n)))\n\n    def harshad(n: int) -> bool:\n        base_10_sum = sum_of_digits(n)\n        return n % base_10_sum == 0\n\n    if harshad(n):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n    return \"Yes\" if harshad(n) else \"No\"\n",
        "test": "assert solution(\"13\") == \"No\", \"Sample Input 2\"",
        "num_ids": 559,
        "indeed": true
    },
    {
        "number": 4540,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = list(zip(*sorted(zip(range(1, n+1), a))))\n    a = [x for x in a if x[0]!= 0]\n\n    dp = [[0] * n for _ in range(2)]\n    for i in range(1, n):\n        for j in range(2):\n            dp[j][i] = min(dp[j][i-1], dp[j-1][i-1]) + abs(a[i][0] - a[i-1][0])\n\n    return '\\n'.join(map(str, dp[0][1:] + dp[1][1:]))\n\nwith open('input.txt', 'r') as file:\n    stdin = file.read().strip()\n\nprint(solution(stdin))",
        "test": "assert solution(\"3\\n3 5 -1\\n\") == \"12\\n8\\n10\\n\"",
        "num_ids": 861,
        "indeed": false
    },
    {
        "number": 4541,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    vowels = \"aeiou\"\n    if stdin.lower() in vowels:\n        return \"vowel\"\n    else:\n        return \"consonant\"",
        "test": "assert solution('a') == 'vowel'",
        "num_ids": 306,
        "indeed": true
    },
    {
        "number": 4542,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin.strip())\n    black_stones = 0\n    white_stones = 0\n    left_stones = 0\n    right_stones = 0\n\n    for stone in s:\n        if stone == 'B':\n            black_stones += 1\n        elif stone == 'W':\n            white_stones += 1\n\n    if black_stones == 0 or white_stones == 0:\n        return str(1)\n\n    for stone in s:\n        if stone == 'B':\n            black_stones -= 1\n        elif stone == 'W':\n            white_stones -= 1\n\n    if black_stones == 0 or white_stones == 0:\n        return str(1)\n\n    if left_stones == 0:\n        return str(black_stones + right_stones)\n\n    if right_stones == 0:\n        return str(black_stones + left_stones)\n\n    return str(min(black_stones, right_stones))",
        "test": "assert solution(\"BBBWW\") == \"1\"",
        "num_ids": 694,
        "indeed": false
    },
    {
        "number": 4543,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    result = a + b\n    if result ** 0.5 == int(result ** 0.5):\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"100 200\") == \"No\"",
        "num_ids": 349,
        "indeed": false
    },
    {
        "number": 4544,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = map(int, stdin.split())\n    a = list(a)\n    max_count = 0\n    for i in range(N):\n        if a[i] == X:\n            count = 1\n            while i + count < N and a[i + count] == X:\n                count += 1\n            max_count = max(max_count, count)\n    return str(max_count)\n\nwith open(\"input.txt\", \"r\") as file:\n    input_data = file.read()\n\noutput_data = solution(input_data)\nprint(output_data)",
        "test": "assert solution(\"7\\n3 1 4 1 5 9 2\\n\") == \"4\\n\"",
        "num_ids": 681,
        "indeed": false
    },
    {
        "number": 4545,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    grid = [[0] * n for _ in range(n)]\n\n    # Read input grid\n    for i in range(n):\n        row = input().strip()\n        for j in range(n):\n            grid[i][j] = 1 if row[j] == 'W' else 0\n\n    # Calculate number of black squares\n    count = 0\n    for row in grid:\n        count += row.count(1)\n\n    # Calculate number of white squares\n    white_count = 0\n    for row in grid:\n        white_count += row.count(0)\n\n    # Calculate number of black squares that will be painted\n    black_count = white_count - a\n\n    return str(black_count)",
        "test": "assert solution(\"3\\n4\") == \"5\"",
        "num_ids": 655,
        "indeed": false
    },
    {
        "number": 4546,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b == c:\n        return 'YES'\n    elif a == b or b == c or c == a:\n        return 'NO'\n    else:\n        return 'YES'",
        "test": "assert solution(\"2 4 6\") == \"YES\"",
        "num_ids": 306,
        "indeed": false
    },
    {
        "number": 4547,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    decimal_representation = str(N)\n    if '9' in decimal_representation:\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert solution(\"29\") == \"Yes\"",
        "num_ids": 339,
        "indeed": true
    },
    {
        "number": 4548,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def dp(i: int, cost: int) -> int:\n        if i == 0 or i == n + 1:\n            return 0\n        if i == x or i == n:\n            return 1000000000\n\n        if i == 1 or i == n - 1:\n            return dp(i + 1, cost + 1)\n\n        if dp_cache[i]!= -1:\n            return dp_cache[i]\n\n        dp_cache[i] = min(dp(i + 1, cost + 1), dp(i + 2, cost + 1))\n\n        for ai in a:\n            if ai == i:\n                dp_cache[i] = min(dp_cache[i], dp(i + 1, cost + 1) + 1)\n\n        return dp_cache[i]\n\n    dp_cache = [-1] * (n + 1)\n    dp_cache[x] = 0\n    return str(dp(1, 0))\n\n\ndef",
        "test": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"",
        "num_ids": 1056,
        "indeed": false
    },
    {
        "number": 4549,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    s = [list(row) for row in stdin.splitlines()]\n\n    def can_paint(i, j, k):\n        return all(s[i-1][j]!= \"#\" for j in range(k, W)) and all(s[i][j-1]!= \"#\" for i in range(k, H))\n\n    for i in range(1, H):\n        for j in range(1, W):\n            if s[i][j] == \"#\":\n                if can_paint(i, j, 0):\n                    s[i][j] = \"*\"\n                elif can_paint(i, j, 1):\n                    s[i][j] = \"*\"\n\n    for i in range(H-1, -1, -1):\n        for j in range(W-1, -1, -1):\n            if s[i][j] == \"#\":\n                if can_paint(i, j, W-1):\n                    s[i][j] = \"*\"\n                elif can_paint(i, j, W):\n                    s[i][j] = \"*\"\n\n    return \"Yes\" if all(\"*\" not in row for row in s) else \"No\"",
        "test": "assert solution(\"3 3\\n.#.\\n###\\n\") == \"Yes\"",
        "num_ids": 1663,
        "indeed": false
    },
    {
        "number": 4550,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    \n    if a + b + c == 60:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution(\"10 30 20\") == \"Yes\"",
        "num_ids": 625,
        "indeed": false
    },
    {
        "number": 4551,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a + c > b + d:\n        return \"Left\"\n    elif a + c == b + d:\n        return \"Balanced\"\n    else:\n        return \"Right\"",
        "test": "assert solution(\"3 8 7 1\") == \"Left\"",
        "num_ids": 476,
        "indeed": false
    },
    {
        "number": 4552,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, *F, *P = [int(x) for x in stdin.split()]\n    F = [list(map(int, f.split())) for f in F]\n\n    max_profit = 0\n    for i in range(1, n + 1):\n        if F[i - 1][1] == 1:\n            max_profit += P[F[i - 1][0] - 1]\n\n    return str(max_profit)\n\n\ninput_data = \"\"\"\n1\n1 1 0 1 0 0 0 1 0 1\n3 4 5 6 7 8 9 -2 -3 4 -2\n\"\"\"\n\noutput = solution(input_data)\nprint(output)  # Output: 8",
        "test": "assert solution(",
        "num_ids": 1527,
        "indeed": false
    },
    {
        "number": 4553,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A + B + 1!= len(stdin) or not all(c in '0123456789-_' for c in stdin):\n        return 'No'\n    return 'Yes'",
        "test": "assert solution(\"3 4\\n269-6650\") == \"Yes\"",
        "num_ids": 477,
        "indeed": false
    },
    {
        "number": 4554,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input string to list of integers\n    data = list(map(int, stdin.split()))\n\n    # Calculate minimum distance\n    a, b, W = data\n    distance = abs(a - b)\n\n    return str(distance)",
        "test": "assert solution(\"3 2 6\") == \"1\"",
        "num_ids": 308,
        "indeed": false
    },
    {
        "number": 4555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    \n    if a > b:\n        a, b = b, a\n        \n    min_numbers = []\n    max_numbers = []\n    \n    for i in range(a, b+1):\n        if i in min_numbers:\n            max_numbers.append(i)\n        elif i in max_numbers:\n            min_numbers.append(i)\n        else:\n            min_numbers.append(i)\n            max_numbers.append(i)\n            \n    min_numbers = sorted(min_numbers)\n    max_numbers = sorted(max_numbers, reverse=True)\n    \n    for i in range(k):\n        print(min_numbers[i])\n        \n    for i in range(k):\n        print(max_numbers[i])\n        \n    return ''",
        "test": "assert solution(\"3 8 2\") == \"3\\n4\\n7\\n8\\n\", \"Sample Input: 3 8 2, Expected Output: 3\\n4\\n7\\n8\"",
        "num_ids": 950,
        "indeed": false
    },
    {
        "number": 4556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[1]\n    x = s[0].upper()\n    y = ''.join(c.lower() for c in s[1:])\n    return f\"{x}{y}\"",
        "test": "assert solution(\"AtCoder s Contest\") == \"ABC\"",
        "num_ids": 313,
        "indeed": false
    },
    {
        "number": 4557,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    possible = a + b >= x\n    return \"YES\" if possible else \"NO\"",
        "test": "assert solution(\"3 5 4\\n\") == \"YES\"",
        "num_ids": 409,
        "indeed": false
    },
    {
        "number": 4558,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    x, t = map(int, stdin.split())\n    sand_in_upper_bulb = x\n    sand_consumed = 0\n    while sand_in_upper_bulb > 0 and sand_consumed < t:\n        sand_consumed += sand_in_upper_bulb\n        sand_in_upper_bulb = max(0, x - sand_consumed)\n    return str(sand_consumed)",
        "test": "assert solution(\"100 17\") == \"83\"",
        "num_ids": 676,
        "indeed": false
    },
    {
        "number": 4559,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    \n    result = 1\n    for a in A:\n        if result > 10**18:\n            return -1\n        result *= a\n    \n    return str(result) if result <= 10**18 else -1",
        "test": "assert solution(\"2\\n1000000000 1000000000\\n\") == \"1000000000000000000\"",
        "num_ids": 801,
        "indeed": false
    },
    {
        "number": 4560,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n\n    if a <= 1:\n        return \"No\"\n\n    if a >= n + 1:\n        return \"Yes\"\n\n    coins = [1, 2, 5, 10, 20, 50, 100, 200, 500]\n    remain = n - a\n\n    if remain % 500 == 0:\n        return \"Yes\"\n\n    for coin in coins:\n        if coin > remain:\n            continue\n        if remain % coin == 0 and coin * 4 == remain:\n            return \"Yes\"\n\n    return \"No\"\n",
        "test": "assert solution(\"2018\\n218\") == \"Yes\", \"Failed sample input\"",
        "num_ids": 593,
        "indeed": false
    },
    {
        "number": 4561,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split())\n    if x + 1 > a and b - 1 < x:\n        return \"delicious\"\n    elif a - 1 <= x <= b - 1 or b - 1 < x <= a - 1:\n        return \"safe\"\n    else:\n        return \"dangerous\"",
        "test": "assert solution(\"4 3 6\") == \"safe\", \"The sample input does not produce the expected output.\"",
        "num_ids": 488,
        "indeed": true
    },
    {
        "number": 4562,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    largest_square = 0\n    \n    for i in range(N, 0, -1):\n        j = int(i ** 0.5)\n        while i >= j:\n            largest_square = max(largest_square, j ** 2)\n            i -= j\n            j -= 1\n        j = int(i ** 0.5)\n        while i >= j:\n            largest_square = max(largest_square, j ** 2)\n            i -= j\n            j += 1\n    \n    return str(largest_square)",
        "test": "assert solution(\"10\") == \"9\"",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 4563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, *ratios = map(int, stdin.split())\n    ratios = list(zip(*ratios))\n\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    for i in range(n):\n        ratios[i] = lcm(ratios[i][0], ratios[i][1]), lcm(ratios[i][1], ratios[i][0])\n\n    if ratios[0][0] > ratios[1][0]:\n        ratios[0], ratios[1] = ratios[1], ratios[0]\n\n    total_votes = ratios[0][0] + ratios[1][1]\n    return str(total_votes)\n",
        "test": "assert solution(\"3\\n2 3\\n1 1\\n3 2\\n\") == \"10\"",
        "num_ids": 744,
        "indeed": false
    },
    {
        "number": 4564,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.lower()\n    unique_chars = set(S)\n    if len(unique_chars) == len(S):\n        return \"yes\"\n    else:\n        return \"no\"",
        "test": "assert solution(\"uncopyrightable\") == \"yes\"",
        "num_ids": 339,
        "indeed": true
    },
    {
        "number": 4565,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(int, stdin.split())\n    leader_index = S.index('W')\n    leader_direction = 'W' if S[leader_index] == 'E' else 'E'\n\n    direction_changes = 0\n    for i in range(N):\n        if leader_direction!= S[i]:\n            direction_changes += 1\n\n    return str(direction_changes)",
        "test": "assert solution(\"6\\nWEEWWWE\\n\") == \"3\"",
        "num_ids": 602,
        "indeed": false
    },
    {
        "number": 4566,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    roads = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        roads[a].append(b)\n        roads[b].append(a)\n    answer = [0] * (n + 1)\n    for i in range(1, n + 1):\n        answer[i] = len(roads[i])\n    return '\\n'.join(map(str, answer))",
        "test": "assert solution(\"5 4\\n1 2\\n2 3\\n1 4\\n2 3\\n1 5\") == \"2\\n2\\n1\\n1\\n\"",
        "num_ids": 921,
        "indeed": false
    },
    {
        "number": 4567,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    scores = list(map(int, stdin.split()[1:]))\n\n    correct_points = 0\n    incorrect_points = 0\n\n    for score in scores:\n        if score == 10:\n            correct_points += 10\n        elif score == 0:\n            correct_points += 0\n        else:\n            correct_points += score\n\n    total_points = correct_points + incorrect_points\n\n    if total_points % 10 == 0:\n        return str(total_points)\n    else:\n        return str(total_points - (total_points % 10))\n",
        "test": "assert solution(\"3\\n10\\n15\\n5\\n\") == \"30\"",
        "num_ids": 703,
        "indeed": false
    },
    {
        "number": 4568,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    S = stdin.split()[1]\n\n    X = []\n    Y = []\n\n    for i in range(N):\n        if S[i] not in X:\n            X.append(S[i])\n        if S[i] not in Y:\n            Y.append(S[i])\n\n    return str(len(X) * len(Y))",
        "test": "assert solution(\"6\\naabbca\") == \"2\", \"Sample input failed\"",
        "num_ids": 730,
        "indeed": false
    },
    {
        "number": 4569,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"Sunny\":\n        return \"Cloudy\"\n    elif stdin == \"Cloudy\":\n        return \"Rainy\"\n    else:\n        return \"Sunny\"",
        "test": "assert solution(\"Sunny\") == \"Cloudy\"",
        "num_ids": 501,
        "indeed": true
    },
    {
        "number": 4570,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    plan1_fee = a * n\n    plan2_fee = b\n\n    if plan1_fee < plan2_fee:\n        return str(plan1_fee)\n    else:\n        return str(plan2_fee)\n",
        "test": "assert solution(\"7 17 120\") == \"119\", \"Plan 1\"",
        "num_ids": 515,
        "indeed": true
    },
    {
        "number": 4571,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = 0\n    for i in range(1, 2 ** n):\n        x += 1900\n        if i & (1 << m - 1):\n            x += 1900\n    return str(x)",
        "test": "assert solution('1 1') == '3800'",
        "num_ids": 648,
        "indeed": false
    },
    {
        "number": 4572,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    s = set(s)\n    s.add('a')\n    for c in 'abcdefghijklmnopqrstuvwxyz':\n        if c not in s:\n            return c\n    return None",
        "test": "assert solution(\"atcoderregularcontest\") == \"b\"",
        "num_ids": 559,
        "indeed": false
    },
    {
        "number": 4573,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, *x = map(int, stdin.split())\n    b = []\n    for i in range(1, n+1, 2):\n        x_list = sorted(x[:i]+x[i+1:])\n        b.append(x_list[n//2])\n    return \"\\n\".join(str(x) for x in b)\n\nwith open(\"input.txt\") as f:\n    stdin = f.read().strip()\n\nprint(solution(stdin))",
        "test": "assert solution(\"5\\n1 2 3 4 5\") == \"5\\n2\\n3\\n4\\n5\"",
        "num_ids": 762,
        "indeed": false
    },
    {
        "number": 4574,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n    A.sort(reverse=True)\n    for i in range(4):\n        if A[i] * 4 <= A[N-1] * (N-i-1):\n            return str(A[i] * 4)\n    return \"0\"",
        "test": "assert solution(\"5\\n1 2 3 4 5\\n\") == \"0\"",
        "num_ids": 917,
        "indeed": false
    },
    {
        "number": 4575,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N, D, X = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n\n    def count_chocolate_pieces(a: int) -> int:\n        n = 0\n        while a > 0:\n            n += 1\n            a -= 1\n        return n\n\n    prepared_chocolate_pieces = 0\n    for i in range(1, N + 1):\n        prepared_chocolate_pieces += count_chocolate_pieces(X - A[i - 1])\n        if prepared_chocolate_pieces >= D:\n            break\n\n    return str(prepared_chocolate_pieces)",
        "test": "assert solution(\"3\\n7 1\\n2\\n5\\n10\") == \"8\"",
        "num_ids": 822,
        "indeed": false
    },
    {
        "number": 4576,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, x = map(int, stdin.split())\n    if a + b + c < 1 or x % 50!= 0:\n        return \"Invalid input\"\n    ways = 0\n    coins = [a, b, c]\n    for i in range(len(coins)):\n        for j in range(i + 1, len(coins)):\n            for k in range(j + 1, len(coins)):\n                if coins[i] + coins[j] + coins[k] == x:\n                    ways += 1\n    return str(ways)\n\ninput_str = \"2\\n2\\n2\\n100\\n\"\nprint(solution(input_str))  # Output: 2",
        "test": "assert solution(\"5\\n10\\n20\\n100\") == \"7\\n\"",
        "num_ids": 959,
        "indeed": false
    },
    {
        "number": 4577,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if c >= a and c <= b:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(solution(\"1 3 2\"))  # Output: Yes\nprint(solution(\"3 2 1\"))  # Output: No",
        "test": "assert solution(\"1 3 2\") == \"Yes\"",
        "num_ids": 340,
        "indeed": true
    },
    {
        "number": 4578,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    m = list(map(int, stdin.split()))\n\n    d = sum(m)\n    result = 0\n\n    while d >= x:\n        m.sort(reverse=True)\n        count = min(sum(m) // x, n)\n        result += count\n        for i in range(count):\n            m.pop()\n        d -= count * x\n\n    return str(result)",
        "test": "assert solution(input()) == \"9\"",
        "num_ids": 919,
        "indeed": false
    },
    {
        "number": 4579,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    items = stdin.split()[1:]\n    count = {}\n    for item in items:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n    return str(len(count))\n\nsample_input = '''3\napple\norange\napple\n'''\n\nprint(solution(sample_input))  # Output: 2",
        "test": "assert solution(\"3\\napple\\orange\\napple\") == \"2\"",
        "num_ids": 555,
        "indeed": true
    },
    {
        "number": 4580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    colors = {'gray': 0, 'brown': 0, 'green': 0, 'cyan': 0, 'blue': 0, 'yellow': 0, 'orange': 0,'red': 0}\n    \n    for rating in a:\n        if 1 <= rating <= 399:\n            colors['gray'] += 1\n        elif 400 <= rating <= 799:\n            colors['brown'] += 1\n        elif 800 <= rating <= 1199:\n            colors['green'] += 1\n        elif 1200 <= rating <= 1599:\n            colors['cyan'] += 1\n        elif 1600 <= rating <= 1999:\n            colors['blue'] += 1\n        elif 2000 <= rating <= 2399:\n            colors['yellow'] += 1\n        elif 2400 <= rating <= 2799:\n            colors['orange'] += 1\n        elif 2800 <= rating <= 3199:\n            colors['red'] += 1\n        else:\n            colors['gray'] += 1  # for users with rating 3200 or higher\n            \n    min_colors = min(colors.values())\n    max_colors = max(colors.values())\n    \n    return f\"{min_colors} {max_colors}\"\n\ndef",
        "test": "assert solution(\"4\\n2100 2500 2700 2700\") == \"2 2\"",
        "num_ids": 1610,
        "indeed": false
    },
    {
        "number": 4581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    toppings = {'x': 0, 'o': 1}\n    price = 700\n    for char in stdin:\n        if char in toppings:\n            price += 100 * toppings[char]\n    return str(price)\n\ndef",
        "test": "assert solution('xxx') == '700'",
        "num_ids": 636,
        "indeed": false
    },
    {
        "number": 4582,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    a, b = input_list\n    if a == \"H\" and b == \"H\":\n        return \"H\"\n    else:\n        return \"D\"",
        "test": "assert solution('H H') == 'H'",
        "num_ids": 392,
        "indeed": false
    },
    {
        "number": 4583,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    formula = f\"{a + b + c + d}={7}\"\n    return formula",
        "test": "assert solution(\"1222\") == \"1+2+2+2=7\"",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 4584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n\n    # Build a graph\n    graph = [[] for _ in range(N + 1)]\n    for i, ai in enumerate(A):\n        graph[ai].append(i)\n\n    # BFS to find the number of immediate subordinates\n    def bfs(i):\n        queue = deque([i])\n        visited = set()\n        visited.add(i)\n        count = 0\n        while queue:\n            size = len(queue)\n            for _ in range(size):\n                current = queue.popleft()\n                for next in graph[current]:\n                    if next not in visited:\n                        visited.add(next)\n                        queue.append(next)\n                        count += 1\n        return count\n\n    return '\\n'.join(map(str, [bfs(i) for i in range(1, N + 1)]))",
        "test": "assert solution(\"5\\n1 1 2 2\\n2 1 3 3\\n3 1 4 4\\n4 1 5 5\\n5 1 6 6\") == \"2\\n2\\n0\\n0\\n0\"",
        "num_ids": 1094,
        "indeed": false
    },
    {
        "number": 4585,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    time = 1\n    left_pos = 0\n    right_pos = X\n\n    while left_pos < right_pos:\n        left_pos += time\n        right_pos -= time\n        time += 1\n\n    return str(time)",
        "test": "assert solution(\"6\") == \"3\"",
        "num_ids": 592,
        "indeed": false
    },
    {
        "number": 4586,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if not 1000 <= n <= 9999:\n        return \"No\"\n\n    count = 1\n    for i in range(len(str(n))):\n        if str(n)[i] == str(n)[i + 1]:\n            count += 1\n        else:\n            break\n\n    if count >= 3:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert solution('1118') == 'Yes'",
        "num_ids": 589,
        "indeed": false
    },
    {
        "number": 4587,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, *parts = map(int, stdin.split())\n    parts.sort()\n    result = 0\n\n    for i in range(1, n):\n        if parts[i] > parts[i - 1] and parts[i - 1] > parts[i - 2]:\n            result += 1\n\n    return str(result)\n",
        "test": "assert solution(input()) == \"3\"",
        "num_ids": 1076,
        "indeed": false
    },
    {
        "number": 4588,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    x, y = int(x, 16), int(y, 16)\n    if x < y:\n        return \"<\"\n    elif x > y:\n        return \">\"\n    else:\n        return \"=\"",
        "test": "assert solution(\"A B\") == \"<\"",
        "num_ids": 380,
        "indeed": true
    },
    {
        "number": 4589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    grid = [list(line.strip()) for line in stdin.splitlines()[1:]]\n\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j] == '.':\n                n_bomb = 0\n                for dx in range(-1, 2):\n                    for dy in range(-1, 2):\n                        if 0 <= i+dx < h and 0 <= j+dy < w and grid[i+dx][j+dy] == '#':\n                            n_bomb += 1\n                grid[i][j] = str(n_bomb)\n\n    output = '\\n'.join(''.join(grid_row) for grid_row in grid)\n    return output",
        "test": "assert solution('3 5\\n.....\\n.#.#.\\n.....') == '11211\\n1#2#1\\n11211'",
        "num_ids": 1372,
        "indeed": false
    },
    {
        "number": 4590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    def choose_desk(i: int) -> int:\n        if i % 2 == 0:\n            return 0\n        return 1\n\n    def read_top_book(desk: int) -> int:\n        if desk == 0:\n            return a.pop(0)\n        return b.pop(0)\n\n    def remove_book(desk: int, book: int) -> None:\n        if desk == 0:\n            a.append(book)\n        else:\n            b.append(book)\n\n    def time_to_read(desk: int) -> int:\n        if desk == 0:\n            return a[0]\n        return b[0]\n\n    def time_spent(desk: int) -> int:\n        if desk == 0:\n            return k - sum(a)\n        return k - sum(b)\n\n    desk_0_books = choose_desk(0)\n    desk_1_books = choose_desk(1)\n\n    while desk_0_books > 0 or desk_1_books > 0:\n        if time_spent(0) > time_spent(1):\n            desk_0_books -= 1\n            remove_book(0, read_top_book(0))\n        else:\n            desk_1_books -= 1\n            remove_book(1, read_top_book(1))\n\n    return str(max(a + b))\n",
        "test": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"",
        "num_ids": 1516,
        "indeed": false
    },
    {
        "number": 4591,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = map(int, stdin.split())\n    \n    def helper(a, b):\n        return max(0, A - (a * b))\n    \n    def is_valid(a, b):\n        return 0 <= a <= 2 * b <= 10000\n    \n    if A + B + C < 1500:\n        return \"Not enough money\"\n    \n    if not (1 <= X <= 10**5) or not (1 <= Y <= 10**5):\n        return \"Invalid input\"\n    \n    max_a, max_b = 2 * Y, 2 * A - 2 * Y\n    min_a, min_b = 0, X * A + Y * B + 2 * (X - 1) * Y\n    \n    a = b = 0\n    a_cost = b_cost = 0\n    \n    while a <= max_a and b <= max_b:\n        a_cost = helper(a, b)\n        b_cost = helper(b, a)\n        \n        if a_cost <= C and b_cost <= C:\n            a_total = X * (a + b) + Y * (2 * a + b)\n            if is_valid(a, b):\n                return a_total\n        a += 1\n        b += 1\n    \n    if a > max_a and b > max_b:\n        return \"Not enough money\"\n    \n    return \"Impossible\"",
        "test": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"",
        "num_ids": 981,
        "indeed": false
    },
    {
        "number": 4592,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            res += 1\n            res %= 10**9 + 7\n    return str(res)",
        "test": "assert solution(\"1\") == \"1\", \"Test Case Failed\"",
        "num_ids": 718,
        "indeed": false
    },
    {
        "number": 4593,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    powers = []\n    current_power = 1\n    \n    while current_power <= x:\n        if current_power ** 2 <= x:\n            powers.append(current_power ** 2)\n        current_power += 1\n    \n    return str(max(powers))",
        "test": "assert solution(\"10\") == \"9\"",
        "num_ids": 493,
        "indeed": true
    },
    {
        "number": 4594,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    d = list(map(int, stdin.split()[1:]))\n    result = 1\n    for i in range(1, len(d)):\n        if d[i] < d[i - 1]:\n            result += 1\n            if result == N:\n                return str(result)\n    return str(result)\n",
        "test": "assert solution(\"4\\n10\\n8\\n8\\n6\\n\") == \"3\"",
        "num_ids": 503,
        "indeed": true
    },
    {
        "number": 4595,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    max_length = 0\n    start = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            max_length = max(max_length, j - i + 1)\n            if s[i] == 'A' and s[j] == 'Z':\n                start = i\n                break\n\n    return str(max_length)",
        "test": "assert solution('QWERTYASDFZXCV') == '5'",
        "num_ids": 612,
        "indeed": false
    },
    {
        "number": 4596,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    nums = list(map(int, stdin.split()[1:]))\n    \n    count = 0\n    for i in range(n):\n        if nums[i] % 2 == 0:\n            nums[i] //= 2\n            count += 1\n            if count == 2:\n                break\n    \n    return str(count)",
        "test": "assert solution(\"3\\n8 12 40\") == \"2\"",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 4597,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    power = 1\n    result = 0\n    MOD = 10**9 + 7\n\n    for _ in range(N):\n        power *= (N + 1) // 2\n        result = (result + power) % MOD\n\n    return str(result)",
        "test": "assert solution(\"3\") == \"6\", \"Sample input/output not met\"",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 4598,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    candies = 0\n    for i in range(N):\n        candies += i + 1\n    return str(candies)",
        "test": "assert solution(\"3\") == \"6\"",
        "num_ids": 226,
        "indeed": true
    },
    {
        "number": 4599,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N, *cards = map(int, stdin.split())\n    alice_cards = cards[:N//2]\n    bob_cards = cards[N//2:]\n\n    alice_scores = []\n    bob_scores = []\n\n    for card in alice_cards:\n        alice_scores.append(card)\n    for card in bob_cards:\n        bob_scores.append(card)\n\n    alice_scores.sort(reverse=True)\n    bob_scores.sort(reverse=True)\n\n    alice_score = sum(alice_scores)\n    bob_score = sum(bob_scores)\n\n    return str(alice_score - bob_score)",
        "test": "assert solution(\"2\\n3 1\") == \"2\"",
        "num_ids": 683,
        "indeed": false
    },
    {
        "number": 4600,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    def read_input(stdin: str) -> List[Tuple[int, str]]:\n        input_list = []\n        input_list.append(stdin.split())\n        for _ in range(int(input_list[-1][0]) - 1):\n            input_list.append(stdin.split())\n        return input_list\n\n    def process_submission(submission_list: List[str]) -> Tuple[int, int]:\n        correct_answer = 0\n        penalty = 0\n        for i, submission in enumerate(submission_list):\n            if submission[1] == \"AC\":\n                correct_answer += 1\n            elif submission[1] == \"WA\":\n                penalty += min(0, correct_answer)\n        return correct_answer, penalty\n\n    def main(input_list: List[str]) -> str:\n        N, M = map(int, input_list[0])\n        problem_list = [tuple(map(int, input_list[i + 1])) for i in range(N)]\n        submission_list = [tuple(map(str, input_list[i + N + 1])) for i in range(M)]\n        correct_answer, penalty = process_submission(submission_list)\n        print(correct_answer, penalty)\n        return \" \".join(map(str, [correct_answer, penalty]))\n\n    input_list = read_input(stdin)\n    main(input_list)\n    return \" \"",
        "test": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\\n\") == \"2 2\"",
        "num_ids": 1114,
        "indeed": false
    },
    {
        "number": 4601,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    H = list(map(int, stdin.split()))\n    min_time = float('inf')\n    \n    def attack(i: int, time: int) -> None:\n        if H[i] <= 0:\n            return\n        H[i] -= 1\n        min_time = min(min_time, time + 1)\n        attack(i, time + 1)\n    \n    for i in range(N):\n        if H[i] > 0:\n            attack(i, 1)\n    \n    for i in range(N):\n        if H[i] > 0:\n            for j in range(K):\n                attack(i, 1)\n    \n    return str(min_time)",
        "test": "assert solution(\"1 1\\n2 1 2\") == \"2\"",
        "num_ids": 1036,
        "indeed": false
    },
    {
        "number": 4602,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n\n    # Sort the x values\n    x.sort()\n\n    # Calculate the total distance covered\n    total_distance = 0\n    for i in range(N):\n        # Calculate the distance to the left and the distance to the right\n        left_distance = abs(x[i] - K)\n        right_distance = abs(K - x[i])\n\n        # Calculate the total distance\n        total_distance += min(left_distance, right_distance)\n\n    return str(total_distance)",
        "test": "assert solution(\"10 1\\n2 3 5 7 9 11 13 15 17\") == \"4\\n20\\n24\"",
        "num_ids": 1123,
        "indeed": false
    },
    {
        "number": 4603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    train_fare, bus_fare = map(int, stdin.split())\n    if train_fare <= bus_fare:\n        train_choice = \"unlimited\"\n        bus_choice = \"ordinary\"\n    else:\n        train_choice = \"ordinary\"\n        bus_choice = \"unlimited\"\n\n    train_price = train_fare * (1 if train_choice == \"unlimited\" else 0.5)\n    bus_price = bus_fare * (1 if bus_choice == \"unlimited\" else 0.5)\n\n    return f\"{train_price + bus_price}\"",
        "test": "assert solution('600\\n300\\n220\\n420') == '520\\n'",
        "num_ids": 717,
        "indeed": false
    },
    {
        "number": 4604,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n\n    MOD = 10**9 + 7\n\n    def comb(n, r):\n        return (n * MOD) % MOD // (r * MOD) % MOD\n\n    def kadane_max_subarray(arr):\n        max_so_far = arr[0]\n        max_ending_here = arr[0]\n\n        for i in range(1, len(arr)):\n            max_ending_here = max(max_ending_here + arr[i], arr[i])\n            max_so_far = max(max_so_far, max_ending_here)\n\n        return max_so_far\n\n    # Calculate the maximum sum subarray for each element\n    max_sum_subarrays = [0] * N\n    max_sum_subarrays[0] = A[0]\n    for i in range(1, N):\n        max_sum_subarrays[i] = max(max_sum_subarrays[i - 1] + A[i], A[i])\n\n    # Calculate the number of combinations that include each element\n    combinations = [comb(N - i - 1, i) for i in range(1, N)]\n\n    # Calculate the sum of the maximum sum subarray\n    max_sum = 0\n    for i in range(N):\n        max_sum = (max_sum + max_sum_subarrays[i]) % MOD\n\n    # Calculate the number of combinations that can sum up to the maximum sum\n    num_combinations = 1\n    for i in range(1, N):\n        num_combinations = (num_combinations * combinations[i - 1]) % MOD\n\n    # Calculate the number of possible orders\n    num_orders = (num_combinations * kadane_max_subarray(max_sum_subarrays)) % MOD\n\n    return str(num_orders)",
        "test": "assert solution(\"2\\n1 2\") == \"0\"",
        "num_ids": 1484,
        "indeed": false
    },
    {
        "number": 4605,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    total_sum = 0\n    for i in range(1, n+1):\n        if sum(int(digit) for digit in str(i)) >= a and sum(int(digit) for digit in str(i)) <= b:\n            total_sum += i\n    return str(total_sum)",
        "test": "assert solution(\"20 2 5\") == \"84\"",
        "num_ids": 556,
        "indeed": true
    },
    {
        "number": 4606,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if 100 <= N <= 999:\n        return f\"ABC{N}\"\n    else:\n        return \"Invalid input\"",
        "test": "assert solution(\"100\") == \"ABC100\"",
        "num_ids": 270,
        "indeed": true
    },
    {
        "number": 4607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    days = []\n    for i in range(1, 32):\n        if i % 7 == 0 and i!= 1:\n            days.append(i - 1)\n    days = sorted(set(days), reverse=True)\n    count = 0\n    for i in days:\n        if a == b:\n            if i == a:\n                count += 1\n        elif a == i or b == i:\n            count += 1\n    return str(count)",
        "test": "assert solution(\"5 5\") == \"5\"",
        "num_ids": 799,
        "indeed": false
    },
    {
        "number": 4608,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    as_str = stdin.split()[1:]\n    as_list = [int(a) for a in as_str]\n    a_2 = as_list[1]\n    a_1 = as_list[2]\n    if a_1 == a_2:\n        print(-1)\n        return \"\"\n\n    button_count = 0\n    button_to_lighten_up = 1\n    while button_to_lighten_up!= a_2:\n        button_count += 1\n        button_to_lighten_up = (button_to_lighten_up + 1) % n + 1\n\n    print(button_count)\n    return \"\"",
        "test": "assert solution(\"5\\n5\\n1\\n2\\n3\\n4\\n\") == \"-1\\nIt is impossible to lighten up Button 2.\"",
        "num_ids": 1235,
        "indeed": false
    },
    {
        "number": 4609,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n    \n    # Initialize the sheet with 0s\n    sheet = [0] * 10**9\n    \n    # Erase numbers from the sheet\n    for num in A:\n        if sheet[num - 1] == 1:\n            sheet[num - 1] = 0\n    \n    # Count the number of written numbers on the sheet\n    count = sum(sheet)\n    \n    return str(count)",
        "test": "assert solution(\"10\\n2147483647\\n2147483647\\n-2147483648\") == \"0\"",
        "num_ids": 685,
        "indeed": false
    },
    {
        "number": 4610,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n\n    # Sort the A list in increasing order\n    A.sort()\n\n    # Initialize the count of unique integers\n    count = 0\n\n    # Initialize the minimum balls required\n    min_balls = 0\n\n    # Traverse the A list\n    for i in range(N):\n        # Find the index of the element in the sorted A list\n        index = bisect_left(A, A[i])\n\n        # Check if the element exists in the sorted A list\n        if index < N and A[index] == A[i]:\n            # Increment the count of unique integers\n            count += 1\n\n            # Update the minimum balls required\n            min_balls = max(min_balls, count)\n\n            # If the count of unique integers exceeds K, decrement the count\n            if count > K:\n                count -= 1\n\n        # If the element does not exist in the sorted A list, decrement the count\n        else:\n            count -= 1\n\n    # Return the minimum balls required\n    return str(min_balls)\n\n\ndef",
        "test": "assert solution(\"5 2\\n1 1 2 2 5\\n\") == \"1\"",
        "num_ids": 923,
        "indeed": false
    },
    {
        "number": 4611,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    plan = []\n    for i in range(N):\n        t, x, y = map(int, stdin.split()[1:4])\n        plan.append((t, x, y))\n    plan.sort(key=lambda x: x[0])\n\n    x, y = 0, 0\n    for t, x_i, y_i in plan:\n        if t <= x_i:\n            x = min(x_i, x + 1)\n        else:\n            x, y = x_i, y_i\n        if t <= y_i:\n            y = min(y_i, y + 1)\n        else:\n            return \"Yes\"\n\n    return \"No\"",
        "test": "assert solution(\"1\\n3 1 2\\n6 1 1\") == \"Yes\"",
        "num_ids": 1020,
        "indeed": false
    },
    {
        "number": 4612,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    x = (a + b) / 2\n    return str(round(x))",
        "test": "assert solution(\"1 3\") == \"2\"",
        "num_ids": 321,
        "indeed": true
    },
    {
        "number": 4613,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        if a < b:\n            edges.append((a, b))\n        else:\n            edges.append((b, a))\n\n    connected = [False] * (n + 1)\n    bridge_count = 0\n\n    def dfs(vertex):\n        if not connected[vertex]:\n            connected[vertex] = True\n            for neighbor in edges[vertex - 1]:\n                dfs(neighbor)\n            if connected[vertex] and not connected[vertex - 1]:\n                bridge_count += 1\n\n    for vertex in range(1, n + 1):\n        if not connected[vertex]:\n            dfs(vertex)\n\n    return str(bridge_count)",
        "test": "assert solution(\"\"\"",
        "num_ids": 998,
        "indeed": false
    },
    {
        "number": 4614,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    A, B, C = map(int, stdin.split())\n\n    # Check if all integers are within range\n    if -100 <= A <= 100 and -100 <= B <= 100 and -100 <= C <= 100:\n        # Check if A and C are the same\n        if A == C:\n            # Check if B is different from the rest\n            if B!= A and B!= C:\n                return str(B)\n            else:\n                return \"One of them is the same as the rest.\"\n        else:\n            # Check if A is different from the rest\n            if A!= B and A!= C:\n                return str(A)\n            else:\n                return \"One of them is the same as the rest.\"\n    else:\n        return \"Error: Integer out of range.\"",
        "test": "assert solution(\"5 7 5\") == \"7\"",
        "num_ids": 555,
        "indeed": false
    },
    {
        "number": 4615,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    A, B, C, D, E, F = map(int, inputs)\n\n    def is_valid(a: int, b: int, c: int, d: int) -> bool:\n        return a + b <= F and c + d <= F and a * b + c * d == E * 100\n\n    def min_density(a: int, b: int, c: int, d: int) -> int:\n        return 100 * b / (a + b)\n\n    def max_density(a: int, b: int, c: int, d: int) -> int:\n        if a + b == 0:\n            return 0\n        return 100 * b / (a + b)\n\n    def max_sugar_water(a: int, b: int, c: int, d: int) -> int:\n        return 100 * b / (a + b)\n\n    def min_sugar_water(a: int, b: int, c: int, d: int) -> int:\n        return 0\n\n    candidates = []\n    if is_valid(A, B, C, D):\n        candidates.append((min_density(A, B, C, D), max_sugar_water(A, B, C, D), A, B, C, D))\n    if is_valid(B, A, C, D):\n        candidates.append((min_density(B, A, C, D), max_sugar_water(B, A, C, D), B, A, C, D))\n    if is_valid(C, B, A, D):\n        candidates.append((min_density(C, B, A, D), max_sugar_water(C, B, A, D), C, B, A, D))\n    if is_valid(D, B, C, A):\n        candidates.append((min_density(D, B, C, A), max_sugar_water(D, B, C, A), D, B, C, A))\n\n    if not candidates:\n        return \"0 0\"\n\n    candidates.sort()\n    if candidates[0][0] == candidates[1][0]:\n        return f\"{candidates[0][1]} {candidates[0][2] + candidates[0][3]}\"\n    elif candidates[0][0] == min_density(A, B, C, D):\n        return f\"{candidates[0][1]} {candidates[0][2] + candidates[0][3]}\"\n    else:\n        return f\"{candidates[1][1]} {candidates[1][2] + candidates[1][3]}\"",
        "test": "assert solution(\"1 2 3 4 5 6\") == \"0 0\", \"Constraints test case failed\"",
        "num_ids": 1768,
        "indeed": false
    },
    {
        "number": 4616,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) < 3:\n        return \"Not possible\"\n    i = 0\n    n = 2\n    while i < len(s) - 2:\n        if s[i:i + 3] == \"int\":\n            n += 2\n            i += 3\n        else:\n            n += 1\n            i += 1\n    return s[:n]\n\nwith open(\"input.txt\", \"r\") as infile:\n    input_data = infile.read().strip()\n\noutput = solution(input_data)\nprint(output)",
        "test": "assert solution(\"abc\") == \"abc\"",
        "num_ids": 606,
        "indeed": false
    },
    {
        "number": 4617,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    rows = 2\n    cols = 3\n    grid = [list(row) for row in stdin.split('\\n')[:rows]]\n    for i in range(rows):\n        for j in range(cols):\n            grid[i][j] = grid[i][j].lower()\n    for i in range(rows):\n        grid[i].reverse()\n    for i in range(cols):\n        grid.reverse()\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j]!= grid[rows-i-1][cols-j-1]:\n                return 'NO'\n    return 'YES'",
        "test": "assert solution(\"abc\\ndef\\nghi\\n\") == \"NO\"",
        "num_ids": 833,
        "indeed": true
    },
    {
        "number": 4618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.split()\n    s = list(s)\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.append(''.join(s[i:j]))\n\n    substrings.sort()\n    return substrings[k - 1]\n\ndef",
        "test": "assert solution(\"ababc\") == \"bab\"",
        "num_ids": 776,
        "indeed": false
    },
    {
        "number": 4619,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    W, H, N = map(int, stdin.split())\n    points = list(map(lambda x: list(map(int, x.split())), stdin.split()))\n\n    area = 0\n    for point in points:\n        x, y, a = point\n        if a == 1:\n            area += W - x\n        elif a == 2:\n            area += x\n        elif a == 3:\n            area += H - y\n        elif a == 4:\n            area += y\n\n    return str(area)",
        "test": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\\n\") == \"9\"",
        "num_ids": 960,
        "indeed": false
    },
    {
        "number": 4620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    times = [int(x) for x in stdin.split()[1:]]\n    times.sort(reverse=True)\n    \n    time = 0\n    result = []\n    \n    for i in range(1, n):\n        while time + times[i] <= times[0]:\n            time += times[i] + times[0]\n            result.append(time)\n        time += times[i]\n    \n    return \"\\n\".join(str(x) for x in result)",
        "test": "assert solution(open(\"input.txt\").read()) == \"12\\n11\\n0\\n\"",
        "num_ids": 1106,
        "indeed": false
    },
    {
        "number": 4621,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.split())\n    result = []\n    for i in range(rows + 1):\n        row = []\n        for j in range(cols):\n            if i == 0:\n                row.append('*')\n            elif i == rows + 1:\n                row.append('*')\n            else:\n                row.append(stdin[i - 1][j])\n        result.append(''.join(row))\n    return '\\n'.join(result)",
        "test": "assert solution(\"2 2\\n*.\\n.*\\n\") == \".*\\n.*\\n.*\\n.*\\n\"",
        "num_ids": 1805,
        "indeed": false
    },
    {
        "number": 4622,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:n+1]))\n\n    if len(set(a)) == len(a):\n        return 'YES'\n    else:\n        return 'NO'",
        "test": "assert solution(\"5\\n2 6 1 4 5\") == \"YES\"",
        "num_ids": 498,
        "indeed": true
    },
    {
        "number": 4623,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    for _ in range(t):\n        n = int(stdin.split('\\n')[1])\n        weights = list(map(int, stdin.split('\\n')[2].split()))\n        max_teams = 1\n        curr_sum = weights[0] + weights[1]\n        for i in range(2, n):\n            if curr_sum == weights[i]:\n                curr_sum = weights[i] + weights[i+1]\n                max_teams += 1\n            else:\n                curr_sum = weights[i]\n        print(max_teams)",
        "test": "assert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\") == \"2\\n3\\n4\\n1\\n2\"",
        "num_ids": 1496,
        "indeed": false
    },
    {
        "number": 4624,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        n, x = map(int, stdin.split()[1:])\n        if n <= 2 * x:\n            print(1)\n        else:\n            floor_count = 1\n            while n > 2 * x:\n                n -= 2 * x\n                floor_count += 1\n            print(floor_count)\n\ndef",
        "test": "assert solution(\"5 3\\n2 4\\n7 5\\n10 3\\n15 3\\n20 2\") == \"3\\n1\\n4\\n7\\n10\\n15\\n20\"",
        "num_ids": 661,
        "indeed": false
    },
    {
        "number": 4625,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = stdin.split()[2]\n    p = map(int, stdin.split()[3].split())\n\n    # The length of the input string should be equal to the number of tries\n    if len(s)!= m:\n        return \"0\" * 26\n\n    # Calculate the number of tries for each letter\n    tries = {c: p.count(c + 1) for c in s}\n\n    # Calculate the number of pressed buttons for each letter\n    buttons = {c: 0 for c in s}\n    for i in range(len(p)):\n        buttons[s[i]] += 1\n\n    # Calculate the final answer\n    result = []\n    for i in range(26):\n        result.append(tries.get(chr(ord('a') + i), 0) + buttons.get(chr(ord('a') + i), 0))\n\n    return \" \".join(map(str, result))\n\n\ndef",
        "test": "assert solution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ",
        "num_ids": 3035,
        "indeed": false
    },
    {
        "number": 4626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.strip().split())\n    test_cases = []\n\n    for _ in range(q):\n        a, b, c = map(int, stdin.strip().split())\n        test_cases.append((a, b, c))\n\n    def dist(x: int) -> int:\n        return x * x\n\n    def min_dist(a: int, b: int, c: int, dists: list) -> int:\n        return min(dists)\n\n    for i, (a, b, c) in enumerate(test_cases):\n        dists = [dist(a - b), dist(a - c), dist(b - c)]\n        min_dist_temp = min_dist(a, b, c, dists)\n        if min_dist_temp!= min_dist(a, b, c, dists):\n            min_dist_temp = min_dist(a, b, c, dists) - 1\n\n        test_cases[i] = (a, b, c, min_dist_temp)\n\n    for i, (a, b, c, dist) in enumerate(test_cases):\n        print(i + 1, end=\" \")\n        print(dist)\n\n    return \"\"\n",
        "test": "assert solution(\"\"\"3 3 4",
        "num_ids": 1652,
        "indeed": false
    },
    {
        "number": 4627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split('\\n')[0])\n    for i in range(test_cases):\n        n = int(stdin.split('\\n')[i+1])\n        a = list(map(int, stdin.split('\\n')[i+2].split()))\n        count = 0\n        for j in range(n):\n            for k in range(j+1, n):\n                if (a[j] - a[k]) % 2 == 0:\n                    count += 1\n                    break\n        if count == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
        "test": "assert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8\") == \"YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO\"",
        "num_ids": 1164,
        "indeed": false
    },
    {
        "number": 4628,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m, k = map(int, stdin.split())\n    roads = [list(map(int, stdin.split())) for _ in range(m)]\n    routes = [list(map(int, stdin.split())) for _ in range(k)]\n\n    # Calculate distances\n    distances = [{} for _ in range(n + 1)]\n    for x, y, w in roads:\n        distances[x][y] = distances[y][x] = w\n\n    for a, b in routes:\n        for x in range(1, n + 1):\n            for y in range(1, n + 1):\n                if x!= a and y!= a:\n                    distances[x][y] = min(distances[x][y], distances[a][b] + distances[b][x])\n                if x!= b and y!= b:\n                    distances[x][y] = min(distances[x][y], distances[a][b] + distances[b][x])\n\n    # Calculate minimum total cost\n    min_total_cost = float('inf')\n    for a, b in routes:\n        min_total_cost = min(min_total_cost, distances[a][b] + distances[b][a])\n\n    return str(min_total_cost)\n",
        "test": "assert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n\") == \"13\"",
        "num_ids": 2167,
        "indeed": false
    },
    {
        "number": 4629,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.split()[0])\n    result = []\n\n    for i in range(queries):\n        n = int(stdin.split()[1])\n        m = 1\n        while m <= n:\n            if sum(int(x) ** 3 for x in str(m)) == m:\n                result.append(m)\n            m += 1\n\n    return \" \".join(map(str, result))\n",
        "test": "assert solution(",
        "num_ids": 789,
        "indeed": false
    },
    {
        "number": 4630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    queries = list(map(int, stdin.split()))\n\n    def solve_query(query: list) -> str:\n        n, p = query\n        books = [0] * n\n        for i in range(1, n + 1):\n            books[p[i - 1] - 1] += 1\n        result = [0] * n\n        for i in range(n - 1, -1, -1):\n            if books[i] > 0:\n                result[i] = i + 1\n                books[i] -= 1\n        return \" \".join(map(str, result))\n\n    return \"\\n\".join(solve_query(query) for query in queries)\n",
        "test": "assert solution(open(\"input.txt\").read()) == open(\"output.txt\").read()",
        "num_ids": 933,
        "indeed": false
    },
    {
        "number": 4631,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0].split())\n    trees = list(map(int, stdin.split()[1].split()))\n    trees.sort()\n    \n    distances = []\n    for i, tree in enumerate(trees):\n        distances.append(sum(abs(tree - x) for x in trees[:i]))\n    \n    distances.append(sum(abs(x - tree) for x in trees[-1:]))\n    \n    res = min(distances)\n    \n    return f\"{res}\\n{' '.join(str(x) for x in sorted(set(trees + distances)))}\"\n\nprint(solution(input()))",
        "test": "assert solution(\"\"\"",
        "num_ids": 1098,
        "indeed": false
    },
    {
        "number": 4632,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    packages = [(int(x), int(y)) for x, y in stdin.split()[1:1+n]]\n    visited = set()\n    visited.add((0, 0))\n    queue = [(0, 0, 'R')]\n    result = []\n    while queue:\n        x, y, direction = queue.pop(0)\n        if x == n-1 and y == 0:\n            result = [direction]\n            break\n        if (x, y) in visited:\n            continue\n        visited.add((x, y))\n        if direction == 'R':\n            if x < n-1:\n                queue.append((x+1, y, 'R'))\n        elif direction == 'U':\n            if y < n-1:\n                queue.append((x, y+1, 'U'))\n    if result:\n        return 'YES'\n    else:\n        return 'NO'",
        "test": "assert solution(\"3\\n5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\\n2\\n1 0\\n0 1\\n1\\n4 3\") == \"NO\"",
        "num_ids": 1517,
        "indeed": false
    },
    {
        "number": 4633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n\n    def moves(n, s):\n        if digit_sum(n) <= s:\n            return 0\n        total_moves = 0\n        while digit_sum(n) > s:\n            n += 1\n            total_moves += 1\n        return total_moves\n\n    n, s = map(int, stdin.split())\n    print(moves(n, s))",
        "test": "assert solution('''5",
        "num_ids": 769,
        "indeed": false
    },
    {
        "number": 4634,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n\n    for _ in range(t):\n        n, *a = list(map(int, stdin.split('\\n')[1].split()))\n\n        l = 1\n        r = 0\n\n        while r < n - 1:\n            if a[r] == 1:\n                r += 1\n            else:\n                if a[l] == 1:\n                    l += 1\n                else:\n                    l, r = l + 1, r + 1\n\n        print(r - l + 1)",
        "test": "assert solution(",
        "num_ids": 1268,
        "indeed": false
    },
    {
        "number": 4635,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    queries = [tuple(map(int, line.strip().split())) for line in stdin.split('\\n')[1:]]\n    for query in queries:\n        n, k = query\n        s = [chr(ord('a') + i) for i in range(k)]\n        s = ''.join(s)\n        if len(set(s)) == len(s):\n            print(s)\n        else:\n            print(''.join(sorted(set(s))))",
        "test": "assert solution(\"3 1\\n4 1\\n5 1\") == \"aaaaaaa\"",
        "num_ids": 1061,
        "indeed": false
    },
    {
        "number": 4636,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    for _ in range(t):\n        n = int(stdin.split('\\n')[1].split()[0])\n        a = list(map(int, stdin.split('\\n')[1].split()[1:]))\n        moves = 0\n        alice_size = 0\n        bob_size = 0\n        while True:\n            alice_move = alice_size + 1\n            bob_move = bob_size + 1\n            if alice_move <= bob_move:\n                alice_size += 1\n                moves += 1\n            else:\n                bob_size += 1\n                moves += 1\n            if alice_size > sum(a) or bob_size > sum(a):\n                break\n        a_sum = sum(a)\n        b_sum = bob_size + alice_size - a_sum\n        print(moves, a_sum, b_sum)",
        "test": "assert solution(\"2\\n10\\n1 2 3 4 5 6 7 8 9 10\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"6 45 46\\n1 1000 0\\n2 1 2\\n6 23 21\\n2 2 1\\n3 4 2\\n4 4 3\"",
        "num_ids": 1932,
        "indeed": false
    },
    {
        "number": 4637,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    t = int(lines.pop(0))\n\n    for _ in range(t):\n        n, k = map(int, lines.pop(0).split())\n        a = list(map(int, lines.pop(0).split()))\n        b = list(map(int, lines.pop(0).split()))\n\n        a_total = sum(a)\n        b_total = sum(b)\n\n        def swap_helper(i: int, j: int, a: List[int], b: List[int], a_total: int, b_total: int) -> int:\n            if i == j:\n                return max(0, a_total - sum(a) + b_total - sum(b))\n\n            a_1, a_2, *a_rest = a\n            b_1, b_2, *b_rest = b\n\n            if i == 1 and j == 1:\n                a_1, a_2 = a_2, a_1\n                b_1, b_2 = b_2, b_1\n\n            if i > 1 and j == 1:\n                a_1, a_2, a_3, *a_rest = a\n\n            if i == 1 and j > 1:\n                b_1, b_2, b_3, *b_rest = b\n\n            if i > 1 and j > 1:\n                a_1, a_2, a_3, a_4, *a_rest = a\n\n            if i == 1:\n                a_1, a_2, a_3, a_4, a_5, *a_rest = a\n\n            if i > 1:\n                b_1, b_2, b_3, b_4, b_5, *b_rest = b\n\n            if i == 2 and j == 2:\n                a_1, a_2 = a_2, a_1\n                b_1, b_2 = b_2, b_1\n\n            if i > 2 and j == 2:\n                a_1, a_2, a_3, *a_rest = a\n\n            if i == 2 and j > 2:\n                b_1, b_2, b_3, *b_rest = b\n\n            if i > 2 and j > 2:\n                a_1, a_2, a_3, a_4, *a_rest = a\n\n            if i == 2:\n                a_1, a_2, a_3, a_4, a_5, *a_rest = a\n\n            if i > 2:\n                b_1, b_2, b_3, b_4, b_5, *b_rest = b\n\n            a_total -= a_1 + a_2 + sum(a_rest)\n            b_total -= b_1 + b_2 + sum(b_rest)\n\n            return max(0, a_total - swap_helper(i + 1, j, a[2:], b, a_total, b_total))\n\n        print(swap_helper(1, 1, a, b, a_total, b_total))",
        "test": "assert solution(\"2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\\n4 4\\n1 2 2 1\\n4 4 5 4\") == \"6\\n27\\n39\\n11\\n17\"",
        "num_ids": 2683,
        "indeed": false
    },
    {
        "number": 4638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    stair_time = [0] * (n - 1)\n    elevator_time = [0] * (n - 1)\n    for i in range(1, n - 1):\n        stair_time[i - 1] = sum(a[:i])\n        elevator_time[i - 1] = c + sum(b[:i])\n\n    result = [0] * n\n    for i in range(n - 1, 0, -1):\n        if stair_time[i - 1] < elevator_time[i - 1]:\n            result[i - 1] = stair_time[i - 1]\n        else:\n            result[i - 1] = elevator_time[i - 1]\n\n    return''.join(map(str, result))",
        "test": "assert solution(\"10 1\\n3 2 3 1 3 3 1 4 1\\n1 2 3 4 4 1 2 1 3\") == \"0 2 4 7 8 11 13 14 16 17\"",
        "num_ids": 1307,
        "indeed": false
    },
    {
        "number": 4639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split('\\n')[0])\n    for i in range(test_cases):\n        n, k = map(int, stdin.split('\\n')[i+1].split())\n        if n % 2 == 1:\n            n += 1\n        a = [f\"a{j:0{n-2}d}\" for j in range(n-2)]\n        b = [f\"b{j:0{n-2}d}\" for j in range(n-4, n-2)]\n        s = a + b\n        s.sort()\n        print(\" \".join(s[:k]))\n\nstdin = '''\n7\n5 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100\n'''\n\nsolution(stdin)",
        "test": "assert solution(input()) == \"aabab\\n\"  # Test case 2",
        "num_ids": 1183,
        "indeed": false
    },
    {
        "number": 4640,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    for _ in range(t):\n        n, k = map(int, stdin.split('\\n')[1].split())\n        x = list(map(int, stdin.split('\\n')[2].split()))\n        y = list(map(int, stdin.split('\\n')[3].split()))\n\n        x_max = max(x)\n        y_min = min(y)\n        platforms = []\n        for i in range(len(y)):\n            platforms.append((x[i], y[i], k))\n\n        def is_on_platform(point: tuple) -> bool:\n            for platform in platforms:\n                x0, y0, k0 = platform\n                if 0 <= point[0] < x0 + k0:\n                    if 0 <= point[1] < y0 - 1:\n                        return True\n            return False\n\n        def is_colliding(point: tuple) -> bool:\n            for platform in platforms:\n                x0, y0, k0 = platform\n                if 0 <= point[0] < x0 + k0 and 0 <= point[1] < y0 + k0:\n                    if 0 <= point[0] - k0 < x0 < x0 + k0 and 0 <= point[1] - k0 < y0 < y0 + k0:\n                        return True\n            return False\n\n        def collide_and_save(point: tuple) -> None:\n            for platform in platforms:\n                x0, y0, k0 = platform\n                if 0 <= point[0] < x0 + k0 and 0 <= point[1] < y0 + k0:\n                    if 0 <= point[0] - k0 < x0 < x0 + k0 and 0 <= point[1] - k0 < y0 < y0 + k0:\n                        for i in range(len(y)):\n                            if x[i] == point[0] and y[i] == point[1]:\n                                x[i] = -1\n                                y[i] = -1\n\n        saved_points = 0\n        for i in range(len(x)):\n            if x[i]!= -1:\n                if is_on_platform((x[i], y[i])):\n                    saved_points += 1\n                else:\n                    if is_colliding((x[i], y[i])):\n                        collide_and_save((x[i], y[i]))\n                    else:\n                        x[i] = -1\n                        y[i] = -1\n\n        print(saved_points)\n\ndef",
        "test": "assert solution(input()) == \"6\\n1\\n5\\n10\\n\"",
        "num_ids": 2320,
        "indeed": false
    },
    {
        "number": 4641,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    q, x = map(int, stdin.split())\n    a = []\n\n    for _ in range(q):\n        y = int(stdin.split()[0])\n        a.append(y)\n\n    a = [max(a[i] + x, 0) for i in range(len(a))]\n    a = [min(a[i] - x, 1000) for i in range(len(a))]\n\n    for i in range(q):\n        print(a[i])\n\n    return \"\\n\".join(str(max(a)) for _ in range(q))",
        "test": "assert solution(\"4 3\\n1\\n2\\n1\\n2\\n\") == \"0\\n0\\n0\\n0\\n\"",
        "num_ids": 948,
        "indeed": false
    },
    {
        "number": 4642,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n, x, y = map(int, stdin.split()[1:])\n        if x < y:\n            array = [x] + list(range(y - x + 1))\n        else:\n            array = [y] + list(range(x - y + 1))\n        array.sort()\n        print(*array)\n\ndef",
        "test": "assert solution(\"\"\"",
        "num_ids": 1539,
        "indeed": false
    },
    {
        "number": 4643,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    \n    arr.sort()\n    return''.join(map(str, arr))",
        "test": "assert solution(\"3 3 1 2\") == \"1 2 3\"",
        "num_ids": 372,
        "indeed": false
    },
    {
        "number": 4644,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n = int(stdin.split()[1])\n        a = list(map(int, stdin.split()[2:n+2]))\n        odd_sum = sum(filter(lambda x: x % 2 == 1, a))\n        if odd_sum % 2 == 1:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\ndef",
        "test": "assert solution(\"5\\n2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\\n4\\n1 1 1 1\") == \"YES\\nNO\\nYES\\nNO\\nNO\"",
        "num_ids": 1111,
        "indeed": false
    },
    {
        "number": 4645,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    test_cases = []\n    for _ in range(t):\n        n = int(stdin.split()[1])\n        test_cases.append(n)\n    return \"\\n\".join(map(str, find_permutations(test_cases)))\n\n\ndef",
        "test": "assert solution(\"\"\"10",
        "num_ids": 1085,
        "indeed": false
    },
    {
        "number": 4646,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n = int(stdin.split()[1])\n        a = list(map(int, stdin.split()[2:]))\n\n        def is_good(a: list) -> bool:\n            parity = sum(a) % 2\n            return all(i % 2 == a[i] % 2 for i in range(n))\n\n        def swap_two(a: list) -> None:\n            a[0], a[1] = a[1], a[0]\n\n        min_moves = float('inf')\n        moves = 0\n        a_copy = a.copy()\n\n        while not is_good(a_copy):\n            min_moves = min(min_moves, moves)\n            swap_two(a_copy)\n            moves += 1\n\n        if moves < min_moves:\n            return -1\n        else:\n            return moves",
        "test": "assert solution(input()) == '1'",
        "num_ids": 1247,
        "indeed": false
    },
    {
        "number": 4647,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    colors = list(map(int, stdin.split()[1:]))\n    \n    # Create a graph from the given tree\n    graph = [[] for _ in range(n)]\n    for u, v in [(u, v) for u, v in enumerate(colors[:-1])]:\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    # BFS to find the maximum difference between white and black vertices\n    def bfs(start):\n        queue = deque([start])\n        visited = set()\n        white_count = 0\n        black_count = 0\n        \n        while queue:\n            current = queue.popleft()\n            visited.add(current)\n            \n            for neighbor in graph[current]:\n                if neighbor not in visited:\n                    queue.append(neighbor)\n                    \n                    if colors[neighbor] == 1:\n                        white_count += 1\n                    else:\n                        black_count += 1\n        \n        return white_count - black_count\n    \n    result = [bfs(i) for i in range(n)]\n    return \" \".join(map(str, result))",
        "test": "assert solution(\"\"\"",
        "num_ids": 1994,
        "indeed": false
    },
    {
        "number": 4648,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    moves = 0\n    while n > 1:\n        if n % 6 == 0:\n            n //= 6\n            moves += 1\n        else:\n            n *= 2\n            moves += 1\n    if n == 1:\n        return str(moves)\n    else:\n        return \"-1\"",
        "test": "assert solution(\"7\\n1\\n2\\n3\\n12\\n12345\\n15116544\\n387420489\") == \"0\\n-1\\n2\\n-1\\n-1\\n12\\n36\\n\"",
        "num_ids": 1183,
        "indeed": false
    },
    {
        "number": 4649,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.split()[0])\n    \n    for i in range(queries):\n        n, k = map(int, stdin.split()[1:])\n        s = stdin.split()[2]\n        \n        if n > 1:\n            for j in range(n - 1):\n                if s[j] == 'R' and s[j + 1] == 'G':\n                    s = s[:j] + 'R' + s[j + 2:]\n                elif s[j] == 'G' and s[j + 1] == 'B':\n                    s = s[:j] + 'G' + s[j + 2:]\n                elif s[j] == 'B' and s[j + 1] == 'R':\n                    s = s[:j] + 'B' + s[j + 2:]\n        \n        if len(s) >= k:\n            s = s[:k]\n        \n        if s not in
        "test": "assert solution(\"5 3\\nRBRGR\") == \"0\"",
        "num_ids": 1980,
        "indeed": false
    },
    {
        "number": 4650,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    for _ in range(t):\n        n = int(stdin.split('\\n')[1])\n        a = list(map(int, stdin.split('\\n')[2].split()))\n        max_divisible_by_3 = 0\n        for i in range(len(a)):\n            for j in range(i+1, len(a)):\n                if a[i] + a[j] % 3 == 0:\n                    max_divisible_by_3 = max(max_divisible_by_3, 2)\n                if a[i] + a[j] % 3 == 1:\n                    max_divisible_by_3 = max(max_divisible_by_3, 1)\n        print(max_divisible_by_3)",
        "test": "assert solution(input()) == \"3\\n3\"",
        "num_ids": 767,
        "indeed": false
    },
    {
        "number": 4651,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, q = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    \n    # perform operations\n    min_permutation = [0] * n\n    for _ in range(q):\n        op, i, j = map(int, stdin.split())\n        if op == 1:\n            min_permutation[i - 1], min_permutation[j - 1] = min_permutation[j - 1], min_permutation[i - 1]\n        elif op == 2:\n            min_permutation[i - 1], min_permutation[j - 1] = min_permutation[j - 1], min_permutation[i - 1]\n        elif op == 3:\n            min_permutation[i - 1], min_permutation[j - 1] = min_permutation[j - 1], min_permutation[i - 1]\n    \n    # print answer\n    return \" \".join(map(str, min_permutation))",
        "test": "assert solution(\"\"\"4",
        "num_ids": 1448,
        "indeed": false
    },
    {
        "number": 4652,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    queries = []\n\n    for _ in range(q):\n        _, indices = stdin.split()\n        indices = list(map(int, indices.split()))\n        queries.append((indices, n))\n\n    result = []\n\n    for indices, _ in queries:\n        round_dance_start = 0\n        for i in range(1, n + 1):\n            if indices[i] - indices[i - 1] == n - i + 1:\n                round_dance_start = i\n                break\n\n        if round_dance_start:\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n\n    return \"\\n\".join(result)\n",
        "test": "assert solution(",
        "num_ids": 1271,
        "indeed": false
    },
    {
        "number": 4653,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    def count_candies(n: int, a: int, b: int) -> int:\n        count = 0\n        while n > 0:\n            if n >= b:\n                n -= b\n                count += 1\n            elif n >= a:\n                n -= a\n                count += 1\n            else:\n                break\n        return count\n\n    t = int(stdin.split('\\n')[0])\n\n    for _ in range(t):\n        n, k = map(int, stdin.split('\\n')[1].split())\n\n        a, b = 0, 0\n        for _ in range(k // 2):\n            a += 1\n\n        max_candies = 0\n        for i in range(n):\n            b += 1\n            candies = count_candies(n, a, b)\n            if candies > max_candies:\n                max_candies = candies\n\n        print(max_candies)",
        "test": "assert solution(\"1\\n1 1\\n10 1\\n100000 100000\") == \"1\\n10\\n100000\\n100000\"",
        "num_ids": 1344,
        "indeed": false
    },
    {
        "number": 4654,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    def find_solution(n: int, k: int) -> str:\n        def get_parity(n: int) -> int:\n            return n % 2\n\n        def is_valid(a: List[int]) -> bool:\n            return all(abs(a[i] - a[i + 1]) % 2 == 0 for i in range(len(a) - 1))\n\n        def is_valid_one_parity(a: List[int]) -> bool:\n            odd = [a[i] for i in range(len(a)) if a[i] % 2!= 0]\n            even = [a[i] for i in range(len(a)) if a[i] % 2 == 0]\n            return (odd + even) == a\n\n        def is_valid_two_parties(a: List[int]) -> bool:\n            odd = [a[i] for i in range(len(a)) if a[i] % 2!= 0]\n            even = [a[i] for i in range(len(a)) if a[i] % 2 == 0]\n            return any(odd) and any(even)\n\n        for i in range(1, 1000000000):\n            a = [i] * k\n            if is_valid(a) or is_valid_one_parity(a) or is_valid_two_parties(a):\n                return f\"YES {a}\"\n        return \"NO\"\n\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n, k = map(int, stdin.split()[1:])\n        print(find_solution(n, k))",
        "test": "assert solution(input()) == \"YES\\n1 2 3 4\\nYES\\n45 5 35 5\\nNO\\nNO\\nYES\\n1 1 1 1 1 1 1 1\\nNO\\nYES\\n3 1 1\\nYES\\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120\"",
        "num_ids": 2658,
        "indeed": false
    },
    {
        "number": 4655,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    queries = list(map(int, stdin.split()))\n    \n    for i in range(len(queries)):\n        if queries[i] == 1:\n            queries[i] = 3\n        elif queries[i] == 2:\n            queries[i] = 2\n        else:\n            queries[i] = 1\n    \n    max_candies = max(queries)\n    \n    return str(max_candies) + \"\\n\" * (len(queries) - 1)\n\nprint(solution(\"1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\")) # Output: 4 55 15000000000000000",
        "test": "assert solution(\"1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\\n\") == \"4\\n55\\n15000000000000000\\n51\"",
        "num_ids": 1594,
        "indeed": false
    },
    {
        "number": 4656,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[1].split())\n    s = list(stdin.split()[2])\n    beads = set(s)\n    res = 1\n    for i in range(1, n):\n        beads = set(s[:i] + s[i + 1:])\n        if len(beads) == k:\n            res = i + 1\n            break\n\n    return str(res)\n",
        "test": "assert solution(open('input.txt').read()) == 'Output\\n6\\n3\\n5\\n4\\n15\\n10'",
        "num_ids": 1527,
        "indeed": false
    },
    {
        "number": 4657,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n\n    def merge_sort(arr: list) -> list:\n        if len(arr) <= 1:\n            return arr\n\n        mid = len(arr) // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n\n        return merge(left, right)\n\n    def merge(left: list, right: list) -> list:\n        result = []\n        i, j = 0, 0\n\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n\n        result += left[i:]\n        result += right[j:]\n\n        return result\n\n    a = merge_sort(a)\n\n    for i in range(k):\n        if i == 0:\n            if sum(a[1:a[i] - 1:2]) % 2 == 1:\n                continue\n\n        if i == k - 1:\n            if sum(a[a[i] - 2::-2]) % 2 == 1:\n                continue\n\n        if sum(a[a[i] - 2::-2]) % 2 == 1:\n            break\n\n    if i == k:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\ndef",
        "test": "assert solution(\"3\\n5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2\") == \"YES\\n1 3 5\\nNO\\nNO\"",
        "num_ids": 1600,
        "indeed": false
    },
    {
        "number": 4658,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin, 2)\n    reversed_bits = 0\n    for i in range(32):\n        reversed_bits |= ((n & 1) << (31 - i))\n        n >>= 1\n    return str(reversed_bits)",
        "test": "assert solution(\"00000010100101000001111010011100\") == \"964176192\"",
        "num_ids": 1081,
        "indeed": false
    },
    {
        "number": 4659,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    numRows = int(stdin)\n    result = []\n    for i in range(numRows):\n        row = []\n        for j in range(i+1):\n            if j == 0 or j == i:\n                row.append(1)\n            else:\n                row.append(result[i-1][j-1] + result[i-1][j])\n        result.append(row)\n    return str(result)",
        "test": "assert solution(\"5\") == \"[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\"",
        "num_ids": 725,
        "indeed": false
    },
    {
        "number": 4660,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    emails = stdin.split(\"\\n\")\n    valid_emails = filter(lambda x: \"@\" in x and \".\" in x and len(x.split(\"@\")[1].split(\".\")) <= 3, emails)\n    return sorted(valid_emails)",
        "test": "assert solution(\"3\\njohn@example.com\\ndoe@example.com\\nsmith@www.example.com\") == [\"doe@example.com\", \"john@example.com\", \"smith@www.example.com\"]",
        "num_ids": 995,
        "indeed": false
    },
    {
        "number": 4661,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    fib = [0, 1]\n    while len(fib) < n:\n        temp = fib[-1] + fib[-2]\n        fib.append(temp)\n    return list(map(lambda x: x ** 3, fib[:n]))",
        "test": "assert solution('3') == '[0, 1, 8]', \"The output is not as expected\"",
        "num_ids": 1598,
        "indeed": false
    },
    {
        "number": 4662,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    depth = 0\n    max_depth = 0\n\n    for line in stdin.splitlines():\n        tag = line.split(\"<\")[0].strip()\n\n        if tag == \"xml\":\n            continue\n\n        if tag.startswith(\"</\"):\n            depth -= 1\n        else:\n            depth += 1\n\n        max_depth = max(max_depth, depth)\n\n    return str(max_depth)\n\n\ndef",
        "test": "assert solution(\"<?xml version=\\\"1.0\\\"?>\\n<root>\\n  <a>\\n    <b>\\n      <c></c>\\n    </b>\\n  </a>\\n  <d>\\n    <e>\\n      <f>\\n        <g>\\n          <h>\\n            <i></i>\\n          </h>\\n        </g>\\n      </f>\\n    </e>\\n  </d>\\n</root>\") == \"4\"",
        "num_ids": 732,
        "indeed": false
    },
    {
        "number": 4663,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    for _ in range(n):\n        num = input().strip()\n        if num.isdigit() and (len(num) == 10) and (num[0] in ['7', '8', '9']) and all(ch.isdigit() for ch in num):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"\n\ndef",
        "test": "assert solution(\"3\\n1234567890\\n123456789\\n12345678901\\n123456789012\\n1234567890123\\n12345678901234\") == \"YES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\"",
        "num_ids": 759,
        "indeed": false
    },
    {
        "number": 4664,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    lis_m, lis_n = stdin.strip().split('\\n')\n    lis_m = lis_m.split()\n    lis_n = lis_n.split()\n    set_m = set(lis_m)\n    set_n = set(lis_n)\n    symmetric_difference = set_m.symmetric_difference(set_n)\n    return '\\n'.join(map(str, sorted(symmetric_difference)))\n",
        "test": "assert solution('4\\n1 2 3 4\\n5\\n2 3 4 5 6\\n') == '1 3 5 6\\n'",
        "num_ids": 923,
        "indeed": false
    },
    {
        "number": 4665,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    lines = stdin.split('\\n')\n    num_students = int(lines[0])\n    col_names = lines[1].strip().split(',')\n    student_marks = [row.strip().split(',') for row in lines[2:]]\n\n    # Calculate average\n    total_marks = 0\n    for marks, id, name, class_ in student_marks:\n        total_marks += float(marks)\n\n    average = round(total_marks / num_students, 2)\n\n    return str(average)",
        "test": "assert solution(\"4\\nNAME,ID,MARKS,CLASS\\nJohn,1,85,Class1\\nMike,2,90,Class2\\nSarah,3,92,Class3\\nTom,4,87,Class4\\n\") == \"89.16\\n\"",
        "num_ids": 1398,
        "indeed": false
    },
    {
        "number": 4666,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        if 2 <= n <= 5:\n            return \"Weird\"\n        elif 6 <= n <= 20:\n            return \"Weird\"\n        else:\n            return \"Not Weird\"\n    else:\n        return \"Weird\"",
        "test": "assert solution(\"25\") == \"Weird\", \"Incorrect output for input 25\"",
        "num_ids": 525,
        "indeed": true
    },
    {
        "number": 4667,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    # Initialize variables\n    score = 0\n    current_tag = \"\"\n    current_attributes = 0\n    \n    # Iterate through lines of input\n    for line in stdin.splitlines():\n        # Remove whitespace from beginning and end of line\n        line = line.strip()\n        \n        # Check if line is a tag\n        if line.startswith(\"<\"):\n            # Split line into tag name and attributes\n            tag, *attributes = line.split(\" \", 1)\n            \n            # If tag is a start tag, increment score and attributes\n            if line.startswith(\"<\"):\n                current_tag = tag\n                score += current_attributes\n                current_attributes = 0\n            \n            # If tag is an end tag, decrement score and decrement attributes\n            elif line.startswith(\"</\"):\n                current_tag = \"\"\n                current_attributes -= len(attributes)\n                \n        # Check if line is an attribute\n        elif line.startswith(\" \"):\n            # Increment attributes\n            current_attributes += 1\n        \n        # Check if line is a closing tag\n        elif line.startswith(\"</\"):\n            # If closing tag is current tag, decrement score\n            if line[2:].strip() == current_tag:\n                score -= current_attributes\n                current_tag = \"\"\n                current_attributes = 0\n                \n    # Return final score\n    return str(score)",
        "test": "assert solution(\"1\\n<root></root>\") == \"0\"",
        "num_ids": 840,
        "indeed": false
    },
    {
        "number": 4668,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    def cross_product(a: tuple, b: tuple) -> float:\n        return a[1] * b[2] - a[2] * b[1]\n\n    def dot_product(a: tuple, b: tuple) -> float:\n        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2]\n\n    def angle_between_points(a: tuple, b: tuple, c: tuple, d: tuple) -> float:\n        x1, y1, z1 = a\n        x2, y2, z2 = b\n        x3, y3, z3 = c\n        x4, y4, z4 = d\n\n        cross = cross_product((x2 - x1, y2 - y1, z2 - z1), (x3 - x1, y3 - y1, z3 - z1))\n        dot = dot_product((x3 - x1, y3 - y1, z3 - z1), (x4 - x1, y4 - y1, z4 - z1))\n        cos_phi = dot / (cross**2 + 1e-10)\n\n        return round(180 * math.acos(cos_phi), 2)\n\n    a, b, c, d = map(float, stdin.split())\n    angle = angle_between_points((0, 0, 0), (b, 0, 0), (c, 0, 0), (d, 0, 0))\n    return str(angle)",
        "test": "assert solution(\"3 2 4 1 4 3\") == \"68.65\"",
        "num_ids": 1473,
        "indeed": false
    },
    {
        "number": 4669,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input to list of words\n    words = stdin.split()\n\n    # Get the sum of scores of all words in the list\n    total_score = sum([score_words(word) for word in words])\n\n    # Return the score as a string\n    return str(total_score)\n\ndef",
        "test": "assert solution(\"\"\"",
        "num_ids": 650,
        "indeed": false
    },
    {
        "number": 4670,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    import re\n\n    # Regular expression for a valid Roman numeral\n    roman_regex = re.compile(r'^M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$')\n\n    # Check if the input is a valid Roman numeral\n    if roman_regex.match(stdin):\n        return 'True'\n    else:\n        return 'False'",
        "test": "assert solution(\"MCMXCIV\") == \"True\"",
        "num_ids": 637,
        "indeed": true
    },
    {
        "number": 4671,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    mobile_numbers = stdin.split('\\n')\n    mobile_numbers = sorted([mobile_numbers[i] for i in range(len(mobile_numbers)) if mobile_numbers[i].isdigit()])\n    mobile_numbers = [mobile_numbers[i][2:] if mobile_numbers[i][:2] == '+91' else mobile_numbers[i] for i in range(len(mobile_numbers))]\n    return '\\n'.join(mobile_numbers)",
        "test": "assert solution(\"091987654321\\n01234567890\\n01234567890\\n91987654321\\n91987654321\\n\") == \"\"\"",
        "num_ids": 893,
        "indeed": false
    },
    {
        "number": 4672,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    students = {}\n    for i in range(n):\n        name, *marks = stdin.split()[1:]\n        marks = list(map(int, marks))\n        students[name] = marks\n    query_name = stdin.split()[n+1]\n    if query_name in students:\n        avg = sum(students[query_name]) / len(students[query_name])\n        return f\"{avg:.2f}\"\n    else:\n        return \"Student not found\"",
        "test": "assert solution(\"2\\nalpha 10 20\\nquery_name alpha\\n\") == \"15.00\"",
        "num_ids": 881,
        "indeed": false
    },
    {
        "number": 4673,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    people = []\n    for line in stdin.splitlines():\n        name = line.strip().split()\n        people.append((name[0], name[1], int(name[2]), name[3]))\n\n    def format_name(person):\n        return f\"{person[3]} {person[2]}-{person[0]}\"\n\n    sorted_people = sorted(people, key=lambda x: (x[2], format_name(x)))\n\n    output = []\n    for person in sorted_people:\n        output.append(format_name(person))\n\n    return \"\\n\".join(output)",
        "test": "assert solution(\"5\\nHenry Davids 25 M\\nMary George 30 F\\nEmma Lee 20 M\\nElizabeth Johnson 35 F\\nJane Doe 35 F\") == \"Mr. Henry Davids\\nMs. Mary George\"",
        "num_ids": 1263,
        "indeed": false
    },
    {
        "number": 4674,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, n = map(int, stdin.split())\n    cube = [[[0 for _ in range(x+1)] for _ in range(y+1)] for _ in range(z+1)]\n    perms = []\n\n    for i in range(x+1):\n        for j in range(y+1):\n            for k in range(z+1):\n                if i+j+k!= n:\n                    perms.append([i, j, k])\n\n    perms.sort()\n    print(perms)\n\n    return \"\"",
        "test": "assert solution(input()) == \"All permutations of [i,j,k] are:\\n[[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[0,1,2],[1,0,0],[1,0,1],[1,0,2],[1,1,0],[1,1,1],[1,1,2]]\\nPrint an array of the elements that do not sum to n = 3\\n[[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,0],[1,1,2]]\"",
        "num_ids": 1412,
        "indeed": false
    },
    {
        "number": 4675,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    # input format: r1,i1 r2,i2\n    r1, i1 = map(float, stdin.split())\n    r2, i2 = map(float, stdin.split())\n\n    # calculate the addition\n    add_result = r1 + r2 + i1 * i2\n    add_imag = add_result * i2 - r1 * i2\n\n    # calculate the subtraction\n    sub_result = r1 - r2 - i1 * i2\n    sub_imag = sub_result * i2 - r1 * i2\n\n    # calculate the multiplication\n    mul_result = r1 * r2 - i1 * i2\n    mul_imag = r1 * i2 + r2 * i1\n\n    # calculate the division\n    div_result = (r1 * r2 + i1 * i2) / (r2 ** 2 + i2 ** 2)\n    div_imag = (r1 * i2 - r2 * i1) / (r2 ** 2 + i2 ** 2)\n\n    # calculate the modulus\n    mod_result = abs(r1 * r2 + i1 * i2)\n    mod_imag = abs(r1 * i2 - r2 * i1)\n\n    # print the results\n    output = [\n        f\"{add_result:.2f}+{add_imag:.2fi}\",\n        f\"{sub_result:.2f}-{sub_imag:.2fi}\",\n        f\"{mul_result:.2f}*{mul_imag:.2fi}\",\n        f\"{div_result:.2f}/{div_imag:.2fi}\",\n        f\"mod({mod_result:.2f}+{mod_imag:.2fi})\"\n    ]\n    return \"\\n\".join(output)",
        "test": "assert solution(\"0 0\") == \"0.00+0.00i\\n0.00+0.00i\\n0.00+0.00i\\n0.00+0.00i\\n0.00\\n0.00\"",
        "num_ids": 2859,
        "indeed": false
    },
    {
        "number": 4676,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    o, e = stdin.split()\n    odd = [o[i] for i in range(len(o)) if i % 2!= 0]\n    even = [e[i] for i in range(len(e)) if i % 2 == 0]\n    \n    password = ''.join(odd + even)\n    \n    return password",
        "test": "assert solution(\"xyz\\nabc\\n\") == \"xaybzc\"",
        "num_ids": 506,
        "indeed": false
    },
    {
        "number": 4677,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    stack = []\n\n    for key in s:\n        if key == '0':\n            stack.append(key)\n        elif key == '1':\n            stack.append(key)\n        elif key == 'B':\n            if not stack:\n                continue\n            stack.pop()\n\n    return ''.join(stack)",
        "test": "assert solution(\"01B0\") == \"00\", \"The correct answer is not an empty string.\"",
        "num_ids": 524,
        "indeed": true
    },
    {
        "number": 4678,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    A = [abs(a) for a in A]\n    heights = [sum(A[:i+1]) for i in range(N)]\n    stools = [max(heights)]\n    for i in range(N):\n        if heights[i] >= stools[-1]:\n            stools.append(heights[i]+1)\n        else:\n            j = stools.index(heights[i])\n            stools[j] = heights[i]+1\n    return str(min(stools))",
        "test": "assert solution(\"5\\n2 1 5 4 6\") == \"6\"",
        "num_ids": 876,
        "indeed": false
    },
    {
        "number": 4679,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    # Splitting the input into three strings\n    decks = [sorted(list(set(card))) for card in stdin.split()]\n\n    # Looping through the decks\n    while all(len(deck) > 0 for deck in decks):\n        # Finding the players with the lowest scores\n        alice, bob, charlie = [min(deck, key=lambda x: sum(x.count(letter) for letter in 'abc'))\n                              for deck in decks]\n\n        # Removing the cards from each player's decks\n        alice.remove(alice.pop())\n        bob.remove(bob.pop())\n        charlie.remove(charlie.pop())\n\n        # Checking who won\n        if alice == []:\n            return 'A'\n        elif bob == []:\n            return 'B'\n        else:\n            return 'C'\n\n    # The game ended in a tie\n    return 'T'",
        "test": "assert solution(\"aca\\naccc\\nca\\n\") == \"A\"",
        "num_ids": 1373,
        "indeed": false
    },
    {
        "number": 4680,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n\n    if A == 5 and B == 7 and C == 5:\n        print(\"YES\")\n        return \"YES\"\n    else:\n        print(\"NO\")\n        return \"NO\"",
        "test": "assert solution(\"6 5 8\") == \"NO\"",
        "num_ids": 644,
        "indeed": false
    },
    {
        "number": 4681,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return \"2\"\n    elif N == 1:\n        return \"1\"\n    else:\n        a, b = 2, 1\n        for i in range(2, N+1):\n            c = a + b\n            a = b\n            b = c\n        return str(b)\n\ndef",
        "test": "assert solution(\"5\\n\") == \"11\\n\"",
        "num_ids": 497,
        "indeed": false
    },
    {
        "number": 4682,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = map(int, stdin.split())\n    if h % 2!= 0:\n        return \"0\"\n    area = (a + b) * h / 2\n    return str(int(area))",
        "test": "assert solution(\"3\\n4\\n2\") == \"7\"",
        "num_ids": 389,
        "indeed": true
    },
    {
        "number": 4683,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    modulo = 10**9 + 7\n    total = sum(a[i] * a[j] for i in range(n) for j in range(i + 1, n)) % modulo\n    return str(total)",
        "test": "assert solution('3\\n1 2 3\\n') == '11'",
        "num_ids": 972,
        "indeed": true
    },
    {
        "number": 4684,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split())\n\n    if r == g == b:\n        return \"YES\" if r % 4 == 0 else \"NO\"\n    elif r == g and r == b:\n        return \"YES\" if (r + 1) % 4 == 0 else \"NO\"\n    elif r == g:\n        return \"YES\" if (r + 1) % 4 == 0 else \"NO\"\n    elif r == b:\n        return \"YES\" if (r + 1) % 4 == 0 else \"NO\"\n    elif g == b:\n        return \"YES\" if (g + 1) % 4 == 0 else \"NO\"\n\n    return \"NO\"",
        "test": "assert solution(\"9 7 5\") == \"NO\"",
        "num_ids": 516,
        "indeed": false
    },
    {
        "number": 4685,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    A, B, C, K = input_list\n    return str(max(A * K, B * K, C * K))",
        "test": "assert solution(\"5 3 11\\n1\") == \"30\"",
        "num_ids": 680,
        "indeed": false
    },
    {
        "number": 4686,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    w = stdin.strip()\n    counts = [0] * 26  # lowercase letter counts\n\n    for letter in w:\n        counts[ord(letter) - ord('a')] += 1\n\n    for count in counts:\n        if count % 2!= 0:\n            return \"No\"\n\n    return \"Yes\"",
        "test": "assert solution(\"abaccaba\") == \"Yes\"",
        "num_ids": 574,
        "indeed": true
    },
    {
        "number": 4687,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a = a[1:]  # remove the first element (N)\n    a = [a[0]] + [sorted(set(a))[-k]] * (n - 1)\n    return str(a[0])",
        "test": "assert solution(\"3 4\\n1 1\\n2 2\\n3 3\") == \"3\\n\", \"Sample Input: 3 4\\n1 1\\n2 2\\n3 3\\nExpected Output: 3\"",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 4688,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    dp = [0] * (n + 1)\n    dp[0], dp[1] = 1, 1\n\n    for i in range(2, n + 1):\n        for color in range(k):\n            dp[i] += dp[i - 1] * (color + 1)\n            if color < k - 1:\n                dp[i] -= dp[i - 1] * (k - color - 1)\n\n    return str(dp[n])",
        "test": "assert solution(\"2 2\") == \"2\"",
        "num_ids": 552,
        "indeed": false
    },
    {
        "number": 4689,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    houses = list(map(int, stdin.split()))\n    houses.sort()\n    houses.append(K)\n    \n    total_distance = 0\n    i = 0\n    \n    while i < len(houses) - 1:\n        total_distance += houses[i] + houses[i + 1]\n        i += 2\n    \n    return str(total_distance)",
        "test": "assert solution(\"20 3\\n5 10 15\\n\") == \"10\"",
        "num_ids": 1182,
        "indeed": false
    },
    {
        "number": 4690,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    values = list(map(int, stdin.split()))\n    A, B, C, D = values\n\n    area1 = A * B\n    area2 = C * D\n\n    if area1 > area2:\n        print(area1)\n    else:\n        print(area2)\n\n    if area1 == area2:\n        print(area1)",
        "test": "assert solution('3 5 2 7') == '15'",
        "num_ids": 472,
        "indeed": false
    },
    {
        "number": 4691,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N, *verdicts = map(str, stdin.split())\n    AC_count = 0\n    WA_count = 0\n    TLE_count = 0\n    RE_count = 0\n\n    for verdict in verdicts:\n        if verdict == 'AC':\n            AC_count += 1\n        elif verdict == 'WA':\n            WA_count += 1\n        elif verdict == 'TLE':\n            TLE_count += 1\n        elif verdict == 'RE':\n            RE_count += 1\n\n    print(f'AC x {AC_count}')\n    print(f'WA x {WA_count}')\n    print(f'TLE x {TLE_count}')\n    print(f'RE x {RE_count}')\n\n    return f'AC x {AC_count}\\nWA x {WA_count}\\nTLE x {TLE_count}\\nRE x {RE_count}'",
        "test": "assert solution('6\\nAC\\nTLE\\nAC\\nAC\\nWA\\nTLE') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'",
        "num_ids": 1236,
        "indeed": true
    },
    {
        "number": 4692,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    days = 365\n    hours_per_day = 24\n    total_days = days + ((m - 1) // 12)\n    total_hours = total_days * hours_per_day\n    remaining_hours = total_hours + (24 - (m % 12) * hours_per_day)\n    return str(remaining_hours)",
        "test": "assert solution(\"21\") == \"27\"",
        "num_ids": 790,
        "indeed": false
    },
    {
        "number": 4693,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    A = int(inputs[0])\n    B = int(inputs[1])\n\n    if A + B > 10:\n        return \"error\"\n    else:\n        return str(A + B)",
        "test": "assert solution(\"6 3\") == \"9\"",
        "num_ids": 346,
        "indeed": false
    },
    {
        "number": 4694,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    coordinates = list(map(int, stdin.split()[1:]))\n\n    distance = float('inf')\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            dist = abs(coordinates[i] - coordinates[j])\n            if dist < distance:\n                distance = dist\n\n    return str(distance)\n",
        "test": "assert solution(\"4\\n2 3 7 9\") == \"7\"",
        "num_ids": 748,
        "indeed": false
    },
    {
        "number": 4695,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x in range(1, 4) or y in range(1, 4):\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert solution(\"4 7\") == \"No\", \"Sample input 2\"",
        "num_ids": 593,
        "indeed": false
    },
    {
        "number": 4696,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n\n    if a * b % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "test": "assert solution(\"3 4\") == \"Even\"",
        "num_ids": 313,
        "indeed": true
    },
    {
        "number": 4697,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    count = 0\n\n    while True:\n        # Check if there are enough S-shaped pieces to create Scc groups\n        if count >= n:\n            break\n\n        # Check if there are enough c-shaped pieces to create Scc groups\n        if m % 2!= 0:\n            if count + 1 >= n:\n                break\n            count += 1\n            m -= 1\n            continue\n\n        # Create Scc groups by combining two c-shaped pieces\n        count += 2\n        m -= 2\n\n    return str(count)\n",
        "test": "assert solution(\"1 6\") == \"2\"",
        "num_ids": 577,
        "indeed": false
    },
    {
        "number": 4698,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, *T = map(int, stdin.split())\n    m, *P, *X = map(int, stdin.split())\n\n    def solve_problems(T, P, X):\n        return sum(T[i - 1] + P[j - 1] * X[i - 1] for i in range(1, n + 1) for j in range(1, m + 1))\n\n    return '\\n'.join(map(str, solve_problems(T, P, X)))\n\nwith open('joisino_solution.txt', 'w') as f:\n    f.write(solution(input().strip()))\n\nwith open('joisino_solution.txt', 'r') as f:\n    print(f.read())",
        "test": "assert solution(\"\"\"3",
        "num_ids": 803,
        "indeed": false
    },
    {
        "number": 4699,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    N, K = map(int, stdin.split())\n    digits = list(map(int, stdin.split()))\n\n    # Check if the digits are not within the specified range\n    if 0 in digits or 2 in digits:\n        print(\"Invalid input\")\n        return\n\n    # Remove the digits that are disliked\n    digits = [d for d in digits if d not in [0, 2]]\n\n    # Check if the number of digits is less than K\n    if len(digits) < K:\n        print(\"Invalid input\")\n        return\n\n    # Calculate the minimum amount of money\n    min_money = N // 10 ** (K - 1)\n\n    # Calculate the largest integer equal to or greater than N with the required number of digits and the given digits\n    max_int = int(f\"{N:.0f}\")\n    min_int = max_int - (10 ** K) + 1\n\n    # Check if the largest integer is less than or equal to N\n    if min_int <= N:\n        min_int += 1\n\n    # Find the smallest integer equal to or greater than N with the required number of digits and the given digits\n    for i in range(min_int, max_int + 1):\n        decimal_str = f\"{i:0{K}b}\"\n        if len(list(set(decimal_str))) == len(digits):\n            result = i * 10 ** (K - 1)\n            if result >= min_money:\n                return str(result)\n\n    print(\"Invalid input\")\n    return",
        "test": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"",
        "num_ids": 1335,
        "indeed": false
    },
    {
        "number": 4700,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    elevations = list(map(int, stdin.split()))\n    edges = []\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        edges.append((a, b))\n        edges.append((b, a))\n\n    def bfs(obs):\n        queue = [obs]\n        visited = set()\n        while queue:\n            current = queue.pop(0)\n            if current not in visited:\n                visited.add(current)\n                for neighbor in edges[current - 1]:\n                    if neighbor not in visited:\n                        queue.append(neighbor)\n        return visited\n\n    good_count = 0\n    for i in range(1, n + 1):\n        if i in bfs(i):\n            good_count += 1\n\n    return str(good_count)",
        "test": "assert solution(\"\"\"",
        "num_ids": 1281,
        "indeed": false
    },
    {
        "number": 4701,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n\n    # Initialize the value to 1\n    value = 1\n\n    # Perform N operations\n    for _ in range(N):\n        # Perform operation A (double the value)\n        value *= 2\n\n        # Perform operation B (increase the value by K)\n        value += K\n\n    # Return the minimum possible value displayed in the board\n    return str(value)",
        "test": "assert solution(\"4\\n3\\n\") == \"10\"",
        "num_ids": 577,
        "indeed": false
    },
    {
        "number": 4702,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 0:\n        return '0'\n    else:\n        return '1'",
        "test": "assert solution(\"0\") == \"0\", \"Sample Input 2: Expected 0, received 1\"",
        "num_ids": 277,
        "indeed": false
    },
    {
        "number": 4703,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    def evaluate_formula(formula: str) -> int:\n        digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n        formula = ''.join(sorted([c for c in formula if c in digits]))\n        return int(formula)\n\n    formula_set = set()\n    for i in range(len(stdin)):\n        for j in range(i + 1, len(stdin) + 1):\n            formula = stdin[i:j]\n            if '+' not in formula and (j - i > 1 or i!= 0):\n                formula_set.add(evaluate_formula(formula))\n    return str(sum(formula_set))",
        "test": "assert solution(\"125\") == \"176\"",
        "num_ids": 816,
        "indeed": false
    },
    {
        "number": 4704,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    cards = [int(i) for i in stdin.split()[1:]]\n    cards.sort()\n    Snuke_cards = cards[:4]\n    Raccoon_cards = cards[4:]\n    Snuke_sum = sum(Snuke_cards)\n    Raccoon_sum = sum(Raccoon_cards)\n    return str(abs(Snuke_sum - Raccoon_sum))",
        "test": "assert solution(\"6\\n1 2 3 4 5 6\") == \"1\"",
        "num_ids": 705,
        "indeed": false
    },
    {
        "number": 4705,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x, y = 0, 0\n    for _ in range(n):\n        x += 15 * 800\n    y = x - 200\n    return str(y)",
        "test": "assert solution(\"20\") == \"15800\"",
        "num_ids": 403,
        "indeed": false
    },
    {
        "number": 4706,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    c_11, c_12, c_13, c_21, c_22, c_23, c_31, c_32, c_33 = stdin.split()\n    top_left = (c_11, c_12, c_13)\n    bottom_right = (c_33, c_22, c_23)\n\n    diagonal = []\n    diagonal.append(top_left[0])\n    diagonal.append(top_left[1])\n    diagonal.append(top_left[2])\n\n    diagonal.append(bottom_right[0])\n    diagonal.append(bottom_right[1])\n    diagonal.append(bottom_right[2])\n\n    diagonal.sort()\n    diagonal.reverse()\n\n    return ''.join(diagonal)",
        "test": "assert solution(\"ant\\nobe\\nrec\") == \"abc\"",
        "num_ids": 944,
        "indeed": false
    },
    {
        "number": 4707,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, s3 = map(int, stdin.split())\n    s1_count = s2_count = s3_count = 0\n\n    for i in range(1, 4):\n        if s1 % 2 == 0 and s1_count == 0:\n            s1_count += 1\n            s2_count += 1\n            s3_count += 1\n            s1 //= 2\n            s2 //= 2\n            s3 //= 2\n        elif s2 % 2 == 0 and s2_count == 0:\n            s2_count += 1\n            s1_count += 1\n            s3_count += 1\n            s2 //= 2\n            s1 //= 2\n            s3 //= 2\n        else:\n            s3_count += 1\n            s1_count += 1\n            s2_count += 1\n            s3 //= 2\n            s1 //= 2\n            s2 //= 2\n\n    return str(s1_count + s2_count + s3_count)\n",
        "test": "assert solution(\"101\") == \"2\"",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 4708,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N, K, X, Y = map(int, stdin.split())\n\n    first_nights = K * X\n    subsequent_nights = (N - K) * Y\n\n    total = first_nights + subsequent_nights\n    return str(total)",
        "test": "assert solution(\"5\\n3\\n10000\\n9000\") == \"48000\"",
        "num_ids": 432,
        "indeed": false
    },
    {
        "number": 4709,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    tokens = stdin.split()\n    A, op, B = tokens\n    if op == '+':\n        result = int(A) + int(B)\n    elif op == '-':\n        result = int(A) - int(B)\n    else:\n        raise ValueError('Invalid operator')\n    return str(result)",
        "test": "assert solution(\"1 + 2\") == \"3\"",
        "num_ids": 474,
        "indeed": true
    },
    {
        "number": 4710,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x < 1200:\n        return \"ABC\"\n    else:\n        return \"ARC\"",
        "test": "assert solution(\"1000\") == \"ABC\"",
        "num_ids": 253,
        "indeed": true
    },
    {
        "number": 4711,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    min_cost = float('inf')\n\n    for i in range(min(a, b), max(a, b) + 1):\n        for j in range(min(a, c), max(a, c) + 1):\n            cost = i * 700 + j * 600 + (a - i) * 780 + (b - j) * 620\n            if cost < min_cost:\n                min_cost = cost\n\n    return str(min_cost)",
        "test": "assert solution(\"700 600 780\") == \"1300\"",
        "num_ids": 711,
        "indeed": false
    },
    {
        "number": 4712,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    a = [list(map(str, stdin.split())) for _ in range(h)]\n    \n    box = '#' * (w + 2)\n    box = box.join([box] * (h + 2))\n    print(box)\n    \n    for i in range(h):\n        print('#' +''.join(a[i]) + '#', end='')\n        print()\n    \n    box = '#' * (w + 2)\n    box = box.join([box] * (h + 2))\n    print(box)\n    \n    return ''",
        "test": "assert solution(\"3 4\\nxyz\\nbcd\\n123\") == \"#######\\n##xyz##\\n##bcd##\\n##123##\\n#######\"",
        "num_ids": 843,
        "indeed": false
    },
    {
        "number": 4713,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(int, stdin.split())\n    I = S[0]\n    x = 0\n    result = 0\n    for _ in range(N):\n        if S[_] == I:\n            x += 1\n        else:\n            x -= 1\n        result = max(result, x)\n    return str(result)",
        "test": "assert solution(\"5\\nIIDID\\n\") == \"2\"",
        "num_ids": 457,
        "indeed": false
    },
    {
        "number": 4714,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    count = 0\n\n    for i in range(a, b+1):\n        if str(i) == str(i)[::-1]:\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"11009 11332\") == \"4\"",
        "num_ids": 492,
        "indeed": true
    },
    {
        "number": 4715,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    colors = list(map(int, stdin.split()))\n    \n    color_counts = {}\n    for color in colors:\n        if color in color_counts:\n            color_counts[color] += 1\n        else:\n            color_counts[color] = 1\n    \n    color_counts = dict(sorted(color_counts.items()))\n    \n    result = 0\n    for color in color_counts:\n        result += color_counts[color]\n    \n    return str(result)",
        "test": "assert solution(\"3 1 4\") == \"3\"",
        "num_ids": 471,
        "indeed": false
    },
    {
        "number": 4716,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    sticks = list(map(int, stdin.split()[1:]))\n    sticks.sort()\n    l_max = 0\n    for i in range(k - 1):\n        l_max += sticks[i]\n    l_max += sticks[-1]\n    return str(l_max)\n\nwith open('input.txt', 'r') as f:\n    stdin = f.read()\n\nprint(solution(stdin))",
        "test": "assert solution(\"5 3\\n1 2 3 4 5\") == \"12\"",
        "num_ids": 825,
        "indeed": false
    },
    {
        "number": 4717,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split())\n    distances = [(x - a) ** 2, (x - b) ** 2]\n    closest_distance = min(distances)\n    closest_store = distances.index(closest_distance)\n    return \"A\" if closest_store == 0 else \"B\"",
        "test": "assert solution(\"5 2 7\") == \"B\"",
        "num_ids": 390,
        "indeed": true
    },
    {
        "number": 4718,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string by \"/\"\n    s = stdin.split(\"/\")\n    \n    # Modify the first four characters to \"2018\"\n    s[0] = \"2018\"\n    \n    # Convert the modified string back to a single string\n    result = \"/\".join(s)\n    \n    return result",
        "test": "assert solution(\"2017/01/07\") == \"2018/01/07\"",
        "num_ids": 499,
        "indeed": true
    },
    {
        "number": 4719,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    strings = stdin.split()[1:]\n    max_length = 0\n    min_string = \"\"\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if k > j and j > i and i > 0:\n                    string = \"\"\n                    for l in range(n):\n                        if l == i - 1:\n                            string += strings[l]\n                        elif l == j - 1:\n                            string += strings[l]\n                        elif l == k - 1:\n                            string += strings[l]\n                    if len(string) > max_length:\n                        max_length = len(string)\n                        min_string = string\n    return min_string",
        "test": "assert solution(\"3\\ncbaa\\ndaacc\\nacacac\") == \"aac\"",
        "num_ids": 949,
        "indeed": false
    },
    {
        "number": 4720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    seats = {}\n    for i in range(1, N+1):\n        l, r = map(int, stdin.split()[1].split())\n        for seat in range(l, r+1):\n            if seat not in seats:\n                seats[seat] = [i]\n            else:\n                seats[seat].append(i)\n    \n    occupied_seats = sum(len(seats[seat]) for seat in seats)\n    total_seats = N * 100000\n    return str(occupied_seats)",
        "test": "assert solution(\"3\\n10 20 30\") == \"1\"",
        "num_ids": 835,
        "indeed": false
    },
    {
        "number": 4721,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    east_west_blocks = n - 1\n    north_south_blocks = m - 1\n    total_blocks = east_west_blocks * north_south_blocks\n    return str(total_blocks)",
        "test": "assert solution(\"3 4\") == \"6\"",
        "num_ids": 572,
        "indeed": true
    },
    {
        "number": 4722,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    \n    if a > 50 or b > 50:\n        return \"Impossible\"\n    \n    return \"Possible\"",
        "test": "assert solution(\"4 5\") == \"Possible\"",
        "num_ids": 431,
        "indeed": false
    },
    {
        "number": 4723,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    T = [c for c in T if c!= '?']\n    T = ''.join(T)\n\n    def is_condition_1_satisfied(s: str) -> bool:\n        t = S\n        for i in range(len(s)):\n            if s[i] == t[i]:\n                t = t[i+1:]\n            else:\n                return False\n        return True\n\n    def is_condition_2_satisfied(s: str) -> bool:\n        return True\n\n    strings = [S]\n    while True:\n        for i in range(len(strings)):\n            s = strings[i]\n            if is_condition_1_satisfied(s) and is_condition_2_satisfied(s):\n                strings.append(s)\n        if T in strings:\n            break\n        strings.append(''.join(['?' if c in T else c for c in S]))\n\n    if len(strings) == 26:\n        print(S)\n    else:\n        print('UNRESTORABLE')\n\n    return strings\n\n\ndef",
        "test": "assert solution(\"\"\"?t?ct?er\\ncoder\"\"\") == \"atcoder\\n\"",
        "num_ids": 1054,
        "indeed": false
    },
    {
        "number": 4724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    r, g = map(int, stdin.split())\n    current_rating = r\n    average = (current_rating + g) / 2\n    return str(average)\n",
        "test": "assert solution(\"2002\\n2017\") == \"2032\"",
        "num_ids": 417,
        "indeed": false
    },
    {
        "number": 4725,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    # Convert the string to lowercase\n    string = stdin.lower()\n    \n    # Create a dictionary to store the frequency of each letter in the string\n    freq = {}\n    for letter in string:\n        if letter in freq:\n            freq[letter] += 1\n        else:\n            freq[letter] = 1\n    \n    # Count the number of distinct letters in the string\n    distinct_letters = len(set(string))\n    \n    # Calculate the Simplicity of the string\n    simplicity = distinct_letters * (distinct_letters + 1) // 2\n    \n    # Check if the simplicity is within the range of 1 or 2\n    if simplicity <= 2:\n        return '0'\n    \n    # Check if the simplicity is within the range of 1 or 2\n    if simplicity <= 5:\n        return '1'\n    \n    # Check if the simplicity is within the range of 1 or 2\n    if simplicity <= 10:\n        return '2'\n    \n    # If the simplicity is greater than 10, calculate the minimum number of letters you need to erase\n    # to give the string a simplicity of at most 10\n    num_erases = 0\n    for letter in string:\n        if freq[letter] > 1:\n            num_erases += 1\n        freq[letter] -= 1\n        if freq[letter] == 1:\n            break\n    \n    return str(num_erases)",
        "test": "assert solution(\"letter\") == \"2\"",
        "num_ids": 923,
        "indeed": false
    },
    {
        "number": 4726,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    m, n, t = map(int, stdin.strip().split())\n\n    # Check if the algorithm can perform less than m operations\n    if t == 1:\n        return 'TLE' if n * n > m else 'AC'\n    elif t == 2:\n        return 'TLE' if 2 ** n > m else 'AC'\n    elif t == 3:\n        return 'TLE' if n * n * n * n > m else 'AC'\n    elif t == 4:\n        return 'TLE' if n * n * n > m else 'AC'\n    elif t == 5:\n        return 'TLE' if n * n > m else 'AC'\n    elif t == 6:\n        return 'TLE' if n * n * log2(n) > m else 'AC'\n    elif t == 7:\n        return 'AC'\n\n    return 'Unknown type'",
        "test": "assert solution(\"100000000 500 3\") == \"TLE\"",
        "num_ids": 1145,
        "indeed": false
    },
    {
        "number": 4727,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    def merge_tiles(grid):\n        new_grid = [[0 for _ in range(4)] for _ in range(4)]\n        for i in range(4):\n            for j in range(4):\n                if grid[i][j] == 0:\n                    new_grid[i][j] = 0\n                elif grid[i][j] == grid[i][j-1] or grid[i][j] == grid[i][j+1] or grid[i][j] == grid[i-1][j] or grid[i][j] == grid[i+1][j]:\n                    new_grid[i][j] *= 2\n                else:\n                    new_grid[i][j] = grid[i][j]\n        return new_grid\n\n    def move_tiles(grid, direction):\n        if direction == 0:\n            return grid\n        elif direction == 1:\n            return [[grid[i][j] if j > 0 else 0 for j in range(4)] for i in range(4)]\n        elif direction == 2:\n            return [[grid[i][j] if j < 3 else 0 for j in range(4)] for i in range(4)]\n        elif direction == 3:\n            return [[grid[i][j] if i > 0 else 0 for j in range(4)] for i in range(4)]\n\n    grid = [[int(x) for x in line.split()] for line in stdin.split('\\n')[:4]]\n    move = int(stdin.split('\\n')[4])\n\n    grid = move_tiles(grid, move)\n    grid = merge_tiles(grid)\n\n    return '\\n'.join([' '.join(str(x) for x in row) for row in grid])",
        "test": "assert solution(",
        "num_ids": 2627,
        "indeed": false
    },
    {
        "number": 4728,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    input_molecule, k = stdin.split()\n    desired_output = input()\n\n    input_counts = dict()\n    desired_counts = dict()\n\n    for atom in input_molecule:\n        if atom.isupper():\n            if atom in input_counts:\n                input_counts[atom] += 1\n            else:\n                input_counts[atom] = 1\n        else:\n            if atom in input_counts:\n                input_counts[atom] += 1\n            else:\n                input_counts[atom] = 1\n\n    for atom in desired_output:\n        if atom.isupper():\n            if atom in desired_counts:\n                desired_counts[atom] += 1\n            else:\n                desired_counts[atom] = 1\n        else:\n            if atom in desired_counts:\n                desired_counts[atom] += 1\n            else:\n                desired_counts[atom] = 1\n\n    for atom in input_counts:\n        if atom in desired_counts:\n            desired_counts[atom] += input_counts[atom]\n\n    output = \"\"\n    for atom in desired_counts:\n        if desired_counts[atom] > 0:\n            output += atom * desired_counts[atom]\n            desired_counts[atom] = 0\n\n    return output",
        "test": "assert solution(\"C2H6 10\\nC3H8\") == \"6\\n\"",
        "num_ids": 1924,
        "indeed": false
    },
    {
        "number": 4729,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    password, message = stdin.split()\n    password = list(password)\n    message = list(message)\n\n    i = 0\n    for c in message:\n        if c in password and i > 0:\n            return \"FAIL\"\n        password.append(c)\n        i += 1\n\n    return \"PASS\"",
        "test": "assert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"",
        "num_ids": 743,
        "indeed": false
    },
    {
        "number": 4730,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    opening_delimiters = \"()[]{}\"\n    closing_delimiters = \")]}\"\n    stack = []\n    index = 0\n\n    while index < len(stdin):\n        if stdin[index] == \" \":\n            index += 1\n            continue\n\n        if stdin[index] in opening_delimiters:\n            stack.append((stdin[index], index))\n            index += 1\n        elif stdin[index] in closing_delimiters:\n            if not stack:\n                return \"ok so far\"\n            expected_delimiter, expected_index = stack.pop()\n\n            if expected_delimiter == \"(\":\n                if stdin[index]!= \")\":\n                    return f\"] {index}\"\n            elif expected_delimiter == \"[\":\n                if stdin[index]!= \"]\":\n                    return f\"] {index}\"\n            elif expected_delimiter == \"{\":\n                if stdin[index]!= \"}\":\n                    return f\"] {index}\"\n            else:\n                return \"not a valid delimiter\"\n\n            index += 1\n        else:\n            index += 1\n\n    if stack:\n        return f\"] {index}\"\n\n    return \"ok so far\"",
        "test": "assert solution(\"13\\n(([] [[]] ())\") == \"ok so far\"",
        "num_ids": 1149,
        "indeed": false
    },
    {
        "number": 4731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    history = []\n    player = 1\n    for _ in range(N):\n        word = input().strip()\n        if word in history:\n            return f\"Player {player} lost\"\n        history.append(word)\n        player = 3 - player\n    return \"Fair Game\"",
        "test": "assert solution(input()) == \"Fair Game\"",
        "num_ids": 1125,
        "indeed": false
    },
    {
        "number": 4732,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    first_operand = int(input_list[0])\n    operation = input_list[1]\n    second_operand = int(input_list[2])\n\n    if operation == '+':\n        result = first_operand + second_operand\n    else:\n        result = first_operand * second_operand\n\n    return str(result)\n",
        "test": "assert solution(\"1000\\n*\\n100\") == \"100000\"",
        "num_ids": 551,
        "indeed": true
    },
    {
        "number": 4733,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    deck_size, shuffling_type = map(int, stdin.split())\n    if shuffling_type == \"out\":\n        shuffles = deck_size // 2\n    else:\n        shuffles = deck_size - 1\n    return str(shuffles)",
        "test": "assert solution(\"8 in\") == \"6\\n\"",
        "num_ids": 658,
        "indeed": false
    },
    {
        "number": 4734,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    Y, P = stdin.split()\n    \n    # Handle special cases\n    if Y.endswith(\"e\"):\n        extended_name = Y + \"x\" + P\n    elif Y.endswith(\"i\") or Y.endswith(\"o\") or Y.endswith(\"u\"):\n        Y = Y[:-1]\n        extended_name = Y + \"x\" + P\n    elif Y.endswith(\"ex\"):\n        extended_name = Y + P\n    else:\n        extended_name = Y + \"ex\" + P\n        \n    return extended_name",
        "test": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"",
        "num_ids": 701,
        "indeed": false
    },
    {
        "number": 4735,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    y = int(stdin)\n    if 2018 <= y <= 10000:\n        if (y % 26 == 0) or ((y % 26!= 0) and (y - 26) % 26 == 0):\n            return \"yes\"\n        else:\n            return \"no\"\n    else:\n        return \"Invalid input\"",
        "test": "assert solution(\"2019\") == \"no\", \"Sample Input 2: Output should be no.\"",
        "num_ids": 436,
        "indeed": false
    },
    {
        "number": 4736,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    def combinations(n: int, k: int) -> int:\n        return factorial(n) // (factorial(k) * factorial(n - k))\n\n    def factorial(n: int) -> int:\n        if n == 0:\n            return 1\n        return n * factorial(n - 1)\n\n    input_data = [int(x) for x in stdin.split()]\n\n    n_1 = input_data[0]\n    n_2 = input_data[1]\n    n_3 = input_data[2]\n    n_4 = input_data[3]\n    n_5 = input_data[4]\n    n_6 = input_data[5]\n    n_7 = input_data[6]\n    n_8 = input_data[7]\n    n_9 = input_data[8]\n    n_10 = input_data[9]\n    K = input_data[10]\n\n    n_cards = [n_1, n_2, n_3, n_4, n_5, n_6, n_7, n_8, n_9, n_10]\n\n    def is_ascending(cards: List[int]) -> bool:\n        return all(cards[i] <= cards[i + 1] for i in range(len(cards) - 1))\n\n    def generate_combinations(cards: List[int], used_cards: List[int], index: int) -> List[List[int]]:\n        result = []\n        if index == len(cards):\n            if is_ascending(used_cards):\n                result.append(used_cards[:])\n        else:\n            for i in range(1, 10):\n                if i not in used_cards:\n                    used_cards.append(i)\n                    generate_combinations(cards, used_cards, index + 1)\n                    used_cards.pop()\n        return result\n\n    result = generate_combinations(n_cards, [], 0)\n    ways = len(result)\n    print(ways)\n    return str(ways)\n",
        "test": "assert solution(",
        "num_ids": 1364,
        "indeed": false
    },
    {
        "number": 4737,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    arr = list(map(int, stdin.split()[1:]))\n\n    penalty_time = 0\n    max_problems_ac = 0\n    for i in range(n):\n        minutes = arr[i]\n        if minutes > 300:\n            return \"0 0\"\n\n        if i == p:\n            continue\n        elif i > p:\n            max_problems_ac += 1\n            penalty_time += minutes\n        else:\n            max_problems_ac += 1\n\n    return f\"{max_problems_ac} {penalty_time}\"",
        "test": "assert solution(open('sample_input2.txt').read()) == '2 570'",
        "num_ids": 1502,
        "indeed": false
    },
    {
        "number": 4738,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    k = 1\n    while True:\n        if len(s) % k == 0:\n            break\n        k += 1\n\n    return str(k)",
        "test": "assert solution(\"aaaaaaaa\") == \"1\"",
        "num_ids": 327,
        "indeed": false
    },
    {
        "number": 4739,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    M, N = map(int, stdin.split()[0].split())\n    times, distances = stdin.split()[1].split(), stdin.split()[2].split()\n\n    def calculate_speed(distance: int) -> float:\n        return (2 * distance) / (3600 * (times[1] - times[0]))\n\n    distinct_speeds = set()\n    for distance in distances:\n        speed = calculate_speed(int(distance))\n        distinct_speeds.add(speed)\n\n    sorted_distances = sorted(distinct_speeds)\n\n    print(len(distinct_speeds))\n    print(\" \".join(map(str, sorted_distances)))\n\n    return \"\"",
        "test": "assert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\") == \"1\\n1\"",
        "num_ids": 1899,
        "indeed": false
    },
    {
        "number": 4740,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin)!= 7:\n        return '0'\n\n    prefix, line = stdin[:3], stdin[-4:]\n    if prefix!= '555':\n        return '0'\n\n    return '1'\n",
        "test": "assert solution(\"5519876\") == \"0\"",
        "num_ids": 388,
        "indeed": true
    },
    {
        "number": 4741,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split('/'))\n    if b == 0:\n        return '0/1'\n\n    fahrenheit = a/b\n    celsius = (fahrenheit - 32) * 5/9\n    result = f'{int(celsius)}/{int(b)}'\n\n    return result",
        "test": "assert solution(\"32/1\") == \"0/1\"",
        "num_ids": 593,
        "indeed": false
    },
    {
        "number": 4742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    notes = [note.strip() for note in stdin.split()]\n    for i in range(len(notes) - 1):\n        for j in range(i + 1, len(notes)):\n            if notes[i] == notes[j]:\n                if notes[i] == 'C':\n                    notes[i], notes[j] = notes[j], notes[i]\n                elif notes[i] == 'C#':\n                    notes[i], notes[j] = notes[j], notes[i]\n                    if notes[i] == 'A':\n                        notes[i], notes[j] = notes[j], notes[i]\n                elif notes[i] == 'D':\n                    notes[i], notes[j] = notes[j], notes[i]\n                elif notes[i] == 'D#':\n                    notes[i], notes[j] = notes[j], notes[i]\n                    if notes[i] == 'B':\n                        notes[i], notes[j] = notes[j], notes[i]\n                elif notes[i] == 'E':\n                    notes[i], notes[j] = notes[j], notes[i]\n                elif notes[i] == 'F':\n                    notes[i], notes[j] = notes[j], notes[i]\n                elif notes[i] == 'F#':\n                    notes[i], notes[j] = notes[j], notes[i]\n                    if notes[i] == 'C':\n                        notes[i], notes[j] = notes[j], notes[i]\n                elif notes[i] == 'G':\n                    notes[i], notes[j] = notes[j], notes[i]\n                elif notes[i] == 'G#':\n                    notes[i], notes[j] = notes[j], notes[i]\n                    if notes[i] == 'F':\n                        notes[i], notes[j] = notes[j], notes[i]\n                elif notes[i] == 'A':\n                    notes[i], notes[j] = notes[j], notes[i]\n                elif notes[i] == 'A#':\n                    notes[i], notes[j] = notes[j], notes[i]\n                    if notes[i] == 'G':\n                        notes[i], notes[j] = notes[j], notes[i]\n                elif notes[i] == 'B':\n                    notes[i], notes[j] = notes[j], notes[i]\n    return 'Transposition' if notes[0] == notes[-1] else 'Retrograde' if notes[0] == notes[2] else 'Inversion'\n\ndef",
        "test": "assert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\\n\"",
        "num_ids": 2112,
        "indeed": false
    },
    {
        "number": 4743,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    for i, word in enumerate(words):\n        words[i] = word.replace(\"a\", \"ah\", 1).replace(\"A\", \"Ah\", 1)\n        words[i] = words[i].replace(\"e\", \"eh\", 1).replace(\"E\", \"Eh\", 1)\n        words[i] = words[i].replace(\"i\", \"ih\", 1).replace(\"I\", \"Ih\", 1)\n        words[i] = words[i].replace(\"o\", \"oh\", 1).replace(\"O\", \"Oh\", 1)\n        words[i] = words[i].replace(\"u\", \"uh\", 1).replace(\"U\", \"Uh\", 1)\n        words[i] = words[i].replace(\"h\", \"h\")\n        words[i] = words[i].replace(\"A\", \"ah\")\n        words[i] = words[i].replace(\"E\", \"eh\")\n        words[i] = words[i].replace(\"I\", \"ih\")\n        words[i] = words[i].replace(\"O\", \"oh\")\n        words[i] = words[i].replace(\"U\", \"uh\")\n        words[i] = words[i].replace(\"Dach\", \"each\")\n        words[i] = words[i].replace(\"Gip-go\", \"Hip-po\")\n        words[i] = words[i].replace(\"Dog\", \"Dogah\")\n        words[i] = words[i].replace(\"Gipoh\", \"Hip-poh\")\n        words[i] = words[i].replace(\"-\", \"\")\n        if i == len(words) - 1:\n            words[i] += \"ah\" if words[i].endswith(\"h\") else \"oh\"\n    return \" \".join(words)\n",
        "test": "assert solution(\"Cat-a-pil-lar\") == \"Catacillar\"",
        "num_ids": 2527,
        "indeed": false
    },
    {
        "number": 4744,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    V = int(stdin)\n    if V == 1:\n        return \"6\"\n    elif V == 2:\n        return \"14\"\n    else:\n        surface_area = 6 * 4 * 3 / 2\n        surface_area_per_cube = 1 / 6\n        cost_per_cube = surface_area * surface_area_per_cube\n        total_cost = cost_per_cube * V\n        return str(total_cost)",
        "test": "assert solution(\"1\") == \"6\"",
        "num_ids": 451,
        "indeed": false
    },
    {
        "number": 4745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, X = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n\n    participating_items = []\n    max_participating_items = 0\n\n    for i in range(n):\n        if prices[i] >= X:\n            participating_items.append(i)\n            max_participating_items = max(max_participating_items, len(participating_items))\n\n    return str(max_participating_items)\n\nprint(solution(\"5 6\\n1 2 3 4 5\"))  # Output: 3\nprint(solution(\"5 10\\n4 8 1 9 7\"))  # Output: 2\nprint(solution(\"4 10\\n1 3 1 7\"))  # Output: 4",
        "test": "assert solution(\"5 10\\n4 8 1 9 7\") == \"2\\n\"",
        "num_ids": 1082,
        "indeed": false
    },
    {
        "number": 4746,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    lines = stdin.strip().split('\\n')\n    n, C = map(int, lines[0].split())\n    a = list(map(int, lines[1].split()))\n    b = list(map(int, lines[2].split()))\n\n    # check for consistency\n    if a[0] > C or a[1] > C or b[0] > C or b[1] > C:\n        return 'impossible'\n    if any(a[i] > 0 for i in range(2, n + 1)) or any(b[i] > 0 for i in range(2, n + 1)):\n        return 'impossible'\n    if any(a[i] + b[i] > C for i in range(2, n + 1)):\n        return 'impossible'\n\n    # calculate minimum number of trains\n    trains = [0] * n\n    for i in range(1, n):\n        if b[i] - a[i] > 0:\n            trains[i] = trains[i - 1] + 1\n        else:\n            trains[i] = trains[i - 1]\n\n    # check that trains start and finish empty\n    if trains[n - 1] == 0 or (trains[n - 1] == 1 and a[n] + b[n] > 0):\n        return 'possible'\n\n    # check that trains do not wait for the last station\n    if a[n] + b[n] > 0:\n        return 'impossible'\n\n    # check that trains do not wait in vain\n    if any(a[i] > 0 and b[i] > 0 for i in range(1, n - 1)):\n        return 'impossible'\n\n    # if all checks pass, return possible\n    return 'possible'\n",
        "test": "assert solution(\"1 2\\n0 1 1\\n1 0 0\") == \"possible\"",
        "num_ids": 1232,
        "indeed": false
    },
    {
        "number": 4747,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"3\"\n    else:\n        expected = 1\n        for _ in range(k):\n            expected *= (n - 1) / (n - 2)\n        return str(expected)",
        "test": "assert solution(\"1 1\") == \"1\"",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 4748,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    H, N, M = map(int, stdin.split())\n    # Solve for H <= 3 using a simple approach\n    if H <= 3:\n        A = 0\n        B = 0\n        for i in range(H):\n            if i < H//2:\n                A += 2**i\n            else:\n                B += (i - H//2) * 4\n        if A >= M:\n            A -= M\n        if B >= N:\n            B -= N\n        return str(A) + \" \" + str(B)\n\n    # Solve for H > 3 using a recursive approach\n    def dfs(H, N, M, cur_height, cur_width, bricks_left):\n        if cur_height == H and bricks_left >= N and bricks_left >= M:\n            return cur_width, 0\n        if bricks_left < N:\n            return cur_width, 0\n        if bricks_left < M:\n            return cur_width, 0\n        for i in range(cur_width, cur_width + cur_height, 2):\n            new_bricks = bricks_left - (i // 2) * 4\n            if new_bricks >= N and new_bricks >= M:\n                new_width, extra = dfs(H, N, M, cur_height, i, new_bricks)\n                if extra > 0:\n                    return new_width, extra\n        return 0, 0\n\n    _, extra = dfs(H, N, M, 0, 2, 5)\n    return str(extra) + \" \" + str(extra)",
        "test": "assert solution(\"1 1 0\") == \"0 0\"",
        "num_ids": 1324,
        "indeed": false
    },
    {
        "number": 4749,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    grid = [list(line.strip()) for line in stdin.split()[1:]]\n    \n    # check rows\n    for i in range(n):\n        black_count = 0\n        white_count = 0\n        for j in range(n):\n            if grid[i][j] == 'B':\n                black_count += 1\n            elif grid[i][j] == 'W':\n                white_count += 1\n        if black_count!= white_count:\n            return '0'\n    \n    # check columns\n    for j in range(n):\n        black_count = 0\n        white_count = 0\n        for i in range(n):\n            if grid[i][j] == 'B':\n                black_count += 1\n            elif grid[i][j] == 'W':\n                white_count += 1\n        if black_count!= white_count:\n            return '0'\n    \n    # check for consecutive squares\n    for i in range(n):\n        black_count = 0\n        for j in range(i+1, n):\n            if grid[i][j] == 'B':\n                black_count += 1\n            elif grid[i][j]!= grid[i][j-1]:\n                break\n        if black_count > 0:\n            return '0'\n    \n    # check for consecutive squares\n    for j in range(n):\n        black_count = 0\n        for i in range(n):\n            if grid[i][j] == 'B':\n                black_count += 1\n            elif grid[i][j]!= grid[i+1][j]:\n                break\n        if black_count > 0:\n            return '0'\n    \n    return '1'",
        "test": "assert solution(\"4\\nBWWB\\nBWBB\\nWBBW\\nWBWW\\n\") == \"0\"",
        "num_ids": 1694,
        "indeed": false
    },
    {
        "number": 4750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    queries = [list(map(int, input().split())) for _ in range(int(stdin.split()[0]))]\n\n    ans = []\n\n    for i, (l1, r1, l2, r2) in enumerate(queries):\n        if l1 >= l2 and r1 <= r2:\n            a, b = l1, r1\n        elif l2 >= l1 and r2 <= r1:\n            a, b = l2, r2\n        else:\n            a, b = l1, r1\n            if a > b:\n                a, b = b, a\n\n        if a < b:\n            ans.append(f\"{a} {b}\")\n\n    return \"\\n\".join(ans)\n\nwith open(\"input.txt\", \"r\") as file:\n    input_data = file.read()\n\noutput_data = solution(input_data)\n\nwith open(\"output.txt\", \"w\") as file:\n    file.write(output_data)",
        "test": "assert solution(",
        "num_ids": 1864,
        "indeed": false
    },
    {
        "number": 4751,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    head = [int(x) for x in stdin.split(',')]\n    pos = int(stdin.split(',')[1])\n\n    def has_cycle(head: ListNode) -> bool:\n        slow = head\n        fast = head\n\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n\n            if slow == fast:\n                return True\n\n        return False\n\n    class ListNode:\n        def __init__(self, val=0, next=None):\n            self.val = val\n            self.next = next\n\n    dummy = ListNode(0, head)\n    head = dummy\n\n    for i in range(len(head)):\n        if i == pos:\n            head.next.next.next.val = -1\n        head = head.next\n\n    return str(has_cycle(head))\n",
        "test": "assert solution(\"head = [1,2], pos = 0\") == \"true\"",
        "num_ids": 1704,
        "indeed": false
    },
    {
        "number": 4752,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    input_array = [int(i) for i in stdin.split()]\n    target = input_array.pop()\n    input_array.sort()\n    left = 0\n    right = len(input_array) - 1\n\n    while left < right:\n        current_sum = input_array[left] + input_array[right]\n        if current_sum == target:\n            return str(left) +'' + str(right)\n        elif current_sum < target:\n            left += 1\n        else:\n            right -= 1\n\n    return 'no solution'\n\ninput_array = [2, 7, 11, 15]\ntarget = 9\noutput = solution(str(input_array) +'' + str(target))\nprint(output)",
        "test": "assert solution(\"nums = [3, 2, 4], target = 6,\") == \"return [1, 2].\"",
        "num_ids": 700,
        "indeed": false
    },
    {
        "number": 4753,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    intersections = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if i == j:\n                continue\n            for k in range(j+1, n):\n                if i == k or j == k:\n                    continue\n                for l in range(k+1, n):\n                    if i == l or j == l or k == l:\n                        continue\n                    if (i, j, k, l) in polygons:\n                        intersections += 1\n    \n    return str(intersections)\n\npolygons = set([(0, 1, 2, 3), (1, 2, 3, 4), (2, 3, 4, 0), (3, 4, 0, 1)])",
        "test": "assert solution(\"3\\n\") == \"0\"",
        "num_ids": 914,
        "indeed": false
    },
    {
        "number": 4754,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    socks = list(map(int, stdin.split()[1:]))\n    # sort the socks by type\n    socks.sort()\n\n    # initialize the piles\n    pile1 = []\n    pile2 = []\n\n    # iterate through the socks and move them to the correct pile\n    for sock in socks:\n        if sock <= n:\n            pile1.append(sock)\n        else:\n            pile2.append(sock)\n\n    # check if it is possible to pair the socks\n    if pile1 == [] and pile2 == []:\n        return \"impossible\"\n\n    # initialize the result\n    result = 0\n\n    # iterate through the piles and pair the top socks\n    while pile1 and pile2:\n        # move the top socks from each pile to the result\n        result += max(pile1[0], pile2[0])\n\n        # move the top socks from the top of the appropriate pile to the top of the other pile\n        if pile1[0] == pile2[0]:\n            pile1.pop(0)\n            pile2.pop(0)\n        elif pile1[0] <= n:\n            pile1.pop(0)\n        else:\n            pile2.pop(0)\n\n        # increment the result\n        result += 1\n\n    # add the remaining socks to the result\n    result += len(pile1) + len(pile2)\n\n    return str(result)",
        "test": "assert solution(\"2\\n1 2 2 1\\n\") == \"4\"",
        "num_ids": 1504,
        "indeed": false
    },
    {
        "number": 4755,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    candy_price, zeros = map(int, stdin.split())\n    amount = candy_price * (10 ** zeros)\n    return str(round(amount))",
        "test": "assert solution(\"123450995 1\") == \"123451000\", \"Sample Input 2: 123450995 1, Sample Output 2: 123451000\"",
        "num_ids": 837,
        "indeed": false
    },
    {
        "number": 4756,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    def distance(x1: int, y1: int, x2: int, y2: int) -> float:\n        return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n\n    def min_unusefulness(distances: List[float]) -> float:\n        total_unusefulness = 0\n        min_distance = float('inf')\n        for distance in distances:\n            if distance < min_distance:\n                min_distance = distance\n            else:\n                total_unusefulness += min_distance - distance\n        return total_unusefulness\n\n    citizens = []\n    for i in range(int(stdin.split()[0])):\n        x, y = map(int, stdin.split()[i + 1].split())\n        citizens.append((x, y))\n\n    distances = []\n    for i in range(len(citizens)):\n        for j in range(i + 1, len(citizens)):\n            distances.append(distance(citizens[i][0], citizens[i][1], citizens[j][0], citizens[j][1]))\n\n    a = min_unusefulness(distances) / sum(1 for _ in distances) * 1000  # Minimizing the total unusefulness\n    return f\"{a:.3f}\"\n",
        "test": "assert solution(\"\"\"\\",
        "num_ids": 1601,
        "indeed": false
    },
    {
        "number": 4757,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    villagers, n = map(int, stdin.split())\n    k = []\n    for i in range(n):\n        k.append(list(map(int, stdin.split())))\n\n    def dfs(x):\n        if x == 0:\n            return [villagers[x]]\n        for y in range(x):\n            if k[y][x] == 0:\n                for child in dfs(y):\n                    result.add(child)\n\n    result = set()\n    for i in range(n):\n        if k[0][i] == 1:\n            for child in dfs(0):\n                result.add(child)\n\n    return''.join(str(i) for i in sorted(result))\n\nsample_input1 = '''4\n3\n2 1 2\n3 2 3 4\n3 4 2 1'''\n\nsample_output1 = '''1\n2\n4'''\n\nsample_input2 = '''8\n5\n4 1 3 5 6\n2 5 6\n3 6 7 8\n2 6 2\n4 2 6 8 1'''\n\nsample_output2 = '''1\n2\n6\n8'''\n\nprint(solution(sample_input1))\nprint(solution(sample_input2))",
        "test": "assert solution(\"\"\"4",
        "num_ids": 1421,
        "indeed": false
    },
    {
        "number": 4758,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    N, T, M = map(int, stdin.split())\n    num_designs = N * T * M\n    return str(num_designs)",
        "test": "assert solution(\"3 4 5\") == \"60\", \"Sample Input 1: Expected Output: 60, Received Output: \" + str(solution(\"3 4 5\"))",
        "num_ids": 685,
        "indeed": true
    },
    {
        "number": 4759,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    at_bats = list(map(int, stdin.split()[1:]))\n\n    batting_average = 0\n    slugging_percentage = 0\n\n    for at_bat in at_bats:\n        if at_bat == 0:\n            batting_average += 0\n        elif at_bat == 1:\n            batting_average += 0.5\n        elif at_bat == 2:\n            batting_average += 1\n        elif at_bat == 3:\n            batting_average += 1.5\n        elif at_bat == 4:\n            batting_average += 2\n\n        if at_bat == -1:\n            slugging_percentage += 0.5\n        else:\n            slugging_percentage += 1\n\n    return f\"{slugging_percentage:.3f}\"\n",
        "test": "assert solution('3\\n1 -1 4') == '2.5'",
        "num_ids": 838,
        "indeed": false
    },
    {
        "number": 4760,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    \n    # write all integers between 2 and N, inclusive\n    primes = list(range(2, N+1))\n    \n    # find the smallest number not already crossed out\n    for prime in primes:\n        if all(i % prime!= 0 for i in primes):\n            print(prime)\n            primes.remove(prime)\n            break\n    \n    # cross out the prime and its multiples\n    crossed_out = [0] * N\n    \n    for i in range(2, N+1):\n        if crossed_out[i-2] == 0:\n            crossed_out[i-2] = 1\n            crossed_out.extend(range(i*i, N+1, i))\n            \n            if len(crossed_out) == K:\n                break\n    \n    return str(primes[K-1])",
        "test": "assert solution(\"15 12\") == \"7\", \"Sample Input 2: Sample Output 2: \" + solution(\"15 12\")",
        "num_ids": 974,
        "indeed": false
    },
    {
        "number": 4761,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    L, H = map(int, stdin.split())\n    count = 0\n    for i in range(L, H+1):\n        digits = sorted(list(str(i)))\n        if digits == list(map(str, range(1, 10))):\n            count += 1\n    return str(count)",
        "test": "assert solution(\"198765 198769\") == \"0\", \"Sample Input 2\"",
        "num_ids": 800,
        "indeed": false
    },
    {
        "number": 4762,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    total_gifts = N * (N - 1) // 2\n    people_who_did_not_give_gifts = 0\n    for i in range(1, N + 1):\n        if i!= N:\n            people_who_did_not_give_gifts += N - i\n    return str(1 - (total_gifts / people_who_did_not_give_gifts))",
        "test": "assert solution(\"3\\n\") == \"0.66666667\"",
        "num_ids": 560,
        "indeed": false
    },
    {
        "number": 4763,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    # Base cases\n    if n == 180:\n        return \"triple 20\\n\" * 3\n\n    # Using binary search to find the maximum score\n    left, right = 1, 20\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * 2 + 1 <= 180:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # Finding the minimum number of throws needed to score n\n    for i in range(left, right + 1):\n        if i * i * 3 <= n:\n            return f\"triple {i}\\n\" * 3\n        elif i * i + i <= n:\n            return f\"double {i}\\n\" * 3\n        else:\n            return f\"single {i}\\n\" * 3",
        "test": "assert solution(stdin=\"180\") == \"triple 20\\ntriple 20\\ntriple 20\\n\"",
        "num_ids": 1309,
        "indeed": false
    },
    {
        "number": 4764,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, h, v = map(int, stdin.split())\n    if h + v == n:\n        cake_area = 4 * n * n\n    else:\n        cake_area = 4 * h * h + 4 * v * v + 4 * (n - h - v) * (n - h - v)\n    return str(cake_area)",
        "test": "assert solution(\"5 2 2\") == \"36\"",
        "num_ids": 744,
        "indeed": false
    },
    {
        "number": 4765,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n, *input_data = stdin.split()\n    n = int(n)\n\n    sourness = list(map(int, input_data[:n]))\n    bitterness = list(map(int, input_data[n:2*n]))\n\n    absolute_difference = abs(sum(sourness) - sum(bitterness))\n\n    return str(absolute_difference)",
        "test": "assert solution(\"1\\n3 10\") == \"7\"",
        "num_ids": 750,
        "indeed": false
    },
    {
        "number": 4766,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    commands = stdin.strip().split('\\n')\n    result = []\n    \n    for command in commands:\n        command = command.strip()\n        \n        if command.startswith('Simon says'):\n            words = command.split(' ')\n            words.pop(0)  # remove 'Simon says'\n            result.append(' '.join(words))\n        else:\n            result.append(command)\n    \n    return '\\n'.join(result)",
        "test": "assert solution(\"3\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\n\") == \" raise your right hand.\\n raise your left hand.\\n\"",
        "num_ids": 602,
        "indeed": false
    },
    {
        "number": 4767,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    registers = [int(x) for x in stdin.split()]\n    v_2 = registers[0]\n    v_3 = registers[1]\n    v_5 = registers[2]\n    v_7 = registers[3]\n    v_11 = registers[4]\n    v_13 = registers[5]\n    v_17 = registers[6]\n    v_19 = registers[7]\n\n    size_2 = v_2 % 2\n    size_3 = (v_3 % 3) + (size_2 * 2)\n    size_5 = (v_5 % 5) + (size_3 * 2)\n    size_7 = (v_7 % 7) + (size_5 * 2)\n    size_11 = (v_11 % 11) + (size_7 * 2)\n    size_13 = (v_13 % 13) + (size_11 * 2)\n    size_17 = (v_17 % 17) + (size_13 * 2)\n    size_19 = (v_19 % 19) + (size_17 * 2)\n\n    total_operations = 0\n    while size_19 < 20:\n        size_2 = (size_2 + 1) % 2\n        size_3 = (size_3 + 1) % 3\n        size_5 = (size_5 + 1) % 5\n        size_7 = (size_7 + 1) % 7\n        size_11 = (size_11 + 1) % 11\n        size_13 = (size_13 + 1) % 13\n        size_17 = (size_17 + 1) % 17\n        size_19 = (size_19 + 1) % 19\n        total_operations += 1\n\n    return str(total_operations)",
        "test": "assert solution(\"1 2 4 6 10 12 16 18\") == \"0\"",
        "num_ids": 2548,
        "indeed": false
    },
    {
        "number": 4768,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    trees = []\n    for _ in range(n):\n        sample = stdin.split()[1]\n        trees.append(list(sample))\n    \n    def dfs(nodes: List[int], path: List[int]) -> int:\n        if len(nodes) == 1:\n            return 0\n        \n        best = float('inf')\n        for i in range(len(nodes)):\n            if i not in path:\n                path.append(i)\n                child_nodes = nodes[:i] + nodes[i+1:]\n                child_path = path[:i] + [i]\n                best = min(best, dfs(child_nodes, child_path) + 1)\n                path.pop()\n        \n        return best\n\n    return str(dfs(trees, []))",
        "test": "assert solution(\"4 1\\nA\\nA\\nG\\nT\") == \"2\\n0 1\\n0 2\\n0 3\"",
        "num_ids": 1642,
        "indeed": false
    },
    {
        "number": 4769,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    # Remove any spaces from the input\n    word = ''.join(stdin.split())\n\n    # Check if the word is a multigram\n    if len(word) < 3:\n        return -1\n\n    # Sort the characters of the word\n    sorted_word = sorted(word)\n\n    # Check if the sorted word is a multigram\n    for i in range(len(sorted_word)):\n        for j in range(i + 2, len(sorted_word) + 1):\n            if sorted_word[i:j] == sorted_word[j - 1:i - 1][::-1]:\n                return sorted_word[i]\n\n    return -1",
        "test": "assert solution(\"aaaa\") == \"a\"",
        "num_ids": 706,
        "indeed": false
    },
    {
        "number": 4770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    \n    if N > M:\n        return \"Dr. Chaz needs {} more piece[s] of chicken!\".format(N - M)\n    else:\n        return \"Dr. Chaz will have {} piece[s] of chicken left over!\".format(M - N)",
        "test": "assert solution(\"2 3\") == \"Dr. Chaz will have 1 piece of chicken left over!\"",
        "num_ids": 735,
        "indeed": false
    },
    {
        "number": 4771,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, V = map(int, stdin.split())\n    boxes = []\n    for _ in range(n):\n        l, w, h = map(int, stdin.split())\n        boxes.append((l, w, h))\n\n    boxes.sort(key=lambda x: x[0], reverse=True)\n    for box in boxes:\n        v = box[0] * box[1] * box[2]\n        if v >= V:\n            return str(v - V)",
        "test": "assert solution(\"3 30\\n1 1 1\\n5 2 3\\n5 2 1\\n\") == \"0\\n\", \"Failed test case 2\"",
        "num_ids": 694,
        "indeed": false
    },
    {
        "number": 4772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    board = []\n    for _ in range(R):\n        row = list(stdin.readline().strip())\n        board.append(row)\n\n    def is_valid(i: int, j: int) -> bool:\n        return 0 <= i < R and 0 <= j < C and board[i][j] == '#'\n\n    def is_valid_word(word: str) -> bool:\n        for i in range(R):\n            for j in range(C):\n                if board[i][j] == '#':\n                    continue\n                for w in word:\n                    if board[i][j]!= w:\n                        break\n                else:\n                    return True\n        return False\n\n    def lexicographically_smallest_word(word: str) -> str:\n        for i in range(len(word)):\n            if word[i] < 'a' or word[i] > 'z':\n                continue\n            sorted_word = sorted(word[:i] + word[i+1:])\n            if is_valid_word(sorted_word):\n                return sorted_word\n        return ''\n\n    word = lexicographically_smallest_word('kla')\n    return word",
        "test": "assert solution(\"\"\"4 4",
        "num_ids": 3058,
        "indeed": false
    },
    {
        "number": 4773,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    def count_macro_chars(route: str) -> int:\n        macro = {\n            \"N\": \"NNEEE\",\n            \"S\": \"SSWWN\",\n            \"E\": \"EEEEN\",\n            \"W\": \"WNNEEE\",\n        }\n        return sum(1 for c in route if c in macro.values())\n\n    route = stdin.strip()\n    macro_count = count_macro_chars(route)\n    return str(len(route) + macro_count)\n",
        "test": "assert solution(\"NSEW\") == \"4\"",
        "num_ids": 694,
        "indeed": false
    },
    {
        "number": 4774,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n\n    # Check if the equation is valid\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return \"problems ahead\"\n\n    expressions = []\n\n    # Check if there are valid operators\n    for op in [\"+\", \"-\", \"*\", \"/\"]:\n        if op == \"+\" and (b + d == 0 or c + d == 0):\n            continue\n        if op == \"-\" and (b - d == 0 or c - d == 0):\n            continue\n        if op == \"*\" and (b * d == 0 or c * d == 0):\n            continue\n        if op == \"/\" and (b // d == 0 or c // d == 0):\n            continue\n\n        # Check if the equation can be solved\n        num1, den1, num2, den2 = (a, b, c, d) if op == \"+\" else (b, c, d, a)\n        sol1 = num1 * den2 - num2 * den1\n        sol2 = num1 * den2 + num2 * den1\n\n        if sol1!= 0 or sol2!= 0:\n            expressions.append(f\"{num1} {op} {den2} = {num2} {op} {den1}\")\n\n    expressions.sort()\n    return \"\\n\".join(expressions)\n",
        "test": "assert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n\"",
        "num_ids": 2655,
        "indeed": false
    },
    {
        "number": 4775,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    N = len(A)\n    M = len(B)\n    grid = [['.']*N for _ in range(M)]\n    for i in range(M):\n        for j in range(N):\n            if A[j] == B[i]:\n                grid[i][j] = A[j]\n                break\n        else:\n            continue\n        for k in range(j+1, N):\n            if A[k] == B[i]:\n                grid[i][k] = A[k]\n                break\n        else:\n            continue\n        for l in range(k+1, N):\n            if A[l] == B[i]:\n                grid[i][l] = A[l]\n                break\n        else:\n            continue\n        break\n    return '\\n'.join([''.join(line) for line in grid])",
        "test": "assert solution(\"BANANA PIDZAMA\") == \"\"\"",
        "num_ids": 1016,
        "indeed": false
    },
    {
        "number": 4776,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    events = []\n    for _ in range(n):\n        s, t = map(int, stdin.split()[1:])\n        events.append((s, t))\n    food_served = set()\n    for s, t in events:\n        for day in range(s, t + 1):\n            food_served.add(day)\n    return str(len(food_served))",
        "test": "assert solution(\"\"\"\\",
        "num_ids": 637,
        "indeed": false
    },
    {
        "number": 4777,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    A_count = 0\n    B_count = 0\n    prev_letter = 'B'\n\n    for _ in range(K):\n        current_letter = 'A' if prev_letter == 'A' else 'B'\n        prev_letter = current_letter\n\n        if current_letter == 'A':\n            A_count += 1\n        else:\n            B_count += 1\n\n    return f'{A_count} {B_count}'",
        "test": "assert solution(\"1\") == \"0 1\"",
        "num_ids": 521,
        "indeed": false
    },
    {
        "number": 4778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    P, D = map(int, lines[0].split())\n    precincts = []\n    for i in range(1, P + 1):\n        district, a, b = map(int, lines[i].split())\n        precincts.append((district, a, b))\n\n    for i in range(1, D + 1):\n        precincts_for_district = [p for p in precincts if p[0] == i]\n        party_votes = {\n            'A': sum(v for _, v, _ in precincts_for_district),\n            'B': sum(v for _, _, v in precincts_for_district),\n        }\n        party_votes['A'] -= sum(v for _, v, _ in precincts_for_district)\n        party_votes['B'] -= sum(v for _, _, v in precincts_for_district)\n\n        wins = min(party_votes, key=party_votes.get)\n        wasted_votes = party_votes[wins] - party_votes[party_votes.keys().difference({wins})]\n        print(wins)\n        print(wasted_votes['A'], wasted_votes['B'])\n\n        efficiency_gap = abs(wasted_votes['A'] - wasted_votes['B']) / party_votes['A']\n        print(efficiency_gap)\n\n    return ''\n",
        "test": "assert solution(",
        "num_ids": 2050,
        "indeed": false
    },
    {
        "number": 4779,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    max_val = max(a[0]**2, a[1]**2)\n    \n    for i in range(2, n):\n        max_val = max(max_val, a[i]**2 + a[i+1]**2)\n    \n    return str(max_val)",
        "test": "assert solution(\"2\\n1\\n1\\n\") == \"1\"",
        "num_ids": 614,
        "indeed": false
    },
    {
        "number": 4780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    def swap_rows(row1: str, row2: str) -> str:\n        if row1 == row2:\n            return row1\n        return ''.join(sorted(row1 + row2))\n\n    def jump(row: str, index: int) -> str:\n        if index == len(row) - 1:\n            return row\n        return row[index] + row[index + 1]\n\n    def ant_order(ants: str) -> str:\n        return ''.join(sorted(ants))\n\n    def process(ants: str, row1: str, row2: str, time: int) -> str:\n        row1_order = ant_order(row1)\n        row2_order = ant_order(row2)\n        row1_jumped_over = jump(row1_order, time % len(row1))\n        row2_jumped_over = jump(row2_order, time % len(row2))\n        if row1_order!= row2_order and row1_order.startswith(row2_order):\n            return swap_rows(row1_jumped_over, row2_jumped_over)\n        return swap_rows(row1_order, row2_order)\n\n    rows = stdin.split('\\n')\n    n1, n2 = map(int, rows[0].split())\n    row1_ants = rows[1].upper()\n    row2_ants = rows[2].upper()\n    time = int(rows[3])\n\n    row1_ordered = ant_order(row1_ants)\n    row2_ordered = ant_order(row2_ants)\n\n    result = swap_rows(row1_ordered, row2_ordered)\n    result = process(result, row1_ants, row2_ants, time)\n    result = ant_order(result)\n\n    return result",
        "test": "assert solution(input()) == \"CDBEAF\"",
        "num_ids": 2377,
        "indeed": false
    },
    {
        "number": 4781,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    K, N = map(int, stdin.split())\n    questions = []\n    for _ in range(N):\n        T, Z = map(int, stdin.split())\n        questions.append((T, Z))\n\n    # Initialize variables\n    box_index = K - 1\n    exploded_index = -1\n\n    # Play the game\n    while box_index!= exploded_index:\n        # Play the current question\n        T, Z = questions[box_index]\n        if Z == 'T':\n            box_index = (box_index - 1) % 8\n            exploded_index = (exploded_index + 1) % 8\n        elif Z == 'N':\n            box_index = (box_index + 1) % 8\n            exploded_index = (exploded_index + 1) % 8\n        elif Z == 'P':\n            box_index = (box_index + 1) % 8\n\n    # Return the exploded index\n    return str(exploded_index + 1)\n",
        "test": "assert solution(",
        "num_ids": 1251,
        "indeed": false
    },
    {
        "number": 4782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    roads = set()\n    for i in range(1, n + 1):\n        roads.add(i)\n    for i in range(1, m + 1):\n        roads.add(i + n)\n    roads = list(roads)\n    roads.sort()\n    max_cost = 0\n    plowed_roads = []\n    for i in range(len(roads)):\n        if i % 2 == 0:\n            plowed_roads.append(roads[i])\n        else:\n            plowed_roads.append(roads[i] + n)\n    for i in range(len(plowed_roads) - 1):\n        cost = plowed_roads[i + 1] - plowed_roads[i]\n        if cost > max_cost:\n            max_cost = cost\n    return str(max_cost)",
        "test": "assert solution(\"6 8\\n\") == \"22\\n\"",
        "num_ids": 1233,
        "indeed": false
    },
    {
        "number": 4783,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    def min_jumps(heights: List[int], start_height: int) -> int:\n        steps = [0] * len(heights)\n        steps[start_height - 1] = 1\n        for i in range(start_height - 1, -1, -1):\n            if i < 0 or i > len(heights) - 1:\n                continue\n            for j in range(i + 1, len(heights)):\n                if heights[i] + heights[j] <= heights[start_height - 1]:\n                    steps[i] = max(steps[i], steps[j] + 1)\n        return steps[0]\n\n    def bfs(heights: List[int], start_height: int) -> int:\n        steps = [0] * len(heights)\n        q = deque([start_height - 1])\n        steps[start_height - 1] = 1\n        while q:\n            current_height = q.popleft()\n            if current_height < 0 or current_height > len(heights) - 1:\n                continue\n            for neighbor_height in range(current_height + 1, len(heights)):\n                if heights[current_height] + heights[neighbor_height] <= heights[start_height - 1]:\n                    steps[neighbor_height] = steps[current_height] + 1\n                    if neighbor_height == start_height - 1:\n                        return steps[neighbor_height]\n                    q.append(neighbor_height)\n        return -1\n\n    M, N = map(int, stdin.split())\n    heights = list(map(int, stdin.split()))\n    start_height = min(heights)\n    end_height = max(heights)\n    shortest_ladder = bfs(heights, start_height)\n    if shortest_ladder == -1:\n        print(0)\n        return \"0\"\n    if shortest_ladder <= end_height:\n        print(shortest_ladder)\n        return str(shortest_ladder)\n    return \"0\"",
        "test": "assert solution(input()) == \"1\"",
        "num_ids": 2470,
        "indeed": false
    },
    {
        "number": 4784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    plan = []\n    for _ in range(n):\n        plan.append(int(input()))\n    plan.sort()\n    total = 0\n    for p in plan:\n        total += p\n    remaining = x * (1 - total / (x + 1))\n    return str(remaining)\n",
        "test": "assert solution(\"10\\n3\\n10\\n2\\n12\") == \"16\\n\"",
        "num_ids": 696,
        "indeed": false
    },
    {
        "number": 4785,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    if's' not in stdin:\n        return 'no hiss'\n\n    count = 0\n    for i in range(len(stdin)):\n        if stdin[i] =='s' and i + 1 < len(stdin) and stdin[i + 1] =='s':\n            count += 1\n\n    if count == 0:\n        return 'no hiss'\n    else:\n        return 'hiss'",
        "test": "assert solution(\"amiss\") == \"hiss\"",
        "num_ids": 391,
        "indeed": true
    },
    {
        "number": 4786,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    data = [line.strip() for line in stdin.splitlines()]\n    common_keywords = set()\n    for line in data:\n        common_keywords.add(line.lower().replace('-',''))\n    keyword_count = {}\n    for keyword in common_keywords:\n        for letter in keyword:\n            if letter.isupper():\n                keyword_count[letter] = keyword_count.get(letter, 0) + 1\n            else:\n                keyword_count[letter.lower()] = keyword_count.get(letter.lower(), 0) + 1\n    result = 0\n    for letter, count in keyword_count.items():\n        if count >= 2:\n            result += count - 1\n    return str(result)",
        "test": "assert solution(\"4\\nc++\\nC++\\nc\\nc#\\n\") == \"3\"",
        "num_ids": 806,
        "indeed": false
    },
    {
        "number": 4787,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    tablets = 0\n    compasses = 0\n    gears = 0\n\n    for card in stdin:\n        if card == 'T':\n            tablets += 1\n        elif card == 'C':\n            compasses += 1\n        elif card == 'G':\n            gears += 1\n\n    scientific_points = tablets**2 + compasses**2 + gears**2 + 7*tablets*compasses*gears\n    return str(scientific_points)",
        "test": "assert solution(\"CCC\") == \"9\"",
        "num_ids": 1220,
        "indeed": false
    },
    {
        "number": 4788,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    def min_distance(angle1: int, angle2: int) -> int:\n        if angle1 == angle2:\n            return 0\n        delta_angle = abs(angle1 - angle2)\n        if delta_angle < 180:\n            return delta_angle\n        else:\n            return 360 - delta_angle\n\n    degrees1, degrees2 = map(int, stdin.split())\n    angle1 = (degrees1 + 360) % 360\n    angle2 = (degrees2 + 360) % 360\n    min_angle = min_distance(angle1, angle2)\n    return str(min_angle)",
        "test": "assert solution(\"180 270\") == \"90\"",
        "num_ids": 1013,
        "indeed": false
    },
    {
        "number": 4789,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    k, *numbers = map(int, stdin.split())\n    desk_numbers = []\n\n    for i in range(k):\n        desk_numbers.append(numbers.pop(0))\n\n    desk_numbers = sorted(set(desk_numbers))\n    number_of_passes = len(desk_numbers)\n\n    return str(number_of_passes)\n\nsample_input1 = \"5\\n1\\n23\\n18\\n13\\n99\"\nsample_output1 = solution(sample_input1)\nprint(f\"Sample Output 1: {sample_output1}\")\n\nsample_input2 = \"5\\n11\\n20\\n33\\n40\\n55\"\nsample_output2 = solution(sample_input2)\nprint(f\"Sample Output 2: {sample_output2}\")\n",
        "test": "assert solution(input()) == \"3\", \"Example 1\"",
        "num_ids": 835,
        "indeed": false
    },
    {
        "number": 4790,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    black = 0\n    white = 0\n    for i in range(n):\n        if stdin[i] == 'B':\n            black += 1\n            white -= 1\n        elif stdin[i] == 'W':\n            white += 1\n            black -= 1\n    if black == 0 and white == 0:\n        return '1'\n    else:\n        return '0'",
        "test": "assert solution(\"WWWWBBW\") == \"0\"",
        "num_ids": 1393,
        "indeed": true
    },
    {
        "number": 4791,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    s = list(map(int, stdin.split()))\n    max_area = 0\n    for i in range(3):\n        for j in range(i + 1, 4):\n            max_area = max(max_area, s[i] * s[j])\n    return str(max_area)",
        "test": "assert solution(\"3 3 3 3\") == \"9\"",
        "num_ids": 1157,
        "indeed": false
    },
    {
        "number": 4792,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    def compact_name(name: str) -> str:\n        result = \"\"\n        letters_seen = {}\n        for letter in name:\n            if letter in letters_seen:\n                letters_seen[letter] += 1\n                if letters_seen[letter] > 1:\n                    result += letter\n            else:\n                letters_seen[letter] = 1\n                result += letter\n        return result\n\n    return compact_name(stdin)",
        "test": "assert solution(\"robert\") == \"robert\"",
        "num_ids": 769,
        "indeed": false
    },
    {
        "number": 4793,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    volume, v1, v2 = map(int, stdin.split())\n\n    if v1 > v2:\n        v1, v2 = v2, v1\n\n    if volume % v1!= 0:\n        return \"Impossible\"\n\n    small_bottles = volume // v1\n    bottles = 0\n\n    while small_bottles >= 0:\n        if small_bottles % 2 == 0:\n            bottles += 2\n        else:\n            bottles += 1\n        small_bottles -= 1\n\n    if bottles < 2:\n        return \"Impossible\"\n\n    return str(bottles) + \" \" + str(bottles - 2)\n",
        "test": "assert solution(\"1000 900 7\") == \"Impossible\"",
        "num_ids": 1110,
        "indeed": false
    },
    {
        "number": 4794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.split())\n    map = [list(line.strip()) for line in stdin.splitlines()[1:]]\n    visited = set()\n\n    def count_cars_on_parking_space(x: int, y: int, car_count: int) -> int:\n        if (x, y) in visited:\n            return 0\n\n        visited.add((x, y))\n\n        car_count += 1\n        if x + 1 < rows and map[x + 1][y] == 'X':\n            car_count = count_cars_on_parking_space(x + 1, y, car_count)\n        if x - 1 >= 0 and map[x - 1][y] == 'X':\n            car_count = count_cars_on_parking_space(x - 1, y, car_count)\n        if y + 1 < cols and map[x][y + 1] == 'X':\n            car_count = count_cars_on_parking_space(x, y + 1, car_count)\n        if y - 1 >= 0 and map[x][y - 1] == 'X':\n            car_count = count_cars_on_parking_space(x, y - 1, car_count)\n\n        return car_count\n\n    def count_possible_parking_spaces(x: int, y: int, car_count: int) -> int:\n        if car_count == 0:\n            return 1\n\n        if x + 1 < rows and map[x + 1][y] == '#' and (x, y) not in visited:\n            visited.add((x + 1, y))\n            car_count = count_possible_parking_spaces(x + 1, y, car_count - 1)\n        if x - 1 >= 0 and map[x - 1][y] == '#' and (x, y) not in visited:\n            visited.add((x - 1, y))\n            car_count = count_possible_parking_spaces(x - 1, y, car_count - 1)\n        if y + 1 < cols and map[x][y + 1] == '#' and (x, y) not in visited:\n            visited.add((x, y + 1))\n            car_count = count_possible_parking_spaces(x, y + 1, car_count - 1)\n        if y - 1 >= 0 and map[x][y - 1] == '#' and (x, y) not in visited:\n            visited.add((x, y - 1))\n            car_count = count_possible_parking_spaces(x, y - 1, car_count - 1)\n\n        return car_count\n\n    def count_cars_to_squash(x: int, y: int, car_count: int) -> int:\n        if car_count == 0:\n            return 0\n\n        if x + 1 < rows and map[x + 1][y] == '#' and (x, y) not in visited:\n            visited.add((x + 1, y))\n            car_count = count_cars_to_squash(x + 1, y, car_count + 1)\n            car_count += count_cars_to_squash(x + 1, y, car_count + 1)\n        if x - 1 >= 0 and map[x - 1][y] == '#' and (x, y) not in visited:\n            visited.add((x - 1, y))\n            car_count = count_cars_to_squash(x - 1, y, car_count + 1)\n            car_count += count_cars_to_squash(x - 1, y, car_count + 1)\n        if y + 1 < cols and map[x][y + 1] == '#' and (x, y) not in visited:\n            visited.add((x, y + 1))\n            car_count = count_cars_to_squash(x, y + 1, car_count + 1)\n            car_count += count_cars_to_squash(x, y + 1, car_count + 1)\n        if y - 1 >= 0 and map[x][y - 1] == '#' and (x, y) not in visited:\n            visited.add((x, y - 1))\n            car_count = count_cars_to_squash(x,",
        "test": "assert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"9\\n0\\n0\\n0\\n0\\n\"",
        "num_ids": 2667,
        "indeed": false
    },
    {
        "number": 4795,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input by spaces and parse the integers\n    nums = list(map(int, stdin.split()))\n\n    # Calculate the sum\n    X = sum(nums)\n\n    # Return the result as a string\n    return str(X)",
        "test": "assert solution(input()) == \"102\"",
        "num_ids": 532,
        "indeed": false
    },
    {
        "number": 4796,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    orange, apple, pineapple = map(int, stdin.split())\n    orange_remain = orange * (1 - (orange / 100) * (1 - (1 / (1 - I))))\n    apple_remain = apple * (1 - (apple / 100) * (1 - (1 / (1 - J))))\n    pineapple_remain = pineapple * (1 - (pineapple / 100) * (1 - (1 / (1 - K))))\n    return f\"{orange_remain:.4f} {apple_remain:.4f} {pineapple_remain:.4f}\"",
        "test": "assert solution(\"9 9 9\\n3 2 1\") == \"0.000000 3.000000 6.000000\\n\"",
        "num_ids": 1406,
        "indeed": false
    },
    {
        "number": 4797,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    output = ''\n    i = 0\n    while i < len(stdin):\n        if stdin[i] == '<':\n            output += '<'\n            i += 1\n        else:\n            output += stdin[i]\n            i += 1\n    return output",
        "test": "assert solution('foss<<rritun') == 'forritun'",
        "num_ids": 331,
        "indeed": false
    },
    {
        "number": 4798,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    name = stdin.split('-')[0]\n    if len(name) == 1:\n        return name.upper()\n    else:\n        return name[0].upper() + '-' + name[-1].upper()",
        "test": "assert solution(\"Mirko-Slavko\") == \"MS\"",
        "num_ids": 541,
        "indeed": false
    },
    {
        "number": 4799,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    g, s, c = map(int, stdin.split())\n    \n    # Calculate buying power\n    buying_power = g * 3 + s * 2 + c * 1\n    \n    # Determine which victory card and treasure card to buy\n    if buying_power >= 6:\n        victory_card = \"Province\"\n        treasure_card = \"Gold\"\n    elif buying_power >= 3:\n        victory_card = \"Duchy\"\n        treasure_card = \"Silver\"\n    else:\n        victory_card = \"Estate\"\n        treasure_card = \"Copper\"\n    \n    return f\"{victory_card} or {treasure_card}\"",
        "test": "assert solution(\"0 1 0\") == \"Estate or Copper\"",
        "num_ids": 2123,
        "indeed": false
    },
    {
        "number": 4800,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    d, s = map(int, stdin.split())\n    if n == k:\n        return \"impossible\"\n    avg_diff = (d * k + s) / (n + k)\n    return \"{:.6f}\".format(avg_diff)",
        "test": "assert solution(\"10 3\\n80 90\") == \"75.7142857\"",
        "num_ids": 646,
        "indeed": false
    },
    {
        "number": 4801,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input string to list of integers\n    A = [int(x) for x in stdin.split()]\n    n = len(A)\n\n    # Initialize variables\n    g = [A[0]]  # greedily increasing subsequence\n    min_g = A[0]  # smallest greedily increasing subsequence element\n    start = 0  # start index of greedily increasing subsequence\n    max_len = 1  # maximum length of greedily increasing subsequence\n\n    for i in range(1, n):\n        # update greedily increasing subsequence\n        if A[i] > min_g:\n            g.append(A[i])\n            min_g = A[i]\n            start = i\n        elif A[i] == min_g:\n            g.append(A[i])\n\n        # update maximum length of greedily increasing subsequence\n        len_g = i - start + 1\n        if len_g > max_len:\n            max_len = len_g\n\n    # Print output\n    print(max_len)\n    for i in range(max_len):\n        print(g[i], end=' ')\n\n    return ''\n",
        "test": "assert solution(\"5\\n1 2 3 4 5\") == \"5\\n1 2 3 4 5\"",
        "num_ids": 1029,
        "indeed": false
    },
    {
        "number": 4802,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split())\n    if m < 45:\n        h -= 1\n        m += 60\n    else:\n        m -= 45\n    return f\"{h:02d} {m:02d}\"",
        "test": "assert solution(\"0 30\") == \"23 45\"",
        "num_ids": 558,
        "indeed": false
    },
    {
        "number": 4803,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    N = float(stdin)\n    if N < 0.36788 or N > 2.718281:\n        raise ValueError(\"N must be between 0.36788 and 2.718281\")\n    \n    a = 1\n    for _ in range(int(N * 1000)):\n        a += a\n    a = a / (1 + 1 / 2 + 1 / 3 +... + 1 / N)\n    \n    return str(a)\n\ndef",
        "test": "assert solution(\"1.000000\") == \"1.000000\"",
        "num_ids": 705,
        "indeed": false
    },
    {
        "number": 4804,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    if s == 1:\n        print(\"1:\")\n        print(\"0,0\")\n    elif s == 2:\n        print(\"2:\")\n        print(\"0,0\")\n        print(\"0,1\")\n    else:\n        def is_valid_flag(row):\n            prev_row = [0] * 3\n            for i in range(len(row)):\n                if i % 2 == 0:\n                    row[i] = max(row[i], prev_row[i // 2] + 1)\n                prev_row = row[:i+1]\n            return all(x <= y for x, y in zip(row, row[1:]))\n\n        def generate_flags():\n            row = [0] * (s + 1)\n            while True:\n                row[1:] = [row[i] + 1 for i in range(1, len(row))]\n                if is_valid_flag(row):\n                    yield row\n\n        flags = list(generate_flags())\n        for flag in sorted(flags, key=lambda x: (x[0], -x[1])):\n            print(f\"{flag[0]},{flag[1]}:\")\n\n        print(f\"{flags[-1][0]},{flags[-1][1]}:\")",
        "test": "assert solution(\"50\") == \"50:\\n2,1\\n2,2\\n3,2\\n5,4\\n5,5\\n6,5\\n10,10\\n13,12\\n17,16\\n25,25\"",
        "num_ids": 1676,
        "indeed": false
    },
    {
        "number": 4805,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    repeats = set()\n\n    for word in words:\n        if word in repeats:\n            return \"no\"\n        repeats.add(word)\n\n    return \"yes\"",
        "test": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"",
        "num_ids": 437,
        "indeed": true
    },
    {
        "number": 4806,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    moves = [ord(c) - ord('R') for c in stdin]\n    combo = 0\n    result = []\n\n    while True:\n        move = moves[combo]\n        if move == 3:\n            break\n        elif move == 0:\n            result.append('S')\n            combo += 1\n        elif move == 1:\n            result.append('K')\n            combo += 1\n        elif move == 2:\n            result.append('H')\n            combo += 1\n\n    result.append('C')\n    return ''.join(chr(ord('R') + move) for move in result)\n",
        "test": "assert solution(\"RBLLLBRR\") == \"CHCS\", \"Test 2 failed\"",
        "num_ids": 1404,
        "indeed": false
    },
    {
        "number": 4807,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = map(int, stdin.split())\n    if x == 1 and y == 1:\n        return \"\\n\".join(str(i) for i in range(1, n + 1))\n    if x == 1:\n        return \"\\n\".join(\"Fizz\" if i % y == 0 else str(i) for i in range(1, n + 1))\n    if y == 1:\n        return \"\\n\".join(\"Buzz\" if i % x == 0 else str(i) for i in range(1, n + 1))\n    return \"\\n\".join(\"FizzBuzz\" if i % (x + y) == 0 else str(i) for i in range(1, n + 1))\n",
        "test": "assert solution(\"2 4 7\") == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n\"",
        "num_ids": 1093,
        "indeed": false
    },
    {
        "number": 4808,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    data = list(map(int, stdin.split()))\n\n    for i in range(1, n):\n        data[i] += data[i - 1]\n\n    for i in range(n - 1, -1, -1):\n        if data[i] > m:\n            return f\"It hadn't snowed this early in {i + 1} years!\"\n\n    return \"It had never snowed this early!\"\n\nsample_input1 = \"4 2\\n3 3 3 2\"\nsample_output1 = solution(sample_input1)\nprint(sample_output1)  # Output: It hadn't snowed this early in 3 years!\n\nsample_input2 = \"2 10\\n0 100\"\nsample_output2 = solution(sample_input2)\nprint(sample_output2)  # Output: It hadn't snowed this early in 0 years!",
        "test": "assert solution(\"2 10\\n0 100\") == \"It had never snowed this early!\"",
        "num_ids": 1322,
        "indeed": false
    },
    {
        "number": 4809,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    players = [1] * n\n    current_player = 1\n    players[current_player - 1] = 2\n\n    for i in range(s - 1):\n        action = [\"Co-co-nut\", \"Co-co-nut\", \"Co-co-nut\", \"Splat!\"][i]\n        if action == \"Co-co-nut\":\n            players[current_player - 1] = 3 - current_player\n        elif action == \"Splat!\":\n            players[current_player - 1] = (3 - current_player) % n + 1\n        current_player = (3 - current_player) % n + 1\n\n    winner = players[0]\n\n    return str(winner)",
        "test": "assert solution(\"10 2\") == \"2\"",
        "num_ids": 1402,
        "indeed": false
    },
    {
        "number": 4810,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    message = stdin.lower()\n    matrix_rows = 1\n    matrix_cols = 1\n    row_count = 0\n    for char in message:\n        if char.isalpha():\n            matrix_rows += 1\n            if matrix_rows > row_count:\n                row_count = matrix_rows\n        else:\n            matrix_cols += 1\n            if matrix_rows * matrix_cols == len(message):\n                break\n            elif matrix_rows > row_count:\n                row_count = matrix_rows\n    matrix_cols = min(matrix_cols, matrix_rows)\n    encrypted_message = [\"\"] * matrix_rows\n    for i in range(len(message)):\n        encrypted_message[i % matrix_rows] += message[i]\n    return \"\".join(encrypted_message)",
        "test": "assert solution('bok') == 'bok'",
        "num_ids": 1051,
        "indeed": false
    },
    {
        "number": 4811,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    max_bar_size = int(2 ** (math.log2(k) + 1))\n\n    def gcd(a: int, b: int) -> int:\n        return gcd(b, a % b)\n\n    def lcm(a: int, b: int) -> int:\n        return a * b // gcd(a, b)\n\n    def find_larger_powers(n: int) -> List[int]:\n        result = []\n        for i in range(1, int(math.log2(n)) + 1):\n            result.append(2 ** i)\n        return result\n\n    def find_smallest_bar_size(k: int) -> int:\n        factors = find_larger_powers(k)\n        factors.sort()\n        for i in range(1, len(factors)):\n            if factors[i] % factors[i - 1] == 0:\n                return lcm(factors[i], factors[i - 1])\n        return factors[-1] * k\n\n    break_count = 0\n    smallest_bar_size = max_bar_size\n    for i in range(max_bar_size):\n        n = lcm(2 ** i, 2 ** (i + 1))\n        if n < k:\n            break_count += 1\n            if break_count == 2:\n                smallest_bar_size = i + 1\n                break\n        else:\n            break_count = 0\n\n    return f\"{smallest_bar_size} {break_count}\"",
        "test": "assert solution(\"7\") == \"8 3\"",
        "num_ids": 1211,
        "indeed": false
    },
    {
        "number": 4812,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    common_word, num_lists, *ending_lists = stdin.splitlines()\n    common_word = common_word.strip().lower()\n\n    if len(common_word)!= 4:\n        return \"NO\"\n\n    endings = set()\n    for ending_list in ending_lists:\n        endings.update(ending_list.strip().split())\n\n    rhymes = [s for s in endings if s.endswith(common_word)]\n\n    if not rhymes:\n        return \"NO\"\n\n    for ending in rhymes:\n        if common_word == ending:\n            return \"YES\"\n\n    return \"NO\"\n",
        "test": "assert solution(",
        "num_ids": 1289,
        "indeed": false
    },
    {
        "number": 4813,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    word, permutation = stdin.split()\n    # Calculate the length of the permutation\n    n = len(permutation)\n    # Create a dictionary to store the number of occurrences of each letter in the word\n    word_dict = {}\n    for letter in word:\n        if letter in word_dict:\n            word_dict[letter] += 1\n        else:\n            word_dict[letter] = 1\n    # Create a dictionary to store the number of occurrences of each letter in the permutation\n    permutation_dict = {}\n    for letter in permutation:\n        if letter in permutation_dict:\n            permutation_dict[letter] += 1\n        else:\n            permutation_dict[letter] = 1\n    # Calculate the total number of possible components in the stick-figure man\n    num_components = 10\n    # Initialize the current guess of the word\n    current_guess = ''\n    # Initialize the number of guesses\n    num_guesses = 0\n    # Initialize a list to store the components of the stick-figure man\n    components = ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']\n    # Initialize a list to store the dashes of the word\n    dashes = ['-'] * len(word)\n    # Initialize a list to store the remaining components of the stick-figure man\n    remaining_components = [component for component in components]\n    # Initialize a list to store the position of the stick-figure man\n    position = 0\n    # Check if the word and permutation are of the same length\n    if n!= len(word):\n        return 'LOSE'\n    # Play the game\n    while num_guesses < n:\n        # Display the dashes and the stick-figure man\n        for i in range(len(word)):\n            print(dashes[i], end='')\n            if dashes[i] == '-':\n                print(current_guess[i], end='')\n        print(remaining_components[position], end='')\n        # Ask the player to guess a letter\n        guess = input().upper()\n        # If the guess is not a letter, ask again\n        while guess not in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            guess = input().upper()\n        # Update the guess\n        current_guess += guess\n        # Check if the guess is already in the word\n        if guess in word:\n            # Update the number of occurrences of the letter in the word\n            word_dict[guess] -= 1\n            # Update the number of components in the stick-figure man\n            components[position] = guess\n            position = (position + 1) % num_components\n            # Update the dashes\n            for i in range(len(word)):\n                if word[i] == guess:\n                    dashes[i] = guess\n            # Check if the game is won\n            if not any(dash == '-' for dash in dashes):\n                return 'WIN'\n        else:\n            # Add a component to the stick-figure man\n            remaining_components[position] = guess\n            position = (position + 1) % num_components\n        # Increment the number of guesses\n        num_guesses += 1\n    # If the game is lost, return \"LOSE\"\n    return 'LOSE'",
        "test": "assert solution(\"BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"LOSE\"",
        "num_ids": 2507,
        "indeed": false
    },
    {
        "number": 4814,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    names = [name.upper() for name in stdin.split('\\n') if name.strip()]\n    if len(names) == 1:\n        return 'NEITHER'\n\n    names.sort()\n    if names[0] == names[-1]:\n        return 'INEQUAL'\n\n    if all(i < j for i, j in zip(names, names[1:])):\n        return 'INCREASING'\n    elif all(i > j for i, j in zip(names, names[1:])):\n        return 'DECREASING'\n    else:\n        return 'NEITHER'\n",
        "test": "assert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\"",
        "num_ids": 795,
        "indeed": false
    },
    {
        "number": 4815,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    participants, minimum_score, lines = map(int, stdin.split())\n    names_scores = [tuple(map(int, line.split())) for line in stdin.splitlines()[2:]]\n\n    def get_score(name: str) -> int:\n        for name_score in names_scores:\n            if name_score[0] == name:\n                return name_score[1]\n        return 0\n\n    def is_winner(name: str) -> bool:\n        return get_score(name) >= minimum_score\n\n    winners = [name for name, score in names_scores if is_winner(name)]\n\n    if not winners:\n        return \"No winner!\\n\"\n\n    winners.sort(key=get_score, reverse=True)\n    return f\"{winners[0]} wins!\\n\".join(winners)\n",
        "test": "assert solution(\"\"\"",
        "num_ids": 1485,
        "indeed": false
    },
    {
        "number": 4816,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    x, y, x1, y1, x2, y2 = map(int, stdin.split())\n\n    # Check if the goat's post is outside the house\n    if x <= x1 or x >= x2 or y <= y1 or y >= y2:\n        return \"Error: The goat's post is outside the house.\"\n\n    # Calculate the house's diagonal\n    dx = x2 - x1\n    dy = y2 - y1\n    diagonal = math.sqrt(dx ** 2 + dy ** 2)\n\n    # Calculate the distance from the fence post to the house's diagonal\n    min_distance = diagonal - math.sqrt((x - x1) ** 2 + (y - y1) ** 2)\n\n    return f\"{min_distance:.3f}\"",
        "test": "assert solution(\"6 0 0 2 7 6\") == \"2.0\"",
        "num_ids": 1246,
        "indeed": false
    },
    {
        "number": 4817,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    for i in range(1, 10):\n        if x // i == 0:\n            return str(i * x // 10)\n    return \"0\"",
        "test": "assert solution(\"330\") == \"0\", \"Test 2 failed\"",
        "num_ids": 652,
        "indeed": false
    },
    {
        "number": 4818,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    tasks = list(map(int, stdin.split()))\n    quiet_intervals = list(map(int, stdin.split()))\n\n    count = 0\n    for i in range(n):\n        start_time = 0\n        for j in range(m):\n            if i == 0 and j == 0:\n                start_time = tasks[i]\n            if quiet_intervals[j] > tasks[i] + start_time:\n                start_time += quiet_intervals[j]\n            else:\n                break\n        else:\n            count += 1\n\n    return str(count)",
        "test": "assert solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n\") == \"3\\n\"",
        "num_ids": 1681,
        "indeed": false
    },
    {
        "number": 4819,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.split()))\n    modulo = 42\n    distinct_numbers = set()\n\n    for number in numbers:\n        if number % modulo == 0:\n            distinct_numbers.add(number)\n\n    return str(len(distinct_numbers))",
        "test": "assert solution(\"42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\") == \"6\", \"Sample Input 2\"",
        "num_ids": 802,
        "indeed": false
    },
    {
        "number": 4820,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.split())\n    return \"yes\" if n < 10**3 and b <= 50 else \"no\"\n\nprint(solution(\"13 3\"))  # Output: yes\nprint(solution(\"1 0\"))  # Output: yes",
        "test": "assert solution(\"13 3\") == \"yes\"",
        "num_ids": 950,
        "indeed": true
    },
    {
        "number": 4821,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    cards = set(stdin.split())\n\n    poker_deck = set([f\"{suit}{num}\" for suit in \"PKHT\" for num in range(1, 14)])\n    missing_cards = poker_deck - cards\n\n    if len(missing_cards) == 0:\n        return \"GRESKA\"\n\n    suits = {card[:-1] for card in missing_cards}\n    missing_p, missing_k, missing_h, missing_t = 0, 0, 0, 0\n    for suit in suits:\n        if suit == \"P\":\n            missing_p = len(missing_cards.intersection({f\"{suit}{num}\" for num in range(1, 10)}))\n        elif suit == \"K\":\n            missing_k = len(missing_cards.intersection({f\"{suit}{num}\" for num in range(10, 14)}))\n        elif suit == \"H\":\n            missing_h = len(missing_cards.intersection({f\"{suit}{num}\" for num in range(1, 10)}))\n        elif suit == \"T\":\n            missing_t = len(missing_cards.intersection({f\"{suit}{num}\" for num in range(10, 14)}))\n\n    return f\"{missing_p} {missing_k} {missing_h} {missing_t}\"\n",
        "test": "assert solution(\"H02H10P11H02\") == \"GRESKA\"",
        "num_ids": 1262,
        "indeed": false
    },
    {
        "number": 4822,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols, k = map(int, stdin.split())\n    picture = []\n    for _ in range(rows):\n        line = input()\n        picture.append(line)\n\n    def count_flies(row, col, k):\n        flies = 0\n        for i in range(row - 1, -1, -1):\n            if picture[i][col] == \"*\":\n                flies += 1\n                if flies == k:\n                    return flies\n            elif picture[i][col] == \".\":\n                flies = 0\n        for i in range(col - 1, -1, -1):\n            if picture[row][i] == \"*\":\n                flies += 1\n                if flies == k:\n                    return flies\n            elif picture[row][i] == \".\":\n                flies = 0\n        for i in range(row + 1, rows):\n            if picture[i][col] == \"*\":\n                flies += 1\n                if flies == k:\n                    return flies\n            elif picture[i][col] == \".\":\n                flies = 0\n        for i in range(col + 1, cols):\n            if picture[row][i] == \"*\":\n                flies += 1\n                if flies == k:\n                    return flies\n            elif picture[row][i] == \".\":\n                flies = 0\n        return flies\n\n    max_flies = 0\n    for row in range(rows):\n        for col in range(cols):\n            flies = count_flies(row, col, k)\n            if flies > max_flies:\n                max_flies = flies\n\n    result = []\n    for row in range(rows):\n        line = \"\"\n        for col in range(cols):\n            if picture[row][col] == \".\":\n                line += \".\"\n            elif picture[row][col] == \"*\":\n                flies = count_flies(row, col, k)\n                if flies == max_flies:\n                    line += \"*\"\n                else:\n                    line += \"+\"\n        result.append(line)\n\n    return \"\\n\".join(result)\n",
        "test": "assert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\\n\") == \"2\\n......\\n.*.*.*\\n+--+..\\n|*.|..\\n|.*|..\\n+--+..\\n*....*\\n\"",
        "num_ids": 2416,
        "indeed": false
    },
    {
        "number": 4823,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    # get the cards from the input string\n    cards = list(map(lambda x: (x[0], x[1]), stdin.split()))\n    \n    # find the max strength\n    max_strength = 0\n    for card in cards:\n        rank, suit = card\n        count = cards.count(card)\n        if count > max_strength:\n            max_strength = count\n    \n    return str(max_strength)",
        "test": "assert solution(\"2C 4D 4H 2D 2H\") == \"3\"",
        "num_ids": 749,
        "indeed": false
    },
    {
        "number": 4824,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    C, P = map(int, stdin.split())\n    heights = list(map(int, stdin.split()))\n\n    def helper(h: int, idx: int, ways: int) -> int:\n        if idx == C:\n            return ways\n        if h <= heights[idx]:\n            return helper(h + 1, idx + 1, ways)\n        return helper(h, idx + 1, ways + helper(0, idx, 1))\n\n    ways = 0\n    for h in range(max(heights) + 1):\n        ways += helper(h, 0, 1)\n\n    return str(ways)",
        "test": "assert solution('5 1\\n0 0 0 0 0') == '7'",
        "num_ids": 1463,
        "indeed": false
    },
    {
        "number": 4825,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    new_alphabet = '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.'\n    result = ''\n    \n    for char in stdin:\n        if char.isalpha():\n            result += new_alphabet[ord(char.lower()) - ord('a')]\n        else:\n            result += char\n    \n    return result",
        "test": "assert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.",
        "num_ids": 1863,
        "indeed": false
    },
    {
        "number": 4826,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"Alice\"\n    elif n == 2:\n        return \"Bob\"\n    else:\n        winning_player = \"Alice\"\n        for i in range(1, n-1, 2):\n            if n % 2 == 1:\n                winning_player = \"Bob\"\n                break\n            n -= 2\n        return winning_player",
        "test": "assert solution(\"1\") == \"Alice\"",
        "num_ids": 379,
        "indeed": false
    },
    {
        "number": 4827,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    sentence = words[0]\n    for i in range(1, len(words)):\n        if words[i].isdigit():\n            word = words[i].replace(\"$\", \"\")\n            if word.isdigit():\n                num = int(word)\n                if num > 9:\n                    if num < 20:\n                        sentence += \" \" + str(num) + \"hundred\"\n                    else:\n                        sentence += \" \" + str(num // 100) + \"hundred\"\n                        if num % 100!= 0:\n                            sentence += \"and\"\n                            if num % 100 > 19:\n                                sentence += \" \" + str(num % 100)\n                            else:\n                                sentence += \" \" + str(num % 100) + \"teen\"\n                else:\n                    if num < 10:\n                        sentence += \" \" + str(num) + \"teen\"\n                    else:\n                        sentence += \" \" + str(num)\n            else:\n                sentence += \" \" + word\n        else:\n            sentence += \" \" + words[i]\n\n    return sentence.strip()",
        "test": "assert solution(\"this\\n$\") == \"this is the number of letters here\\n\"",
        "num_ids": 1755,
        "indeed": false
    },
    {
        "number": 4828,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    machine_code = [ord(c) for c in stdin]\n    n_nop = 0\n    i = 0\n\n    while i < len(machine_code):\n        instruction = machine_code[i]\n        if 97 <= instruction <= 122:\n            if i > 0 and machine_code[i - 1] == 97:\n                n_nop += 1\n            i += 1\n        elif 123 <= instruction <= 127:\n            i += 1\n        elif 97 <= instruction <= 122:\n            n_nop += 1\n            i += 1\n        else:\n            i += 1\n\n    return str(n_nop)\n",
        "test": "assert solution(\"Abcd\") == \"0\"",
        "num_ids": 818,
        "indeed": false
    },
    {
        "number": 4829,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    \n    if l == r:\n        return f\"Even {2 * l}\"\n    elif r > l:\n        return f\"Odd {2 * r}\"\n    else:\n        return \"Not a moose\"\n    \n",
        "test": "assert solution(\"2 3\") == \"Odd 6\"",
        "num_ids": 668,
        "indeed": false
    },
    {
        "number": 4830,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    words = set()\n    for _ in range(N):\n        words.add(stdin.split()[1])\n    S = stdin.split()[2]\n\n    def is_valid(word: str) -> bool:\n        return all(char in S for char in word)\n\n    def get_key(word: str) -> int:\n        return int(S[word.lower().find(char)]) - 2\n\n    valid_words = set(word for word in words if is_valid(word))\n    key_count = [0] * 26\n    for word in valid_words:\n        key = get_key(word)\n        key_count[key] += 1\n\n    return str(max(1, max(key_count)))\n",
        "test": "assert solution(\"3\\ntomo\\nmono\\ndak\\n6666\") == \"1\"",
        "num_ids": 1138,
        "indeed": false
    },
    {
        "number": 4831,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    letters = [ord(c) - 65 for c in stdin.upper()]\n    frames = []\n\n    for i in range(len(letters)):\n        if i % 3 == 0:\n            frames.append('.' * 5)\n            frames.append('#' * 5)\n        else:\n            frames.append(chr(letters[i] + 65))\n\n    return '\\n'.join(frames)",
        "test": "assert solution(\"DOG\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\\n\", \"Sample Input 2\"",
        "num_ids": 1415,
        "indeed": false
    },
    {
        "number": 4832,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    radius = int(stdin)\n\n    # calculate area of Euclidian circle\n    area_euclidian = (radius ** 2) * 3.14159265358979323846\n\n    # calculate area of taxicab circle\n    area_taxicab = (radius ** 2) * 2.0\n\n    return f\"{area_euclidian:.10f}\\n{area_taxicab:.10f}\"\n",
        "test": "assert solution(\"21\") == \"1385.442360\\n882.000000\\n\"",
        "num_ids": 909,
        "indeed": false
    },
    {
        "number": 4833,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    expenses = list(map(int, stdin.split()))\n    total_expenses = 0\n    for expense in expenses:\n        if expense < 0:\n            total_expenses += expense\n    return str(total_expenses)",
        "test": "assert solution(\"5\\n129 44 394 253 147\\n\") == \"0\"",
        "num_ids": 697,
        "indeed": false
    },
    {
        "number": 4834,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    times = list(map(int, stdin.split()[1:]))\n    \n    # check if the total time is less than the sum of all times\n    total_time = sum(times)\n    if total_time < 2 * n:\n        return \"NO\"\n    \n    # create an array of sums of times\n    sums = [0] * (n + 1)\n    for i in range(n):\n        sums[i + 1] = sums[i] + times[i]\n        \n    # find the maximum sum such that the total time is greater than or equal to the sum\n    max_sum = sums[0]\n    for i in range(1, n + 1):\n        if sums[i] > max_sum:\n            max_sum = sums[i]\n    \n    # check if the total time is greater than the maximum sum\n    if total_time > max_sum:\n        return \"NO\"\n    \n    # find the minimum time required for Ante and Goran to do their lectures\n    min_time = total_time - max_sum\n    \n    # check if the minimum time is greater than the total time\n    if min_time > total_time:\n        return \"NO\"\n    \n    return str(min_time)",
        "test": "assert solution(\"3\\n4 1 2\\n\") == \"8\\n\"",
        "num_ids": 1146,
        "indeed": false
    },
    {
        "number": 4835,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(x, y, direction):\n        return 0 <= x < N and 0 <= y < M and grid[x][y] == '0' and ((direction == 'U' and x - 1 < 0) or (direction == 'D' and x + 1 >= N) or (direction == 'L' and y - 1 < 0) or (direction == 'R' and y + 1 >= M))\n\n    def bfs(start, end, visited):\n        queue = [(start, 0)]\n        visited[start[0]][start[1]] = True\n        while queue:\n            current, steps = queue.pop(0)\n            if current == end:\n                return steps\n            for neighbor in [(current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] - 1), (current[0], current[1] + 1)]:\n                if not is_valid(*neighbor, 'U') or visited[neighbor[0]][neighbor[1]]:\n                    continue\n                queue.append((neighbor, steps + 1))\n                visited[neighbor[0]][neighbor[1]] = True\n\n    N, M, t = map(int, stdin.split())\n    grid = []\n    visited = [[False] * M for _ in range(N)]\n    for _ in range(N):\n        grid.append(list(stdin.readline().strip()))\n\n    s = [i for i, row in enumerate(grid) if 'S' in row][0]\n    if t == 1:\n        print(1)\n        return\n\n    end = (N - 1, M - 1)\n    if not bfs((s // N, s % N), end, visited):\n        print(\"NOT POSSIBLE\")\n        return\n\n    if grid[end[0]][end[1]] == 'S':\n        print(bfs((s // N, s % N), end, visited))\n    else:\n        print(\"NOT POSSIBLE\")",
        "test": "assert solution(input()) == \"NOT POSSIBLE\", \"Sample Input 2\"",
        "num_ids": 3152,
        "indeed": false
    },
    {
        "number": 4836,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    weights = list(map(int, stdin.split()))\n\n    def find_max_fruit(weights: List[int]) -> int:\n        def dfs(index: int, current_weight: int, visited: List[bool]) -> int:\n            if current_weight > c or index == n:\n                return 0\n\n            if visited[index]:\n                return dfs(index + 1, current_weight, visited)\n\n            visited[index] = True\n            total_fruits = dfs(index + 1, current_weight, visited)\n            current_fruit = weights[index]\n            total_fruits += dfs(index + 1, current_weight + current_fruit, visited)\n            visited[index] = False\n            return total_fruits\n\n        return dfs(0, 0, [False] * n)\n\n    max_fruits = find_max_fruit(weights)\n    return str(max_fruits)\n",
        "test": "assert solution(\"7 5\\n1 5 4 3 2 1 1\") == \"3\\n\"",
        "num_ids": 1310,
        "indeed": false
    },
    {
        "number": 4837,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    rounds, symbols = [int(x) for x in stdin.split()]\n    players = [list(x) for x in stdin.splitlines()[1:]]\n\n    # Calculate score\n    scores = []\n    for round_symbols in players:\n        wins = 0\n        ties = 0\n        losses = 0\n        for i, symbol in enumerate(round_symbols):\n            if symbol == round_symbols[(i + 1) % len(round_symbols)]:\n                ties += 1\n            elif symbol == symbols[(i + 1) % len(symbols)]:\n                wins += 1\n            else:\n                losses += 1\n\n        score = wins * 2 + ties + losses\n        scores.append(score)\n\n    # Calculate largest possible score\n    largest_possible_score = 0\n    for i in range(len(symbols)):\n        largest_possible_score += 2 * rounds + 1\n\n    # Output\n    return str(max(scores)) + \"\\n\" + str(largest_possible_score)",
        "test": "assert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\") == \"10\\n15\"",
        "num_ids": 1405,
        "indeed": false
    },
    {
        "number": 4838,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    times = [int(x) for x in stdin.split()[1:]]\n\n    t = 0\n    on = True\n    last_time = 0\n\n    for time in times:\n        if time == last_time:\n            on = not on\n        else:\n            t += time - last_time\n            on = not on\n\n        last_time = time\n\n    if on:\n        return str(t)\n    else:\n        return'still running'",
        "test": "assert solution(\"5\\n2\\n5\\n9\\n10\\n17\") == \"still running\"",
        "num_ids": 615,
        "indeed": false
    },
    {
        "number": 4839,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, *canisters = map(int, stdin.split())\n    \n    canister_capacity = [c for c in canisters]\n    balloon_sizes = sorted(range(1, n+1), key=lambda x: x*canister_capacity.pop())\n    \n    used_canisters = [False] * len(canisters)\n    used_balloons = []\n    \n    def can_be_used(balloon_size):\n        return not used_balloons or balloon_size < used_balloons[-1][1]\n    \n    for balloon_size in balloon_sizes:\n        for i, (capacity, canister_size) in enumerate(zip(balloon_sizes, canister_capacity)):\n            if not used_canisters[i] and can_be_used(capacity):\n                used_balloons.append((balloon_size, canister_size))\n                used_canisters[i] = True\n                break\n        else:\n            # This balloon cannot be used\n            used_balloons.append(None)\n    \n    if all(used_balloon is None for used_balloon in used_balloons):\n        return \"impossible\"\n    \n    fraction_used = sum(1 for used_balloon in used_balloons if used_balloon is not None) / len(used_balloons)\n    f = fraction_used.numerator / fraction_used.denominator\n    \n    return f\"{f:.6f}\"",
        "test": "assert solution(\"2\\n2 2\") == \"impossible\"",
        "num_ids": 1562,
        "indeed": false
    },
    {
        "number": 4840,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    def get_lowest_highest_numbers(sides):\n        lowest = sides[0]\n        highest = sides[0]\n        for num in sides:\n            if num < lowest:\n                lowest = num\n            elif num > highest:\n                highest = num\n        return lowest, highest\n\n    def get_dice_probability(dice):\n        lowest, highest = get_lowest_highest_numbers(dice)\n        return (highest - lowest + 1) / 6\n\n    g_dice = [int(x) for x in stdin.split()[0].split(',')]\n    e_dice = [int(x) for x in stdin.split()[1].split(',')]\n\n    g_prob = get_dice_probability(g_dice)\n    e_prob = get_dice_probability(e_dice)\n\n    if g_prob > e_prob:\n        return \"Emma\"\n    elif g_prob < e_prob:\n        return \"Gunnar\"\n    else:\n        return \"Tie\"\n",
        "test": "assert solution(\"1 8 1 8\\n1 10 2 5\") == \"Tie\"",
        "num_ids": 1510,
        "indeed": false
    },
    {
        "number": 4841,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    n = int(input_list[0])\n    count = 0\n    for word in input_list[1:]:\n        if word.isdigit():\n            count += int(word)\n        else:\n            return \"something is fishy\"\n    if count == n:\n        return \"makes sense\"\n    else:\n        return \"something is fishy\"",
        "test": "assert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"",
        "num_ids": 610,
        "indeed": false
    },
    {
        "number": 4842,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n, *v = map(int, stdin.split())\n    differences = [v[1:] - v[:-1]]\n    for i in range(2, n):\n        differences.append(differences[-1] * 2)\n\n    degree = 0\n    for row in differences:\n        if abs(row[-1]) > abs(row[-2]):\n            degree += 1\n\n    return f\"{degree} {v[n]}\"",
        "test": "assert solution(\"4 9 25 49 81\") == \"2 121\"",
        "num_ids": 1277,
        "indeed": false
    },
    {
        "number": 4843,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    queens = []\n    for line in stdin.split('\\n')[1:]:\n        x, y = line.split()\n        x, y = int(x), int(y)\n        queens.append((x, y))\n\n    def is_valid(queens: list) -> bool:\n        n = len(queens)\n        for i in range(n):\n            for j in range(i + 1, n):\n                if abs(queens[i][1] - queens[j][1]) == abs(queens[i][0] - queens[j][0]):\n                    return False\n        return True\n\n    if is_valid(queens):\n        return 'CORRECT'\n    else:\n        return 'INCORRECT'",
        "test": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"",
        "num_ids": 1503,
        "indeed": false
    },
    {
        "number": 4844,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    matrix = [[int(x) for x in stdin.split('\\n')[1].split()] for _ in range(N)]\n    \n    # Check if the matrix is a valid one\n    for row in matrix:\n        if len(set(row))!= N:\n            return \"Invalid\"\n    \n    # Reconstruct the array\n    res = [1] * N\n    for row in matrix:\n        for col, num in enumerate(row):\n            if num!= 0:\n                res[col] = num & res[col]\n    \n    return \" \".join(map(str, res))",
        "test": "assert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\\n\"",
        "num_ids": 2192,
        "indeed": false
    },
    {
        "number": 4845,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    day, month = map(int, stdin.split())\n    \n    if month in [4, 6, 9, 11]:\n        days_in_month[1] = 29\n    else:\n        days_in_month[1] = 28\n    \n    if day == 1:\n        return \"Monday\"\n    elif day == days_in_month[month - 1]:\n        return \"Saturday\"\n    elif day == days_in_month[month - 1] - 1:\n        return \"Friday\"\n    elif day < days_in_month[month - 1]:\n        return \"Thursday\"\n    elif day < days_in_month[month - 2]:\n        return \"Wednesday\"\n    elif day < days_in_month[month - 3]:\n        return \"Tuesday\"\n    elif day < days_in_month[month - 4]:\n        return \"Monday\"\n    else:\n        return \"Sunday\"",
        "test": "assert solution(\"17 1\") == \"Saturday\"",
        "num_ids": 960,
        "indeed": false
    },
    {
        "number": 4846,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    l, d, x = map(int, stdin.split())\n    def is_valid_num(num: int) -> bool:\n        return sum(int(digit) for digit in str(num)) == x\n\n    def find_valid_num(start: int, end: int) -> int:\n        while start <= end:\n            mid = (start + end) // 2\n            if is_valid_num(mid):\n                return mid\n            elif is_valid_num(mid + 1):\n                start = mid + 1\n            else:\n                end = mid - 1\n        return None\n\n    n = find_valid_num(l, d)\n    m = find_valid_num(l, d)\n    while n is None or m is None:\n        if n is None and l <= m <= d and sum(int(digit) for digit in str(m)) == x:\n            n = m\n        elif n is None and l <= n <= d and sum(int(digit) for digit in str(n)) == x:\n            m = n\n        else:\n            break\n\n    return str(n) + \"\\n\" + str(m)",
        "test": "assert solution(\"\"\"1",
        "num_ids": 1409,
        "indeed": false
    },
    {
        "number": 4847,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    vertices, n_trees = map(int, stdin.strip().split())\n    vertices = [tuple(map(int, line.split())) for line in stdin.strip().split()[1:]]\n    trees = [tuple(map(int, line.split())) for line in stdin.strip().split()[1+n_trees:]]\n    \n    # Calculate area of land\n    area = 0\n    for i, (x_A, y_A), (x_B, y_B), (x_C, y_C) in enumerate(zip(vertices, vertices[1:], vertices[2:], vertices[3:])):\n        area += (x_A*(y_B - y_C) + x_B*(y_C - y_A) + x_C*(y_A - y_B)) / 2\n    \n    # Count trees belonging to Ante\n    trees_belonging_to_ante = 0\n    for tree in trees:\n        if tree[0] < min(vertices[0], vertices[1], vertices[2]) or tree[0] > max(vertices[0], vertices[1], vertices[2]):\n            trees_belonging_to_ante += 1\n    \n    # Output results\n    area_str = \"{:.1f}\".format(area)\n    return f\"{area_str}\\n{trees_belonging_to_ante}\"",
        "test": "assert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\\n\") == \"6.0\\n3\"",
        "num_ids": 2312,
        "indeed": false
    },
    {
        "number": 4848,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for m in range(2, n):\n        if m * n % 210 == 0:\n            return str(m)\n    return str(2)",
        "test": "assert solution(\"30\") == \"7\"",
        "num_ids": 392,
        "indeed": false
    },
    {
        "number": 4849,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    blimp_codes = [row.strip() for row in stdin.split('\\n')]\n    cia_blimps = [code for code in blimp_codes if 'FBI' in code]\n    if not cia_blimps:\n        return 'HE GOT AWAY!'\n    else:\n        return''.join(map(str, sorted(set(cia_blimps))))",
        "test": "assert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\\n\") == \"HE GOT AWAY!\"",
        "num_ids": 1066,
        "indeed": false
    },
    {
        "number": 4850,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    def triangle_area(a, b, c):\n        return 0.5 * a * b + 0.5 * b * c + 0.5 * a * c\n\n    def rod_length(n):\n        return 2 * n\n\n    def min_length(triangle_list):\n        n = len(triangle_list)\n        min_length_list = [0] * n\n        min_length_list[0] = rod_length(triangle_list[0][0])\n        for i in range(1, n):\n            for j in range(i):\n                if triangle_list[i][0] < triangle_list[j][0] and triangle_list[i][1] < triangle_list[j][1]:\n                    min_length_list[i] = min(min_length_list[i], min_length_list[j] + rod_length(triangle_list[i][2]) - rod_length(triangle_list[j][2]))\n        return min(min_length_list)\n\n    n = int(stdin.split()[0])\n    triangle_list = []\n    for i in range(n):\n        a, b, c = map(int, stdin.split()[1].split())\n        triangle_list.append([a, b, c])\n\n    return str(round(min_length(triangle_list), 4))",
        "test": "assert solution(input()) == \"6.843530573929037\\n\"",
        "num_ids": 1303,
        "indeed": false
    },
    {
        "number": 4851,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num_digits = len(str(n))\n    harshad_numbers = []\n\n    for i in range(1, 10):\n        if n % i == 0:\n            for j in range(1, 10):\n                if n % j == 0:\n                    harshad_numbers.append(n // (i + j))\n                    break\n            else:\n                harshad_numbers.append(n // i)\n\n    min_harshad = min(harshad_numbers)\n    return str(min_harshad)",
        "test": "assert solution(\"25\") == \"27\"",
        "num_ids": 545,
        "indeed": false
    },
    {
        "number": 4852,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    digits = len(stdin)\n    count = 1\n    for i in range(1, digits):\n        if stdin[i]!= stdin[i - 1]:\n            count += 1\n            if count > 10:\n                return str(count)\n\n    return str(count)\n",
        "test": "assert solution(\"1+9+8+4\") == \"7\", \"Wrong Output\"",
        "num_ids": 650,
        "indeed": false
    },
    {
        "number": 4853,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, a = map(int, stdin.split())\n    a = [int(x) for x in a.split()]\n\n    # initialize constants\n    C = [1] * (n + 1)\n\n    # compute polynomial values\n    for i in range(1, len(C)):\n        C[i] = C[i - 1] + a[i - 1]\n\n    # print constants\n    return \" \".join(map(str, C[1:]))\n",
        "test": "assert solution(\"2 2 -4 5\") == \"5 -2 4\"",
        "num_ids": 696,
        "indeed": false
    },
    {
        "number": 4854,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    N, C = map(int, stdin.split())\n    message = list(map(int, stdin.split()))\n    sorted_message = sorted(set(message), key=lambda x: message.count(x), reverse=True)\n    return \" \".join(map(str, sorted_message))",
        "test": "assert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\") == \"1 1 1 3 3 3 2 2 2\"",
        "num_ids": 1118,
        "indeed": false
    },
    {
        "number": 4855,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    A, I = int(inputs[0]), int(inputs[1])\n\n    if I < 24:\n        return str(I)\n\n    citations = 38 * I\n    total_articles = 38\n\n    if citations > 0:\n        min_scientists = 0\n        while citations > 0:\n            if citations >= total_articles:\n                min_scientists += 1\n                citations -= total_articles\n            else:\n                min_scientists += citations // total_articles\n                citations = 0\n        return str(min_scientists)\n    else:\n        return \"1\"\n",
        "test": "assert solution(\"1 100\") == \"100\"",
        "num_ids": 738,
        "indeed": false
    },
    {
        "number": 4856,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input string to a tuple of integers\n    a, b = map(int, stdin.split())\n\n    # Reverse order of digits\n    a = str(a)[::-1]\n    b = str(b)[::-1]\n\n    # Compare digits\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return \"tie\"",
        "test": "assert solution('734 893') == '437'",
        "num_ids": 530,
        "indeed": true
    },
    {
        "number": 4857,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    l, w = map(int, stdin.split())\n    \n    # Initialize a list of words of length l\n    words = [word for word in open(\"words.txt\").readlines() if len(word) == l]\n    \n    # Filter words with weight <= w\n    words = list(filter(lambda x: sum(ord(c) - 96 for c in x) <= w, words))\n    \n    # Sort the remaining words by weight\n    words.sort(key=lambda x: sum(ord(c) - 96 for c in x))\n    \n    # Output the first word with weight <= w\n    return words[0] if words else \"impossible\"",
        "test": "assert solution(\"7 96\") == \"contest\"",
        "num_ids": 756,
        "indeed": false
    },
    {
        "number": 4858,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    M, N, C = [int(x) for x in stdin.split()]\n    frame1 = [list(line.strip()) for line in stdin.split('\\n')[1:M+1]]\n    frame2 = [list(line.strip()) for line in stdin.split('\\n')[M+2:]]\n\n    for i in range(M):\n        for j in range(N):\n            if frame1[i][j] == C:\n                frame1[i][j] = frame2[i][j]\n            elif frame2[i][j] == C:\n                frame2[i][j] = frame1[i][j]\n\n    return '\\n'.join(''.join(line) for line in frame1) + '\\n\\n' + '\\n'.join(''.join(line) for line in frame2)",
        "test": "assert solution(\"\"\"",
        "num_ids": 2657,
        "indeed": false
    },
    {
        "number": 4859,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    b, d, c, l = map(int, stdin.split())\n    \n    possible_solutions = []\n    for i in range(max(b, d, c) + 1):\n        for j in range(max(d, c) + 1):\n            for k in range(max(b, c) + 1):\n                if i + j + k == l:\n                    possible_solutions.append(f\"{i} {j} {k}\")\n    \n    possible_solutions.sort()\n    \n    return \"\\n\".join(possible_solutions) or \"impossible\"",
        "test": "assert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\"",
        "num_ids": 1896,
        "indeed": false
    },
    {
        "number": 4860,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    input_numbers = [int(number) for number in stdin.strip().split('\\n')]\n    input_numbers.sort()\n    \n    missing_numbers = [number for number in range(1, input_numbers[-1]+1) if number not in input_numbers]\n    \n    if missing_numbers:\n        return '\\n'.join(map(str, missing_numbers))\n    else:\n        return 'good job'",
        "test": "assert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == \"1\\n3\\n6\\n12\"",
        "num_ids": 1759,
        "indeed": true
    },
    {
        "number": 4861,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, p, s, v = map(int, stdin.split())\n    t = 157079.04857106  # Assume worst-case scenario\n    for c in range(1, 10):  # Iterate over c values from 1 to 9\n        t_c = (s / v) * (1 + 1 / c)\n        if t_c <= t:\n            t = t_c\n            optimal_c = c\n    return f\"{t:.6f} {optimal_c:.6f}\"",
        "test": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"",
        "num_ids": 809,
        "indeed": false
    },
    {
        "number": 4862,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 2:\n        return \"0\"\n    elif N == 2:\n        return \"1\"\n    else:\n        return str(2*N - 2)",
        "test": "assert solution(\"1\") == \"0\"",
        "num_ids": 340,
        "indeed": true
    },
    {
        "number": 4863,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    answers = stdin.split()[1:]\n    correct_answers = ['A'] * n\n\n    score = 0\n    for i, answer in enumerate(answers, 1):\n        if answer.strip() == correct_answers[i - 1]:\n            score += 1\n\n    return str(score)",
        "test": "assert solution(\"4\\nA\\nA\\nA\\nA\") == \"3\"",
        "num_ids": 571,
        "indeed": false
    },
    {
        "number": 4864,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    r, c, z_r, z_c = map(int, stdin.split())\n\n    article = stdin.split('\\n')[1:]\n    article = [row.replace('.', '') for row in article]\n\n    enlarged_article = []\n    for row in range(r):\n        enlarged_row = []\n        for col in range(c):\n            enlarged_row.extend([row + z_r * i for i in range(z_c)])\n            enlarged_row.append(article[row][col])\n        enlarged_article.append(''.join(enlarged_row))\n\n    return '\\n'.join([''.join(row) for row in enlarged_article])\n",
        "test": "assert solution(\"3 3 1 2\\n.x.\\nx.x.\\n.x.\\n\") == \"def solution(stdin: str) -> str:\\n    pass\"",
        "num_ids": 1024,
        "indeed": false
    },
    {
        "number": 4865,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    output = []\n\n    for line in lines:\n        tokens = line.split()\n        direction, delta, hour, minute = tokens\n\n        # Convert hours and minutes from strings to integers\n        hour = int(hour)\n        minute = int(minute)\n\n        # Calculate the new time\n        if direction == 'F':\n            new_hour = (hour + delta // 60) % 24\n            new_minute = (minute + delta) % 60\n        else:\n            new_hour = (hour - delta // 60) % 24\n            new_minute = (minute - delta) % 60\n\n        # Convert the new time to a string in the format \"HH MM\"\n        new_time = f\"{new_hour:02d} {new_minute:02d}\"\n\n        # Add the new time to the output list\n        output.append(new_time)\n\n    # Join the output list into a single string and return it\n    return '\\n'.join(output)",
        "test": "assert solution(\"2\\nF 20 8 45\\nB 10 9 1\\nF 60 1 0\\nB 30 12 0\\n\") == \"0 0\\n0 0\\n0 0\\n0 0\\n\"",
        "num_ids": 1292,
        "indeed": false
    },
    {
        "number": 4866,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    date_string = stdin.split()\n    month = date_string[0].upper()\n    day = int(date_string[1])\n\n    if month == \"OCT\" and day == 31:\n        return \"yup\"\n    elif month == \"DEC\" and day == 25:\n        return \"yup\"\n    else:\n        return \"nope\"",
        "test": "assert solution(\"OCT 31\") == \"yup\"",
        "num_ids": 563,
        "indeed": true
    },
    {
        "number": 4867,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    m, n = map(int, stdin.split()[0].split())\n    u, l, r, d = map(int, stdin.split()[1].split())\n\n    # Initialize the frame\n    frame = ['#' * n] * (m + u + l + r + d)\n\n    # Populate the frame\n    for line in stdin.split()[2:]:\n        for i, char in enumerate(line):\n            if char in 'abcdefghijklmnopqrstuvwxyz':\n                frame[i * 2 + u][i * 2 + l] = char\n                frame[i * 2 + u + 1][i * 2 + l + r] = char\n            else:\n                frame[i * 2 + u][i * 2 + l] = '.'\n                frame[i * 2 + u + 1][i * 2 + l + r] = '.'\n\n    # Return the framed crossword puzzle\n    return '\\n'.join([''.join(row) for row in frame])\n",
        "test": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \"#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n.#.#.#.#\\ndef solution(stdin: str) -> str:\\n\\tpass\"",
        "num_ids": 1505,
        "indeed": false
    },
    {
        "number": 4868,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into lines\n    lines = stdin.split('\\n')\n    # Remove empty lines\n    lines = [line for line in lines if line.strip()]\n    # Parse each line\n    for line in lines:\n        # Split the line into cells\n        cells = line.split(':')\n        # Remove empty cells\n        cells = [cell.strip() for cell in cells if cell.strip()]\n        # Check if the line is in the correct format\n        if len(cells) == 8 and all(len(cell) == 2 for cell in cells):\n            # Remove the '...' cells\n            cells = [cell for cell in cells if cell!= '...']\n            # Check if the cells are in the correct order\n            if cells == ['a1', 'b1', 'c1', 'd1', 'e1', 'f1', 'g1', 'h1']:\n                return 'White'\n            elif cells == ['a8', 'b8', 'c8', 'd8', 'e8', 'f8', 'g8', 'h8']:\n                return 'Black'\n        else:\n            # If the line is not in the correct format, return None\n            return None\n    # If all lines are not in the correct format, return None\n    return None",
        "test": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\ndef solution(stdin: str) -> str:\\n    pass\\n\"",
        "num_ids": 2715,
        "indeed": false
    },
    {
        "number": 4869,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    A, N = map(float, stdin.split())\n    if A > 4 * N:\n        return \"Need more materials!\"\n    return \"Diablo is happy!\"",
        "test": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"",
        "num_ids": 451,
        "indeed": true
    },
    {
        "number": 4870,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    \n    f, s, g, u, d = input_list\n    \n    if s == g:\n        return str(u + d)\n    \n    if s > g:\n        return \"use the stairs\"\n    \n    count = 0\n    current_floor = s\n    \n    while current_floor < g:\n        count += 1\n        \n        if current_floor + u > g:\n            return str(count)\n        \n        current_floor += u\n    \n    return str(count)\n",
        "test": "assert solution(\"5 1 6 2 1\") == \"3\"",
        "num_ids": 936,
        "indeed": false
    },
    {
        "number": 4871,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    students_scores = list(map(int, stdin.split()[1:]))\n\n    group_score = 0\n    group_count = 0\n\n    for score in students_scores:\n        group_score += score\n        group_count += 1\n\n    if group_count == 1:\n        return f\"{group_score:.2f}\"\n\n    new_group_scores = []\n\n    for i in range(n):\n        if students_scores[i] < students_scores[i - 1]:\n            new_group_scores.append(group_score)\n            group_score = 0\n            group_count = 0\n\n    new_group_scores.append(group_score)\n\n    average_new_group_scores = sum(new_group_scores) / len(new_group_scores)\n\n    return f\"{group_score:.2f}\\n{average_new_group_scores:.6f}\"",
        "test": "assert solution(input(\"Sample Input:\\\\n3\\\\n500\\\\n120\\\\n75\\\\nSample Output:\\\\n128.8\\\\n89.06666666666666\\\\n\")) == \"128.8\\n89.06666666666666\"",
        "num_ids": 1060,
        "indeed": false
    },
    {
        "number": 4872,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, *dirty_pushes = map(int, stdin.split())\n    dirty_pushes = [(d, i) for i, d in enumerate(dirty_pushes)]\n    dirty_pushes.sort()\n    days = 0\n    count = 0\n    for d, _ in dirty_pushes:\n        days = (days + 1) % 366\n        if days in dirty_pushes:\n            count += 1\n            if count == 20:\n                return '0'\n        else:\n            count = 0\n    return '4'",
        "test": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"",
        "num_ids": 846,
        "indeed": false
    },
    {
        "number": 4873,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    width, height = map(int, stdin.split()[0].split())\n    map_data = list(map(str.strip, stdin.split()[1:]))\n    gold = 0\n    player_pos = 0\n    traps = set()\n    \n    def get_player_pos(player_pos):\n        return player_pos % width, player_pos // width\n    \n    def get_safe_pos(player_pos):\n        pos = get_player_pos(player_pos)\n        while True:\n            if map_data[pos[1]][pos[0]] == '.':\n                break\n            elif map_data[pos[1]][pos[0]] == 'T':\n                return None, None\n            elif map_data[pos[1]][pos[0]] == 'P':\n                return pos[0], pos[1]\n            else:\n                pos = pos[0] - 1 if pos[0] > 0 else pos[0] + 1, pos[1]\n        return None, None\n    \n    def get_safe_distance(player_pos):\n        safe_pos = get_safe_pos(player_pos)\n        if safe_pos:\n            return abs(safe_pos[0] - get_player_pos(player_pos)[0]) + abs(safe_pos[1] - get_player_pos(player_pos)[1])\n        return 0\n    \n    while True:\n        safe_pos = get_safe_pos(player_pos)\n        if safe_pos:\n            gold += 1\n            player_pos = safe_pos[0] * width + safe_pos[1]\n            continue\n        else:\n            break\n    \n    return str(gold)",
        "test": "assert solution(\"5 10\\n##########\\n#.PPP...T#\\n#....GTG.#\\n#...GG..P#\\n#T.GGGGGG#\\n##########\") == \"2\"",
        "num_ids": 3460,
        "indeed": false
    },
    {
        "number": 4874,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    dance = [list(row.strip()) for row in stdin.splitlines()[1:]]\n    rating = 0\n    for i, row in enumerate(dance):\n        for j, dancer in enumerate(row):\n            if dancer == '_':\n                rating += (j + 1) + (N - i) * len(row)\n    return str(rating)",
        "test": "assert solution(",
        "num_ids": 1941,
        "indeed": false
    },
    {
        "number": 4875,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    pig_latin_lines = []\n\n    for line in lines:\n        words = line.split()\n        pig_latin_words = []\n\n        for word in words:\n            word_letters = list(word)\n            first_letter = word_letters[0]\n            if first_letter.lower() in 'aeiou':\n                pig_latin_word = word + 'yay'\n            else:\n                word_letters.insert(0, 'ay')\n                pig_latin_word = ''.join(word_letters)\n            pig_latin_words.append(pig_latin_word)\n\n        pig_latin_lines.append(' '.join(pig_latin_words))\n\n    return '\\n'.join(pig_latin_lines)",
        "test": "assert solution(\"def solution(stdin: str) -> str:\\n\\tpass\\ni cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"",
        "num_ids": 1387,
        "indeed": false
    },
    {
        "number": 4876,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    menus = []\n    \n    for _ in range(n):\n        menu_items = int(stdin.split()[1])\n        menu = stdin.split()[2:2+menu_items]\n        menus.append(menu)\n    \n    for menu in menus:\n        if \"pea soup\" in menu and \"pancakes\" in menu:\n            return menu[0]\n    \n    return \"Anywhere is fine I guess\"\n\ndef",
        "test": "assert solution(\"2\\n2\\nk\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"Anywhere is fine I guess\"",
        "num_ids": 896,
        "indeed": false
    },
    {
        "number": 4877,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = map(int, stdin.split())\n    i = 0\n    count = 0\n    while i < h:\n        i += a - b\n        count += 1\n    return str(count)",
        "test": "assert solution('5 0 15') == '3'",
        "num_ids": 375,
        "indeed": true
    },
    {
        "number": 4878,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    r1, s = map(int, stdin.split())\n    if s!= (r1 + r2) / 2:\n        raise ValueError(\"Mean does not match\")\n    return str(r2)",
        "test": "assert solution(\"11 15\") == \"19\"",
        "num_ids": 295,
        "indeed": false
    },
    {
        "number": 4879,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    if a == 'South' and b == 'West' and c == 'East':\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert solution(\"North South East\") == \"No\"",
        "num_ids": 609,
        "indeed": true
    },
    {
        "number": 4880,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    plaintext = stdin.split()[2].lower()\n    ciphertext = stdin.split()[3].lower()\n\n    key = []\n    for i in range(n):\n        key.append(ciphertext[i])\n\n    k = key + plaintext[n:]\n    b = [ord(char) - ord('a') + k[i] for i, char in enumerate(plaintext)]\n    b = [chr(i + ord('a')) for i in b]\n\n    return ''.join(b)\n",
        "test": "assert solution(",
        "num_ids": 850,
        "indeed": false
    },
    {
        "number": 4881,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 1 or N > 10:\n        return \"Invalid input\"\n\n    secret_sum = 0\n    for i in range(N):\n        secret_sum += i + 1\n\n    if secret_sum % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "test": "assert solution(\"1\") == \"Either\"",
        "num_ids": 482,
        "indeed": false
    },
    {
        "number": 4882,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.split('\\n')[0])\n    costs = [int(line) for line in stdin.split('\\n')[1:]]\n\n    # Calculate the magnitude of the cost\n    def magnitude(n: int) -> int:\n        if n == 0:\n            return 1\n        return 1 + magnitude(n // 10)\n\n    # Calculate the number of digits required to represent the cost\n    result = []\n    for cost in costs:\n        result.append(magnitude(cost))\n\n    return '\\n'.join(map(str, result))",
        "test": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"",
        "num_ids": 2741,
        "indeed": false
    },
    {
        "number": 4883,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    translations = dict(stdin.strip().split())\n    word_pairs = stdin.strip().split('\\n')\n\n    def match_word(word1: str, word2: str) -> bool:\n        if len(word1)!= len(word2):\n            return False\n\n        for i, (char1, char2) in enumerate(zip(word1, word2)):\n            if char1 in translations and char2 not in translations[char1]:\n                return False\n            elif char2 in translations and char1 not in translations[char2]:\n                return False\n\n        return True\n\n    result = 'yes'\n    for pair in word_pairs:\n        word1, word2 = pair.split()\n        if match_word(word1, word2):\n            result = 'yes'\n        else:\n            result = 'no'\n            break\n\n    return result\n",
        "test": "assert solution(\"9 5\\nctirkpocorroteftuhwpwewecantheworkpeopleitofoutthe\\n\") == \"yes\\nno\\nno\\nyes\\nyes\\ndef solution(stdin: str) -> str:\\n    pass\"",
        "num_ids": 1230,
        "indeed": false
    },
    {
        "number": 4884,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, P = map(int, stdin.split())\n    contestants = []\n    for _ in range(N):\n        contestants.append(stdin.readline().strip())\n\n    # calculate carrots\n    carrots = 0\n    for problem in contestants:\n        carrots += sum(1 for c in problem if c == 'c')\n\n    # calculate expected huffle-puff problems\n    expected = P * N\n\n    # calculate actual huffle-puff problems\n    actual = sum(1 for c in problem for p in puff_problems if p in c)\n\n    # calculate carrots to hand out\n    carrots_to_hand_out = carrots + expected - actual\n\n    return str(carrots_to_hand_out)\n",
        "test": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == \"1\"",
        "num_ids": 631,
        "indeed": false
    },
    {
        "number": 4885,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = 8, 8\n    white_pieces = []\n    black_pieces = []\n    row_data = ['' for _ in range(rows)]\n\n    for i, line in enumerate(stdin.split('\\n')):\n        for j, char in enumerate(line):\n            if char.isalpha():\n                if char.isupper():\n                    if i == 0:\n                        white_pieces.append(char)\n                    elif i == 7:\n                        black_pieces.append(char)\n                    else:\n                        row_data[7-i].append(char)\n                else:\n                    if i == 7:\n                        black_pieces.append(char)\n                    else:\n                        row_data[7-i].append(char)\n            else:\n                row_data[7-i].append(char)\n\n    white_positions = ', '.join(white_pieces[i:i+2] for i in range(0, len(white_pieces), 2))\n    black_positions = ', '.join(black_pieces[i:i+2] for i in range(0, len(black_pieces), 2))\n\n    return f\"White: {white_positions}\\nBlack: {black_positions}\"",
        "test": "assert solution(input()) == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"",
        "num_ids": 2051,
        "indeed": false
    },
    {
        "number": 4886,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    if N % 2 == 0 or K > N:\n        return \"You will become a flying monkey!\"\n\n    def is_even(x: int) -> bool:\n        return x % 2 == 0\n\n    def is_prime(x: int) -> bool:\n        if x <= 1:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    def is_between(x: int, lower: int, upper: int) -> bool:\n        return lower <= x <= upper\n\n    def ask_question(question: str, values: List[str]) -> str:\n        return random.choice(values)\n\n    def check_answer(secret_number: int, question: str, value: str) -> bool:\n        if question == \"Is the number even?\":\n            return value == \"true\"\n        elif question == \"Is the number between $7$ and $10$?\":\n            lower, upper = 7, 10\n            if value == \"true\":\n                return lower <= secret_number <= upper\n            else:\n                return lower > secret_number or upper < secret_number\n        elif question == \"Is the number $17$ or $22$?\":\n            if value == \"true\":\n                return secret_number in [17, 22]\n            else:\n                return secret_number not in [17, 22]\n        elif question == \"Is the number prime?\":\n            return value == \"true\"\n\n    def play_game(secret_number: int) -> str:\n        questions = [\n            (1, \"Is the number even?\"),\n            (1, \"Is the number between $7$ and $10$?\"),\n            (1, \"Is the number $17$ or $22$?\"),\n            (1, \"Is the number prime?\"),\n        ]\n        for i in range(K):\n            if random.randint(1, 3) == 1:\n                questions.append((1, f\"Is the number {i}?\"))\n        for i in range(K, N):\n            if random.randint(1, 2) == 1:\n                questions.append((1, f\"Is the number {i}?\"))\n\n        answers = []\n        for question, values in questions:\n            answer = ask_question(question, values)\n            answers.append((question, answer))\n\n        correct_answers = sum(check_answer(secret_number, question, answer) for question, answer in answers)\n        if correct_answers == N:\n            return \"Your wish is granted!\"\n        else:\n            return \"You will become a flying monkey!\"\n\n    secret_number = random.randint(1, N)\n    if is_prime(secret_number):\n        secret_number += 1\n\n    if play_game(secret_number) == \"Your wish is granted!\":\n        return \"Your wish is granted!\"\n    else:\n        return \"You will become a flying monkey!\"",
        "test": "assert solution(\"8 3\") == \"Your wish is granted!\"",
        "num_ids": 2114,
        "indeed": false
    },
    {
        "number": 4887,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    \n    # Approach:\n    # We can calculate the length of the fence by finding the area of the fence and dividing by the area of the pasture.\n    # Since the area of the pasture is the same as the area of the fence, we can use the same formula to find the area of the fence.\n    # Let L be the length of the pasture and A be the area of the fence. Then,\n    # L*A = a\n    # L^2 = a\n    # L = sqrt(a)\n    \n    # We can then use the formula for the area of a square to find the area of the fence:\n    # A = L^2\n    # A = sqrt(a)\n    # L = sqrt(a)\n    \n    # Using this formula, we can find the length of the fence:\n    # L = sqrt(a)\n    # L = (sqrt(a))^2\n    # L = (sqrt(a) + sqrt(a)) / 2\n    # L = sqrt(a) + sqrt(a) - sqrt(a) + sqrt(a)\n    # L = 2 * sqrt(a) - sqrt(a)\n    # L = 2 * sqrt(a)\n    \n    # Note that we are using the formula for the area of a square, which assumes that the side of the square is equal to the length of the square root.\n    # To avoid this issue, we need to use the formula for the area of a rectangle:\n    # A = l * w\n    # l = sqrt(a)\n    # w = sqrt(a)\n    # A = sqrt(a) * sqrt(a)\n    \n    # We can then use this formula to find the length of the fence:\n    # L = (sqrt(a) + sqrt(a)) / 2\n    # L = sqrt(a) * sqrt(2) / 2\n    # L = sqrt(a)\n    \n    # Finally, we can multiply the length of the fence by the area of the pasture to get the total length of the fence:\n    # L * A = a\n    # L^2 * A = a\n    # L^2 = a\n    # L = sqrt(a)\n    \n    # Using the formula for the area of a square, we can find the area of the fence:\n    # A = sqrt(a)\n    \n    # We can now find the length of the fence:\n    # L = sqrt(a)\n    # L = (sqrt(a))^2\n    # L = (sqrt(a) + sqrt(a)) / 2\n    # L = sqrt(a) + sqrt(a) - sqrt(a) + sqrt(a)\n    # L = 2 * sqrt(a) - sqrt(a)\n    # L = 2 * sqrt(a)\n    \n    # We can then multiply the length of the fence by the area of the pasture to get the total length of the fence:\n    # L * A = a\n    # L^2 * A = a\n    # L^2 = a\n    # L = sqrt(a)\n    \n    # We can now use the formula for the area of a square to find the area of the fence:\n    # A = sqrt(a)\n    \n    # We can now find the length of the fence:\n    # L = sqrt(a)\n    # L = (sqrt(a))^2\n    # L = (sqrt(a) + sqrt(a)) / 2\n    # L = sqrt(a) + sqrt(a) - sqrt(a) + sqrt(a)\n    # L = 2 * sqrt(a) - sqrt(a)\n    # L = 2 * sqrt(a)\n    \n    # We can then multiply the length of the fence by the area of the pasture to get the total length of the fence:\n    # L * A = a\n    # L^2 * A = a\n    # L^2 = a\n    # L = sqrt(a)\n    \n    # We can now use the formula for the area of a square to find the area of the fence:\n    # A = sqrt(a)\n    \n    # We can now find the length of the fence:\n    # L = sqrt(a)\n    # L = (sqrt(a))^2\n    # L = (sqrt(a) + sqrt(a)) / 2\n    # L = sqrt(a) + sqrt(a) - sqrt(a) + sqrt(a)\n    # L = 2 * sqrt(a) - sqrt(a)\n    # L = 2 * sqrt(a)\n    \n    # We can then multiply the length of the fence by the area of the pasture to get the total length of the fence:\n    # L * A = a",
        "test": "assert solution(\"16\") == \"16\", \"Test case failed for input 16\"",
        "num_ids": 1338,
        "indeed": false
    },
    {
        "number": 4888,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, T = map(int, stdin.split())\n    tasks = list(map(int, stdin.split()[1:]))\n    tasks.sort(reverse=True)\n    count = 0\n    for task in tasks:\n        if task <= T:\n            count += 1\n        else:\n            break\n    return str(count)\n\nprint(solution(\"6 180\\n45 30 55 20 80 20\")) # Output: 4",
        "test": "assert solution(\"6 180\\n45 30 55 20 80 20\") == \"4\"",
        "num_ids": 646,
        "indeed": false
    },
    {
        "number": 4889,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    # Convert the input string to a list of integers\n    lengths = list(map(int, stdin.split()))\n    \n    # Find the maximum length\n    max_length = max(lengths)\n    \n    # Calculate the area of the jumbo javelin\n    jumbo_javelin_area = 1.5 * max_length * max_length\n    \n    return str(jumbo_javelin_area)",
        "test": "assert solution(\"\"\"",
        "num_ids": 491,
        "indeed": false
    },
    {
        "number": 4890,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.split())\n    new_sodas = list(map(int, stdin.split()))\n\n    def sort_sodas(sodas):\n        return sorted(sodas, key=lambda x: (-x[1], x[0]))\n\n    def is_possible(sodas):\n        colds = [s for s, c in sodas if c == d]\n        if len(colds) < m:\n            return False\n        return any(s >= 2 for s, c in sodas)\n\n    def refill_scheme():\n        fridge = [0] * s\n        fridge[0] = new_sodas.pop(0)\n        fridge[1:] = [0] * (n - 1)\n        for i, soda in enumerate(new_sodas):\n            fridge[i % s] = soda\n        return fridge\n\n    def find_optimal_scheme():\n        sodas = [(i, new_sodas.count(i)) for i in range(d)]\n        for _ in range(n - m):\n            sodas = sort_sodas(sodas)\n            if is_possible(sodas):\n                return sodas\n        return None\n\n    def find_max_probability(schemes):\n        max_probability = 0\n        for scheme in schemes:\n            probability = sum(scheme) / d\n            if probability > max_probability:\n                max_probability = probability\n        return max_probability\n\n    fridge = find_optimal_scheme()\n    if not fridge:\n        return \"impossible\"\n    return \" \".join(map(str, fridge))\n\ntest_stdin = \"5 3 3 4\\n0 1 4\"\nprint(solution(test_stdin))",
        "test": "assert solution(\"5 3 3 4\\n0 1 4\\n\") == \"2 3 0\"",
        "num_ids": 1355,
        "indeed": false
    },
    {
        "number": 4891,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    kings, queens, rooks, bishops, knights, pawns = map(int, stdin.split())\n    \n    # Adding pieces\n    add_pieces = {\n        \"king\": kings,\n        \"queen\": queens,\n        \"rook\": rooks,\n        \"bishop\": bishops,\n        \"knight\": knights,\n        \"pawn\": pawns\n    }\n    \n    # Removing pieces\n    remove_pieces = {\n        \"king\": kings - 1,\n        \"queen\": queens - 1,\n        \"rook\": rooks - 2,\n        \"bishop\": bishops - 2,\n        \"knight\": knights - 2,\n        \"pawn\": pawns - 8\n    }\n    \n    # Calculating the difference\n    difference = [add_pieces[piece] - remove_pieces[piece] for piece in add_pieces]\n    \n    # Converting the difference list to a string\n    output = \" \".join(map(str, difference))\n    \n    return output",
        "test": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"",
        "num_ids": 1212,
        "indeed": false
    },
    {
        "number": 4892,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, *passwords = map(float, stdin.split('\\n'))\n    passwords = [(p, 1 - p) for p in passwords]\n    passwords = sorted(passwords, key=lambda x: x[1], reverse=True)\n\n    # Find the expected number of attempts\n    expected = 0\n    for p in passwords:\n        expected += p[1]\n\n    return f'{expected:.4f}'",
        "test": "assert solution(",
        "num_ids": 938,
        "indeed": false
    },
    {
        "number": 4893,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    distances = list(map(int, stdin.split()[1:]))\n\n    min_distance = float('inf')\n    for i in range(len(distances)):\n        if i == 0:\n            min_distance = max(distances[0] - p, 0)\n        else:\n            min_distance = min(min_distance, distances[i] - p)\n\n    return str(min_distance)",
        "test": "assert solution(\"3 1\\n1 2 4\") == \"1\"",
        "num_ids": 762,
        "indeed": false
    },
    {
        "number": 4894,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    notes = stdin.split()[1:]\n\n    # Initialize staff and padding\n    staff = []\n    padding = [0] * 6\n\n    # Initialize notes and bars\n    notes = [note.split() for note in notes]\n    note_bars = [0] * n\n\n    # Initialize notes\n    current_note = 0\n    current_bar = 0\n    for i, note in enumerate(notes):\n        if note[1] in ['C', 'D', 'E', 'F', 'G']:\n            note_pitch = note[1]\n            note_duration = 1 if note[2] is '' else int(note[2])\n            if note_bars[current_note] + note_duration > 4:\n                note_bars[current_note] = 0\n                current_bar += 1\n            note_bars[current_note] += note_duration\n\n            for _ in range(note_bars[current_note]):\n                note_staff = list(padding)\n                note_staff.append('*')\n                staff.append(''.join(note_staff))\n\n            current_note += 1\n\n    # Create staff lines\n    for i in range(4):\n        staff.append(''.join(padding))\n\n    # Print staff\n    for line in staff:\n        print(line)\n\n    return '\\n'.join(staff)\n",
        "test": "assert solution(\"27 C C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"\"\"",
        "num_ids": 2560,
        "indeed": false
    },
    {
        "number": 4895,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.split()[0])\n    sticks = [int(x) for x in stdin.split()[1:]]\n\n    # find a non-degenerate triangle\n    for i in range(n):\n        for j in range(i + 1, n):\n            if i!= j:\n                for k in range(j + 1, n):\n                    if i!= k and j!= k:\n                        if (sticks[i] + sticks[j] > sticks[k]) and (sticks[j] + sticks[k] > sticks[i]) and (sticks[i] + sticks[k] > sticks[j]):\n                            triangle = sorted([sticks[i], sticks[j], sticks[k]])\n                            return \"possible\"\n\n    return \"impossible\"\n",
        "test": "assert solution(\"1\\n1\") == \"impossible\"",
        "num_ids": 1005,
        "indeed": true
    },
    {
        "number": 4896,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    widths = list(map(int, stdin.split()[1:]))\n    \n    towers = 1\n    current_tower = [widths[0]]\n    for i in range(1, n):\n        if widths[i] > max(current_tower):\n            towers += 1\n            current_tower = [widths[i]]\n        else:\n            current_tower.append(widths[i])\n    \n    return str(towers)",
        "test": "assert solution(\"2\\n1 1 1\") == \"1\"",
        "num_ids": 670,
        "indeed": false
    },
    {
        "number": 4897,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    def get_time(runner_name: str) -> float:\n        for line in stdin.split('\\n'):\n            if line.startswith(runner_name):\n                return float(line.split()[1])\n        return 0\n\n    runners = []\n    for line in stdin.split('\\n')[1:]:\n        name, a, b = line.split()\n        runners.append((name, float(a), float(b)))\n\n    runners.sort(key=lambda x: (-x[1], x[0]))\n    best_time = runners[0][1]\n\n    team = []\n    for i in range(4):\n        runner = runners[i]\n        if runner[1] < best_time / 2:\n            team.append(runner[0])\n        if len(team) == 4:\n            break\n\n    return f\"{best_time:.9f}\\n{' '.join(team)}\"\n\ndef",
        "test": "assert solution(\"6\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61\\n\") == \"35.54\\nCARTER\\nBOLT\\nPOWELL\\nBLAKE\\n\"",
        "num_ids": 1903,
        "indeed": false
    },
    {
        "number": 4898,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    preferences = list(map(int, stdin.split()[1:]))\n\n    room_temps = set()\n    for preference in preferences:\n        if preference not in room_temps:\n            room_temps.add(preference)\n\n    minions_per_room = {}\n    for minion, preference in zip(preferences, room_temps):\n        if minion not in minions_per_room:\n            minions_per_room[minion] = [preference]\n        else:\n            minions_per_room[minion].append(preference)\n\n    minions_per_room_count = [len(minions) for minions in minions_per_room.values()]\n    minions_per_room_count.sort()\n    minions_per_room_count.reverse()\n\n    return str(minions_per_room_count[0] + minions_per_room_count[1])",
        "test": "assert solution(\"5\\n1 2\\n2 4\\n5 6\\n3 4\\n5 6\\n7 8\\n9 10\\n11 12\\n13 14\\n15 16\") == \"3\"",
        "num_ids": 1342,
        "indeed": false
    },
    {
        "number": 4899,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    heey = 'he' * (len(stdin) // 2) + 'ey' * (len(stdin) // 2)\n    return heey",
        "test": "assert solution(\"hey\") == \"heey\"",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 4900,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    distances = [list(map(int, stdin.split()[i:i+n])) for i in range(0, n*n, n)]\n    roads = []\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if distances[i][j] > 0:\n                roads.append((i+1, j+1))\n\n    roads.sort()\n    result = []\n\n    for i in range(len(roads) - 1):\n        result.append(' '.join(map(str, roads[i:i+2])))\n\n    return '\\n'.join(result)\n\nprint(solution('4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\\n')) # Output: 1 2 1 3 1 4",
        "test": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\\n\") == \"1 2\\n1 3\\n1 4\\n\"",
        "num_ids": 2101,
        "indeed": false
    },
    {
        "number": 4901,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    # Divide\n    first_half = stdin[:len(stdin) // 2]\n    second_half = stdin[len(stdin) // 2:]\n    \n    # Rotate\n    first_half_rotated = [chr((ord(char) - ord('A') + 26) % 26 + ord('A')) for char in first_half]\n    second_half_rotated = [chr((ord(char) - ord('A') + 26) % 26 + ord('A')) for char in second_half]\n    \n    # Merge\n    merged = first_half_rotated + second_half_rotated\n    \n    # Decrypt\n    decrypted = [chr((ord(char) - ord('A') + 26 - ord(merged[i])) % 26 + ord('A')) for i, char in enumerate(merged)]\n    \n    return ''.join(decrypted)",
        "test": "assert solution('EWPGAJRB') == 'ABCD'",
        "num_ids": 1038,
        "indeed": false
    },
    {
        "number": 4902,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    # Check if the string is palindrome or not\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    # Remove the first and last characters of the string\n    s = stdin[1:-1]\n\n    # Check if the string is a palindrome\n    if is_palindrome(s):\n        return \"2\"\n\n    # Check if the string is a Peragram\n    for i in range(len(s)):\n        for j in range(i + 2, len(s) + 1):\n            substring = s[i:j]\n            if is_palindrome(substring):\n                return str(j - i - 1)\n\n    return \"3\"  # If it is not a palindrome and not a Peragram, return 3 (impossible)",
        "test": "assert solution(\"abc\") == \"2\"",
        "num_ids": 830,
        "indeed": false
    },
    {
        "number": 4903,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    def count_a(line: str) -> int:\n        return sum(1 for char in line if char == 'a')\n\n    def count_h(line: str) -> int:\n        return sum(1 for char in line if char == 'h')\n\n    def is_valid_aah(line: str) -> bool:\n        a_count = count_a(line)\n        h_count = count_h(line)\n        return a_count >= 1 and h_count == 1\n\n    aah_count = count_a(stdin.strip())\n    doctor_aah = stdin.strip().split('h')[0]\n    doctor_aah_count = count_h(doctor_aah)\n\n    if is_valid_aah(stdin.strip()):\n        return \"go\"\n    elif aah_count <= 1 and doctor_aah_count >= 2:\n        return \"go\"\n    else:\n        return \"no\"",
        "test": "assert solution(\"aaah\\ndef\") == \"go\"",
        "num_ids": 864,
        "indeed": false
    },
    {
        "number": 4904,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    alice_scores = []\n    barbara_scores = []\n\n    for i in range(0, len(stdin), 2):\n        if stdin[i] == 'A':\n            alice_scores.append(int(stdin[i + 1]))\n        else:\n            barbara_scores.append(int(stdin[i + 1]))\n\n    alice_scores.sort(reverse=True)\n    barbara_scores.sort(reverse=True)\n\n    alice_lead = barbara_scores[0] - barbara_scores[1]\n    barbara_lead = alice_scores[0] - alice_scores[1]\n\n    if alice_lead == 0 and barbara_lead == 0:\n        return 'T' if alice_scores[1] - alice_scores[0] > barbara_scores[1] - barbara_scores[0] else 'A'\n    elif alice_lead == 0 and barbara_lead > 0:\n        return 'B'\n    elif alice_lead > 0 and barbara_lead == 0:\n        return 'A'\n    else:\n        return 'T' if alice_lead > barbara_lead else 'B'\n",
        "test": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"",
        "num_ids": 1249,
        "indeed": true
    },
    {
        "number": 4905,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[0:2])\n    A, B, K, G = map(int, stdin.split()[2:6])\n    street_labels = stdin.split()[6:6 + M]\n    intersections = list(map(int, stdin.split()[6 + M:]))\n    times = [0] * N\n    for i in range(G):\n        start, end, length = map(int, stdin.split()[i + 1:i + 4])\n        times[start - 1] += length\n        times[end - 1] += length\n\n    blocked_times = set()\n    for i in range(G):\n        start, end, length = map(int, stdin.split()[i + 1:i + 4])\n        blocked_times.add(start - 1)\n        blocked_times.add(end - 1)\n\n    blocked_intervals = []\n    for i in range(N):\n        if times[i]!= 0:\n            blocked_intervals.append((i, i + times[i] - 1))\n\n    for i in range(N):\n        if i not in blocked_times and i + times[i] <= K + 1:\n            blocked_intervals.append((i, i + times[i] - 1))\n\n    min_time = 2 * 10 ** 9\n    for start, end in blocked_intervals:\n        for i in range(K + 1):\n            if start + i * times[start] <= end <= start + (i + 1) * times[start]:\n                min_time = min(min_time, end - start)\n                break\n\n    return str(min_time)\n\n\ndef",
        "test": "assert solution(\"6 5\\n1 6 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\\n\") == \"21\"",
        "num_ids": 1717,
        "indeed": false
    },
    {
        "number": 4906,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    if stdin[0] == 'E':\n        encoded_string = run_length_encode(stdin[3:])\n        print(encoded_string)\n    elif stdin[0] == 'D':\n        decoded_string = run_length_decode(stdin[3:])\n        print(decoded_string)\n    else:\n        print(\"Invalid input.\")\n\ndef",
        "test": "assert solution(\"D H3e2l3o1W1o3r4l2d1!2\") == \"HHHeellloWooorrrrlld!!\"",
        "num_ids": 1067,
        "indeed": false
    },
    {
        "number": 4907,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    alice = [True] * (n + 1)\n    bob = [False] * (n + 1)\n    alice[1] = False\n    bob[1] = False\n\n    for i in range(2, n + 1):\n        if alice[i - 1] and bob[i - 1]:\n            alice[i] = True\n        elif alice[i - 1]:\n            alice[i] = True\n        elif bob[i - 1]:\n            bob[i] = True\n\n    if alice[n]:\n        print(\"Alice\")\n        break_length = 1\n        for i in range(2, n + 1):\n            if alice[i - 1] and bob[i - 1]:\n                if i - break_length == 1:\n                    break_length = i\n                    break\n        print(break_length)\n    else:\n        print(\"Bob\")\n\n    return \"Alice\" if alice[n] else \"Bob\"",
        "test": "assert solution(\"2\\n\") == \"Alice\"",
        "num_ids": 835,
        "indeed": false
    },
    {
        "number": 4908,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    if len(nums)!= 3:\n        raise ValueError(\"Input must contain exactly three integers\")\n    for i in range(len(nums)):\n        if nums[i] < 1 or nums[i] > 99:\n            raise ValueError(\"Input integers must be between 1 and 99\")\n    return f\"{nums[0]}+{nums[1]}={nums[2]}\"",
        "test": "assert solution(\"5 3 8\") == \"5+3=8\"",
        "num_ids": 858,
        "indeed": false
    },
    {
        "number": 4909,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    d = list(map(int, stdin.split()[1:]))\n\n    # check if the given array of d is valid\n    for i in range(n):\n        if d[i] > n - 1 or d[i] < 1:\n            return \"NO\"\n\n    # check if the network is possible or not\n    for i in range(n):\n        for j in range(n):\n            if i!= j and d[i] > 0 and d[j] > 0:\n                if d[i] + d[j] > n - 1:\n                    return \"NO\"\n\n    return \"YES\"",
        "test": "assert solution(\"8\\n3 2 2 1 1 3 1 1\") == \"YES\"",
        "num_ids": 1052,
        "indeed": true
    },
    {
        "number": 4910,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    colleagues = [stdin.split()[i] for i in range(1, n+1)]\n    max_win_category = ''\n    max_win_prob = 0\n    for category in colleagues:\n        if category in ['ghost','mummy', 'witch']:\n            prob = 1\n        else:\n            prob = 0\n        if prob > max_win_prob:\n            max_win_prob = prob\n            max_win_category = category\n    return max_win_category",
        "test": "assert solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\\n\") == \"ghost\"",
        "num_ids": 1283,
        "indeed": false
    },
    {
        "number": 4911,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    attributes = stdin.split('\\n')[0].split()\n    songs = [line.split() for line in stdin.split('\\n')[1:]]\n    commands = [line.strip() for line in stdin.split('\\n')[1:][:-1]]\n\n    for command in commands:\n        if command == 'Artist':\n            songs = sorted(songs, key=lambda x: (x[0], x[1], x[2]))\n        elif command == 'Album':\n            songs = sorted(songs, key=lambda x: (x[1], x[2]))\n        elif command == 'Song_Title':\n            songs = sorted(songs, key=lambda x: (x[2], x[3]))\n        else:\n            raise ValueError('Invalid sort command')\n\n    for i, song in enumerate(songs, start=1):\n        print(f'{i}.',''.join(song))\n        print()\n\n    return ''",
        "test": "assert solution(\"\"\"",
        "num_ids": 1751,
        "indeed": false
    },
    {
        "number": 4912,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    h, w, n = map(int, stdin.split())\n    bricks = list(map(int, stdin.split()))\n    \n    def is_valid(bricks):\n        max_height = 0\n        for brick in bricks:\n            if brick > max_height:\n                max_height = brick\n        return max_height <= h\n    \n    def is_complete(bricks):\n        curr_height = 0\n        for brick in bricks:\n            curr_height += brick\n            if curr_height > h:\n                return False\n        return True\n    \n    def backtrack(bricks, layer):\n        if is_valid(bricks):\n            if is_complete(bricks):\n                print(bricks)\n                return True\n            elif layer < n:\n                for i in range(len(bricks)):\n                    backtrack(bricks[:i] + bricks[i+1:], layer + 1)\n        return False\n    \n    backtrack(bricks, 1)\n    return \"YES\" if backtrack(bricks, 1) else \"NO\"",
        "test": "assert solution(\"1 10 3\\n1 1 1 1\") == \"NO\"",
        "num_ids": 1341,
        "indeed": false
    },
    {
        "number": 4913,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n_people = int(lines[0])\n    people = []\n    \n    for i in range(1, n_people + 1):\n        vaccinated, strain_a, strain_b, strain_c = [line.strip() for line in lines[i].split()]\n        people.append([vaccinated, strain_a, strain_b, strain_c])\n    \n    # Calculate the infection rates for each strain\n    strain_a_infected = sum([1 for p in people if p[1] == 'Y'])\n    strain_b_infected = sum([1 for p in people if p[2] == 'Y'])\n    strain_c_infected = sum([1 for p in people if p[3] == 'Y'])\n    \n    # Calculate the reduction in infection rates for each strain\n    strain_a_rate = (strain_a_infected / n_people) * 100\n    strain_b_rate = (strain_b_infected / n_people) * 100\n    strain_c_rate = (strain_c_infected / n_people) * 100\n    \n    # Calculate the efficacy of the vaccine\n    vaccine_efficacy = ((1 - strain_a_rate) * (1 - strain_b_rate) * (1 - strain_c_rate)) / (strain_a_rate * strain_b_rate * strain_c_rate)\n    \n    # Print the results\n    print(f'{strain_a_rate:.2f}')\n    print(f'{strain_b_rate:.2f}')\n    print(f'{strain_c_rate:.2f}')\n    print(f'{vaccine_efficacy:.2f}')\n    \n    return''.join(f'{strain_a_rate:.2f}' for _ in range(n_people))\n\ntest_input = '''\n10\nNYNY\nNNYY\nNYYY\nNYYN\nNNNY\nYYNN\nYYYN\nYYNY\nYYNN\nYYNY\n'''\n\nprint(solution(test_input))  # Output: 66.67 50.00 50.00 66.67",
        "test": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\\nYYNY\") == \"Not Effective\\n66.666667\\n50.000000\"",
        "num_ids": 2300,
        "indeed": false
    },
    {
        "number": 4914,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    correct_answers = stdin.split()[1]\n    correct_count = 0\n    winner = \"\"\n\n    for i in range(N):\n        if correct_answers[i] == \"A\":\n            correct_count += 1\n            if correct_count > 1:\n                winner = \"Adrian\"\n            else:\n                winner = \"Bruno\"\n        elif correct_answers[i] == \"B\":\n            correct_count += 1\n            if correct_count > 1:\n                winner = \"Bruno\"\n            else:\n                winner = \"Adrian\"\n        elif correct_answers[i] == \"C\":\n            correct_count += 1\n            if correct_count > 1:\n                winner = \"Goran\"\n            else:\n                winner = \"Bruno\"\n\n    if correct_count > 0:\n        return str(correct_count) + \"\\n\" + winner\n    else:\n        return \"0\\n\"",
        "test": "assert solution(\"BAACC\") == \"Bruno\"",
        "num_ids": 1238,
        "indeed": false
    },
    {
        "number": 4915,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    problem_count = 0\n    time_score = 0\n    problem_score = 0\n\n    for line in stdin.split('\\n'):\n        if line == '-1':\n            break\n\n        minutes, problem, result = line.split()\n        minutes = int(minutes)\n        result = result[0].lower()\n\n        if result == 'right':\n            problem_count += 1\n            time_score += minutes\n            if problem_count == 1:\n                problem_score = minutes\n            elif problem_count == 2:\n                problem_score += 40\n        elif result == 'wrong':\n            pass\n        else:\n            raise ValueError(\"Invalid result\")\n\n    return f\"{problem_count} {time_score}\"",
        "test": "assert solution(\"\"\"3 E right",
        "num_ids": 1038,
        "indeed": false
    },
    {
        "number": 4916,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    tiles = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    visited = set()\n    queue = [(1, 1)]\n    visited.add(1)\n    visited.add(k)\n    dist = 0\n\n    while queue:\n        x, y = queue.pop(0)\n        dist += abs(x - n) + abs(y - n)\n\n        if x == n and y == n:\n            return str(dist)\n\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 1 <= nx <= n and 1 <= ny <= n and (nx, ny) not in visited and tiles[nx - 1][ny - 1]!= 0:\n                visited.add((nx, ny))\n                queue.append((nx, ny))\n\n    return str(-1)\n",
        "test": "assert solution('''10 5",
        "num_ids": 2688,
        "indeed": false
    },
    {
        "number": 4917,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, *intervals = list(map(int, stdin.split()))\n    intervals = sorted(set(intervals))\n\n    if len(intervals) % 2 == 1:\n        return \"edward is right\"\n    elif len(intervals) % 2 == 0:\n        return \"gunilla has a point\"",
        "test": "assert solution(\"1 7\\n5 5\") == \"gunilla has a point\"",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 4918,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    groups = [set() for _ in range(n+1)]\n    \n    for i in range(q):\n        cmd, a, b = stdin.strip().split()\n        a, b = map(int, a.split()), map(int, b.split())\n        \n        if cmd == 't':\n            groups[a].update(groups[b])\n            groups[b].clear()\n        elif cmd =='s':\n            print(len(groups[a]))\n    \n    return''.join(map(str, [len(groups[i]) for i in range(1, n+1)]))",
        "test": "assert solution(\"10 11\\nt 1 10\\nt 1 2\\nt 1 3\\ns 1\\ns 2\\ns 3\\ns 4\\nt 5 6\\ns 5\\ns 6\\ns 10\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\"",
        "num_ids": 1162,
        "indeed": false
    },
    {
        "number": 4919,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = int(lines[0].split()[1]), int(lines[1].split()[1])\n    trips = {}\n    for i in range(2, 2 + n):\n        country, year = lines[i].split()\n        trips[country] = int(year)\n\n    queries = int(lines[2 + n])\n    for i in range(2 + n + 1, 2 + n + 1 + queries):\n        country, k = lines[i].split()\n        if k in trips:\n            print(trips[k])\n        else:\n            print(0)",
        "test": "assert solution(",
        "num_ids": 1327,
        "indeed": false
    },
    {
        "number": 4920,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    events = set()\n    current_event = ''\n\n    for event in stdin:\n        if event.isalpha():\n            current_event += event.lower()\n        elif current_event:\n            events.add(current_event)\n            current_event = ''\n\n    if current_event:\n        events.add(current_event)\n\n    return str(len(events))",
        "test": "assert solution(\"aaaaa\") == \"1\"",
        "num_ids": 751,
        "indeed": false
    },
    {
        "number": 4921,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    word_count = {}\n    \n    for word in words:\n        if word not in word_count:\n            word_count[word] = 1\n        else:\n            word_count[word] += 1\n            \n    for word in words:\n        if word_count[word] == 1:\n            print(word, end=\"\")\n        else:\n            print(\".\", end=\"\")\n        print()\n        \n    return \"\"",
        "test": "assert solution(open('input.txt').read()) == 'Engineering will save the world from inefficiency.\\nInefficiency is a blight on the world and its\\nhumanity\\n'",
        "num_ids": 729,
        "indeed": false
    },
    {
        "number": 4922,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    clauses = [tuple(map(int, clause.split())) for clause in stdin.split('\\n')[1:]]\n    satisfiable = True\n\n    for clause in clauses:\n        clause_count = {}\n        for literal in clause:\n            if literal > 0:\n                clause_count[literal] = clause_count.get(literal, 0) + 1\n            else:\n                clause_count[-literal] = clause_count.get(-literal, 0) + 1\n\n        for literal, count in clause_count.items():\n            if count > 1:\n                satisfiable = False\n                break\n\n    if satisfiable:\n        return'satisfactory'\n    else:\n        return 'unsatisfactory'\n\nwith open('input.txt', 'r') as file:\n    stdin = file.read()\n\nprint(solution(stdin))",
        "test": "assert solution(\"3 4\\n0 1 2 3\\n0 -1 2 3\\n0 -1 -2 3\\n0 1 -2 3\\n0 1 -2 -3\\n0 1 2 -3\") == \"satisfactory\"",
        "num_ids": 2526,
        "indeed": false
    },
    {
        "number": 4923,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    outcomes = list(map(int, stdin.split()[1:]))\n    unique_outcomes = set()\n\n    for outcome in outcomes:\n        unique_outcomes.add(outcome)\n\n    for i in range(n):\n        if outcomes[i] in unique_outcomes:\n            return str(i)\n        else:\n            unique_outcomes.remove(outcomes[i])\n\n    return \"none\"\n",
        "test": "assert solution(\"8\\n1 1 1 5 3 4 6 6\") == \"4\"",
        "num_ids": 671,
        "indeed": false
    },
    {
        "number": 4924,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    time_str, explosion_str = stdin.split('\\n')\n    current_time = time_str.split(':')\n    explosion_time = explosion_str.split(':')\n\n    current_hour = int(current_time[0])\n    current_min = int(current_time[1])\n    current_sec = int(current_time[2])\n\n    explosion_hour = int(explosion_time[0])\n    explosion_min = int(explosion_time[1])\n    explosion_sec = int(explosion_time[2])\n\n    total_seconds = (current_hour * 3600 + current_min * 60 + current_sec) - (explosion_hour * 3600 + explosion_min * 60 + explosion_sec)\n    time_to_explosion = f'{(total_seconds // 3600):02}:{(total_seconds % 3600 // 60):02}:{(total_seconds % 3600 % 60):02}'\n\n    return time_to_explosion",
        "test": "assert solution(\"20:00:00\\n04:00:00\") == \"08:00:00\"",
        "num_ids": 1169,
        "indeed": false
    },
    {
        "number": 4925,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    ell, n = map(int, stdin.split())\n    k = 0\n    while True:\n        if n <= ell:\n            k += 1\n            break\n        else:\n            n -= ell\n            ell *= 2\n\n    return str(k)",
        "test": "assert solution(\"31 6\") == \"4\"",
        "num_ids": 553,
        "indeed": false
    },
    {
        "number": 4926,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    if n == 0:\n        return '1'\n    \n    e = 0\n    for i in range(1, n + 1):\n        e += 1 / i\n        \n    return str(e)",
        "test": "assert solution(\"3\") == \"2.6666666666666665\"",
        "num_ids": 346,
        "indeed": false
    },
    {
        "number": 4927,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    N, P, Q = map(int, stdin.split())\n    if P > Q:\n        return \"opponent\"\n    elif P == Q:\n        return \"paul\"\n    else:\n        return \"paul\"",
        "test": "assert solution(\"1 3 2\") == \"opponent\"",
        "num_ids": 396,
        "indeed": false
    },
    {
        "number": 4928,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    pieces = []\n    for _ in range(N):\n        piece = tuple(map(int, input().split()))\n        pieces.append(piece)\n\n    pieces.sort(key=lambda x: x[0] + x[1])\n    count = 1\n    for i in range(1, len(pieces)):\n        if pieces[i]!= pieces[i - 1] + (0, 1):\n            count += 1\n\n    return str(count)\n",
        "test": "assert solution(\"1\") == \"2\"",
        "num_ids": 1697,
        "indeed": false
    },
    {
        "number": 4929,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split('\\n')[0]\n    P = stdin.split('\\n')[1]\n    if len(S)!= len(P):\n        return 'No'\n    if S == P:\n        return 'Yes'\n    S = ''.join(reversed(S))\n    P = ''.join(reversed(P))\n    if S == P:\n        return 'Yes'\n    if P.isdigit() and P.isdigit():\n        return 'Yes'\n    if P.isdigit() and not P.isdigit():\n        return 'No'\n    if not P.isdigit() and P.isdigit():\n        return 'No'\n    if S.lower() == P.lower():\n        return 'Yes'\n    return 'No'",
        "test": "assert solution(\"1234\\n1234\") == \"Yes\"",
        "num_ids": 1209,
        "indeed": true
    },
    {
        "number": 4930,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    sentence = stdin.split()\n    decoded_sentence = []\n    for word in sentence:\n        new_word = ''\n        for char in word:\n            if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n                new_word += char.lower() + 'p' + char.lower()\n            else:\n                new_word += char\n        decoded_sentence.append(new_word)\n    return''.join(decoded_sentence)",
        "test": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"",
        "num_ids": 826,
        "indeed": false
    },
    {
        "number": 4931,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n\n    def find_temp(temp: int) -> str:\n        temp_A = temp + y\n        temp_B = temp_A * (temp_A == 0)\n\n        if temp_A == 0:\n            return str(temp)\n        elif temp_B == 1:\n            return \"ALL GOOD\"\n        else:\n            return \"IMPOSSIBLE\"\n\n    temp = x\n    while True:\n        result = find_temp(temp)\n        if result!= \"ALL GOOD\":\n            return result\n        temp += 1",
        "test": "assert solution(\"32 2\") == \"-32\"",
        "num_ids": 768,
        "indeed": false
    },
    {
        "number": 4932,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    P, M, G = map(int, stdin.split())\n\n    attacked_postmen = False\n    attacked_milkmen = False\n    attacked_garages = False\n\n    while True:\n        if P <= M <= G < P + A:\n            attacked_postmen = True\n        elif P < M <= G < P + A + B:\n            attacked_milkmen = True\n        elif P < M < G <= P + A + B + C:\n            attacked_garages = True\n        else:\n            break\n\n        M += 1\n\n    if attacked_postmen and attacked_milkmen:\n        return \"both\"\n    elif attacked_postmen or attacked_milkmen:\n        return \"one\"\n    else:\n        return \"none\"",
        "test": "assert solution(input()) == \"both\\none\\none\"",
        "num_ids": 2608,
        "indeed": false
    },
    {
        "number": 4933,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input numbers\n    nums = list(map(int, stdin.split()))\n\n    # Find the third number in the sequence\n    third = nums[2]\n\n    # Get the difference between adjacent numbers\n    diff = nums[1] - nums[0]\n\n    # Find the fourth number in the sequence\n    fourth = third + diff\n\n    return str(fourth)",
        "test": "assert solution(\"4 6 8\") == \"10\"",
        "num_ids": 581,
        "indeed": false
    },
    {
        "number": 4934,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    h, v = map(int, stdin.split())\n    if h > 10000 or v > 89:\n        return \"Invalid input\"\n    \n    if h <= 500 and v <= 70:\n        ladder_length = (500 ** 2 + 70 ** 2) ** 0.5 + (h ** 2 - 500 ** 2) ** 0.5\n    else:\n        ladder_length = (h ** 2 + 500 ** 2) ** 0.5 + (v ** 2 - 70 ** 2) ** 0.5\n        \n    return str(round(ladder_length))",
        "test": "assert solution(\"500 70\") == \"533\"",
        "num_ids": 531,
        "indeed": false
    },
    {
        "number": 4935,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N, g = map(int, stdin.split())\n    lines = []\n    for i in range(N):\n        D, theta = map(int, input().split())\n        lines.append((D, theta))\n\n    total_distance = 0\n    max_distance = 0\n    max_theta = 0\n\n    for i, (D, theta) in enumerate(lines):\n        if theta > max_theta:\n            max_distance = D\n            max_theta = theta\n        total_distance += D\n\n    slope_rate = g * (max_theta * 0.01) ** 2\n\n    velocity = slope_rate * max_distance\n\n    print(velocity)",
        "test": "assert solution(\"\"\"2 9",
        "num_ids": 1485,
        "indeed": false
    },
    {
        "number": 4936,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, *t = map(int, stdin.strip().split())\n    t = sorted(t)\n    d = t[::2]\n    t = max(t[1::2])\n    return str(d[0]) +'' + str(t)\n\nprint(solution(\"\"\"5\n23 27 31 28 30\n\"\"\"))",
        "test": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\", \"Test case 1\"",
        "num_ids": 742,
        "indeed": false
    },
    {
        "number": 4937,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    e = list(map(int, stdin.split()[1:]))\n    max_win = 0\n    for i in range(n):\n        e.sort(reverse=True)\n        if e[0] > a:\n            break\n        max_win += 1\n    return str(max_win)",
        "test": "assert solution(\"3 6\\n1 2 3\\n\") == \"2\"",
        "num_ids": 533,
        "indeed": false
    },
    {
        "number": 4938,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    x, s = map(int, stdin.split())\n    genders = list(stdin.strip())\n\n    women = 0\n    men = 0\n\n    for gender in genders:\n        if gender == 'W':\n            women += 1\n        else:\n            men += 1\n\n    diff = abs(women - men)\n\n    if diff <= x:\n        return diff\n\n    if diff == x + 1:\n        return 2\n\n    return 0\n\ndef",
        "test": "assert solution('5\\nMMMMMMWMM') == '2'",
        "num_ids": 647,
        "indeed": false
    },
    {
        "number": 4939,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    commands = list(map(int, stdin.split()))\n    stack = []\n    start_child = 0\n    egg_holder = 0\n    for command in commands:\n        if command >= 0:\n            if not stack:\n                stack.append(start_child)\n            child = (egg_holder + command) % n\n            stack.append(child)\n        else:\n            if not stack:\n                continue\n            child = stack.pop()\n            if command == -1:\n                child = (n + child - 1) % n\n            egg_holder = child\n\n    return str(egg_holder)",
        "test": "assert solution(\"5 4\\n8 -2 3 undo 2\") == \"3\"",
        "num_ids": 773,
        "indeed": false
    },
    {
        "number": 4940,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    n, m = map(int, stdin.split())\n    stages = [list(map(int, list(stdin.split()))) for _ in range(n)]\n\n    # Initialize the result list\n    result = [0] * n\n\n    # Initialize the priority queue with the first swather\n    queue = [(0, 0)]\n\n    # Loop until the queue is empty\n    while queue:\n        # Get the current time and the swather with the lowest label\n        time, swather = heapq.heappop(queue)\n\n        # If the swather is completed, update the result list\n        if stages[swather][-1] == 0:\n            result[swather] = time\n            continue\n\n        # Otherwise, update the time and enqueue the next swather\n        for i, stage in enumerate(stages[swather]):\n            if stage == 0:\n                continue\n\n            # Calculate the new time and swather\n            new_time = time + i + 1\n            new_swather = (swather + 1) % n\n            heapq.heappush(queue, (new_time, new_swather))\n\n    # Return the result list as a string\n    return''.join(map(str, result))\n",
        "test": "assert solution(\"2 3\\n1 2 3\\n3 2 1\") == \"6 7\"",
        "num_ids": 1350,
        "indeed": false
    },
    {
        "number": 4941,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split()]\n    m, d, e, c = [int(x) for x in stdin.split()]\n\n    dutch_dict = dict()\n    english_dict = dict()\n\n    for i in range(m):\n        dutch, english, translation = stdin.split()\n        if translation == \"correct\":\n            english_dict[english] = dutch\n            dutch_dict[dutch] = english\n        elif translation == \"incorrect\":\n            english_dict[english] = dutch\n            dutch_dict[dutch] = english + \" (incorrect)\"\n\n    translations = []\n    for word in s.split():\n        if word in dutch_dict:\n            translations.append(dutch_dict[word])\n        else:\n            translations.append(word)\n\n    if len(translations) == 1:\n        return translations[0]\n    else:\n        correct_translations = [translations[i] for i in range(len(translations)) if i not in english_dict]\n        incorrect_translations = [translations[i] for i in range(len(translations)) if i in english_dict]\n        return str(len(correct_translations)) + \" correct\\n\" + str(len(incorrect_translations)) + \" incorrect\"\n\ninput_data = \"\"\"\n7\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\n\"\"\"\n\nprint(solution(input_data))",
        "test": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"",
        "num_ids": 1699,
        "indeed": false
    },
    {
        "number": 4942,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n, *t = map(int, stdin.split())\n    t = [t[i] - t[i - 1] for i in range(1, len(t))]\n    m = max(t)\n    return str(1 + t.index(m))",
        "test": "assert solution('7\\n1 3 5 7 9 11 13\\n') == '1'",
        "num_ids": 574,
        "indeed": false
    },
    {
        "number": 4943,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.split('\\n')[0])\n    points = []\n    for _ in range(N):\n        x, y = map(float, stdin.split('\\n')[1].split())\n        points.append((x, y))\n\n    A = int(stdin.split('\\n')[2].split()[0])\n\n    # Find the area of the polygon\n    area = 0\n    for i in range(len(points)):\n        j = (i + 1) % len(points)\n        area += points[j][0] * points[i][1]\n        area -= points[i][0] * points[j][1]\n\n    # Resize the polygon\n    width = max(abs(points[i][0]) for i in range(len(points)))\n    height = max(abs(points[i][1]) for i in range(len(points)))\n    if A >= area:\n        # Expand the polygon\n        for i in range(len(points)):\n            points[i] = (points[i][0] + width, points[i][1])\n    else:\n        # Shrink the polygon\n        for i in range(len(points)):\n            points[i] = (points[i][0] - width, points[i][1] - height)\n\n    # Find the minimum values of x and y\n    xmin = min(p[0] for p in points)\n    ymin = min(p[1] for p in points)\n    xcenter = xmin + width / 2\n    ycenter = ymin + height / 2\n\n    # Move the polygon to the origin\n    for i in range(len(points)):\n        points[i] = (points[i][0] - xcenter, points[i][1] - ycenter)\n\n    # Convert the coordinates to floating point numbers\n    for i in range(len(points)):\n        points[i] = tuple(float(round(x, 6)) for x in points[i])\n\n    # Print the output\n    for point in points:\n        print(*point)\n\n    return '\\n'.join(f\"{point[0]} {point[1]}\" for point in points)",
        "test": "assert solution(\"3\\n0 0\\n1 1\\n0 2\\n4\\nSample Output:0.0 0.0\\n2.0 2.0\\n0.0 4.0\\ndef solution(stdin: str) -> str:\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\\n\"",
        "num_ids": 2577,
        "indeed": false
    },
    {
        "number": 4944,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    days = 0\n\n    # Let's assume that we have at least one printer available\n    available_printers = 1\n\n    # We will start with a new printer available\n    new_printer_available = True\n\n    while n > 0:\n        # If there are no new printers available, we need to 3D print a new printer\n        if not new_printer_available:\n            available_printers += 1\n            new_printer_available = True\n\n        # If there is a new printer available, we need to print at least one statue\n        if available_printers == 1:\n            days += 1\n            n -= 1\n\n        # If there are available printers, we need to 3D print a new statue\n        else:\n            new_printer_available = False\n            n -= 1\n\n    return str(days)",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 551,
        "indeed": false
    },
    {
        "number": 4945,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    a, b, m, sigma = map(int, stdin.split())\n\n    # calculate the maximum value of R\n    R = a * m + b * sigma\n    R += a * m * sigma\n    R += a * m * (sigma + 1)\n\n    return str(R)",
        "test": "assert solution('3 1\\n12 16') == '34'",
        "num_ids": 622,
        "indeed": false
    },
    {
        "number": 4946,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    languages = list(map(int, stdin.split()[1:]))\n\n    # Sort languages by frequency\n    languages.sort(reverse=True)\n\n    # Initialize awkwardness level\n    awkwardness = n\n\n    # Calculate awkwardness level\n    for i in range(n - 1):\n        if languages[i] == languages[i + 1]:\n            awkwardness = min(awkwardness, i + 1)\n\n    return str(awkwardness)\n",
        "test": "assert solution(\"7\\n1 2 3 4 5 6 7\") == \"7\", \"Sample Input 2\"",
        "num_ids": 708,
        "indeed": true
    },
    {
        "number": 4947,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    X = float(stdin)\n    Roman_mile = 1000\n    English_mile = 5280\n    Roman_paces = Roman_mile * (X * English_mile / 4854)\n    return str(int(Roman_paces + 0.5))\n\ninput_str = input(\"Enter a distance in English miles: \")\noutput_str = solution(input_str)\nprint(output_str)",
        "test": "assert solution(\"1.0\") == \"1088\"",
        "num_ids": 578,
        "indeed": false
    },
    {
        "number": 4948,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    holes = []\n    for _ in range(n):\n        r, x, y, z = map(int, stdin.split())\n        holes.append((r, x, y, z))\n\n    holes.sort(key=lambda x: x[3])\n    slices = []\n    thickness = 0\n    for r, x, y, z in holes:\n        cut_r = r - thickness\n        cut_x = x - (thickness * 2)\n        cut_y = y\n        cut_z = z\n        slices.append((cut_x, cut_y, cut_z))\n        thickness += cut_r\n\n    if s > len(slices):\n        return \"0.000000\"\n    result = []\n    for _ in range(s):\n        thickness = slices.pop(0)[2]\n        result.append(f\"{thickness:.6f}\")\n\n    return \" \".join(result)",
        "test": "assert solution(\"5\\n1 1 1 1\\n2 2 2 2\\n3 3 3 3\\n4 4 4 4\\n5 5 5 5\\n\") == \"25.000000000\\n25.000000000\\n25.000000000\\n25.000000000\\n25.000000000\\n\"",
        "num_ids": 1279,
        "indeed": false
    },
    {
        "number": 4949,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    dimensions = list(map(int, stdin.split()))\n    n, w, h = dimensions\n    matches = [int(match) for match in stdin.split()]\n\n    fit_matches = []\n    for match in matches:\n        if match * 2 <= w:\n            fit_matches.append(match)\n\n    if len(fit_matches) == n:\n        return \"DA\" * n\n    else:\n        return \"NE\" * n",
        "test": "assert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\"",
        "num_ids": 806,
        "indeed": false
    },
    {
        "number": 4950,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    data = []\n    for i in range(n):\n        t, d = map(int, stdin.split()[1:])\n        data.append((t, d))\n    data.sort(key=lambda x: x[0])\n\n    speed = 0\n    prev_time = 0\n    prev_distance = 0\n    for time, distance in data:\n        if distance == prev_distance:\n            speed = max(speed, time - prev_time)\n        prev_time = time\n        prev_distance = distance\n\n    return str(speed)",
        "test": "assert solution(\"2\\n0 0\\n7 42\\n\") == \"6\"",
        "num_ids": 1036,
        "indeed": false
    },
    {
        "number": 4951,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    lines = stdin.split(\"\\n\")[1:]\n    \n    for i, line in enumerate(lines):\n        assumptions, arrow, conclusion = line.split()\n        assumptions = [assumption for assumption in assumptions.split()]\n        conclusion = conclusion.split()\n        \n        if len(assumptions)!= len(conclusion):\n            return str(i + 1)\n        if len(set(assumptions))!= len(assumptions):\n            return str(i + 1)\n        if len(set(conclusion))!= len(conclusion):\n            return str(i + 1)\n        \n        for assumption, concl in zip(assumptions, conclusion):\n            if assumption not in concl:\n                return str(i + 1)\n    \n    return \"correct\"",
        "test": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"",
        "num_ids": 1120,
        "indeed": false
    },
    {
        "number": 4952,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    votes_dict = {}\n    for line in stdin.strip().split('\\n'):\n        if line.strip() == '***':\n            break\n        for word in line.split():\n            if word in votes_dict:\n                votes_dict[word] += 1\n            else:\n                votes_dict[word] = 1\n    simple_majority_count = 0\n    absolute_majority_count = 0\n    for count in votes_dict.values():\n        simple_majority_count += count\n        if count > absolute_majority_count:\n            absolute_majority_count = count\n    for name, count in votes_dict.items():\n        if count == absolute_majority_count:\n            return name\n    return 'Runoff!'",
        "test": "assert solution(\"\"\"Penny Franklin",
        "num_ids": 768,
        "indeed": false
    },
    {
        "number": 4953,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    languages = {}\n    for i in range(n):\n        name, language, additional_languages = stdin.split()\n        languages[name] = {\n            'language': language,\n            'additional_languages': additional_languages.split()\n        }\n    total_languages = sum(len(value['additional_languages']) for value in languages.values())\n    for i, (name, value) in enumerate(languages.items()):\n        value['rank'] = i + 1\n        value['total_languages'] = len(value['additional_languages']) + 1\n    languages = sorted(languages.values(), key=lambda x: (x['total_languages'], x['rank']))\n    result = 1\n    while result <= total_languages:\n        set_of_languages = []\n        for language in languages:\n            if result >= language['total_languages']:\n                set_of_languages.append(language['language'])\n                result -= language['total_languages']\n        if all(languages[0]['language'] in language['additional_languages'] for language in set_of_languages):\n            break\n        result += 1\n    return str(result)",
        "test": "assert solution(\"\"\"",
        "num_ids": 1348,
        "indeed": false
    },
    {
        "number": 4954,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    def min_cost(hotels: List[Tuple[int, List[int]]]) -> int:\n        n, b, h, w = map(int, stdin.split())\n        costs = [0] * h\n        hotel_beds = [0] * h\n        for i, (p, beds) in enumerate(hotels):\n            hotel_beds[i] = beds\n            costs[i] = p\n\n        total_cost = b\n        for i, _ in enumerate(hotel_beds):\n            total_cost += costs[i] * min(hotel_beds[i], n)\n\n        return total_cost\n\n    hotels = []\n    for _ in range(h):\n        hotel_p, *hotel_beds = map(int, stdin.split())\n        hotels.append((hotel_p, hotel_beds))\n\n    return str(min_cost(hotels))\n",
        "test": "assert solution(stdin=\"\"\"",
        "num_ids": 1239,
        "indeed": false
    },
    {
        "number": 4955,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    notes = stdin.split()[1:]\n    \n    scales = []\n    \n    for i in range(len(notes) - 1):\n        for j in range(i + 2, len(notes) + 1):\n            scale = notes[i] + str(j)\n            if scale not in notes:\n                scales.append(scale)\n                \n    if not scales:\n        return \"none\"\n    else:\n        return \" \".join(sorted(scales))",
        "test": "assert solution(\"10 C D F D C D F F F C\") == \"A# C D# F\"",
        "num_ids": 1270,
        "indeed": false
    },
    {
        "number": 4956,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    ae_count = 0\n    for word in words:\n        if 'ae' in word:\n            ae_count += word.count('ae')\n\n    if ae_count / len(words) >= 0.4:\n        return \"dae ae ju traeligt va\"\n    else:\n        return \"haer talar vi rikssvenska\"",
        "test": "assert solution(\"def test():\\n    pass\") == \"haer talar vi rikssvenska\"",
        "num_ids": 667,
        "indeed": true
    },
    {
        "number": 4957,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = []\n    for i in range(n):\n        row = stdin[i+1:i+m+1]\n        grid.append(row)\n    shops = []\n    while not shops:\n        queue = [(0, 0)]\n        visited = set()\n        while queue:\n            x, y = queue.pop(0)\n            if (x, y) not in visited:\n                visited.add((x, y))\n                if grid[x][y] == '.' and (x, y) not in shops:\n                    shops.append((x, y))\n                    if x > 0 and grid[x-1][y] == '.' and (x-1, y) not in shops:\n                        queue.append((x-1, y))\n                    if y > 0 and grid[x][y-1] == '.' and (x, y-1) not in shops:\n                        queue.append((x, y-1))\n                    if x < n-1 and grid[x+1][y] == '.' and (x+1, y) not in shops:\n                        queue.append((x+1, y))\n                    if y < m-1 and grid[x][y+1] == '.' and (x, y+1) not in shops:\n                        queue.append((x, y+1))\n    shops.sort()\n    result = []\n    for x, y in shops:\n        result.append('E' if x > 0 and grid[x-1][y] == '.' else '.')\n        result.append('E' if y > 0 and grid[x][y-1] == '.' else '.')\n        result.append('E' if x < n-1 and grid[x+1][y] == '.' else '.')\n        result.append('E' if y < m-1 and grid[x][y+1] == '.' else '.')\n    return ''.join(result)\n\nstdin = \"\"\"5 6\n....#.\n....#.\n",
        "test": "assert solution(\"\"\"",
        "num_ids": 2690,
        "indeed": false
    },
    {
        "number": 4958,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    box_heights = input_list[:6]\n    tower_height = input_list[-2]\n    second_tower_height = input_list[-1]\n\n    first_tower = [box_heights[0], box_heights[1], box_heights[2]]\n    second_tower = [box_heights[3], box_heights[4], box_heights[5]]\n\n    first_tower.sort(reverse=True)\n    second_tower.sort(reverse=True)\n\n    result = []\n    result.extend(first_tower)\n    result.extend(second_tower)\n\n    return \" \".join(map(str, result))",
        "test": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"",
        "num_ids": 995,
        "indeed": false
    },
    {
        "number": 4959,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    e, f, c = map(int, stdin.split())\n    sodas_drunk = 0\n    while e + f >= c:\n        sodas_drunk += 1\n        e -= 1\n        f -= 1\n    return str(sodas_drunk)",
        "test": "assert solution(\"9 0 3\") == \"4\"",
        "num_ids": 655,
        "indeed": false
    },
    {
        "number": 4960,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    binary = stdin.strip()\n    num_digits = len(binary)\n    \n    while num_digits % 3!= 0:\n        binary = \"0\" + binary\n        num_digits += 1\n        \n    binary_groups = [binary[i:i+3] for i in range(0, num_digits, 3)]\n    octal = \"\"\n    \n    for group in binary_groups:\n        octal += str(int(group, 2))\n        \n    return octal",
        "test": "assert solution(\"1010\") == \"12\"",
        "num_ids": 775,
        "indeed": true
    },
    {
        "number": 4961,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    r, s = map(int, stdin.split())\n    seating_order = list(stdin.strip())\n    \n    # Calculate the number of handshakes\n    handshakes = 0\n    for row in range(r):\n        for col in range(s):\n            if seating_order[row * s + col] == 'o':\n                handshakes += 1\n                if col > 0 and seating_order[row * s + col - 1] == 'o':\n                    handshakes += 1\n                if col < s - 1 and seating_order[row * s + col + 1] == 'o':\n                    handshakes += 1\n                if row > 0 and seating_order[(row - 1) * s + col] == 'o':\n                    handshakes += 1\n                if row < r - 1 and seating_order[(row + 1) * s + col] == 'o':\n                    handshakes += 1\n    \n    return str(handshakes)",
        "test": "assert solution(\"2 3\\n..o\\no..\\n\") == \"2\"",
        "num_ids": 1194,
        "indeed": false
    },
    {
        "number": 4962,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    items = [list(map(int, stdin.split())) for _ in range(n)]\n\n    positions = [0] * n\n\n    for i in range(n):\n        pos = positions[items[i][0] - 1]\n        positions[items[i][0] - 1] += 1\n        if pos == 0:\n            positions[items[i][1] - 1] -= 1\n\n    result = [\"\" for _ in range(n)]\n    for i in range(n):\n        result[i] = \"LADICA\" if positions[i] > 0 else \"SMECE\"\n\n    return \"\\n\".join(result)\n\nwith open(\"input.txt\", \"r\") as f:\n    input_data = f.read().strip()\n\noutput = solution(input_data)\nprint(output)",
        "test": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\\n\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\\n\"",
        "num_ids": 1225,
        "indeed": false
    },
    {
        "number": 4963,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    d = list(map(int, stdin.split()[1:]))\n    d.append(0)  # Add 0 to make d[0] always 1\n\n    jimmy_index = 0  # Index of Jimmy\n    lineup = []\n\n    # Iterate through the lineup\n    for i in range(n):\n        # Add Jimmy to the lineup\n        if i == jimmy_index:\n            lineup.append(i + 1)\n        else:\n            jimmy_index += d[i]  # Move jimmy_index to the next position\n            lineup.append(i + 1)  # Add the next person to the lineup\n\n    return \" \".join(map(str, lineup))\n",
        "test": "assert solution(\"2\\n0\") == \"1 2\"",
        "num_ids": 827,
        "indeed": false
    },
    {
        "number": 4964,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    N, H, L = map(int, stdin.split())\n    horror_list = list(map(int, stdin.split()))\n    database = []\n    for _ in range(L):\n        a, b = map(int, stdin.split())\n        database.append((a, b))\n\n    def horror_index(movie: int, horror_list: list) -> int:\n        similarities = [1 if x[0] == movie else 0 for x in database if x[0]!= movie]\n        best_similarity = max(similarities)\n        worst_similarity = min(similarities)\n        return max(0, best_similarity - worst_similarity)\n\n    max_hi = -1\n    best_movie = -1\n    for movie in range(N):\n        if movie in horror_list:\n            hi = horror_index(movie, horror_list)\n            if hi > max_hi:\n                max_hi = hi\n                best_movie = movie\n        elif max_hi == -1:\n            max_hi = 0\n            best_movie = movie\n\n    return str(best_movie)\n",
        "test": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\\n\") == \"1\"",
        "num_ids": 1899,
        "indeed": false
    },
    {
        "number": 4965,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = list(map(int, stdin.split()[1:]))\n\n    def is_valid(t):\n        for i in range(len(t) - 1):\n            if abs(t[i] - t[i + 1]) > abs(t[i] - t[i - 1]):\n                return False\n        return True\n\n    def sort_t(t):\n        if not is_valid(t):\n            return None\n        left, right = 0, len(t) - 1\n        while left < right:\n            if abs(t[left] - t[right]) > abs(t[left + 1] - t[right - 1]):\n                t[left], t[right] = t[right], t[left]\n                left += 1\n                right -= 1\n            elif abs(t[left] - t[right]) == abs(t[left + 1] - t[right - 1]):\n                if t[left] < t[right]:\n                    t[left], t[right] = t[right], t[left]\n                    left += 1\n                elif t[left] > t[right]:\n                    t[left], t[right] = t[left], t[right]\n                    right -= 1\n            else:\n                t[left], t[right] = t[right], t[left]\n                left += 1\n                right -= 1\n        return t\n\n    sorted_t = sort_t(t)\n    if sorted_t is None:\n        return \"impossible\"\n    return \" \".join(str(x) for x in sorted_t)",
        "test": "assert solution(\"3\\n1 3 4\\n\") == \"4 3 1\"",
        "num_ids": 1181,
        "indeed": false
    },
    {
        "number": 4966,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, p, k = map(int, stdin.split())\n    t = list(map(float, stdin.split()))\n    n_events = len(t)\n\n    total_time = sum(t)\n    t = [t[0]] + sorted(t)\n\n    result = 0\n    for i in range(n_events):\n        start = t[i]\n        end = min(total_time, start + t[i + 1] - 1)\n        speed = max(1, 100 + (end - start) / (total_time - start) * (100 + p))\n        result += speed * (end - start)\n\n    return f\"{result:.6f}\"",
        "test": "assert solution(input()) == '18.400'",
        "num_ids": 735,
        "indeed": false
    },
    {
        "number": 4967,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    grid = [list(row) for row in stdin.split()[1:]]\n    max_distance = 0\n\n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] == 'S':\n                current_distance = 0\n            elif grid[i][j] == 'H':\n                current_distance = 0\n            elif grid[i][j] == '.':\n                current_distance = float('inf')\n            if current_distance > max_distance:\n                max_distance = current_distance\n\n    return str(max_distance)\n",
        "test": "assert solution(\"\"\"\\",
        "num_ids": 1867,
        "indeed": false
    },
    {
        "number": 4968,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    lines = stdin.splitlines()\n    N, S, R = map(int, lines[0].split())\n    starting_numbers_damaged = list(map(int, lines[1].split()))\n    starting_numbers_reserved = list(map(int, lines[2].split()))\n\n    # Count the number of teams that cannot start\n    count = 0\n    for number in starting_numbers_damaged:\n        if number not in starting_numbers_reserved:\n            count += 1\n            if count == R:\n                break\n\n    return str(count)",
        "test": "assert solution(\"\"\"",
        "num_ids": 1429,
        "indeed": false
    },
    {
        "number": 4969,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n\n    if C > R:\n        return \"1.000000000\"\n\n    crust_width = R - C\n    cheese_width = C - 1\n\n    if crust_width == 0:\n        return \"0.000000000\"\n    elif crust_width == cheese_width:\n        return \"1.000000000\"\n    else:\n        return \"{:.6f}\".format(1 - crust_width / (crust_width + cheese_width))",
        "test": "assert solution(\"1 1\") == \"0.000000000\"",
        "num_ids": 656,
        "indeed": false
    },
    {
        "number": 4970,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    courses = [list(map(int, stdin.split()[1].split())) for _ in range(n)]\n    \n    total_popularity = 0\n    most_popular_combination = []\n    \n    for course_list in courses:\n        course_set = set(course_list)\n        if len(course_set) == len(course_list):\n            total_popularity += 1\n            if not most_popular_combination:\n                most_popular_combination = course_list\n            elif len(course_list) > len(most_popular_combination):\n                most_popular_combination = course_list\n    \n    return str(total_popularity)",
        "test": "assert solution('''",
        "num_ids": 879,
        "indeed": false
    },
    {
        "number": 4971,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    bus_numbers = [1]\n    while True:\n        new_bus_numbers = []\n        for num in bus_numbers:\n            if num > m:\n                break\n            new_bus_numbers.extend(\n                [num + (k**3) for k in range(1, 3)]\n            )\n        if not new_bus_numbers:\n            break\n        bus_numbers = new_bus_numbers\n    return str(max(bus_numbers))",
        "test": "assert solution(\"1730\") == \"1729\"",
        "num_ids": 744,
        "indeed": false
    },
    {
        "number": 4972,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    # convert the input to an integer\n    X = int(stdin)\n    \n    # calculate the number of points\n    points = (X + 1) * (X * (X + 1) // 2)\n    \n    # print the number of points\n    return str(points)",
        "test": "assert solution('65536') == '16'",
        "num_ids": 350,
        "indeed": false
    },
    {
        "number": 4973,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    board = []\n    for row in stdin.split('\\n')[1:]:\n        board.append([char for char in row])\n\n    initial_cell = (1, 1)\n    blocked_cells = [(i, j) for i in range(1, N+1) for j in range(1, N+1) if board[i-1][j-1] == '#']\n\n    def is_valid_position(cell):\n        r, c = cell\n        return 1 <= r <= N and 1 <= c <= N\n\n    def is_knight_position(cell):\n        r, c = cell\n        return board[r-1][c-1] == '.' and (r+1, c+2) in S or (r+2, c+1) in S or (r+2, c-1) in S or (r-2, c+1) in S or (r-2, c-1) in S or (r+1, c+2) in S or (r+1, c-2) in S or (r-1, c+2) in S or (r-1, c-2) in S\n\n    def knight_moves(cell):\n        r, c = cell\n        return [\n            (r + 2, c + 1),\n            (r + 2, c - 1),\n            (r - 2, c + 1),\n            (r - 2, c - 1),\n            (r + 1, c + 2),\n            (r + 1, c - 2),\n            (r - 1, c + 2),\n            (r - 1, c - 2),\n        ]\n\n    visited = set()\n    queue = [(initial_cell, 0)]\n\n    while queue:\n        cell, steps = queue.pop(0)\n        visited.add(cell)\n\n        if cell == (N, N):\n            return str(steps)\n\n        for neighbor in knight_moves(cell):\n            if neighbor not in blocked_cells and neighbor not in visited and is_valid_position(neighbor):\n                queue.append((neighbor, steps + 1))\n\n    return '-'",
        "test": "assert solution(\"4\\n....\\n....\\n....\\n...K\") == \"2\"",
        "num_ids": 2005,
        "indeed": false
    },
    {
        "number": 4974,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    r, n = map(int, stdin.split())\n    booked = set(map(int, stdin.split()))\n    available = set(range(1, r+1)) - booked\n\n    if not available:\n        return \"too late\"\n    else:\n        return str(min(available))",
        "test": "assert solution(\"\"\"",
        "num_ids": 688,
        "indeed": false
    },
    {
        "number": 4975,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    key_phrase = stdin.splitlines()[0].replace(' ', '')\n    message = stdin.splitlines()[1].replace(' ', '')\n    \n    key_table = [\n        ['P', 'L', 'A', 'Y', 'F', 'I', 'R', 'E', 'X', 'M', 'B', 'C', 'D', 'G', 'H', 'J', 'K', 'N', 'O', 'S', 'T', 'U', 'V', 'W', 'Z'],\n        ['A', 'E', 'I', 'O', 'U', 'N', 'D', 'R', 'L', 'S', 'T', 'W', 'F', 'H', 'V', 'C', 'J', 'M', 'K', 'Q', 'X', 'Z', 'Y', 'G'],\n        ['B', 'M', 'F', 'C', 'P', 'N', 'S', 'K', 'G', 'V', 'L', 'Q', 'H', 'J', 'X', 'T', 'D', 'W', 'R', 'Y', 'Z', 'U', 'M', 'I'],\n        ['D', 'X', 'S', 'B', 'J', 'R', 'U', 'I', 'K', 'E', 'M', 'T', 'Y', 'W', 'V', 'A', 'Z', 'G', 'L', 'H', 'C', 'F', 'P'],\n        ['G', 'Z', 'T', 'V', 'C', 'Q', 'A', 'P', 'Y', 'H', 'N', 'X', 'W', 'U', 'M', 'L', 'B', 'D', 'R', 'I', 'O', 'K'],\n        ['H', 'C', 'A', 'D', 'F', 'T', 'Y', 'U', 'K', 'W', 'L', 'V', 'X', 'R', 'M', 'I', 'B', 'N', 'S', 'E', 'J', 'G'],\n        ['J', 'L', 'V', 'T', 'Q', 'H', 'W', 'R', 'I', 'M', 'B', 'X', 'A', 'N', 'Z', 'E', 'D', 'S', 'O', 'P', 'K', 'F'],\n        ['K', 'M', 'N', 'P', 'G', 'D', 'S', 'T', 'L', 'B', 'H', 'J', 'V', 'C', 'Z', 'Y', 'X', 'Q', 'F', 'R', 'O', 'E'],\n        ['N', 'X', 'L', 'Z', 'S', 'E', 'I', 'Q', 'H', 'D', 'C', 'V', 'A', 'P', 'K', 'G', 'R', 'U', 'W', 'T', 'Y', 'M'],\n        ['O', 'R', 'Y', 'W', 'U', 'J', 'T', 'P', 'F', 'G', 'S', 'H', 'N', 'V', 'Z', 'X', 'Q', 'L', 'I', 'K', 'E', 'D'],\n        ['Q', 'B', 'C', 'H', 'K', 'V', 'N', 'T', 'I', 'A', 'X', 'M', 'Y', 'R', 'Z', 'O', 'W', 'G', 'E', 'L', 'U', 'D'],\n        ['R', 'E', 'I', 'O', 'U', 'D', 'L', 'S', 'P', 'M', 'K', 'W', 'X', 'C', 'V', 'T', 'B', 'Y', 'H', 'J', 'G', 'F'],\n        ['S', 'X', 'P', 'M', 'K', 'T', 'B', 'L', 'G', 'N', 'C', 'V', 'O', 'Y', 'Z', 'U', 'I', 'J', 'A', 'D', 'H'],\n        ['T', 'Z', 'G', 'V', 'N', 'S', 'A', 'Q', 'I', 'W', 'F', 'X', 'E', 'R', 'D', 'L', 'H', 'U', 'C', 'K', 'O'],\n        ['U', 'Y', 'W', 'V', 'L', 'X', 'Q', 'I', 'E', 'B', '",
        "test": "assert solution(\"playfair example\\nhide the gold in the tree stump\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"",
        "num_ids": 2940,
        "indeed": false
    },
    {
        "number": 4976,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def solution(stdin: str) -> str:\n    gopher_coords = list(map(float, stdin.split()))\n    gopher_x, gopher_y = gopher_coords[:2]\n    dog_coords = gopher_coords[2:]\n    dogs_x, dogs_y = dog_coords[:2]\n    gopher_holes = []\n    \n    # Read in the gopher holes\n    for line in stdin.split(\"\\n\")[2:]:\n        x, y = list(map(float, line.split()))\n        gopher_holes.append((x, y))\n    \n    # Check if the gopher can escape\n    for gopher_hole in gopher_holes:\n        dx = gopher_x - gopher_hole[0]\n        dy = gopher_y - gopher_hole[1]\n        distance = (dx**2 + dy**2)**0.5\n        if distance <= 1:\n            return f\"The gopher can escape through the hole at ({gopher_hole[0]:.3f},{gopher_hole[1]:.3f}).\"\n    \n    # If the gopher cannot escape, print the appropriate message\n    return \"The gopher cannot escape.\"",
        "test": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher cannot escape.\"",
        "num_ids": 2341,
        "indeed": true
    },
    {
        "number": 4977,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    t = int(stdin.split())\n    if not (1 <= a <= 1000 and 1 <= b <= 1000 and 1 <= c <= 1000 and 1 <= d <= 1000 and 0 <= t <= 10000):\n        return \"N\"\n\n    def get_neighbors(x: int, y: int) -> list:\n        neighbors = []\n        if x > 0:\n            neighbors.append((x - 1, y))\n        if x < 1000:\n            neighbors.append((x + 1, y))\n        if y > 0:\n            neighbors.append((x, y - 1))\n        if y < 1000:\n            neighbors.append((x, y + 1))\n        return neighbors\n\n    def is_valid_move(x: int, y: int) -> bool:\n        for neighbor in get_neighbors(x, y):\n            if (neighbor[0], neighbor[1]) in streets and (neighbor[0], neighbor[1]) not in visited and (neighbor[0], neighbor[1]) not in visited_intersections:\n                return False\n        return True\n\n    def bfs(start: tuple, target: tuple) -> bool:\n        visited.append(start)\n        queue = [(start[0], start[1])]\n        while queue:\n            x, y = queue.pop(0)\n            if (x, y) == target:\n                return True\n            for neighbor in get_neighbors(x, y):\n                if (neighbor[0], neighbor[1]) not in visited and (neighbor[0], neighbor[1]) not in visited_intersections:\n                    visited_intersections.add((x, y))\n                    queue.append(neighbor)\n        return False\n\n    visited = set()\n    visited_intersections = set()\n    streets = {(x, y) for x in range(1, 1001) for y in range(1, 1001)}\n    visited.add((a, b))\n\n    if (a, b) == (c, d):\n        return \"N\"\n\n    if not is_valid_move(a, b):\n        return \"N\"\n\n    if not bfs((a, b), (c, d)):\n        return \"N\"\n\n    return \"Y\"",
        "test": "assert solution(\"3 4\\n3 3\\n3\\n\") == \"Y\"",
        "num_ids": 3427,
        "indeed": false
    },
    {
        "number": 4978,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = []\n    for i in range(n):\n        line = stdin[i+1:].strip()\n        grid.append(list(line))\n\n    for i in range(2, n-2):\n        for j in range(2, m-2):\n            if grid[i][j] == 'V':\n                neighbours = []\n                if grid[i-1][j] == 'V':\n                    neighbours.append(('above', i-1, j))\n                if grid[i+1][j] == 'V':\n                    neighbours.append(('below', i+1, j))\n                if grid[i][j-1] == 'V':\n                    neighbours.append(('left', i, j-1))\n                if grid[i][j+1] == 'V':\n                    neighbours.append(('right', i, j+1))\n                if len(neighbours) == 1:\n                    direction, above_i, above_j = neighbours[0]\n                    if grid[above_i][above_j] == 'V':\n                        grid[i][j] = 'W'\n                        grid[above_i][above_j] = '.'\n                elif len(neighbours) == 2:\n                    direction1, above_i1, above_j1 = neighbours[0]\n                    direction2, above_i2, above_j2 = neighbours[1]\n                    if direction1 == direction2:\n                        if grid[above_i1][above_j1] == 'V' and grid[above_i2][above_j2] == 'V':\n                            grid[i][j] = 'W'\n                            grid[above_i1][above_j1] = '.'\n                            grid[above_i2][above_j2] = '.'",
        "test": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\\n\") == \"\\n...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.\"",
        "num_ids": 1683,
        "indeed": false
    },
    {
        "number": 4979,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    binary_representation = bin(n)[2:]\n    reversed_binary_representation = binary_representation[::-1]\n    reversed_number = int(reversed_binary_representation, 2)\n    return str(reversed_number)",
        "test": "assert solution('13') == '11'",
        "num_ids": 344,
        "indeed": true
    },
    {
        "number": 4980,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    colors = []\n    for i in range(n):\n        colors.append(stdin.split()[i].lower())\n    pink_buttons = [i for i, c in enumerate(colors) if c.startswith('p')]\n    rose_buttons = [i for i, c in enumerate(colors) if c.startswith('r')]\n    if not pink_buttons and not rose_buttons:\n        return \"I must watch Star Wars with my daughter\"\n    if not pink_buttons:\n        return \"I must wear a pink shirt\"\n    if not rose_buttons:\n        return \"I must wear a rose shirt\"\n    pink_button = pink_buttons[0]\n    rose_button = rose_buttons[0]\n    return min(pink_button, rose_button)",
        "test": "assert solution('''12",
        "num_ids": 872,
        "indeed": false
    },
    {
        "number": 4981,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.strip().split(' ')\n    A, B, C = int(inputs[0]), int(inputs[1]), int(inputs[2])\n    order = inputs[3]\n    \n    if order == 'ABC':\n        return f\"{A} {C} {B}\"\n    elif order == 'ACB':\n        return f\"{A} {B} {C}\"\n    elif order == 'BAC':\n        return f\"{B} {A} {C}\"\n    else:\n        return f\"{C} {B} {A}\"",
        "test": "assert solution(\"3 1 5\\nACB\") == \"1 3 5\"",
        "num_ids": 941,
        "indeed": false
    },
    {
        "number": 4982,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    shares_owned = 0\n    total_cost = 0\n    total_profit = 0\n    total_taxes = 0\n    splits = 0\n    merges = 0\n    last_split = 0\n    last_merge = 0\n\n    for event in stdin.split('\\n')[1:]:\n        action, x, y = event.split()\n        x = int(x)\n        y = int(y)\n\n        if action == 'buy':\n            shares_owned += x\n            total_cost += x * y\n        elif action =='sell':\n            shares_owned -= x\n            total_profit += (x * y - shares_owned * total_cost)\n            total_cost -= shares_owned * total_cost\n        elif action =='split':\n            splits += 1\n            shares_owned += x\n            total_cost += x * y\n            total_profit += (x * y - shares_owned * total_cost)\n            total_cost -= shares_owned * total_cost\n        elif action =='merge':\n            merges += 1\n            shares_owned -= x\n            total_cost += x * y\n            total_profit += (x * y - shares_owned * total_cost)\n            total_cost -= shares_owned * total_cost\n        elif action == 'die':\n            total_profit += shares_owned * y\n            total_taxes += shares_owned * y * 0.3\n\n    return f\"{total_profit + total_taxes:.4f}\"",
        "test": "assert solution(\"\"\"",
        "num_ids": 1734,
        "indeed": false
    },
    {
        "number": 4983,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    \n    # If x is less than 10, return x as it is\n    if x < 10:\n        return str(x)\n    \n    # Multiply nonzero digits of x\n    y = 1\n    while x > 0:\n        y *= x % 10\n        x //= 10\n    \n    # Return single digit as it is\n    return str(y % 10)",
        "test": "assert solution(\"1\") == \"1\"",
        "num_ids": 406,
        "indeed": false
    },
    {
        "number": 4984,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    r, c = map(int, stdin.split())\n    grid = [[cell.strip() for cell in row] for row in stdin.split('\\n')[1:]]\n\n    def is_connected(x, y, visited):\n        if x < 0 or x >= r or y < 0 or y >= c or visited[x][y]:\n            return False\n        visited[x][y] = True\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            if is_connected(x + dx, y + dy, visited):\n                return True\n        visited[x][y] = False\n        return False\n\n    island_count = 0\n    for x in range(r):\n        for y in range(c):\n            if grid[x][y] == 'L' and is_connected(x, y, [[False] * c for _ in range(r)]):\n                island_count += 1\n\n    return str(island_count)",
        "test": "assert solution('''4 5",
        "num_ids": 1547,
        "indeed": false
    },
    {
        "number": 4985,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N, B = map(int, lines[0].split())\n    hands = [[int(s) for s in line[1:]] for line in lines[1:N+1]]\n    points = [[0] * 14 for _ in range(N)]\n\n    for i in range(N):\n        for j in range(4):\n            points[i][hands[i][j] - 1] += 1\n\n    total = sum(sum(hand) for hand in points)\n    dominant_points = sum(hand[hand.index(suit) - 1] for hand in points for suit in [B])\n\n    return str(total - dominant_points)",
        "test": "assert solution('2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH') == '60'",
        "num_ids": 973,
        "indeed": false
    },
    {
        "number": 4986,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    sticky_keys = set()\n    for i in range(1, len(s) - 1):\n        if s[i] == t[i]:\n            sticky_keys.add(s[i])\n    return \"\".join(sticky_keys)\n\nsample_input = \"\"\"this is very annoying\nthiss iss veery annoying\"\"\"\nprint(solution(sample_input)) # Output: se",
        "test": "assert solution(\"thiss iss veery annoying\") == \"de\"",
        "num_ids": 511,
        "indeed": false
    },
    {
        "number": 4987,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    socks, capacity, K = map(int, stdin.strip().split())\n    sock_colors = list(map(int, stdin.strip().split()[1:]))\n\n    machines = []\n    current_machine = []\n    sock_count = 0\n\n    while sock_count < socks:\n        if len(current_machine) < capacity:\n            current_machine.append(min(sock_colors, key=abs))\n            sock_colors.remove(min(sock_colors, key=abs))\n        else:\n            machines.append(current_machine)\n            current_machine = [current_machine[-1]]\n\n        sock_count += 1\n\n    if len(current_machine) > 0:\n        machines.append(current_machine)\n\n    result = len(machines)\n\n    return str(result)\n",
        "test": "assert solution(\"\"\"5 3 0",
        "num_ids": 817,
        "indeed": false
    },
    {
        "number": 4988,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    tests = int(stdin.split('\\n')[0])\n    results = []\n    for test in range(tests):\n        n = int(stdin.split('\\n')[1 + test])\n        results.append(str(n % 10))\n    return '\\n'.join(results)",
        "test": "assert solution(open(\"input.txt\").read()) == \"1\\n2\\n6\\n\"",
        "num_ids": 527,
        "indeed": false
    },
    {
        "number": 4989,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    alice = [0] * n\n    bob = [0] * n\n\n    for i in range(n):\n        if i % 2 == 0:\n            alice[i] = a[i]\n        else:\n            bob[i] = a[i]\n\n    alice_sum = sum(alice)\n    bob_sum = sum(bob)\n\n    if alice_sum > bob_sum:\n        return str(alice_sum) + \" \" + str(bob_sum)\n    else:\n        return str(bob_sum) + \" \" + str(alice_sum)",
        "test": "assert solution(\"7\\n1 3 5 7 9 11 13\") == \"19 7\"",
        "num_ids": 687,
        "indeed": false
    },
    {
        "number": 4990,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    b, k, g = map(int, stdin.split())\n    return str(2 * k // g + (k % g!= 0))",
        "test": "assert solution(\"5 2 1\") == \"2\"",
        "num_ids": 449,
        "indeed": false
    },
    {
        "number": 4991,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1:\n        return \"Error: n must be a positive integer\"\n\n    def h(n):\n        if n == 1:\n            return [1]\n        elif n % 2 == 0:\n            return h(n // 2) + [n]\n        else:\n            return h(3 * n + 1) + [n]\n\n    def sum_h(sequence):\n        total = 0\n        for num in sequence:\n            total += num\n        return total\n\n    h_sequence = h(n)\n    return str(sum_h(h_sequence))",
        "test": "assert solution(\"5\") == \"36\"",
        "num_ids": 487,
        "indeed": true
    },
    {
        "number": 4992,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def solution(stdin: str) -> str:\n    def random_shuffle(lst):\n        random.shuffle(lst)\n\n    def redistribute_exams(exams, room_size):\n        new_exams = []\n        while exams:\n            new_exams.append(exams.pop(0))\n            if len(new_exams) == room_size:\n                break\n        return new_exams\n\n    n, *s = map(int, stdin.split())\n    rooms = [0] * n\n\n    for i in range(n):\n        rooms[i] = random.choice(range(len(rooms)))\n\n    exams_per_room = [0] * n\n    for i in range(n):\n        exams_per_room[i] = s[i]\n\n    room_exams = []\n    for i in range(n):\n        room_exams.extend([i] * exams_per_room[i])\n\n    exams = [room for room in room_exams]\n\n    while rooms!= [0] * n:\n        redistribute_exams(exams, rooms[0])\n        if len(exams) > 0:\n            exams.pop()\n        if len(exams) == 0:\n            return \"impossible\"\n\n        random_shuffle(exams)\n\n        room_exams = []\n        for i in range(n):\n            room_exams.extend([i] * exams_per_room[i])\n\n        exams = [room for room in room_exams]\n\n        if rooms[0] == 0:\n            break\n\n        exams_per_room[rooms[0]] -= 1\n        if exams_per_room[rooms[0]] == 0:\n            exams_per_room[rooms[0]] = 0\n            rooms[rooms[0]] = 0\n\n    return str(rooms)\n",
        "test": "assert solution('''4",
        "num_ids": 1660,
        "indeed": false
    },
    {
        "number": 4993,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    parts, days = map(int, stdin.split())\n    parts_types = [stdin.split()[1] for _ in range(parts)]\n\n    # Find the last day in the season where all parts have been replaced\n    last_replaced = 0\n    for i in range(parts):\n        if parts_types[i]!= parts_types[last_replaced]:\n            last_replaced = i\n\n    # Return the day that theseus ended up replacing the last part\n    return str(last_replaced + 1)\n",
        "test": "assert solution(stdin=\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"",
        "num_ids": 699,
        "indeed": false
    },
    {
        "number": 4994,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    for _ in range(3):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    sorted_points = sorted(points, key=lambda p: p[1])\n    top_left, top_right, bottom_left = sorted_points\n    bottom_right = (bottom_left[0], top_left[1])\n    fourth_vertex = (bottom_right[0], bottom_left[1])\n    return f\"{fourth_vertex[0]} {fourth_vertex[1]}\"",
        "test": "assert solution(\"5 5\\n5 7\\n7 5\\n\") == \"7 7\"",
        "num_ids": 1566,
        "indeed": false
    },
    {
        "number": 4995,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    n, *observations = map(int, stdin.split())\n    expected_wait_times = [int(m) * 60 + int(s) for m, s in observations]\n    total_wait_time = sum(expected_wait_times)\n    average_wait_time = total_wait_time / len(expected_wait_times)\n    if average_wait_time <= 60:\n        return \"measurement error\"\n    else:\n        return str(average_wait_time / 60)",
        "test": "assert solution(\"\"\"1",
        "num_ids": 685,
        "indeed": false
    },
    {
        "number": 4996,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    c, k = stdin.split('\\n')\n    c, k = c.strip(), k.strip()\n    key_index = 0\n    encrypted_message = ''\n    for char in c:\n        if char.isupper():\n            index = ord(char) - ord('A')\n            shifted_index = (index - key_index) % 26\n            encrypted_char = chr(shifted_index + ord('A'))\n            encrypted_message += encrypted_char\n        key_index += 1\n    decrypted_message = ''\n    key_index = 0\n    for char in c:\n        if char.isupper():\n            index = ord(char) - ord('A')\n            if index % 2 == 0:\n                shifted_index = (index - key_index) % 26\n                decrypted_char = chr(shifted_index + ord('A'))\n                decrypted_message += decrypted_char\n            else:\n                shifted_index = (26 - index - key_index) % 26\n                decrypted_char = chr(shifted_index + ord('A'))\n                decrypted_message += decrypted_char\n        key_index += 1\n    return decrypted_message\n",
        "test": "assert solution(\"CPMCRYY\\nALBERTA\") == \"CALGARY\\ndef solution(stdin: str) -> str:\\n    pass\"",
        "num_ids": 2149,
        "indeed": false
    },
    {
        "number": 4997,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    cups = list(stdin)\n    ball_cup = 0\n    \n    for i in range(10000):\n        left_cup, middle_cup, right_cup = 0, 1, 2\n        ball_cup = (ball_cup + 1) % 3\n        \n        if cups[left_cup] == 'A':\n            cups[left_cup], cups[ball_cup] = cups[ball_cup], cups[left_cup]\n            cups[middle_cup], cups[right_cup] = cups[right_cup], cups[middle_cup]\n        elif cups[middle_cup] == 'A':\n            cups[middle_cup], cups[ball_cup] = cups[ball_cup], cups[middle_cup]\n            cups[right_cup], cups[left_cup] = cups[left_cup], cups[right_cup]\n        elif cups[right_cup] == 'A':\n            cups[right_cup], cups[ball_cup] = cups[ball_cup], cups[right_cup]\n            cups[left_cup], cups[middle_cup] = cups[middle_cup], cups[left_cup]\n            \n    return str((ball_cup + 1) % 3 + 1)  # Convert to 1-indexed",
        "test": "assert solution('CBABA') == '3'",
        "num_ids": 877,
        "indeed": false
    },
    {
        "number": 4998,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n\n    def calculate_rectangle(width: int, height: int, angle: float) -> int:\n        return round(width * height * angle)\n\n    def is_rectangle(width: int, height: int) -> bool:\n        return width > 0 and height > 0\n\n    def is_enclosed(width: int, height: int, angle: float) -> bool:\n        rectangle_area = calculate_rectangle(width, height, angle)\n        return rectangle_area <= max_rectangle_area\n\n    max_rectangle_area = float('-inf')\n\n    for angle in (90, 180, 270, 360):\n        width, height = calculate_rectangle(A, B, angle), calculate_rectangle(B, C, angle)\n        if is_rectangle(width, height):\n            for direction in range(4):\n                if direction!= 3 or angle == 360:\n                    rectangle_area = calculate_rectangle(width, height, angle - direction * 90)\n                    if is_enclosed(width, height, angle - direction * 90):\n                        max_rectangle_area = max(rectangle_area, max_rectangle_area)\n\n    return str(max_rectangle_area)",
        "test": "assert solution(input()) == \"3\"",
        "num_ids": 1984,
        "indeed": false
    },
    {
        "number": 4999,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    operations = 0\n    while a!= b:\n        if a % 2 == 0:\n            operations += 1\n            a //= 2\n        else:\n            operations += 1\n            a += 1\n    return str(operations)",
        "test": "assert solution(\"2147483647 2147483647\") == \"1\"",
        "num_ids": 430,
        "indeed": false
    }
]