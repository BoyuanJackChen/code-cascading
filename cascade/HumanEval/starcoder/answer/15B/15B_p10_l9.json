[
    {
        "number": 0,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\n\nif __name__ == '__main__':\n    numbers = [1.0, 2.0, 3.0]\n    threshold = 0.5\n    print(has_close_elements(numbers, threshold))\n\n    numbers = [1.0, 2.8, 3.0, 4.0, 5.0, 2.0]\n    threshold = 0.3\n    print(has_close_elements(numbers, threshold))"
    },
    {
        "number": 0,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False"
    },
    {
        "number": 0,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    n = len(numbers)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False"
    },
    {
        "number": 0,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"
    },
    {
        "number": 0,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False"
    },
    {
        "number": 0,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"
    },
    {
        "number": 0,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False"
    },
    {
        "number": 0,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i]-numbers[j]) < threshold:\n                return True\n    return False"
    },
    {
        "number": 0,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    sorted_numbers = sorted(numbers)\n    for i in range(len(sorted_numbers) - 1):\n        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold:\n            return True\n    return False"
    },
    {
        "number": 1,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Remove any spaces in the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    # Initialize an empty list to store the separate groups\n    separate_groups = []\n    \n    # Initialize variables to keep track of opening and closing parentheses\n    open_paren = 0\n    close_paren = 0\n    \n    # Loop through each character in the input string\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            # If the character is an opening parenthesis, increment the count of open parentheses\n            open_paren += 1\n        elif char == ')':\n            # If the character is a closing parenthesis, increment the count of closing parentheses\n            close_paren += 1\n            \n            # If the count of opening and closing parentheses is equal,\n            # it means we have found a complete group of parentheses\n            if open_paren == close_paren:\n                # Add the current group of parentheses to the separate_groups list\n                separate_groups.append(paren_string[i-close_paren:i+1])\n                \n                # Reset the count of open and close parentheses\n                open_paren = 0\n                close_paren = 0\n    \n    return separate_groups"
    },
    {
        "number": 1,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    group = ''\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                group += char\n            else:\n                stack.pop()\n                if len(stack) == 0:\n                    groups.append(group + char)\n                    group = ''\n                else:\n                    group += char\n        else:\n            group += char\n    if group!= '':\n        groups.append(group)\n    return groups"
    },
    {
        "number": 1,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    \"\"\"\n    groups = []\n    group = \"\"\n    stack = []\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                group += \")\"\n            else:\n                stack.pop()\n                if len(stack) == 0:\n                    groups.append(group)\n                    group = \"\"\n    if len(group) > 0:\n        groups.append(group)\n    return groups"
    },
    {
        "number": 1,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Input to this function is a string containing multiple groups of nested parentheses.\n    Your goal is to separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other.\n    Ignore any spaces in the input string.\n    \"\"\"\n    stack = []\n    groups = []\n    i = 0\n    \n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            stack.append(i)\n        elif paren_string[i] == ')':\n            if not stack:\n                raise ValueError(\"Invalid parentheses string: unbalanced parentheses\")\n            start_index = stack.pop()\n            if not stack:\n                groups.append(paren_string[start_index:i+1].strip())\n            else:\n                end_index = stack[-1]\n                groups.append(paren_string[start_index:end_index+1].strip())\n        i += 1\n    \n    if stack:\n        raise ValueError(\"Invalid parentheses string: unbalanced parentheses\")\n    \n    return groups"
    },
    {
        "number": 1,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    groups = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                # if the stack is empty, then there are too many closing braces\n                return None\n            stack.pop()\n            if not stack:\n                # if the stack is empty, then this is a new group of parentheses\n                groups.append('')\n            else:\n                # if the stack is not empty, then we add this closing brace to the last group\n                groups[-1] += ')'\n        elif char.isspace():\n            continue\n        else:\n            # ignore any other characters\n            pass\n    \n    if stack:\n        # if the stack is not empty, then there are too few closing braces\n        return None\n    \n    return groups"
    },
    {
        "number": 1,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    # Remove any spaces from the input string\n    paren_string = paren_string.replace(' ', '')\n    # Initialize the current group string and a list to store the final result\n    current_group = ''\n    result = []\n    # Iterate over the characters in the input string\n    for c in paren_string:\n        if c == '(':\n            # If we encounter an opening parenthesis, add it to the current group\n            current_group += c\n        elif c == ')':\n            # If we encounter a closing parenthesis, add it to the current group\n            current_group += c\n            # If the current group is balanced (i.e. each open brace is properly closed),\n            # add it to the result list and start a new group string\n            if current_group.count('(') == current_group.count(')'):\n                result.append(current_group)\n                current_group = ''\n        else:\n            # If we encounter a character that's not a parenthesis, ignore it\n            continue\n    # If there's a remaining group string after the loop, add it to the result list\n    if current_group:\n        result.append(current_group)\n    return result"
    },
    {
        "number": 1,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Input to this function is a string containing multiple groups of nested parentheses.\n    Your goal is to separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    \"\"\"\n    # Remove spaces from input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    # Initialize an empty list to store parenthesis groups\n    paren_groups = []\n    \n    # Initialize an empty string to store current group of parentheses\n    curr_group = \"\"\n    \n    # Initialize a counter to keep track of number of open parentheses\n    open_count = 0\n    \n    # Loop through each character in the input string\n    for char in paren_string:\n        # If the character is an open parenthesis, increment the counter\n        if char == \"(\":\n            open_count += 1\n        # If the character is a close parenthesis, decrement the counter\n        elif char == \")\":\n            open_count -= 1\n        # If the counter is 0 and the character is an open parenthesis,\n        # we have found the end of a group of parentheses.\n        # Append the current group to the list of groups and reset the current group string.\n        if open_count == 0 and char == \"(\":\n            paren_groups.append(curr_group)\n            curr_group = \"\"\n        # Otherwise, add the character to the current group string.\n        else:\n            curr_group += char\n    \n    # Return the list of parentheses groups\n    return paren_groups"
    },
    {
        "number": 1,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    \"\"\"\n    stack = []\n    result = []\n    current_group = ''\n    for c in paren_string:\n        if c == '(':\n            stack.append(c)\n            current_group += c\n        elif c == ')':\n            if not stack:\n                raise ValueError('Unbalanced parentheses')\n            stack.pop()\n            if not stack:\n                result.append(current_group + ')')\n                current_group = ''\n            else:\n                current_group += ')'\n        elif c.isspace():\n            continue\n        else:\n            current_group += c\n    if stack:\n        raise ValueError('Unbalanced parentheses')\n    return result"
    },
    {
        "number": 1,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    # Remove any spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    # Initialize an empty list to store the separate groups\n    groups = []\n    # Initialize a variable to keep track of the current group being formed\n    current_group = \"\"\n    # Loop through each character in the input string\n    for char in paren_string:\n        # If the character is an open brace, add it to the current group\n        if char == \"(\":\n            current_group += char\n        # If the character is a close brace, add it to the current group and check if it's balanced\n        elif char == \")\":\n            current_group += char\n            if current_group.count(\"(\") == current_group.count(\")\"):\n                # If it's balanced, add the current group to the list of groups and start a new group\n                groups.append(current_group)\n                current_group = \"\"\n            else:\n                # If it's not balanced, ignore the close brace and continue with the current group\n                current_group = current_group[:-1]\n    # If there's a remaining group that wasn't closed, add it to the list of groups\n    if current_group:\n        groups.append(current_group)\n    return groups"
    },
    {
        "number": 1,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    \"\"\"\n    stack = []\n    result = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            stack.append(i)\n        elif paren_string[i] == ')':\n            if stack:\n                start = stack.pop()\n                result.append(paren_string[start:i+1])\n            else:\n                return []\n        i += 1\n    return result"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "- The function passes all the provided test cases."
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    return number - int(number)"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    \n    return decimal_part"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    \n    for operation in operations:\n        balance += operation\n        \n        if balance < 0:\n            return True\n        \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(x - mean) for x in numbers]\n    mad = sum(absolute_differences) / len(absolute_differences)\n    return mad"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # Calculate mean of the numbers\n    mean = sum(numbers) / len(numbers)\n    \n    # Calculate absolute deviations from mean\n    deviations = [abs(x - mean) for x in numbers]\n    \n    # Calculate mean absolute deviation\n    mad = sum(deviations) / len(deviations)\n    \n    return mad"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    mad = sum(absolute_deviations) / len(numbers)\n    return mad"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    mad = sum(absolute_deviations) / len(absolute_deviations)\n    return mad"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    n = len(numbers)\n    mean = sum(numbers) / n\n    absolute_differences = [abs(x - mean) for x in numbers]\n    mad = sum(absolute_differences) / n\n    return mad"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    n = len(numbers)\n    mean = sum(numbers)/n\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    mad = sum(absolute_deviations)/n\n    return mad"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    n = len(numbers)\n    mean = sum(numbers) / n\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    mad = sum(absolute_deviations) / n\n    return mad\n"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    deviation = [abs(num - mean) for num in numbers]\n    mad = sum(deviation) / len(numbers)\n    return mad\n\n\nif __name__ == '__main__':\n    numbers = [1.0, 2.0, 3.0, 4.0]\n    mad = mean_absolute_deviation(numbers)\n    print(f\"MAD for {numbers} is {mad}\")"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # Calculate the mean of the input numbers\n    mean = sum(numbers) / len(numbers)\n    # Calculate the absolute deviations from the mean\n    deviations = [abs(x - mean) for x in numbers]\n    # Calculate the mean absolute deviation\n    mad = sum(deviations) / len(numbers)\n    return mad"
    },
    {
        "number": 5,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    return [numbers[0]] + [delimeter] + intersperse(numbers[1:], delimeter) + [numbers[-1]]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 5,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i!= len(numbers) - 1:\n            result.append(numbers[i])\n            result.append(delimeter)\n        else:\n            result.append(numbers[i])\n    return result"
    },
    {
        "number": 5,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    return [numbers[i] for i in range(len(numbers)) if i % 2 == 0] + [delimeter] + [numbers[i] for i in range(len(numbers)) if i % 2 == 1]"
    },
    {
        "number": 5,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    \"\"\"\n    return [numbers[i] for i in range(len(numbers)) if i % 2 == 0] + [delimeter] + [numbers[i] for i in range(len(numbers)) if i % 2 == 1]"
    },
    {
        "number": 5,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"
    },
    {
        "number": 5,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        else:\n            result.append(delimeter)\n            result.append(numbers[i])\n    return result"
    },
    {
        "number": 5,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers' \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        else:\n            result.append(delimeter)\n            result.append(numbers[i])\n    return result"
    },
    {
        "number": 5,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    \"\"\"\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result += [delimeter, numbers[i]]\n    return result"
    },
    {
        "number": 5,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    return [numbers[0]] + [delimeter] + [numbers[i] for i in range(1, len(numbers), 2)] + \\\n           [delimeter] + [numbers[i] for i in range(2, len(numbers), 2)]"
    },
    {
        "number": 5,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_levels = []\n    for group in paren_string.split():\n        level = 0\n        for char in group:\n            if char == \"(\":\n                level += 1\n            elif char == \")\":\n                level -= 1\n                if level < 0:\n                    level = 0\n        max_levels.append(level)\n    return max_levels"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    # Split the input string into groups separated by spaces\n    groups = paren_string.split()\n\n    # Initialize an empty list to store the maximum levels of nesting for each group\n    max_levels = []\n\n    # Iterate over each group and find the maximum level of nesting\n    for group in groups:\n        # Initialize a stack to keep track of the opening parentheses\n        stack = []\n\n        # Initialize a variable to keep track of the current level of nesting\n        level = 0\n\n        # Iterate over each character in the group\n        for char in group:\n            # If the character is an opening parenthesis, push it onto the stack\n            if char == '(':\n                stack.append(char)\n                level += 1\n            # If the character is a closing parenthesis, pop from the stack if it's not empty and increment the level\n            elif char == ')':\n                if stack:\n                    stack.pop()\n                    level += 1\n                else:\n                    raise ValueError('Unbalanced parentheses in group: {}'.format(group))\n\n        # Add the maximum level of nesting for the group to the list of maximum levels\n        max_levels.append(level)\n\n    return max_levels"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_levels = []\n    current_level = 0\n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n        elif char == ')':\n            current_level -= 1\n            max_levels.append(current_level)\n    return max_levels"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    stack = []\n    max_depth = []\n    current_depth = 0\n    \n    for c in paren_string:\n        if c == '(':\n            stack.append(current_depth)\n            current_depth += 1\n        elif c == ')':\n            if not stack:\n                current_depth = 0\n            else:\n                current_depth = stack.pop()\n                max_depth.append(current_depth)\n    \n    if current_depth!= 0:\n        max_depth.append(current_depth)\n    \n    return max_depth"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    depths = []\n    current_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n        elif char == ')':\n            current_depth -= 1\n        depths.append(current_depth)\n    return depths"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_levels = []\n    level = 0\n    for char in paren_string:\n        if char == '(':\n            level += 1\n            max_levels.append(level)\n        elif char == ')':\n            level -= 1\n            if level < 0:\n                raise ValueError('Unbalanced parentheses')\n    if level!= 0:\n        raise ValueError('Unbalanced parentheses')\n    return max_levels"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_levels = []\n    paren_count = 0\n    max_paren_count = 0\n    \n    for char in paren_string:\n        if char == '(':\n            paren_count += 1\n            if paren_count > max_paren_count:\n                max_paren_count = paren_count\n        elif char == ')':\n            paren_count -= 1\n            \n    max_levels.append(max_paren_count)\n    \n    return max_levels"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    stack = []\n    result = []\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                result.append(1)\n            else:\n                result.append(len(stack))\n                stack.pop()\n\n    return result"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    level = 0\n    for char in paren_string:\n        if char == '(':\n            level += 1\n            levels.append(level)\n        elif char == ')':\n            level -= 1\n            levels.append(level)\n    return levels\n\nprint(parse_nested_parens('(()()) ((())) () ((())()())')) # [2, 3, 1, 3]"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    levels = []\n    current_level = 0\n    for paren in paren_string:\n        if paren == '(':\n            current_level += 1\n        elif paren == ')':\n            current_level -= 1\n        levels.append(current_level)\n\n    return levels"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    return [s for s in strings if substring in s]\n\nprint(filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a'))"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    result = []\n    for s in strings:\n        if substring in s:\n            result.append(s)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    \"\"\"\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n\nprint(filter_by_substring([], 'a')) # []\nprint(filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')) # ['abc', 'bacd', 'array']"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    \"\"\"\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    return [s for s in strings if substring in s]"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), 1) if len(numbers) == 1 else (sum(numbers), numbers[0] * numbers[1] * sum_product(numbers[2:])[1])\n"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), 1)"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), 1 if len(numbers) == 1 else 1 * sum(numbers[:-1]) * numbers[-1]\n"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\n    # check if the list is empty\n    if not numbers:\n        return 0, 1\n    \n    # calculate the sum and product\n    sum_value = 0\n    product_value = 1\n    for number in numbers:\n        sum_value += number\n        product_value *= number\n    \n    return sum_value, product_value"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    return (sum(numbers), 1) if len(numbers) == 1 else (sum(numbers), numbers[0] * sum_product(numbers[1:])[1])"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), 1)"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), 1) if numbers[0] == 0 else (sum(numbers), reduce(lambda x, y: x * y, numbers))"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    \n    sum = 0\n    product = 1\n    \n    for num in numbers:\n        sum += num\n        product *= num\n        \n    return (sum, product)"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), 1)"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    return (sum(numbers), 1) if len(numbers) == 1 else (sum(numbers), reduce(lambda x, y: x*y, numbers))"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    current_max = numbers[0]\n    result.append(current_max)\n    for num in numbers[1:]:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        result.append(max(num, max_so_far))\n        max_so_far = max(max_so_far, num)\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_list = [numbers[0]]\n    for i in range(1, len(numbers)):\n        max_list.append(max(max_list[i-1], numbers[i]))\n    return max_list"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_list = []\n    max_num = float('-inf')\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n        max_list.append(max_num)\n    return max_list"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    max_so_far = float('-inf')\n    for number in numbers:\n        result.append(max(number, max_so_far))\n        max_so_far = result[-1]\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_so_far = [numbers[0]]\n    for i in range(1, len(numbers)):\n        max_so_far.append(max(numbers[i], max_so_far[i-1]))\n    return max_so_far"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    n = len(numbers)\n    max_so_far = [numbers[0]]\n    for i in range(1, n):\n        max_so_far.append(max(max_so_far[i-1], numbers[i]))\n    return max_so_far"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    max_so_far = float('-inf')\n    for number in numbers:\n        max_so_far = max(max_so_far, number)\n        result.append(max_so_far)\n    return result"
    },
    {
        "number": 10,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    \n    # Find longest palindromic postfix\n    i = len(string) - 1\n    while i >= 0 and not is_palindrome(string[:i+1]):\n        i -= 1\n    \n    # Append reverse of prefix before palindromic postfix\n    prefix = string[:i+1]\n    suffix = string[::-1]\n    if prefix == suffix:\n        return string + suffix\n    else:\n        return string + prefix + suffix[1:]"
    },
    {
        "number": 10,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find longest palindromic postfix of given string\n    for i in range(len(string)):\n        if not is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n    # If no palindromic postfix is found, return the string itself\n    return string"
    },
    {
        "number": 10,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]"
    },
    {
        "number": 10,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n\n    # Find the longest palindromic postfix of the string\n    i = len(string) - 1\n    while i > 0 and is_palindrome(string[:i]):\n        i -= 1\n\n    # Append the reverse of a prefix that comes before the postfix to the end of the string\n    return string[:i] + string[:i][::-1]"
    },
    {
        "number": 10,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]\n    return ''"
    },
    {
        "number": 10,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    # Find the longest postfix of the string that is a palindrome\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            palindrome_postfix = string[:i]\n            break\n\n    # Append the reverse of the prefix before the palindromic postfix\n    prefix = string.split(palindrome_postfix)[0]\n    return prefix + prefix[::-1] + palindrome_postfix"
    },
    {
        "number": 10,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    else:\n        longest_palindrome = string\n        for i in range(len(string)-1, 0, -1):\n            if is_palindrome(string[i:]):\n                longest_palindrome = string[i:]\n                break\n        return string + string[:-len(longest_palindrome)][::-1]"
    },
    {
        "number": 10,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == \"\":\n        return string\n\n    # Find longest palindrome postfix\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            palindrome_postfix = string[:i]\n            break\n    else:\n        palindrome_postfix = string\n\n    # Append palindromic prefix\n    for i in range(len(string)-1, -1, -1):\n        if is_palindrome(string[:i+1]):\n            palindrome_prefix = string[:i+1]\n            break\n    else:\n        palindrome_prefix = \"\"\n\n    # Append reversed palindromic postfix\n    return palindrome_prefix + palindrome_postfix[::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if not string:\n        return ''\n\n    # Find the longest postfix of supplied string that is a palindrome\n    i = len(string) - 1\n    while i > 0 and not is_palindrome(string[:i+1]):\n        i -= 1\n\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    prefix = string[:i]\n    if prefix:\n        suffix = string[i:]\n        return prefix + suffix[::-1]\n    else:\n        return string + string[::-1]"
    },
    {
        "number": 10,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    # find the longest postfix of supplied string that is a palindrome\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            palindrome_postfix = string[:i]\n            break\n\n    # append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    return string + string[:len(string)-len(palindrome_postfix)] + palindrome_postfix[::-1]"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Convert strings to binary lists\n    a_bin = [int(char) for char in a]\n    b_bin = [int(char) for char in b]\n\n    # Perform XOR operation on corresponding bits\n    result_bin = [a ^ b for a, b in zip(a_bin, b_bin)]\n\n    # Convert binary list to string\n    result_str = ''.join(str(bit) for bit in result_bin)\n\n    return result_str"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # convert strings to lists of integers\n    a_list = [int(bit) for bit in a]\n    b_list = [int(bit) for bit in b]\n    \n    # perform XOR operation on corresponding bits in the lists\n    result_list = [a ^ b for a, b in zip(a_list, b_list)]\n    \n    # convert result list back to a string of bits\n    result = ''.join([str(bit) for bit in result_list])\n    \n    return result"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = \"\"\n    for i in range(max(len(a), len(b))):\n        if i < len(a) and i < len(b):\n            if a[i] == b[i]:\n                result += \"0\"\n            else:\n                result += \"1\"\n        elif i < len(a):\n            result += a[i]\n        else:\n            result += b[i]\n    return result"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Convert the strings to integers using int() function and store them in a variable\n    a_int = int(a, 2)\n    b_int = int(b, 2)\n    \n    # Perform XOR operation on the integers and store the result in a variable\n    result = a_int ^ b_int\n    \n    # Convert the result back to a string using bin() function and store it in a variable\n    result_str = bin(result)[2:]\n    \n    # Pad the string with leading zeros to make it 8 bits long\n    result_str = result_str.zfill(8)\n    \n    # Return the final result string\n    return result_str"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(max(len(a), len(b))):\n        if i < len(a) and i < len(b):\n            result += str(int(a[i]) ^ int(b[i]))\n        elif i < len(a):\n            result += a[i]\n        else:\n            result += b[i]\n    return result"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a)!= len(b):\n        raise ValueError(\"Strings should have same length\")\n    \n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    max_len = 0\n    longest_str = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            longest_str = s\n    return longest_str"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if len(strings) == 0:\n        return None\n    \n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    \n    return longest_str"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    \n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    \n    return longest_str"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    \n    longest_str = strings[0]\n    \n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    \n    return longest_str"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    else:\n        longest_string = strings[0]\n        for s in strings:\n            if len(s) > len(longest_string):\n                longest_string = s\n        return longest_string"
    },
    {
        "number": 13,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 13,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b \"\"\"\n    while b!= 0:\n        temp = b\n        b = a % b\n        a = temp\n    return a"
    },
    {
        "number": 13,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n    # Find the smaller number\n    if a < b:\n        smaller = a\n    else:\n        smaller = b\n\n    # Check if the smaller number is zero\n    if smaller == 0:\n        return 0\n\n    # Check if the smaller number is one\n    if smaller == 1:\n        return 1\n\n    # Find the remainder of the two numbers\n    remainder = a % b\n\n    # If the remainder is zero, the GCD is the smaller number\n    if remainder == 0:\n        return smaller\n    else:\n        # Otherwise, recursively call the function with the remainder\n        return greatest_common_divisor(b, remainder)\n"
    },
    {
        "number": 13,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    # Initialize variables a and b to input values\n    a, b = a, b\n\n    # While b is not equal to zero, compute the remainder of a divided by b\n    while b!= 0:\n        r = a % b\n        a, b = b, r\n\n    # Return the final value of a, which is the GCD of the original a and b values\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n"
    },
    {
        "number": 13,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n\nprint(greatest_common_divisor(3, 5)) # Output: 1\nprint(greatest_common_divisor(25, 15)) # Output: 5"
    },
    {
        "number": 13,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if a == 0:\n        return b\n    else:\n        return greatest_common_divisor(b % a, a)"
    },
    {
        "number": 13,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)"
    },
    {
        "number": 13,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)"
    },
    {
        "number": 13,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string \"\"\"\n    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    for i in range(len(string) + 1):\n        result.append(string[:i])\n    return result"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    n = len(string)\n    for i in range(n):\n        prefixes.append(string[:i+1])\n    return prefixes"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result"
    },
    {
        "number": 15,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    if n == 0:\n        return '0'\n    else:\n        return''.join([str(i) for i in range(n+1)])"
    },
    {
        "number": 15,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return''.join(str(i) for i in range(n+1))"
    },
    {
        "number": 15,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return''.join(map(str, range(n+1)))"
    },
    {
        "number": 15,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return \" \".join([str(i) for i in range(n+1)])"
    },
    {
        "number": 15,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return''.join(str(i) for i in range(n+1))"
    },
    {
        "number": 15,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return''.join(str(i) for i in range(n+1))"
    },
    {
        "number": 15,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "The script provided is already correct and fulfills the requirements of the problem statement. It takes an integer `n` as input and returns a string containing space-delimited numbers starting from 0 upto `n` inclusive. The docstring is also well-written and includes examples of expected output. The only thing I would suggest is to add a few more test cases to ensure the function works correctly for different inputs."
    },
    {
        "number": 15,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return''.join(str(i) for i in range(n+1))"
    },
    {
        "number": 15,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "Overall, the function is a simple implementation of a mathematical sequence and a simple example of how to use doctests in Python."
    },
    {
        "number": 15,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return''.join(str(i) for i in range(n+1))"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of \"\"\"\n    # Convert the string to lowercase\n    string = string.lower()\n    # Create an empty set to store the distinct characters\n    distinct_chars = set()\n    # Iterate over each character in the string\n    for char in string:\n        # If the character is not already in the set of distinct characters, add it\n        if char not in distinct_chars:\n            distinct_chars.add(char)\n    # Return the number of distinct characters\n    return len(distinct_chars)"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    :param string: The input string\n    :return: The number of distinct characters in the input string\n    \"\"\"\n    distinct_chars = set(string.lower())  # convert each character to lowercase and add it to a set\n    return len(distinct_chars)  # return the length of the set, which gives us the number of distinct characters\n"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \"\"\"\n    distinct_chars = set()\n    for char in string.lower():\n        distinct_chars.add(char)\n    return len(distinct_chars)"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \"\"\"\n    distinct_chars = set()\n    for char in string:\n        distinct_chars.add(char.lower())\n    return len(distinct_chars)\n"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    distinct_characters = set()\n    for char in string:\n        distinct_characters.add(char.lower())\n    return len(distinct_characters)"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \"\"\"\n    distinct_characters = set()\n    for char in string.lower():\n        distinct_characters.add(char)\n    return len(distinct_characters)"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \"\"\"\n    return len(set(string.lower()))"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of \"\"\"\n    # Convert the string to lowercase to make it case-insensitive\n    string = string.lower()\n    # Use a set to store the distinct characters\n    distinct_chars = set()\n    # Loop through each character in the string and add it to the set\n    for char in string:\n        distinct_chars.add(char)\n    # Return the size of the set (which gives us the number of distinct characters)\n    return len(distinct_chars)"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \"\"\"\n    # Convert the string to lowercase\n    string = string.lower()\n    # Create an empty set to store unique characters\n    unique_characters = set()\n    # Loop through each character in the string\n    for char in string:\n        # If the character is not already in the set, add it\n        if char not in unique_characters:\n            unique_characters.add(char)\n    # Return the number of unique characters\n    return len(unique_characters)"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of \"\"\"\n    return len(set(string.lower()))"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    beats = []\n    current_beat = 0\n    for char in music_string:\n        if char == 'o':\n            current_beat += 4\n        elif char == 'o|':\n            current_beat += 2\n        elif char == '.|':\n            current_beat += 1\n        beats.append(current_beat)\n    return beats"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    notes = [int(note.count('|')) + 1 for note in music_string.split()]\n    beats = [4] * len(notes)\n    for i, note in enumerate(notes):\n        if note == 2:\n            beats[i] = 2\n        elif note == 3:\n            beats[i] = 3\n        elif note == 4:\n            beats[i] = 4\n    return beats"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    notes = []\n    current_note = \"\"\n    for char in music_string:\n        if char in [\"o\", \"o|\", \".|\"]:\n            current_note += char\n        elif char == \" \":\n            if current_note:\n                notes.append(len(current_note))\n                current_note = \"\"\n    if current_note:\n        notes.append(len(current_note))\n    return notes"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_list = []\n    beats = 0\n    for char in music_string:\n        if char == 'o':\n            beats += 4\n        elif char == 'o|':\n            beats += 2\n        elif char == '.|':\n            beats += 1\n        elif char =='':\n            beats_list.append(beats)\n            beats = 0\n    beats_list.append(beats)\n    return beats_list\n"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    beat_lengths = [4, 2, 1]  # whole note, half note, quater note\n    beats = []\n    for note in music_string.split():\n        if note.startswith('o'):\n            beats.append(4)\n        elif note.startswith('o|'):\n            beats.append(2)\n        elif note.startswith('.|'):\n            beats.append(1)\n    return beats"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    # Dictionary to map ASCII characters to integers representing beats\n    beat_dict = {'o': 4, 'o|': 2, '.|': 1}\n\n    # Initialize an empty list to store the beats for each note\n    beats = []\n\n    # Loop through each character in the music string and parse it into beats\n    for char in music_string:\n        beats.append(beat_dict[char])\n\n    return beats"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    \n    beats = []\n    current_beat = 0\n    for note in music_string.split():\n        if note == 'o':\n            current_beat += 4\n        elif note == 'o|':\n            current_beat += 2\n        elif note == '.|':\n            current_beat += 1\n        beats.append(current_beat)\n        \n    return beats"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    notes = []\n    for note in music_string.split():\n        if note == 'o':\n            notes.append(4)\n        elif note == 'o|':\n            notes.append(2)\n        elif note == '.|':\n            notes.append(1)\n    return notes"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    # convert string to list of characters\n    music_list = list(music_string)\n\n    # initialize empty list to store duration of each note\n    note_durations = []\n\n    # loop through each character in music_list\n    for i in range(len(music_list)):\n        # if the current character is a 'o', add 4 to note_durations\n        if music_list[i] == 'o':\n            note_durations.append(4)\n        # if the current character is a 'o|' or '.', add 2 or 1 to note_durations, respectively\n        elif music_list[i] == 'o|':\n            note_durations.append(2)\n        elif music_list[i] == '.|':\n            note_durations.append(1)\n\n    # return note_durations as a list of integers\n    return note_durations"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    beats = []\n    note_duration = 1 # by default, each note lasts one beat\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n            note_duration = 2 # half note\n        elif note == '.|':\n            beats.append(1)\n            note_duration = 2 # half note\n        else:\n            raise ValueError('Invalid note: %s' % note)\n    return beats"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    \"\"\"\n    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string:\n        return 0\n    \n    count = 0\n    start = 0\n    while True:\n        index = string.find(substring, start)\n        if index == -1:\n            break\n        count += 1\n        start = index + 1\n    \n    return count"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    if substring in string:\n        count += 1\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string or not substring:\n        return 0\n    \n    count = 0\n    start = 0\n    while True:\n        index = string.find(substring, start)\n        if index == -1:\n            break\n        count += 1\n        start = index + 1\n    return count"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string or not substring:\n        return 0\n    if len(substring) > len(string):\n        return 0\n    count = 0\n    for i in range(len(string)-len(substring)+1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        if string.startswith(substring, i):\n            count += 1\n    return count"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    i = 0\n    while i <= len(string) - len(substring):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    return''.join(sorted([word for word in numbers.split() if word in ['zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine']]))"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    # convert the string to a list of strings\n    number_list = numbers.split()\n    \n    # convert the strings to integers\n    number_list = [int(x) for x in number_list]\n    \n    # sort the integers\n    number_list.sort()\n    \n    # convert the integers back to strings\n    number_list = [str(x) for x in number_list]\n    \n    # join the strings with spaces\n    return''.join(number_list)"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    return''.join(sorted([str(i) for i in range(10) if str(i) in numbers.split()], key=lambda x: int(x)))"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    \"\"\"\n    # convert string to list of strings\n    numbers_list = numbers.split()\n    \n    # convert strings to numbers\n    numbers_list = [int(x) for x in numbers_list]\n    \n    # sort list of numbers\n    numbers_list.sort()\n    \n    # convert numbers back to strings and join them back into a string\n    sorted_numbers =''.join([str(x) for x in numbers_list])\n    \n    return sorted_numbers"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    number_list = numbers.split()\n    number_list.sort()\n    return''.join(number_list)"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    number_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n       'six': 6,\n       'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    numbers_list = numbers.split()\n    sorted_numbers = sorted(numbers_list, key=lambda x: number_dict[x])\n    return''.join(sorted_numbers)"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    # Convert the input string to a list of numbers\n    num_list = [int(num) for num in numbers.split()]\n    \n    # Sort the numbers in ascending order\n    sorted_nums = sorted(num_list)\n    \n    # Convert the sorted numbers back to a string and return it\n    return''.join(str(num) for num in sorted_nums)\n"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    # Convert the string to list of strings\n    numbers = numbers.split()\n    \n    # Create a dictionary to map strings to integers\n    mapping = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}\n    \n    # Sort the list of strings using the mapping dictionary\n    numbers.sort(key=lambda x: mapping[x])\n    \n    # Join the sorted list of strings back into a string\n    return''.join(numbers)"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest.\n    \"\"\"\n    number_list = [int(n) for n in numbers.split()]\n    number_list.sort()\n    return''.join([str(n) for n in number_list])"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    \"\"\"\n    numbers_list = numbers.split()\n    numbers_list.sort()\n    return''.join(numbers_list)\n\nprint(sort_numbers('three one five'))"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # sort the list of numbers in ascending order\n    sorted_numbers = sorted(numbers)\n    # find the index of the first and second closest elements\n    index_closest = sorted_numbers.index(min(sorted_numbers, key=lambda x: abs(x - sorted_numbers[0])))\n    index_second_closest = sorted_numbers.index(sorted_numbers[index_closest + 1])\n    # return the closest elements in order\n    return sorted_numbers[index_closest], sorted_numbers[index_second_closest]"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = (float('inf'), float('inf'))\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < abs(closest_pair[0] - closest_pair[1]):\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    numbers.sort()\n    closest_so_far = numbers[0]\n    second_closest_so_far = numbers[1]\n    for i in range(2, len(numbers)):\n        if abs(numbers[i] - closest_so_far) < abs(numbers[i] - second_closest_so_far):\n            second_closest_so_far = numbers[i]\n        else:\n            closest_so_far, second_closest_so_far = second_closest_so_far, closest_so_far\n    return closest_so_far, second_closest_so_far"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_num = float('inf')\n    max_num = float('-inf')\n    for num in numbers:\n        if num < min_num:\n            max_num = num\n            min_num = min(numbers)\n        elif num > max_num:\n            min_num = num\n            max_num = max(numbers)\n    return (min_num, max_num)"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    sorted_numbers = sorted(numbers)\n    closest_elements = (sorted_numbers[1], sorted_numbers[-2])\n    return closest_elements"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    # sort the list of numbers\n    numbers.sort()\n    \n    # find the two closest elements\n    min_diff = abs(numbers[0] - numbers[1])\n    min_pair = (numbers[0], numbers[1])\n    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                min_pair = (numbers[i], numbers[j])\n    \n    return min_pair"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n    \n    first_number = numbers[0]\n    second_number = numbers[1]\n    \n    for number in numbers[2:]:\n        if abs(number - first_number) < abs(second_number - first_number):\n            second_number = number\n        elif abs(number - second_number) < abs(first_number - second_number):\n            first_number = number\n    \n    return (first_number, second_number)"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    numbers.sort()\n    return (numbers[0], numbers[1])\n"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[0], sorted_numbers[1]"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # sort the list of numbers in ascending order\n    numbers.sort()\n    # initialize the two closest elements with the first two elements of the sorted list\n    closest_elements = (numbers[0], numbers[1])\n    # iterate over the sorted list starting from the third element\n    for i in range(2, len(numbers)):\n        # if the current element is closer to the first element than the current closest elements, update the closest elements\n        if abs(numbers[i] - closest_elements[0]) < abs(numbers[i] - closest_elements[1]):\n            closest_elements = (numbers[i], closest_elements[1])\n        # if the current element is closer to the second element than the current closest elements, update the closest elements\n        elif abs(numbers[i] - closest_elements[1]) < abs(numbers[i] - closest_elements[0]):\n            closest_elements = (closest_elements[0], numbers[i])\n    # return the two closest elements in the order of smaller and larger number\n    return closest_elements"
    },
    {
        "number": 21,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]"
    },
    {
        "number": 21,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    # Find the minimum and maximum values in the list\n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    # Create a new list with the transformed values\n    transformed_list = [(num - min_val) / (max_val - min_val) for num in numbers]\n    \n    return transformed_list"
    },
    {
        "number": 21,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    scale = max_num - min_num\n    return [(n - min_num) / scale for n in numbers]"
    },
    {
        "number": 21,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    rescaled = [(x - min_val) / (max_val - min_val) for x in numbers]\n    return rescaled"
    },
    {
        "number": 21,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers\")\n    min_val = min(numbers)\n    max_val = max(numbers)\n    if min_val == max_val:\n        return [0.0] * len(numbers)\n    scale = 1.0 / (max_val - min_val)\n    return [(n - min_val) * scale for n in numbers]"
    },
    {
        "number": 21,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(num - min_val)/(max_val - min_val) for num in numbers]"
    },
    {
        "number": 21,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n\n    # find the minimum and maximum values in the list\n    minimum = min(numbers)\n    maximum = max(numbers)\n\n    # apply the linear transform to each number in the list\n    transformed_numbers = [(number - minimum) / (maximum - minimum) for number in numbers]\n\n    return transformed_numbers"
    },
    {
        "number": 21,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # Find the smallest and largest values in the list\n    smallest = min(numbers)\n    largest = max(numbers)\n    \n    # Create a new list with the linear transform applied to each number\n    transformed_numbers = [(num - smallest) / (largest - smallest) for num in numbers]\n    \n    return transformed_numbers"
    },
    {
        "number": 21,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(num - min_val) / range_val for num in numbers]"
    },
    {
        "number": 22,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return [value for value in values if isinstance(value, int)]"
    },
    {
        "number": 22,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [val for val in values if isinstance(val, int)]"
    },
    {
        "number": 22,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values if isinstance(x, int)]"
    },
    {
        "number": 22,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return [value for value in values if isinstance(value, int)]"
    },
    {
        "number": 22,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values if isinstance(x, int)]"
    },
    {
        "number": 22,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values if isinstance(x, int)]"
    },
    {
        "number": 22,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]"
    },
    {
        "number": 22,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [val for val in values if isinstance(val, int)]"
    },
    {
        "number": 22,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]"
    },
    {
        "number": 22,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return [x for x in values if isinstance(x, int)]"
    },
    {
        "number": 23,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"
    },
    {
        "number": 23,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string \"\"\"\n    return len(string)"
    },
    {
        "number": 23,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"
    },
    {
        "number": 23,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"
    },
    {
        "number": 23,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def strlen(string: str) -> int:\n    \"\"\"Return length of given string\"\"\"\n    return len(string)"
    },
    {
        "number": 23,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string \"\"\"\n    return len(string)"
    },
    {
        "number": 23,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"
    },
    {
        "number": 23,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"
    },
    {
        "number": 23,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string \"\"\"\n    return len(string)"
    },
    {
        "number": 24,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n - 1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1"
    },
    {
        "number": 24,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"
    },
    {
        "number": 24,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1"
    },
    {
        "number": 24,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(2, n):\n        if n % i == 0:\n            return i - 1\n    return n"
    },
    {
        "number": 24,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\"\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    largest = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n    return largest"
    },
    {
        "number": 24,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    largest = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n    return largest"
    },
    {
        "number": 24,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1"
    },
    {
        "number": 24,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n - 1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1"
    },
    {
        "number": 24,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1"
    },
    {
        "number": 24,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    divisor = n - 1\n    while divisor > 1 and n % divisor!= 0:\n        divisor -= 1\n    return divisor"
    },
    {
        "number": 25,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    d = 2\n    while d*d <= n:\n        while (n % d) == 0:\n            factors.append(d)\n            n //= d\n        d += 1\n    if n > 1:\n        factors.append(n)\n    return factors"
    },
    {
        "number": 25,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return factors"
    },
    {
        "number": 25,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors"
    },
    {
        "number": 25,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors"
    },
    {
        "number": 25,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors\n\nprint(factorize(8)) # Output: [2, 2, 2]\nprint(factorize(25)) # Output: [5, 5]\nprint(factorize(70)) # Output: [2, 5, 7]"
    },
    {
        "number": 25,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"
    },
    {
        "number": 25,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    factors = []\n    divisor = 2\n\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n\n    return factors\n\n\nif __name__ == \"__main__\":\n    print(factorize(8))  # [2, 2, 2]\n    print(factorize(25))  # [5, 5]\n    print(factorize(70))  # [2, 5, 7]"
    },
    {
        "number": 25,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            count = 0\n            while n % divisor == 0:\n                n //= divisor\n                count += 1\n            factors.append(divisor)\n            factors.extend([divisor] * (count - 1))\n        divisor += 1\n    return factors"
    },
    {
        "number": 25,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    d = 2\n    while d * d <= n:\n        while (n % d) == 0:\n            factors.append(d)\n            n //= d\n        d += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n\nprint(factorize(8))    # [2, 2, 2]\nprint(factorize(25))   # [5, 5]\nprint(factorize(70))   # [2, 5, 7]"
    },
    {
        "number": 25,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_prime(n: int) -> bool:\n    \"\"\" Return True if the given number is prime, False otherwise. \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    factors = []\n    d = 2\n    while d * d <= n:\n        while (n % d) == 0:\n            factors.append(d)\n            n //= d\n        d += 1\n    if n > 1:\n        factors.append(n)\n    return factors"
    },
    {
        "number": 26,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers"
    },
    {
        "number": 26,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    return list(dict.fromkeys(numbers))"
    },
    {
        "number": 26,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # Create a dictionary to count the occurrences of each number\n    count_dict = {}\n    for num in numbers:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Create a new list with only the unique numbers\n    unique_numbers = []\n    for num in numbers:\n        if count_dict[num] == 1:\n            unique_numbers.append(num)\n    \n    return unique_numbers"
    },
    {
        "number": 26,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    unique_numbers = []\n    for num in numbers:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    return unique_numbers"
    },
    {
        "number": 26,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers"
    },
    {
        "number": 26,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"
    },
    {
        "number": 26,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    return list(dict.fromkeys(numbers))"
    },
    {
        "number": 26,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers"
    },
    {
        "number": 26,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers"
    },
    {
        "number": 26,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    result = []\n    seen = set()\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result"
    },
    {
        "number": 27,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 27,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()"
    },
    {
        "number": 27,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()"
    },
    {
        "number": 27,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()"
    },
    {
        "number": 27,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 27,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 27,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return ''.join(chr(ord(c)^32) if 'a' <= c <= 'z' else chr(ord(c)^512) if 'A' <= c <= 'Z' else c for c in string)"
    },
    {
        "number": 27,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()"
    },
    {
        "number": 28,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    if len(strings) == 0:\n        return ''\n    else:\n        return strings[0] + concatenate(strings[1:])"
    },
    {
        "number": 28,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"
    },
    {
        "number": 28,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"
    },
    {
        "number": 28,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    if not strings:\n        return ''\n    else:\n        result = ''\n        for string in strings:\n            result += string\n        return result"
    },
    {
        "number": 28,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    if len(strings) == 0:\n        return ''\n    else:\n        return strings[0] + concatenate(strings[1:])"
    },
    {
        "number": 28,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"
    },
    {
        "number": 28,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"
    },
    {
        "number": 28,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"
    },
    {
        "number": 28,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"
    },
    {
        "number": 28,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"
    },
    {
        "number": 29,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]"
    },
    {
        "number": 29,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    result = []\n    for s in strings:\n        if s.startswith(prefix):\n            result.append(s)\n    return result\n"
    },
    {
        "number": 29,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    result = []\n    for string in strings:\n        if string.startswith(prefix):\n            result.append(string)\n    return result"
    },
    {
        "number": 29,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"
    },
    {
        "number": 29,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"
    },
    {
        "number": 29,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"
    },
    {
        "number": 29,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "The code is already given in the prompt."
    },
    {
        "number": 29,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"
    },
    {
        "number": 29,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"
    },
    {
        "number": 29,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 30,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]"
    },
    {
        "number": 30,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num > 0]"
    },
    {
        "number": 30,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]"
    },
    {
        "number": 30,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return list(filter(lambda x: x > 0, l))"
    },
    {
        "number": 30,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]"
    },
    {
        "number": 30,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]"
    },
    {
        "number": 30,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num > 0]"
    },
    {
        "number": 30,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num > 0]"
    },
    {
        "number": 31,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 31,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 31,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 31,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 31,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 31,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\nprint(is_prime(6))    # False\nprint(is_prime(101))  # True\nprint(is_prime(11))   # True\nprint(is_prime(13441))# True\nprint(is_prime(61))   # True\nprint(is_prime(4))    # False\nprint(is_prime(1))    # False"
    },
    {
        "number": 31,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\n    # 1 is not a prime number\n    if n == 1:\n        return False\n\n    # Check for divisibility by 2\n    for i in range(2, int(n/2)+1):\n        if n % i == 0:\n            return False\n    \n    # If no divisibility found, return True\n    return True"
    },
    {
        "number": 31,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 31,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 32,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2!= 0:\n        raise ValueError(\"List of coefficients must have even number of elements\")\n    max_coeff = max(xs)\n    if max_coeff == 0:\n        raise ValueError(\"Polynomial is not invertible\")\n    for i in range(0, len(xs), 2):\n        if xs[i] == max_coeff:\n            return -xs[i+1]/xs[i]\n    for i in range(1, len(xs), 2):\n        if xs[i] == max_coeff:\n            return -xs[i+1]/xs[i]\n    return None # Should never reach here"
    },
    {
        "number": 32,
        "checkpoint": "15B",
        "pass": 1,
        "answer": ""
    },
    {
        "number": 32,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "The `find_zero` function takes a list of coefficients `xs` and finds the zero point of the polynomial. The function uses the fact that the zero point of a polynomial is the point at which the second derivative is zero. The `poly` function is used to evaluate the second derivative at a point and then uses the quadratic formula to find the roots of the polynomial. The function returns the only zero point, even if there are many."
    },
    {
        "number": 32,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 == 1 or max(abs(coeff) for coeff in xs) == 0:\n        raise ValueError(\"Polynomial must have even number of coefficients and non-zero largest coefficient\")\n\n    # Find a bracketing interval for the root.\n    x_left = 1\n    x_right = xs[-1]\n    for i, coeff in enumerate(xs):\n        if abs(coeff) > 0:\n            x_left = max(x_left, -coeff / xs[i-1])\n            x_right = min(x_right, -coeff / xs[i-1])\n\n    # Use the Newton-Raphson method to find the root.\n    while abs(x_right - x_left) > 1e-8:\n        x_mid = (x_left + x_right) / 2\n        f_mid = poly(xs, x_mid)\n        if abs(f_mid) < 1e-8:\n            break\n        elif f_mid * poly(xs, x_left) > 0:\n            x_left = x_mid\n        else:\n            x_right = x_mid\n\n    return x_mid"
    },
    {
        "number": 32,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "The given Python script for this problem is correct and meets all the requirements mentioned in the problem statement. The `poly` function takes a list of coefficients and a point `x`, and returns the value of the polynomial at `x`. The `find_zero` function takes a list of coefficients and returns the value of `x` such that the polynomial evaluates to zero. The function first checks if the length of the coefficients is even and if the largest non-zero coefficient is at index 1 (assuming the list is sorted in descending order). It then iterates over all possible values of `x` using a `for` loop and evaluates the polynomial at each value using the `poly` function. If the value of the polynomial at `x` is less than or equal to zero, the function returns `x`. If no zero point is found after iterating over all possible values of `x`, the function returns `None`. The `math.pow` function is used to calculate the powers of `x` in the polynomial."
    },
    {
        "number": 32,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    n = len(xs)\n    if n % 2!= 0:\n        raise ValueError(\"Coefficient list should have even number of coefficients\")\n    max_coeff = max(abs(x) for x in xs)\n    xs = [x / max_coeff for x in xs]\n    for i in range(n // 2):\n        xs[i], xs[n - i - 1] = xs[n - i - 1], xs[i]\n    roots = []\n    for i in range(n // 2):\n        root = -xs[i] / xs[n - i - 2]\n        if abs(poly(xs, root)) < 1e-10:\n            roots.append(root)\n    return roots[0]\n"
    },
    {
        "number": 32,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "Overall, the solution is correct and meets all the requirements of the problem."
    },
    {
        "number": 32,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "4. The `find_zero` function can be improved to handle the case where the list of coefficients has a length of 3. In this case, the function uses the cubic formula to find the zero point. For example, `find_zero([1, 2, 3])` should return 1.0."
    },
    {
        "number": 32,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\n\ndef poly(xs, x):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2!= 0:\n        raise ValueError(\"Polynomial must have even number of coefficients\")\n\n    max_coeff = max(filter(lambda x: x!= 0, xs))\n\n    xs_nonzero = list(filter(lambda x: x!= 0, xs))\n    xs_even = xs_nonzero[:len(xs_nonzero) // 2]\n    xs_odd = xs_nonzero[len(xs_nonzero) // 2:]\n\n    roots = []\n    for i in range(len(xs_even)):\n        if xs_even[i]!= 0:\n            root = -xs_odd[i] / xs_even[i]\n            if poly(xs_even, root) == 0:\n                roots.append(root)\n\n    return roots[0]\n"
    },
    {
        "number": 32,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    n = len(xs)\n    if n % 2!= 0:\n        raise ValueError(\"Number of coefficients should be even.\")\n    if xs[-1] == 0:\n        raise ValueError(\"The largest coefficient cannot be zero.\")\n    for i in range(n // 2):\n        if xs[i] == xs[-1]:\n            return xs[i]\n    # Find the interval to search for zero point\n    a, b = -float('inf'), float('inf')\n    for i in range(n // 2):\n        if xs[i]!= 0:\n            a = max(a, -xs[i]/xs[-1])\n            b = min(b, -xs[i]/xs[-1])\n    # Use Brent's method to find the zero point\n    tol = 1e-8\n    x0 = (a + b) / 2\n    fx0 = poly(xs, x0)\n    if abs(fx0) < tol:\n        return x0\n    x1 = x0 - fx0 / poly(xs, x0 - fx0)\n    fx1 = poly(xs, x1)\n    while abs(fx1) > tol:\n        if fx0 * fx1 < 0:\n            b = x1\n            x1 = x0\n            fx1 = fx0\n        x0 = x1\n        fx0 = fx1\n        x1 = x0 - fx0 / poly(xs, x0 - fx0)\n        fx1 = poly(xs, x1)\n    return x1"
    },
    {
        "number": 33,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    sorted_l = sorted(l)\n    result = []\n    for i, val in enumerate(l):\n        if i % 3 == 0:\n            result.append(sorted_l.pop(0))\n        else:\n            result.append(val)\n    return result"
    },
    {
        "number": 33,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    result = []\n    for i in range(len(l)):\n        if i % 3!= 0:\n            result.append(l[i])\n        else:\n            result.append(sorted(l)[i//3])\n    return result"
    },
    {
        "number": 33,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    result = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result.append(l[i])\n        else:\n            result.append(l[i])\n            result.sort()\n    return result"
    },
    {
        "number": 33,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n\n    result = []\n    for i in range(len(l)):\n        if i % 3!= 0:\n            result.append(l[i])\n        else:\n            sorted_values = sorted(l[:i+1])\n            result.extend(sorted_values)\n            break\n    \n    return result"
    },
    {
        "number": 33,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    for i in range(len(l)):\n        if i % 3!= 0:\n            l[i] = None\n    sorted_l = sorted([l[i] for i in range(len(l)) if l[i] is not None])\n    for i in range(len(l)):\n        if l[i] is None:\n            l[i] = sorted_l.pop(0)\n    return l"
    },
    {
        "number": 33,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    new_list = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            new_list.append(sorted(l)[i // 3])\n        else:\n            new_list.append(l[i])\n    return new_list"
    },
    {
        "number": 33,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    sorted_l = sorted([x for i, x in enumerate(l) if i % 3!= 0])\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = sorted_l.pop(0)\n    return l"
    },
    {
        "number": 33,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    new_list = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            new_list.append(l[i])\n        else:\n            new_list.append(None)\n    new_list = sorted([x for x in new_list if x is not None])\n    for i in range(len(l)):\n        if i % 3 == 0:\n            new_list[i//3] = l[i]\n    return new_list"
    },
    {
        "number": 33,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    result = []\n    for i, val in enumerate(l):\n        if i % 3!= 0:\n            result.append(val)\n        else:\n            result.append(sorted(l[:i+1])[0])\n    return result"
    },
    {
        "number": 33,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    res = []\n    for i in range(len(l)):\n        if i % 3!= 0:\n            res.append(l[i])\n        else:\n            res.append(sorted(l)[i // 3])\n    return res"
    },
    {
        "number": 34,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"
    },
    {
        "number": 34,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))"
    },
    {
        "number": 34,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    unique_list = list(set(l))\n    unique_list.sort()\n    return unique_list"
    },
    {
        "number": 34,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique(l: list) -> list:\n    \"\"\"Return sorted unique elements in a list.\"\"\"\n    return sorted(set(l))"
    },
    {
        "number": 34,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))"
    },
    {
        "number": 34,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))"
    },
    {
        "number": 34,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(list(set(l)))\n"
    },
    {
        "number": 34,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    unique_list = []\n    for i in l:\n        if i not in unique_list:\n            unique_list.append(i)\n    unique_list.sort()\n    return unique_list"
    },
    {
        "number": 34,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))"
    },
    {
        "number": 35,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)"
    },
    {
        "number": 35,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    return max(l)"
    },
    {
        "number": 35,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "The function has been annotated with a docstring that describes its purpose and usage. The function also includes a doctest that demonstrates how to use the function with different input values."
    },
    {
        "number": 35,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)"
    },
    {
        "number": 35,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    return max(l)"
    },
    {
        "number": 35,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_num = l[0]\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 35,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_num = l[0]\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 35,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)"
    },
    {
        "number": 36,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\"\"\"\n    count = 0\n    for num in range(1, n):\n        if (num % 11 == 0 or num % 13 == 0) and '7' in str(num):\n            count += 1\n    return count"
    },
    {
        "number": 36,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count"
    },
    {
        "number": 36,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def fizz_buzz(n: int):\n    count = 0\n    for num in range(1, n):\n        if num % 11 == 0 or num % 13 == 0:\n            count += str(num).count(\"7\")\n    return count"
    },
    {
        "number": 36,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"
    },
    {
        "number": 36,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            s = str(i)\n            if '7' in s:\n                count += 1\n    return count"
    },
    {
        "number": 36,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0 and '7' in str(i):\n            count += 1\n    return count"
    },
    {
        "number": 36,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\"\"\"\n    count = 0\n    for num in range(1, n):\n        if num % 11 == 0 or num % 13 == 0:\n            if '7' in str(num):\n                count += 1\n    return count"
    },
    {
        "number": 36,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            s = str(i)\n            if '7' in s:\n                count += 1\n    return count"
    },
    {
        "number": 36,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"
    },
    {
        "number": 36,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\"\"\"\n    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count"
    },
    {
        "number": 37,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_even(l: list) -> list:\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    sorted_l = sorted(l[::2])  # sort the even indicies of l\n    return [x if i % 2 == 0 else sorted_l.pop(0) for i, x in enumerate(l)]"
    },
    {
        "number": 37,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even_l = [l[i] for i in range(0, len(l), 2)]\n    even_l.sort()\n    return [l[i] if i % 2 == 0 else even_l[i//2] for i in range(len(l))]"
    },
    {
        "number": 37,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    # get even indices of the list\n    even_indices = [index for index in range(len(l)) if index % 2 == 0]\n\n    # get even values of the list and sort them\n    even_values = sorted([l[index] for index in even_indices])\n\n    # create a new list with the sorted even values\n    new_l = [None] * len(l)\n    for i in range(len(even_indices)):\n        new_l[even_indices[i]] = even_values[i]\n\n    return new_l"
    },
    {
        "number": 37,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even_l = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_l.sort()\n    return even_l + [l[i] for i in range(len(l)) if i % 2!= 0]\n"
    },
    {
        "number": 37,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l1 = []\n    l2 = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l1.append(l[i])\n        else:\n            l2.append(l[i])\n    l1.sort()\n    l3 = []\n    for i in range(len(l2)):\n        l3.append(l2[i])\n    for i in range(len(l1)):\n        l3.append(l1[i])\n    return l3"
    },
    {
        "number": 37,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            # if i is even, append the sorted list of the even indices of l\n            result.append(sorted([l[i] for j in range(len(l)) if j % 2 == 0])[0])\n        else:\n            # if i is odd, append the value at index i of l\n            result.append(l[i])\n    return result\n"
    },
    {
        "number": 37,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    sorted_list = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            sorted_list.append(l[i])\n        else:\n            sorted_list.append(l[i])\n    sorted_list.sort()\n    for i in range(len(l)):\n        if i % 2 == 0:\n            sorted_list[i] = l[i]\n    return sorted_list\n"
    },
    {
        "number": 37,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    sorted_list = sorted(l[::2])  # sort the odd indicies of l\n    for i in range(1, len(l), 2):\n        l[i] = sorted_list.pop(0)  # assign the sorted values to the even indicies of l\n    return l"
    },
    {
        "number": 37,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\"\"\"\n    sorted_l = l[::2]\n    sorted_l[::2] = sorted(sorted_l[::2])\n    return sorted_l"
    },
    {
        "number": 37,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\"\"\"\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    sorted_values = sorted(l[i] for i in even_indices)\n    sorted_l = [l[i] for i in range(len(l)) if i not in even_indices] + sorted_values\n    return sorted_l"
    },
    {
        "number": 38,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    return encode_cyclic(s)"
    },
    {
        "number": 38,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[1:-1] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"
    },
    {
        "number": 38,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1:] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"
    },
    {
        "number": 38,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1:] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"
    },
    {
        "number": 38,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cyclic elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # join groups to form decoded string\n    decoded = \"\".join(groups)\n    # restore original order of characters.\n    decoded = \"\".join(reversed(decoded))\n    return decoded"
    },
    {
        "number": 38,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"
    },
    {
        "number": 38,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def encode_cyclic(s: str) -> str:\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"
    },
    {
        "number": 38,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"
    },
    {
        "number": 38,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # uncycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"
    },
    {
        "number": 39,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        fib = [2, 3]\n        count = 2\n        while count < n:\n            fib.append(fib[count-1] + fib[count-2])\n            if is_prime(fib[count]):\n                count += 1\n            else:\n                fib.pop()\n        return fib[n-1]\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    is_prime returns True if n is a prime number, else False.\n    \"\"\"\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 39,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    # Initialize the first two Fibonacci numbers\n    a, b = 0, 1\n    # Initialize the count of prime Fibonacci numbers found so far\n    count = 0\n    \n    while count < n:\n        # Check if the current Fibonacci number is prime\n        if is_prime(a):\n            # Increment the count of prime Fibonacci numbers found so far\n            count += 1\n            # Return the n-th prime Fibonacci number if we have found it\n            if count == n:\n                return a\n        # Calculate the next Fibonacci number\n        a, b = b, a + b\n        \ndef is_prime(num: int) -> bool:\n    \"\"\"\n    is_prime returns True if the given number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 39,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_prime(n: int) -> bool:\n    \"\"\"\n    is_prime returns True if n is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        fib = [2, 3]\n        i = 2\n        while len(fib) < n:\n            fib.append(fib[i-1] + fib[i-2])\n            i += 1\n        while not is_prime(fib[-1]):\n            fib.pop()\n        return fib[-1]"
    },
    {
        "number": 39,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def prime_fib(n: int):\n    limit = 1000000  # we'll only need to check up to 1,000,000\n    is_prime = [True] * limit\n    is_prime[0], is_prime[1] = False, False  # 0 and 1 are not prime\n    \n    for i in range(2, int(limit ** 0.5) + 1):  # iterate up to square root of limit\n        if is_prime[i]:\n            for j in range(i * i, limit, i):  # mark all multiples of i as not prime\n                is_prime[j] = False\n    \n    # generate a list of prime numbers up to limit\n    primes = []\n    for i in range(2, limit):\n        if is_prime[i]:\n            primes.append(i)\n    \n    # iterate through primes to find the n-th prime Fibonacci number\n    count = 0\n    current = 1\n    for prime in primes:\n        if count == n:\n            return current\n        count += 1\n        current = prime * current + 1  # generate the next Fibonacci number\n    \n    return None  # if we reach this point, there are not enough prime Fibonacci numbers\n\n\nif __name__ == '__main__':\n    n = int(input(\"Enter the value of n: \"))\n    result = prime_fib(n)\n    if result:\n        print(f\"The {n}-th prime Fibonacci number is {result}.\")\n    else:\n        print(f\"There are not enough prime Fibonacci numbers up to {n}.\")"
    },
    {
        "number": 39,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_prime(n: int) -> bool:\n    \"\"\"\n    is_prime returns True if n is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    \n    prev_prev = 1\n    prev = 2\n    current = 3\n    \n    for i in range(3, n+1):\n        if is_prime(current):\n            return current\n        \n        next = prev + prev_prev\n        prev_prev = prev\n        prev = current\n        current = next\n        \n    return -1 # n is too large"
    },
    {
        "number": 39,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_prime(n: int) -> bool:\n    \"\"\"\n    is_prime checks if a number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    count = 0\n    a, b = 0, 1\n    while count < n:\n        if is_prime(b):\n            count += 1\n        if count == n:\n            return b\n        a, b = b, a + b\n"
    },
    {
        "number": 39,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_prime(n: int) -> bool:\n    \"\"\"\n    is_prime checks whether a given number is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        fib = [1, 2]\n        for i in range(2, n):\n            fib.append(fib[i-1] + fib[i-2])\n        for i in range(n-1, 0, -1):\n            if is_prime(fib[i]):\n                return fib[i]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 39,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    # Create a list of all integers from 2 to the upper limit\n    upper_limit = 50000\n    fib_seq = [2, 3]  # Initialize the Fibonacci sequence with the first two terms\n    while fib_seq[-1] + fib_seq[-2] < upper_limit:\n        fib_seq.append(fib_seq[-1] + fib_seq[-2])\n\n    # Use the Sieve of Eratosthenes algorithm to find all primes up to the upper limit\n    is_prime = [True] * upper_limit\n    is_prime[0], is_prime[1] = False, False\n    for i in range(2, int(upper_limit ** 0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, upper_limit, i):\n                is_prime[j] = False\n\n    # Use the trial division method to check each Fibonacci number for primality\n    for i in range(n):\n        if is_prime[fib_seq[i]]:\n            return fib_seq[i]"
    },
    {
        "number": 39,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_prime(n: int) -> bool:\n    \"\"\"\n    is_prime returns True if n is a prime number, otherwise False.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    if n == 1:\n        return 2\n    \n    fib_n_1 = 1\n    fib_n_2 = 2\n    \n    for i in range(3, n+1):\n        fib_n = fib_n_1 + fib_n_2\n        if is_prime(fib_n):\n            n -= 1\n        fib_n_1 = fib_n_2\n        fib_n_2 = fib_n\n    \n    return fib_n"
    },
    {
        "number": 39,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_prime(n: int) -> bool:\n    \"\"\"\n    is_prime returns True if n is a prime number, otherwise False.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    a, b = 0, 1\n    count = 0\n    while count < n:\n        if is_prime(b):\n            count += 1\n            if count == n:\n                return b\n        a, b = b, a + b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
        "number": 40,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def triples_sum_to_zero(l):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"
    },
    {
        "number": 40,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    n = len(l)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"
    },
    {
        "number": 40,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n\n    return False"
    },
    {
        "number": 40,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def triples_sum_to_zero(l):\n    n = len(l)\n    for i in range(n-2):\n        seen = set([l[i]])\n        for j in range(i+1, n-1):\n            if -l[i]-l[j] in seen:\n                return True\n            seen.add(l[j])\n    return False"
    },
    {
        "number": 40,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"
    },
    {
        "number": 40,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    \n    # loop through all the elements in the list\n    for i in range(len(l)):\n        # loop through the rest of the list to find the two elements that add up to zero\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    # if no triples are found, return False\n    return False"
    },
    {
        "number": 40,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"
    },
    {
        "number": 41,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Create two sets of cars, one moving left to right and one moving right to left.\n    left_cars = [(i, -i) for i in range(1, n+1)]\n    right_cars = [(i, i) for i in range(1, n+1)]\n\n    # Keep track of the number of collisions.\n    collisions = 0\n\n    # Move the cars and check for collisions.\n    for i in range(n):\n        # Move left cars.\n        for j in range(len(left_cars)):\n            if left_cars[j][0] > left_cars[j][1]:\n                collisions += 1\n                left_cars[j] = (-left_cars[j][1], -left_cars[j][0])\n        # Move right cars.\n        for j in range(len(right_cars)):\n            if right_cars[j][0] > right_cars[j][1]:\n                collisions += 1\n                right_cars[j] = (-right_cars[j][1], -right_cars[j][0])\n\n    return collisions"
    },
    {
        "number": 41,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    left_cars = [False] * n\n    right_cars = [False] * n\n    collisions = 0\n    for i in range(n):\n        left_cars[i] = True\n        if right_cars[i]:\n            collisions += 1\n        right_cars[i] = False\n        if left_cars[i]:\n            collisions += 1\n        left_cars[i] = False\n    return collisions"
    },
    {
        "number": 41,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    left_cars = [i for i in range(n)]\n    right_cars = [i for i in range(n)]\n    collisions = 0\n    for i in range(n):\n        if left_cars[i] > right_cars[i]:\n            collisions += 1\n    return collisions"
    },
    {
        "number": 41,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def car_race_collision(n: int):\n    # Initialize two lists to hold the current positions of the cars\n    left_cars = [i for i in range(1, n+1)]\n    right_cars = [i for i in range(n, 0, -1)]\n\n    # Initialize a count of collisions to zero\n    collisions = 0\n\n    # Loop through each car and check for collisions\n    for i in range(n):\n        if left_cars[i] == right_cars[i]:\n            collisions += 1\n        elif left_cars[i] < right_cars[i]:\n            left_cars[i] += 1\n            if left_cars[i] == right_cars[i]:\n                collisions += 1\n        else:\n            right_cars[i] += 1\n            if left_cars[i] == right_cars[i]:\n                collisions += 1\n\n    # Return the count of collisions\n    return collisions"
    },
    {
        "number": 41,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Initialize the cars' positions\n    left_cars = [(0, i) for i in range(n)]\n    right_cars = [(100, i) for i in range(n)]\n\n    # Initialize the number of collisions\n    collisions = 0\n\n    # Iterate over the left cars\n    for i, (x, y) in enumerate(left_cars):\n        # Iterate over the right cars\n        for j, (u, v) in enumerate(right_cars):\n            # Check if the cars collide\n            if u < x:\n                collisions += 1\n                # Move the right car back to its original position\n                right_cars[j] = (u + 100, v)\n\n    return collisions"
    },
    {
        "number": 41,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if (i >= j):\n                count += 1\n    return count\n"
    },
    {
        "number": 41,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 2 == 0:  # even indices (left to right)\n            for j in range(i+1, n):\n                if j % 2 == 1:  # odd indices (right to left)\n                    count += 1\n    return count"
    },
    {
        "number": 41,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def car_race_collision(n: int):\n    # Initialize the car positions\n    left_cars = list(range(1, n+1))\n    right_cars = list(range(n, 0, -1))\n    collisions = 0\n    \n    # Move the cars and count collisions\n    for i in range(n):\n        left_cars[i] += 1\n        right_cars[i] -= 1\n        if left_cars[i] == right_cars[i]:\n            collisions += 1\n    \n    return collisions"
    },
    {
        "number": 41,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    left_to_right = [False] * n\n    right_to_left = [False] * n\n    collisions = 0\n    \n    for i in range(n):\n        left_to_right[i] = True\n        right_to_left[i] = False\n        if right_to_left[i-1] == True:\n            collisions += 1\n        left_to_right[i-1] = False\n    \n    for i in range(n):\n        right_to_left[i] = True\n        left_to_right[i] = False\n        if left_to_right[i-1] == True:\n            collisions += 1\n        right_to_left[i-1] = False\n        \n    return collisions"
    },
    {
        "number": 41,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Create two lists of cars, one for each direction\n    cars_left = [i for i in range(1, n+1)]\n    cars_right = [i for i in range(n, 0, -1)]\n\n    # Initialize a counter for collisions\n    collision_count = 0\n\n    # Loop through both lists of cars simultaneously\n    for i in range(n):\n        # If a left-moving car collides with a right-moving car, increment the counter\n        if cars_left[i] == cars_right[i]:\n            collision_count += 1\n            # Remove both cars from their respective lists\n            cars_left.remove(cars_left[i])\n            cars_right.remove(cars_right[i])\n\n    # Return the final count of collisions\n    return collision_count"
    },
    {
        "number": 42,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i + 1 for i in l]"
    },
    {
        "number": 42,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def incr_list(l: list) -> list:\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i+1 for i in l]"
    },
    {
        "number": 42,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x+1 for x in l]"
    },
    {
        "number": 42,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x + 1 for x in l]"
    },
    {
        "number": 42,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x+1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i+1 for i in l]"
    },
    {
        "number": 42,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def incr_list(l):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x+1 for x in l]\n\nprint(incr_list([1, 2, 3])) # [2, 3, 4]\nprint(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])) # [6, 4, 6, 3, 4, 4, 10, 1, 124]"
    },
    {
        "number": 42,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def incr_list(l: list) -> list:\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [num + 1 for num in l]"
    },
    {
        "number": 42,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def incr_list(l):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x+1 for x in l]"
    },
    {
        "number": 42,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x + 1 for x in l]"
    },
    {
        "number": 43,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 43,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 43,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 43,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 43,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 43,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    hash_table = {}\n    for num in l:\n        if num not in hash_table:\n            hash_table[num] = True\n        else:\n            return True\n    return False"
    },
    {
        "number": 43,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    complements = set()\n    for num in l:\n        if -num in complements:\n            return True\n        complements.add(num)\n    return False"
    },
    {
        "number": 43,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 43,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 43,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 44,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    Return string representation after the conversion.\n    Base numbers are less than 10.\"\"\"\n    if base < 2 or base > 10:\n        raise ValueError(\"Base numbers must be between 2 and 10.\")\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(x % base)\n        x //= base\n    digits.reverse()\n    return ''.join(str(d) for d in digits)\n\nif __name__ == '__main__':\n    print(change_base(8, 3))\n    print(change_base(8, 2))\n    print(change_base(7, 2))"
    },
    {
        "number": 44,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n    while x > 0:\n        remainder = x % base\n        if remainder >= 10:\n            result = chr(remainder + 55) + result\n        else:\n            result = str(remainder) + result\n        x //= base\n    return result"
    },
    {
        "number": 44,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n        digits = []\n        while x > 0:\n            digits.append(x % base)\n            x //= base\n        digits.reverse()\n        return ''.join(str(digit) for digit in digits)"
    },
    {
        "number": 44,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    return result or '0'"
    },
    {
        "number": 44,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # Create an empty list to store the digits of x in the desired base\n    digits = []\n    \n    # Convert x to the desired base and add each digit to the digits list\n    while x > 0:\n        digits.append(x % base)\n        x //= base\n        \n    # Reverse the digits list and convert it to a string\n    digits.reverse()\n    result = ''.join(str(digit) for digit in digits)\n    \n    return result"
    },
    {
        "number": 44,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    if x < 0:\n        sign = '-'\n        x = -x\n    else:\n        sign = ''\n\n    result = ''\n    while x:\n        result = str(x % base) + result\n        x //= base\n\n    return sign + result or '0'"
    },
    {
        "number": 44,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"\n    Change numerical base of input number x to base.\n    :param x: integer number to convert\n    :param base: base to convert to (must be less than 10)\n    :return: string representation after the conversion\n    \"\"\"\n    if base > 10 or base < 2:\n        raise ValueError(\"Base must be less than 10 and greater than 1\")\n    if x < 0:\n        raise ValueError(\"Input number cannot be negative\")\n\n    # convert to string to iterate over characters\n    x_str = str(x)\n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        # handle case where remainder is 10 or greater\n        if remainder >= 10:\n            result = chr(ord('A') + remainder - 10) + result\n        else:\n            result = str(remainder) + result\n        x //= base\n\n    return result\n\n\nprint(change_base(8, 3))  # Output: '22'\nprint(change_base(8, 2))  # Output: '1000'\nprint(change_base(7, 2))  # Output: '111'"
    },
    {
        "number": 44,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    # Check if base is less than 2 or greater than 9\n    if base < 2 or base > 9:\n        return \"Invalid base\"\n\n    # Check if x is a positive integer\n    if not isinstance(x, int) or x < 0:\n        return \"Invalid input\"\n\n    # Convert x to string and reverse it to start from least significant digit\n    digits = list(str(x))\n    digits.reverse()\n\n    # Initialize result string\n    result = \"\"\n\n    # Convert each digit to the desired base\n    for digit in digits:\n        if digit.isdigit():\n            digit = int(digit)\n            if digit >= base:\n                return \"Invalid digit for given base\"\n            result += str(digit)\n        else:\n            return \"Invalid digit for given base\"\n\n    # Reverse the result string to get the correct order of digits\n    result = result[::-1]\n\n    return result"
    },
    {
        "number": 44,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base >= 10:\n        return \"Base must be less than 10\"\n    \n    result = ''\n    \n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    \n    return result"
    },
    {
        "number": 44,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2 or base > 10:\n        return None\n\n    # convert x to string\n    num = str(x)\n\n    # initialize variables\n    result = ''\n    temp = 0\n\n    # iterate over each character in the string\n    for i in range(len(num)):\n        digit = int(num[len(num) - 1 - i])\n        temp += digit * (base ** i)\n\n    # convert temp to the target base and append to result\n    while temp > 0:\n        digit = temp % base\n        result = str(digit) + result\n        temp = temp // base\n\n    return result"
    },
    {
        "number": 45,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height, returns area of a triangle.\"\"\"\n    area = 0.5 * a * h\n    return area\n"
    },
    {
        "number": 45,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    area = (0.5) * a * h\n    return area"
    },
    {
        "number": 45,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h"
    },
    {
        "number": 45,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h"
    },
    {
        "number": 45,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    area = 0.5 * a * h\n    return area"
    },
    {
        "number": 45,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h"
    },
    {
        "number": 45,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "Additionally, it should include a doctest to verify the correctness of the function."
    },
    {
        "number": 45,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h"
    },
    {
        "number": 45,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    area = 0.5 * a * h\n    return area"
    },
    {
        "number": 45,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    area = (a * h) / 2\n    return area\n"
    },
    {
        "number": 46,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        fib_prev = 0\n        fib_curr = 0\n        fib_prev_prev = 0\n        fib_prev_curr = 2\n        \n        for i in range(3, n+1):\n            fib_curr = fib_prev_prev + fib_prev_curr + fib_prev\n            fib_prev_prev = fib_prev_curr\n            fib_prev_curr = fib_prev\n            fib_prev = fib_curr\n        \n        return fib_curr"
    },
    {
        "number": 46,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        fib1 = 0\n        fib2 = 0\n        fib3 = 0\n        fib4 = 2\n        \n        for i in range(4, n+1):\n            fib4 = fib1 + fib2 + fib3 + fib4\n            fib1 = fib2\n            fib2 = fib3\n            fib3 = fib4\n        \n        return fib4"
    },
    {
        "number": 46,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        prev1 = 0\n        prev2 = 0\n        prev3 = 0\n        prev4 = 0\n        for i in range(1, n+1):\n            curr = prev1 + prev2 + prev3 + prev4\n            prev4 = prev3\n            prev3 = prev2\n            prev2 = prev1\n            prev1 = curr\n        return curr"
    },
    {
        "number": 46,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        fib = [0, 0, 2]\n        for i in range(3, n+1):\n            fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n        return fib[n]"
    },
    {
        "number": 46,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)"
    },
    {
        "number": 46,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def fib4(n: int):\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n+1):\n            a, b, c, d = b, c, d, a+b+c+d\n        return d"
    },
    {
        "number": 46,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    \"\"\"\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(3, n+1):\n            a, b, c, d = b, c, d, a+b+c+d\n        return d"
    },
    {
        "number": 46,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n            a = b\n            b = c\n            c = d\n            d = e\n        return d"
    },
    {
        "number": 46,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)"
    },
    {
        "number": 47,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"
    },
    {
        "number": 47,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2-1] + l[n//2]) / 2\n    else:\n        return l[n//2]"
    },
    {
        "number": 47,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n % 2 == 1:\n        # If n is odd, return the middle element\n        return sorted(l)[n // 2]\n    else:\n        # If n is even, return the average of the two middle elements\n        i = n // 2\n        return (sorted(l)[i - 1] + sorted(l)[i]) / 2"
    },
    {
        "number": 47,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\"\"\"\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"
    },
    {
        "number": 47,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2-1] + l[n//2])/2\n    else:\n        return l[n//2]"
    },
    {
        "number": 47,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"
    },
    {
        "number": 47,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l_sorted = sorted(l)\n    n = len(l)\n    if n % 2 == 0:\n        # if the list has an even length, the median is the average of the middle two elements\n        return (l_sorted[n//2-1] + l_sorted[n//2]) / 2\n    else:\n        # if the list has an odd length, the median is the middle element\n        return l_sorted[n//2]"
    },
    {
        "number": 47,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2-1] + l[n//2]) / 2\n    else:\n        return l[n//2]"
    },
    {
        "number": 47,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]"
    },
    {
        "number": 47,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    sorted_l = sorted(l)\n    if n % 2 == 0:\n        return (sorted_l[n//2] + sorted_l[n//2 - 1]) / 2\n    else:\n        return sorted_l[n//2]"
    },
    {
        "number": 48,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    if text == '':\n        return True\n    elif text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    else:\n        return False"
    },
    {
        "number": 48,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    if text == text[::-1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 48,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    # Removing all non-alphanumeric characters and converting to lowercase\n    text = \"\".join(char.lower() for char in text if char.isalnum())\n    # Checking if the original string and the reversed string are equal\n    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    if text == text[::-1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 48,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "To test the function, we can use the `doctest` module in Python. We can simply run the code block containing the function call and the expected output. If the output matches the expected output, we can be confident that the function is working correctly."
    },
    {
        "number": 48,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    # Remove all non-alphanumeric characters and convert to lowercase\n    clean_text = ''.join(c.lower() for c in text if c.isalnum())\n    # Check if clean text is equal to its reverse\n    return clean_text == clean_text[::-1]"
    },
    {
        "number": 48,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    :param text: str, input string\n    :return: bool, True if input string is a palindrome, False otherwise\n    \"\"\"\n    if text == '':\n        return True\n    elif len(text) == 1:\n        return True\n    else:\n        for i in range(len(text)//2):\n            if text[i]!= text[-i-1]:\n                return False\n        return True"
    },
    {
        "number": 48,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    # convert the string to lowercase and remove all non-alphanumeric characters\n    clean_text = ''.join(char.lower() for char in text if char.isalnum())\n    # compare the clean string to its reverse\n    return clean_text == clean_text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text.lower() == text[::-1].lower()"
    },
    {
        "number": 49,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)"
    },
    {
        "number": 49,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)"
    },
    {
        "number": 49,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)"
    },
    {
        "number": 49,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)"
    },
    {
        "number": 49,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    result = 1\n    for i in range(n):\n        result = (result * 2) % p\n    return result"
    },
    {
        "number": 49,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    result = 1\n    for i in range(n):\n        result = (result * 2) % p\n    return result"
    },
    {
        "number": 49,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return (modp(n//2, p) ** 2) % p\n    else:\n        return (2 * modp(n-1, p)) % p"
    },
    {
        "number": 49,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    result = 1\n    base = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n //= 2\n    return result"
    },
    {
        "number": 49,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return pow(2, n/2, p) * pow(2, n/2, p) % p\n    else:\n        return pow(2, (n-1)/2, p) * pow(2, (n-1)/2, p) * 2 % p"
    },
    {
        "number": 49,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    if n == 0:\n        return 1\n    elif n < 0:\n        return pow(2, -n, p)\n    else:\n        return pow(2, n, p)"
    },
    {
        "number": 50,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"
    },
    {
        "number": 50,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"
    },
    {
        "number": 50,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"
    },
    {
        "number": 50,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"
    },
    {
        "number": 50,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"
    },
    {
        "number": 50,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"
    },
    {
        "number": 50,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"
    },
    {
        "number": 50,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 51,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"
    },
    {
        "number": 51,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"
    },
    {
        "number": 51,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"
    },
    {
        "number": 51,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"
    },
    {
        "number": 51,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_vowels(text):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for char in text:\n        if char.lower() not in vowels:\n            result += char\n    return result"
    },
    {
        "number": 51,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    new_text = ''\n    for char in text:\n        if char not in vowels:\n            new_text += char\n    return new_text"
    },
    {
        "number": 51,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    new_text = ''\n    for char in text:\n        if char not in vowels:\n            new_text += char\n    return new_text"
    },
    {
        "number": 51,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"
    },
    {
        "number": 51,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"
    },
    {
        "number": 51,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "The given Python script is correct and implements the desired function to remove vowels from a given string. The script has a function definition `remove_vowels` which takes a string as input and returns a string with all vowels removed. The function definition is followed by several test cases to ensure that the function is working correctly."
    },
    {
        "number": 52,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    return all(num < t for num in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True"
    },
    {
        "number": 52,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True"
    },
    {
        "number": 52,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True"
    },
    {
        "number": 52,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    return all(num < t for num in l)\n\nprint(below_threshold([1, 2, 4, 10], 100)) # True\nprint(below_threshold([1, 20, 4, 10], 5)) # False"
    },
    {
        "number": 52,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(num < t for num in l)\n\n\nExplanation:\n\nThe above function takes a list l and an integer t as input. It uses the `all()` function in Python, which checks whether all the elements in the list satisfy a certain condition. In this case, the condition is that each number in the list should be less than the threshold t.\n\nIn the function, we use a generator expression inside the `all()` function to iterate over each number in the list l and check whether it's less than t. If all the numbers in the list are less than t, the function returns `True`, otherwise it returns `False`.\n\nWe can test the function using the `doctest` module. The doctest module runs the function with sample inputs and checks whether the output matches the expected output. If the output is correct, the doctest module considers the function to be tested successfully."
    },
    {
        "number": 52,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True"
    },
    {
        "number": 52,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    return all(num < t for num in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True"
    },
    {
        "number": 52,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True"
    },
    {
        "number": 53,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 53,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\nprint(add(2, 3))  # Output: 5\nprint(add(5, 7))  # Output: 12"
    },
    {
        "number": 53,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y"
    },
    {
        "number": 53,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"
    },
    {
        "number": 53,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\nprint(add(2, 3)) # Output: 5\nprint(add(5, 7)) # Output: 12"
    },
    {
        "number": 53,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 53,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 53,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y\n\nprint(add(2, 3)) # Output: 5\nprint(add(5, 7)) # Output: 12"
    },
    {
        "number": 53,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"
    },
    {
        "number": 53,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y"
    },
    {
        "number": 54,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    set0 = set(s0)\n    set1 = set(s1)\n    return set0 == set1"
    },
    {
        "number": 54,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    # Convert the words to sets of characters\n    set0 = set(s0)\n    set1 = set(s1)\n    # Check if the sets are equal\n    return set0 == set1"
    },
    {
        "number": 54,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    # Convert the strings to sets to get unique characters\n    set0 = set(s0)\n    set1 = set(s1)\n    \n    # Check if the sets have the same elements\n    return set0 == set1"
    },
    {
        "number": 54,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    # Convert strings to sets of characters and compare the sets\n    return set(s0) == set(s1)"
    },
    {
        "number": 54,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    # Convert the words to sets of characters and compare them\n    return set(s0) == set(s1)"
    },
    {
        "number": 54,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    counts = {}\n    for char in s0:\n        counts[char] = counts.get(char, 0) + 1\n    for char in s1:\n        if char not in counts or counts[char] == 0:\n            return False\n        counts[char] -= 1\n    return True"
    },
    {
        "number": 54,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    # Convert the words to sets of characters\n    set0 = set(s0)\n    set1 = set(s1)\n\n    # Check if the sets of characters are equal\n    return set0 == set1"
    },
    {
        "number": 54,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return sorted(set(s0)) == sorted(set(s1))"
    },
    {
        "number": 54,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    s0 = set(s0)\n    s1 = set(s1)\n    return s0 == s1\n"
    },
    {
        "number": 54,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    # Convert the strings to sets of characters\n    set0 = set(s0)\n    set1 = set(s1)\n\n    # Check if the sets are equal\n    return set0 == set1"
    },
    {
        "number": 55,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def fib(n: int) -> int:\n    \"\"\"Return the n-th Fibonacci number.\"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"
    },
    {
        "number": 55,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"
    },
    {
        "number": 55,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"
    },
    {
        "number": 55,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"
    },
    {
        "number": 55,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    \n    Args:\n        n (int): The position of the Fibonacci number to be calculated.\n        \n    Returns:\n        int: The n-th Fibonacci number.\n        \n    Examples:\n        >>> fib(10)\n        55\n        >>> fib(1)\n        1\n        >>> fib(8)\n        21\n    \"\"\"\n    \n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"
    },
    {
        "number": 55,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"
    },
    {
        "number": 55,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def fib(n: int) -> int:\n    \"\"\"Return the n-th Fibonacci number.\"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"
    },
    {
        "number": 55,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)\n\nprint(fib(10))  # Output: 55\nprint(fib(1))   # Output: 1\nprint(fib(8))   # Output: 21"
    },
    {
        "number": 55,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\"\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\"\"\"\n    if len(l) < 2:\n        return True\n    \n    direction = None\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            if direction is None or direction == 1:\n                direction = 1\n            elif direction == -1:\n                return False\n        elif l[i] < l[i-1]:\n            if direction is None or direction == -1:\n                direction = -1\n            elif direction == 1:\n                return False\n    \n    return True"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\"\"\"\n    if len(l) < 2:\n        return True\n\n    if l[1] > l[0]:\n        return all(l[i] > l[i-1] for i in range(2, len(l)))\n    elif l[1] < l[0]:\n        return all(l[i] < l[i-1] for i in range(2, len(l)))\n    else:\n        return True"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 1:\n        return True\n    else:\n        increasing = True\n        decreasing = True\n        for i in range(1, len(l)):\n            if l[i] < l[i-1]:\n                increasing = False\n            elif l[i] > l[i-1]:\n                decreasing = False\n            if not (increasing or decreasing):\n                return False\n        return True\n"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 1:\n        return True\n    else:\n        for i in range(len(l)-1):\n            if l[i] == l[i+1]:\n                return True\n            elif l[i] > l[i+1]:\n                if all(l[i] > x for x in l[i+1:]):\n                    return True\n                else:\n                    return False\n            else:\n                if all(l[i] < x for x in l[i+1:]):\n                    return True\n                else:\n                    return False"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    \n    increasing = False\n    decreasing = False\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            increasing = True\n        elif l[i] < l[i-1]:\n            decreasing = True\n            \n    return increasing or decreasing"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    elif l[1] > l[0]:\n        return monotonic(l[1:])\n    elif l[1] < l[0]:\n        return monotonic(l[1:])\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    n = len(l)\n    if n == 1:\n        return True\n    for i in range(1, n):\n        if l[i] > l[i-1]:\n            continue\n        elif l[i] < l[i-1]:\n            return False\n        else:\n            return True"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    set1 = set(l1)\n    set2 = set(l2)\n    common_set = set1.intersection(set2)\n    common_list = sorted(list(common_set))\n    return common_list\n"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n\n    set1 = set(l1)\n    set2 = set(l2)\n\n    common_elements = set1 & set2\n\n    common_elements = sorted(common_elements)\n\n    return common_elements"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    common_elements = set(l1).intersection(set(l2))\n    return sorted(list(common_elements))"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n\n    # Convert both lists to sets to get unique values\n    set1 = set(l1)\n    set2 = set(l2)\n\n    # Get common values between the sets\n    common_values = set1.intersection(set2)\n\n    # Sort and return the common values\n    return sorted(list(common_values))"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\n    \n    Args:\n    l1 (list): First list of integers.\n    l2 (list): Second list of integers.\n    \n    Returns:\n    list: Sorted unique common elements for two lists.\n    \n    \"\"\"\n    # Convert lists to sets to get unique elements\n    set1 = set(l1)\n    set2 = set(l2)\n    # Find common elements between sets and convert to list\n    common_list = list(set1.intersection(set2))\n    # Sort the list and return\n    common_list.sort()\n    return common_list"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def common(l1, l2):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    set1 = set(l1)\n    set2 = set(l2)\n    common_set = set1 & set2\n    return sorted(common_set)"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    # Convert list to set to remove duplicates\n    set1 = set(l1)\n    set2 = set(l2)\n\n    # Find common elements and store them in a new list\n    common_list = []\n    for num in set1:\n        if num in set2:\n            common_list.append(num)\n\n    # Return sorted unique common elements\n    return sorted(set(common_list))\n"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    common_elements = set(l1).intersection(set(l2))\n    return sorted(common_elements)"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    return sorted(set(l1) & set(l2))"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_prime(n: int) -> bool:\n    \"\"\"Return True if n is prime, False otherwise.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n    while factor * factor <= n:\n        if n % factor == 0:\n            n //= factor\n        else:\n            factor += 1\n    return n"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_prime(n: int) -> bool:\n    \"\"\"Return True if n is prime, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    if is_prime(n):\n        raise ValueError(\"n is a prime number\")\n    for i in range(n-1, 1, -1):\n        if is_prime(i) and n % i == 0:\n            return i\n    return n"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    factor = 2\n    while factor <= n // factor:\n        if n % factor == 0:\n            n //= factor\n        else:\n            factor += 1\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    factor = 2\n    while factor * factor <= n:\n        if n % factor == 0:\n            n //= factor\n        else:\n            factor += 1\n    return n"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        raise ValueError(\"n must be greater than 1\")\n    # Start with the smallest prime greater than 2\n    i = 3\n    while i <= n:\n        # If n is divisible by i, it is a factor\n        if n % i == 0:\n            # Update n to be the quotient\n            n = n // i\n            # Check if i is prime\n            while not is_prime(i):\n                # If i is not prime, divide it by its smallest prime factor\n                prime_factor = smallest_prime_factor(i)\n                n = n // prime_factor\n                i = prime_factor\n        else:\n            # Otherwise, move on to the next candidate\n            i += 2\n    # At this point, n is the largest prime factor\n    return n\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Return True if n is prime, False otherwise.\"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    # Check odd divisors up to the square root of n\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef smallest_prime_factor(n: int) -> int:\n    \"\"\"Return the smallest prime factor of n.\"\"\"\n    if n <= 1:\n        raise ValueError(\"n must be greater than 1\")\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            return i\n        i += 1"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n\n\n\nprint(largest_prime_factor(13195))  # Output: 29\nprint(largest_prime_factor(2048))  # Output: 2"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_prime(n: int) -> bool:\n    \"\"\"Return True if n is prime, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n    while factor * factor <= n:\n        if n % factor == 0:\n            n //= factor\n        else:\n            factor += 1\n    if is_prime(n):\n        return n\n    else:\n        return largest_prime_factor(n)"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_prime(n: int) -> bool:\n    \"\"\"Return True if n is prime, else False.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter a number: \"))\n    largest_prime = largest_prime_factor(n)\n    print(f\"The largest prime factor of {n} is {largest_prime}\")"
    },
    {
        "number": 60,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_to_n(n: int) -> int:\n    \"\"\"\n    This function takes an integer n and returns the sum of numbers from 1 to n.\n    \"\"\"\n    return (n * (n+1)) // 2"
    },
    {
        "number": 60,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return (n * (n + 1)) // 2"
    },
    {
        "number": 60,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return sum(range(1, n+1))"
    },
    {
        "number": 60,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return sum(range(1, n+1))"
    },
    {
        "number": 60,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return sum(range(1, n+1))\n"
    },
    {
        "number": 60,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
        "number": 60,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n\nprint(sum_to_n(30))  # Output: 465\nprint(sum_to_n(100))  # Output: 5050\nprint(sum_to_n(5))  # Output: 15\nprint(sum_to_n(10))  # Output: 55\nprint(sum_to_n(1))  # Output: 1"
    },
    {
        "number": 60,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total"
    },
    {
        "number": 60,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n+1))"
    },
    {
        "number": 60,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\n    stack = []\n\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n\n    if len(stack) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def correct_bracketing(brackets: str):\n    stack = []\n    for b in brackets:\n        if b == '(':\n            stack.append(b)\n        elif b == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            stack.pop()\n\n    return not stack"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def derivative(xs):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n    return [i*x for i,x in enumerate(xs[1:], start=1)]\n"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    if len(xs) < 2:\n        return []\n    else:\n        result = []\n        for i in range(1, len(xs)):\n            result.append(i * xs[i])\n        return result"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * (len(xs) - 1 - j) for j, i in enumerate(xs) if j!= 0]\n"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def derivative(xs):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    \"\"\"\n    n = len(xs)\n    result = []\n    for i in range(1, n):\n        result.append(i * xs[i])\n    return result"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    n = len(xs)\n    result = []\n    for i in range(1, n):\n        result.append(i * xs[i])\n    return result"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    Return derivative of this polynomial in the same form.\n    \"\"\""
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def derivative(xs):\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    res = []\n    for i in range(1, len(xs)):\n        res.append(i * xs[i])\n    return res"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    n = len(xs)\n    if n == 1:\n        return [0]\n    elif n == 2:\n        return [xs[1]]\n    else:\n        d = []\n        for i in range(1, n):\n            d.append(i * xs[i])\n        return d"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    result = []\n    for i in range(1, len(xs)):\n        result.append(i * xs[i])\n    return result"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    n = len(xs)\n    if n == 1:\n        return [0]\n    else:\n        return [i*(n-i) for i in range(1, n)] + [0] * (n-1)"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\nprint(fibfib(1))  # Output: 0\nprint(fibfib(5))  # Output: 4\nprint(fibfib(8))  # Output: 24"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n < 3:\n        return 0\n    elif n == 3:\n        return 1\n    else:\n        fib = [0, 0, 1]\n        for i in range(3, n+1):\n            fib.append(fib[i-1] + fib[i-2] + fib[i-3])\n        return fib[n]"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 0 if n == 1 else 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def fibfib(n: int):\n    if n < 3:\n        return 0 if n == 0 else 1\n    fib = [0, 1, 1]\n    for i in range(3, n+1):\n        fib[i % 3] = fib[(i-1) % 3] + fib[(i-2) % 3] + fib[(i-3) % 3]\n    return fib[n % 3]"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\"\"\"\n    count = 0\n    for char in s:\n        if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    if s[-1].lower() == 'y':\n        count += 1\n    return count"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def vowels_count(s):\n    \"\"\"\n    Returns the number of vowels in the given string s, which represents a word.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. 'y' is also a vowel, but\n    only when it is at the end of the given word.\n    \"\"\"\n    count = 0\n    vowels = set('aeiou')\n    for char in s:\n        if char.lower() in vowels and char.lower()!= 'y' or char.lower() == 'u' and s.lower().endswith('u'):\n            count += 1\n    return count"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def vowels_count(s):\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = s.lower()\n    for i in s:\n        if i in vowels:\n            count += 1\n    if s[-1] == 'y':\n        count += 1\n    return count"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = 0\n    for char in s:\n        if char in \"aeiouAEIOU\":\n            vowels += 1\n    if s[-1] == \"y\":\n        vowels += 1\n    return vowels"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def vowels_count(s):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for c in s:\n        if c in vowels and c!= \"y\" or c == \"Y\" and s[-1] == \"y\":\n            count += 1\n    return count"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1] == 'y' and s[-2] in vowels:\n        count -= 1\n    return count"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    count = 0\n    for char in s:\n        if char in \"aeiouAEIOU\":\n            count += 1\n    if s[-1].lower() == \"y\":\n        count += 1\n    return count"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1] == 'y':\n        count += 1\n    return count"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def vowels_count(s):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    x_str = str(x)\n    n = len(x_str)\n    if shift > n:\n        return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    x_str = str(x)\n    x_len = len(x_str)\n    shift %= x_len  # handle shift > x_len case\n    \n    if shift == 0:\n        return x_str\n    \n    # reverse the digits if shift is larger than half of x_len\n    if shift > x_len // 2:\n        return ''.join(reversed(x_str))\n    \n    # shift the digits and join them into a string\n    shifted_digits = x_str[-shift:] + x_str[:-shift]\n    return shifted_digits"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    # Convert x to a string\n    x_str = str(x)\n    \n    # Reverse the digits of x\n    x_str_rev = x_str[::-1]\n    \n    # Check if shift > number of digits\n    if shift > len(x_str):\n        return x_str_rev\n    \n    # Shift the digits of x right by shift\n    x_str_shifted = x_str[-shift:] + x_str[:-shift]\n    \n    return x_str_shifted"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    # Convert x to a string and get the length of the string\n    x_str = str(x)\n    length = len(x_str)\n\n    # Check if shift is greater than the length of the string\n    if shift > length:\n        shift = shift % length\n\n    # If shift is zero, return the original string\n    if shift == 0:\n        return x_str\n\n    # Get the digits after the shift\n    digits = x_str[-shift:] + x_str[:-shift]\n\n    # If shift is greater than the length of the string, reverse the digits\n    if shift > length:\n        digits = digits[::-1]\n\n    return digits"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    x_str = str(x)\n    n = len(x_str)\n    if shift > n:\n        return x_str[::-1]\n    else:\n        return ''.join([x_str[(i-shift)%n] for i in range(n)])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    x = str(x)\n    n = len(x)\n    if shift > n:\n        x = x[::-1]\n    else:\n        x = x[-shift:] + x[:-shift]\n    return x"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    num_str = str(x)\n    num_len = len(num_str)\n    \n    if shift > num_len:\n        return ''.join(reversed(num_str))\n    \n    else:\n        shifted_num = num_str[-shift:] + num_str[:-shift]\n        return shifted_num"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    x_str = str(x)\n    n = len(x_str)\n    if shift > n:\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    # convert x to a string and get its length\n    x_str = str(x)\n    x_len = len(x_str)\n    \n    # calculate the shift amount\n    shift_amount = shift % x_len\n    \n    # shift the digits of the string by shift_amount\n    shifted_str = x_str[-shift_amount:] + x_str[:-shift_amount]\n    \n    # if shift is greater than the length of x, return the reversed string\n    if shift > x_len:\n        return shifted_str[::-1]\n    \n    # return the shifted string\n    return shifted_str"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return ''.join(reversed(x_str))\n    else:\n        return ''.join(x_str[i-shift%len(x_str)] for i in range(shift%len(x_str), len(x_str)+shift%len(x_str)) % len(x_str))"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n\n    # initialize the sum variable to 0\n    total = 0\n\n    # iterate over each character in the string\n    for char in s:\n\n        # if the character is uppercase, add its ASCII code to the total\n        if char.isupper():\n            total += ord(char)\n\n    # return the total sum\n    return total"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def digitSum(s):\n    \"\"\"\n    This function takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n    \"\"\"\n    sum = 0\n    for i in s:\n        if i.isupper():\n            sum += ord(i)\n    return sum"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def digitSum(s):\n    \"\"\"Returns the sum of the upper case characters in s.\"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c)\n    return sum"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def digitSum(s):\n    \"\"\"\n    Task: Write a function that takes a string as input and returns the sum of the upper characters only' ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum = 0\n    for i in s:\n        if i.isupper():\n            sum += ord(i)\n    return sum\n"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def digitSum(s):\n    \"\"\"\n    Task: Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    total = 0\n    for c in s:\n        if c.isupper():\n            total += ord(c)\n    return total"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c)\n    return sum"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def digitSum(s):\n    \"\"\"\n    Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    result = 0\n    for char in s:\n        if char.isupper():\n            result += ord(char)\n    return result"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # Splitting the string to get the number of apples and oranges\n    apple_count = int(s.split()[0])\n    orange_count = int(s.split()[2])\n\n    # Calculating the total number of fruits in the basket\n    total_fruits = apple_count + orange_count\n\n    # Calculating the number of mango fruits in the basket\n    mango_count = total_fruits - apple_count - orange_count\n\n    # Calculating the remaining fruits in the basket\n    remaining_fruits = n - total_fruits\n\n    # Checking if the number of mango fruits is less than or equal to the remaining fruits\n    if mango_count <= remaining_fruits:\n        return mango_count\n    else:\n        return \"Error\""
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    \"\"\"\n    # split the string into apples and oranges\n    apples, oranges = s.split(' and ')\n    \n    # convert the strings to integers\n    apples = int(apples.split()[0])\n    oranges = int(oranges.split()[0])\n    \n    # calculate the number of mango fruits in the basket\n    mangoes = n - apples - oranges\n    \n    return mangoes"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    \"\"\"\n    fruits = s.split()\n    num_apples = int(fruits[0][:-1])\n    num_oranges = int(fruits[1][:-1])\n    num_mangoes = n - num_apples - num_oranges\n    return num_mangoes"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    apples, oranges = map(int, s.split()[0].split('and'))\n    return n - apples - oranges"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    \"\"\"\n    apples, oranges = s.split()\n    apples = int(apples.replace(\"apples\", \"\"))\n    oranges = int(oranges.replace(\"oranges\", \"\"))\n    mangoes = n - apples - oranges\n    return mangoes"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def fruit_distribution(s, n):\n    # Parse the input string to extract the numbers of apples and oranges\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[2])\n\n    # Calculate the number of mangoes that can fit in the basket\n    mangoes = n - apples - oranges\n\n    return mangoes"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\n    # convert the given string to a list of words\n    words = s.split()\n    \n    # extract the apples and oranges from the given string\n    apples = int(words[0])\n    oranges = int(words[2])\n    \n    # calculate the number of mango fruits in the basket\n    mangoes = n - apples - oranges\n    \n    return mangoes"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def fruit_distribution(s,n):\n    # split the string into two parts based on 'and'\n    parts = s.split(' and ')\n    \n    # extract the numbers from the first part\n    numbers = parts[0].split()\n    apples = int(numbers[0])\n    oranges = int(numbers[2])\n    \n    # calculate the number of mangoes in the basket\n    mangoes = n - apples - oranges\n    \n    return mangoes"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    total = 0\n    for fruit in s.split():\n        if fruit.endswith('apples'):\n            total += int(fruit.split()[0])\n        elif fruit.endswith('oranges'):\n            total += int(fruit.split()[0])\n    return n - total - 3*len(s.split())\n"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    Returns the number of mangoes in the fruit basket.\n    \"\"\"\n    apples, oranges = map(int, s.split()[:2])\n    mangoes = n - apples - oranges\n    return mangoes"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pluck(arr):\n    if not arr:\n        return []\n    \n    even_values = [(v, i) for i, v in enumerate(arr) if v % 2 == 0]\n    if not even_values:\n        return []\n    \n    smallest_value, smallest_index = min(even_values)\n    return [smallest_value, smallest_index]"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pluck(arr):\n    if not arr:\n        return []\n    \n    even_values = [node for node in arr if node % 2 == 0]\n    if not even_values:\n        return []\n    \n    smallest_even = min(even_values)\n    smallest_index = arr.index(smallest_even)\n    \n    return [smallest_even, smallest_index]"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pluck(arr):\n    even_values = [v for v in arr if v % 2 == 0]\n    if len(even_values) == 0:\n        return []\n    smallest_value = min(even_values)\n    smallest_index = arr.index(smallest_value)\n    return [smallest_value, smallest_index]"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pluck(arr):\n    if not arr:  # if the array is empty\n        return []\n\n    min_even_val = float('inf')\n    min_even_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0 and val < min_even_val:\n            min_even_val = val\n            min_even_index = i\n\n    if min_even_index == -1:  # if no even values found\n        return []\n\n    return [min_even_val, min_even_index]"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pluck(arr):\n    even_vals = [x for x in arr if x % 2 == 0] # list of even values in arr\n    if not even_vals: # if no even values found, return []\n        return []\n    smallest_val = min(even_vals) # find smallest even value\n    smallest_idx = arr.index(smallest_val) # find index of smallest even value\n    return [smallest_val, smallest_idx] # return as a list [smallest_value, its index]"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    even_values = []\n    smallest_index = None\n    smallest_value = None\n    for i, value in enumerate(arr):\n        if value % 2 == 0:\n            even_values.append((value, i))\n    if len(even_values) > 0:\n        smallest_value, smallest_index = min(even_values)\n    return [smallest_value, smallest_index] if smallest_value is not None else []"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_index = -1\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < smallest_even:\n            smallest_even = arr[i]\n            smallest_index = i\n\n    if smallest_even == float('inf'):\n        return []\n    else:\n        return [smallest_even, smallest_index]"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    even_values = [num for num in arr if num % 2 == 0]\n    if not even_values:\n        return []\n    \n    smallest_value = min(even_values)\n    smallest_indices = [i for i, num in enumerate(arr) if num == smallest_value]\n    smallest_index = min(smallest_indices)\n    \n    return [smallest_value, smallest_index]"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pluck(arr):\n    smallest_even_value = float('inf')\n    smallest_index = -1\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if arr[i] < smallest_even_value:\n                smallest_even_value = arr[i]\n                smallest_index = i\n            elif arr[i] == smallest_even_value and i < smallest_index:\n                smallest_index = i\n    \n    if smallest_index == -1:\n        return []\n    else:\n        return [smallest_even_value, smallest_index]"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pluck(arr):\n    if not arr:\n        return []\n    \n    min_value = arr[0]\n    min_index = 0\n    \n    for i, value in enumerate(arr):\n        if value % 2 == 0 and value < min_value:\n            min_value = value\n            min_index = i\n    \n    return [min_value, min_index]"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def search(lst):\n    freq = {}\n    max_freq = 0\n    max_num = -1\n    for num in lst:\n        if num > 0:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n            if freq[num] > max_freq:\n                max_freq = freq[num]\n                max_num = num\n    return max_num if max_num!= -1 else -1"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def search(lst):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n\n    for num in freq:\n        if num > 0 and freq[num] >= num:\n            return num\n\n    return -1"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def search(lst):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    \n    for num in sorted(freq.keys()):\n        if num > 0 and freq[num] >= num:\n            return num\n    \n    return -1"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def search(lst):\n    freq_dict = {}\n    for num in lst:\n        if num not in freq_dict:\n            freq_dict[num] = 1\n        else:\n            freq_dict[num] += 1\n\n    max_freq = -1\n    max_num = -1\n    for num in freq_dict:\n        if freq_dict[num] > max_freq and num > 0:\n            max_freq = freq_dict[num]\n            max_num = num\n\n    if max_num == -1:\n        return -1\n    else:\n        return max_num"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num > 0:\n            if num not in freq:\n                freq[num] = 1\n            else:\n                freq[num] += 1\n    for num in freq:\n        if freq[num] >= num:\n            return num\n    return -1"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def search(lst):\n    \"\"\"\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    \"\"\"\n    freq = {}\n    max_freq = 0\n    for num in lst:\n        if num > 0:\n            freq[num] = lst.count(num)\n            if freq[num] > max_freq:\n                max_freq = freq[num]\n    for num, count in freq.items():\n        if count >= num and count > max_freq:\n            return num\n    return -1"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def search(lst):\n    max_val = -1\n    max_freq = 0\n    \n    for val in lst:\n        if val > 0 and lst.count(val) >= val:\n            if val > max_val or (val == max_val and lst.count(val) > max_freq):\n                max_val = val\n                max_freq = lst.count(val)\n    \n    return max_val if max_val > 0 else -1"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def search(lst):\n    freq_dict = {}\n    for num in lst:\n        if num > 0:\n            freq_dict[num] = freq_dict.get(num, 0) + 1\n\n    max_freq = max(freq_dict.values())\n    for num, freq in freq_dict.items():\n        if freq >= max_freq:\n            return num\n\n    return -1"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num > 0:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n\n    max_freq = max(freq.values())\n    for num in freq:\n        if freq[num] >= num and freq[num] > max_freq:\n            return num\n    return -1"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    \n    max_freq = -1\n    result = -1\n    \n    for num in lst:\n        if num > 0 and lst.count(num) >= num:\n            if lst.count(num) > max_freq:\n                max_freq = lst.count(num)\n                result = num\n    \n    return result"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) < 2:\n        return lst\n\n    min_val = lst[0]\n    max_val = lst[0]\n    i = 1\n\n    while i < len(lst):\n        if lst[i] < min_val:\n            min_val = lst[i]\n        elif lst[i] > max_val:\n            max_val = lst[i]\n        i += 1\n\n    # create new list with min, max, min, max,...\n    new_lst = [min_val]\n    while len(new_lst) < len(lst):\n        if new_lst[-1] == max_val:\n            new_lst.append(min_val)\n        else:\n            new_lst.append(max_val)\n\n    # replace values in original list with values from new list\n    i = 0\n    while i < len(lst):\n        lst[i] = new_lst[i]\n        i += 1\n\n    return lst"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    sorted_lst = [lst[0]]\n\n    for i in range(1, len(lst)):\n        if sorted_lst[-1] == lst[i]:\n            continue\n\n        if sorted_lst[-1] > lst[i]:\n            sorted_lst.append(sorted_lst[-1])\n            sorted_lst.append(lst[i])\n        else:\n            sorted_lst.append(lst[i])\n\n    return sorted_lst"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) <= 1:\n        return lst\n\n    min_val = min(lst)\n    max_val = max(lst)\n\n    new_lst = []\n    for i in range(len(lst)):\n        if lst[i] == min_val:\n            new_lst.append(min_val)\n            lst.remove(min_val)\n            break\n\n    for i in range(len(lst)):\n        if lst[i] == max_val:\n            new_lst.append(max_val)\n            lst.remove(max_val)\n            break\n\n    new_lst += lst\n    return new_lst"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:  # base case\n        return []\n\n    # find the minimum value and its index in the list\n    min_val = lst[0]\n    min_idx = 0\n    for i in range(len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n            min_idx = i\n\n    # swap minimum value with the first element of the list\n    lst[0], lst[min_idx] = lst[min_idx], lst[0]\n\n    # reverse the list excluding the first element\n    lst[1:] = lst[1:][::-1]\n\n    return lst"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    n = len(lst)\n    if n == 0:\n        return []\n    elif n == 1:\n        return lst\n    else:\n        min_val = min(lst)\n        max_val = max(lst)\n        remaining_lst = [x for x in lst if x!= min_val and x!= max_val]\n        return [min_val] + [max_val] + strange_sort_list(remaining_lst)"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    \"\"\"\n    if len(lst) < 2:\n        return lst\n    \n    # Find minimum value and its index in the list\n    min_val = lst[0]\n    min_idx = 0\n    for i in range(1, len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n            min_idx = i\n    \n    # Move minimum value to first position\n    lst[0], lst[min_idx] = lst[min_idx], lst[0]\n    \n    # Sort remaining list using strange_sort_list\n    strange_sort_list(lst[1:])\n    \n    return lst"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        lst.sort()\n        mid = len(lst) // 2\n        left_half = lst[:mid]\n        right_half = lst[mid:]\n        return strange_sort_list(left_half) + strange_sort_list(right_half)"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) <= 1:\n        return lst\n    \n    min_val = min(lst)\n    max_val = max(lst)\n    \n    # Remove min and max values from the list\n    lst.remove(min_val)\n    lst.remove(max_val)\n    \n    # Sort the remaining values\n    lst = sorted(lst)\n    \n    # Add min and max values to the sorted list\n    lst.insert(0, min_val)\n    lst.append(max_val)\n    \n    return lst"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if not lst:\n        return []\n\n    min_val = min(lst)\n    min_idx = lst.index(min_val)\n\n    lst[0], lst[min_idx] = lst[min_idx], lst[0]\n\n    max_val = max(lst)\n    max_idx = lst.index(max_val)\n\n    lst[-1], lst[max_idx] = lst[max_idx], lst[-1]\n\n    return lst"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    \"\"\"\n    if not lst:\n        return []\n    \n    # Initialize the sorted list with the minimum value\n    sorted_lst = [min(lst)]\n    lst.remove(min(lst))\n    \n    # Sort the remaining integers using the strange order\n    while lst:\n        # Get the maximum value of the remaining integers\n        max_value = max(lst)\n        # Remove the maximum value from the remaining integers\n        lst.remove(max_value)\n        # Get the minimum value of the remaining integers\n        min_value = min(lst)\n        # Remove the minimum value from the remaining integers\n        lst.remove(min_value)\n        # Add the maximum and minimum values to the sorted list\n        sorted_lst.extend([max_value, min_value])\n    \n    return sorted_lst"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # Check if the sum of any two sides is greater than the third side\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    # Round the area to 2 decimal points\n    area = round(area, 2)\n    \n    return area"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    \n    # Check if three sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter of the triangle\n    s = (a + b + c) / 2\n    \n    # Calculate the area of the triangle using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    # Round the area to 2 decimal points and return it\n    return round(area, 2)"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a+b>c and a+c>b and b+c>a:\n        s = (a+b+c)/2\n        area = math.sqrt(s*(s-a)*(s-b)*(s-c))\n        return round(area, 2)\n    else:\n        return -1"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a+b>c and b+c>a and c+a>b:\n        s = (a+b+c)/2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area, 2)\n    else:\n        return -1"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n\n    # Check if the three sides form a valid triangle\n    if a+b>c and b+c>a and c+a>b:\n        # Calculate the semi-perimeter of the triangle\n        s = (a + b + c) / 2\n        \n        # Calculate the area of the triangle using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        \n        # Round the area to 2 decimal points and return it\n        return round(area, 2)\n    else:\n        return -1"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a+b>c and a+c>b and b+c>a:\n        s = (a+b+c)/2\n        area = round(math.sqrt(s*(s-a)*(s-b)*(s-c)), 2)\n        return area\n    else:\n        return -1"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and b + c > a and a + c > b:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def will_it_fly(q, w):\n    # Check if q is a palindrome\n    if q == q[::-1]:\n        # Check if the sum of q's elements is less than or equal to w\n        if sum(q) <= w:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    \"\"\"\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n\n    if q == q[::-1]: # checking if the list is palindromic\n        if sum(q) <= w: # checking if sum of elements is less than or equal to maximum possible weight\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def will_it_fly(q,w):\n    # check if the object is palindromic and its sum is less than or equal to the maximum possible weight\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def will_it_fly(q, w):\n    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def will_it_fly(q,w):\n    \"\"\"\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    \"\"\"\n    if is_palindrome(q) and sum(q) <= w:\n        return True\n    else:\n        return False\n    \ndef is_palindrome(q):\n    \"\"\"\n    Helper function to check if a list is palindromic.\n    \"\"\"\n    return q == q[::-1]\n"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def will_it_fly(q, w):\n    # Check if the list is balanced\n    if q == q[::-1]:\n        # Check if the sum of the elements is less than or equal to the maximum weight\n        if sum(q) <= w:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def will_it_fly(q, w):\n    # Check if q is balanced (a palindrome)\n    if q == q[::-1]:\n        # Calculate the sum of elements in q\n        s = sum(q)\n        # Check if s is less than or equal to w\n        if s <= w:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def will_it_fly(q,w):\n    # Create a string from the list to check if it's a palindrome\n    s = ''.join([str(x) for x in q])\n    if s == s[::-1]:\n        # Check if the sum of elements is less than or equal the maximum possible weight\n        if sum(q) <= w:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def will_it_fly(q, w):\n    # Check if the list is balanced\n    if q == q[::-1]:\n        # Check if the sum of the elements is less than or equal to the maximum possible weight\n        if sum(q) <= w:\n            return True\n    return False"
    },
    {
        "number": 73,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 0\n\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i+1][j-1]\n            else:\n                dp[i][j] = min(dp[i+1][j], dp[i][j-1]) + 1\n\n    return dp[0][n-1]"
    },
    {
        "number": 73,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Initialize the count variable to 0\n    count = 0\n\n    # Loop through the array and count the number of inversions (swaps required to make the array palindromic)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n\n    # If the array has an odd number of elements, we need to divide the inversions by 2\n    if len(arr) % 2 == 1:\n        count //= 2\n\n    return count"
    },
    {
        "number": 73,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 73,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 73,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 73,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    # iterate over the array and find the number of elements that need to be changed\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    # if all the elements are already palindromic, then return 0\n    if count == 0:\n        return 0\n    else:\n        # else return the minimum number of elements that need to be changed\n        return count"
    },
    {
        "number": 73,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    count = 0\n    \n    for i in range(n // 2):\n        if arr[i]!= arr[n - 1 - i]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 73,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    count = 0\n\n    # Check for odd-length palindromes\n    for i in range(n // 2):\n        if arr[i]!= arr[n - i - 1]:\n            count += 1\n\n    # Check for even-length palindromes\n    for i in range(n // 2 - 1):\n        if arr[i]!= arr[n - i - 2]:\n            count += 1\n\n    return count"
    },
    {
        "number": 73,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i]!= arr[n-i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 73,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i]!= arr[n-1-i]:\n            count += 1\n    return count"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\n    # convert the lists to sets to remove duplicates and then back to lists\n    lst1 = list(set(lst1))\n    lst2 = list(set(lst2))\n\n    # sort the lists by length\n    lst1.sort(key=len)\n    lst2.sort(key=len)\n\n    # if the two lists have the same length, return the first list\n    if len(lst1) == len(lst2):\n        return lst1\n\n    # if the two lists have different lengths, return the list with the total number of chars in the all strings of the list less than the other list\n    else:\n        total_chars = sum([len(s) for s in lst1])\n        for s in lst2:\n            if len(s) >= total_chars:\n                return lst1\n        return lst1"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def total_match(lst1, lst2):\n    \"\"\"\n    Returns the list that has total number of chars in the all strings of the list less than the other list.\n    If the two lists have the same number of chars, returns the first list.\n    \"\"\"\n    if len(lst1) < len(lst2):\n        return lst1\n    elif len(lst1) > len(lst2):\n        return lst2\n    else:\n        total_chars = sum(len(s) for s in lst1)\n        other_total_chars = sum(len(s) for s in lst2)\n        if total_chars < other_total_chars:\n            return lst1\n        elif total_chars > other_total_chars:\n            return lst2\n        else:\n            return lst1"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def total_match(lst1, lst2):\n    if len(lst1) == 0 and len(lst2) == 0:\n        return []\n    elif len(lst1) == 0:\n        return lst2\n    elif len(lst2) == 0:\n        return lst1\n    else:\n        total_lst1 = 0\n        total_lst2 = 0\n        for i in range(len(lst1)):\n            total_lst1 += len(lst1[i])\n        for i in range(len(lst2)):\n            total_lst2 += len(lst2[i])\n        if total_lst1 < total_lst2:\n            return lst1\n        elif total_lst1 > total_lst2:\n            return lst2\n        else:\n            return lst1"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def total_match(lst1, lst2):\n    if not lst1 and not lst2:  # if both lists are empty, return an empty list\n        return []\n    elif not lst1 or not lst2:  # if one of the lists is empty, return the other list\n        return lst1 or lst2\n    else:  # if both lists are not empty, find the list with less total number of chars\n        if sum(len(s) for s in lst1) < sum(len(s) for s in lst2):\n            return lst1\n        elif sum(len(s) for s in lst1) > sum(len(s) for s in lst2):\n            return lst2\n        else:  # if both lists have the same total number of chars, return the first list\n            return lst1"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def total_match(lst1, lst2):\n    # if either list is empty, return the other list\n    if not lst1:\n        return lst2\n    if not lst2:\n        return lst1\n\n    # calculate the total number of chars in each list\n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n\n    # if the two lists have the same number of chars, return the first list\n    if total1 == total2:\n        return lst1\n\n    # otherwise, return the list with fewer total chars\n    return lst1 if total1 < total2 else lst2"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def total_match(lst1, lst2):\n    if len(lst1) == len(lst2):\n        return lst1\n    elif sum([len(i) for i in lst1]) < sum([len(i) for i in lst2]):\n        return lst1\n    else:\n        return lst2\n\nprint(total_match([], [])) # []\nprint(total_match(['hi', 'admin'], ['hI', 'Hi'])) # ['hI', 'Hi']\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])) # ['hi', 'admin']\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])) # ['hI', 'hi', 'hi']\nprint(total_match(['4'], ['1', '2', '3', '4', '5'])) # ['4']\n"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def total_match(lst1, lst2):\n    if not lst1 or not lst2:\n        return []\n\n    min_len = min(len(s) for s in lst1 + lst2)\n    lst1 = [s for s in lst1 if len(s) < min_len]\n    lst2 = [s for s in lst2 if len(s) < min_len]\n\n    if len(lst1) == len(lst2) == 0:\n        return []\n    elif len(lst1) == len(lst2) == 1:\n        return lst1 if lst1[0] < lst2[0] else lst2\n    else:\n        return lst1 if sum(len(s) for s in lst1) < sum(len(s) for s in lst2) else lst2"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def total_match(lst1, lst2):\n    # Initialize variables\n    count1 = 0\n    count2 = 0\n    # Find the length of the shortest string in the two lists\n    shortest_length = min(len(s) for s in lst1 + lst2)\n    # Find the count of chars in the strings that are less than the shortest string\n    for s in lst1:\n        if len(s) < shortest_length:\n            count1 += len(s)\n    for s in lst2:\n        if len(s) < shortest_length:\n            count2 += len(s)\n    # Return the list with total count of chars less than the shortest string\n    if count1 < count2:\n        return lst1\n    elif count2 < count1:\n        return lst2\n    else:\n        return lst1"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def total_match(lst1, lst2):\n    if len(lst1) == 0:\n        return lst2\n    elif len(lst2) == 0:\n        return lst1\n    else:\n        total1 = sum(len(s) for s in lst1)\n        total2 = sum(len(s) for s in lst2)\n        if total1 < total2:\n            return lst1\n        elif total2 < total1:\n            return lst2\n        else:\n            return lst1"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n\n    if len(lst1) > len(lst2):\n        lst1, lst2 = lst2, lst1\n\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    primes = []\n    for i in range(2, a):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            primes.append(i)\n            if len(primes) == 3:\n                break\n    if len(primes) == 3:\n        if a == 2*primes[0]*primes[1] or a == 3*primes[0]*primes[1]:\n            return True\n    return False"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    count = 0\n    for i in range(len(prime_numbers)):\n        if prime_numbers[i] > a // prime_numbers[i]:\n            break\n        if a % prime_numbers[i] == 0:\n            count += 1\n    if count == 3:\n        return True\n    else:\n        return False"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Returns True if a is the multiplication of 3 prime numbers, False otherwise.\"\"\"\n    # Check if a is less than 100\n    if a >= 100:\n        return False\n    \n    # Check if a is prime\n    def is_prime(n):\n        \"\"\"Returns True if n is a prime number, False otherwise.\"\"\"\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Check if a is the multiplication of 3 prime numbers\n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n            if count == 3:\n                return True\n    return False"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_multiply_prime(a):\n    \"\"\"\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    if a < 100:\n        if a % primes[0] == 0 and a % primes[1] == 0 and a % primes[2] == 0:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    count = 0\n    for i in range(len(prime_numbers)):\n        if a == prime_numbers[i]:\n            count += 1\n            if count == 3:\n                return True\n        elif a % prime_numbers[i] == 0:\n            return False\n        else:\n            continue\n    return False"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    # Helper function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Check if a is a multiple of 3 prime numbers\n    if is_prime(a) and is_prime(a // 2) and is_prime(a // 3):\n        return True\n    elif is_prime(a - 1) and is_prime(a // 2 - 1) and is_prime(a // 3 - 1):\n        return True\n    elif is_prime(a + 1) and is_prime(a // 2 + 1) and is_prime(a // 3 + 1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        # Check if a is divisible by 2 and 3\n        if a % 2 == 0 or a % 3 == 0:\n            return False\n        \n        # Check if a is divisible by 4, 6, 8, 9\n        if a % 4 == 0 or a % 6 == 0 or a % 8 == 0 or a % 9 == 0:\n            return False\n        \n        # Check if a is divisible by 5\n        if a % 5 == 0:\n            return False\n        \n        # Check if a is divisible by 7\n        if a % 7 == 0:\n            return False\n        \n        # If a passes all checks, it is the multiplication of 3 prime numbers\n        return True\n    else:\n        return False"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is prime, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_multiply_prime(a):\n    \"\"\"Return True if a is the multiplication of 3 prime numbers, False otherwise.\"\"\"\n    if not all(is_prime(n) for n in (a // 2, a // 3, a // 5)):\n        return False\n    if not all(is_prime(n) for n in (a // 4, a // 6, a // 8)):\n        return False\n    if not all(is_prime(n) for n in (a // 7,)):\n        return False\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is a prime number, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    \"\"\"Return True if a is the multiplication of 3 prime numbers, False otherwise.\"\"\"\n    if a < 100:\n        primes = [i for i in range(2, a) if is_prime(i)]\n        if len(primes) < 3:\n            return False\n        for i in range(len(primes) - 2):\n            for j in range(i + 1, len(primes) - 1):\n                for k in range(j + 1, len(primes)):\n                    if primes[i] * primes[j] * primes[k] == a:\n                        return True\n    return False"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a % 2 == 0 or a % 3 == 0 or a % 5 == 0 or a % 7 == 0 or a % 11 == 0 or a % 13 == 0 or a % 17 == 0 or a % 19 == 0 or a % 23 == 0 or a % 29 == 0 or a % 31 == 0 or a % 37 == 0 or a % 41 == 0 or a % 43 == 0 or a % 47 == 0 or a % 53 == 0 or a % 59 == 0 or a % 61 == 0 or a % 67 == 0 or a % 71 == 0 or a % 73 == 0 or a % 79 == 0 or a % 83 == 0 or a % 89 == 0 or a % 97 == 0:\n        return False\n    \n    if a % 2 == 0 or a % 3 == 0 or a % 5 == 0 or a % 7 == 0 or a % 11 == 0 or a % 13 == 0 or a % 17 == 0 or a % 19 == 0 or a % 23 == 0 or a % 29 == 0 or a % 31 == 0 or a % 37 == 0 or a % 41 == 0 or a % 43 == 0 or a % 47 == 0 or a % 53 == 0 or a % 59 == 0 or a % 61 == 0 or a % 67 == 0 or a % 71 == 0 or a % 73 == 0 or a % 79 == 0 or a % 83 == 0 or a % 89 == 0 or a % 97 == 0:\n        return False\n    \n    if a % 2 == 0 or a % 3 == 0 or a % 5 == 0 or a % 7 == 0 or a % 11 == 0 or a % 13 == 0 or a % 17 == 0 or a % 19 == 0 or a % 23 == 0 or a % 29 == 0 or a % 31 == 0 or a % 37 == 0 or a % 41 == 0 or a % 43 == 0 or a % 47 == 0 or a % 53 == 0 or a % 59 == 0 or a % 61 == 0 or a % 67 == 0 or a % 71 == 0 or a % 73 == 0 or a % 79 == 0 or a % 83 == 0 or a % 89 == 0 or a % 97 == 0:\n        return False\n    \n    return True"
    },
    {
        "number": 76,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int(log(x, n))=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return n**int(x/n) == x"
    },
    {
        "number": 76,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int(log(x, n))=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if n ** int(x ** (1/n)) == x:\n        return True\n    else:\n        return False"
    },
    {
        "number": 76,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_simple_power(x, n):\n    \"\"\"\n    This function checks if a number x is a simple power of n.\n    A number is a simple power of n if n**int(log(x)/log(n)) = x.\n    \"\"\"\n    if x <= 1:\n        return False\n    if n == 1:\n        return True\n    for i in range(2, int(x**0.5) + 1):\n        if x % i == 0:\n            return False\n    return n**int(x**0.5) == x"
    },
    {
        "number": 76,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int(log(x, n))=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x < n:\n        return False\n    log_x_n = int(round(log(x, n), 0))\n    if x == n**log_x_n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 76,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int(log(x, n))=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if n**int(log(x, n)) == x:\n        return True\n    else:\n        return False"
    },
    {
        "number": 76,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_simple_power(x, n):\n    \"\"\"\n    Returns True if a number x is a simple power of n and False in other cases.\n    x is a simple power of n if n**int(log(x, n)) = x\n    \"\"\"\n    if x < n:\n        return False\n    elif x == n:\n        return True\n    else:\n        return n**int(x/n) == x"
    },
    {
        "number": 76,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == 0:\n        return False\n    if x == 1:\n        return True\n    \n    for i in range(2, int(x**(1/n))+1):\n        if x == n**i:\n            return True\n    \n    return False"
    },
    {
        "number": 76,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n\n    # Check if n is equal to 1, which is not a simple power of n.\n    if n == 1:\n        return False\n\n    # Check if x is a simple power of n.\n    if x % n == 0 and x // n**int(x/n) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 76,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int(log(x)/log(n))=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == 1:\n        return False\n    elif n == 1:\n        return True\n    elif n > x:\n        return False\n    else:\n        return x == n**int(log(x)/log(n))"
    },
    {
        "number": 76,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_simple_power(x, n):\n    \"\"\"\n    Returns True if x is a simple power of n and False otherwise.\n    \"\"\"\n    if n == 1:\n        return False\n    else:\n        return x == n ** int(x ** (1/n))"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    \"\"\"\n    # Check if a is 0, if yes then it is a cube\n    if a == 0:\n        return True\n    # Calculate the cube root of a\n    cube_root = a**(1/3)\n    # Check if cube_root is an integer\n    if cube_root.is_integer():\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    cube_root = int(a**(1/3))\n    return cube_root**3 == a"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    cube = int(a**(1/3))\n    if cube**3 == a:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    root = a ** (1/3)\n    return root.is_integer()"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a == 0 or a == 1:\n        return True\n    elif a < 0:\n        a = -a\n    root = int(a ** 0.5)\n    return root ** 3 == a"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    return a**3 > 0 and a**(1/3) == int(a**(1/3))\n"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    cube_root = int(a**(1/3))\n    return cube_root**3 == a"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    return a!= 0 and a**3 % a == 0"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def iscube(a):\n    '''\n    This function takes an integer a and returns True\n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    '''\n    if a == 0 or a == 1:\n        return True\n    else:\n        i = 2\n        while i*i <= abs(a):\n            if a % i == 0:\n                return False\n            i += 1\n        return a**3 == abs(a)"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n\n    # convert a to positive to check for cube root\n    if a < 0:\n        a = -a\n\n    # check for cube root of a\n    for i in range(a//2, 0, -1):\n        if a == i**3:\n            return True\n\n    # if no cube root found, return False\n    return False"
    },
    {
        "number": 78,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_prime(num):\n    \"\"\"Function to check whether a number is prime or not\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef hex_key(num):\n    \"\"\"Function to count the number of hexadecimal digits that are primes\"\"\"\n    count = 0\n    for digit in num:\n        if is_prime(int(digit, 16)):\n            count += 1\n    return count"
    },
    {
        "number": 78,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    count = 0\n    for digit in num:\n        if is_prime(int(digit, 16)):\n            count += 1\n    return count"
    },
    {
        "number": 78,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes.\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Define a list of primes\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    # Count the number of primes in the input hexadecimal number\n    count = 0\n    for digit in num:\n        if int(digit, 16) in primes:\n            count += 1\n    # Return the count\n    return count"
    },
    {
        "number": 78,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is a prime number, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    \"\"\"Return the number of hexadecimal digits that are primes.\"\"\"\n    count = 0\n    for char in num:\n        if char in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']:\n            if is_prime(int(char, 16)):\n                count += 1\n    return count"
    },
    {
        "number": 78,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_prime(num):\n    if num <= 1:\n        return False\n    elif num <= 3:\n        return True\n    elif num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i*i <= num:\n        if num % i == 0 or num % (i+2) == 0:\n            return False\n        i += 6\n    return True\n\ndef hex_key(num):\n    count = 0\n    for digit in num:\n        if digit in ['2', '3', '5', '7', 'B', 'D']:\n            if is_prime(int(digit, 16)):\n                count += 1\n    return count"
    },
    {
        "number": 78,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Initialize count variable to 0\n    count = 0\n    \n    # Loop through each character in the hexadecimal number\n    for char in num:\n        # Convert the character to its decimal value\n        decimal = int(char, 16)\n        \n        # Check if the decimal value is prime\n        if decimal in (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47):\n            count += 1\n    \n    # Return the count of prime hexadecimal digits\n    return count"
    },
    {
        "number": 78,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_prime(num):\n    \"\"\"Function to check if a number is prime\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**(0.5))+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    \"\"\"Function to count the number of primes in a hexadecimal number\"\"\"\n    count = 0\n    for i in num:\n        if i in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']:\n            if is_prime(int(i, 16)):\n                count += 1\n        else:\n            return \"Invalid input\"\n    return count"
    },
    {
        "number": 78,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def hex_key(num):\n    \"\"\"\n    You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes.\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    \"\"\"\n    count = 0\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for char in num:\n        if char.upper() in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']:\n            dec_num = int(char, 16)\n            if dec_num in primes:\n                count += 1\n    return count"
    },
    {
        "number": 78,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_prime(n):\n    \"\"\"Function to check if a number is prime\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    \"\"\"Function to count the number of hexadecimal digits that are primes\"\"\"\n    count = 0\n    for digit in num:\n        if digit in [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]:\n            if is_prime(int(digit, 16)):\n                count += 1\n    return count"
    },
    {
        "number": 78,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    count = 0\n    for digit in num:\n        if digit in ['2', '3', '5', '7', 'B', 'D']:\n            if is_prime(int(digit, 16)):\n                count += 1\n    return count"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # convert to binary and remove '0b' prefix\n    binary = '0' * (8 - len(binary)) + binary  # pad with leading zeros to 8 bits\n    binary = 'db' + binary + 'db'  # add extra characters to mark start and end of string\n    return binary"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"\n    Convert a decimal number to binary format.\n\n    Args:\n    decimal (int): A decimal number.\n\n    Returns:\n    str: A string with each character representing a binary number.\n\n    \"\"\"\n    if decimal == 0:\n        return \"db0db\"\n    binary = \"\"\n    while decimal > 0:\n        remainder = decimal % 2\n        binary = str(remainder) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\""
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"Converts a decimal number to binary.\"\"\"\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return 'db' + binary + 'db'"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"\n    Converts a decimal number to binary format.\n\n    :param decimal: The decimal number to convert.\n    :return: A string representing the binary number.\n    \"\"\"\n\n    # Check if decimal is zero\n    if decimal == 0:\n        return \"db0db\"\n\n    # Convert decimal to binary\n    binary = \"\"\n    while decimal > 0:\n        remainder = decimal % 2\n        binary = str(remainder) + binary\n        decimal //= 2\n\n    # Add extra characters to the beginning and end of the binary string\n    return \"db\" + binary + \"db\""
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return \"db\" + binary + \"db\""
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        remainder = decimal % 2\n        binary = str(remainder) + binary\n        decimal = decimal // 2\n    binary = \"db\" + binary + \"db\"\n    return binary"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = bin(decimal)[2:] # Convert decimal to binary and remove the '0b' prefix\n    return 'db' + binary + 'db' # Add 'db' at the beginning and end of the string"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"Converts decimal to binary format.\"\"\"\n    binary = bin(decimal)[2:]  # Converts decimal to binary, excluding the '0b' prefix.\n    return \"db{}db\".format(binary)  # Adds 'db' prefix and suffix."
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\n    # Convert decimal to binary and split into a list of digits\n    binary_digits = bin(decimal)[2:]\n    binary_digits = [int(digit) for digit in binary_digits]\n\n    # Pad the binary digits with leading zeros to make the length a multiple of 4\n    while len(binary_digits) % 4!= 0:\n        binary_digits.insert(0, 0)\n\n    # Convert the binary digits into a list of binary strings of length 4\n    binary_strings = [\"\".join([str(digit) for digit in binary_digits[i:i+4]]) for i in range(0, len(binary_digits), 4)]\n\n    # Join the binary strings into a single string with 'db' prefix and 'db' suffix\n    binary = \"db\" + \"\".join(binary_strings) + \"db\"\n\n    return binary"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    n = len(s)\n    if n < 3:\n        return False\n    seen = set()\n    for i in range(0, n, 3):\n        if s[i:i+3] in seen:\n            return False\n        seen.add(s[i:i+3])\n    return True"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s)-2, 3):\n        if s[i] == s[i+1] and s[i] == s[i+2]:\n            return False\n    return True"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_happy(s):\n    \"\"\"\n    Check if a string is happy or not.\n    \"\"\"\n    # check if string length is at least 3\n    if len(s) < 3:\n        return False\n\n    # check if every 3 consecutive letters are distinct\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n\n    # if we reach this point, the string is happy\n    return True"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_happy(s):\n    \"\"\"\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    \"\"\"\n    if len(s) < 3:\n        return False\n\n    s = set(s)  # converting string to set to remove duplicates\n    count = 0\n\n    while len(s) > 1:\n        s = {s[i:i+3] for i in range(0, len(s), 3)}  # grouping consecutive letters to form substrings\n\n        if len(s) == 1:\n            return False\n\n        count += 1\n\n    return count > 1  # string is happy if count is greater than 1"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_happy(s):\n    \"\"\"\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:  # If the length of the string is less than 3, it is not happy\n        return False\n    \n    s_set = set(s)  # Convert the string to a set to remove duplicates\n    for i in range(len(s) - 2):\n        if s[i:i+3] in s_set:\n            return False  # If there is a consecutive set of 3 letters in the string, it is not happy\n        \n    return True  # If the string is happy"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    \n    s = set(s)\n    for i in range(len(s) - 2):\n        if s[i:i+3] == set(s[i:i+3]):\n            return False\n    \n    return True"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    \n    # Check if the length of the string is at least 3\n    if len(s) < 3:\n        return False\n    \n    # Check if every 3 consecutive letters are distinct\n    for i in range(0, len(s)-2, 3):\n        if s[i:i+3] in s[i+3:]:\n            return False\n    \n    return True"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_happy(s):\n    \"\"\"\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n\n    # Convert the string to a set to get unique characters\n    unique_chars = set(s)\n\n    # Check if the length of the set is less than or equal to 3\n    if len(unique_chars) <= 3:\n        return False\n\n    # Check if every 3 consecutive letters are distinct\n    for i in range(len(s) - 2):\n        if s[i:i+3] in unique_chars:\n            unique_chars.remove(s[i:i+3])\n        else:\n            return False\n\n    return True"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    s = s[::-1]\n    for i in range(0, len(s), 3):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    \n    if len(s) < 3:\n        return False\n    \n    seen = set()\n    for i in range(len(s)-2):\n        if s[i:i+3] in seen:\n            return False\n        seen.add(s[i:i+3])\n    \n    return True"
    },
    {
        "number": 81,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n                 GPA       |    Letter grade\n                  4.0                A+\n                > 3.7                A \n                 > 3.3                A- \n                > 3.0                B+\n                 > 2.7                B \n                 > 2.3                B-\n                 > 2.0                C+\n                 > 1.7                C\n                 > 1.3                C-\n                 > 1.0                D+ \n                 > 0.7                D \n                 > 0.0                D-\n                  0.0                E\n    \"\"\"\n    letter_grades = []\n    for g in grades:\n        if g == 4.0:\n            letter_grades.append('A+')\n        elif g >= 3.7:\n            letter_grades.append('A')\n        elif g >= 3.3:\n            letter_grades.append('A-')\n        elif g >= 3.0:\n            letter_grades.append('B+')\n        elif g >= 2.7:\n            letter_grades.append('B')\n        elif g >= 2.3:\n            letter_grades.append('B-')\n        elif g >= 2.0:\n            letter_grades.append('C+')\n        elif g >= 1.7:\n            letter_grades.append('C')\n        elif g >= 1.3:\n            letter_grades.append('C-')\n        elif g >= 1.0:\n            letter_grades.append('D+')\n        elif g >= 0.7:\n            letter_grades.append('D')\n        elif g >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"
    },
    {
        "number": 81,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n\n              GPA       |   Letter grade\n                  4.0          A+\n                > 3.7          A \n                > 3.3          A- \n                > 3.0          B+\n                > 2.7          B \n                > 2.3          B-\n                > 2.0          C+\n                > 1.7          C\n                > 1.3          C-\n                > 1.0          D+ \n                > 0.7          D \n                > 0.0          D-\n                  0.0          E\n    \n\n    Example:\n    numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    \n    return letter_grades"
    },
    {
        "number": 81,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n                 GPA     |   Letter grade\n                    4.0           A+\n                  > 3.7           A \n                  > 3.3           A- \n                  > 3.0           B+\n                  > 2.7           B \n                  > 2.3           B-\n                  > 2.0           C+\n                  > 1.7           C\n                  > 1.3           C-\n                  > 1.0           D+ \n                  > 0.7           D \n                  > 0.0           D-\n                    0.0           E\n    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append(\"A+\")\n        elif grade >= 3.7:\n            letter_grades.append(\"A\")\n        elif grade >= 3.3:\n            letter_grades.append(\"A-\")\n        elif grade >= 3.0:\n            letter_grades.append(\"B+\")\n        elif grade >= 2.7:\n            letter_grades.append(\"B\")\n        elif grade >= 2.3:\n            letter_grades.append(\"B-\")\n        elif grade >= 2.0:\n            letter_grades.append(\"C+\")\n        elif grade >= 1.7:\n            letter_grades.append(\"C\")\n        elif grade >= 1.3:\n            letter_grades.append(\"C-\")\n        elif grade >= 1.0:\n            letter_grades.append(\"D+\")\n        elif grade >= 0.7:\n            letter_grades.append(\"D\")\n        else:\n            letter_grades.append(\"D-\")\n    return letter_grades"
    },
    {
        "number": 81,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n         > 3.3                A- \n         > 3.0                B+\n         > 2.7                B \n         > 2.3                B-\n         > 2.0                C+\n         > 1.7                C\n         > 1.3                C-\n         > 1.0                D+ \n         > 0.7                D \n         > 0.0                D-\n              0.0                E\n\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"
    },
    {
        "number": 81,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n                 GPA       |    Letter grade\n                  4.0                A+\n                > 3.7                A \n                > 3.3                A- \n                > 3.0                B+\n                > 2.7                B \n                > 2.3                B-\n                > 2.0                C+\n                > 1.7                C\n                > 1.3                C-\n                > 1.0                D+ \n                > 0.7                D \n                > 0.0                D-\n                  0.0                E\n    \n    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"
    },
    {
        "number": 81,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n         > 3.3                A- \n         > 3.0                B+\n         > 2.7                B \n         > 2.3                B-\n         > 2.0                C+\n         > 1.7                C\n         > 1.3                C-\n         > 1.0                D+ \n         > 0.7                D \n         > 0.0                D-\n              0.0                E\n\n    Example:\n    numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades"
    },
    {
        "number": 81,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n               GPA       |       Letter grade\n                4.0              A+\n              > 3.7              A \n              > 3.3              A- \n              > 3.0              B+\n              > 2.7              B \n              > 2.3              B-\n              > 2.0              C+\n              > 1.7              C\n              > 1.3              C-\n              > 1.0              D+ \n              > 0.7              D \n              > 0.0              D-\n                0.0              E\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"
    },
    {
        "number": 81,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n                 GPA       |    Letter grade\n                  4.0                A+\n                > 3.7                A \n                > 3.3                A- \n                > 3.0                B+\n                > 2.7                B \n                > 2.3                B-\n                > 2.0                C+\n                > 1.7                C\n                > 1.3                C-\n                > 1.0                D+ \n                > 0.7                D \n                > 0.0                D-\n                  0.0                E\n\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n\n    return letter_grades"
    },
    {
        "number": 81,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n                 GPA       |       Letter grade\n                  4.0              A+\n                > 3.7              A \n                 > 3.3             A- \n                > 3.0              B+\n                 > 2.7              B \n                 > 2.3             B-\n                > 2.0              C+\n                 > 1.7              C\n                 > 1.3             C-\n                > 1.0              D+ \n                 > 0.7              D \n                 > 0.0             D-\n                  0.0              E\n    \"\"\"\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append(\"A+\")\n        elif gpa >= 3.7:\n            letter_grades.append(\"A\")\n        elif gpa >= 3.3:\n            letter_grades.append(\"A-\")\n        elif gpa >= 3.0:\n            letter_grades.append(\"B+\")\n        elif gpa >= 2.7:\n            letter_grades.append(\"B\")\n        elif gpa >= 2.3:\n            letter_grades.append(\"B-\")\n        elif gpa >= 2.0:\n            letter_grades.append(\"C+\")\n        elif gpa >= 1.7:\n            letter_grades.append(\"C\")\n        elif gpa >= 1.3:\n            letter_grades.append(\"C-\")\n        elif gpa >= 1.0:\n            letter_grades.append(\"D+\")\n        elif gpa >= 0.7:\n            letter_grades.append(\"D\")\n        else:\n            letter_grades.append(\"D-\")\n    return letter_grades"
    },
    {
        "number": 81,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n                 GPA       |       Letter grade\n                  4.0          A+\n                > 3.7          A \n                > 3.3          A- \n                > 3.0          B+\n                > 2.7          B \n                > 2.3          B-\n                > 2.0          C+\n                > 1.7          C\n                > 1.3          C-\n                > 1.0          D+ \n                > 0.7          D \n                > 0.0          D-\n                  0.0          E\n    \n    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\"\"\"\n    if len(string) == 1:\n        return True\n    for i in range(2, int(len(string)**0.5)+1):\n        if len(string) % i == 0:\n            return False\n    return True"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\"\"\"\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_prime(n):\n    \"\"\"Returns True if n is prime, False otherwise\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\"\"\"\n    if is_prime(len(string)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is prime, False otherwise\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Return True if the length of the string is a prime number, False otherwise\"\"\"\n    return is_prime(len(string))"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\"\"\"\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\"\"\"\n    return is_prime(len(string))"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\"\"\"\n    return is_prime(len(string))"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_prime(n):\n    \"\"\"Function to check if a number is prime\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\"\"\"\n    if is_prime(len(string)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_prime(n):\n    \"\"\"Function to check if a number is prime or not\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Function to check if the length of a string is a prime number\"\"\"\n    if is_prime(len(string)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_prime(n):\n    \"\"\"Function to check if a number is prime or not\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Function to check if the length of a string is prime\"\"\"\n    length = len(string)\n    return is_prime(length)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        s = str(i)\n        if s.startswith('1') or s.endswith('1'):\n            count += 1\n    return count"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def starts_one_ends(n):\n    count = 0\n    for num in range(1, 10**n):\n        if num % 10 == 1 or num % 10**(n-1) == 1:\n            count += 1\n    return count"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binary = bin(N)[2:]  # convert to binary string and remove '0b' prefix\n    total = sum(int(digit) for digit in binary)  # sum the digits\n    return bin(total)[2:]  # convert total back to binary string and remove '0b' prefix"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Convert the integer to binary\n    binary = bin(N)[2:]\n    # Calculate the sum of digits in the binary number\n    total_sum = sum(int(digit) for digit in binary)\n    # Return the binary string with leading zeros\n    return '{:0{}b}'.format(total_sum, len(binary))"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solve(N):\n    \"\"\"\n    Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binary = bin(N)[2:] # convert integer to binary string\n    return sum(int(digit) for digit in binary) # sum of binary digits\n"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    # Convert N to binary and remove the \"0b\" prefix\n    binary_str = bin(N)[2:]\n    # Compute the sum of digits\n    digit_sum = sum(int(d) for d in binary_str)\n    # Convert the digit sum back to binary and return it as a string\n    return bin(digit_sum)[2:]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # convert the number to binary\n    binary_num = bin(N)[2:]\n    # initialize the sum of digits to 0\n    digit_sum = 0\n    \n    # loop through each digit in the binary number\n    for digit in binary_num:\n        # add the value of the digit to the sum of digits\n        digit_sum += int(digit)\n    \n    # return the sum of digits as a binary number\n    return bin(digit_sum)[2:]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binary = bin(N)[2:]\n    return str(sum(int(digit) for digit in binary))"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binary = bin(N)[2:]\n    sum = 0\n    for digit in binary:\n        sum += int(digit)\n    return bin(sum)[2:]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    binary = bin(N)[2:]\n    sum_of_digits = sum(int(digit) for digit in binary)\n    \n    return str(sum_of_digits)"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Convert the integer to binary string\n    binary_str = bin(N)[2:]\n    \n    # Calculate the sum of digits in binary\n    sum_of_digits = sum(int(digit) for digit in binary_str)\n    \n    # Return the sum of digits as a binary string\n    return bin(sum_of_digits)[2:]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Convert N to binary string\n    binary_str = bin(N)[2:]\n    # Initialize the sum of digits to 0\n    digit_sum = 0\n    # Iterate over each digit in the binary string\n    for digit in binary_str:\n        # If the digit is a 1, add 1 to the sum\n        if digit == \"1\":\n            digit_sum += 1\n    # Return the binary string of the sum of digits\n    return bin(digit_sum)[2:]"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    result = 0\n    for i in range(len(lst)):\n        if i % 2!= 0 and lst[i] % 2 == 0:\n            result += lst[i]\n    return result"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n    Args:\n        lst: list of integers\n\n    Returns:\n        int: sum of even elements that are at odd indices\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Args:\n        lst (list): A non-empty list of integers.\n\n    Returns:\n        int: The sum of even elements at odd indices.\n\n    Examples:\n        >>> add([4, 2, 6, 7])\n        2\n    \"\"\"\n    even_sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            even_sum += lst[i]\n    return even_sum"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        int: The sum of the even elements at odd indices of lst.\n\n    Examples:\n        >>> add([4, 2, 6, 7])\n        2\n    \"\"\"\n    total = 0\n    for i in range(len(lst)):\n        if i % 2!= 0:\n            if lst[i] % 2 == 0:\n                total += lst[i]\n    return total\n"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    result = 0\n    for i in range(len(lst)):\n        if i % 2!= 0:\n            if lst[i] % 2 == 0:\n                result += lst[i]\n    return result"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i] % 2 == 0:\n            result += lst[i]\n    return result"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\"\"\"\n    result = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            result += lst[i]\n    return result"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n    \n    Args:\n        lst: a non-empty list of integers.\n    \n    Returns:\n        The sum of even elements that are at odd indices.\n    \n    Examples:\n        >>> add([4, 2, 6, 7])\n        2\n    \"\"\"\n    even_lst = [lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2!= 0]\n    return sum(even_lst)"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    even_indices = [i for i in range(len(lst)) if lst[i] % 2 == 0]\n    odd_indices = [i for i in range(len(lst)) if lst[i] % 2!= 0]\n    total = 0\n    for i in odd_indices:\n        if i in even_indices:\n            total += lst[i]\n    return total"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n    words = s.split()\n    new_words = []\n    for word in words:\n        new_word = ''.join(sorted(word))\n        new_words.append(new_word)\n    new_s =''.join(new_words)\n    return new_s"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n    words = s.split()\n    new_words = []\n    for word in words:\n        new_word = ''.join(sorted(word))\n        new_words.append(new_word)\n    return''.join(new_words)"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n    words = s.split()\n    new_words = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        new_words.append(sorted_word)\n    new_s =''.join(new_words)\n    return new_s"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def anti_shuffle(s):\n    words = s.split()  # split string into words\n    new_words = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))  # sort characters in word\n        new_words.append(sorted_word)\n    return''.join(new_words)  # join words back into string with spaces"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n    words = s.split()  # Split the string into words\n    new_words = []\n    for word in words:\n        new_word = \"\"\n        for char in word:\n            new_word += chr(ord(char) + ord('a'))  # Convert each character to its ASCII code and add 'a' to get a unique ASCII code for each character\n        new_words.append(new_word)\n\n    # Sort the new words in ascending order\n    new_words.sort()\n\n    # Reconstruct the string from the sorted new words\n    result = \"\"\n    for i in range(len(new_words)):\n        result += new_words[i]\n        if i!= len(new_words) - 1:\n            result += \" \"  # Add a space after each new word except for the last one\n\n    return result"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def anti_shuffle(s):\n    # Split the string into words\n    words = s.split()\n    \n    # Create an empty list to store the new words\n    new_words = []\n    \n    # Iterate over each word and sort its characters in ascending order\n    for word in words:\n        # Sort the characters of the word and join them into a string\n        sorted_word = ''.join(sorted(word))\n        # Add the sorted word to the new_words list\n        new_words.append(sorted_word)\n    \n    # Join the new words into a string and return it\n    return''.join(new_words)"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n    words = s.split()\n    result = ''\n    for word in words:\n        word_list = list(word)\n        word_list.sort()\n        result += ''.join(word_list) +''\n    return result[:-1]"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n    words = s.split() # split the string into words\n    for i in range(len(words)):\n        sorted_word = ''.join(sorted(words[i])) # sort each word and join them together\n        words[i] = sorted_word\n    return''.join(words) # join the words back together with a space in between"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n\n    words = s.split()\n    result = []\n\n    for word in words:\n        # Sort the characters in the word based on ascii value\n        sorted_word = \"\".join(sorted(word))\n        result.append(sorted_word)\n\n    # Join the sorted words with a space\n    final_result = \" \".join(result)\n\n    return final_result"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def anti_shuffle(s):\n    words = s.split() # split the string into a list of words\n    result = \"\"\n    for word in words:\n        new_word = \"\".join(sorted(word)) # sort the characters in the word and join them\n        result += new_word + \" \" # add the new word and a space to the result string\n    return result.strip() # remove the trailing space from the result string\n\nprint(anti_shuffle('Hi')) # returns 'Hi'\nprint(anti_shuffle('hello')) # returns 'ehllo'\nprint(anti_shuffle('Hello World!!!')) # returns 'Hello!!!Wdlor'"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        row = lst[i]\n        for j in range(len(row)):\n            if row[j] == x:\n                result.append((i, j))\n    result.sort(key=lambda t: (t[0], -t[1]))\n    return result"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_row(lst, x):\n    # Initialize an empty list to store the result\n    result = []\n    # Loop through each row in the list\n    for i, row in enumerate(lst):\n        # Loop through each column in the row\n        for j, col in enumerate(row):\n            # If the current element is equal to x, add the coordinate to the result list\n            if col == x:\n                result.append((i, j))\n    # Sort the result list by rows in ascending order, and then by columns in descending order\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coordinates = []\n\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n\n    if not coordinates:\n        return []\n\n    coordinates = sorted(coordinates)\n\n    row_coordinates = [coordinates[0]]\n\n    for coordinate in coordinates[1:]:\n        if coordinate[0] == row_coordinates[-1][0]:\n            row_coordinates.append(coordinate)\n\n    row_coordinates = sorted(row_coordinates, key=lambda x: x[1], reverse=True)\n\n    return row_coordinates"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda x: (x[0], -x[1]))\n    return coordinates"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort()\n    for i in range(len(lst)):\n        row = lst[i]\n        row_coords = [(i, j) for j, value in enumerate(row) if value == x]\n        row_coords.sort(reverse=True)\n        result.extend(row_coords)\n    return result"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda x: (x[0], -x[1]))\n    return coordinates"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list lst and an integer x, find all occurrences of x in lst, and return a list of tuples\n    representing their coordinates - (row, column). Coordinates are sorted by row in ascending order, and by\n    column in descending order within each row.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort()\n    result.sort(key=lambda x: x[1], reverse=True)\n    return result"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    if not lst:\n        return []\n\n    # Store coordinates of x in a list of tuples\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                coordinates.append((i, j))\n\n    # Sort coordinates by rows in ascending order, and then by columns in descending order\n    coordinates.sort(key=lambda c: (c[0], -c[1]))\n\n    return coordinates"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coordinates.append((i, j))\n    if not coordinates:\n        return []\n    coordinates.sort()\n    for i, row in enumerate(lst):\n        if x in row:\n            row_coordinates = [(i, j) for j, val in enumerate(row) if val == x]\n            row_coordinates.sort(key=lambda x: -x[1])\n            coordinates.extend(row_coordinates)\n    return coordinates"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n    if len(array) == 1:\n        return array\n    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n    \n    if sum([array[0], array[-1]]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) <= 1:\n        return array\n\n    # Calculate the sum of the first and last element of the array\n    first_last_sum = array[0] + array[-1]\n\n    # Sort the array in ascending or descending order based on the sum\n    if first_last_sum % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n    \n    # calculate the sum of the first and last index values\n    first_last_sum = array[0] + array[-1]\n    \n    # sort the array in ascending order if the sum is odd, or in descending order if the sum is even\n    if first_last_sum % 2 == 0:\n        sorted_array = sorted(array, reverse=True)\n    else:\n        sorted_array = sorted(array)\n    \n    # return a copy of the sorted array\n    return sorted_array[:]"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0 or len(array) == 1:\n        return array\n\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    if len(array) <= 1:\n        return array\n\n    # Calculate the sum of first and last index value\n    sum_first_last = array[0] + array[-1]\n\n    if sum_first_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return array\n\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    # Check if the array is empty\n    if not array:\n        return []\n\n    # Calculate the sum of the first and last indices\n    sum_indices = array[0] + array[-1]\n\n    # Sort the array in ascending order if the sum of indices is odd, or descending order if it is even\n    if sum_indices % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return array\n    \n    sum_of_first_last = array[0] + array[-1]\n    if sum_of_first_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return array\n    \n    if sum([array[0], array[-1]]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    rotated_alphabet = alphabet[2:] + alphabet[:2]\n    result = ''\n    for char in s:\n        index = alphabet.index(char.lower())\n        rotated_index = rotated_alphabet.index(char.lower())\n        result += rotated_alphabet[rotated_index]\n    return result"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    encrypted = \"\"\n    for letter in s:\n        if letter.isalpha():\n            # get the ASCII value of the letter and add 12 to it\n            ascii_value = ord(letter) + 12\n            # convert the ASCII value back to a letter\n            encrypted_letter = chr(ascii_value)\n            # if the letter is lowercase, make it uppercase\n            if letter.islower():\n                encrypted_letter = encrypted_letter.upper()\n            encrypted += encrypted_letter\n        else:\n            encrypted += letter\n    return encrypted"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # create a dictionary with the alphabet rotated by two multiplied to two places\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    rotated_alphabet = alphabet[2:] + alphabet[:2]\n    alphabet_dict = dict(zip(alphabet, rotated_alphabet))\n\n    # encrypt the string using the dictionary\n    encrypted = ''\n    for char in s.lower():\n        if char.isalpha():\n            encrypted += alphabet_dict[char]\n        else:\n            encrypted += char\n    return encrypted"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    rotated_alphabet = alphabet[2:] + alphabet[:2]\n    result = ''\n    for char in s:\n        if char in alphabet:\n            index = alphabet.index(char)\n            result += rotated_alphabet[index]\n        else:\n            result += char\n    return result"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for letter in s:\n        if letter.isalpha():\n            index = alphabet.index(letter.lower())\n            if letter.islower():\n                encrypted += alphabet[(index + 4) % 26]\n            else:\n                encrypted += alphabet[(index + 4) % 26].upper()\n        else:\n            encrypted += letter\n    return encrypted"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # define the rotated alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    rotated_alphabet = alphabet[2:] + alphabet[:2]\n    # create a dictionary to map each letter to its rotated version\n    mapping = {}\n    for i in range(26):\n        mapping[alphabet[i]] = rotated_alphabet[i]\n    # encrypt the string using the mapping\n    result = \"\"\n    for letter in s:\n        result += mapping[letter.lower()]\n    return result"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    result = \"\"\n    for char in s:\n        if char in alphabet:\n            index = alphabet.index(char)\n            new_index = (index + 4) % 26\n            result += alphabet[new_index]\n        else:\n            result += char\n    return result"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    s = s.lower()\n    encrypted = ''\n    for letter in s:\n        if letter in alpha:\n            index = alpha.index(letter)\n            new_index = (index - 2 * 2) % 26\n            encrypted += alpha[new_index]\n        else:\n            encrypted += letter\n    return encrypted"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    rotated_alphabet = alphabet[2:] + alphabet[:2]\n    result = ''\n    for char in s:\n        if char.isalpha():\n            index = alphabet.index(char.lower())\n            rotated_index = rotated_alphabet.index(char.lower())\n            result += rotated_alphabet[index] if char.isupper() else rotated_alphabet[index].upper()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    rotated_alphabet = alphabet[2:] + alphabet[:2]\n    return ''.join([rotated_alphabet[alphabet.index(c)] for c in s])\n"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    smallest = lst[0]\n    second_smallest = None\n    for num in lst[1:]:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest or second_smallest is None:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    return min(lst)"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    \n    if len(lst) < 2:\n        return None\n    \n    smallest = lst[0]\n    second_smallest = None\n    \n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    second_smallest = min(lst)\n    return second_smallest"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    if len(lst) < 2:\n        return None\n    \n    smallest = lst[0]\n    second_smallest = None\n    \n    for i in range(1, len(lst)):\n        if lst[i] < smallest:\n            second_smallest = smallest\n            smallest = lst[i]\n        elif lst[i] < second_smallest or second_smallest is None:\n            second_smallest = lst[i]\n            \n    return second_smallest if second_smallest is not None else None"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \"\"\"\n    # Remove duplicates\n    lst = list(set(lst))\n    # Sort the list in ascending order\n    lst.sort()\n    # Check if there is at least 2 distinct elements\n    if len(lst) < 2:\n        return None\n    # Return the 2nd smallest element\n    return lst[1]"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list, or None if there is no such element.\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    if lst.count(smallest) == 1:\n        return None\n    else:\n        second_smallest = lst[lst.index(smallest) + 1]\n        return second_smallest"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    \n    smallest = lst[0]\n    second_smallest = None\n    \n    for i in range(1, len(lst)):\n        if lst[i] < smallest:\n            second_smallest = smallest\n            smallest = lst[i]\n        elif lst[i] < second_smallest or second_smallest is None:\n            second_smallest = lst[i]\n    \n    return second_smallest"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    if len(lst) < 2:\n        return None\n\n    smallest = lst[0]\n    second_smallest = None\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest:\n            second_smallest = num\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_bored(S):\n    count = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    return count"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_bored(S):\n    bored_count = 0\n    sentences = S.split('.')\n    sentences += S.split('?')\n    sentences += S.split('!')\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            bored_count += 1\n    return bored_count"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    count = 0\n    sentences = S.split('. ')\n    for sentence in sentences:\n        words = sentence.split(' ')\n        if words[0] == 'I':\n            count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_bored(S):\n    # Splitting the string into a list of sentences\n    sentences = S.split('.')\n    sentences += S.split('?')\n    sentences += S.split('!')\n    \n    # Counting the number of boredoms\n    boredoms = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            boredoms += 1\n    \n    return boredoms"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    count = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    boredom_count = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        words = sentence.split()\n        if words[0].lower() == 'i':\n            boredom_count += 1\n    return boredom_count"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_bored(S):\n    count = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if sentence[0] == 'I':\n            count += 1\n    return count"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_bored(S):\n    boredom_count = 0\n    sentences = S.split('. ')\n    for sentence in sentences:\n        words = sentence.split()\n        if words[0].lower() == 'i':\n            boredom_count += 1\n    return boredom_count"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    count = 0\n    sentences = S.split('.')\n    sentences += S.split('?')\n    sentences += S.split('!')\n    \n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_bored(S):\n    count = 0\n    sentence_end = set(['.', '!', '?'])\n    words = S.split()\n    for i in range(len(words)):\n        if words[i].startswith('I'):\n            count += 1\n        if i < len(words) - 1 and words[i+1] in sentence_end:\n            count = 0\n    return count"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    \n    '''\n    \n    if type(x) == int and type(y) == int and type(z) == int:\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    \"\"\"\n\n    if all(isinstance(i, int) for i in [x, y, z]):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    if type(x)!= int or type(y)!= int or type(z)!= int:\n        return False\n    if x + y == z or x + z == y or y + z == x:\n        return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    if all(isinstance(i, int) for i in (x, y, z)):\n        return any([x == y + z, y == x + z, z == x + y])\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def any_int(x, y, z):\n    # Check if all numbers are integers\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        # Check if one of the numbers is equal to the sum of the other two\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    if type(x) == int and type(y) == int and type(z) == int:\n        if x + y == z or y + z == x or z + x == y:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    \n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == z or y + z == x or x + z == y:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    \n    '''\n    if not all(isinstance(n, int) for n in [x, y, z]):\n        return False\n    elif x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    \n    for letter in message:\n        if letter in vowels:\n            if letter.isupper():\n                encoded_letter = chr((ord(letter) - ord('A') + 2) % 26 + ord('A'))\n            else:\n                encoded_letter = chr((ord(letter) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            encoded_letter = letter\n            \n        encoded_message += encoded_letter\n    \n    return encoded_message"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encoded_message = \"\"\n    \n    for char in message:\n        if char.lower() in \"aeiou\":\n            encoded_message += alphabet[(alphabet.index(char.lower()) + 2) % 26]\n        else:\n            encoded_message += char.upper() if char.islower() else char.lower()\n    \n    return encoded_message"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            if letter.isupper():\n                new_message += chr((ord(letter) + 2 - 65) % 26 + 65)\n            else:\n                new_message += chr((ord(letter) + 2 - 97) % 26 + 97)\n        else:\n            if letter.islower():\n                new_message += letter.upper()\n            else:\n                new_message += letter\n    return new_message"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    for letter in message:\n        if letter in vowels:\n            encoded_message += vowels[(vowels.index(letter)+2)%5]\n        else:\n            encoded_message += letter.swapcase()\n    return encoded_message"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def encode(message):\n    \"\"\"\n    This function takes a message, and encodes it such that it swaps case of all letters, \n    and replaces all vowels in the message with the letter that appears 2 places ahead of \n    that vowel in the English alphabet.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_message = ''\n    for char in message:\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            new_char = vowels[(index+2)%5]\n        else:\n            new_char = char\n        new_message += new_char\n    return new_message.upper()\n"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for i in range(len(message)):\n        if message[i] in vowels:\n            vowel_index = vowels.index(message[i])\n            if vowel_index == len(vowels) - 1:\n                result += vowels[0]\n            else:\n                result += vowels[vowel_index + 2]\n        else:\n            result += message[i].swapcase()\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def encode(message):\n    \"\"\"\n    This function encodes a given message by swapping the case of all letters,\n    replacing all vowels with the letter that appears 2 places ahead of that vowel\n    in the English alphabet.\n\n    Args:\n    message (str): The message to be encoded.\n\n    Returns:\n    str: The encoded message.\n\n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n\n    # Convert the message to uppercase for easier manipulation.\n    message = message.upper()\n\n    # Initialize an empty string to store the encoded message.\n    encoded_message = \"\"\n\n    # Loop through each character in the message.\n    for char in message:\n\n        # Check if the character is a vowel.\n        if char in \"AEIOU\":\n\n            # Find the index of the vowel in the English alphabet.\n            vowel_index = \"AEIOU\".index(char)\n\n            # Find the letter that appears 2 places ahead of the vowel in the English alphabet.\n            encoded_char = \"AEIOU\"[vowel_index + 2]\n\n            # Add the encoded character to the encoded message.\n            encoded_message += encoded_char\n\n        # If the character is not a vowel, add it unchanged to the encoded message.\n        else:\n            encoded_message += char\n\n    # Swap the case of all letters in the encoded message and return it.\n    return encoded_message.swapcase()\n"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in message:\n        if char in vowels:\n            result += vowels[(vowels.index(char) + 2) % 5]\n        else:\n            result += char.swapcase()\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def encode(message):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for letter in message.lower():\n        if letter in vowels:\n            if letter == 'u':\n                result += 'a'\n            else:\n                result += chr((ord(letter) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            result += letter.upper() if letter.islower() else letter.lower()\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o':'m', 'u': 'p'}\n    encoded_message = ''\n    for letter in message:\n        if letter.lower() in vowels:\n            encoded_message += vowels[letter.lower()]\n        else:\n            encoded_message += letter\n    return encoded_message.upper()\n"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    \n    # function to check whether a number is prime or not\n    def is_prime(n):\n        if n <= 1:\n            return False\n        elif n <= 3:\n            return True\n        elif n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    # finding the largest prime in the list and its digits sum\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n    digits_sum = sum(int(digit) for digit in str(largest_prime))\n    \n    # returning the digits sum\n    return digits_sum"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    \"\"\"\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n    \"\"\"\n    prime_lst = [num for num in lst if is_prime(num)]\n    if not prime_lst:\n        return 0\n    largest_prime = max(prime_lst)\n    sum_digits = sum(int(digit) for digit in str(largest_prime))\n    return sum_digits"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is prime, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef largest_prime_digit_sum(lst):\n    \"\"\"Find the largest prime value in lst and return its digit sum.\"\"\"\n    largest_prime = 0\n    for n in lst:\n        if is_prime(n) and n > largest_prime:\n            largest_prime = n\n    return sum(int(digit) for digit in str(largest_prime))\n"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_digits(n):\n    \"\"\"Helper function to compute the sum of digits of a number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n    \"\"\"\n    largest_prime = None\n    for n in lst:\n        if is_prime(n):\n            if largest_prime is None or n > largest_prime:\n                largest_prime = n\n    return sum_digits(largest_prime)"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"\n    Helper function to calculate the sum of digits of a number.\n    \"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    \"\"\"\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n    \"\"\"\n    max_prime = -float('inf')\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    return sum_of_digits(max_prime)"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_prime(n):\n    \"\"\"Check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\"\"\"\n    prime_lst = []\n    for num in lst:\n        if is_prime(num):\n            prime_lst.append(num)\n    largest_prime = max(prime_lst)\n    sum_of_digits = sum(int(digit) for digit in str(largest_prime))\n    return sum_of_digits"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_prime(n):\n    \"\"\"Function to check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"Function to sum the digits of a number\"\"\"\n    return sum(int(d) for d in str(n))\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num):\n            if num > largest_prime:\n                largest_prime = num\n    return sum_of_digits(largest_prime)"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\"\"\"\n    max_prime = max(lst, key=is_prime)\n    return sum(int(digit) for digit in str(max_prime))"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\"\"\"\n\n    def is_prime(n):\n        \"\"\"Return True if n is prime, False otherwise.\"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Find the largest prime in the list\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    # Calculate the sum of its digits\n    digits_sum = sum(int(digit) for digit in str(largest_prime))\n\n    return digits_sum"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_prime(num):\n    \"\"\"\n    A helper function to check if a number is prime or not.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(num):\n    \"\"\"\n    A helper function to calculate the sum of digits of a number.\n    \"\"\"\n    return sum(int(digit) for digit in str(num))\n\ndef largest_prime(lst):\n    \"\"\"\n    A function to find the largest prime value from a list of integers, and then\n    calculate the sum of its digits.\n    \"\"\"\n    prime_lst = [num for num in lst if is_prime(num)]\n    if not prime_lst:\n        return 0\n    return sum_of_digits(max(prime_lst))"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not dict:\n        return False\n\n    is_lower = all(isinstance(k, str) and k.islower() for k in dict.keys())\n    is_upper = all(isinstance(k, str) and k.isupper() for k in dict.keys())\n\n    return is_lower or is_upper"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    case = None\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if case is None:\n            case = key.islower()\n        elif key.islower()!= case:\n            return False\n    return True"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not dict:\n        return False\n    \n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        \n    if len(set(key.lower() for key in dict)) == 1 or len(set(key.upper() for key in dict)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_dict_case(dict):\n    if not dict:  # check if dictionary is empty\n        return False\n\n    all_lower = True\n    all_upper = True\n\n    for key in dict:\n        if not isinstance(key, str):  # check if key is not a string\n            return False\n\n        if key.islower():\n            all_upper = False\n        elif key.isupper():\n            all_lower = False\n        else:\n            return False  # key is neither lowercase nor uppercase\n\n    return all_lower or all_upper"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if len(dict) == 0:\n        return False\n    \n    first_key = next(iter(dict))\n    if isinstance(first_key, str):\n        return all(isinstance(key, str) and key.islower() for key in dict) or \\\n               all(isinstance(key, str) and key.isupper() for key in dict)\n    else:\n        return False"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not dict:  # Check if dictionary is empty\n        return False\n    \n    # Check if all keys are strings in lower case or all keys are strings in upper case\n    first_key = next(iter(dict))  # Get first key in dictionary\n    if isinstance(first_key, str):  # Check if first key is a string\n        if first_key.islower():  # Check if first key is in lower case\n            for key in dict:  # Iterate through all keys in dictionary\n                if not isinstance(key, str):  # Check if key is not a string\n                    return False  # If key is not a string, return False\n                if not key.islower():  # Check if key is not in lower case\n                    return False  # If key is not in lower case, return False\n        elif first_key.isupper():  # Check if first key is in upper case\n            for key in dict:  # Iterate through all keys in dictionary\n                if not isinstance(key, str):  # Check if key is not a string\n                    return False  # If key is not a string, return False\n                if not key.isupper():  # Check if key is not in upper case\n                    return False  # If key is not in upper case, return False\n        else:  # If first key is neither in lower case nor in upper case\n            return False  # Return False\n    else:  # If first key is not a string\n        return False  # Return False\n    \n    return True  # If all keys are either in lower case or in upper case, return True"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    \n    all_keys_lower = True\n    all_keys_upper = True\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower():\n            all_keys_lower = False\n        if not key.isupper():\n            all_keys_upper = False\n    \n    return all_keys_lower or all_keys_upper"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\n    if not dict:\n        return False\n\n    for key in dict.keys():\n        if isinstance(key, str):\n            if key.islower() or key.isupper():\n                continue\n            else:\n                return False\n        else:\n            return False\n\n    return True"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not dict:\n        return False\n    \n    # check if all keys are in lower case\n    keys_lower = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    \n    # check if all keys are in upper case\n    keys_upper = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    \n    return keys_lower or keys_upper"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    case = None\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if case is None:\n            case = key.islower() or key.isupper()\n        else:\n            if (key.islower() and not case) or (key.isupper() and case):\n                return False\n    return True"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_prime(num):\n    \"\"\"Return True if the number is prime, False otherwise.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\"\"\"\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return primes"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime and i < n:\n            primes.append(i)\n        if len(primes) == n:\n            break\n    return primes"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    if n < 2:\n        return []\n\n    primes = [2]\n    i = 3\n\n    while len(primes) < n:\n        is_prime = True\n        for p in primes:\n            if i % p == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n        i += 1\n\n    return primes"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_prime(num):\n    \"\"\"Return True if the given number is prime, otherwise False.\"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    count = 0\n    result = []\n    for i in range(2, n):\n        if is_prime(i):\n            result.append(i)\n            count += 1\n            if count == n:\n                break\n    return result"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_prime(num):\n    \"\"\"Function to check if a given number is prime\"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef count_up_to(n):\n    \"\"\"Function to count the prime numbers up to a given number\"\"\"\n    result = []\n    i = 2\n    while len(result) < n and i < n:\n        if is_prime(i):\n            result.append(i)\n        i += 1\n    return result"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    if n <= 1:\n        return []\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return primes"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_prime(num):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    if n < 2:\n        return []\n    primes = [2]\n    num = 3\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 2\n    return primes"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\"\"\"\n    result = []\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            result.append(i)\n            count += 1\n            if count == n:\n                break\n    return result"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_prime(n):\n    \"\"\"Returns True if the given number is prime, False otherwise\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\"\"\"\n    primes = []\n    i = 2\n    while len(primes) < n:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n    return primes"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\"\"\"\n    primes = []\n    i = 2\n    while len(primes) < n:\n        if is_prime(i) and i < n:\n            primes.append(i)\n        i += 1\n    return primes"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return (a % 10) * (b % 10)"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    a = abs(a)\n    b = abs(b)\n    product = 0\n    while a > 0:\n        product += a % 10\n        a //= 10\n    while b > 0:\n        product += b % 10\n        b //= 10\n    return product"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    a = abs(a)\n    b = abs(b)\n    product = 0\n    while a > 0:\n        product += a % 10\n        a //= 10\n    while b > 0:\n        product += b % 10\n        b //= 10\n    return product"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # get the last digit of a and b\n    last_digit_a = a % 10\n    last_digit_b = b % 10\n    \n    # get the product of the last digits\n    product = last_digit_a * last_digit_b\n    \n    return product"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\"\"\"\n    \n    # Convert the integers to strings and reverse them\n    a = str(a)[::-1]\n    b = str(b)[::-1]\n    \n    # Initialize the product variable to 0\n    product = 0\n    \n    # Loop through each digit in the two reversed strings and multiply them\n    for i in range(len(a)):\n        product += int(a[i]) * int(b[i])\n        \n    return product"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply(a, b):\n    \"\"\"\n    This function takes two integers as input and returns the product of their unit digits.\n    \"\"\"\n    product = 0\n    # check if both a and b are positive\n    if a > 0 and b > 0:\n        # remove the last digit of a and the last digit of b\n        a_unit = a % 10\n        b_unit = b % 10\n        # multiply the unit digits and add it to the product\n        product = a_unit * b_unit\n    # return the product\n    return product"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    product = 0\n    while a > 0:\n        product += a % 10\n        a //= 10\n    while b > 0:\n        product += b % 10\n        b //= 10\n    return product"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    a_unit_digit = a % 10\n    b_unit_digit = b % 10\n    return a_unit_digit * b_unit_digit"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply(a, b):\n    \"\"\"\n    Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    a_unit_digit = a % 10\n    b_unit_digit = b % 10\n    product = a_unit_digit * b_unit_digit\n    return product"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\n    # Extract unit digits of a and b\n    a_unit = a % 10\n    b_unit = b % 10\n\n    # Multiply unit digits and return the result\n    return a_unit * b_unit"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            if s[i] in 'AEIOU':\n                count += 1\n    return count"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in \"AEIOU\":\n            count += 1\n    return count"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOUaeiou':\n            count += 1\n    return count"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in ['A', 'E', 'I', 'O', 'U']:\n            count += 1\n    return count"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            if s[i].isupper():\n                count += 1\n    return count"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            if s[i] in 'AEIOU':\n                count += 1\n    return count"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    \n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in \"AEIOUaeiou\":\n            count += 1\n            \n    return count"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in ['A', 'E', 'I', 'O', 'U']:\n            count += 1\n    return count"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n    # Convert the value to a float\n    num = float(value)\n\n    # Check if the number is an integer or not\n    if num.is_integer():\n        return int(num)\n    else:\n        # Round the number to the nearest integer using the ceil() function\n        rounded_num = int(num + 0.5)\n\n        # Check if the rounded number is greater than or less than the original number\n        if abs(rounded_num - num) > abs(rounded_num - (num + 1)):\n            return rounded_num - 1\n        else:\n            return rounded_num"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    if value.isdigit():\n        return int(value)\n\n    num = float(value)\n    if num == int(num):\n        return int(num)\n    elif num < 0:\n        return int(num) - 1\n    else:\n        return int(num) + 1"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    num = float(value)\n    if num < 0:\n        return int(num - 0.5)\n    else:\n        return int(num + 0.5)"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    elif num < 0:\n        return int(num - 0.5)\n    else:\n        return int(num)"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n    if \".\" in value:\n        # If the input value is a decimal, convert it to float and round it.\n        value = round(float(value))\n    else:\n        # If the input value is an integer, convert it to int.\n        value = int(value)\n    return value"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    levels = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            levels.append(levels[-1] + 2)\n        else:\n            levels.append(levels[-1] + 1)\n    return levels"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    levels = []\n    for i in range(n):\n        if i == 0:\n            levels.append(n)\n        else:\n            if n % 2 == 0:\n                levels.append(levels[i-1] + 2)\n            else:\n                levels.append(levels[i-1] + 1)\n    return levels"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]\n    for i in range(n - 1):\n        if n % 2 == 0:\n            n = n + 2\n        else:\n            n = n + 1\n        pile.append(n)\n    return pile"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    levels = []\n    current_level = n\n    for i in range(n):\n        levels.append(current_level)\n        if current_level % 2 == 0:\n            current_level += 1\n        else:\n            current_level += 2\n    return levels"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    levels = [n]\n    while levels[-1]!= 1:\n        if levels[-1] % 2 == 0:\n            levels.append(levels[-1] + 1)\n        else:\n            levels.append(levels[-1] + 2)\n    return levels\n"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        next_number = n + 1\n    else:\n        next_number = n + 2\n    return [n] + make_a_pile(next_number)"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            stones.append(stones[-1] + i*2)\n        else:\n            stones.append(stones[-1] + i*2 - 1)\n    return stones"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]\n    for i in range(1, n):\n        if n % 2 == 1:\n            pile.append(n+1)\n        else:\n            pile.append(n)\n        n = pile[-1]\n    return pile"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    result = []\n    current_level = n\n    for i in range(n):\n        result.append(current_level)\n        if i == n-1:\n            break\n        if current_level % 2 == 0:\n            current_level += 1\n        else:\n            current_level += 2\n    return result"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    if n == 1:\n        return [1]\n    else:\n        if n % 2 == 1:\n            next_num = n+2\n        else:\n            next_num = n+1\n        return [n] + make_a_pile(next_num)"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Split the string into words using either commas or spaces as delimiters\n    words = s.split(\",\")\n    words = words[0].split() + words[1:]\n    \n    # Return the array of words\n    return words"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    words = s.split() # split the string into words using space as delimiter\n    return words"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.replace(\",\", \" \").split()"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Split the string into words using comma and space as the delimiter\n    words = s.split(\", \")\n    # Remove the leading and trailing whitespaces from each word\n    words = [word.strip() for word in words]\n    return words"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    words = s.split()\n    return words"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Splitting the string into words\n    words = s.split()\n    # Returning the array of words\n    return words"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Split the string into words using spaces or commas as separators\n    words = s.split()\n    return words"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    words = s.split()\n    return words"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\nprint(words_string(\"Hi, my name is John\")) # Output: [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nprint(words_string(\"One, two, three, four, five, six\")) # Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(y, x-1, -2):\n        if i >= x and i <= y:\n            return i\n    return -1"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            return i\n    return -1"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    \n    # Initialize the variable to store the maximum even number found\n    max_even = -1\n    \n    # Iterate through all even numbers in the range [x, y] inclusive\n    for i in range(x, y+1, 2):\n        if i > max_even:\n            max_even = i\n    \n    # Return the maximum even number found\n    return max_even"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    \n    # Create a list of even numbers in the range [x, y]\n    even_nums = [i for i in range(x, y+1) if i % 2 == 0]\n    \n    # If there are no even numbers in the range, return -1\n    if len(even_nums) == 0:\n        return -1\n    \n    # Otherwise, return the largest even number in the range\n    else:\n        return max(even_nums)"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    max_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0 and i > max_even:\n            max_even = i\n    return max_even"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\n    # Initialize the variables\n    max_even = -1\n    current_even = -1\n\n    # Loop through all even numbers in the range [x, y] inclusive\n    for num in range(x, y+1, 2):\n        # If the current number is greater than the current maximum even number, update the maximum even number\n        if num > max_even:\n            max_even = num\n    \n    # If there's a maximum even number, return it. Otherwise, return -1.\n    if max_even!= -1:\n        return max_even\n    else:\n        return -1"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\"\"\"\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > choose_num.result:\n            choose_num.result = num\n    if choose_num.result == -1:\n        return -1\n    else:\n        return choose_num.result\n    \nchoose_num.result = -1"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\"\"\"\n\n    # Initialize the variable max_even to -1\n    max_even = -1\n\n    # Loop through all numbers in the range [x, y] inclusive\n    for i in range(x, y+1):\n        # Check if the number is even\n        if i % 2 == 0:\n            # If it is, check if it is greater than max_even\n            if i > max_even:\n                # If it is, update max_even to i\n                max_even = i\n\n    # Return the biggest even number found, or -1 if none was found\n    return max_even"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\n    # Initialize the highest even number found so far\n    highest_even = -1\n\n    # Loop through all even numbers in the range [x, y] inclusive\n    for num in range(x, y+1, 2):\n        if num % 2 == 0:\n            # If the current even number is bigger than the highest even found so far,\n            # update the highest even found so far to the current even number\n            if num > highest_even:\n                highest_even = num\n\n    # If there was no even number in the range [x, y] inclusive, return -1\n    if highest_even == -1:\n        return -1\n    else:\n        return highest_even"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    \n    binary_string = \"\"\n    while rounded_avg > 0:\n        binary_string += str(rounded_avg % 2)\n        rounded_avg //= 2\n    \n    return \"0b\" + binary_string[::-1]"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        sum = 0\n        for i in range(n, m+1):\n            sum += i\n        avg = sum / (m-n+1)\n        return bin(int(round(avg)))"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rounded_avg(n, m):\n    \"\"\"\n    Given two positive integers n and m, compute the average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    \"\"\"\n    if n > m:\n        return -1\n    \n    # Compute the average\n    avg = (n + m) / 2\n    \n    # Round the average to the nearest integer\n    avg_rounded = round(avg)\n    \n    # Convert the rounded average to binary\n    binary_str = bin(avg_rounded)[2:]\n    \n    # Return the binary string\n    return f\"0b{binary_str}\""
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n\n    binary_avg = bin(rounded_avg)[2:]\n\n    return f\"0b{binary_avg}\""
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    sum = 0\n    for i in range(n, m+1):\n        sum += i\n        \n    avg = sum / (m-n+1)\n    \n    return bin(int(round(avg)))"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    \n    return bin(rounded_avg)[2:]"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        return bin(round(avg))[2:]"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)[2:]\n\n    return \"0b\" + binary_avg"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    \n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    binary = bin(rounded_avg)[2:]\n    \n    return \"0b\" + binary"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    \n    total = 0\n    for i in range(n, m+1):\n        total += i\n        \n    average = total / (m - n + 1)\n    rounded_average = round(average)\n    \n    binary = bin(rounded_average)[2:]\n    \n    return \"0b\" + binary"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique_digits = []\n    for num in x:\n        digits = [int(d) for d in str(num)] # convert to list of digits\n        if not any(d % 2 == 0 for d in digits): # check if no even digits\n            unique_digits.append(num) # add to result list if not even\n    return sorted(unique_digits) # return sorted list of unique digits"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique_nums = []\n    for num in x:\n        if all(int(digit) % 2!= 0 for digit in str(num)):\n            unique_nums.append(num)\n    return sorted(unique_nums)"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for num in x:\n        digits = [int(digit) for digit in str(num)]\n        if not any(digit % 2 == 0 for digit in digits):\n            result.append(num)\n    return sorted(result)"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Create an empty list to store the unique elements\n    unique = []\n    # Iterate through each element in x\n    for i in x:\n        # Check if all digits are even\n        if all(int(digit) % 2 == 0 for digit in str(i)):\n            # If all digits are even, add the element to the unique list\n            unique.append(i)\n    # Sort the unique list in increasing order and return it\n    return sorted(unique)"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique = []\n    for i in x:\n        even_digit = False\n        for j in str(i):\n            if int(j) % 2 == 0:\n                even_digit = True\n                break\n        if not even_digit:\n            unique.append(i)\n    return sorted(unique)"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for num in x:\n        digits = [int(d) for d in str(num)]\n        if all(d % 2!= 0 for d in digits):\n            result.append(num)\n    return sorted(result)"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique_list = []\n    for i in x:\n        digits = [int(d) for d in str(i)]\n        if not any(d % 2 == 0 for d in digits):\n            unique_list.append(i)\n    return sorted(unique_list)"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique = []\n    for num in x:\n        has_even_digit = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            unique.append(num)\n    unique.sort()\n    return unique"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique_elements = []\n    for num in x:\n        digits = [int(digit) for digit in str(num)]\n        if all(digit % 2!= 0 for digit in digits):\n            unique_elements.append(num)\n    return sorted(unique_elements)"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique = []\n    for i in x:\n        if not any(digit % 2 == 0 for digit in str(i)):\n            unique.append(i)\n    return sorted(unique)"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    # filter the array for integers between 1 and 9 inclusive\n    arr = [x for x in arr if 1 <= x <= 9]\n\n    # sort the array in descending order\n    arr.sort(reverse=True)\n\n    # reverse the array\n    arr = arr[::-1]\n\n    # replace each digit with its corresponding name\n    arr = [name[x-1] for name, x in zip(['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'], arr)]\n\n    return arr"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n      \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n      \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    # remove any strange numbers\n    arr = [x for x in arr if -1 <= x <= 9]\n\n    # sort between 1 and 9\n    arr = sorted([x for x in arr if 1 <= x <= 9])\n\n    # reverse the array\n    arr = arr[::-1]\n\n    # replace digits with their names\n    result = []\n    for num in arr:\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n\n    return result"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n      \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n      \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    # Remove the strange numbers from the array\n    arr = [x for x in arr if x > 0 and x <= 9]\n\n    # Sort the array and reverse it\n    arr = sorted(arr, reverse=True)\n\n    # Replace the digits with their corresponding names\n    result = []\n    for num in arr:\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n\n    return result"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # create a dictionary to map digits to names\n    digit_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n\n    # filter the array to include only integers between 1 and 9 inclusive\n    filtered_arr = [num for num in arr if isinstance(num, int) and 1 <= num <= 9]\n\n    # sort the filtered array in reverse order\n    sorted_arr = sorted(filtered_arr, reverse=True)\n\n    # reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n\n    # map each digit in the reversed array to its corresponding name\n    mapped_arr = [digit_to_name[num] for num in reversed_arr]\n\n    return mapped_arr"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # Create a dictionary to map digit to name\n    digit_to_name = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five',\n                     6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n\n    # Filter out numbers outside the range [1, 9]\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n\n    # Sort the array in reverse order and map each digit to its name\n    sorted_arr = [digit_to_name[num] for num in sorted(filtered_arr, reverse=True)]\n\n    # Return the resulting array\n    return sorted_arr"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n      \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n      \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    result = []\n    for num in arr:\n        if num >= 1 and num <= 9:\n            result.append(num)\n    result.sort()\n    result.reverse()\n    for i in range(len(result)):\n        if result[i] == 1:\n            result[i] = \"One\"\n        elif result[i] == 2:\n            result[i] = \"Two\"\n        elif result[i] == 3:\n            result[i] = \"Three\"\n        elif result[i] == 4:\n            result[i] = \"Four\"\n        elif result[i] == 5:\n            result[i] = \"Five\"\n        elif result[i] == 6:\n            result[i] = \"Six\"\n        elif result[i] == 7:\n            result[i] = \"Seven\"\n        elif result[i] == 8:\n            result[i] = \"Eight\"\n        elif result[i] == 9:\n            result[i] = \"Nine\"\n    return result"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # filter out numbers not between 1 and 9 inclusive\n    arr = [x for x in arr if x >= 1 and x <= 9]\n    \n    # sort the remaining numbers and reverse the order\n    arr = sorted(arr, reverse=True)\n    \n    # map each digit to its corresponding name\n    arr = [f\"{num_name(num)}\" for num in arr]\n    \n    # return the final array\n    return arr\n    \ndef num_name(num):\n    \"\"\"\n    Given a number between 1 and 9 inclusive, return its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    num_names = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    return num_names[num]"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def by_length(arr):\n    # Define the mapping from digits to names\n    digit_names = {str(i): name for i, name in enumerate([\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"])}\n\n    # Filter the integers between 1 and 9\n    integers = [x for x in arr if 1 <= x <= 9]\n\n    # Sort the integers and reverse the resulting list\n    sorted_integers = sorted(integers, reverse=True)\n\n    # Replace each digit by its corresponding name\n    result = [digit_names[str(x)] for x in sorted_integers]\n\n    return result"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def by_length(arr):\n    # initialize a dictionary to map digits to names\n    digit_to_name = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n\n    # filter the array to include only digits between 1 and 9 inclusive\n    arr = [num for num in arr if 1 <= num <= 9]\n\n    # sort the resulting array in reverse order\n    arr.sort(reverse=True)\n\n    # replace each digit in the array with its corresponding name from the dictionary\n    for i in range(len(arr)):\n        if arr[i] in digit_to_name:\n            arr[i] = digit_to_name[arr[i]]\n\n    return arr"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n      \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n      \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    # Remove any strange numbers from the array\n    arr = [x for x in arr if x >= 1 and x <= 9]\n\n    # Sort the array\n    arr = sorted(arr)\n\n    # Reverse the array\n    arr = arr[::-1]\n\n    # Replace each digit by its corresponding name\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            arr[i] = \"One\"\n        elif arr[i] == 2:\n            arr[i] = \"Two\"\n        elif arr[i] == 3:\n            arr[i] = \"Three\"\n        elif arr[i] == 4:\n            arr[i] = \"Four\"\n        elif arr[i] == 5:\n            arr[i] = \"Five\"\n        elif arr[i] == 6:\n            arr[i] = \"Six\"\n        elif arr[i] == 7:\n            arr[i] = \"Seven\"\n        elif arr[i] == 8:\n            arr[i] = \"Eight\"\n        elif arr[i] == 9:\n            arr[i] = \"Nine\"\n\n    # Return the resulting array\n    return arr"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def factorial(n):\n    \"\"\"Return the factorial of n.\"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef f(n):\n    \"\"\"Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(i)\n    return result"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            sum = 0\n            for j in range(1, i+1):\n                sum += j\n            result.append(sum)\n    return result"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            # factorial of i\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            # sum of numbers from 1 to i\n            result.append((i*(i+1))//2)\n    return result"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def f(n):\n    \"\"\"Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append((i*(i+1))//2)\n    return result"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append((i*(i+1))/2)\n    return result"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append((i*(i+1))//2)\n    return result"
    },
    {
        "number": 107,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    # initialize even and odd palindrome count\n    even_count = 0\n    odd_count = 0\n    \n    # loop through range(1, n) and check if each number is a palindrome\n    for i in range(1, n+1):\n        # convert number to string and check if it is equal to its reverse\n        if str(i) == str(i)[::-1]:\n            # if number is even\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    # return tuple of even and odd palindrome count\n    return (even_count, odd_count)"
    },
    {
        "number": 107,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_palindrome(num):\n    \"\"\"\n    This function returns True if a number is a palindrome and False otherwise.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i) and i % 2 == 0:\n            count_even += 1\n        elif is_palindrome(i) and i % 2!= 0:\n            count_odd += 1\n\n    return (count_even, count_odd)"
    },
    {
        "number": 107,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    # Initialize the counters for even and odd palindromes\n    even_palindromes = 0\n    odd_palindromes = 0\n    \n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if the number is a palindrome\n        if str(i) == str(i)[::-1]:\n            # If it's an even palindrome, increment the even counter\n            if i % 2 == 0:\n                even_palindromes += 1\n            # If it's an odd palindrome, increment the odd counter\n            else:\n                odd_palindromes += 1\n    \n    # Return the tuple of even and odd palindrome counts\n    return (even_palindromes, odd_palindromes)"
    },
    {
        "number": 107,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        # check if the number is a palindrome\n        if str(i) == str(i)[::-1]:\n            # check if it is even or odd and increment the count accordingly\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"
    },
    {
        "number": 107,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1] and i % 2 == 0:\n            count_even += 1\n        elif str(i) == str(i)[::-1] and i % 2!= 0:\n            count_odd += 1\n\n    return (count_even, count_odd)"
    },
    {
        "number": 107,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef even_odd_palindrome(n):\n    even_palindromes = 0\n    odd_palindromes = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_palindromes += 1\n            else:\n                odd_palindromes += 1\n    return (even_palindromes, odd_palindromes)"
    },
    {
        "number": 107,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_palindrome(n):\n    \"\"\"\n    Helper function to check if a given number is a palindrome or not.\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"
    },
    {
        "number": 107,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    count_odd = 0\n    count_even = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)"
    },
    {
        "number": 107,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    # Initialize count for even and odd palindromes\n    even_count = 0\n    odd_count = 0\n\n    # Loop through all numbers in range(1, n)\n    for num in range(1, n+1):\n        # Check if the number is palindrome\n        if str(num) == str(num)[::-1]:\n            # Check if the number is even or odd\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"
    },
    {
        "number": 107,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return True if n is a palindrome, False otherwise.\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if i % 2 == 0 and is_palindrome(i):\n            count_even += 1\n        elif i % 2!= 0 and is_palindrome(i):\n            count_odd += 1\n    return (count_even, count_odd)"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        if sum(abs(int(num)) for num in str(arr[i])) > 0:\n            count += 1\n    return count"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num >= 0:\n            sum_of_digits = sum(int(digit) for digit in str(abs(num)))\n            if sum_of_digits > 0:\n                count += 1\n        else:\n            sum_of_digits = sum(int(digit) for digit in str(abs(num)))\n            if sum_of_digits == 0:\n                count += 1\n    return count"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Counts the numbers in the array that have a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num > 0:\n            digits_sum = sum(int(d) for d in str(abs(num)))\n            if digits_sum > 0:\n                count += 1\n    return count"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if sum(int(digit) > 0 for digit in str(abs(num))) > 0:\n            count += 1\n    return count"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n    count = 0\n    for num in arr:\n        if sum(map(abs, map(int, str(abs(num))))) > 0:\n            count += 1\n    return count"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for i in arr:\n        if abs(i) > 0:\n            digits_sum = sum(int(d) for d in str(abs(i)))\n            if digits_sum > 0:\n                count += 1\n    return count"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num > 0:\n            digits_sum = sum(int(d) for d in str(abs(num)))\n            if digits_sum > 0:\n                count += 1\n    return count"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def move_one_ball(arr):\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] > arr[j]:\n            return False\n        i += 1\n        j -= 1\n    return True"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def move_one_ball(arr):\n    n = len(arr)\n    if n == 0:\n        return True\n    \n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return False\n    \n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "Let's see the implementation of the above approach.<|im_sep|>"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N]. The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                 array by performing any number of right shift operations.\n    \"\"\"\n\n    n = len(arr)\n    if n == 0:\n        return True\n    \n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            return True\n    \n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return False\n        \n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def move_one_ball(arr):\n    \"\"\"\n    We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].\n    The numbers in the array will be randomly ordered.\n    Your task is to determine if it is possible to get an array sorted in non-decreasing order\n    by performing the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n    \n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n    \n    Note: The given list is guaranteed to have unique elements.\n    \n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performing 2 right shift operations, non-decreasing order can be achieved for the given array.\n    \n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation: It is not possible to get non-decreasing order for the given array by performing any number of right shift operations.\n    \n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return True\n    \n    # check if array is already sorted\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return False\n    \n    # perform right shift operation and check if array is sorted\n    for i in range(n-1):\n        j = 0\n        while j < n-i-1:\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            j += 1\n        if arr[n-i-1] >= arr[n-i-2]:\n            return True\n    \n    return False"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def move_one_ball(arr):\n    if not arr:  # empty array is already sorted\n        return True\n    for i in range(len(arr)):\n        if i < len(arr)-1 and arr[i] > arr[i+1]:\n            continue  # skip if we can't move this ball\n        new_arr = arr.copy()\n        new_arr[i:] = new_arr[i+1:]\n        new_arr[:i+1] = arr[i:i+1]\n        if new_arr == sorted(new_arr):\n            return True\n    return False"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def move_one_ball(arr):\n    \"\"\"\n    We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].\n    The numbers in the array will be randomly ordered.\n    Your task is to determine if it is possible to get an array sorted in\n    non-decreasing order by performing the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n    \n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                 array by performing any number of right shift operations.\n    \"\"\"\n    \n    n = len(arr)\n    \n    # If array is empty, return True\n    if n == 0:\n        return True\n    \n    # Initialize a boolean variable to store if the array is sorted in non-decreasing order\n    is_sorted = True\n    \n    # Iterate through the array and check if it is sorted\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            is_sorted = False\n            break\n    \n    # If the array is sorted in non-decreasing order, return True\n    if is_sorted:\n        return True\n    \n    # If the array is not sorted in non-decreasing order, perform right shift operation\n    # and check if the array is sorted in non-decreasing order\n    for i in range(n-1):\n        j = i\n        while j >= 0 and arr[j] > arr[j+1]:\n            arr[j], arr[j+1] = arr[j+1], arr[j]\n            j -= 1\n    \n    return move_one_ball(arr[:-1]) if arr[-1] > arr[-2] else False"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    for i in range(len(arr)):\n        # perform right shift operation\n        arr[i+1:] = arr[i:-1]\n        arr[0] = arr[-1]\n        \n        # check if array is sorted in non-decreasing order\n        if arr == sorted(arr):\n            return True\n    \n    return False"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def move_one_ball(arr):\n    n = len(arr)\n    if n == 0:\n        return True\n    \n    arr.sort()\n    \n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return True\n    \n    return False"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def move_one_ball(arr):\n    n = len(arr)\n    if n == 0:  # if array is empty return True\n        return True\n\n    for i in range(n):\n        min_idx = i\n        for j in range(i+1, n):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        \n        # swap arr[i] and arr[min_idx]\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n\n        # check if array is sorted\n        if i!= n-1 and arr[i] > arr[i+1]:\n            return False  # cannot perform right shift operation\n\n    return True  # can perform right shift operation"
    },
    {
        "number": 110,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Checking if all the elements of lst1 are even\n    for num in lst1:\n        if num % 2!= 0:\n            return \"NO\"\n    \n    # Checking if it is possible to exchange elements between the lst1 and lst2\n    # to make all the elements of lst1 to be even\n    for i in range(len(lst1)):\n        for j in range(len(lst2)):\n            if lst1[i] % 2 == 0 and lst2[j] % 2 == 0:\n                lst1[i], lst2[j] = lst2[j], lst1[i]\n                if all(num % 2 == 0 for num in lst1):\n                    return \"YES\"\n                else:\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n    \n    return \"NO\""
    },
    {
        "number": 110,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\n    # Create a set of even numbers from lst1\n    even_set = set(num for num in lst1 if num % 2 == 0)\n\n    # Check if any number from even_set is in lst2\n    for num in even_set:\n        if num in lst2:\n            return \"YES\"\n\n    # If no number from even_set is in lst2, it is not possible to exchange\n    return \"NO\""
    },
    {
        "number": 110,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Check if all elements in lst1 are even or not\n    if all(num % 2 == 0 for num in lst1):\n        return \"YES\"\n    else:\n        # If all elements in lst1 are odd, then we need to find the pair of odd numbers\n        # from lst2, that can be added to lst1 to make all elements in lst1 even\n        # We can do this by using a set difference operation\n        odd_set = set(lst1) - set(lst2)\n        for num in odd_set:\n            if num % 2!= 0:\n                lst1.append(num)\n                lst2.remove(num)\n                if all(num % 2 == 0 for num in lst1):\n                    return \"YES\"\n                else:\n                    lst1.remove(num)\n                    lst2.append(num)\n        return \"NO\""
    },
    {
        "number": 110,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    even_lst1 = [num for num in lst1 if num % 2 == 0]\n    if set(lst1) == set(even_lst1):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 110,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Check if the length of both lists is the same\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n    \n    # Check if all the elements of lst1 are even\n    for num in lst1:\n        if num % 2!= 0:\n            return \"NO\"\n    \n    # Check if we can exchange elements to make all elements of lst1 even\n    # We can exchange an element if it is odd and either\n    # 1. It is present in lst2\n    # 2. It is not present in lst2 and there are no odd numbers in lst2\n    exchange_count = 0\n    for num in lst1:\n        if num % 2!= 0:\n            if num in lst2 or all(num2 % 2 == 0 for num2 in lst2):\n                exchange_count += 1\n                lst2.remove(num)\n            else:\n                return \"NO\"\n    \n    return \"YES\""
    },
    {
        "number": 110,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\n    # create a set to store even numbers from lst1\n    even_set = set([num for num in lst1 if num % 2 == 0])\n\n    # create a list of odd numbers from lst2\n    odd_list = [num for num in lst2 if num % 2!= 0]\n\n    # check if the set and the list have at least one common element\n    if not even_set.isdisjoint(odd_list):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 110,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Check that lst1 and lst2 have the same length\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n\n    # Check that lst1 contains only even numbers\n    for num in lst1:\n        if num % 2!= 0:\n            return \"NO\"\n\n    # Count the number of odd numbers in lst2\n    num_odd = 0\n    for num in lst2:\n        if num % 2!= 0:\n            num_odd += 1\n\n    # Check that there are enough odd numbers in lst2 to replace all even numbers in lst1\n    if num_odd < sum(1 for num in lst1 if num % 2 == 0):\n        return \"NO\"\n\n    # Check that there are no more odd numbers in lst2 than needed to replace all even numbers in lst1\n    if num_odd > sum(1 for num in lst1 if num % 2 == 0) + sum(1 for num in lst1 if num % 2 == 0 and num in lst2):\n        return \"NO\"\n\n    # If all the conditions are met, return \"YES\"\n    return \"YES\""
    },
    {
        "number": 110,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Check if all elements of lst1 are even\n    if not all(elem % 2 == 0 for elem in lst1):\n        return \"NO\"\n    \n    # Check if the length of lst1 is greater than or equal to the length of lst2\n    if len(lst1) < len(lst2):\n        lst1, lst2 = lst2, lst1\n    \n    # Check if all elements of lst1 can be exchanged with elements of lst2\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 0 and lst2[i] % 2!= 0:\n            return \"NO\"\n    \n    return \"YES\""
    },
    {
        "number": 110,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Convert the lists to sets for faster membership testing\n    set1 = set(lst1)\n    set2 = set(lst2)\n    \n    # Check if all elements of lst1 are even\n    if not all(num % 2 == 0 for num in set1):\n        return \"NO\"\n    \n    # Check if all elements of lst2 are even\n    if not all(num % 2 == 0 for num in set2):\n        return \"NO\"\n    \n    # Check if there are at least as many even elements in lst1 as in lst2\n    if len(set1 - set2) < len(set2 - set1):\n        return \"NO\"\n    \n    # If all conditions are met, return \"YES\"\n    return \"YES\""
    },
    {
        "number": 110,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    if all(num % 2 == 0 for num in lst1):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Split the string into a list of lowercase letters\n    letters = test.lower().split()\n\n    # Create an empty dictionary to store the histogram\n    hist = {}\n\n    # Iterate over the letters and count the occurrences\n    for letter in letters:\n        hist[letter] = hist.get(letter, 0) + 1\n\n    # Find the letter(s) with the highest count\n    max_count = max(hist.values())\n\n    # Create a new dictionary containing only the letters with the highest count\n    result = {k: v for k, v in hist.items() if v == max_count}\n\n    return result"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\"\"\"\n\n    # Split the test string into a list of lowercase letters\n    letters = test.split()\n    # Create an empty dictionary to store the letter count\n    count_dict = {}\n\n    # Iterate through the list of letters and update the count in the dictionary\n    for letter in letters:\n        if letter in count_dict:\n            count_dict[letter] += 1\n        else:\n            count_dict[letter] = 1\n\n    # Find the letter with the highest count\n    max_count = max(count_dict.values())\n    max_letters = [key for key, value in count_dict.items() if value == max_count]\n\n    # Return a dictionary of the letter(s) with the highest count\n    return {max_letter: max_count for max_letter in max_letters}"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def histogram(test):\n    counts = {}\n    for letter in test.split():\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n    \n    max_count = max(counts.values())\n    max_letters = [letter for letter, count in counts.items() if count == max_count]\n    \n    return {letter: counts[letter] for letter in max_letters}"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def histogram(test):\n    # Split the string into a list of words\n    words = test.split()\n\n    # Initialize a dictionary to store the result\n    result = {}\n\n    # Loop over the words and count the occurrences of each letter\n    for word in words:\n        for letter in word:\n            if letter in result:\n                result[letter] += 1\n            else:\n                result[letter] = 1\n\n    # Find the most repeated letter(s) and add them to the result dictionary\n    max_count = max(result.values())\n    max_letters = [k for k, v in result.items() if v == max_count]\n    result = {}\n    for letter in max_letters:\n        result[letter] = max_count\n\n    return result"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    histogram = {}\n    for letter in test.split():\n        if letter in histogram:\n            histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n    max_count = max(histogram.values())\n    result = {}\n    for letter, count in histogram.items():\n        if count == max_count:\n            result[letter] = count\n    return result"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n    # create a dictionary to store the letter count\n    letter_count = {}\n\n    # split the test string into a list of letters\n    letters = test.split()\n\n    # iterate over the list of letters and update the letter count\n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n\n    # find the letter(s) with the highest count\n    max_count = max(letter_count.values())\n\n    # create a new dictionary containing only the letters with the highest count\n    result = {}\n    for letter, count in letter_count.items():\n        if count == max_count:\n            result[letter] = count\n\n    return result"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\"\"\"\n    \n    # Split the input string into a list of characters\n    chars = test.split()\n    \n    # Create an empty dictionary to store the letter counts\n    counts = {}\n    \n    # Iterate over the list of characters\n    for char in chars:\n        # If the character is already in the dictionary, increment its count\n        if char in counts:\n            counts[char] += 1\n        # Otherwise, add the character to the dictionary with a count of 1\n        else:\n            counts[char] = 1\n            \n    # Find the maximum count in the dictionary\n    max_count = max(counts.values())\n    \n    # Create a new dictionary with only the letters with the maximum count\n    result = {k: v for k, v in counts.items() if v == max_count}\n    \n    return result"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\"\"\"\n    \n    # Split the input string into individual letters\n    letters = test.split()\n    \n    # Initialize an empty dictionary to hold the letter frequencies\n    freq = {}\n    \n    # Loop through each letter in the input string\n    for letter in letters:\n        # If the letter is already in the dictionary, increment its count\n        if letter in freq:\n            freq[letter] += 1\n        # Otherwise, add the letter to the dictionary with a count of 1\n        else:\n            freq[letter] = 1\n    \n    # Initialize a variable to hold the maximum frequency seen so far\n    max_freq = 0\n    \n    # Initialize an empty list to hold the letters with the maximum frequency\n    max_letters = []\n    \n    # Loop through each letter and its frequency in the dictionary\n    for letter, count in freq.items():\n        # If the frequency is greater than the maximum frequency seen so far,\n        # update the maximum frequency and empty the list of maximum letters\n        if count > max_freq:\n            max_freq = count\n            max_letters = [letter]\n        # If the frequency is equal to the maximum frequency seen so far,\n        # add the letter to the list of maximum letters\n        elif count == max_freq:\n            max_letters.append(letter)\n    \n    # Return the dictionary of maximum letters and their frequency\n    return {letter: max_freq for letter in max_letters}"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \"\"\"\n    freq = {}\n    for char in test.split():\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    max_freq = max(freq.values())\n    result = {}\n    for char, count in freq.items():\n        if count == max_freq:\n            result[char] = count\n    return result"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\"\"\"\n\n    # create a dictionary to store the count of each letter\n    hist = {}\n\n    # split the string into individual letters\n    letters = test.split()\n\n    # loop through each letter and update the count in the dictionary\n    for letter in letters:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n\n    # find the letter(s) with the highest count\n    max_count = max(hist.values())\n\n    # create a new dictionary with only the letter(s) with the highest count\n    result = {}\n    for letter in hist:\n        if hist[letter] == max_count:\n            result[letter] = hist[letter]\n\n    return result"
    },
    {
        "number": 112,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    if result == result[::-1]:\n        return (result,True)\n    else:\n        return (result,False)"
    },
    {
        "number": 112,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    if result == result[::-1]:\n        return (result,True)\n    else:\n        return (result,False)"
    },
    {
        "number": 112,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_delete(s, c):\n    # Remove all characters in c from s\n    s = ''.join(filter(lambda x: x not in c, s))\n\n    # Check if s is a palindrome\n    is_palindrome = s == s[::-1]\n\n    return s, is_palindrome"
    },
    {
        "number": 112,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_delete(s, c):\n    # Convert both strings to sets to remove duplicates and compare them\n    s_set = set(s)\n    c_set = set(c)\n\n    # Remove characters in c from s and convert back to a string\n    result = ''.join(filter(lambda x: x not in c_set, s))\n\n    # Check if the result is a palindrome\n    if result == result[::-1]:\n        return (result, True)\n    else:\n        return (result, False)"
    },
    {
        "number": 112,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_delete(s, c):\n    \"\"\"\n    Deletes all the characters in s that are equal to any character in c.\n    Then checks if the resulting string is a palindrome.\n    Returns a tuple containing the result string and True/False for the check.\n    \"\"\"\n    result = ''.join(ch for ch in s if ch not in c)\n    if result == result[::-1]:\n        return (result, True)\n    else:\n        return (result, False)"
    },
    {
        "number": 112,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_delete(s, c):\n    \"\"\"\n    Task: We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = ''.join([char for char in s if char not in c])\n    is_palindrome = s == s[::-1]\n    return (s, is_palindrome)"
    },
    {
        "number": 112,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_delete(s, c):\n    \"\"\"\n    This function takes two strings s and c as input and returns a tuple containing the result string and True/False for the check.\n    \"\"\"\n    # Convert s and c to sets to remove duplicates\n    s = set(s)\n    c = set(c)\n    # Remove the characters in c from s\n    s = s - c\n    # Convert s back to a string\n    s = ''.join(s)\n    # Check if the result string is palindrome\n    is_palindrome = s == s[::-1]\n    return (s, is_palindrome)"
    },
    {
        "number": 112,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for char in c:\n        s = s.replace(char, '')\n    if s == s[::-1]:\n        return (s, True)\n    else:\n        return (s, False)"
    },
    {
        "number": 112,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_delete(s, c):\n    # create a set of characters to remove\n    remove_set = set(c)\n    # remove the characters from s\n    result = ''.join(c for c in s if c not in remove_set)\n    # check if the result string is a palindrome\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)"
    },
    {
        "number": 112,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_delete(s, c):\n    \"\"\"\n    Given two strings s and c, this function deletes all the characters in s that are equal to any character in c,\n    then checks if the resulting string is a palindrome.\n    If the string is a palindrome, it returns a tuple containing the palindrome and True, else it returns the original string\n    and False.\n    \"\"\"\n    s = ''.join([char for char in s if char not in c])\n    if s == s[::-1]:\n        return (s, True)\n    return (s, False)"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4 in the string 4 of the input.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1 in the string 1 of the input.\",\n     \"the number of odd elements 8 in the string 8 of the input.\"]\n    \"\"\"\n    result = []\n    for i in lst:\n        count = 0\n        for char in i:\n            if int(char) % 2!= 0:\n                count += 1\n        result.append(f\"the number of odd elements {count} in the string {i} of the input.\")\n    return result"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    output = []\n    for string in lst:\n        count = 0\n        for digit in string:\n            if int(digit) % 2!= 0:\n                count += 1\n        output.append(\"the number of odd elements {} in the string {} of the input.\".format(count, string))\n    return output"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    odd_count_lst = []\n    for string in lst:\n        count = 0\n        for digit in string:\n            if int(digit) % 2!= 0:\n                count += 1\n        odd_count_lst.append(\"the number of odd elements {}n the string {} of the input.\".format(count, string))\n    return odd_count_lst"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    output = []\n    for i in lst:\n        count = 0\n        for j in i:\n            if int(j) % 2!= 0:\n                count += 1\n        output.append(f\"the number of odd elements {count}n the str{i}ng {i} of the {lst}.\")\n    return output"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    output = []\n    for s in lst:\n        count = 0\n        for c in s:\n            if int(c) % 2!= 0:\n                count += 1\n        output.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, s, s, s))\n    return output"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for s in lst:\n        count = sum(int(digit) % 2 == 1 for digit in s)\n        result.append(f\"the number of odd elements {count}n the str{s} of the {lst.index(s)}n input.\")\n    return result"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4 in the string 4 of the input.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1 in the string 1 of the input.\",\n     \"the number of odd elements 8 in the string 8 of the input.\"]\n    \"\"\"\n    res = []\n    for i in range(len(lst)):\n        count = 0\n        for j in lst[i]:\n            if int(j) % 2!= 0:\n                count += 1\n        res.append(\"the number of odd elements {} in the string {} of the input.\".format(count, i+1))\n    return res"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\n    output = []\n    for i in range(len(lst)):\n        count = 0\n        for j in range(len(lst[i])):\n            if int(lst[i][j]) % 2!= 0:\n                count += 1\n        output.append(\"the number of odd elements {} in the string {} of the input.\".format(count, i))\n    return output"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    output = []\n    for i in range(len(lst)):\n        count = 0\n        for j in lst[i]:\n            if int(j) % 2!= 0:\n                count += 1\n        output.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, i+1, i+1, i+1))\n    return output"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4 in the string 4 of the input.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1 in the string 1 of the input.\",\n     \"the number of odd elements 8 in the string 8 of the input.\"]\n    \"\"\"\n    output = []\n    for i in range(len(lst)):\n        count = 0\n        for j in range(len(lst[i])):\n            if int(lst[i][j]) % 2 == 1:\n                count += 1\n        output.append(f\"the number of odd elements {count} in the string {i+1} of the input.\")\n    return output"
    },
    {
        "number": 114,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n = len(nums)\n    if n == 0:\n        return 0\n    \n    min_sum = float('inf')\n    current_sum = 0\n    \n    for i in range(n):\n        current_sum += nums[i]\n        if current_sum < 0:\n            current_sum = 0\n        \n        if current_sum < min_sum:\n            min_sum = current_sum\n    \n    return min_sum"
    },
    {
        "number": 114,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n = len(nums)\n    if n == 1:\n        return nums[0]\n    else:\n        min_sum = float('inf')\n        for i in range(n):\n            current_sum = sum(nums[i:])\n            if current_sum < min_sum:\n                min_sum = current_sum\n        return min_sum"
    },
    {
        "number": 114,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n\n    min_subarray_sum = float('inf')\n    current_subarray_sum = 0\n\n    for i in range(len(nums)):\n        current_subarray_sum += nums[i]\n        if current_subarray_sum < 0:\n            current_subarray_sum = 0\n        if current_subarray_sum < min_subarray_sum:\n            min_subarray_sum = current_subarray_sum\n\n    return min_subarray_sum"
    },
    {
        "number": 114,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    \n    start = 0\n    end = 0\n    curr_sum = nums[0]\n    min_sum = curr_sum\n    \n    while end < len(nums):\n        if curr_sum < 0:\n            curr_sum = 0\n            start = end + 1\n        else:\n            curr_sum += nums[end]\n            end += 1\n        \n        if curr_sum < min_sum:\n            min_sum = curr_sum\n            \n    return min_sum"
    },
    {
        "number": 114,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    curr_sum = 0\n    start_index = 0\n    \n    for end_index in range(len(nums)):\n        curr_sum += nums[end_index]\n        while curr_sum > min_sum:\n            curr_sum -= nums[start_index]\n            start_index += 1\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n            \n    return min_sum"
    },
    {
        "number": 114,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    # Initialize the variables\n    min_sum = float('inf')\n    curr_sum = 0\n    \n    # Loop through the array\n    for num in nums:\n        # Add the current number to the current sum\n        curr_sum += num\n        \n        # If the current sum is smaller than the current minimum sum, update the minimum sum\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n        \n        # If the current sum is negative, reset it to zero to avoid negative sub-arrays\n        if curr_sum < 0:\n            curr_sum = 0\n    \n    return min_sum"
    },
    {
        "number": 114,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n\n    # initialize variables to store the current sum and the minimum sum seen so far\n    curr_sum = nums[0]\n    min_sum = nums[0]\n\n    # loop through the array, updating the current sum and the minimum sum seen so far\n    for i in range(1, len(nums)):\n        curr_sum = max(nums[i], curr_sum + nums[i])\n        min_sum = min(min_sum, curr_sum)\n\n    return min_sum"
    },
    {
        "number": 114,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num\n        \n        if current_sum < 0:\n            current_sum = 0\n            \n        if current_sum < min_sum:\n            min_sum = current_sum\n            \n    return min_sum"
    },
    {
        "number": 114,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    \n    # Initialize the variables\n    min_sum = float('inf')\n    curr_sum = 0\n    \n    # Loop through the array\n    for num in nums:\n        curr_sum += num\n        \n        # If the current sum is smaller than the current minimum sum, update the minimum sum\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n        \n        # If the current sum becomes negative, reset it to zero to try a new sub-array\n        if curr_sum < 0:\n            curr_sum = 0\n    \n    return min_sum"
    },
    {
        "number": 114,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    n = len(nums)\n    if n == 0:\n        return 0\n    if n == 1:\n        return nums[0]\n    min_sum = float('inf')\n    current_sum = 0\n    for i in range(n):\n        current_sum += nums[i]\n        if current_sum < 0:\n            current_sum = 0\n        elif i == n - 1 or current_sum < min_sum:\n            min_sum = current_sum\n    return min_sum"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_fill(grid, capacity):\n    import math\n    rows = len(grid)\n    cols = len(grid[0])\n    num_buckets = math.ceil(rows/capacity)\n    \n    # Initialize the bucket counts\n    bucket_counts = [0]*num_buckets\n    \n    # Fill the buckets\n    for row in grid:\n        for i in range(num_buckets):\n            bucket_counts[i] += sum(row[i*capacity:(i+1)*capacity])\n    \n    # Calculate the maximum capacity that can be filled\n    max_capacity = min(capacity, rows)\n    \n    # Calculate the minimum number of buckets needed\n    num_buckets_needed = math.ceil(max_capacity/capacity)\n    \n    # Calculate the minimum number of times the buckets need to be lowered\n    min_num_lowerings = num_buckets - num_buckets_needed\n    \n    # Calculate the number of times the buckets need to be lowered\n    num_lowerings = sum(bucket_counts[:num_buckets_needed])\n    \n    # Return the minimum number of times the buckets need to be lowered\n    return min_num_lowerings if num_lowerings <= capacity else -1"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_fill(grid, capacity):\n    m, n = len(grid), len(grid[0])\n    dp = [[0] * n for _ in range(m)]\n    res = 0\n\n    for i in range(m):\n        j = 0\n        while j < n:\n            if grid[i][j] == 1:\n                res += 1\n                if j == 0:\n                    dp[i][j] = 1\n                elif dp[i][j-1] + 1 <= capacity:\n                    dp[i][j] = dp[i][j-1] + 1\n                else:\n                    dp[i][j] = capacity\n            else:\n                dp[i][j] = 0\n            j += 1\n\n    return res"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "Let's write code to implement this approach:"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_fill(grid, capacity):\n    rows = len(grid)\n    cols = len(grid[0])\n    bucket_count = rows * cols // capacity + 1\n    buckets = [0] * bucket_count\n\n    # Calculate the total volume in each well\n    total_volume = sum(1 for row in grid for well in row if well == 1)\n\n    # Initialize the buckets with water from each well\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                bucket_index = i * cols + j\n                volume = min(buckets[bucket_index], capacity)\n                total_volume -= volume\n                buckets[bucket_index] -= volume\n                if total_volume == 0:\n                    return i * cols + j\n\n    # Empty the buckets into the wells\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                bucket_index = i * cols + j\n                volume = min(buckets[bucket_index], capacity)\n                buckets[bucket_index] -= volume\n                if buckets[bucket_index] == 0:\n                    return i * cols + j\n\n    # Return the total number of times we need to lower the buckets\n    return math.ceil(math.log2(bucket_count))"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_fill(grid, capacity):\n    rows, cols = len(grid), len(grid[0])\n    bucket_count = math.ceil(sum(1 for row in grid for cell in row if cell) / capacity)\n    filled = sum(1 for row in grid for cell in row if cell)\n    if bucket_count == 0:\n        return 0\n    if filled == rows * cols:\n        return 1 + max_fill(grid, capacity * 2)\n    elif filled == 0:\n        return max_fill(grid, capacity // 2)\n    elif filled % capacity == 0:\n        return max_fill(grid, capacity * 2)\n    else:\n        return max_fill(grid, capacity)"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_fill(grid, capacity):\n    n_rows = len(grid)\n    n_cols = len(grid[0])\n    \n    # Create a list of the indices of the empty wells\n    empty_wells = [(i, j) for i in range(n_rows) for j in range(n_cols) if grid[i][j] == 0]\n    \n    # Sort the empty wells by their depth, which is the sum of the row and column indices\n    empty_wells.sort(key=lambda x: x[0] + x[1])\n    \n    # Create a list of the available buckets and initialize the number of empty wells used\n    available_buckets = [capacity] * (n_rows * n_cols)\n    n_empty_wells_used = 0\n    \n    # Loop through the empty wells, filling them with water if possible\n    for i, j in empty_wells:\n        # Calculate the index of the corresponding bucket\n        bucket_index = i * n_cols + j\n        \n        # Check if there is enough water in the bucket to fill the well\n        if available_buckets[bucket_index] >= 1:\n            available_buckets[bucket_index] -= 1\n            n_empty_wells_used += 1\n            \n            # Check if the bucket is now full and should be moved to the next empty well\n            if available_buckets[bucket_index] == 0:\n                # Find the next empty well with the smallest depth\n                min_depth = n_rows + n_cols\n                min_well_index = -1\n                for k in range(n_empty_wells_used):\n                    if available_buckets[k] == capacity and empty_wells[k][0] + empty_wells[k][1] < min_depth:\n                        min_depth = empty_wells[k][0] + empty_wells[k][1]\n                        min_well_index = k\n                \n                # Move the bucket to the next empty well\n                if min_well_index!= -1:\n                    available_buckets[bucket_index] = 0\n                    available_buckets[min_well_index] = capacity\n    \n    return n_empty_wells_used"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_fill(grid, capacity):\n    # Initialize variables\n    n = len(grid)\n    m = len(grid[0])\n    count = 0\n\n    # Loop through each well\n    for i in range(n):\n        for j in range(m):\n            # If the well is not empty, fill the bucket\n            if grid[i][j] == 1:\n                # Calculate the number of buckets required\n                num_buckets = math.ceil(grid[i][j] / capacity)\n\n                # If the number of buckets required is less than the well's value, fill the entire well with buckets\n                if num_buckets == 1:\n                    count += 1\n                # If the number of buckets required is greater than the well's value, fill the bucket and continue with next well\n                elif num_buckets > 1:\n                    count += num_buckets - 1\n\n    # Return the number of times the buckets need to be lowered\n    return count"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_fill(grid, capacity):\n    rows = len(grid)\n    cols = len(grid[0])\n    \n    # Count the number of units of water in each well\n    num_units = [[0 for j in range(cols)] for i in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                num_units[i][j] = 1\n    \n    # Sort the wells by the number of units of water\n    sorted_wells = sorted(range(rows*cols), key=lambda k: num_units[k//cols][k%cols], reverse=True)\n    \n    # Initialize the buckets\n    num_buckets = rows*cols // capacity\n    buckets = [0 for i in range(num_buckets)]\n    \n    # Iterate over the wells and distribute the water to the buckets\n    num_fills = 0\n    for well in sorted_wells:\n        row = well // cols\n        col = well % cols\n        if grid[row][col] == 1:\n            # Find the bucket with the most remaining capacity\n            max_bucket = -1\n            max_remaining = 0\n            for b in range(num_buckets):\n                remaining = capacity - buckets[b]\n                if remaining > max_remaining:\n                    max_bucket = b\n                    max_remaining = remaining\n            if max_bucket == -1:\n                # All buckets are full\n                return -1\n            # Add the unit of water to the bucket\n            buckets[max_bucket] += 1\n            # Check if the bucket is now full\n            if buckets[max_bucket] == capacity:\n                num_fills += 1\n    \n    return num_fills"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_fill(grid, capacity):\n    # Get the number of rows and columns in the grid\n    num_rows = len(grid)\n    num_cols = len(grid[0])\n\n    # Initialize the bucket array with the capacity\n    bucket = [capacity for _ in range(num_rows)]\n\n    # Initialize the water level array with 0s\n    water_level = [[0 for _ in range(num_cols)] for _ in range(num_rows)]\n\n    # Initialize the counter for number of times we need to lower the buckets\n    num_times = 0\n\n    # Initialize the queue to store indices of the wells to be filled\n    queue = []\n\n    # Iterate over the rows of the grid\n    for i in range(num_rows):\n        # Iterate over the columns of the grid for each row\n        for j in range(num_cols):\n            # If the current well is not filled, add its index to the queue\n            if grid[i][j] == 0:\n                queue.append((i, j))\n\n    # While there are wells to be filled\n    while queue:\n        # Initialize the current index to be the first index in the queue\n        curr_idx = queue.pop(0)\n\n        # If the current bucket capacity is not enough to fill the current well\n        if bucket[curr_idx[0]] < 1:\n            # Add the current index back to the queue\n            queue.append(curr_idx)\n            continue\n\n        # If the current well has already been filled\n        if water_level[curr_idx[0]][curr_idx[1]] > 0:\n            continue\n\n        # Add the current well to the water level array\n        water_level[curr_idx[0]][curr_idx[1]] = 1\n\n        # Subtract 1 from the current bucket capacity\n        bucket[curr_idx[0]] -= 1\n\n        # Check if all the wells in the current row have been filled\n        if all(water_level[i][curr_idx[1]] > 0 for i in range(num_rows)):\n            # If all the wells in the current row have been filled,\n            # add the current row index to the queue\n            for j in range(num_cols):\n                queue.append((curr_idx[0], j))\n\n        # Check if all the wells in the current column have been filled\n        if all(water_level[curr_idx[0]][j] > 0 for j in range(num_cols)):\n            # If all the wells in the current column have been filled,\n            # add the current column index to the queue\n            for i in range(num_rows):\n                queue.append((i, curr_idx[1]))\n\n        # Check if all the wells in the current diagonal have been filled\n        if curr_idx[0] == curr_idx[1]:\n            # If all the wells in the current diagonal have been filled,\n            # add the current diagonal indices to the queue\n            for i in range(num_rows):\n                queue.append((i, i))\n\n        # Check if all the wells in the other diagonal have been filled\n        if curr_idx[0] + curr_idx[1] == num_cols - 1:\n            # If all the wells in the other diagonal have been filled,\n            # add the other diagonal indices to the queue\n            for i in range(num_rows):\n                queue.append((i, num_cols - 1 - i))\n\n        # Increment the counter for number of times we need to lower the buckets\n        num_times += 1\n\n    # Return the number of times we need to lower the buckets\n    return num_times"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_fill(grid, capacity):\n    # find the maximum height of water in each row\n    heights = [max(row) for row in grid]\n    \n    # calculate the number of times we need to lower the buckets\n    num_lowerings = 0\n    for h in heights:\n        # if we don't have any water, we don't need to lower the buckets\n        if h == 0:\n            continue\n        # if the height is greater than the bucket capacity, we need to fill the bucket\n        num_fills = h // capacity + 1\n        # if the height is less than the bucket capacity, we don't need to fill the bucket\n        if num_fills == 1:\n            continue\n        # otherwise, we need to fill the bucket num_fills - 1 times\n        num_lowerings += num_fills - 1\n    \n    return num_lowerings"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(n):\n        count = 0\n        while n:\n            n &= n - 1\n            count += 1\n        return count\n    \n    return sorted(arr, key=lambda x: (count_ones(x), x))"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_array(arr):\n    # Convert each integer to a binary string\n    binary_strings = [bin(i)[2:] for i in arr]\n    \n    # Pad each binary string with leading zeros to ensure equal length\n    max_length = max(len(s) for s in binary_strings)\n    binary_strings = [s.zfill(max_length) for s in binary_strings]\n    \n    # Sort the binary strings by number of ones in ascending order\n    sorted_strings = sorted(binary_strings, key=lambda s: s.count('1'), reverse=False)\n    \n    # Convert each sorted binary string back to an integer and return the sorted array\n    sorted_arr = [int(s, 2) for s in sorted_strings]\n    return sorted_arr"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def binary_ones(num):\n        count = 0\n        while num > 0:\n            count += num & 1\n            num >>= 1\n        return count\n\n    def cmp_func(x, y):\n        if binary_ones(x)!= binary_ones(y):\n            return binary_ones(x) - binary_ones(y)\n        else:\n            return x - y\n\n    return sorted(arr, key=cmp_to_key(cmp_func))"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def count_ones(n):\n        \"\"\"\n        Counts the number of ones in the binary representation of n\n        \"\"\"\n        count = 0\n        while n:\n            if n & 1:\n                count += 1\n            n >>= 1\n        return count\n\n    def cmp(a, b):\n        \"\"\"\n        Compares two integers a and b. If a has less ones in its binary representation, it comes first.\n        If they have the same number of ones, then the one with the smaller decimal value comes first.\n        \"\"\"\n        return (count_ones(a), a) - (count_ones(b), b)\n\n    return sorted(arr, key=cmp_to_key(cmp))"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(abs(x)).count('1'), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_array(arr):\n    # Count the number of ones in binary representation of each number\n    ones = [bin(num).count('1') for num in arr]\n    # Sort the array based on number of ones and decimal value\n    sorted_arr = sorted(zip(arr, ones), key=lambda x: (x[1], x[0]))\n    # Return sorted array\n    return [num for num, _ in sorted_arr]\n"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr.sort(key=lambda x: (count_ones(x), x))\n    return arr\n\n\ndef count_ones(n):\n    \"\"\"\n    Helper function to count the number of ones in binary representation of a non-negative integer\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary_ones(n):\n        \"\"\"\n        Count the number of ones in the binary representation of n.\n        \"\"\"\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n\n    def sort_key(n):\n        \"\"\"\n        Return a tuple that can be used as a sort key for n.\n        The first element of the tuple is the number of ones in the binary representation of n,\n        and the second element is n itself.\n        \"\"\"\n        return (binary_ones(n), n)\n\n    return sorted(arr, key=sort_key)"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n    arr.sort(key=lambda x: (count_ones(x), x))\n    return arr\n\ndef count_ones(n):\n    \"\"\"\n    Counts the number of ones in the binary representation of a non-negative integer n.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    \n    # create a list of tuples where each tuple contains the number of ones in the binary representation and the number itself\n    binary_ones = [(bin(num).count('1'), num) for num in arr]\n    \n    # sort the list based on the number of ones in the binary representation in ascending order and then on the decimal value in case of a tie\n    sorted_binary_ones = sorted(binary_ones)\n    \n    # create a list of numbers based on the sorted tuples\n    sorted_arr = [num for ones, num in sorted_binary_ones]\n    \n    return sorted_arr"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if not s:\n        return []\n\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    consonants = [chr(i) for i in range(ord('a'), ord('z')+1) if chr(i) not in vowels]\n\n    words = s.split()\n    result = []\n\n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char in consonants:\n                consonant_count += 1\n        if consonant_count == n:\n            result.append(word)\n\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    # Convert string to list of words\n    words = s.split()\n\n    # Initialize list to store words with n consonants\n    result = []\n\n    # Loop through each word\n    for word in words:\n        # Initialize count of consonants\n        count = 0\n        # Loop through each character in the word\n        for char in word:\n            # If the character is a consonant, increment count\n            if char.isalpha() and char.lower() not in \"aeiou\":\n                count += 1\n                # If count reaches n, add word to result and break out of inner loop\n                if count == n:\n                    result.append(word)\n                    break\n            # If the character is a space, reset count\n            elif char.isspace():\n                count = 0\n\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Convert the input string to lowercase and split it into words\n    words = s.lower().split()\n    # Initialize an empty list to store the selected words\n    selected_words = []\n    # Iterate over the words in the list\n    for word in words:\n        # Initialize a counter for the number of consonants in the word\n        count = 0\n        # Iterate over the letters in the word\n        for letter in word:\n            if letter not in \"aeiou\":\n                count += 1\n        # If the word contains exactly n consonants, append it to the selected words list\n        if count == n:\n            selected_words.append(word)\n    # Return the selected words list\n    return selected_words"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Split the string into a list of words\n    words = s.split()\n\n    # Create an empty list to store the selected words\n    selected_words = []\n\n    # Iterate over each word in the list\n    for word in words:\n        # Count the number of consonants in the word\n        num_consonants = sum(1 for letter in word if letter.isalpha() and not letter.isvowel())\n\n        # If the word has exactly n consonants, add it to the selected words list\n        if num_consonants == n:\n            selected_words.append(word)\n\n    # Return the selected words list\n    return selected_words"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    # Splitting the string into a list of words\n    words = s.split()\n\n    # Creating an empty list to store the selected words\n    selected_words = []\n\n    # Looping through each word in the list\n    for word in words:\n        # Getting the count of consonants in the word\n        consonant_count = 0\n        for char in word:\n            if char.isalpha() and not char.isupper():\n                consonant_count += 1\n\n        # If the count of consonants is equal to n, then add the word to the selected words list\n        if consonant_count == n:\n            selected_words.append(word)\n\n    # Returning the selected words list\n    return selected_words"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    \"\"\"\n    # check if the string is empty\n    if not s:\n        return []\n\n    # convert the string to lowercase\n    s = s.lower()\n\n    # split the string into words\n    words = s.split()\n\n    # initialize an empty list to store the selected words\n    selected_words = []\n\n    # loop through each word in the list\n    for word in words:\n        # count the number of consonants in the word\n        consonant_count = 0\n        for char in word:\n            if char.isalpha() and not char.isvowel():\n                consonant_count += 1\n\n        # if the number of consonants is equal to n, append the word to the list of selected words\n        if consonant_count == n:\n            selected_words.append(word)\n\n    return selected_words"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n        if len([c for c in word if c.isalpha() and not c.isupper()]) == n:\n            result.append(word)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    \"\"\"\n    # Remove all punctuation marks from the string\n    s = s.replace(\",\", \"\").replace(\".\", \"\").replace(\"!\", \"\").replace(\"?\", \"\").replace(\";\", \"\").replace(\":\", \"\")\n    \n    # Split the string into a list of words\n    words = s.split()\n    \n    # Create an empty list to store the words that contain n consonants\n    result = []\n    \n    # Loop through the words in the list\n    for word in words:\n        # Count the number of consonants in the word\n        consonant_count = 0\n        for char in word:\n            if char.lower() in ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']:\n                consonant_count += 1\n                \n        # If the number of consonants in the word is equal to n, append the word to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    \"\"\"\n    if not s:  # if string s is empty, return an empty list\n        return []\n    \n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    words = s.split()  # split the string into words\n    \n    # create a dictionary to store the number of consonants in each word\n    consonant_count = {}\n    for word in words:\n        consonant_count[word] = sum(1 for letter in word if letter.lower() not in vowels)\n    \n    # create a list of words that have exactly n consonants\n    selected_words = [word for word, count in consonant_count.items() if count == n]\n    \n    return selected_words"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n    # Create an empty list to store the result\n    result = []\n    # Iterate over each word in the list\n    for word in words:\n        # Count the number of consonants in the word\n        consonants = sum(1 for c in word if c.isalpha() and c.islower() and c not in \"aeiou\")\n        # If the number of consonants is equal to n, add the word to the result\n        if consonants == n:\n            result.append(word)\n    # Return the result\n    return result"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_closest_vowel(word):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    consonants = set('bcdfghjklmnpqrstvwxyz')\n    closest_vowel = ''\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            closest_vowel = word[i]\n            break\n        elif word[i] in consonants:\n            break\n    return closest_vowel"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_closest_vowel(word):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    for i in range(len(word)-2, -1, -1):\n        if word[i] not in vowels:\n            for j in range(i+2, len(word)):\n                if word[j] in vowels:\n                    return word[j]\n    return ''"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n    \n    You may assume that the given string contains English letter only.\n    \n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    consonants = set(['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'])\n    word_set = set(word.lower())\n    closest_vowel = ''\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            continue\n        if word[i] in consonants:\n            if i == 0:\n                continue\n            if word[i-1] in vowels:\n                closest_vowel = word[i]\n                break\n            else:\n                continue\n        else:\n            continue\n    return closest_vowel.upper()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    right_vowels = \"\"\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels and word[i]!= word[-1] and word[i]!= word[0]:\n            right_vowels += word[i]\n    if right_vowels:\n        return right_vowels[0]\n    else:\n        return \"\""
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_closest_vowel(word):\n    vowels = set('aeiouAEIOU')\n    right_consonants = [c for c in word if c not in vowels and c!= '']\n    for i in range(len(right_consonants)-1):\n        if right_consonants[i+1] in vowels:\n            return right_consonants[i+1]\n    return ''"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels and word[i] not in \"aeiouAEIOU\":\n            if not result or abs(ord(word[i])-ord(result)) > 1:\n                result = word[i]\n    return result"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(1, len(word)):\n        if word[i] in vowels:\n            if word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n    return ''"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_closest_vowel(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    right_consonants = [char for char in word if char.lower() not in vowels and char.isalpha()]\n    if len(right_consonants) >= 2:\n        right_vowel = [char for char in word if char.lower() in vowels and char.isalpha()][-1]\n        left_vowel = [char for char in word if char.lower() in vowels and char.isalpha()][-2]\n        right_vowel_index = word.index(right_vowel)\n        left_vowel_index = word.index(left_vowel)\n        closest_vowel = ''\n        if right_vowel_index > left_vowel_index + 1:\n            closest_vowel = right_vowel\n        elif left_vowel_index > right_vowel_index + 1:\n            closest_vowel = left_vowel\n        return closest_vowel\n    else:\n        return ''"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_closest_vowel(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            if i == 0 or i == len(word)-1:\n                return ''\n            else:\n                if word[i-1] not in vowels and word[i+1] not in vowels:\n                    return word[i]\n    return ''"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    i = len(word) - 1\n    while i > 0:\n        if word[i].lower() in vowels:\n            j = i - 1\n            while j >= 0 and word[j].isalpha():\n                j -= 1\n            if j < 0:\n                return ''\n            if word[j].lower() not in vowels:\n                return word[j].upper()\n            else:\n                return ''\n        i -= 1\n    return ''"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def match_parens(lst):\n    # Combine the two strings into one\n    s = ''.join(lst)\n\n    # Initialize a stack to keep track of open parentheses\n    stack = []\n\n    # Loop over the characters in the string\n    for c in s:\n        # If we encounter an open parenthesis, push it onto the stack\n        if c == '(':\n            stack.append(c)\n        # If we encounter a close parenthesis, pop an open parenthesis from the stack\n        elif c == ')':\n            if not stack:\n                # If the stack is empty, we don't have any matching open parenthesis\n                return 'No'\n            stack.pop()\n\n    # If we make it through the entire string without finding any unmatched parentheses,\n    # the string is good and we return 'Yes'\n    return 'Yes'"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def match_parens(lst):\n    left, right = 0, 0\n    for c in ''.join(lst):\n        if c == '(':\n            left += 1\n        elif c == ')':\n            if left == 0:\n                return 'No'\n            left -= 1\n    return 'Yes' if left == 0 else 'No'"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def match_parens(lst):\n    # Count the number of open and close parentheses\n    open_count = lst.count('(')\n    close_count = lst.count(')')\n    \n    # Check if the counts are equal\n    if open_count!= close_count:\n        return 'No'\n    \n    # Check if the parentheses are balanced\n    stack = []\n    for p in lst:\n        if p == '(':\n            stack.append(p)\n        elif p == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    \n    # If the loop completes, it means all parentheses are balanced\n    return 'Yes'"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def match_parens(lst):\n    stack = []\n    for char in lst[0]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    if stack:\n        return 'No'\n    return 'Yes'"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def match_parens(lst):\n    s1, s2 = lst\n    stack = []\n    for c in s1:\n        if c == '(':\n            stack.append('(')\n        elif c == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    for c in s2:\n        if c == ')':\n            stack.append(')')\n        elif c == '(':\n            if stack and stack[-1] == ')':\n                stack.pop()\n            else:\n                return 'No'\n    if stack:\n        return 'No'\n    else:\n        return 'Yes'"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def match_parens(lst):\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    \"\"\"\n\n    # Convert the lists of strings into a single string\n    s = ''.join(lst)\n\n    # Check if the string is good\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n\n    if stack:\n        return 'No'\n    else:\n        return 'Yes'"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def match_parens(lst):\n    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return 'No'\n            stack.pop()\n    if len(stack) == 0:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def match_parens(lst):\n    s1, s2 = lst\n    stack = []\n    for c in s1:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    if stack:\n        return 'No'\n    stack = []\n    for c in s2:\n        if c == ')':\n            stack.append(c)\n        elif c == '(':\n            if not stack:\n                return 'No'\n            stack.pop()\n    if stack:\n        return 'No'\n    return 'Yes'"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    # concatenate the two strings in some order\n    s = ''.join(lst)\n    \n    # check if the resulting string is good\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n            \n    return 'Yes'"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    s1, s2 = lst\n    s1_stack = []\n    s2_stack = []\n    for c in s1:\n        if c == '(':\n            s1_stack.append(c)\n        else:\n            if s1_stack:\n                s1_stack.pop()\n            else:\n                s1_stack.append(c)\n    for c in s2:\n        if c == ')':\n            s2_stack.append(c)\n        else:\n            if s2_stack:\n                s2_stack.pop()\n            else:\n                s2_stack.append(c)\n    if s1_stack or s2_stack:\n        return 'No'\n    else:\n        return 'Yes'"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    \n    return sorted(arr, reverse=True)[:k]"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    # create a heap with the first k elements of the array\n    heap = arr[:k]\n    heapq.heapify(heap)\n\n    # for each element in the remaining elements of the array\n    for i in range(k, len(arr)):\n        # if the element is greater than the smallest element in the heap\n        if arr[i] > heap[0]:\n            # remove the smallest element from the heap\n            heapq.heappop(heap)\n            # add the new element to the heap\n            heapq.heappush(heap, arr[i])\n\n    # return the heap as a sorted list\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # Create a heap of size k\n    heap = arr[:k]\n    heapq.heapify(heap)\n\n    # Iterate over the remaining elements of the array\n    for i in range(k, len(arr)):\n        # If the current element is larger than the smallest element in the heap,\n        # remove the smallest element and add the current element\n        if arr[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arr[i])\n\n    # Return the heap sorted in descending order\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Return the first k elements of the sorted array\n    return arr[:k]"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Return the first k elements of the array\n    return arr[:k]\n"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Return the first k elements of the array\n    return arr[:k]"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    arr = sorted(arr, reverse=True)\n    return arr[:k]"
    },
    {
        "number": 121,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    sum_of_odds = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2!= 0:\n            sum_of_odds += lst[i]\n    return sum_of_odds"
    },
    {
        "number": 121,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    total = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0 and lst[i] % 2!= 0:\n            total += lst[i]\n    return total"
    },
    {
        "number": 121,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \"\"\"\n    total = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2!= 0:\n            total += lst[i]\n    return total"
    },
    {
        "number": 121,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\"\"\"\n    sum = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2!= 0:\n            sum += lst[i]\n    return sum"
    },
    {
        "number": 121,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2!= 0:\n            total += lst[i]\n    return total\n"
    },
    {
        "number": 121,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \"\"\"\n    result = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 == 1:\n            result += lst[i]\n    return result"
    },
    {
        "number": 121,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    sum = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2!= 0:\n            sum += lst[i]\n    return sum"
    },
    {
        "number": 121,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0 and lst[i] % 2!= 0:\n            sum += lst[i]\n    return sum"
    },
    {
        "number": 121,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    even_lst = [num for num in lst if num % 2 == 0]\n    sum_even_lst = sum(even_lst)\n    return sum_even_lst"
    },
    {
        "number": 121,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    sum = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2!= 0:\n            sum += lst[i]\n    return sum"
    },
    {
        "number": 122,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_elements(arr, k):\n    total_sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            total_sum += arr[i]\n    return total_sum"
    },
    {
        "number": 122,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total = 0\n    count = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            total += arr[i]\n            count += 1\n    return total"
    },
    {
        "number": 122,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_elements(arr, k):\n    total = 0\n    count = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            total += arr[i]\n            count += 1\n    if count <= 2:\n        return total\n    else:\n        return None"
    },
    {
        "number": 122,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n    total_sum = 0\n    for i in range(k):\n        if arr[i] <= 99:\n            total_sum += arr[i]\n    return total_sum"
    },
    {
        "number": 122,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total_sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            total_sum += arr[i]\n    return total_sum"
    },
    {
        "number": 122,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total_sum = 0\n    count = 0\n    for i in range(k):\n        if arr[i] < 10:\n            total_sum += arr[i]\n            count += 1\n        elif arr[i] >= 10 and arr[i] < 100:\n            total_sum += arr[i]\n            count += 1\n        else:\n            break\n    return total_sum"
    },
    {
        "number": 122,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total_sum = 0\n    for i in range(k):\n        if arr[i] < 10:\n            total_sum += arr[i]\n        elif arr[i] < 100:\n            total_sum += arr[i] // 10 + arr[i] % 10\n        else:\n            total_sum += arr[i] // 100 + arr[i] % 100\n    return total_sum"
    },
    {
        "number": 122,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total_sum = 0\n    for i in range(k):\n        if arr[i] <= 99:\n            total_sum += arr[i]\n    return total_sum"
    },
    {
        "number": 122,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Initialize the sum and the count of elements to 0\n    total_sum = 0\n    count = 0\n\n    # Iterate through the first k elements of arr\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            # Add the current element to the total sum\n            total_sum += arr[i]\n            # Increment the count of elements\n            count += 1\n\n    # If there are no elements with at most two digits, return 0\n    if count == 0:\n        return 0\n    else:\n        # Return the total sum\n        return total_sum"
    },
    {
        "number": 122,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total = 0\n    for num in arr[:k]:\n        if num >= 10 and num <= 99:\n            total += num\n    return total"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    sequence = []\n    while n!= 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n        sequence.append(n)\n    odd_sequence = [num for num in sequence if num % 2!= 0]\n    return sorted(odd_sequence)"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    odd_collatz = []\n    num = n\n    while num!= 1:\n        if num % 2 == 1:\n            odd_collatz.append(num)\n        num = num // 2 if num % 2 == 0 else 3*num + 1\n    if len(odd_collatz) == 0:\n        odd_collatz.append(1)\n    odd_collatz.sort()\n    return odd_collatz"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    odd_numbers = []\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2!= 0:\n            odd_numbers.append(n)\n    return sorted(odd_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    # Initialize variables\n    odd_collatz_seq = []\n    current = n\n    \n    # Loop until current becomes 1\n    while current!= 1:\n        \n        # Check if current is odd\n        if current % 2!= 0:\n            odd_collatz_seq.append(current)\n        \n        # Check if current is even\n        if current % 2 == 0:\n            current = current // 2\n            \n        # Check if current becomes 1\n        if current == 1:\n            odd_collatz_seq.append(current)\n            break\n            \n    # Return the sorted list of odd numbers in collatz sequence\n    return sorted(odd_collatz_seq)\n"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    odd_collatz = [x for x in collatz if x % 2 == 1]\n    odd_collatz.sort()\n    return odd_collatz"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    collatz_sequence = [n]\n    while collatz_sequence[-1]!= 1:\n        if collatz_sequence[-1] % 2 == 0:\n            collatz_sequence.append(collatz_sequence[-1] // 2)\n        else:\n            collatz_sequence.append(3 * collatz_sequence[-1] + 1)\n    odd_collatz_sequence = [num for num in collatz_sequence if num % 2!= 0]\n    return sorted(odd_collatz_sequence)\n"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    collatz_sequence = [n]\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_sequence.append(n)\n    odd_collatz = [x for x in collatz_sequence if x % 2!= 0]\n    return sorted(odd_collatz)"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    collatz_seq = [n]\n    odd_collatz = []\n    while collatz_seq[-1]!= 1:\n        if collatz_seq[-1] % 2 == 0:\n            collatz_seq.append(collatz_seq[-1] // 2)\n        else:\n            collatz_seq.append(collatz_seq[-1] * 3 + 1)\n        if collatz_seq[-1] % 2!= 0:\n            odd_collatz.append(collatz_seq[-1])\n\n    return sorted(odd_collatz)"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    sequence = [n]\n    while n!= 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n        sequence.append(n)\n    return sorted(filter(lambda x: x % 2!= 0, sequence))\n\n\nprint(get_odd_collatz(5))  # Output: [1, 5]"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    sequence = [n]\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        sequence.append(n)\n\n    odd_sequence = [x for x in sequence if x % 2!= 0]\n    return sorted(odd_sequence)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def valid_date(date):\n    \"\"\"Validates a given date string\"\"\"\n    if not date:\n        return False\n    \n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if year < 1 or year > 9999:\n        return False\n    \n    if month in [4, 6, 9, 11] and day < 1 or day > 30:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n        return False\n    \n    if month == 2:\n        if year % 4 == 0:\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    \n    return True"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def valid_date(date):\n    \"\"\"\n    You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    try:\n        day, month, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n\n    if not (1 <= day <= 31):\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if not (1 <= day <= 31):\n            return False\n    elif month in [4, 6, 9, 11]:\n        if not (1 <= day <= 30):\n            return False\n    elif month == 2:\n        if not (1 <= day <= 29):\n            return False\n    else:\n        return False\n\n    if not (1 <= month <= 12):\n        return False\n\n    return True"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def valid_date(date):\n    \"\"\"\n    Function to check if a date string is valid or not.\n    \"\"\"\n    # check if date string is not empty\n    if not date:\n        return False\n\n    # convert string to list of integers\n    date_list = [int(i) for i in date.split(\"-\")]\n\n    # check if number of days is valid\n    if date_list[0] in [4, 6, 9, 11] and date_list[1] > 30 or date_list[0] == 2 and date_list[1] > 29 or date_list[0] in [1, 3, 5, 7, 8, 10, 12] and date_list[1] > 31:\n        return False\n\n    # check if month is valid\n    if date_list[0] < 1 or date_list[0] > 12:\n        return False\n\n    # check if year is valid (we don't have to check for leap year)\n    if date_list[2] < 1 or date_list[2] > 9999:\n        return False\n\n    # if all checks are passed, return True\n    return True"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def valid_date(date_string):\n    \"\"\"Validates a date string in the format mm-dd-yyyy.\n\n    Args:\n    - date_string: a string representing a date in the format mm-dd-yyyy\n\n    Returns:\n    - True if the date is valid, False otherwise.\n    \"\"\"\n    if not date_string:\n        return False\n\n    try:\n        month, day, year = map(int, date_string.split('-'))\n    except ValueError:\n        return False\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day < 1 or day > 30:\n        return False\n    elif month == 2 and day < 1 or day > 29:\n        return False\n\n    return True"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def valid_date(date):\n    \"\"\"\n    You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. \n       And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. \n       And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 31:\n                return False\n        if year < 1000 or year > 9999:\n            return False\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def valid_date(date_string):\n    # Check if date string is empty\n    if not date_string:\n        return False\n\n    # Check if date string has 10 characters\n    if len(date_string)!= 10:\n        return False\n\n    # Check if date string has the format mm-dd-yyyy\n    try:\n        month, day, year = date_string.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12 or day < 1 or day > 31 or year < 0 or year > 9999:\n            return False\n    except ValueError:\n        return False\n\n    # Check if day of the month is valid for the month\n    if month == 4 or month == 6 or month == 9 or month == 11:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    else:\n        if day < 1 or day > 31:\n            return False\n\n    # If all checks passed, the date is valid\n    return True"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def valid_date(date):\n    \"\"\"\n    You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n    \"\"\"\n\n    # Splitting date string into month, day and year\n    month, day, year = map(int, date.split('-'))\n\n    # Checking if the date string is empty\n    if not date:\n        return False\n\n    # Checking if the number of days is valid for the given month\n    if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n        return False\n    elif month in [4, 6, 9, 11] and (day < 1 or day > 30):\n        return False\n    elif month == 2 and (day < 1 or day > 29):\n        return False\n\n    # Checking if the month is valid\n    if month < 1 or month > 12:\n        return False\n\n    # Checking if the date is in the correct format\n    if len(date)!= 10 or date[2]!= '-' or date[5]!= '-':\n        return False\n\n    # If all the rules are satisfied, the date is valid\n    return True"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def valid_date(date):\n    \"\"\"Validates a given date string\"\"\"\n    # Check if the date is empty\n    if not date:\n        return False\n    \n    # Check the number of days in the month and year\n    month, day, year = map(int, date.split('-'))\n    if month == 2:\n        if year % 4!= 0 or (year % 100 == 0 and year % 400!= 0):\n            max_days = 28\n        else:\n            max_days = 29\n    elif month in [4, 6, 9, 11]:\n        max_days = 30\n    else:\n        max_days = 31\n    \n    if day < 1 or day > max_days:\n        return False\n    \n    # Check the month is within the range of 1 and 12\n    if month < 1 or month > 12:\n        return False\n    \n    # Check the date format is mm-dd-yyyy\n    if len(date)!= 10 or date[2]!= '-' or date[5]!= '-':\n        return False\n    \n    return True"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n\n    # Convert the date string to a list of integers\n    date_list = [int(x) for x in date.split('-')]\n\n    # Check if the date list has 3 elements and not empty\n    if len(date_list)!= 3 or not all(date_list):\n        return False\n\n    # Check if the month is valid\n    if date_list[0] < 1 or date_list[0] > 12:\n        return False\n\n    # Check if the number of days is valid for the given month\n    if date_list[0] in [1, 3, 5, 7, 8, 10, 12] and date_list[1] < 1 or date_list[1] > 31:\n        return False\n    elif date_list[0] in [4, 6, 9, 11] and date_list[1] < 1 or date_list[1] > 30:\n        return False\n    elif date_list[0] == 2 and date_list[1] < 1 or date_list[1] > 29:\n        return False\n\n    # Check if the year is valid\n    if date_list[2] < 1000 or date_list[2] > 9999:\n        return False\n\n    return True"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def valid_date(date):\n    \"\"\"\n    This function validates the given date string and returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\n       And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\n       And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    :param date: The date string to validate.\n    :return: True if the date is valid, otherwise False.\n    \"\"\"\n\n    if not date:\n        return False\n\n    # Split the date string into month, day and year parts.\n    month, day, year = map(int, date.split('-'))\n\n    # Check if the year is a leap year.\n    is_leap_year = (year % 4 == 0 and year % 100!= 0) or year % 400 == 0\n\n    # Check if the month is valid.\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the day is valid.\n    if month == 2:\n        if day < 1 or day > 29:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    else:\n        if day < 1 or day > 31:\n            return False\n\n    # Check if the date is valid.\n    if day < 1 or day > 31 or month < 1 or month > 12 or year < 1:\n        return False\n\n    return True"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_words(txt):\n    # Check if there are whitespaces in the text\n    if'' in txt:\n        # Split text on whitespace\n        words = txt.split()\n    else:\n        # Check if there are commas in the text\n        if ',' in txt:\n            # Split text on commas\n            words = txt.split(',')\n        else:\n            # Count number of lower-case letters with odd order in the alphabet\n            count = 0\n            for c in txt:\n                if c.islower() and ord(c) % 2 == 1:\n                    count += 1\n            # Split text on the count\n            words = [txt[i:i+count] for i in range(0, len(txt), count)]\n    return words"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n    '''\n    if ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower():\n                if ord(char) % 2!= 0:\n                    count += 1\n        return count"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_words(txt):\n    words = txt.split()\n    if len(words) > 0:\n        return words\n    else:\n        if ',' in txt:\n            return txt.split(',')\n        else:\n            count = 0\n            for i in range(ord('a'), ord('z')+1):\n                if ord(chr(i)) % 2!= 0:\n                    count += 1\n            return count"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_words(txt):\n    # Splitting on whitespace\n    words = txt.split()\n    if len(words) > 0:\n        return words\n    \n    # Splitting on commas\n    words = txt.split(',')\n    if len(words) > 0:\n        return words\n    \n    # Counting lower-case letters with odd order\n    count = 0\n    for letter in txt.lower():\n        if ord(letter) % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_words(txt):\n    # check if comma exists in the text\n    if \",\" in txt:\n        return txt.split(\",\")\n    # check if whitespace exists in the text\n    elif \" \" in txt:\n        return txt.split()\n    # if no whitespace or comma exists, count number of odd-order lower-case letters\n    else:\n        count = 0\n        for char in txt:\n            if char.islower() and ord(char) % 2!= 0:\n                count += 1\n        return count"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_words(txt):\n    words = txt.split()\n    if not words:  # no whitespace or comma found\n        letters = [chr(i) for i in range(97, 123) if i % 2!= 0]  # odd-ordered lowercase letters\n        return len(letters)\n    else:\n        return words"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_words(txt):\n    if txt.find(' ') == -1:\n        words = txt.split(',')\n        for i in range(len(words)):\n            words[i] = words[i].strip()\n        return words\n    elif txt.find(',') == -1:\n        count = 0\n        for i in range(len(txt)):\n            if ord(txt[i]) % 2 == 1:\n                count += 1\n        return count\n    else:\n        words = txt.split()\n        for i in range(len(words)):\n            words[i] = words[i].strip()\n        return words"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_words(txt):\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25.\n    \"\"\"\n    if'' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for i in range(ord('a'), ord('z')+1):\n            if i % 2 == 1:\n                count += 1\n        return count"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    if ',' in txt:\n        return txt.split(',')\n    elif'' in txt:\n        return txt.split()\n    else:\n        count = 0\n        for i in range(97, 123):\n            if ord(chr(i)) % 2!= 0:\n                count += 1\n        return count\n"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_words(txt):\n    if'' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        # count the number of odd-order letters in the alphabet\n        count = 0\n        for c in txt.lower():\n            if ord(c) % 2 == 1:\n                count += 1\n        return count"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n    \n    if len(set(lst))!= len(lst):\n        return False\n    \n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    for i in range(len(lst)-1):\n        if lst[i] >= lst[i+1]:\n            if lst.count(lst[i]) > 1:\n                return False\n            else:\n                return False\n    return True"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n        elif lst[i] == lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n    if len(lst) == 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i + 1]:\n            return False\n        if lst.count(lst[i]) > 1:\n            return False\n    return True"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n\n    # Check if the list has at least one element\n    if len(lst) == 0:\n        return True\n\n    # Check if all elements in the list are equal\n    if lst.count(lst[0]) == len(lst):\n        return True\n\n    # Check if the list is sorted in ascending order\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_sorted(lst):\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_sorted(lst):\n    if len(lst) == 1:\n        return True\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    # Check if list is empty or has only 1 element\n    if len(lst) <= 1:\n        return True\n    \n    # Check if list has duplicates\n    for i in range(len(lst) - 1):\n        if lst[i] == lst[i+1]:\n            return False\n    \n    # Check if list is sorted in ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_sorted(lst):\n    if len(lst) == 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    # Check if list has more than 1 duplicate of the same number\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j]:\n                return False\n    \n    # Check if list is sorted in ascending order\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n    \"\"\"\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    # check if intervals intersect\n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n\n    # calculate intersection\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n\n    # check if intersection is a prime number\n    if is_prime(intersection_end - intersection_start + 1):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    intersection_length = intersection_end - intersection_start + 1\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if n is a prime number, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef intersection(interval1, interval2):\n    \"\"\"\n    Given two intervals, returns \"YES\" if their intersection length is a prime number,\n    \"NO\" otherwise.\n    \"\"\"\n    # If the intervals don't intersect, return \"NO\"\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    # Compute the intersection\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    # If the intersection length is 0, return \"NO\"\n    if end - start == 0:\n        return \"NO\"\n    # Compute the length of the intersection and check if it's a prime number\n    intersection_length = end - start + 1\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    # if intervals don't intersect\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    \n    # intersection\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    # if length of intersection is not prime\n    if not is_prime(end - start + 1):\n        return \"NO\"\n    \n    return \"YES\""
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    # Calculate the start and end points of the intersection\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    # If the two intervals don't intersect, return \"NO\"\n    if start > end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    length = end - start + 1\n    \n    # Check if the length is a prime number\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\"\"\"\n\n    # Check if the two intervals intersect\n    if max(interval1[0], interval2[0]) >= min(interval1[1], interval2[1]):\n        # If the two intervals intersect, calculate the intersection length\n        intersection_length = min(interval1[1], interval2[1]) - max(interval1[0], interval2[0]) + 1\n        \n        # Check if the intersection length is a prime number\n        if intersection_length > 1:\n            for i in range(2, intersection_length):\n                if intersection_length % i == 0:\n                    return \"NO\"\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\""
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_prime(n):\n    \"\"\"\n    Function to check whether a number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef intersection(interval1, interval2):\n    \"\"\"\n    Function to determine whether the length of intersection of two intervals is a prime number or not.\n    \"\"\"\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    intersection_interval = (max(interval1[0], interval2[0]), min(interval1[1], interval2[1]))\n    length = intersection_interval[1] - intersection_interval[0] + 1\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"Function to check if the intersection of two intervals is a prime number\"\"\"\n    start1, end1 = interval1\n    start2, end2 = interval2\n    # if the intervals don't intersect, return \"NO\"\n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    # calculate the intersection of the two intervals\n    start_i = max(start1, start2)\n    end_i = min(end1, end2)\n    # check if the length of the intersection is a prime number\n    length = end_i - start_i + 1\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_prime(n):\n    \"\"\"\n    A function to check if a number is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef intersection(interval1, interval2):\n    \"\"\"\n    A function to check if the length of intersection of two intervals is a prime number.\n    \"\"\"\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    # If the two intervals don't intersect, return \"NO\".\n    if start2 > end1 or start1 > end2:\n        return \"NO\"\n\n    # Calculate the length of intersection.\n    intersection_length = min(end1, end2) - max(start1, start2) + 1\n\n    # Check if the length of intersection is a prime number.\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\"\"\"\n    \n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start2 > end1 or start1 > end2:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    intersection_length = intersection_end - intersection_start + 1\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n    \nprint(intersection((1, 2), (2, 3))) # \"NO\"\nprint(intersection((-1, 1), (0, 4))) # \"NO\"\nprint(intersection((-3, -1), (-5, 5))) # \"YES\""
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n\n    if not arr:\n        return None\n    \n    magnitude = sum([abs(num) for num in arr])\n    product = 1\n    for num in arr:\n        product *= abs(num)\n        if num < 0:\n            product *= -1\n    \n    return magnitude * product\n"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    \n    total = 0\n    product = 1\n    \n    for num in arr:\n        total += abs(num)\n        product *= 1 if num > 0 else (-1 if num < 0 else 0)\n    \n    return total * product"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    \n    magnitudes = [abs(num) for num in arr]\n    signs = [1 if num >= 0 else -1 for num in arr]\n    product = 1\n    for sign in signs:\n        product *= sign\n    \n    return sum(magnitudes) * product"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    True\n    >>> prod_signs([0, 1]) == 0\n    True\n    >>> prod_signs([]) == None\n    True\n    \"\"\"\n\n    if len(arr) == 0:\n        return None\n\n    sign = 1\n    sum_of_magnitudes = 0\n    product_of_signs = 1\n\n    for num in arr:\n        if num == 0:\n            sum_of_magnitudes += 0\n            product_of_signs *= 1\n        elif num > 0:\n            sum_of_magnitudes += num\n            product_of_signs *= sign\n        else:\n            sum_of_magnitudes += abs(num)\n            product_of_signs *= -sign\n\n        sign *= -1\n\n    return sum_of_magnitudes * product_of_signs"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def prod_signs(arr):\n    if not arr:  # empty array\n        return None\n    sign_prod = 1  # initialize product of signs to 1\n    mag_sum = 0  # initialize sum of magnitudes to 0\n    for num in arr:\n        if num > 0:\n            mag_sum += num\n            sign_prod *= 1\n        elif num < 0:\n            mag_sum += abs(num)\n            sign_prod *= -1\n    return mag_sum * sign_prod"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    \n    if not arr:  # check if arr is empty\n        return None\n    \n    signs = []\n    for num in arr:\n        if num < 0:\n            signs.append(-1)\n        elif num > 0:\n            signs.append(1)\n        else:\n            signs.append(0)\n    \n    mag_sum = sum([abs(num) for num in arr])\n    prod_sign = 1\n    for sign in signs:\n        prod_sign *= sign\n    \n    return mag_sum * prod_sign"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    \n    if not arr:\n        return None\n    \n    product = 1\n    sign_product = 1\n    mag_sum = 0\n    \n    for num in arr:\n        mag_sum += abs(num)\n        product *= abs(num)\n        sign_product *= num\n    \n    return sign_product * mag_sum"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def prod_signs(arr):\n    if not arr:\n        return None\n    else:\n        mag_sum = sum([abs(num) for num in arr])\n        sign_prod = 1\n        for num in arr:\n            sign_prod *= 1 if num > 0 else -1 if num < 0 else 0\n        return mag_sum * sign_prod"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    mag_sum = 0\n    for num in arr:\n        if num > 0:\n            mag_sum += num\n        elif num < 0:\n            mag_sum -= num\n        else:\n            continue\n    sign_product = 1\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:\n            continue\n    return mag_sum * sign_product"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    \n    # Initialize variables\n    sum_mag = 0\n    prod_sign = 1\n    \n    # Iterate through the array\n    for num in arr:\n        # Calculate the magnitude and sign of the number\n        mag = abs(num)\n        sign = -1 if num < 0 else 1 if num > 0 else 0\n        \n        # Add the magnitude to the sum\n        sum_mag += mag\n        \n        # Multiply the product of signs by the sign of the number\n        prod_sign *= sign\n    \n    # Return the sum multiplied by the product of signs\n    return sum_mag * prod_sign"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Initialize variables\n    n = len(grid)\n    visited = set()\n    # Define helper function to check if a cell is a neighbor of another cell\n    def is_neighbor(i, j):\n        return i > 0 and i < n-1 and j > 0 and j < n-1\n    # Define helper function to check if a cell is valid\n    def is_valid(i, j):\n        return (i, j) not in visited and grid[i][j]!= -1\n    # Define helper function to update the minimum path\n    def update_min_path(i, j, path):\n        if len(path) == k:\n            # Compare path to current min path\n            if path < min_path:\n                min_path = path\n        else:\n            for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n                if is_neighbor(x, y) and is_valid(x, y):\n                    # Add cell to visited set\n                    visited.add((x, y))\n                    # Recursively update minimum path with new cell added\n                    new_path = path + [grid[x][y]]\n                    update_min_path(x, y, new_path)\n                    # Remove cell from visited set\n                    visited.remove((x, y))\n    # Initialize minimum path as empty list\n    min_path = []\n    # Iterate over all cells\n    for i in range(n):\n        for j in range(n):\n            if (i, j) not in visited and is_valid(i, j):\n                # Add starting cell to visited set\n                visited.add((i, j))\n                # Recursively update minimum path with starting cell\n                new_path = [grid[i][j]]\n                update_min_path(i, j, new_path)\n                # Remove starting cell from visited set\n                visited.remove((i, j))\n    return min_path"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def minPath(grid, k):\n    n = len(grid)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][0] = grid[i][0]\n        dp[0][i] = grid[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    ans = []\n    i, j = n-1, n-1\n    while k > 0:\n        ans.append(grid[i][j])\n        if i == 0 and j == 0:\n            break\n        if i > 0 and dp[i-1][j] < dp[i][j]:\n            i -= 1\n        elif j > 0 and dp[i][j-1] < dp[i][j]:\n            j -= 1\n        else:\n            if i > 0 and dp[i-1][j] == dp[i][j]:\n                i -= 1\n            else:\n                j -= 1\n        k -= 1\n    ans.reverse()\n    return ans"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n    \"\"\"\n    n = len(grid)\n    if k > n**2:\n        return []\n\n    # Initialize dp table\n    dp = [[float('inf') for _ in range(n)] for _ in range(n)]\n\n    # Initialize the first row and column\n    for i in range(n):\n        dp[i][0] = dp[0][i] = grid[i][0]\n\n    # Fill the rest of the dp table\n    for i in range(1, n):\n        for j in range(1, n):\n            if i == j:\n                dp[i][j] = grid[i][j]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n\n    # Find the minimum path\n    path = []\n    i, j = n-1, n-1\n    for _ in range(k):\n        if i == 0 and j == 0:\n            break\n        if dp[i-1][j] < dp[i][j-1]:\n            path.append(dp[i-1][j])\n            i -= 1\n        else:\n            path.append(dp[i][j-1])\n            j -= 1\n\n    # Reverse the path\n    path = path[::-1]\n\n    # Check if the path is valid\n    if not valid_path(grid, path):\n        return []\n\n    return path\n\n\ndef valid_path(grid, path):\n    \"\"\"\n    Check if the given path goes through all the unique integers in the range [1, N * N]\n    \"\"\"\n    n = len(grid)\n    seen = set()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] not in seen:\n                seen.add(grid[i][j])\n            else:\n                if path[seen.index(grid[i][j])]!= grid[i][j]:\n                    return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def minPath(grid, k):\n    # initialize a list to store the minimum path\n    min_path = []\n    # get the number of rows and columns in the grid\n    n = len(grid)\n    # initialize a dictionary to store the minimum path of length k starting from each cell\n    dp = { (i,j):[] for i in range(n) for j in range(n) }\n    # fill the dictionary using recursion\n    for i in range(n):\n        for j in range(n):\n            # if we are at the top-left cell, we can start from any other cell\n            if i == 0 and j == 0:\n                dp[(i,j)] = [grid[i][j]] + minPath(grid, k-1)\n            # if we are at the top cell, we can start from the cell to the left\n            elif i == 0:\n                dp[(i,j)] = [grid[i][j]] + dp[(i,j-1)]\n            # if we are at the left cell, we can start from the cell above\n            elif j == 0:\n                dp[(i,j)] = [grid[i][j]] + dp[(i-1,j)]\n            # if we are at any other cell, we can start from the cell to the left and above\n            else:\n                # get the minimum of the paths of length k starting from the cell to the left and above\n                left = dp[(i,j-1)]\n                up = dp[(i-1,j)]\n                min_path = []\n                for i1 in range(len(left)):\n                    for i2 in range(len(up)):\n                        if left[i1] < up[i2]:\n                            min_path.append(left[i1])\n                        else:\n                            min_path.append(up[i2])\n                dp[(i,j)] = [grid[i][j]] + min_path\n    # return the minimum path of length k starting from the bottom-right cell\n    return dp[(n-1,n-1)]"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n    def neighbors(i, j):\n        \"\"\"\n        Return the indices of the neighbor cells of the cell (i, j).\n        \"\"\"\n        if i > 0:\n            yield i-1, j\n        if i < N-1:\n            yield i+1, j\n        if j > 0:\n            yield i, j-1\n        if j < N-1:\n            yield i, j+1\n\n    N = len(grid)\n\n    # Initialize the distances array with infinity\n    distances = [[float('inf')] * N for _ in range(N)]\n\n    # Initialize the paths array with None\n    paths = [[None] * N for _ in range(N)]\n\n    # Set the distance of the starting cell to 0\n    distances[0][0] = 0\n\n    # Start the algorithm\n    for _ in range(k):\n        # Initialize the next distances array with infinity\n        next_distances = [[float('inf')] * N for _ in range(N)]\n\n        # Initialize the next paths array with None\n        next_paths = [[None] * N for _ in range(N)]\n\n        for i in range(N):\n            for j in range(N):\n                for ni, nj in neighbors(i, j):\n                    # Compute the distance to the neighbor cell\n                    dist = distances[i][j] + grid[ni][nj]\n\n                    # If the distance to the neighbor cell is smaller than\n                    # the current minimum distance, update the distances array\n                    if dist < next_distances[ni][nj]:\n                        next_distances[ni][nj] = dist\n\n                        # Update the paths array with the current path\n                        next_paths[ni][nj] = (i, j)\n\n        # Update the distances array for the next iteration\n        distances = next_distances\n\n        # Update the paths array for the next iteration\n        paths = next_paths\n\n    # Compute the values on the cells that the minimum path go through\n    i, j = k-1, k-1\n    values = [grid[i][j]]\n    while paths[i][j] is not None:\n        i, j = paths[i][j]\n        values.append(grid[i][j])\n    values.reverse()\n\n    return values"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def minPath(grid, k):\n    n = len(grid)\n    k -= 1\n    \n    # initialize dp array\n    dp = [[float('inf')]*n for _ in range(n)]\n    dp[0][0] = grid[0][0]\n    \n    # fill dp array\n    for i in range(n):\n        for j in range(n):\n            if i > 0:\n                dp[i][j] = min(dp[i][j], dp[i-1][j] + grid[i][j])\n            if j > 0:\n                dp[i][j] = min(dp[i][j], dp[i][j-1] + grid[i][j])\n    \n    # backtrack from end to start to find minimum path\n    path = []\n    i = n-1\n    j = n-1\n    for _ in range(k):\n        if i > 0 and dp[i][j] == dp[i-1][j] + grid[i][j]:\n            i -= 1\n        elif j > 0 and dp[i][j] == dp[i][j-1] + grid[i][j]:\n            j -= 1\n        else:\n            break\n    path.append(grid[i][j])\n    \n    i = n-1\n    j = n-1\n    for _ in range(k):\n        if i > 0 and dp[i][j] == dp[i-1][j] + grid[i][j]:\n            path.append(grid[i-1][j])\n            i -= 1\n        elif j > 0 and dp[i][j] == dp[i][j-1] + grid[i][j]:\n            path.append(grid[i][j-1])\n            j -= 1\n        else:\n            break\n    \n    return list(reversed(path))"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    n = len(grid)\n\n    # Initialize dp table to store minimum path length from each cell to the end\n    dp = [[float('inf')] * n for _ in range(n)]\n\n    # Initialize diagonal and forward diagonal elements to 1\n    for i in range(n):\n        dp[i][i] = 1\n        dp[i][i+1] = 1\n    \n    # Fill in the rest of the dp table\n    for i in range(n-2, -1, -1):\n        for j in range(i+2, n):\n            dp[i][j] = min(dp[i][k] + dp[k][j] for k in range(i+1, j))\n\n    # Backtrack from the minimum path length cell to the start cell to find the minimum path\n    path = [0] * k\n    cell = (0, 0)\n    for i in range(k):\n        min_length = float('inf')\n        for j in range(cell[0]-1, cell[0]+2):\n            for l in range(cell[1]-1, cell[1]+2):\n                if 0 <= j < n and 0 <= l < n and (j!= cell[0] or l!= cell[1]):\n                    if dp[cell[0]][cell[1]] + dp[j][l] < min_length:\n                        min_length = dp[cell[0]][cell[1]] + dp[j][l]\n                        path[i] = grid[j][l]\n        cell = (cell[0] + 1, cell[1])\n\n    return path\n"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessariliy distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    N = len(grid)\n    visited = set()\n    queue = [(0,0,0,[])]\n    while queue:\n        row, col, level, path = queue.pop(0)\n        if level == k:\n            return path\n        if (row, col) not in visited:\n            visited.add((row, col))\n            if level < k:\n                for r, c in ((row-1, col), (row+1, col), (row, col-1), (row, col+1)):\n                    if 0 <= r < N and 0 <= c < N:\n                        queue.append((r, c, level+1, path + [grid[r][c]]))\n    return []"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    n = len(grid)\n    INF = float('inf')\n\n    # dp[i][j][k] stores the minimum path of length k ending at cell (i, j)\n    dp = [[[INF] * (k+1) for _ in range(n)] for _ in range(n)]\n\n    # initialize the base cases\n    for i in range(n):\n        for j in range(n):\n            dp[i][j][1] = grid[i][j]\n\n    # fill the rest of the dp table\n    for length in range(2, k+1):\n        for i in range(n):\n            for j in range(n):\n                for di in range(-1, 2):\n                    for dj in range(-1, 2):\n                        if di == dj == 0:\n                            continue\n                        ni, nj = i + di, j + dj\n                        if 0 <= ni < n and 0 <= nj < n:\n                            dp[i][j][length] = min(dp[i][j][length], dp[ni][nj][length-1]) + grid[i][j]\n\n    # find the minimum path of length k\n    min_path = float('inf')\n    for i in range(n):\n        for j in range(n):\n            min_path = min(min_path, dp[i][j][k])\n\n    # reconstruct the minimum path\n    path = []\n    i, j = 0, 0\n    for length in range(k, 0, -1):\n        for di in range(-1, 2):\n            for dj in range(-1, 2):\n                if di == dj == 0:\n                    continue\n                ni, nj = i + di, j + dj\n                if 0 <= ni < n and 0 <= nj < n:\n                    if dp[ni][nj][length-1] == dp[i][j][length] - grid[i][j]:\n                        i, j = ni, nj\n                        path.append(grid[i][j])\n                        break\n\n    return list(reversed(path))"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarilty distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n    \"\"\"\n    n = len(grid)\n    visited = set()\n    queue = [(0, 0, k, [])]  # (row, col, remaining moves, path)\n    while queue:\n        row, col, remaining, path = queue.pop(0)\n        if (row, col) in visited:\n            continue\n        visited.add((row, col))\n        value = grid[row][col]\n        path.append(value)\n        if remaining == 1:\n            return path\n        # Add neighbor cells to queue\n        if row > 0:  # up\n            queue.append((row - 1, col, remaining - 1, path.copy()))\n        if col > 0:  # left\n            queue.append((row, col - 1, remaining - 1, path.copy()))\n        if row < n - 1:  # down\n            queue.append((row + 1, col, remaining - 1, path.copy()))\n        if col < n - 1:  # right\n            queue.append((row, col + 1, remaining - 1, path.copy()))\n    raise ValueError(\"No path found\")"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tri(n):\n    \"\"\"Returns a list of the first n+1 numbers of the Tribonacci sequence.\"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        tribonacci = [1, 3, 2]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                tribonacci.append(1 + i//2)\n            else:\n                tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i+1])\n        return tribonacci"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tri(n):\n    \"\"\"\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n\n    # Initialize the list with the first three values of the sequence\n    sequence = [3, 1, 2]\n\n    # Generate the remaining values of the sequence using the recurrence relation\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            sequence.append(1 + i // 2)\n        else:\n            sequence.append(sequence[i-1] + sequence[i-2] + sequence[i+1])\n\n    return sequence"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tri(n):\n    \"\"\"\n    This function returns a list of the first n + 1 numbers of the Tribonacci sequence.\n    \"\"\"\n    tri_list = [1, 3]\n    if n == 0:\n        return tri_list\n    elif n == 1:\n        return tri_list\n    elif n == 2:\n        return tri_list\n    \n    # Iterating from 3rd number to nth number\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            tri_list.append(tri_list[i-1] + tri_list[i-2])\n        else:\n            tri_list.append(tri_list[i-1] + tri_list[i-2] + tri_list[i-3])\n    \n    return tri_list"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n\n    # Initialize the list of the first n + 1 numbers of the Tribonacci sequence\n    sequence = [3]\n    # For each i from 1 to n, calculate the next number of the sequence and append it to the list\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sequence.append(1 + i // 2)\n        else:\n            sequence.append(sequence[i-1] + sequence[i-2] + sequence[i+1])\n    return sequence"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    tri_list = [3]  # initialize the first three numbers of the sequence\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            tri_list.append(1 + i // 2)\n        else:\n            tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i + 1])\n    return tri_list"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 2]\n    else:\n        tri_seq = [3, 2]\n        for i in range(2, n):\n            if i % 2 == 0:\n                tri_seq.append(1 + tri_seq[i-1] / 2)\n            else:\n                tri_seq.append(tri_seq[i-1] + tri_seq[i-2] + tri_seq[i+1])\n        return tri_seq\n\nprint(tri(3)) # Output: [1, 3, 2, 8]"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    tri_list = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tri_list.append(1 + i // 2)\n        else:\n            tri_list.append(tri_list[i-1] + tri_list[i-2] + tri_list[i+1])\n    return tri_list"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    seq = [3]\n    for i in range(n):\n        if i % 2 == 0:\n            seq.append(1 + i // 2)\n        else:\n            seq.append(seq[i-1] + seq[i-2] + seq[i+1])\n    return seq"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        tri_seq = [1, 3, 2]\n        for i in range(3, n+1):\n            if i%2 == 0:\n                tri_seq.append(1 + i/2)\n            else:\n                tri_seq.append(tri_seq[i-1] + tri_seq[i-2] + tri_seq[i+1])\n        return tri_seq"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n    elif n == 3:\n        return [1, 3, 2]\n    else:\n        tribonacci = [1, 3, 2]\n        for i in range(4, n + 1):\n            if i % 2 == 0:\n                tribonacci.append(1 + i // 2)\n            else:\n                tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i+1])\n        return tribonacci"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n        n //= 10\n    return product"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n    return product if product!= 1 else 0"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2!= 0:\n            product *= digit\n        n //= 10\n    if product == 1:\n        return 0\n    else:\n        return product"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2!= 0:\n            product *= int(digit)\n    return product if product!= 1 else 0"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n        n //= 10\n    return product"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # Convert n to a string and iterate over its characters\n    product = 1\n    for char in str(n):\n        # Convert the character back to an integer and check if it's odd\n        if int(char) % 2 == 1:\n            # If it's odd, multiply it with the product\n            product *= int(char)\n    # If all digits are even, return 0, else return the product\n    return 0 if product == 1 else product"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:  # odd digit\n            product *= digit\n        n //= 10\n    return product if product!= 1 else 0"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2!= 0:\n            product *= digit\n        n //= 10\n    return product"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n        n //= 10\n    if product == 1:\n        return 0\n    else:\n        return product"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n    return 0 if product == 1 else product"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                stack.append(char)\n    return bool(stack)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_nested(string):\n    stack = []\n    for c in string:\n        if c == '[':\n            stack.append(c)\n        elif c == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return bool(stack)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            stack.append(i)\n        elif string[i] == ']':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) > 0"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) > 0"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_nested(string):\n    stack = []\n    for c in string:\n        if c == '[':\n            stack.append(c)\n        elif c == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) > 0"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return True\n    return False"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n    '''\n    # initialize variables\n    count = 0\n    stack = []\n\n    # iterate through each character in the string\n    for char in string:\n        # if the character is an open bracket, push it onto the stack\n        if char == '[':\n            stack.append(char)\n            count += 1\n        # if the character is a close bracket, pop the top element from the stack\n        elif char == ']':\n            if len(stack) > 0:\n                stack.pop()\n                count -= 1\n        # if the stack is empty and the count is greater than 0, there is a valid subsequence with a nested bracket\n        if len(stack) == 0 and count > 0:\n            return True\n\n    # if the stack is not empty at the end of the iteration, there is no valid subsequence with a nested bracket\n    return len(stack) == 0 and count > 0"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n    \"\"\"\n\n    # Initialize variables for checking nested brackets\n    count = 0\n    prev_char = ''\n\n    # Iterate over each character in the string\n    for char in string:\n        # If the character is a square bracket\n        if char == '[':\n            # If the previous character was a square bracket\n            if prev_char == '[':\n                # Increment the count of nested brackets\n                count += 1\n            # If the previous character was a closing square bracket\n            elif prev_char == ']':\n                # Decrement the count of nested brackets\n                count -= 1\n            # If the previous character was neither a square bracket nor a closing square bracket\n            else:\n                # Set the count of nested brackets to 1\n                count = 1\n        # If the character is a closing square bracket\n        elif char == ']':\n            # If the count of nested brackets is greater than 0\n            if count > 0:\n                # Decrement the count of nested brackets\n                count -= 1\n            # If the count of nested brackets is 0\n            else:\n                # Set the count of nested brackets to -1\n                count = -1\n\n        # Update the previous character\n        prev_char = char\n\n    # If the count of nested brackets is greater than 0, there is a valid subsequence of brackets with at least one nested bracket\n    if count > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_nested(string):\n    stack = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            stack.append(i)\n        elif string[i] == ']':\n            if stack:\n                stack.pop()\n            else:\n                stack.append(i)\n    return bool(stack)\n\nprint(is_nested('[]')) # False\nprint(is_nested('[][]')) # False\nprint(is_nested('[]]]]]]][[[[[]')) # False\nprint(is_nested('[[]]')) # True\nprint(is_nested('[[]][[')) # True\nprint(is_nested('[[][]]')) # True"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_nested(string):\n    stack = []\n    for c in string:\n        if c == '[':\n            stack.append(c)\n        elif c == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) > 0"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n    \"\"\"\n    sum_of_squares = 0\n    \n    for num in lst:\n        if num < 0:\n            num = int(num) + 1\n            \n        num = int(num ** 2)\n        sum_of_squares += num\n        \n    return sum_of_squares\n"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\"\"\"\n    result = 0\n    for i in lst:\n        i = math.ceil(i)\n        result += i**2\n    return result"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    return sum([int(math.ceil(x))**2 for x in lst])"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\"\"\"\n    total_sum = 0\n    for num in lst:\n        total_sum += math.ceil(num) ** 2\n    return total_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    # Create a new list with the square of each element and round each element to the upper int(Ceiling)\n    new_lst = [int(math.ceil(num**2)) for num in lst]\n    \n    # Sum the new list\n    total = sum(new_lst)\n    \n    return total"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    \"\"\"\n    squared_sum = 0\n    for num in lst:\n        rounded_num = math.ceil(num)\n        squared_sum += rounded_num**2\n    return squared_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    lst = [math.ceil(i) for i in lst]  # Round each element in the list to the upper int(Ceiling) first\n    return sum([i**2 for i in lst])  # Return the sum of squared numbers in the given list\n"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef sum_squares(lst):\n    \"\"\"\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    total_sum = 0\n    for num in lst:\n        total_sum += int(math.ceil(num))**2\n    return total_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\"\"\"\n    \n    # Round each element in the list to the upper int(Ceiling)\n    lst = [math.ceil(x) for x in lst]\n    \n    # Calculate the sum of squared numbers\n    sum_of_squares = sum([x**2 for x in lst])\n    \n    # Return the sum of squared numbers\n    return sum_of_squares"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    \"\"\"\n    lst = [math.ceil(num) for num in lst]\n    return sum([num ** 2 for num in lst])"
    },
    {
        "number": 134,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False\n    \"\"\"\n\n    if len(txt) == 0:\n        return False\n\n    # check if last character is a letter and not part of a word\n    if txt[-1].isalpha() and \" \" not in txt[:-1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 134,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    if len(txt) == 0:\n        return False\n    else:\n        if txt[-1].isalpha() and not txt[-1].isspace():\n            return True\n        else:\n            return False"
    },
    {
        "number": 134,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    if len(txt) > 0 and txt[-1].isalpha() and not txt[-1].isspace():\n        return True\n    else:\n        return False"
    },
    {
        "number": 134,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return False\n    else:\n        last_char = txt[-1]\n        if last_char.isalpha() and not txt[:-1].isalpha():\n            return True\n        else:\n            return False\n\nprint(check_if_last_char_is_a_letter(\"apple pie\")) # False\nprint(check_if_last_char_is_a_letter(\"apple pi e\")) # True\nprint(check_if_last_char_is_a_letter(\"apple pi e \")) # False\nprint(check_if_last_char_is_a_letter(\"\")) # False"
    },
    {
        "number": 134,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    words = txt.split()\n    last_word = words[-1]\n    if last_char in last_word:\n        return False\n    else:\n        return True"
    },
    {
        "number": 134,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    # Split the string into words\n    words = txt.split()\n    # Get the last word and check if it's a letter\n    last_word = words[-1]\n    last_char = last_word[-1]\n    if last_char.isalpha():\n        # Check if the last character is not a part of a word\n        if not last_word[:-1].isalpha():\n            return True\n    return False"
    },
    {
        "number": 134,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    # Remove any whitespace at the end of the string\n    txt = txt.rstrip()\n    # Check if the last character is an alphabetical character\n    if txt and txt[-1].isalpha():\n        # Check if it's not a part of a word by looking for whitespace\n        return not txt[-1].isspace() and not txt[-2:].isalpha()\n    else:\n        return False"
    },
    {
        "number": 134,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n\n    # Check if the string is empty\n    if not txt:\n        return False\n    \n    # Check if the last character is a letter\n    if not txt[-1].isalpha():\n        return False\n    \n    # Check if the last character is not part of a word\n    words = txt.split()\n    last_word = words[-1]\n    if txt[-1] in last_word:\n        return False\n    \n    # If all the conditions are met, return True\n    return True"
    },
    {
        "number": 134,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    \n    if txt == \"\":\n        return False\n    \n    # Splitting the given string into words\n    words = txt.split()\n    \n    # If the last word has only one character\n    if len(words[-1]) == 1:\n        return True\n    \n    # If the last character of the last word is not an alphabetical character\n    if not words[-1][-1].isalpha():\n        return False\n    \n    # If the last character of the last word is an alphabetical character\n    return True"
    },
    {
        "number": 134,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n\n    # convert the string to lowercase to handle uppercase letters\n    txt = txt.lower()\n\n    # check if the last character is an alphabetical character\n    last_char = txt[-1]\n    if last_char.isalpha():\n        # check if the last character is not a part of a word\n        words = txt.split()\n        last_word = words[-1]\n        if last_char not in last_word:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    if len(arr) == 1:\n        return -1\n    \n    max_index = len(arr) - 1\n    for i in range(len(arr)-2, -1, -1):\n        if arr[i] >= arr[i+1]:\n            max_index = i\n    \n    return max_index"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i+1] <= arr[i]:\n            continue\n        for j in range(i+2, n):\n            if arr[j] >= arr[i+1]:\n                return i+1\n    return -1"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    \n    n = len(arr)\n    arr.sort()\n\n    for i in range(n-1, 0, -1):\n        if arr[i] >= arr[i-1]:\n            return i-1\n    \n    return -1"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def can_arrange(arr):\n    n = len(arr)\n    for i in range(n-2, -1, -1):\n        if arr[i] < arr[i+1]:\n            return i\n    return -1"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            return i-1\n    return -1"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\n    n = len(arr)\n    if n == 1:\n        return -1\n\n    for i in range(n-2, -1, -1):\n        if arr[i] < arr[i+1]:\n            return i+1\n\n    return -1"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def can_arrange(arr):\n    \"\"\"\n    Create a function which returns the largest index of an element which is not greater than or equal to the element immediately preceding it. If no such element exists then return -1. The given array will not contain duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return -1\n    elif n == 1:\n        return 0\n    \n    # sort the array\n    arr = sorted(arr)\n    \n    # traverse the sorted array to find the largest index of an element which is not greater than or equal to the element immediately preceding it\n    largest_index = -1\n    for i in range(1, n):\n        if arr[i] >= arr[i-1]:\n            largest_index = i\n    \n    return largest_index"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def can_arrange(arr):\n    n = len(arr)\n    # Check for the case when all the elements are equal\n    if arr[0] == arr[1] == arr[2]:\n        return -1\n    \n    for i in range(n-1):\n        if arr[i+1] >= arr[i]:\n            continue\n        # Find the largest element that is less than arr[i+1]\n        max_index = -1\n        for j in range(i+1, n):\n            if arr[j] < arr[i+1]:\n                if max_index == -1:\n                    max_index = j\n                elif arr[j] > arr[max_index]:\n                    max_index = j\n        # If no such element exists then return -1\n        if max_index == -1:\n            return -1\n        # Swap the element at max_index with arr[i+1]\n        arr[max_index], arr[i+1] = arr[i+1], arr[max_index]\n    return arr.index(max(arr))\n"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] >= arr[i+1]:\n            return i\n    return -1"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def can_arrange(arr):\n    n = len(arr)\n    max_idx = n - 1\n    for i in range(n):\n        if arr[i] >= arr[max_idx]:\n            max_idx = i\n    if max_idx == 0 or arr[max_idx - 1] < arr[max_idx]:\n        return max_idx\n    else:\n        return -1"
    },
    {
        "number": 136,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    negative_integers = []\n    positive_integers = []\n\n    for num in lst:\n        if num < 0:\n            negative_integers.append(num)\n        elif num > 0:\n            positive_integers.append(num)\n\n    if len(negative_integers) == 0:\n        largest_negative = None\n    else:\n        largest_negative = max(negative_integers)\n\n    if len(positive_integers) == 0:\n        smallest_positive = None\n    else:\n        smallest_positive = min(positive_integers)\n\n    return largest_negative, smallest_positive"
    },
    {
        "number": 136,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    \n    negative_integers = []\n    positive_integers = []\n    \n    for num in lst:\n        if num < 0:\n            negative_integers.append(num)\n        elif num > 0:\n            positive_integers.append(num)\n            \n    if len(negative_integers) == 0:\n        largest_negative = None\n    else:\n        largest_negative = max(negative_integers)\n        \n    if len(positive_integers) == 0:\n        smallest_positive = None\n    else:\n        smallest_positive = min(positive_integers)\n    \n    return (largest_negative, smallest_positive)"
    },
    {
        "number": 136,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    neg = None\n    pos = None\n    for num in lst:\n        if num < 0 and (neg is None or num > neg):\n            neg = num\n        elif num > 0 and (pos is None or num < pos):\n            pos = num\n    return (neg, pos)"
    },
    {
        "number": 136,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n\n    # initialize variables to keep track of largest and smallest integers\n    largest_int = None\n    smallest_int = None\n\n    # iterate through the list to find the largest and smallest integers\n    for num in lst:\n        if num < 0:\n            if largest_int is None or num > largest_int:\n                largest_int = num\n        elif num > 0:\n            if smallest_int is None or num < smallest_int:\n                smallest_int = num\n\n    return (largest_int, smallest_int)"
    },
    {
        "number": 136,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n\n    negative_integers = []\n    positive_integers = []\n\n    for num in lst:\n        if num < 0:\n            negative_integers.append(num)\n        elif num > 0:\n            positive_integers.append(num)\n\n    if len(negative_integers) > 0:\n        largest_negative = max(negative_integers)\n    else:\n        largest_negative = None\n\n    if len(positive_integers) > 0:\n        smallest_positive = min(positive_integers)\n    else:\n        smallest_positive = None\n\n    return (largest_negative, smallest_positive)"
    },
    {
        "number": 136,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    \n    # Initialize variables to keep track of largest and smallest integers\n    largest = None\n    smallest = None\n    \n    # Iterate through the list to find the largest negative integer and smallest positive integer\n    for num in lst:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n        elif num > 0 and (smallest is None or num < smallest):\n            smallest = num\n    \n    # Return the largest negative integer and smallest positive integer as a tuple\n    return (largest, smallest)"
    },
    {
        "number": 136,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    negative_integers = []\n    positive_integers = []\n    \n    for num in lst:\n        if num < 0:\n            negative_integers.append(num)\n        elif num > 0:\n            positive_integers.append(num)\n    \n    if len(negative_integers) == 0:\n        largest_negative = None\n    else:\n        largest_negative = max(negative_integers)\n    \n    if len(positive_integers) == 0:\n        smallest_positive = None\n    else:\n        smallest_positive = min(positive_integers)\n    \n    return (largest_negative, smallest_positive)"
    },
    {
        "number": 136,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    neg = None\n    pos = None\n    for i in lst:\n        if i < 0 and (neg is None or i > neg):\n            neg = i\n        elif i > 0 and (pos is None or i < pos):\n            pos = i\n    return (neg, pos)"
    },
    {
        "number": 136,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n    \n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    largest_neg = None\n    smallest_pos = None\n    for num in lst:\n        if num < 0:\n            if largest_neg is None or num > largest_neg:\n                largest_neg = num\n        elif num > 0:\n            if smallest_pos is None or num < smallest_pos:\n                smallest_pos = num\n    return (largest_neg, smallest_pos)"
    },
    {
        "number": 136,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        elif num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n\n    return (largest_negative, smallest_positive)"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n    else:\n        if isinstance(a, str):\n            a = float(a.replace(\",\", \".\"))\n        if isinstance(b, str):\n            b = float(b.replace(\",\", \".\"))\n\n        if a > b:\n            return a\n        elif a < b:\n            return b\n"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return a if a > b else b\n    elif isinstance(a, str) and isinstance(b, str):\n        if a.replace(\",\", \".\", 1).isdigit() and b.replace(\",\", \".\", 1).isdigit():\n            return a if float(a) > float(b) else b\n    return None\n"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n    \n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    else:\n        if type(a) == str and type(b) == int:\n            return a\n        elif type(a) == int and type(b) == str:\n            return b\n        else:\n            try:\n                a = float(a)\n                b = float(b)\n                if a > b:\n                    return a\n                elif b > a:\n                    return b\n                else:\n                    return None\n            except ValueError:\n                return None"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if a == b:\n        return None\n    if isinstance(a, (int, float)):\n        return max(a, b)\n    elif isinstance(a, str):\n        if a.replace(',', '').isdigit() and b.replace(',', '').isdigit():\n            return str(max(float(a.replace(',', '.')), float(b.replace(',', '.'))))\n        else:\n            return max(a, b)"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def compare_one(a, b):\n    if a == b:\n        return None\n    else:\n        if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n            return a if a > b else b\n        elif isinstance(a, str) and isinstance(b, str):\n            return a if float(a.replace(\",\", \".\")) > float(b.replace(\",\", \".\")) else b\n        else:\n            return None"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if a == b:\n        return None\n    elif type(a) == type(b):\n        if isinstance(a, (int, float)):\n            return max(a, b)\n        elif isinstance(a, str):\n            if a.replace(\",\", \".\", 1).replace(\".\", \"\", 1).isdigit() and b.replace(\",\", \".\", 1).replace(\".\", \"\", 1).isdigit():\n                return max(float(a), float(b))\n            else:\n                return max(a, b)\n    else:\n        return max(a, b)"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n    if a == b:\n        return None\n    \n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return max(a, b)\n    \n    if isinstance(a, str) and isinstance(b, str):\n        a_float = float(a.replace(',', '.'))\n        b_float = float(b.replace(',', '.'))\n        return max(a_float, b_float)\n    \n    return max(a, b)"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n    \"\"\"\n    if a == b:\n        return None\n    if isinstance(a, (int, float)):\n        if isinstance(b, (int, float)):\n            return max(a, b)\n        else:\n            return a\n    else:\n        if isinstance(b, (int, float)):\n            return b\n        else:\n            return max(float(a), float(b))"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if isinstance(a, str) and isinstance(b, str):\n        return a if float(a.replace(\",\", \".\")) > float(b.replace(\",\", \".\")) else b if float(a.replace(\",\", \".\")) < float(b.replace(\",\", \".\")) else None\n    elif isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return a if a > b else b if a < b else None\n    else:\n        raise TypeError(\"Both variables must be either integers, floats, or strings representing real numbers\")"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    \n    if a == b:\n        return None\n    \n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a > b:\n            return a\n        else:\n            return b\n    \n    if isinstance(a, str) and isinstance(b, str):\n        if float(a.replace(\",\", \".\")) > float(b.replace(\",\", \".\")):\n            return a\n        else:\n            return b\n    \n    if isinstance(a, str) and isinstance(b, (int, float)):\n        if float(a.replace(\",\", \".\")) > b:\n            return a\n        else:\n            return b\n    \n    if isinstance(a, (int, float)) and isinstance(b, str):\n        if a > float(b.replace(\",\", \".\")):\n            return b\n        else:\n            return a"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Create a list of all even numbers up to n\n    even_numbers = [2*i for i in range(n//2+1)]\n    # Check if n can be written as the sum of 4 even numbers\n    for i in range(4):\n        if n - even_numbers[i] in even_numbers[i+1:]:\n            return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # Check if n is even and positive\n    if n <= 0 or n % 2 == 1:\n        return False\n    \n    # Check if n can be written as the sum of exactly 4 positive even numbers\n    for i in range(4):\n        if (n - 2*i) % 4 == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # Initialize a list to store even numbers less than n\n    even_nums = [i for i in range(2, n, 2)]\n    # Check if the sum of four even numbers from the list equals n\n    if len(even_nums) < 4:\n        return False\n    return sum(even_nums[:4]) == n"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    even_numbers = [2, 4, 6, 8]\n    total_sum = 0\n    for i in range(4):\n        if n - even_numbers[i] in even_numbers[:i] + even_numbers[i+1:]:\n            total_sum += even_numbers[i]\n        else:\n            break\n    return total_sum == n"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n\n    # initialize a set of even numbers that can be used as factors of n\n    even_numbers = set(range(4, n, 2))\n\n    # check if n is divisible by 24\n    if n % 24 == 0:\n        return True\n\n    # check if n is divisible by 12\n    if n % 12 == 0:\n        return True\n\n    # check if n is divisible by 6\n    if n % 6 == 0:\n        return True\n\n    # check if n is divisible by 2\n    if n % 2 == 0:\n        return False\n\n    # check if n can be written as the sum of two equal pairs of even numbers\n    for pair in [(2, 2), (4, 4), (6, 6), (8, 8)]:\n        if pair in even_numbers:\n            even_numbers.discard(pair[0])\n            even_numbers.discard(pair[1])\n            if n - pair[0] - pair[1] in even_numbers:\n                return True\n\n    # check if n can be written as the sum of two equal pairs of odd numbers\n    for pair in [(1, 1), (3, 3), (5, 5), (7, 7)]:\n        if pair in even_numbers:\n            even_numbers.discard(pair[0])\n            even_numbers.discard(pair[1])\n            if n - pair[0] - pair[1] in even_numbers:\n                return True\n\n    # n cannot be written as the sum of exactly 4 positive even numbers\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n < 8 or n % 2!= 0:\n        return False\n    for i in range(4):\n        if n - 2 * i * i < 0 or n - 2 * i * i % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # Iterate over all possible combinations of 4 even numbers that add up to n\n    for a in range(n - 3, n // 2 + 1):\n        if a % 2 == 0:\n            for b in range(a + 2, n - a // 2):\n                if b % 2 == 0 and a + b + (n - a - b) // 2 == n:\n                    return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    even_nums = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_nums.append(i)\n        if len(even_nums) == 4:\n            return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    even_sum = 0\n    for i in range(4):\n        even_sum += 2*i*i\n    return n == even_sum"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n % 2 == 0:\n        return False\n\n    for i in range(4):\n        if i*2+2 > n:\n            break\n        if n % (i*2+2) == 0:\n            return False\n\n    return True"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n    \n    For example:\n    >>> special_factorial(4)\n    288\n    \n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    result = 1\n    for i in range(n, 0, -1):\n        result *= i\n    return result"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    if n == 0:\n        return 1\n\n    result = 1\n\n    for i in range(1, n+1):\n        result *= i\n\n    return result"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n\n    return result"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n    \n    For example:\n    >>> special_factorial(4)\n    288\n    \n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    \n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n        \n    return fact"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n    \n    For example:\n    >>> special_factorial(4)\n    288\n    \n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    if n == 0:\n        return 1\n    \n    result = 1\n    for i in range(n, 0, -1):\n        result *= i\n        \n    return result"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    new_text = \"\"\n    for i in range(len(text)):\n        if text[i] == \" \":\n            if i == 0 or i == len(text) - 1:\n                new_text += \"_\"\n            elif text[i-1] == \" \" and text[i+1] == \" \":\n                new_text += \"-\"\n            else:\n                new_text += \"_\"\n        else:\n            new_text += text[i]\n    return new_text"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    text = text.replace(\" \", \"_\")\n    return text.replace(\"  \", \"-\")"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n\n    # Replace consecutive spaces with -\n    while \"  \" in text:\n        text = text.replace(\"  \", \"-\")\n\n    return text"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    # replace all spaces with underscores\n    new_text = text.replace(\" \", \"_\")\n    \n    # replace consecutive spaces with -\n    new_text = new_text.replace(\"__\", \"_\")\n    new_text = new_text.replace(\"  \", \"-\")\n    \n    return new_text"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    text = text.replace(\" \", \"_\")\n    while \"  \" in text:\n        text = text.replace(\"  \", \"-\")\n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n    \"\"\"\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    # Replace all consecutive spaces with -\n    text = \" \".join(text.split())\n    return text"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    new_text = ''\n    for i in range(len(text)):\n        if text[i] =='':\n            if i == 0 or text[i-1] =='':\n                continue\n            elif i == len(text) - 1 or text[i+1] =='':\n                new_text += '_'\n            else:\n                if text[i+1] =='':\n                    new_text += '-'\n                else:\n                    new_text += '_'\n        else:\n            new_text += text[i]\n    return new_text"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    new_text = \"\"\n    prev_char = \"\"\n    for char in text:\n        if char == \" \":\n            if prev_char == \" \":\n                new_text += \"-\"\n            else:\n                new_text += \"_\"\n        else:\n            new_text += char\n        prev_char = char\n    return new_text\n"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    # replace spaces with underscores\n    text = text.replace(\" \", \"_\")\n\n    # replace consecutive spaces with -\n    i = 0\n    while i < len(text)-2:\n        if text[i] == \" \" and text[i+1] == \" \":\n            text = text[:i+1] + \"-\" + text[i+1:]\n        i += 1\n    \n    return text"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    # Replace all spaces with underscores\n    new_text = text.replace(\" \", \"_\")\n    \n    # Check if there are more than 2 consecutive spaces\n    i = 0\n    while i < len(new_text) - 2:\n        if new_text[i:i+3] == \"___\":\n            # Replace consecutive spaces with -\n            new_text = new_text[:i] + \"-\" + new_text[i+3:]\n        else:\n            i += 1\n            \n    return new_text"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def file_name_check(file_name):\n    # Check if there are more than three digits in the file name\n    if sum(char.isdigit() for char in file_name) > 3:\n        return 'No'\n\n    # Check if there is exactly one dot in the file name\n    if file_name.count('.')!= 1:\n        return 'No'\n\n    # Check if the substring before the dot is not empty and starts with a letter\n    before_dot, after_dot = file_name.split('.')\n    if not before_dot or not before_dot[0].isalpha():\n        return 'No'\n\n    # Check if the substring after the dot is one of the allowed file types\n    allowed_file_types = ['txt', 'exe', 'dll']\n    if after_dot not in allowed_file_types:\n        return 'No'\n\n    # If all checks passed, the file name is valid\n    return 'Yes'"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Check if there are more than three digits in the file name\n    if any(char.isdigit() for char in file_name):\n        return \"No\"\n    \n    # Check if the file name contains exactly one dot\n    if file_name.count(\".\")!= 1:\n        return \"No\"\n    \n    # Split the file name into two parts using the dot as a separator\n    parts = file_name.split(\".\")\n    \n    # Check if the first part is empty or starts with a non-latin alphabet character\n    if not parts[0][0].isalpha():\n        return \"No\"\n    \n    # Check if the second part is one of the allowed extensions\n    if parts[1] not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    \n    # If all the conditions are met, return \"Yes\"\n    return \"Yes\""
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Check if there are more than three digits in the file's name\n    if sum([char.isdigit() for char in file_name]) > 3:\n        return 'No'\n\n    # Check if the file's name contains exactly one dot '.'\n    if file_name.count('.')!= 1:\n        return 'No'\n\n    # Split the file's name into its components\n    file_name_components = file_name.split('.')\n\n    # Check if the substring before the dot is empty or starts with a non-latin letter\n    if not file_name_components[0] or not file_name_components[0][0].isalpha():\n        return 'No'\n\n    # Check if the substring after the dot is one of ['txt', 'exe', 'dll']\n    if file_name_components[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    # If all conditions are met, return 'Yes'\n    return 'Yes'"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 4:\n        return 'No'\n    if file_name.count('.')!= 1:\n        return 'No'\n    dot_index = file_name.index('.')\n    if not file_name[:dot_index].isalpha():\n        return 'No'\n    if file_name[dot_index+1:] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Check if the file name contains more than three digits\n    if any(char.isdigit() for char in file_name):\n        return \"No\"\n    \n    # Check if the file name contains exactly one dot\n    if file_name.count(\".\")!= 1:\n        return \"No\"\n    \n    # Split the file name into its components\n    before_dot, after_dot = file_name.split(\".\")\n    \n    # Check if the substring before the dot is empty\n    if not before_dot:\n        return \"No\"\n    \n    # Check if the substring before the dot starts with a letter\n    if not before_dot[0].isalpha():\n        return \"No\"\n    \n    # Check if the substring after the dot is one of the allowed values\n    allowed_values = [\"txt\", \"exe\", \"dll\"]\n    if after_dot not in allowed_values:\n        return \"No\"\n    \n    # If all the conditions are met, return \"Yes\"\n    return \"Yes\""
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if file_name.count(\".\")!= 1:\n        return \"No\"\n    name, ext = file_name.split(\".\")\n    if not name[0].isalpha():\n        return \"No\"\n    if name.isdigit() or len(name) > 3:\n        return \"No\"\n    if ext not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n    # Splitting the file name into before_dot and after_dot parts\n    before_dot, after_dot = file_name.split('.', 1)\n\n    # Checking if the substring before the dot is empty or starts with non-latin alphabetic letter\n    if not before_dot or not before_dot[0].isalpha():\n        return \"No\"\n\n    # Checking if the substring after the dot is valid\n    if after_dot not in ['txt', 'exe', 'dll']:\n        return \"No\"\n\n    # Checking if the substring before the dot contains more than 3 digits\n    if any(char.isdigit() for char in before_dot):\n        return \"No\"\n\n    # If all the conditions are met, then the file name is valid\n    return \"Yes\""
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n    # Check if the file name contains more than three digits\n    if any(char.isdigit() for char in file_name):\n        return 'No'\n\n    # Check if the file name contains exactly one dot\n    if file_name.count('.')!= 1:\n        return 'No'\n\n    # Split the file name into two substrings before and after the dot\n    before_dot, after_dot = file_name.split('.')\n\n    # Check if the substring before the dot starts with a letter\n    if not before_dot[0].isalpha():\n        return 'No'\n\n    # Check if the substring after the dot is one of the allowed extensions\n    if after_dot not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    # If all the checks pass, the file name is valid\n    return 'Yes'"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Split the file name into two parts: the part before the dot and the part after the dot\n    parts = file_name.split(\".\")\n    # Check if there are more than 3 digits in the file name\n    if sum(c.isdigit() for c in file_name) > 3:\n        return \"No\"\n    # Check if the file name contains exactly one dot\n    if len(parts)!= 2:\n        return \"No\"\n    # Check if the part before the dot is not empty and starts with a letter from the latin alphabet\n    if not parts[0] or not parts[0][0].isalpha():\n        return \"No\"\n    # Check if the part after the dot is one of the allowed extensions\n    allowed_extensions = [\"txt\", \"exe\", \"dll\"]\n    if parts[1] not in allowed_extensions:\n        return \"No\"\n    # If all the conditions are met, return \"Yes\"\n    return \"Yes\""
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Check if the file name contains more than three digits\n    if any(char.isdigit() for char in file_name):\n        if sum(char.isdigit() for char in file_name) > 3:\n            return 'No'\n\n    # Check if the file name contains exactly one dot\n    if file_name.count('.')!= 1:\n        return 'No'\n\n    # Check if the substring before the dot is empty or starts with a non-latin letter\n    substring_before_dot = file_name[:file_name.index('.')]\n    if not substring_before_dot or not substring_before_dot[0].isalpha():\n        return 'No'\n\n    # Check if the substring after the dot is one of the given extensions\n    substring_after_dot = file_name[file_name.index('.')+1:]\n    if substring_after_dot not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            lst[i] = lst[i] ** 3\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            lst[i] = lst[i] ** 3\n        sum += lst[i]\n    return sum"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_squares(lst):\n    result = 0\n    for i, x in enumerate(lst):\n        if i % 3 == 0:\n            result += x**2\n        elif i % 4 == 0:\n            result += x**3\n    return result"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_squares(lst):\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            lst[i] = lst[i] ** 3\n        result += lst[i]\n    return result"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_squares(lst):\n    result = 0\n    for i, x in enumerate(lst):\n        if i % 3 == 0:\n            result += x ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            result += x ** 3\n    return result"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 3\n        result += lst[i]\n    return result"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            lst[i] = lst[i] ** 3\n            \n    for i in range(len(lst)):\n        sum += lst[i]\n        \n    return sum"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] **= 2\n        elif i % 4 == 0 and i % 3!= 0:\n            lst[i] **= 3\n            \n    for num in lst:\n        total += num\n        \n    return total"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_prime(num):\n    \"\"\"\n    A helper function to check if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n    \"\"\"\n    words = sentence.split()\n    result = \"\"\n    for word in words:\n        if is_prime(len(word)):\n            result += word + \" \"\n    return result[:-1]"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if the given number is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n    \"\"\"\n    words = sentence.split()\n    prime_words = [word for word in words if len(word) > 1 and is_prime(len(word))]\n    return \" \".join(prime_words)"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    Given a sentence, returns a string containing the words in the sentence that are prime lengths.\n    \"\"\"\n    words = sentence.split()\n    result = \"\"\n    for word in words:\n        if is_prime(len(word)):\n            result += word + \" \"\n    return result.strip()"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime or not.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n    \"\"\"\n    words = sentence.split()\n    prime_words = [word for word in words if len(word) > 1 and is_prime(len(word))]\n    return''.join(prime_words)"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n    \"\"\"\n    words = sentence.split()\n    prime_words = [word for word in words if len(word) in [2, 3, 5, 7, 11]]\n    return \" \".join(prime_words)"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def words_in_sentence(sentence):\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Define a function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Filter the words whose lengths are prime\n    prime_words = filter(lambda w: is_prime(len(w)), words)\n\n    # Join the filtered words into a new string\n    return''.join(prime_words)"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_prime(num):\n    \"\"\"\n    Check if a number is prime\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n    \"\"\"\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    prime_numbers = []\n    for i in range(2, int(len(sentence)/2)+1):\n        is_prime = True\n        for j in range(2, int(i/2)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_numbers.append(i)\n\n    words = sentence.split()\n    result = \"\"\n    for word in words:\n        if len(word) in prime_numbers:\n            result += word + \" \"\n    \n    return result[:-1]"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_prime(n):\n    \"\"\"\n    Function to check if a number is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n    \"\"\"\n    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    return \" \".join(prime_words)"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if the given number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n    \"\"\"\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    prime_words_str = \" \".join(prime_words)\n    return prime_words_str"
    },
    {
        "number": 144,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def simplify(x, n):\n    num_x, den_x = map(int, x.split('/'))\n    num_n, den_n = map(int, n.split('/'))\n    return (num_x * den_n) == (num_n * den_x)"
    },
    {
        "number": 144,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def simplify(x, n):\n    \"\"\"\n    Simplify the expression x * n.\n\n    Args:\n    - x (str): Numerator of the fraction x/1.\n    - n (str): Numerator of the fraction n/1.\n\n    Returns:\n    - bool: True if x * n evaluates to a whole number and False otherwise.\n    \"\"\"\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    product = x_num * n_den\n    if product % n_num == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 144,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def simplify(x, n):\n    numerator_x, denominator_x = map(int, x.split('/'))\n    numerator_n, denominator_n = map(int, n.split('/'))\n    if numerator_x * denominator_n == numerator_n * denominator_x:\n        return True\n    else:\n        return False"
    },
    {
        "number": 144,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # parse the input strings to integers\n    x_num, x_den = map(int, x.split(\"/\"))\n    n_num, n_den = map(int, n.split(\"/\"))\n\n    # compute the simplified fraction\n    num = x_num * n_num\n    den = x_den * n_den\n    gcd = compute_gcd(num, den)\n    num //= gcd\n    den //= gcd\n\n    # check if the result is a whole number\n    return den == 1\n\ndef compute_gcd(a, b):\n    \"\"\"Compute the greatest common divisor of a and b.\"\"\"\n    while b!= 0:\n        a, b = b, a % b\n    return a"
    },
    {
        "number": 144,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Convert input strings into rational numbers\n    x = fractions.Fraction(x)\n    n = fractions.Fraction(n)\n\n    # Multiply the fractions\n    result = x * n\n\n    # Check if the result is a whole number\n    return result.denominator == 1"
    },
    {
        "number": 144,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def simplify(x, n):\n    \"\"\"\n    This function returns True if x * n evaluates to a whole number and False otherwise. \n    Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n    \n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n    \"\"\"\n    numerator_x, denominator_x = map(int, x.split('/'))\n    numerator_n, denominator_n = map(int, n.split('/'))\n    \n    product = numerator_x * numerator_n\n    \n    if product % denominator_n == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 144,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from fractions import Fraction\n\ndef simplify(x, n):\n    fx = Fraction(x)\n    fn = Fraction(n)\n    return fx * fn == int(fx * fn)"
    },
    {
        "number": 144,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_den) // n_num == x_num * n_den"
    },
    {
        "number": 144,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def simplify(x, n):\n    numerator_x, denominator_x = map(int, x.split('/'))\n    numerator_n, denominator_n = map(int, n.split('/'))\n    return numerator_x * denominator_n == numerator_n * denominator_x"
    },
    {
        "number": 144,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    numerator_x = int(x.split('/')[0])\n    denominator_x = int(x.split('/')[1])\n    numerator_n = int(n.split('/')[0])\n    denominator_n = int(n.split('/')[1])\n    \n    result = numerator_x * numerator_n * denominator_n // denominator_x\n    return result == 1"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), abs(nums.index(x))))"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def order_by_points(nums):\n    def digit_sum(n):\n        return sum(int(d) for d in str(abs(n)))\n    \n    # sort the list by the sum of digits and then by the index of the original item\n    return sorted(nums, key=lambda n: (digit_sum(n), nums.index(n)))"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(num):\n        \"\"\"\n        Calculates the sum of digits of a number.\n        \"\"\"\n        return sum(int(digit) for digit in str(abs(num)))\n\n    nums_with_points = [(num, sum_of_digits(num)) for num in nums]\n    nums_with_points.sort(key=lambda x: (x[1], nums.index(x[0])))\n    return [num for num, _ in nums_with_points]"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Define a lambda function to calculate the sum of digits of an integer\n    digit_sum = lambda num: sum(int(digit) for digit in str(abs(num)))\n    \n    # Use the sorted() function with a custom key function to sort the list\n    return sorted(nums, key=lambda num: (digit_sum(num), nums.index(num)))\n"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(num):\n        \"\"\"\n        Returns the sum of digits of a given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n    \n    sorted_nums = sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))\n    return sorted_nums"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(num):\n        \"\"\"\n        Calculate the sum of digits of a number.\n        \"\"\"\n        return sum(int(digit) for digit in str(abs(num)))\n    \n    # Sort the list by sum of digits and then by index in the original list.\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(num):\n        \"\"\"\n        Calculate the sum of digits of a number\n        \"\"\"\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))\n"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def order_by_points(nums):\n    def digit_sum(n):\n        return sum(int(d) for d in str(abs(n)))\n    \n    return sorted(nums, key=lambda n: (digit_sum(n), nums.index(n)))"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(num):\n        \"\"\"\n        Returns the sum of digits of a given number\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n    \n    sorted_nums = sorted(nums, key=lambda num: (sum_of_digits(num), nums.index(num)))\n    return sorted_nums"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums.sort(key=lambda x: (sum(int(digit) for digit in str(abs(x))), x))\n    return nums"
    },
    {
        "number": 146,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 10 % 10 in [1, 3, 5, 7, 9]:\n            count += 1\n    return count"
    },
    {
        "number": 146,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and num % 2 == 1 and (num // 10) % 10 in [1, 3, 5, 7, 9]:\n            count += 1\n    return count"
    },
    {
        "number": 146,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def specialFilter(nums):\n    \"\"\"\n    This function takes an array of numbers as input and returns the number of\n    elements in the array that are greater than 10 and both first and last digits\n    of a number are odd (1, 3, 5, 7, 9).\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and num % 2 == 1 and num // 10 % 10 % 2 == 1 and num % 10 % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 146,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 == 1 and (num // 10) % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 146,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and num % 2!= 0 and (num // 10) % 2!= 0 and num % 10!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 146,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def specialFilter(nums):\n    \"\"\"Returns the number of elements in the array that are greater than 10 \n    and both first and last digits of a number are odd.\"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 % 2 == 1 and num // 10 % 10 % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 146,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and num % 2 == 1 and num // 10 % 2 == 1 and num % 10 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 146,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def specialFilter(nums):\n    \"\"\"\n    This function takes an array of numbers as input and returns the number of elements in the array that are greater than 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9).\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num // 10) % 2!= 0 and num % 10 in [1, 3, 5, 7, 9]:\n            count += 1\n    return count"
    },
    {
        "number": 146,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def specialFilter(nums):\n    \"\"\"\n    Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2!= 0:\n            if (num // 10) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 146,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 10 % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 147,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    \n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count"
    },
    {
        "number": 147,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_max_triples(n):\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"
    },
    {
        "number": 147,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_max_triples(n):\n    a = []\n    for i in range(1, n+1):\n        a.append(i*i - i + 1)\n\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count"
    },
    {
        "number": 147,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"
    },
    {
        "number": 147,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"
    },
    {
        "number": 147,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"
    },
    {
        "number": 147,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"
    },
    {
        "number": 147,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count"
    },
    {
        "number": 147,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count"
    },
    {
        "number": 147,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)] # create the array a\n    count = 0 # initialize the counter\n    for i in range(n-2): # iterate over all possible triples\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0: # check if the sum is a multiple of 3\n                    count += 1 # increment the counter\n    return count # return the final count"
    },
    {
        "number": 148,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bf(planet1, planet2):\n    # Dictionary with the orbits of all planets\n    orbits = {\n        \"Mercury\": [\"Sun\", \"Venus\"],\n        \"Venus\": [\"Sun\", \"Earth\"],\n        \"Earth\": [\"Sun\", \"Mars\"],\n        \"Mars\": [\"Sun\", \"Jupiter\"],\n        \"Jupiter\": [\"Sun\", \"Saturn\"],\n        \"Saturn\": [\"Sun\", \"Uranus\"],\n        \"Uranus\": [\"Sun\", \"Neptune\"],\n        \"Neptune\": [\"Sun\"]\n    }\n\n    # Check if planet1 and planet2 are correct planets\n    if planet1 not in orbits or planet2 not in orbits:\n        return ()\n\n    # Calculate the distance between the orbits of planet1 and planet2\n    distance = orbits[planet1].index(planet2)\n\n    # List with all planets whose orbits are between the two given planets\n    result = []\n    for planet in orbits:\n        if orbits[planet].index(planet1) <= distance < orbits[planet].index(planet2):\n            result.append(planet)\n\n    # Return the sorted list of planets\n    return tuple(sorted(result))"
    },
    {
        "number": 148,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bf(planet1, planet2):\n    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    result = planets[max(index1, 0):min(index2, len(planets))+1]\n    return tuple(result)"
    },
    {
        "number": 148,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planets = {\n        \"Mercury\": 0.39,\n        \"Venus\": 0.72,\n        \"Earth\": 1.00,\n        \"Mars\": 1.52,\n        \"Jupiter\": 5.20,\n        \"Saturn\": 9.58,\n        \"Uranus\": 19.20,\n        \"Neptune\": 30.07\n    }\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1 = planets[planet1]\n    index2 = planets[planet2]\n    result = []\n    \n    for planet, orbit in planets.items():\n        if orbit >= index1 and orbit <= index2:\n            result.append(planet)\n    \n    return tuple(sorted(result, key=lambda x: planets[x]))"
    },
    {
        "number": 148,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    '''\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n    return tuple(planets[planet1_index:planet2_index+1])"
    },
    {
        "number": 148,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    '''\n    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        if index1 > index2:\n            index1, index2 = index2, index1\n        return tuple(sorted(planets[index1+1:index2]))"
    },
    {
        "number": 148,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n\n    if index1 > index2:\n        index1, index2 = index2, index1\n\n    return tuple(planets[index1:index2+1])"
    },
    {
        "number": 148,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    if idx1 > idx2:\n        idx1, idx2 = idx2, idx1\n    return tuple(planets[idx1:idx2+1])"
    },
    {
        "number": 148,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    if idx1 > idx2:\n        idx1, idx2 = idx2, idx1\n    return tuple(planets[i] for i in range(idx1, idx2+1))"
    },
    {
        "number": 148,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    \n    planet_list = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planet_list or planet2 not in planet_list:\n        return ()\n    \n    index1 = planet_list.index(planet1)\n    index2 = planet_list.index(planet2)\n    \n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    return tuple(planet_list[index1:index2+1])\n"
    },
    {
        "number": 148,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    elif planet1 == planet2:\n        return (planet1,)\n    elif planet1 < planet2:\n        start = planets.index(planet1)\n        end = planets.index(planet2)\n        return tuple(planets[start:end+1])\n    else:\n        start = planets.index(planet2)\n        end = planets.index(planet1)\n        return tuple(planets[start+1:end+1][::-1])\n"
    },
    {
        "number": 149,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"This function accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\"\"\"\n    \n    # Create a new list containing only the strings with even lengths\n    lst_even = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the list of even lengths by length and then alphabetically\n    lst_sorted = sorted(lst_even, key=lambda word: (len(word), word))\n    \n    return lst_sorted"
    },
    {
        "number": 149,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\"\"\"\n    # Remove odd length strings\n    lst = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list by length and alphabetically\n    lst.sort(key=lambda s: (len(s), s))\n    return lst"
    },
    {
        "number": 149,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\n    # Remove the odd length strings from the list\n    new_lst = [word for word in lst if len(word) % 2 == 0]\n\n    # Sort the list by length of each word\n    new_lst.sort(key=len)\n\n    # Sort the list alphabetically if two words have the same length\n    new_lst.sort(key=str.lower)\n\n    return new_lst"
    },
    {
        "number": 149,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    \"\"\"\n    # Delete odd-length strings\n    lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the list by length and then alphabetically\n    lst.sort(key=lambda word: (len(word), word))\n    \n    return lst"
    },
    {
        "number": 149,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"\n    This function accepts a list of strings as a parameter, deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order, The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates. The order of the list should be ascending by length of each word, and you should return\n    the list sorted by that rule. If two words have the same length, sort the list alphabetically. The function should\n    return a list of strings in sorted order. You may assume that all words will have the same length.\n    \"\"\"\n    # delete odd length strings\n    lst = [word for word in lst if len(word) % 2 == 0]\n    # sort the list by length of each word and then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    return lst"
    },
    {
        "number": 149,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # delete odd length strings from lst\n    lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # sort the resulting list\n    lst.sort(key=lambda x: (len(x), x))\n    \n    return lst"
    },
    {
        "number": 149,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"\n    Accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    \"\"\"\n    # Removing odd-length strings from the list\n    lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sorting the list by length of the words and then alphabetically\n    sorted_lst = sorted(lst, key=lambda word: (len(word), word))\n    \n    return sorted_lst"
    },
    {
        "number": 149,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Deletes the strings that have odd lengths from the list,\n    sorts the resulting list by length of each word, and returns it sorted by that rule.\"\"\"\n    # filter out odd-length strings\n    lst = [s for s in lst if len(s) % 2 == 0]\n    \n    # sort the resulting list by length of each word\n    lst.sort(key=lambda s: (len(s), s))\n    \n    return lst"
    },
    {
        "number": 149,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # delete odd-length strings\n    lst = [s for s in lst if len(s) % 2 == 0]\n    # sort by length of each word\n    lst = sorted(lst, key=lambda s: (len(s), s))\n    return lst"
    },
    {
        "number": 149,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # Filter out strings with odd lengths\n    lst = list(filter(lambda x: len(x) % 2 == 0, lst))\n    # Sort the list by length of each word, then alphabetically if necessary\n    lst.sort(key=lambda x: (len(x), x))\n    return lst"
    },
    {
        "number": 150,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n <= 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n    return x"
    },
    {
        "number": 150,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y"
    },
    {
        "number": 150,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_prime(n):\n    \"\"\"A function to check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y"
    },
    {
        "number": 150,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_prime(n):\n    \"\"\"Checks whether a number is prime or not.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y"
    },
    {
        "number": 150,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y"
    },
    {
        "number": 150,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_prime(n):\n    \"\"\"Returns True if n is prime, False otherwise.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y"
    },
    {
        "number": 150,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is prime, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"Return the value of x if n is prime, otherwise return y.\"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y"
    },
    {
        "number": 150,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_prime(n):\n    \"\"\"A function to check whether a number is prime or not\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y"
    },
    {
        "number": 150,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef is_prime(n):\n    \"\"\"Function to check if a number is prime or not.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 150,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_prime(n):\n    \"\"\"Check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y"
    },
    {
        "number": 151,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\n\n    If the input list is empty, return 0.\n    \"\"\"\n    total = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 == 1:\n            total += num**2\n    return total"
    },
    {
        "number": 151,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n\n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    \n    result = 0\n    for num in lst:\n        if num > 0 and num % 2 == 1:\n            result += num**2\n        elif num < 0:\n            continue\n        else:\n            result += num**2\n    return result\n"
    },
    {
        "number": 151,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    \"\"\"\n    if not lst:\n        return 0\n    \n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2!= 0:\n            result += num**2\n            \n    return result"
    },
    {
        "number": 151,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def double_the_difference(lst):\n    # check if the list is empty\n    if len(lst) == 0:\n        return 0\n    \n    # initialize variables for sum of squares of odd numbers\n    sum_of_squares = 0\n    \n    # loop through the list and add the squares of odd numbers to sum_of_squares\n    for num in lst:\n        if type(num) == int and num % 2!= 0 and num >= 0:\n            sum_of_squares += num ** 2\n    \n    # return the sum of squares of odd numbers\n    return sum_of_squares"
    },
    {
        "number": 151,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    \n    result = 0\n    \n    for num in lst:\n        if isinstance(num, int) and num % 2!= 0 and num >= 0:\n            result += num ** 2\n            \n    return result"
    },
    {
        "number": 151,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    \"\"\"\n    if not lst:\n        return 0\n    \n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 == 1:\n            result += num ** 2\n    return result"
    },
    {
        "number": 151,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    \"\"\"\n    if not lst:\n        return 0\n    \n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2!= 0:\n            result += num ** 2\n    \n    return result"
    },
    {
        "number": 151,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\n\n    If the input list is empty, return 0.\n    \"\"\"\n    result = 0\n    for num in lst:\n        if type(num)!= int or num < 0:\n            continue\n        if num % 2!= 0:\n            result += num ** 2\n    return result"
    },
    {
        "number": 151,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\n\n    If the input list is empty, return 0.\n    \"\"\"\n    if not lst:\n        return 0\n    \n    total = 0\n    for num in lst:\n        if num >= 0 and isinstance(num, int):\n            if num % 2!= 0:\n                total += num ** 2\n    \n    return total"
    },
    {
        "number": 151,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \"\"\"\n    if not lst:\n        return 0\n    \n    total = 0\n    for num in lst:\n        if type(num)!= int or num < 0:\n            continue\n        if num % 2!= 0:\n            total += num**2\n    \n    return total"
    },
    {
        "number": 152,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n    \n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    result = []\n    for i in range(len(game)):\n        if guess[i] == game[i]:\n            result.append(0)\n        else:\n            result.append(abs(guess[i] - game[i]))\n    return result"
    },
    {
        "number": 152,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \"\"\"\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(guess[i] - game[i]))\n    return result"
    },
    {
        "number": 152,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def compare(scores, guesses):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    example:\n    \n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    result = []\n    for i in range(len(scores)):\n        if scores[i] == guesses[i]:\n            result.append(0)\n        else:\n            result.append(abs(scores[i] - guesses[i]))\n    return result"
    },
    {
        "number": 152,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\"\"\"\n    \n    # initialize an empty array to hold the result\n    result = []\n    \n    # iterate over the indexes of the arrays\n    for i in range(len(game)):\n        # if the guess is equal to the score, append 0 to the result array\n        if guess[i] == game[i]:\n            result.append(0)\n        # otherwise, append the absolute difference between the guess and score to the result array\n        else:\n            result.append(abs(guess[i] - game[i]))\n            \n    return result"
    },
    {
        "number": 152,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def compare(scores, guesses):\n    \"\"\"\n    Returns an array of the same length denoting how far off each guess was.\n    If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    :param scores: list of scores\n    :param guesses: list of guesses\n    :return: list of differences\n    \"\"\"\n\n    result = []\n    for i in range(len(scores)):\n        if scores[i] == guesses[i]:\n            result.append(0)\n        else:\n            result.append(abs(scores[i] - guesses[i]))\n\n    return result"
    },
    {
        "number": 152,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    example:\n    \n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    result = []\n    for i in range(len(game)):\n        if guess[i] == game[i]:\n            result.append(0)\n        else:\n            result.append(abs(guess[i]-game[i]))\n    return result"
    },
    {
        "number": 152,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def compare(game,guess):\n    \"\"\"\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    result = []\n    for i in range(len(game)):\n        if guess[i] == game[i]:\n            result.append(0)\n        else:\n            result.append(abs(guess[i] - game[i]))\n    return result"
    },
    {
        "number": 152,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \"\"\"\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(guess[i] - game[i]))\n    return result"
    },
    {
        "number": 152,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def compare(scores, guesses):\n    \"\"\"Return an array of the same length denoting how far off each guess was.\"\"\"\n    result = []\n    for i in range(len(scores)):\n        if guesses[i] == scores[i]:\n            result.append(0)\n        else:\n            result.append(abs(guesses[i] - scores[i]))\n    return result"
    },
    {
        "number": 152,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def compare(scores, guesses):\n    \"\"\"Return an array of the same length denoting how far off each guess was.\n    If they have guessed correctly, the value is 0, and if not, the value is the absolute difference.\"\"\"\n    return [abs(score - guess) if score!= guess else 0 for score, guess in zip(scores, guesses)]"
    },
    {
        "number": 153,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Strongest_Extension(class_name, extensions):\n    strengths = [(ext.lower().count('a') - ext.lower().count('A'), ext) for ext in extensions]\n    max_strength = max(strengths)[0]\n    strongest_extensions = [ext for strength, ext in strengths if strength == max_strength]\n    return f\"{class_name}.{strongest_extensions[0]}\""
    },
    {
        "number": 153,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    max_strength = -1\n    max_ext = ''\n    for ext in extensions:\n        cap_count = sum(1 for c in ext if c.isupper())\n        sm_count = sum(1 for c in ext if c.islower())\n        strength = cap_count - sm_count\n        if strength > max_strength:\n            max_strength = strength\n            max_ext = ext\n        elif strength == max_strength and ext < max_ext:\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\""
    },
    {
        "number": 153,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n\n    strongest_extension = None\n    strongest_strength = None\n\n    for extension in extensions:\n        cap_count = sum(1 for c in extension if c.isupper())\n        sm_count = sum(1 for c in extension if c.islower())\n        strength = cap_count - sm_count\n\n        if strongest_strength is None or strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n\n    return f\"{class_name}.{strongest_extension}\""
    },
    {
        "number": 153,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Strongest_Extension(class_name, extensions):\n    strength = {}\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength[extension] = cap - sm\n    \n    max_strength = max(strength.values())\n    strongest_extensions = [ext for ext, val in strength.items() if val == max_strength]\n    \n    return f\"{class_name}.{strongest_extensions[0]}\""
    },
    {
        "number": 153,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Strongest_Extension(class_name, extensions):\n    strength_dict = {}\n    for extension in extensions:\n        cap_count = sum(1 for c in extension if c.isupper())\n        sm_count = sum(1 for c in extension if c.islower())\n        strength = cap_count - sm_count\n        if strength in strength_dict:\n            strength_dict[strength].append(extension)\n        else:\n            strength_dict[strength] = [extension]\n    max_strength = max(strength_dict.keys())\n    if len(strength_dict[max_strength]) > 1:\n        strongest_extensions = sorted(strength_dict[max_strength])\n        return f\"{class_name}.{strongest_extensions[0]}\"\n    else:\n        return f\"{class_name}.{strength_dict[max_strength][0]}\""
    },
    {
        "number": 153,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    \"\"\"\n    strength = {}\n    for extension in extensions:\n        cap_count = sum(1 for char in extension if char.isupper())\n        sm_count = sum(1 for char in extension if char.islower())\n        strength[extension] = cap_count - sm_count\n    strongest_extension = max(strength, key=strength.get)\n    return f\"{class_name}.{strongest_extension}\""
    },
    {
        "number": 153,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Strongest_Extension(class_name, extensions):\n    strengths = {}\n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strengths[extension] = CAP - SM\n    \n    strongest = max(strengths, key=strengths.get)\n    return f\"{class_name}.{strongest}\""
    },
    {
        "number": 153,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    \"\"\"\n    strengths = {}\n    for extension in extensions:\n        cap_count = sum(1 for char in extension if char.isupper())\n        sm_count = sum(1 for char in extension if char.islower())\n        strength = cap_count - sm_count\n        if strength in strengths:\n            strengths[strength].append(extension)\n        else:\n            strengths[strength] = [extension]\n    \n    max_strength = max(strengths.keys())\n    strongest_extensions = strengths[max_strength]\n    return f\"{class_name}.{strongest_extensions[0]}\""
    },
    {
        "number": 153,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Strongest_Extension(class_name, extensions):\n    # Convert extensions to tuples (name, strength)\n    strengths = [(name, sum(c.isupper() for c in name) - sum(c.islower() for c in name)) for name in extensions]\n    # Find strongest extension\n    strongest = max(strengths, key=lambda x: x[1])\n    # Return result\n    return f\"{class_name}.{strongest[0]}\""
    },
    {
        "number": 153,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n\n    # Create a list of tuples containing the extension name and its strength\n    strengths = [(ext, sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())) for ext in extensions]\n\n    # Sort the list of tuples by the strength in descending order\n    strengths.sort(key=lambda x: x[1], reverse=True)\n\n    # Get the name of the strongest extension\n    strongest_ext = strengths[0][0]\n\n    # Return the class name and strongest extension name as a string\n    return f\"{class_name}.{strongest_ext}\"\n"
    },
    {
        "number": 154,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    \"\"\"\n    def rotate(s):\n        return s[1:] + s[0]\n    \n    if b in a or b in rotate(a):\n        return True\n    else:\n        return False"
    },
    {
        "number": 154,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\"\n    if b in a:\n        return True\n    else:\n        if len(b) > len(a):\n            return False\n        else:\n            for i in range(len(a)):\n                if b == a[i:i+len(b)]:\n                    return True\n            return False\n"
    },
    {
        "number": 154,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n\n    \"\"\"\n    if len(b) > len(a):\n        return False\n\n    a = a.lower()\n    b = b.lower()\n\n    if b in a:\n        return True\n\n    if b in a[1:]:\n        return True\n\n    for i in range(2, len(a)):\n        if b in a[i:]:\n            return True\n\n    return False"
    },
    {
        "number": 154,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\"\n    if len(b) > len(a):\n        return False\n    \n    for i in range(len(a)):\n        if a[i:i+len(b)] == b:\n            return True\n    \n    for i in range(len(a)):\n        if a[i:i+len(b)] == b[::-1]:\n            return True\n    \n    return False"
    },
    {
        "number": 154,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\"\"\"\n    if b in a:\n        return True\n    else:\n        return False"
    },
    {
        "number": 154,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"Return True if the second word or any of its rotations is a substring in the first word\"\"\"\n    if b in a or b in a[1:] + a[:1]:\n        return True\n    else:\n        for i in range(len(b)):\n            if b[i:] + b[:i] in a or b[i:] + b[:i] in a[1:] + a[:1]:\n                return True\n        return False"
    },
    {
        "number": 154,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\"\"\"\n    if b in a:\n        return True\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False"
    },
    {
        "number": 154,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    \"\"\"\n    if b in a or b in a[1:]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 154,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"\n    Given two words, a and b, return True if the second word or any of its rotations is a substring in the first word.\n    \"\"\"\n    if len(a) < len(b):\n        b, a = a, b\n    b = b.lower()\n    for i in range(len(a)):\n        if a[i:i+len(b)].lower() == b:\n            return True\n    return False"
    },
    {
        "number": 154,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cycpattern_check(word, pattern):\n    \"\"\"\n    You are given a word and a pattern.\n    You need to check if the pattern is present in the word or its rotations.\n    If it is present, return True. Otherwise, return False.\n    \"\"\"\n    # Check if the pattern is present in the word\n    if pattern in word:\n        return True\n    \n    # Check if the pattern is present in the word after rotating it\n    for i in range(1, len(word)):\n        if word[i:] + word[:i] == word:\n            if pattern in word[i:] + word[:i]:\n                return True\n    \n    # If the pattern is not present in the word or its rotations, return False\n    return False"
    },
    {
        "number": 155,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"
    },
    {
        "number": 155,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"
    },
    {
        "number": 155,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"
    },
    {
        "number": 155,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        num //= 10\n    return (count_even, count_odd)\n"
    },
    {
        "number": 155,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\"\"\"\n    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"
    },
    {
        "number": 155,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num_str = str(num)\n    even_count = 0\n    odd_count = 0\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"
    },
    {
        "number": 155,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\"\"\"\n    count_even = count_odd = 0\n    num = abs(num)\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        num //= 10\n    return (count_even, count_odd)"
    },
    {
        "number": 155,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\"\"\"\n    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"
    },
    {
        "number": 155,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\"\"\"\n    count_even = 0\n    count_odd = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)"
    },
    {
        "number": 155,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\"\"\"\n    count_even = 0\n    count_odd = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)"
    },
    {
        "number": 156,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    roman_numerals = [\n        (1000,'m'),\n        (900, 'cm'),\n        (500, 'd'),\n        (400, 'cd'),\n        (100, 'c'),\n        (90, 'xc'),\n        (50, 'l'),\n        (40, 'xl'),\n        (10, 'x'),\n        (9, 'ix'),\n        (5, 'v'),\n        (4, 'iv'),\n        (1, 'i')\n    ]\n\n    roman = ''\n    for i in roman_numerals:\n        while number >= i[0]:\n            roman += i[1]\n            number -= i[0]\n\n    return roman.lower()"
    },
    {
        "number": 156,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    True\n    >>> int_to_mini_roman(152) == 'clii'\n    True\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    True\n    \"\"\"\n\n    roman_numerals = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"]\n\n    if number <= 0 or number > 1000:\n        return \"Error: Input must be between 1 and 1000.\"\n\n    mini_roman = \"\"\n    for i in range(len(roman_numerals)):\n        while number >= roman_numerals[i]:\n            mini_roman += roman_numerals[i]\n            number -= roman_numerals[i]\n\n    return mini_roman.lower()"
    },
    {
        "number": 156,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    # Define a dictionary of Roman numeral symbols and their values\n    roman_symbols = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C',\n                     90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V',\n                     4: 'IV', 1: 'I'}\n\n    # Initialize an empty string to build the roman numeral\n    roman_numeral = ''\n\n    # Iterate over the dictionary in descending order of value\n    for value in sorted(roman_symbols, reverse=True):\n\n        # Divide the number by the current value and append the corresponding symbol to the string\n        num_times = number // value\n        roman_numeral += roman_symbols[value] * num_times\n\n        # Update the number to the remainder after dividing by the current value\n        number -= value * num_times\n\n    return roman_numeral.lower()"
    },
    {
        "number": 156,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_dict = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000:'m'\n    }\n    roman_num = ''\n    for key, value in roman_dict.items():\n        while number >= key:\n            roman_num += value\n            number -= key\n    return roman_num.lower()"
    },
    {
        "number": 156,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    True\n    >>> int_to_mini_roman(152) == 'clii'\n    True\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    True\n    \"\"\"\n    roman_numeral_map = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    roman_numeral = ''\n    for value, numeral in roman_numeral_map.items():\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n    return roman_numeral.lower()"
    },
    {
        "number": 156,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def int_to_mini_roman(num):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    \n    roman_numeral_dict = {1000:'m', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', \n                          90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    \n    roman_numeral = ''\n    for value, numeral in roman_numeral_dict.items():\n        while num >= value:\n            roman_numeral += numeral\n            num -= value\n            \n    return roman_numeral.lower()"
    },
    {
        "number": 156,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def int_to_mini_roman(number):\n    roman_map = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x',\n                 40: 'xl', 50: 'l', 90: 'xc', 100: 'c',\n                 400: 'cd', 500: 'd', 900: 'cm', 1000:'m'}\n\n    result = ''\n    for value, symbol in sorted(roman_map.items(), reverse=True):\n        while number >= value:\n            result += symbol\n            number -= value\n\n    return result.lower()"
    },
    {
        "number": 156,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def int_to_mini_roman(number):\n    roman_numeral_map = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n\n    roman_numeral = ''\n    for value, numeral in sorted(roman_numeral_map.items(), reverse=True):\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n\n    return roman_numeral.lower()"
    },
    {
        "number": 156,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Define a dictionary to store the mapping of roman numerals to their values\n    roman_dict = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n\n    # Initialize an empty string to store the roman numeral\n    roman_numeral = ''\n\n    # Iterate over the dictionary and subtract the largest value possible from the number\n    # until the number becomes zero\n    for value, numeral in sorted(roman_dict.items(), reverse=True):\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n\n    return roman_numeral"
    },
    {
        "number": 156,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Define the rules for converting numbers to roman numerals\n    roman_numerals = {\n        1000:'m', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n\n    # Initialize the result string\n    result = ''\n\n    # Iterate over the roman numerals in decreasing order of value\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        # Compute the number of times the current numeral can be added\n        times = number // value\n        # Append the numeral to the result string\n        result += numeral * times\n        # Subtract the value of the numeral from the number\n        number -= value * times\n\n    # Return the result string in lowercase\n    return result.lower()"
    },
    {
        "number": 157,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 157,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # sort the sides in ascending order\n    sides = sorted([a, b, c])\n    # check if all sides are greater than 0\n    if all(side > 0 for side in sides):\n        # check if the sum of any two sides is greater than the third side\n        if sides[0] + sides[1] > sides[2]:\n            return True\n        elif sides[1] + sides[2] > sides[0]:\n            return True\n        elif sides[0] + sides[2] > sides[1]:\n            return True\n    return False"
    },
    {
        "number": 157,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Check if the sum of any two sides is equal to the third side\n    if a + b == c or b + c == a or c + a == b:\n        # Check if the product of any two sides is equal to the square of the third side\n        if a * b == c**2 or b * c == a**2 or c * a == b**2:\n            # Check if the sum of the square of any two sides is equal to the square of the third side\n            if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2:\n                # Check if any of the angles of the triangle is 90 degree\n                if a**2 + b**2 == c**2 and b == c or b**2 + c**2 == a**2 and c == a or c**2 + a**2 == b**2 and a == b:\n                    return True\n    return False"
    },
    {
        "number": 157,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or 90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 157,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Check if the given sides form a right-angled triangle\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 157,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or 90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # check if all sides are positive\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    # check if sum of any two sides is greater than the third side\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    # check if any angle is a right angle\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    # check if any side is a right angle\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    # check if any two sides are a right angle\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    # if none of the above conditions are true, then the triangle is not a right angled triangle\n    return False"
    },
    {
        "number": 157,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Check if the given sides can form a right-angled triangle\n    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 157,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\n    # Check if the input sides are valid\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n\n    # Check if the sum of any two sides is greater than the third side\n    if a + b <= c or b + c <= a or c + a <= b:\n        return False\n\n    # Check if the input sides form a right-angled triangle\n    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2:\n        return True\n\n    # Check if the input sides form an isosceles triangle\n    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2:\n        return True\n\n    # Check if the input sides form a scalene triangle\n    if a**2 + b**2!= c**2 and b**2 + c**2!= a**2 and c**2 + a**2!= b**2:\n        return True\n\n    # Return False if none of the above conditions are met\n    return False"
    },
    {
        "number": 157,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    \n    # Check if the input lengths form a valid triangle\n    if a+b>c and b+c>a and c+a>b:\n        # Calculate the angles of the triangle\n        angle_a = math.degrees(math.acos((b**2 + c**2 - a**2) / (2 * b * c)))\n        angle_b = math.degrees(math.acos((c**2 + a**2 - b**2) / (2 * c * a)))\n        angle_c = math.degrees(math.acos((a**2 + b**2 - c**2) / (2 * a * b)))\n        \n        # Check if the angles form a right-angled triangle\n        if angle_a == 90 or angle_b == 90 or angle_c == 90:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\n    # Check if the sum of any two sides is greater than the third side\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False"
    },
    {
        "number": 158,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"aaaaaaa\"\n    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    \n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_word = word\n            max_unique_chars = unique_chars\n    \n    return max_word"
    },
    {
        "number": 158,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_max(words):\n    \"\"\"\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    \n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    \n    return max_word"
    },
    {
        "number": 158,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_max(words):\n    max_word = \"\"\n    max_count = 0\n    \n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_count or (len(unique_chars) == max_count and word < max_word):\n            max_word = word\n            max_count = len(unique_chars)\n    \n    return max_word"
    },
    {
        "number": 158,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_word = word\n            max_count = count\n        elif count == max_count:\n            if word < max_word:\n                max_word = word\n    \n    return max_word"
    },
    {
        "number": 158,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_max(words):\n    # create a dictionary to store unique character count for each word\n    word_dict = {}\n    for word in words:\n        # get the unique character count for each word\n        unique_char_count = len(set(word))\n        # add the word and its unique character count to the dictionary\n        word_dict[word] = unique_char_count\n    \n    # find the maximum unique character count and its corresponding word\n    max_count = max(word_dict.values())\n    max_words = [word for word, count in word_dict.items() if count == max_count]\n    \n    # if there are multiple words with maximum unique character count,\n    # return the one which comes first in lexicographical order\n    if len(max_words) > 1:\n        return sorted(max_words)[0]\n    else:\n        return max_words[0]\n"
    },
    {
        "number": 158,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_max(words):\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n        unique_count = len(set(word))\n        if unique_count > max_count or (unique_count == max_count and word < max_word):\n            max_word = word\n            max_count = unique_count\n    return max_word"
    },
    {
        "number": 158,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n        count = len(set(word))\n        if count > max_count or (count == max_count and word < max_word):\n            max_word = word\n            max_count = count\n    return max_word"
    },
    {
        "number": 158,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_max(words):\n    max_word = ''\n    max_count = 0\n    \n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_word = word\n            max_count = count\n        elif count == max_count:\n            if word < max_word:\n                max_word = word\n    \n    return max_word"
    },
    {
        "number": 158,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"aaaaaaa\"\n    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"
    },
    {
        "number": 158,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    \n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_word = word\n            max_count = count\n    \n    return max_word"
    },
    {
        "number": 159,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    total_eaten = number + need\n    if total_eaten > remaining:\n        total_eaten = remaining\n    return [total_eaten, remaining - total_eaten]"
    },
    {
        "number": 159,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if need <= remaining:\n        total = number + need\n        left = remaining - need\n        return [total, left]\n    else:\n        total = number + remaining\n        left = 0\n        return [total, left]\n"
    },
    {
        "number": 159,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if remaining < need:\n        total_carrots = number + remaining\n        carrots_left = 0\n    else:\n        total_carrots = number + need\n        carrots_left = remaining - need\n    return [total_carrots, carrots_left]"
    },
    {
        "number": 159,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    eaten = number + remaining\n    if eaten >= need:\n        return [eaten, remaining]\n    else:\n        return [need, 0]"
    },
    {
        "number": 159,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]"
    },
    {
        "number": 159,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    total = number + remaining\n    if total >= need:\n        return [total, total - need]\n    else:\n        return [total, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if remaining < need:\n        eaten = remaining\n    else:\n        eaten = need\n    return [number + eaten, remaining - eaten]"
    },
    {
        "number": 159,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\""
    },
    {
        "number": 159,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n    \n    Have fun :)\n    \"\"\"\n    total_eaten = number + remaining if remaining >= need else number + remaining - need\n    remaining_carrots = total_eaten - number if total_eaten >= need else 0\n    \n    return [total_eaten, remaining_carrots]"
    },
    {
        "number": 159,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator = ['+', '*', '-']\n    operand = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator = ['+', '*', '-']\n    operand = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n\n    # Initialize an empty list to store the operands in reverse order\n    operands_reverse = []\n\n    # Loop through the operand list and append each element to the operands_reverse list\n    for i in range(len(operand)-1, -1, -1):\n        operands_reverse.append(operand[i])\n\n    # Initialize a variable to store the final result\n    result = operands_reverse[0]\n\n    # Loop through the operator list and use the corresponding operator function to evaluate the expression\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result = operands_reverse[i] + result\n        elif operator[i] == '-':\n            result = operands_reverse[i] - result\n        elif operator[i] == '*':\n            result = operands_reverse[i] * result\n        elif operator[i] == '//':\n            result = operands_reverse[i] // result\n        elif operator[i] == '**':\n            result = operands_reverse[i] ** result\n\n    # Return the final result\n    return result"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = operand[0]\n\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n\n    return result"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = operand[0]\n    i = 0\n    while i < len(operator):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n        i += 1\n    return result"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator = ['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = \"\"\n    for i in range(len(operator)):\n        if operator[i] == \"+\":\n            expression += \"+\" + str(operand[i])\n        elif operator[i] == \"-\":\n            expression += \"-\" + str(operand[i])\n        elif operator[i] == \"*\":\n            expression += \"*\" + str(operand[i])\n        elif operator[i] == \"//\":\n            expression += \"//\" + str(operand[i])\n        elif operator[i] == \"**\":\n            expression += \"**\" + str(operand[i])\n        else:\n            expression += str(operand[i])\n    return eval(expression)"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    \n    # check if operator list has at least one operator and operand list has at least two operands\n    if len(operator) < 1 or len(operand) < 2:\n        return \"Invalid Input\"\n\n    # check if the length of operator list is equal to the length of operand list minus one\n    if len(operator)!= len(operand) - 1:\n        return \"Invalid Input\"\n\n    # initialize the result variable to the first operand\n    result = operand[0]\n\n    # iterate over the operator list, operand list and their indices\n    for i in range(len(operator)):\n        op = operator[i]\n        num = operand[i+1]\n\n        # perform the operation based on the operator and update the result variable\n        if op == '+':\n            result += num\n        elif op == '-':\n            result -= num\n        elif op == '*':\n            result *= num\n        elif op == '//':\n            result //= num\n        elif op == '**':\n            result **= num\n\n    return result"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator = ['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n    expression = str(operand[0])\n    for i in range(1, len(operator)):\n        expression += operator[i] + str(operand[i])\n    return eval(expression)"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == \"+\":\n            expression += operand[i+1]\n        elif operator[i] == \"-\":\n            expression -= operand[i+1]\n        elif operator[i] == \"*\":\n            expression *= operand[i+1]\n        elif operator[i] == \"//\":\n            expression //= operand[i+1]\n        elif operator[i] == \"**\":\n            expression **= operand[i+1]\n    return expression"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = str(operand[0])\n    for i in range(1, len(operator)):\n        expression += operator[i] + str(operand[i])\n    return eval(expression)\n"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # Initialize the result variable to None\n    result = None\n\n    # Loop through the operator list\n    for i in range(len(operator)):\n\n        # If the operator is addition, add the current operand to the result variable\n        if operator[i] == '+':\n            if result is None:\n                result = operand[i]\n            else:\n                result += operand[i]\n\n        # If the operator is subtraction, subtract the current operand from the result variable\n        elif operator[i] == '-':\n            if result is None:\n                result = -operand[i]\n            else:\n                result -= operand[i]\n\n        # If the operator is multiplication, multiply the current operand with the result variable\n        elif operator[i] == '*':\n            if result is None:\n                result = operand[i]\n            else:\n                result *= operand[i]\n\n        # If the operator is floor division, divide the result variable by the current operand and round down\n        elif operator[i] == '//':\n            if result is None:\n                result = operand[i]\n            else:\n                result //= operand[i]\n\n        # If the operator is exponentiation, raise the result variable to the power of the current operand\n        elif operator[i] == '**':\n            if result is None:\n                result = operand[i]\n            else:\n                result **= operand[i]\n\n    # Return the result variable after all the operators have been applied\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.upper() if char.islower() else char.lower()\n        else:\n            result += char\n    return result[::-1] if not any(char.isalpha() for char in s) else result"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    result = ''\n    for char in s:\n        if char.isalpha():\n            result += char.upper() if char.islower() else char.lower()\n        else:\n            result += char\n    return result[::-1] if not any(char.isalpha() for char in s) else result"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.upper() if char.islower() else char.lower()\n        else:\n            result += char\n    return result[::-1] if not any(char.isalpha() for char in s) else result"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    letters = []\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                letters.append(char.upper())\n            else:\n                letters.append(char.lower())\n        else:\n            letters.append(char)\n    return ''.join(letters[::-1])"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    result = ''\n    for char in s:\n        if char.isalpha():\n            result += char.upper() if char.islower() else char.lower()\n        else:\n            result += char\n    return result[::-1] if not any(char.isalpha() for char in s) else result"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solve(s):\n    # Reverse the string if it contains no letters\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    \n    # Iterate over the characters of the string and reverse their case\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            result += c.lower() if c.isupper() else c.upper()\n        else:\n            result += c\n            \n    return result"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.upper() if char.islower() else char.lower()\n        else:\n            result += char\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return result"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    if s.isalpha():\n        return s.swapcase()\n    else:\n        return s[::-1]"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    \n    # Reverse the string if it contains no letters\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    \n    # Reverse the case of letters\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    \n    return result"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    True\n    \"\"\"\n\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == '':\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if text == '':\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    True\n    >>> string_to_md5('') is None\n    True\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    True\n    \"\"\"\n    if text == \"\":\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    True\n    \"\"\"\n\n    if not text:\n        return None\n\n    return hashlib.md5(text.encode()).hexdigest()"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    True\n    \"\"\"\n\n    if not text:\n        return None\n    \n    return hashlib.md5(text.encode()).hexdigest()"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    # Create an empty list to store the even digits\n    even_digits = []\n\n    # Loop through the range of the given numbers\n    for num in range(a, b+1):\n        # Loop through the digits of each number\n        for digit in str(num):\n            # Check if the digit is even and not already in the list\n            if int(digit) % 2 == 0 and int(digit) not in even_digits:\n                # Add the even digit to the list\n                even_digits.append(int(digit))\n\n    # Sort the list in ascending order and return it\n    return sorted(even_digits)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    # Initialize an empty list to store the even digits\n    even_digits = []\n\n    # Loop through the numbers between a and b (inclusive)\n    for num in range(a, b+1):\n\n        # Check if the number is even\n        if num % 2 == 0:\n\n            # Add the even digits to the list\n            for digit in str(num):\n                if int(digit) % 2 == 0:\n                    even_digits.append(int(digit))\n\n    # Sort the even digits in ascending order and return the list\n    even_digits.sort()\n    return even_digits"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    even_digits = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            even_digits.append(num)\n    return even_digits"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    even_digits = []\n    for num in range(a, b+1):\n        digits = [int(digit) for digit in str(num)]\n        even_digits.extend([digit for digit in digits if digit % 2 == 0])\n    return sorted(even_digits)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    # Initialize an empty list to store the even digits\n    even_digits = []\n\n    # Loop through the range of integers from a to b\n    for i in range(a, b+1):\n        # Extract the even digits from the integer and append them to the list\n        even_digits += [int(d) for d in str(i) if int(d) % 2 == 0]\n\n    # Return the list of even digits\n    return even_digits"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # First, check if a and b are within the valid range\n    if a < 1 or b > 1000:\n        return []\n\n    # Then, generate the even digits between a and b\n    even_digits = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            even_digits.append(num)\n\n    # Finally, sort the list and return it\n    even_digits.sort()\n    return even_digits"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    \n    # check if a is even\n    if a % 2!= 0:\n        a += 1\n    \n    # initialize an empty list to store even digits\n    even_digits = []\n    \n    # loop through each digit in the range [a, b]\n    for digit in range(a, b+1):\n        # check if the digit is even\n        if digit % 2 == 0:\n            even_digits.append(digit)\n    \n    # return the list of even digits in ascending order\n    return sorted(even_digits)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    even_integers = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            even_integers.append(num)\n    return even_integers"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # Convert a and b to strings so we can easily extract digits\n    a_str = str(a)\n    b_str = str(b)\n\n    # Initialize an empty list to store the even digits\n    even_digits = []\n\n    # Loop over the digits in b_str (in reverse order)\n    for digit in b_str[::-1]:\n        # Convert the digit to an integer and check if it's even\n        digit_int = int(digit)\n        if digit_int % 2 == 0:\n            # If it is even, add it to the even_digits list\n            even_digits.append(digit_int)\n\n    # Loop over the digits in a_str (in ascending order)\n    for digit in a_str:\n        # Convert the digit to an integer and check if it's even\n        digit_int = int(digit)\n        if digit_int % 2 == 0:\n            # If it is even, check if it's in the even_digits list\n            if digit_int in even_digits:\n                # If it is, remove it from the list so we don't include it again\n                even_digits.remove(digit_int)\n            else:\n                # If it's not, add it to the even_digits list\n                even_digits.append(digit_int)\n\n    # Sort the even_digits list in ascending order and return it\n    return sorted(even_digits)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    # Check if a is less than or equal to b\n    if a > b:\n        a, b = b, a\n\n    # Initialize empty list to store even digits\n    even_digits = []\n\n    # Loop through all numbers between a and b (inclusive)\n    for num in range(a, b+1):\n        # Check if the number has even digits\n        if all(int(digit) % 2 == 0 for digit in str(num)):\n            # If it has even digits, add it to the list\n            even_digits.append(num)\n\n    # Return the even digits in ascending order\n    return sorted(even_digits)"
    }
]