[
    {
        "number": 0,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    :param numbers: list of numbers\n    :param threshold: threshold for the closer elements\n    :return: True if there are any closer elements than given threshold, False otherwise\n    \"\"\"\n    if len(numbers) < 2:\n        return False\n\n    min_distance = float('inf')\n    min_indices = []\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                min_distance = distance\n                min_indices = [i, j]\n\n    if len(min_indices) == 0:\n        return False\n\n    if min_distance <= threshold:\n        return True\n\n    for i in range(len(numbers)):\n        if abs(numbers[i] - numbers[min_indices[0]]) <= threshold and abs(numbers[i] - numbers[min_indices[1]]) <= threshold:\n            continue\n        else:\n            return False\n\n    return False",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
        "num_ids": 862
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    \"\"\"\n    # Remove any leading/trailing spaces from the string\n    paren_string = paren_string.strip()\n    \n    # Initialize an empty list to hold the groups of parentheses\n    groups = []\n    \n    # Loop through each character in the string\n    for i in range(len(paren_string)):\n        # If the character is an opening brace, add it to the groups list\n        if paren_string[i] == '(':\n            groups.append(paren_string[i])\n        # If the character is a closing brace, check if the last group was empty (i.e. the opening brace)\n        elif paren_string[i] == ')':\n            # Check if the opening brace and the next character are balanced\n            if len(groups) > 0 and paren_string[i+1] == '(':\n                # Remove the last group from the list and add the opening brace to it\n                groups[-1] += paren_string[i]\n                # Remove the opening brace from the list\n                del groups[i]\n                # Remove any trailing spaces from the groups string\n                groups_str = ''.join(groups)\n                groups_str = groups_str.strip()\n                # Add the new group to the list of groups\n                groups.append(groups_str)\n                # Move to the next character\n                i += 1\n            # If the opening brace and the next character are not balanced, return the groups list as is\n            else:\n                return groups\n    \n    # If there are no opening braces in the input string, return the groups list as is\n    return groups",
        "test": "assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']",
        "num_ids": 1123
    },
    {
        "number": 2,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer, decimal = divmod(number, 1)\n    return decimal",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 386
    },
    {
        "number": 3,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance.\n    Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    total = sum(operations)\n    current_balance = 0\n    for operation in operations:\n        if operation < 0:\n            return True\n        current_balance += operation\n    return current_balance == 0",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 539
    },
    {
        "number": 4,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n\n    # Calculate the mean of the dataset\n    mean = sum(numbers) / len(numbers)\n\n    # Calculate the MAD for each element\n    mad_list = []\n    for num in numbers:\n        mad = abs(num - mean)\n        mad_list.append(mad)\n\n    # Calculate the mean of the MADs\n    mad = sum(mad_list) / len(mad_list)\n\n    return mad",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
        "num_ids": 782
    },
    {
        "number": 5,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n\n    # Initialize an empty list to hold the interspersed numbers\n    result = []\n\n    # Iterate over the input list and insert each number in between\n    for i in range(len(numbers)):\n        if i == 0:\n            # First number\n            result.append(numbers[i])\n            continue\n        if i == len(numbers) - 1:\n            # Last number\n            result.append(numbers[i])\n            continue\n\n        # Insert a delimeter between two consecutive numbers\n        result.append(numbers[i] + delimeter)\n\n    return result",
        "test": "assert intersperse([], 4) == []",
        "num_ids": 661
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    \n    def parse_nested_groups(group: str) -> int:\n        \"\"\"\n        Helper function to parse a group of nested parentheses.\n        \"\"\"\n        level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n            elif char == ')':\n                level -= 1\n            if level == -1:\n                return 0\n        return level\n    \n    return [parse_nested_groups(group) for group in paren_string.split()]\n",
        "test": "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
        "num_ids": 857
    },
    {
        "number": 7,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    :param strings: The list of strings to filter.\n    :param substring: The substring to check for in each string.\n    :return: A new list of strings that only contain the ones that contain the given substring.\n    \"\"\"\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 464
    },
    {
        "number": 8,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    sum = 0\n    product = 1\n\n    for num in numbers:\n        sum += num\n        product *= num\n\n    return sum, product",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 595
    },
    {
        "number": 9,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    max_list = [numbers[0]] # Initialize the first element as the max\n    for num in numbers[1:]: # Iterate over the rest of the numbers\n        if num > max_list[-1]: # If the new number is greater than the last element in the list\n            max_list.append(num) # Add it to the end of the list\n    return max_list",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
        "num_ids": 686
    },
    {
        "number": 10,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    # Find the longest postfix that is a palindrome\n    postfix = string[::-1]\n    while len(postfix) > 1 and is_palindrome(postfix):\n        postfix = postfix[:-1]\n\n    # Find the shortest string prefix that comes before the palindrome\n    prefix = ''\n    while len(prefix) < len(postfix) and not is_palindrome(prefix + postfix):\n        prefix += string[0]\n\n    # Build the palindrome\n    return prefix + postfix[::-1]",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 737
    },
    {
        "number": 11,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Convert inputs to lists of 0s and 1s\n    a_list = [int(c) for c in a]\n    b_list = [int(c) for c in b]\n    \n    # Perform XOR on the lists\n    result = [a_list[i] ^ b_list[i] for i in range(len(a_list))]\n    \n    # Convert result to a string and return\n    return ''.join([str(i) for i in result])",
        "test": "assert string_xor('010', '110') == '100'",
        "num_ids": 532
    },
    {
        "number": 12,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    \n    if not strings:\n        return None\n\n    max_length = 0\n    longest_string = None\n\n    for string in strings:\n        if len(string) > max_length:\n            max_length = len(string)\n            longest_string = string\n\n    return longest_string",
        "test": "assert longest([]) == None",
        "num_ids": 446
    },
    {
        "number": 13,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 391
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    yield from (prefix + string[len(prefix):] for prefix in string[1:].startswith(string))",
        "test": "assert all_prefixes('hello') == ['h', 'he', 'hel', 'hell', 'hello']",
        "num_ids": 421
    },
    {
        "number": 15,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return''.join(map(str, range(n+1)))",
        "test": "assert string_sequence(0) == '0'",
        "num_ids": 388
    },
    {
        "number": 16,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n\n    # Convert the string to lowercase and remove spaces\n    string = string.lower().replace(\" \", \"\")\n\n    # Initialize a dictionary to store the count of each character\n    char_count = {}\n\n    # Iterate over the string and count the occurrences of each character\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Return the count of distinct characters\n    return len(char_count)",
        "test": "assert count_distinct_characters('Jerry') == 4",
        "num_ids": 531
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    # Define a list to store the notes\n    notes = []\n\n    # Iterate through each character in the string\n    for char in music_string:\n\n        # If the current character is a dot ('.'), add it to the notes list\n        if char == '.':\n            notes.append(4)\n\n        # If the current character is a note ('.' or 'o'), add it to the notes list\n        elif char in 'o|':\n            notes.append(1)\n\n        # If the current character is an 'o|' or a '|', add a 1 to the notes list\n        else:\n            notes.append(2)\n\n    return notes",
        "test": "assert parse_music('o o|.| o| o|.|.|.|.| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
        "num_ids": 1261
    },
    {
        "number": 18,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 505
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest.\n    \"\"\"\n    # Split the string into a list of integers\n    numbers = list(map(int, numbers.split()))\n\n    # Sort the list in descending order and join the sorted list into a string\n    return''.join(str(x) for x in sorted(numbers, reverse=True))",
        "test": "assert sort_numbers('three one five') == 'one three five'",
        "num_ids": 551
    },
    {
        "number": 20,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # Calculate the distance between the first and last elements\n    distance = numbers[1] - numbers[0]\n\n    # Initialize the closest elements to the first two elements\n    closest1, closest2 = numbers[0], numbers[1]\n\n    # Iterate through the remaining elements\n    for i in range(2, len(numbers)):\n        # Calculate the new distance between the current element and the closest element\n        new_distance = numbers[i] - closest2\n        # If the new distance is smaller than the current distance, update the closest elements\n        if new_distance < distance:\n            closest1, closest2 = closest2, numbers[i]\n            distance = new_distance\n\n    # Return the closest two elements\n    return closest1, closest2",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
        "num_ids": 1098
    },
    {
        "number": 21,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    scaled_numbers = [(x - min_num) / range_num for x in numbers]\n\n    return scaled_numbers",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 804
    },
    {
        "number": 22,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 432
    },
    {
        "number": 23,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)",
        "test": "assert strlen('') == 0",
        "num_ids": 221
    },
    {
        "number": 24,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    if n < 2:\n        return 1\n    \n    divisors = []\n    i = 2\n    \n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            divisors.append(i)\n            \n    return divisors[-1]",
        "test": "assert largest_divisor(15) == 5",
        "num_ids": 475
    },
    {
        "number": 25,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, int(n**0.5)+1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors",
        "test": "assert factorize(25) == [5, 5], \"25 is not a prime number\"",
        "num_ids": 991
    },
    {
        "number": 26,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # Create a set to store unique elements\n    unique_set = set(numbers)\n\n    # Create a new list to store unique elements\n    unique_list = []\n\n    # Iterate over the unique set and add elements to the new list only once\n    for num in unique_set:\n        if num not in unique_list:\n            unique_list.append(num)\n\n    return unique_list",
        "test": "assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]",
        "num_ids": 417
    },
    {
        "number": 27,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    # Convert all characters to lowercase\n    lowercase = string.lower()\n    # Convert the first character to uppercase\n    first_char = lowercase.capitalize()\n    # Remove the first character\n    first_char = first_char[1:]\n    # Add the first character to the beginning of the string\n    result = first_char + lowercase[0]\n    return result",
        "test": "assert flip_case('hello') == 'hELLO'",
        "num_ids": 364
    },
    {
        "number": 28,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    :param strings: list of strings to concatenate\n    :return: concatenated string\n    \"\"\"\n    return ''.join(strings)",
        "test": "assert concatenate([]) == ''",
        "num_ids": 283
    },
    {
        "number": 29,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings\n",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 468
    },
    {
        "number": 30,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    Args:\n        l (list): List of numbers.\n\n    Returns:\n        list: List of positive numbers.\n    \"\"\"\n    return [num for num in l if num > 0]",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 514
    },
    {
        "number": 31,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_prime(n):\n    \"\"\"Return True if a given number is prime, and False otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert is_prime(6) == False",
        "num_ids": 530
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x**2 +... xs[n] * x**n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    \n    # Check if xs is even number of coefficients\n    if len(xs) % 2 == 0:\n        max_coeff = max(xs)\n        if max_coeff == 0:\n            return None\n        min_coeff = min(xs)\n        if min_coeff == 0:\n            return None\n    \n    # Find x such that poly(x) = 0\n    xs.sort()\n    n = len(xs)\n    x0 = (poly(xs, xs[n//2]) - poly(xs, -xs[n//2-1])) / (xs[n//2-1] - xs[n//2])\n    return x0",
        "test": "assert round(find_zero([-6, 11, -6, 1]), 2) == 1.0",
        "num_ids": 1310
    },
    {
        "number": 33,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l.sort(key=lambda x: x if x % 3!= 0 else 9999)\n    return l\n",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 800
    },
    {
        "number": 34,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 444
    },
    {
        "number": 35,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 333
    },
    {
        "number": 36,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n        if count == 3:\n            return count\n    return count\n\nprint(fizz_buzz(50))  # Output: 0\nprint(fizz_buzz(78))  # Output: 2\nprint(fizz_buzz(79))  # Output: 3",
        "test": "assert fizz_buzz(78) == 2",
        "num_ids": 471
    },
    {
        "number": 37,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate over the even indices of the list\n    for i in range(0, len(l), 2):\n        # Initialize a variable to store the current even value\n        current_even = l[i]\n\n        # Iterate over the odd indicies of the list and check if the value at this index is equal to the current even value\n        for j in range(i + 2, len(l), 2):\n            # If the value at this index is equal to the current even value, add it to the result list\n            if l[j] == current_even:\n                result.append(l[j])\n                break\n\n    # Return the sorted result list\n    return result",
        "test": "assert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]",
        "num_ids": 811
    },
    {
        "number": 38,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    encoded = \"\".join(s.split())\n    # initialize dictionary to keep track of positions of each character in the encoded string.\n    pos = {}\n    # loop through the encoded string and update the positions of each character in the dictionary.\n    for i in range(len(encoded)):\n        pos[encoded[i]] = i\n    # reconstruct the string by cycling the characters at the positions in the dictionary.\n    decoded = \"\"\n    for i in range(len(encoded)):\n        group = encoded[pos[encoded[i]]]\n        decoded += group\n        # move the position of the first character in the group to the next position in the dictionary.\n        pos[encoded[i]] += 1\n        if len(group) < 3:\n            pos[encoded[i]] = 0\n    return decoded\n",
        "test": "assert decode_cyclic(encode_cyclic(\"world\")) == \"world\"",
        "num_ids": 921
    },
    {
        "number": 39,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if n < 2:\n        return None\n    \n    a, b = 0, 1\n    while b < n:\n        a, b = b, a + b\n    \n    return b",
        "test": "assert prime_fib(2) == 3, \"prime_fib(2) is not 3\"",
        "num_ids": 643
    },
    {
        "number": 40,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    This function takes a list of integers as input and returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    # initialize an empty list to store the three distinct elements that sum to zero\n    three_elements = []\n\n    # loop through the input list and check for three distinct elements that sum to zero\n    for num in l:\n        if len(three_elements) < 3:\n            if num == 0:\n                three_elements.append(num)\n            elif num in three_elements:\n                return False\n            else:\n                three_elements.append(num)\n        else:\n            if num in three_elements:\n                return True\n\n    # if all three distinct elements are in the input list and sum to zero, then there are no three distinct elements in the list that sum to zero\n    return False",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 1020
    },
    {
        "number": 41,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    collisions = 0\n    left_cars = 0\n    right_cars = 0\n\n    for i in range(n):\n        if i < n // 2:\n            left_cars += 1\n        else:\n            right_cars += 1\n\n        if left_cars > right_cars:\n            collisions += 1\n            left_cars = 0\n            right_cars = 0\n\n    return collisions",
        "test": "assert car_race_collision(4) == 2, \"The car race should have resulted in two collisions.\"",
        "num_ids": 1082
    },
    {
        "number": 42,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    # Use list comprehension to return the incremented list\n    return [x + 1 for x in l]",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 689
    },
    {
        "number": 43,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for num in l:\n        complement = 0 - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False",
        "test": "assert pairs_sum_to_zero([1, 3, -2, 1]) == False",
        "num_ids": 943
    },
    {
        "number": 44,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"Base cannot be less than 2\")\n    if base == 2:\n        return bin(x)[2:]\n    elif base == 8:\n        return hex(x)[2:]\n    elif base == 10:\n        return str(x)\n    else:\n        raise ValueError(\"Invalid base\")",
        "test": "assert change_base(8, 2) == '1000'",
        "num_ids": 676
    },
    {
        "number": 45,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n\n    area = 0.5 * a * h\n    return area",
        "test": "assert triangle_area(5, 3) == 7.5, \"The area of a triangle with length 5 and height 3 should be 7.5.\"",
        "num_ids": 264
    },
    {
        "number": 46,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        fib = fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n        return fib",
        "test": "assert fib4(5) == 4, \"The 5th element of the Fibonacci sequence is 4.\"",
        "num_ids": 629
    },
    {
        "number": 47,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "",
        "test": "assert median([-10, 4, 6, 1000, 10, 20]) == 15.0",
        "num_ids": 418
    },
    {
        "number": 48,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    # Reverse the given string\n    text = text[::-1]\n    # Check if the reversed string is equal to the original string\n    return text == text[::-1]",
        "test": "assert is_palindrome('') == True",
        "num_ids": 462
    },
    {
        "number": 49,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        n = -n\n    return int(str(n)[::-1] * int(str(p)[::-1], 2) ** (len(str(p)) - 1))\n",
        "test": "assert modp(1101, 101) == 2",
        "num_ids": 599
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    encoded = \"\"\n    for ch in s:\n        encoded += chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\"))\n    return encoded\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    decoded = \"\"\n    for ch in s:\n        decoded += chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\"))\n    return decoded",
        "test": "assert decode_shift(encode_shift(\"world\")) == \"dlrow\"",
        "num_ids": 505
    },
    {
        "number": 51,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiou'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 404
    },
    {
        "number": 52,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(num < t for num in l)",
        "test": "assert below_threshold([1, 20, 4, 10], 5) == False",
        "num_ids": 502
    },
    {
        "number": 53,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n\nprint(add(2, 3))  # Output: 5\nprint(add(5, 7))  # Output: 12",
        "test": "assert add(2, 3) == 5",
        "num_ids": 212
    },
    {
        "number": 54,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    # Create sets of characters for both words\n    char_set0 = set(s0)\n    char_set1 = set(s1)\n\n    # Check if the sets have the same characters\n    if char_set0 == char_set1:\n        return True\n    else:\n        return False",
        "test": "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
        "num_ids": 435
    },
    {
        "number": 55,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    a, b = 0, 1\n    \n    for i in range(2, n+1):\n        a, b = b, a + b\n    \n    return b",
        "test": "assert fib(2) == 1",
        "num_ids": 353
    },
    {
        "number": 56,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n    # Initialize an empty stack to keep track of opening brackets\n    stack = []\n\n    # Iterate over each character in the brackets string\n    for char in brackets:\n        # If the character is an opening bracket, push it onto the stack\n        if char == \"<\":\n            stack.append(char)\n        # If the character is a closing bracket, pop a matching opening bracket and check if it matches the current opening bracket\n        elif char == \">\":\n            if len(stack) == 0 or stack[-1]!= \"<\":\n                return False\n            stack.pop()\n\n    # If there are no unmatched opening brackets, all brackets are correctly bracketed\n    return len(stack) == 0",
        "test": "assert correct_bracketing(\"<\") == False",
        "num_ids": 668
    },
    {
        "number": 57,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    n = len(l)\n    for i in range(n-1):\n        if l[i] > l[i+1]:\n            return False\n    for i in range(n-1, 0, -1):\n        if l[i] < l[i-1]:\n            return False\n    return True",
        "test": "assert monotonic([1, 20, 4, 10]) == False",
        "num_ids": 538
    },
    {
        "number": 58,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Create a set of all the elements in the first list\n    unique_set = set(l1)\n    \n    # Create a set of all the elements in the second list\n    second_set = set(l2)\n    \n    # Find the intersection of the two sets\n    common_set = unique_set.intersection(second_set)\n    \n    # Convert the set to a list and sort it\n    common_list = list(common_set)\n    common_list.sort()\n    \n    return common_list\n",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 888
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    if n < 2:\n        raise ValueError(\"n must be greater than 1\")\n\n    # Check if n is a prime\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n\n    return n",
        "test": "assert largest_prime_factor(2048) == 2, \"Expected 2, got {} instead\".format(largest_prime_factor(2048))",
        "num_ids": 562
    },
    {
        "number": 60,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n",
        "test": "assert sum_to_n(30) == 465",
        "num_ids": 658
    },
    {
        "number": 61,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\"\n    Return True if every opening bracket has a corresponding closing bracket.\n\n    Example:\n    correct_bracketing(\"()\") -> False\n    correct_bracketing(\"(()())\") -> True\n    correct_bracketing(\")(()\") -> False\n    \"\"\"\n\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack or stack.pop()!= \"(\":\n                return False\n    return not stack",
        "test": "assert correct_bracketing(\"(\") is False",
        "num_ids": 570
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    n = len(xs)\n    derivs = [1] * n\n    for i in range(1, n):\n        derivs[i] = derivs[i-1] + xs[i-1]\n    return derivs",
        "test": "assert derivative([1, 2, 3]) == [2, 6]",
        "num_ids": 619
    },
    {
        "number": 63,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(3, n+1):\n            a, b = b, a + b\n        return b",
        "test": "assert fibfib(1) == 0, \"The first element of the fibfib number sequence is 0.\"",
        "num_ids": 408
    },
    {
        "number": 64,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    vowels = 'aeiouy'\n    count = 0\n\n    for char in s:\n        if char in vowels:\n            count += 1\n            if char == 'y' and s[-1] in vowels:\n                count += 1\n\n    return count\n",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 645
    },
    {
        "number": 65,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    # remove leading zeros\n    while x > 0 and x % 10 == 0:\n        x //= 10\n    \n    # handle negative shift value\n    if shift < 0:\n        shift = shift + len(str(x))\n    \n    # add leading zeros to shift\n    if shift > len(str(x)):\n        x = int(\"0\" * shift + str(x))\n    else:\n        x = int(str(x)[:shift] + str(x)[shift:])\n    \n    return str(x)",
        "test": "assert circular_shift(12, 2) == \"12\"",
        "num_ids": 575
    },
    {
        "number": 66,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total",
        "test": "assert digitSum(\"\") == 0, \"The function should return 0 for an empty string\"",
        "num_ids": 628
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\", 3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    fruit_dict = {'apple': 5, 'orange': 6,'mango': 1}\n    fruit_count = 0\n    for fruit in s:\n        fruit_count += fruit_dict[fruit]\n    return n - fruit_count",
        "test": "assert fruit_distribution(\"0 apples and 1 oranges\",3) == 2, \"The correct fruit distribution for 0 apples and 1 oranges should be 2.\"",
        "num_ids": 1016
    },
    {
        "number": 68,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pluck(arr):\n    even_values = set()\n    smallest_even_value = 0\n    smallest_even_index = -1\n\n    for index, node in enumerate(arr):\n        if node % 2 == 0:\n            even_values.add(node)\n            if len(even_values) < len(arr):\n                smallest_even_value = node\n                smallest_even_index = index\n\n    if len(even_values) == 0:\n        return []\n\n    if len(even_values) == 1:\n        return [smallest_even_value, smallest_even_index]\n\n    return [smallest_even_value, smallest_even_index]",
        "test": "assert pluck([4,2,3]) == [2, 1]",
        "num_ids": 955
    },
    {
        "number": 69,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\n    freq = {}\n\n    for num in lst:\n        if num > 0 and num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    max_freq = max(freq.values())\n    max_num = next(num for num, freq in freq.items() if freq == max_freq)\n\n    if max_num == 0:\n        return -1\n    else:\n        return max_num",
        "test": "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3  # Correct answer: 3",
        "num_ids": 946
    },
    {
        "number": 70,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # If the list is empty, return it\n    if not lst:\n        return []\n\n    # Initialize a variable to store the minimum value\n    min_value = lst[0]\n\n    # Loop through the remaining integers\n    for value in lst[1:]:\n        # If the current value is smaller than the minimum value, update the minimum value\n        if value < min_value:\n            min_value = value\n\n    # Initialize an empty list to store the result\n    result = []\n\n    # Loop through the remaining integers\n    for value in lst:\n        # If the current value is greater than or equal to the minimum value, add it to the result\n        if value >= min_value:\n            result.append(value)\n\n    return result",
        "test": "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]",
        "num_ids": 1068
    },
    {
        "number": 71,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        area = 0.5 * a * b\n        return round(area, 2)\n    else:\n        return -1",
        "test": "assert triangle_area(1, 2, 10) == -1, \"Expected area of triangle(1, 2, 10) to be -1 but got {} instead\".format(triangle_area(1, 2, 10))",
        "num_ids": 716
    },
    {
        "number": 72,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def will_it_fly(q, w):\n    # check if q is a palindrome\n    if q == list(q)[::-1]:\n        # check if sum of q's elements is less than or equal to the maximum possible weight\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert will_it_fly([1, 2], 5) is False # False",
        "num_ids": 633
    },
    {
        "number": 73,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def smallest_change(arr):\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = min(arr[0], arr[1])\n    for i in range(2, n):\n        dp[i] = min(dp[i-1], dp[i-2], arr[i]) + 1\n    return dp[-1]",
        "test": "assert smallest_change([1, 2, 3, 5, 4, 7, 9, 6]) == 4",
        "num_ids": 712
    },
    {
        "number": 74,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def total_match(lst1, lst2):\n    result = []\n    for word in lst1 + lst2:\n        if len(word) < len(lst2):\n            result.append(word)\n    return result",
        "test": "assert total_match([], []) == []",
        "num_ids": 614
    },
    {
        "number": 75,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    # Define 3 prime numbers\n    primes = [2, 3, 5]\n\n    # Check if a is a multiple of any of the prime numbers in primes\n    for prime in primes:\n        if a % prime == 0:\n            return True\n\n    return False",
        "test": "assert is_multiply_prime(30) == True",
        "num_ids": 501
    },
    {
        "number": 76,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_simple_power(x, n):\n    \"\"\"\n    Returns true if a number x is a simple power of n, and false otherwise.\n    \n    x is a simple power of n if n ** int = x.\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if n == 1:\n        return True\n    elif n % 2 == 0:\n        return is_simple_power(x, n // 2)\n    else:\n        return (x ** n) == x",
        "test": "assert is_simple_power(1, 4) == True",
        "num_ids": 670
    },
    {
        "number": 77,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def iscube(a):\n    # Check if a is a perfect square\n    if a**0.5**2 == a:\n        return True\n\n    # Check if a is a perfect cube\n    elif a == int(a**0.5) * int(a**0.5) * int(a**0.5):\n        return True\n\n    # If none of these conditions are met, return False\n    else:\n        return False",
        "test": "assert iscube(1) == True",
        "num_ids": 527
    },
    {
        "number": 78,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    \n    count = 0\n    hex_digits = \"0123456789ABCDEF\"\n    \n    for digit in num:\n        if digit in hex_digits:\n            digit_value = int(digit, 16)\n            if digit_value > 1:\n                for i in range(2, int(digit_value ** 0.5) + 1):\n                    if digit_value % i == 0:\n                        break\n                else:\n                    count += 1\n    \n    return count",
        "test": "assert hex_key(\"AB\") == 1",
        "num_ids": 1477
    },
    {
        "number": 79,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Convert decimal to binary string\n    binary = bin(decimal)[2:]\n    # Add extra characters 'db' at the beginning and at the end of the string\n    binary = 'db' + binary + 'db'\n    return binary",
        "test": "assert decimal_to_binary(15) == \"db1111db\"",
        "num_ids": 937
    },
    {
        "number": 80,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    n = len(s)\n    if n < 3:\n        return False\n    visited = [False] * n\n    \n    def dfs(i, j):\n        if i == j or i == n - 1 or j == n - 1 or visited[i] or visited[j]:\n            return\n        if i > 0 and s[i] == s[i - 1]:\n            return\n        visited[i] = True\n        visited[j] = True\n        if is_happy(s[i + 1:j - 1]):\n            return True\n        visited[i] = False\n        visited[j] = False\n        return False\n    \n    return dfs(0, n - 1)\n",
        "test": "assert is_happy(\"a\") is False",
        "num_ids": 848
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n             > 3.7                A \n              > 3.3                A- \n             > 3.0                B+\n             > 2.7                B \n              > 2.3                B-\n             > 2.0                C+\n             > 1.7                C\n              > 1.3                C-\n             > 1.0                D+ \n             > 0.7                D \n              > 0.0                D-\n              0.0                E\n    \"\"\"\n    letter_grades = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n    \n    for grade in grades:\n        if grade < 3.0:\n            letter_grades.pop(letter_grades.index('D-'))\n        elif grade >= 3.0 and grade < 3.7:\n            letter_grades.pop(letter_grades.index('D-'))\n            letter_grades.pop(letter_grades.index('D-'))\n        elif grade >= 3.7 and grade < 4.0:\n            letter_grades.pop(letter_grades.index('D-'))\n            letter_grades.pop(letter_grades.index('D-'))\n            letter_grades.pop(letter_grades.index('D-'))\n        else:\n            letter_grades.pop(letter_grades.index('E'))\n    \n    return letter_grades\n\ngrades = [4.0, 3, 1.7, 2, 3.5]\nprint(numerical_letter_grade(grades))",
        "test": "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']",
        "num_ids": 1842
    },
    {
        "number": 82,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    if len(string) == 1:\n        return True\n    if len(string) == 2:\n        return string[0] == string[1]\n    if len(string) % 2 == 0:\n        return False\n    if len(string) % 3 == 0:\n        return True\n    i = 5\n    while i * i <= len(string):\n        if len(string) % i == 0 or len(string) % (i + 2) == 0:\n            return False\n        i += 6\n    return True",
        "test": "assert prime_length('Hello') == True, \"prime_length('Hello') should return True for 'Hello'\"",
        "num_ids": 567
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if str(i) in ['1', '9', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71', '73', '79', '83', '89', '97']:\n            count += 1\n    return count",
        "test": "assert starts_one_ends(0) == 0",
        "num_ids": 529
    },
    {
        "number": 84,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n                Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n        a string of binary number\n    \"\"\"\n    # Initialize a list to store the digits of N\n    digits = []\n    while N > 0:\n        digits.append(N % 10)\n        N //= 10\n    \n    # Initialize the sum of digits to 0\n    total_sum = 0\n    \n    # Iterate through the digits and add them to the total sum\n    for digit in digits:\n        total_sum += digit\n    \n    return str(total_sum)",
        "test": "assert solve(1000) == \"1\"",
        "num_ids": 795
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    result = []\n    for i in range(0, len(lst), 2):\n        result.append(lst[i])\n    return result\n",
        "test": "assert add([4, 2, 6, 7]) == 2, \"The given list should add even elements at odd indices\"",
        "num_ids": 424
    },
    {
        "number": 86,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n\n    # Replace all spaces with a single space\n    s = s.replace(' ','')\n\n    # Split the string into a list of words\n    words = s.split()\n\n    # Initialize the result string and a dictionary to store word counts\n    result = ''\n    word_counts = {}\n\n    # Loop through each word in the list\n    for word in words:\n        # If the word is not already in the dictionary, add it and its count to the result\n        if word not in word_counts:\n            word_counts[word] = 1\n            result += word\n        else:\n            # If the word is already in the dictionary, increment its count by 1\n            word_counts[word] += 1\n\n    # Join the result string with spaces and return it\n    return''.join(result)",
        "test": "assert anti_shuffle('Hi') == 'Hi'",
        "num_ids": 885
    },
    {
        "number": 87,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    # Create a new list to store the sorted coordinates\n    sorted_coords = []\n    \n    # Iterate over each row in lst\n    for row in lst:\n        # Iterate over each column in the row\n        for col in row:\n            # Check if the coordinate is equal to x\n            if col == x:\n                # Add the sorted coordinate to the list of sorted coordinates\n                sorted_coords.append((row.index(col), col))\n                \n    # Sort the coordinates based on the given conditions\n    sorted_coords.sort(key=lambda x: (x[0], -x[1]))\n    \n    # Return the sorted coordinates as a list of tuples\n    return sorted_coords",
        "test": "assert get_row([], 1) == []",
        "num_ids": 1771
    },
    {
        "number": 88,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    \n    # Create a copy of the given array\n    new_array = array.copy()\n    \n    # Initialize two variables to store the sum of the first and last elements in the array\n    sum1 = 0\n    sum2 = 0\n    \n    # Iterate through the array and update the sum of first and last elements\n    for i in range(len(new_array)):\n        sum1 += new_array[i]\n        sum2 += new_array[-i-1]\n    \n    # Check if the sum of first and last elements is odd\n    if sum1 % 2 == 1:\n        # Sort the array in ascending order\n        for i in range(len(new_array)-1, 0, -1):\n            # Swap the first and last elements\n            new_array[i], new_array[-i-1] = new_array[-i-1], new_array[i]\n    \n    else:\n        # Sort the array in descending order\n        for i in range(1, len(new_array)):\n            # Swap the first and last elements\n            new_array[i], new_array[-i-1] = new_array[-i-1], new_array[i]\n    \n    return new_array",
        "test": "assert sort_array([]) == []",
        "num_ids": 1244
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # Create an empty string to store the encrypted text\n    encrypted = \"\"\n\n    # Create a list of all possible rotations of the alphabet\n    rotations = [\"\".join(c for c in s if c not in \"aeiouAEIOU\") + d for d in \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"]\n\n    # Loop through each possible rotation and append it to the encrypted text\n    for rotation in rotations:\n        encrypted += rotation\n\n    # Return the encrypted text\n    return encrypted",
        "test": "assert encrypt('asdfghjkl') == 'ewhjklnop'",
        "num_ids": 816
    },
    {
        "number": 90,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    \n    if not lst:\n        return None\n    \n    smallest = lst[0]\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    if second_smallest == float('inf'):\n        return None\n    \n    return second_smallest",
        "test": "assert next_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 602
    },
    {
        "number": 91,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_bored(S):\n    \"\"\"\n    This function takes a string as input and returns the number of boredoms found in it.\n    A boredom is a sentence that starts with the word \"I\". Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    count = 0\n    for sentence in S.split(\".\"):\n        if sentence.startswith(\"I\"):\n            count += 1\n    return count",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 537
    },
    {
        "number": 92,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    # Check if all numbers are integers\n    if not all(isinstance(num, int) for num in [x, y, z]):\n        return False\n\n    # Check if the sum of the numbers is equal to the product of the other two\n    product = x * y * z\n    return sum(abs(num) for num in [x, y, z]) == product",
        "test": "assert any_int(3, 2, 2) == False, \"The function should return False for the given input\"",
        "num_ids": 846
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n\n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'thKs ks c msNgssCGG'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowels_len = len(vowels)\n    message_len = len(message)\n\n    for i in range(message_len):\n        if message[i].lower() in vowels:\n            message = message[:i] + chr(ord(message[i].lower()) + vowels_len) + message[i+1:]\n        elif message[i].isalpha():\n            message = message[:i] + message[i].upper() + message[i+1:]\n\n    return message",
        "test": "assert encode('test') == 'TGST', \"Test case failed: encode('test') should return 'TGST', but it returns '{}'\".format(encode('test'))",
        "num_ids": 876
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def is_prime(n):\n    \"\"\"Checks if a given number is prime or not.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef largest_prime(lst):\n    \"\"\"Finds the largest prime number in a given list.\"\"\"\n    max_prime = 0\n    for num in lst:\n        if is_prime(num):\n            if num > max_prime:\n                max_prime = num\n    return max_prime\n\ndef sum_of_digits(n):\n    \"\"\"Returns the sum of the digits of a given number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef largest_digit_sum(lst):\n    \"\"\"Finds the largest sum of digits in a given list.\"\"\"\n    max_sum = 0\n    for num in lst:\n        digit_sum = sum_of_digits(num)\n        if digit_sum > max_sum:\n            max_sum = digit_sum\n    return max_sum\n\nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nlargest_prime_value = largest_prime(lst)\nprint(largest_prime_value)\nlargest_digit_sum_value = largest_digit_sum(lst)\nprint(largest_digit_sum_value)",
        "test": "assert skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25",
        "num_ids": 1217
    },
    {
        "number": 95,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key, value in dict.items():\n        if not isinstance(key, str):\n            return False\n        if value.lower()!= value.upper():\n            return False\n    return True",
        "test": "assert check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) == False",
        "num_ids": 828
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    # Create an empty list to store the prime numbers\n    prime_numbers = []\n\n    # Iterate from 2 to n-1\n    for i in range(2, n+1):\n\n        # Check if i is prime or not\n        if is_prime(i):\n\n            # Add i to the prime numbers list\n            prime_numbers.append(i)\n\n            # If i is less than n and greater than 2, add i to the prime numbers list\n            if i <= n and i > 2:\n                prime_numbers.append(i)\n\n    # Return the prime numbers list\n    return prime_numbers\n\ndef is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime or not\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert count_up_to(11) == [2, 3, 5, 7]",
        "num_ids": 1088
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    \n    # Initialize the result to zero\n    result = 0\n    \n    # Initialize the two digits of the input\n    digits = [a % 10, b % 10]\n    \n    # Iterate over the digits of the input and multiply them\n    for digit in digits:\n        result *= digit\n    \n    return result",
        "test": "assert multiply(19, 28) == 72, \"Test failed. Expected 72 but returned {}\".format(multiply(19, 28))",
        "num_ids": 820
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count",
        "test": "assert count_upper('abcdefg') == 0",
        "num_ids": 422
    },
    {
        "number": 99,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    if value == \"\":\n        return 0\n\n    if value.startswith(\"-\") and value.endswith(\"-\"):\n        return closest_integer(value.strip(\"-\"))\n\n    num_list = list(map(int, value.split(\".\")))\n    closest_num = num_list[0]\n    closest_diff = abs(closest_num - num_list[1])\n\n    for i in range(2, len(num_list)):\n        diff = abs(num_list[i] - closest_num)\n        if diff < closest_diff:\n            closest_num = num_list[i]\n            closest_diff = diff\n\n    return round(closest_num)",
        "test": "assert closest_integer(\"15.3\") == 15",
        "num_ids": 1674
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]\n    level = 1\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            next_number = i * 2\n        else:\n            next_number = i * 2 + 1\n        pile.append(next_number)\n        level += 1\n    return pile",
        "test": "assert make_a_pile(3) == [3, 5, 7]",
        "num_ids": 762
    },
    {
        "number": 101,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    words = s.split(\",\")\n    words = [word.strip() for word in words]\n    return words\n\nprint(words_string(\"Hi, my name is John\")) # Output: ['Hi','my', 'name', 'is', 'John']\nprint(words_string(\"One, two, three, four, five, six\")) # Output: ['One', 'two', 'three', 'four', 'five','six']",
        "test": "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
        "num_ids": 602
    },
    {
        "number": 102,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Initialize the result to -1\n    result = -1\n    \n    # Loop through all integers in the range [x, y]\n    for num in range(x, y+1):\n        # Check if the number is an even integer\n        if num % 2 == 0:\n            # If it is, update the result if it is bigger than the current result\n            if num > result:\n                result = num\n    \n    # Return the result\n    return result",
        "test": "assert choose_num(12, 15) == 14",
        "num_ids": 757
    },
    {
        "number": 103,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    # Check if n is greater than m\n    if n > m:\n        return -1\n    \n    # Compute the rounded average\n    average = round((n + m) / 2)\n    \n    # Convert the rounded average to binary and return it\n    binary = format(average, '08b')\n    return binary",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 690
    },
    {
        "number": 104,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # create a list of unique even digits from the given list\n    unique_digits = list(set(filter(lambda x: x % 2!= 0, x)))\n\n    # create a list to store the unique even digits\n    even_digits = []\n\n    # iterate through the given list and add even digits to the list\n    for num in x:\n        if num % 2!= 0:\n            even_digits.append(num)\n\n    # sort the even digits in increasing order\n    even_digits.sort()\n\n    # return the list of unique even digits\n    return even_digits\n",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
        "num_ids": 839
    },
    {
        "number": 105,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n           -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n           -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n    If the array is empty, return an empty array:\n      arr = []\n      return []\n\n    If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n             -> sort arr -> [-1, 1, 55]\n             -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    # Define a helper function to reverse a list\n    def reverse_list(arr):\n        return arr[::-1]\n\n    # If the array is empty, return an empty array\n    if not arr:\n        return []\n\n    # Sort the integers in the array between 1 and 9\n    arr.sort(reverse=True)\n\n    # Replace each digit by its corresponding name\n    result = []\n    for num in arr:\n        if num <= 9:\n            result.append(\"One\" if num == 1 else \"Two\" if num == 2 else \"Three\" if num == 3 else \"Four\" if num == 4 else \"Five\" if num == 5 else \"Six\" if num == 6 else \"Seven\" if num == 7 else \"Eight\" if num == 8 else \"Nine\")\n\n    # Reverse the resulting array\n    result = reverse_list(result)\n\n    return result",
        "test": "assert by_length([]) == []",
        "num_ids": 1440
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        result = []\n        for i in range(2, n+1):\n            if i % 2 == 0:\n                result.append(i)\n            else:\n                result.append(i + 1)\n        return result",
        "test": "assert f(5) == [1, 2, 6, 24, 15]",
        "num_ids": 711
    },
    {
        "number": 107,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    count_evens = 0\n    count_odds = 0\n    num_palindromes = 0\n\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            num_palindromes += 1\n            if i % 2 == 0:\n                count_evens += 1\n            else:\n                count_odds += 1\n\n    return (count_evens, count_odds)",
        "test": "assert even_odd_palindrome(3) == (1, 2)",
        "num_ids": 1041
    },
    {
        "number": 108,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num >= 0:\n            # check if the sum of digits is greater than 0\n            sum_of_digits = sum(int(digit) for digit in str(abs(num)))\n            if sum_of_digits > 0:\n                count += 1\n    return count",
        "test": "assert count_nums([]) == 0, \"count_nums([]) should return 0\"",
        "num_ids": 768
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import random\n\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n        \n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n    \n    Note: The given list is guaranteed to have unique elements.\n    \n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performing 2 right shift operations, non-decreasing order can\n                    be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation: It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n    \"\"\"\n    \n    # Check if the array is empty\n    if len(arr) == 0:\n        return True\n    \n    # Shuffle the array\n    random.shuffle(arr)\n    \n    # Last element of the array will be moved to the starting position in the array\n    arr.insert(0, arr[-1])\n    \n    # Check if the array is sorted in non-decreasing order\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            return False\n    \n    # If the loop completes without returning False, then the array is sorted in non-decreasing order\n    return True\n",
        "test": "assert move_one_ball([3, 5, 4, 1, 2]) == False, \"move_one_ball([3, 5, 4, 1, 2]) should return False\"",
        "num_ids": 1017
    },
    {
        "number": 110,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\n    # Check if the input lists are empty\n    if not lst1 or not lst2:\n        return \"NO\"\n\n    # Check if the lengths of the two input lists are the same\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n\n    # Count the number of even elements in lst1\n    even_count = 0\n    for num in lst1:\n        if num % 2 == 0:\n            even_count += 1\n\n    # Check if there are enough even elements in lst1 to make all elements\n    # of lst1 to be even\n    if even_count < len(lst1):\n        return \"NO\"\n\n    # If there are enough even elements in lst1 to make all elements of lst1\n    # to be even, perform the exchange and return \"YES\"\n    return \"YES\"",
        "test": "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"",
        "num_ids": 885
    },
    {
        "number": 111,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \n    \"\"\"\n    # initialize dictionary to keep track of letter counts\n    letter_count = {}\n\n    # split input string into a list of letters\n    words = test.split()\n\n    # iterate through each word in the list\n    for word in words:\n        # convert the word to lowercase and remove any non-letter characters\n        word = ''.join(char.lower() for char in word if char.isalpha())\n\n        # add the word to the dictionary with 1 as the count if it doesn't already exist\n        if word in letter_count:\n            letter_count[word] += 1\n        else:\n            letter_count[word] = 1\n\n    # return the dictionary of letter counts\n    return letter_count\n",
        "test": "assert histogram('a') == {'a': 1}",
        "num_ids": 1078
    },
    {
        "number": 112,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def reverse_delete(s, c):\n    \"\"\"\n    We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    \"\"\"\n    s = s.replace(\" \", \"\")\n    s = list(s)\n    result = []\n    for i in range(len(s)):\n        if s[i]!= c[0]:\n            result.append(s[i])\n    result = \"\".join(result)\n    if result == result[::-1]:\n        return (result, True)\n    else:\n        return (result, False)",
        "test": "assert reverse_delete('abcdef', 'b') == ('acdef', False), 'Test case 2 failed'",
        "num_ids": 885
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    # Create an empty list to store the output\n    output = []\n    # Loop through each element of the input list\n    for i in lst:\n        # Loop through each character in the string i\n        for char in i:\n            # Check if the character is odd\n            if char % 2!= 0:\n                # Add the number of odd characters in the string i of the input to the output list\n                output.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(len(i) // 2, len(i) // 2, len(i), len(i)))\n    return output",
        "test": "assert odd_count(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]",
        "num_ids": 1199
    },
    {
        "number": 114,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    n = len(nums)\n    if n == 0:\n        return 0\n\n    # Initialize variables for min sum and current sum\n    min_sum = float('inf')\n    current_sum = 0\n\n    # Loop through the array\n    for i in range(n):\n        # Update current sum\n        current_sum += nums[i]\n\n        # Update min sum if current sum becomes smaller\n        if current_sum < min_sum:\n            min_sum = current_sum\n\n    return min_sum",
        "test": "assert minSubArraySum([-1, -2, -3]) == -6",
        "num_ids": 631
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_fill(grid, capacity):\n    import math\n\n    def min_fill(grid, capacity, bucket, index):\n        if index == len(grid) * len(grid[0]):\n            return 0\n\n        # Try to fill the bucket\n        if bucket[index] < capacity:\n            bucket[index] += 1\n            return 1 + min_fill(grid, capacity, bucket, index + 1)\n\n        # Otherwise, try to fill the next bucket\n        return min_fill(grid, capacity, bucket, index + 1)\n\n    # Initialize the buckets\n    buckets = [0] * len(grid)\n\n    # Find the number of times you need to lower the buckets\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            bucket = [0] * capacity\n            buckets[i * len(grid[0]) + j] = min_fill(grid, capacity, bucket, 0)\n\n    return buckets[-1]",
        "test": "assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5",
        "num_ids": 1280
    },
    {
        "number": 116,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of non-negative integers according to number of ones in their\n    binary representation in ascending order. For similar number of ones, sorts\n    based on decimal value.\n\n    :param arr: The array to be sorted.\n    :return: The sorted array.\n    \"\"\"\n    # Counting the number of ones in the array\n    ones = 0\n    for num in arr:\n        ones += bin(num).count('1')\n\n    # Sorting the array based on the number of ones\n    sorted_arr = sorted(arr, key=lambda x: (-ones, x))\n\n    return sorted_arr",
        "test": "assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]",
        "num_ids": 881
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Create an empty list to store the words that contain exactly n consonants\n    words = []\n    # Iterate through each character in the string s\n    for char in s:\n        # If the character is a vowel, ignore it\n        if char.lower() in \"aeiou\":\n            continue\n        # Count the number of consonants in the current word\n        count = 0\n        for i in range(len(words)):\n            if s[i:i+n].lower() == char.lower():\n                count += 1\n                # If the word contains exactly n consonants, add it to the list\n                if count == n:\n                    words.append(s[i:i+n].lower())\n                    # Stop iterating once we have found the n-th consonant\n    return words",
        "test": "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]",
        "num_ids": 1090
    },
    {
        "number": 118,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    \n    vowels = \"aeiouAEIOU\"\n    vowels_count = {}\n    closest_vowel = \"\"\n    \n    # Count the occurrences of vowels in the word\n    for char in word:\n        if char in vowels:\n            if char.lower() in vowels_count:\n                vowels_count[char.lower()] += 1\n            else:\n                vowels_count[char.lower()] = 1\n    \n    # Check for the closest vowel\n    min_vowel_diff = float('inf')\n    for char in word:\n        if char in vowels:\n            diff = ord(char) - ord('a')\n            if diff < 0:\n                diff = 26 + diff\n            closest_vowel = char\n            min_vowel_diff = abs(diff)\n            break\n    \n    if min_vowel_diff > 0:\n        return closest_vowel\n    else:\n        return \"\"",
        "test": "assert get_closest_vowel(\"FULL\") == \"U\"",
        "num_ids": 1023
    },
    {
        "number": 119,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def match_parens(lst):\n    def get_balance(s):\n        count = 0\n        for char in s:\n            if char == '(':\n                count += 1\n            elif char == ')':\n                count -= 1\n                if count < 0:\n                    return False\n        return count == 0\n\n    good_string = '(' + lst[0] + ')' + lst[1]\n    return 'Yes' if get_balance(good_string) else 'No'",
        "test": "assert match_parens([')', ')']) == 'No'",
        "num_ids": 612
    },
    {
        "number": 120,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # Create a dictionary to store the frequency of each element in arr\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n\n    # Sort the dictionary by value in descending order and then by key in ascending order\n    sorted_freq = sorted(freq.items(), key=lambda x: (-x[1], x[0]))\n\n    # Create a list to store the first k elements from sorted_freq\n    result = []\n    for num, count in sorted_freq[:k]:\n        result.append(num)\n\n    return result",
        "test": "assert maximum([-3, -4, 5], 3) == [-4, -3, 5]",
        "num_ids": 947
    },
    {
        "number": 121,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n    # create an empty list to store the odd elements that are in even positions\n    even_sum = []\n\n    # iterate through the list\n    for num in lst:\n        # if the number is odd and even, add it to the even_sum list\n        if num % 2 == 0:\n            even_sum.append(num)\n\n    # return the sum of the even elements\n    return sum(even_sum)",
        "test": "assert solution([3, 3, 3, 3, 3]) == 9",
        "num_ids": 728
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Initialize result variable to zero\n    result = 0\n    \n    # Iterate through the first k elements of the array\n    for i in range(k):\n        # Convert the current element to a string and add it to the result\n        result += int(str(arr[i])[1:])\n    \n    return result",
        "test": "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24 # sum of 21 + 3",
        "num_ids": 865
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    # Base case\n    if n == 1:\n        return [1]\n\n    # Initialize list to store odd numbers in collatz sequence\n    odd_numbers = []\n\n    # Iterate through the numbers starting from 2\n    for i in range(2, n+1):\n        # If the number is divisible by 2, add it to the odd_numbers list\n        if i % 2 == 0:\n            odd_numbers.append(i)\n\n        # If the number is divisible by 3, multiply it by 3 and add 1 to the odd_numbers list\n        elif i % 3 == 0:\n            odd_numbers.append(i * 3 + 1)\n\n    # Sort the odd_numbers list in increasing order\n    odd_numbers.sort()\n\n    # Return the sorted list\n    return odd_numbers",
        "test": "assert get_odd_collatz(1) == [1], \"The collatz sequence for 1 is [1], so the odd numbers are only 1.\"",
        "num_ids": 1294
    },
    {
        "number": 124,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    # check if the date is empty\n    if not date:\n        return False\n\n    # split the date into month, day, and year\n    month, day, year = map(int, date.split('-'))\n\n    # check if the date is not in the correct format\n    if len(date)!= 10 or not date.startswith('0') or month < 1 or month > 12 or day < 1 or day > 31:\n        return False\n\n    # check if the number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    elif month in [4, 6, 9, 11]:\n        days = [30, 30, 30, 31, 30, 31, 30, 31]\n    elif month == 2:\n        days = [29, 28, 31, 30, 31, 30, 31, 31]\n\n    # check if the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\n    if month == 4:\n        if day < 1 or day > 30:\n            return False\n    elif month == 6:\n        if day < 1 or day > 30:\n            return False\n    elif month == 9:\n        if day < 1 or day > 30:\n            return False\n    elif month == 11:\n        if day < 1 or day > 30:\n            return False\n\n    return True\n",
        "test": "assert valid_date('15-01-2012') == False",
        "num_ids": 1870
    },
    {
        "number": 125,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def split_words(txt):\n    # Function to split words in a given string on whitespace\n    # if no whitespaces exist, split on commas\n    # if no commas exist, return the number of lower-case letters with odd order in the alphabet\n    # Example usage\n    return txt.split() if \" \" in txt else len([char for char in txt if ord(char) % 2 == 1])",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 505
    },
    {
        "number": 126,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n\n    return True",
        "test": "assert is_sorted([1, 3, 2, 4, 5]) == False",
        "num_ids": 800
    },
    {
        "number": 127,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n    [input/output]\n    samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n    if interval1[0] > interval2[1] or interval1[1] < interval2[0]:\n        return \"NO\"\n\n    intersection_length = abs(interval2[0] - interval1[1])\n\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert intersection((-1, 1), (0, 4)) == \"NO\", \"No intersection found.\"",
        "num_ids": 1252
    },
    {
        "number": 128,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    Returns sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    If the array is empty, returns None.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    # Helper function to check if a number is positive, negative or zero\n    def is_positive(x):\n        return x >= 0\n\n    # Helper function to check if a number is odd or even\n    def is_odd(x):\n        return x % 2!= 0\n\n    # Check if the array is empty\n    if not arr:\n        return None\n\n    # Calculate the product of all signs and magnitudes of the integers\n    prod = 1\n    for x in arr:\n        if is_positive(x):\n            prod *= x\n        elif is_odd(x):\n            prod *= abs(x)\n        else:\n            prod *= -abs(x)\n\n    return prod",
        "test": "assert prod_signs([0, 1]) == 0",
        "num_ids": 769
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    N = len(grid)\n    if N == 0:\n        return []\n\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                grid[i][j] = grid[i][j]\n            else:\n                grid[i][j] += min(grid[i-1][j], grid[i][j-1])\n\n    min_path = []\n    for i in range(N):\n        for j in range(N):\n            min_path.append(grid[i][j])\n\n    return min_path[:k]",
        "test": "assert minPath([ [5,9,3], [4,1,6], [7,8,2]], 1) == [1]",
        "num_ids": 1973
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def tri(n):\n    \"\"\"\n    Return a list of the first n + 1 numbers of the Tribonacci sequence.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    tri_list = [0, 3]\n    \n    for i in range(2, n + 1):\n        tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i - 3])\n        \n    return tri_list[:n + 1]",
        "test": "assert tri(3) == [1, 3, 2, 8], \"The tribonacci sequence is incorrect. It should return [1, 3, 2, 8], but instead it returns {}\".format(tri(3))",
        "num_ids": 484
    },
    {
        "number": 131,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # Check if all digits are odd\n    if n % 2 == 0:\n        return 0\n    \n    # Check if n is a single digit number\n    if n == 1:\n        return 1\n    \n    # Initialize a variable to store the product\n    product = 1\n    \n    # Loop through each digit of n\n    for i in range(2, n+1, 2):\n        # Multiply product by i and add it to the variable\n        product *= i\n        \n    return product",
        "test": "assert digits(1) == 1",
        "num_ids": 505
    },
    {
        "number": 132,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n    # Check if the string only contains square brackets\n    if len(string) % 2!= 0:\n        return False\n\n    # Initialize a counter variable for the number of nested brackets\n    nested_brackets = 0\n\n    # Iterate through the string\n    for i in range(len(string)):\n        # If the current character is a left square bracket\n        if string[i] == '[':\n            # Increment the counter for nested brackets\n            nested_brackets += 1\n        # If the current character is a right square bracket\n        elif string[i] == ']':\n            # Decrement the counter for nested brackets\n            nested_brackets -= 1\n            # If the counter becomes negative, then there is no nested bracket in the subsequence\n            if nested_brackets < 0:\n                return False\n\n    # If there are no nested brackets, then the string is valid\n    return True",
        "test": "assert is_nested('[[]]') == True",
        "num_ids": 684
    },
    {
        "number": 133,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squared numbers in the given list,\n    rounded each element in the list to the upper int(Ceiling) first.\n    \"\"\"\n    result = 0\n    for num in lst:\n        num = round(num, 0) # round each element to the upper int(Ceiling)\n        result += num ** 2\n    return result",
        "test": "assert sum_squares([1,2,3]) == 14, \"The function should return 14 for lst = [1,2,3]\"",
        "num_ids": 597
    },
    {
        "number": 134,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    # Check if the string is empty\n    if not txt:\n        return False\n\n    # Get the length of the string\n    length = len(txt)\n\n    # Check if the last character is an alphabetical character\n    if txt[length-1].isalpha():\n        # Check if the last character is not a part of a word\n        for char in txt[:-1]:\n            if char.isalpha() and char not in txt[length-1:]:\n                return False\n\n    return True",
        "test": "assert check_if_last_char_is_a_letter(\"apple pie\") == False",
        "num_ids": 702
    },
    {
        "number": 135,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\n    if len(arr) == 0:\n        return -1\n\n    max_idx = -1\n    preceding_max_idx = -1\n\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            max_idx = i\n        elif arr[i] == arr[i - 1]:\n            preceding_max_idx = i\n\n    if max_idx == -1:\n        return -1\n\n    return preceding_max_idx",
        "test": "assert can_arrange([1, 2, 3]) == -1",
        "num_ids": 694
    },
    {
        "number": 136,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def largest_smallest_integers(lst):\n    if not lst:\n        return None, None\n    \n    a = lst[0]\n    b = lst[0]\n    \n    for num in lst[1:]:\n        if num > a:\n            a = num\n        elif num < b:\n            b = num\n    \n    return (a, b) if a!= b else (None, None)",
        "test": "assert largest_smallest_integers([]) == (None, None)",
        "num_ids": 742
    },
    {
        "number": 137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if isinstance(a, int) and isinstance(b, int):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif isinstance(a, float) and isinstance(b, float):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif isinstance(a, str) and isinstance(b, str):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    else:\n        return None\n",
        "test": "assert compare_one(1, \"2,3\") == \"2,3\"",
        "num_ids": 887
    },
    {
        "number": 138,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n == 0:\n        return True\n    if n % 2 == 0:\n        return is_equal_to_sum_even(n//2)\n    return False",
        "test": "assert is_equal_to_sum_even(4) == False",
        "num_ids": 641
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(2, n + 1):\n            result *= i\n        return result",
        "test": "assert special_factorial(5) == 120, \"The special factorial of 5 is 120, but it should be 120.\"",
        "num_ids": 593
    },
    {
        "number": 140,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    fixed = ''\n    for char in text:\n        if char.isspace():\n            fixed += '_'\n        else:\n            fixed += char\n    return fixed",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 624
    },
    {
        "number": 141,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Check if the file's name contains more than three digits\n    if any(digit in file_name for digit in '0123456789'):\n        return 'No'\n    \n    # Check if the file's name contains exactly one dot '.'\n    if not file_name.endswith('.'):\n        return 'No'\n    \n    # Check if the substring before the dot is empty and starts with a letter\n    if not file_name.startswith(('a', 'A', 'b', 'B', 'c', 'C', 'd', 'D', 'e', 'E', 'f', 'F', 'g', 'G', 'h', 'H', 'i', 'I', 'j', 'J', 'k', 'K', 'l', 'L','m', 'M', 'n', 'N', 'o', 'O', 'p', 'P', 'q', 'Q', 'r', 'R','s', 'S', 't', 'T', 'u', 'U', 'v', 'V', 'w', 'W', 'x', 'X', 'y', 'Y', 'z', 'Z')):\n        return 'No'\n    \n    # Check if the substring after the dot is one of the allowed values\n    allowed_values = ['txt', 'exe', 'dll']\n    if file_name.split('.')[-1] not in allowed_values:\n        return 'No'\n    \n    return 'Yes'",
        "test": "assert file_name_check(\"1example.dll\") == 'No', \"file_name_check() returned the wrong result for '1example.dll'.\"",
        "num_ids": 1429
    },
    {
        "number": 142,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 or i % 4 == 0:\n            if lst[i] % 3 == 0 or lst[i] % 4 == 0:\n                sum += lst[i]**3\n            else:\n                sum += lst[i]**2\n    return sum",
        "test": "assert sum_squares([]) == 0",
        "num_ids": 645
    },
    {
        "number": 143,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if num is prime, False otherwise.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    Returns a string containing the words from the original sentence,\n    whose lengths are prime numbers, in the order of the words in the new string.\n    \"\"\"\n    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    return''.join(prime_words)",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\"",
        "num_ids": 1001
    },
    {
        "number": 144,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def simplify(x, n):\n    \"\"\"\n    The function will simplify the given expression x * n to a whole number and returns True if it evaluates to a whole number, and False otherwise.\n    Both x and n are string representations of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    Args:\n        x: a string representation of a fraction\n        n: a string representation of a fraction\n\n    Returns:\n        bool: True if x * n evaluates to a whole number, False otherwise.\n    \"\"\"\n    try:\n        numerator = int(x)\n        denominator = int(n)\n    except ValueError:\n        return False\n\n    # Check for zero denominator\n    if denominator == 0:\n        return False\n\n    # Check if x * n is a whole number\n    if numerator == denominator * numerator // denominator:\n        return True\n    else:\n        return False",
        "test": "assert simplify(\"1/6\", \"2/1\") == False",
        "num_ids": 562
    },
    {
        "number": 145,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Create a dictionary to store the sum of digits for each element\n    digit_sum_dict = {}\n    for num in nums:\n        digit_sum = sum(int(digit) for digit in str(num))\n        if digit_sum in digit_sum_dict:\n            digit_sum_dict[digit_sum].append(num)\n        else:\n            digit_sum_dict[digit_sum] = [num]\n\n    # Sort the dictionary based on the sum of digits\n    sorted_sum_dict = dict(sorted(digit_sum_dict.items(), key=lambda item: item[0]))\n\n    # Reconstruct the original list from the sorted dictionary\n    reconstructed_nums = [sorted_sum_dict[key] for key in sorted_sum_dict]\n\n    return reconstructed_nums",
        "test": "assert order_by_points([]) == []",
        "num_ids": 809
    },
    {
        "number": 146,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        num = nums[i]\n        if num > 10 and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9):\n            if num % 10 == 1 and num % 100!= 11 and num % 100!= 13 and num % 100!= 15 and num % 100!= 17 and num % 100!= 19:\n                count += 1\n            if num % 10 == 3 and num % 100!= 31 and num % 100!= 33 and num % 100!= 35 and num % 100!= 37 and num % 100!= 39:\n                count += 1\n            if num % 10 == 5 and num % 100!= 51 and num % 100!= 53 and num % 100!= 55 and num % 100!= 57 and num % 100!= 59:\n                count += 1\n            if num % 10 == 7 and num % 100!= 71 and num % 100!= 73 and num % 100!= 75 and num % 100!= 77 and num % 100!= 79:\n                count += 1\n            if num % 10 == 9 and num % 100!= 91 and num % 100!= 93 and num % 100!= 95 and num % 100!= 97 and num % 100!= 99:\n                count += 1\n    return count\n",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1",
        "num_ids": 970
    },
    {
        "number": 147,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if i < j < k and a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count",
        "test": "assert get_max_triples(1) == 0",
        "num_ids": 870
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closer to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n    if planet1 in planets and planet2 in planets:\n        for i in range(len(planets)):\n            if i == planets.index(planet1) or i == planets.index(planet2):\n                continue\n            else:\n                return tuple(sorted(set([planets[i], planets[j]])))\n    else:\n        return ()",
        "test": "assert bf(\"Earth\", \"Mercury\") == (\"Venus\"), \"The function should return Venus.\"",
        "num_ids": 1844
    },
    {
        "number": 149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\n    # Step 1: Remove odd-length strings\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n\n    # Step 2: Sort the filtered list alphabetically\n    sorted_lst = sorted(filtered_lst)\n\n    # Step 3: Check if two words have the same length and sort them alphabetically\n    sorted_lst = sorted(set([tuple(sorted(word)) for word in sorted_lst]))\n\n    return sorted_lst",
        "test": "assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]",
        "num_ids": 964
    },
    {
        "number": 150,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    is_prime = True\n    \n    for i in range(2, n):\n        if n % i == 0:\n            is_prime = False\n            break\n    \n    if is_prime:\n        return x\n    else:\n        return y",
        "test": "assert x_or_y(7, 34, 12) == 34, \"The program should return 34 if n is a prime number and return 12 otherwise.\"",
        "num_ids": 655
    },
    {
        "number": 151,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    '''\n    if not lst:\n        return 0\n    \n    sum_of_squares = 0\n    for num in lst:\n        if not isinstance(num, (int, float)) or num < 0:\n            continue\n        if num % 2 == 1:\n            sum_of_squares += num ** 2\n    \n    return sum_of_squares",
        "test": "assert double_the_difference([-1, -2, 0]) == 0",
        "num_ids": 787
    },
    {
        "number": 152,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def compare(game, guess):\n    \"\"\"Compare the given game and guess arrays.\n    \n    Parameters:\n    game (list): The scores of each match in the game.\n    guess (list): The scores of each match in the guess.\n    \n    Returns:\n    list: An array of the same length as game denoting how far off each guess was.\n    \"\"\"\n    if len(game)!= len(guess):\n        raise ValueError(\"Game and guess arrays must be of equal length.\")\n    diff = [abs(g - g_i) for g, g_i in zip(game, guess)]\n    return diff",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3], \"Wrong output for compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\"",
        "num_ids": 939
    },
    {
        "number": 153,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    max_strength = 0\n    best_extension = ''\n    for extension in extensions:\n        if len(extension) > max_strength:\n            max_strength = len(extension)\n            best_extension = extension\n    return f\"{class_name}.{best_extension}\"",
        "test": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'",
        "num_ids": 1078
    },
    {
        "number": 154,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"\n    This function will check if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\", \"abd\") => False\n    cycpattern_check(\"hello\", \"ell\") => True\n    cycpattern_check(\"whassup\", \"psus\") => False\n    cycpattern_check(\"abab\", \"baa\") => True\n    cycpattern_check(\"efef\", \"eeff\") => False\n    cycpattern_check(\"himenss\", \"simen\") => True\n    \"\"\"\n    # Check if the second word or any of its rotations is a substring in the first word\n    for i in range(len(a)):\n        if a[i:i+len(b)] == b:\n            return True\n    \n    # Check if there is any substring that starts with the second word\n    for i in range(len(a)-len(b)+1):\n        if a[i:i+len(b)] == b[::-1]:\n            return True\n    \n    return False",
        "test": "assert cycpattern_check(\"hello\",\"ell\") == True",
        "num_ids": 669
    },
    {
        "number": 155,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n       even_odd_count(-12) ==> (1, 1)\n       even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    num_str = str(num)\n    for char in num_str:\n        if int(char) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)",
        "test": "assert even_odd_count(123) == (1, 2)",
        "num_ids": 520
    },
    {
        "number": 156,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if number < 1 or number > 1000:\n        raise ValueError(\"Invalid input\")\n\n    mini_roman = {\n        1000:'m', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc',\n        50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n\n    result = ''\n    while number > 0:\n        for i, (multiplier, value) in enumerate(mini_roman.items(), 1):\n            if number >= multiplier:\n                number -= multiplier\n                result += value\n                break\n\n    return result.lower()\n",
        "test": "assert int_to_mini_roman(19) == 'xix'",
        "num_ids": 970
    },
    {
        "number": 157,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False",
        "test": "assert right_angle_triangle(1, 2, 3) == False",
        "num_ids": 657
    },
    {
        "number": 158,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Initialize variables to keep track of the maximum number of unique characters\n    max_unique_chars = 0\n    max_word = \"\"\n    \n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is greater than or equal to the current maximum\n        if len(word) >= max_unique_chars:\n            # Update the maximum number of unique characters and the current word\n            max_unique_chars = len(word)\n            max_word = word\n    \n    # Return the maximum word with the maximum number of unique characters\n    return max_word",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 611
    },
    {
        "number": 159,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # check if there are enough carrots to complete the day's meals\n    if number + need > remaining:\n        return [number + need, remaining - need]\n    else:\n        # if there are enough carrots, eat all the carrots and return the count and remaining\n        return [number + need, remaining]\n",
        "test": "assert eat(5, 6, 10) == [11, 4]",
        "num_ids": 1194
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n\n    # Check if there are at least two operands\n    if len(operand) < 2:\n        return \"Error: operand list has less than two elements\"\n\n    # Check if operator list has at least one operator\n    if len(operator) < 1:\n        return \"Error: operator list has less than one element\"\n\n    # Initialize the result with the first operand\n    result = operand[0]\n\n    # Loop through the operator list and perform the operation on the result\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n        else:\n            return \"Error: unknown operator\"\n\n    return result\n",
        "test": "assert do_algebra(['+'], [2]) == 2, \"do_algebra(operator, operand): There is no operator in the operator list.\"",
        "num_ids": 1277
    },
    {
        "number": 161,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\n    # check if s contains any letters\n    if not s.isalpha():\n        s = s[::-1]\n\n    # reverse the string\n    s = s[::-1]\n\n    return s",
        "test": "assert solve(\"ab\") == \"AB\"",
        "num_ids": 835
    },
    {
        "number": 162,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    if text:\n        md5_hash = hashlib.md5(text.encode('utf-8')).hexdigest()\n        return md5_hash\n    else:\n        return None",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
        "num_ids": 403
    },
    {
        "number": 163,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    # Initialize the result list\n    result = []\n\n    # Check if a or b is greater than the maximum value, which is the largest even digit\n    if a > b:\n        a, b = b, a\n\n    # Iterate through the even digits between a and b\n    for i in range(a, b + 1, 2):\n        result.append(i)\n\n    return result",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 654
    }
]