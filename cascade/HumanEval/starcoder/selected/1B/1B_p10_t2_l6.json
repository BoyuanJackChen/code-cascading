[
    {
        "number": 0,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    :param numbers: List of floats representing the numbers.\n    :param threshold: The threshold for closeness.\n    :return: True if there are any two numbers closer to each other than the threshold, False otherwise.\n    \"\"\"\n    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i]-numbers[j]) < threshold:\n                return True\n    return False",
        "test": "assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True",
        "num_ids": 2541
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Input to this function is a string containing multiple groups of nested parentheses.\n    Your goal is to separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other.\n    Ignore any spaces in the input string.\n    \"\"\"\n    # Remove any spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    # Initialize an empty list to store the separate strings\n    result = []\n    # Initialize two pointers, one at the beginning of the input string and one at the end of the string\n    left_ptr = 0\n    right_ptr = len(paren_string) - 1\n    # Iterate until the pointers meet at the middle of the string\n    while left_ptr <= right_ptr:\n        # Check if the right pointer is valid (not beyond the end of the string)\n        if right_ptr < len(paren_string) - 1 and paren_string[right_ptr+1] in \"()\":\n            # Check if the left pointer is valid (not beyond the beginning of the string)\n            if left_ptr > 0 and paren_string[left_ptr-1] in \"()\":\n                # If both the left and right pointers are valid, add the substring between the left and right pointers to the result list\n                result.append(paren_string[left_ptr:right_ptr+1])\n                # Move both pointers to the next position\n                left_ptr += 1\n                right_ptr -= 1\n            else:\n                # If the left pointer is valid, move the left pointer to the next position\n                left_ptr += 1\n        else:\n            # If the right pointer is valid, move the right pointer to the next position\n            right_ptr -= 1\n    return result",
        "test": "assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']",
        "num_ids": 3558
    },
    {
        "number": 2,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 120,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    integer_part, decimals = divmod(number, 1)\n    return decimals",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 1353
    },
    {
        "number": 3,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    total_amount = 0\n    for operation in operations:\n        if operation > 0:\n            total_amount += operation\n        else:\n            return True\n    return False",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 1846
    },
    {
        "number": 4,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # Calculate the mean of the dataset\n    mean = sum(numbers) / len(numbers)\n    \n    # Calculate the centerpoint of the dataset\n    center = sum(numbers) / len(numbers)\n    \n    # Calculate the MAD for each number in the dataset\n    mad = 0\n    for num in numbers:\n        mad += abs(num - center)\n    mad /= len(numbers)\n    \n    return mad",
        "test": "assert mean_absolute_deviation([1.0, 1.0, 1.0, 1.0]) == 0.0, \"The mean absolute deviation of [1.0, 1.0, 1.0, 1.0] should be 0.0.\"",
        "num_ids": 2864
    },
    {
        "number": 5,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n\n    result = []\n    for num in numbers:\n        if result:\n            result.append(delimeter)\n        result.append(num)\n\n    return result",
        "test": "assert intersperse([], 4) == []",
        "num_ids": 2006
    },
    {
        "number": 6,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    Args:\n        paren_string: A string representing a nested parentheses string.\n\n    Returns:\n        A list of integers representing the maximum level of nesting of parentheses in the string.\n    \"\"\"\n    max_nesting = 0\n    nesting_level = 0\n\n    for char in paren_string:\n        if char == '(':\n            nesting_level += 1\n        elif char == ')':\n            nesting_level -= 1\n            if nesting_level < 0:\n                raise ValueError(\"Invalid nesting level.\")\n\n        if nesting_level > max_nesting:\n            max_nesting = nesting_level\n\n    return [max_nesting]",
        "test": "assert parse_nested_parens('(())()') == [2]",
        "num_ids": 2558
    },
    {
        "number": 7,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    :param strings: Input list of strings\n    :param substring: Substring to be searched for\n    :return: Filtered list of strings\n    \"\"\"\n    filtered = []\n    for s in strings:\n        if substring in s:\n            filtered.append(s)\n    return filtered",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 1503
    },
    {
        "number": 8,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    \n    # Initialize sum and product variables\n    sum = 0\n    product = 1\n    \n    # Iterate through the list and add each number to the sum and product\n    for num in numbers:\n        sum += num\n        product *= num\n    \n    return (sum, product)",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 2192
    },
    {
        "number": 9,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 120,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    if len(numbers) == 0:\n        return []\n    \n    max_list = [numbers[0]]\n    for i in range(1, len(numbers)):\n        max_list.append(max(max_list[-1], numbers[i]))\n    \n    return max_list",
        "test": "assert rolling_max([1]) == [1]",
        "num_ids": 2369
    },
    {
        "number": 10,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    # Get the longest postfix of the string that is a palindrome\n    longest_palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:i+2]):\n            longest_palindrome = string[i:i+2]\n\n    # Find the shortest prefix of the string that comes before the palindromic suffix\n    prefix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:i+2]):\n            prefix = string[i:]\n            break\n\n    # Append the reverse of the palindromic suffix to the end of the string\n    result = longest_palindrome[::-1] + prefix[::-1]\n\n    return result",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 2942
    },
    {
        "number": 11,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Check if both inputs have same length\n    if len(a)!= len(b):\n        raise ValueError(\"Both inputs should have same length\")\n    \n    # Perform XOR operation\n    result = \"\"\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n    \n    return result",
        "test": "assert string_xor('010', '110') == '100'",
        "num_ids": 1950
    },
    {
        "number": 12,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n\n    if not strings:\n        return None\n\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n\n    return longest_string",
        "test": "assert longest([]) == None",
        "num_ids": 1705
    },
    {
        "number": 13,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Return a greatest common divisor of two integers a and b\"\"\"\n    # Check if both numbers are positive\n    if a <= 0 or b <= 0:\n        return 0\n    \n    # Loop through the number of times until one of the numbers becomes zero\n    i = 1\n    while b!= 0:\n        # Save the number of times b is divided by i\n        temp = b\n        # Divide b by i\n        b = a % b\n        # Update the value of i\n        a = temp\n    \n    return a",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 1702
    },
    {
        "number": 14,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefix = string[:i+1]\n        prefixes.append(prefix)\n    return prefixes",
        "test": "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
        "num_ids": 1379
    },
    {
        "number": 15,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    sequence = []\n    for i in range(n+1):\n        sequence.append(str(i))\n    return \" \".join(sequence)",
        "test": "assert string_sequence(0) == '0'",
        "num_ids": 1407
    },
    {
        "number": 16,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Create a dictionary to keep track of the frequency of each character\n    char_freq = {}\n    for char in string:\n        if char.isalpha():\n            # If the character is alphabetic, convert it to lowercase\n            char = char.lower()\n            # If the character is already present in the dictionary, increment its count by 1\n            if char in char_freq:\n                char_freq[char] += 1\n            else:\n                char_freq[char] = 1\n    # Return the number of distinct characters\n    return len(char_freq)",
        "test": "assert count_distinct_characters('Jerry') == 4",
        "num_ids": 1635
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    beats = []\n    note = ''\n    for char in music_string:\n        if char == 'o':\n            note += char\n        elif char == '|':\n            if note:\n                beats.append(int(note))\n                note = ''\n        elif char =='':\n            pass\n        else:\n            raise ValueError(\"Invalid music string\")\n    if note:\n        beats.append(int(note))\n    return beats",
        "test": "assert parse_music('o o|.| o| o|.|.|.|.| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
        "num_ids": 4492
    },
    {
        "number": 18,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 1801
    },
    {
        "number": 19,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    \"\"\"\n    # split the string into a list of numbers\n    num_list = numbers.split()\n\n    # sort the list in ascending order\n    num_list.sort()\n\n    # join the sorted list back into a string\n    return''.join(num_list)",
        "test": "assert sort_numbers('zero') == 'zero'",
        "num_ids": 2015
    },
    {
        "number": 20,
        "max_answer_num": 20,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List of numbers must have at least two elements\")\n\n    min_diff = float('inf')\n    min_pair = None\n\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                min_pair = (numbers[i], numbers[j])\n\n    return min_pair",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
        "num_ids": 4076
    },
    {
        "number": 21,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 100,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    Args:\n        numbers (List[float]): List of numbers to apply the linear transform to\n\n    Returns:\n        List[float]: Rescaled list of numbers\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    rescaled_numbers = [(n - min_num) / (max_num - min_num) for n in numbers]\n    return rescaled_numbers",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 2366
    },
    {
        "number": 22,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    :param values: List of any python values\n    :return: List of integers\n    \"\"\"\n\n    filtered_values = []\n    for value in values:\n        if isinstance(value, int):\n            filtered_values.append(value)\n\n    return filtered_values",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 1571
    },
    {
        "number": 23,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string \"\"\"\n    return len(string)",
        "test": "assert strlen('') == 0",
        "num_ids": 576
    },
    {
        "number": 24,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n\n    # Initialize a variable to store the largest divisor found\n    max_divisor = 1\n\n    # Iterate through all numbers from 2 to n\n    for i in range(2, n + 1):\n        # Check if i divides n evenly\n        if n % i == 0:\n            # If yes, update max_divisor if it's smaller than n\n            if i < n:\n                max_divisor = i\n\n    # Return the maximum divisor found\n    return max_divisor",
        "test": "assert largest_divisor(15) == 5",
        "num_ids": 1605
    },
    {
        "number": 25,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors",
        "test": "assert factorize(25) == [5, 5], \"Factorize(25) should return [5, 5]\"",
        "num_ids": 2441
    },
    {
        "number": 26,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    \n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    \n    return result",
        "test": "assert remove_duplicates([1, 1, 2, 3, 4, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 1710
    },
    {
        "number": 27,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    Args:\n        string: The string to flip.\n    Returns:\n        The flipped string.\n    \"\"\"\n    flipped_string = \"\"\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        else:\n            flipped_string += char.lower()\n    return flipped_string",
        "test": "assert flip_case('world') == 'WORLD'",
        "num_ids": 1361
    },
    {
        "number": 28,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)",
        "test": "assert concatenate([]) == ''",
        "num_ids": 867
    },
    {
        "number": 29,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    Args:\n        strings: A list of strings.\n        prefix: A prefix to match.\n    Returns:\n        A list of strings that start with the given prefix.\n    \"\"\"\n\n    # Initialize an empty list to store the filtered strings\n    filtered_strings = []\n\n    # Loop through each string in the input list\n    for string in strings:\n\n        # Check if the string starts with the given prefix\n        if string.startswith(prefix):\n\n            # Append the string to the filtered list if it does\n            filtered_strings.append(string)\n\n    # Return the filtered list\n    return filtered_strings",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 1429
    },
    {
        "number": 30,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def get_positive(l: list) -> list:\n    \"\"\"Return only positive numbers in the list.\n    :param l: List of numbers.\n    :return: List of positive numbers.\n    \"\"\"\n    return list(filter(lambda x: x > 0, l))",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 1826
    },
    {
        "number": 31,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert is_prime(6) == False",
        "num_ids": 1759
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x**2 +... xs[n] * x**n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n\n    if len(xs) % 2 == 0:\n        raise ValueError(\"List of coefficients must have even number of coefficients\")\n\n    max_coeff = max(xs)\n    xs = [coeff / max_coeff for coeff in xs]\n\n    for i, coeff in enumerate(xs):\n        if coeff == 0:\n            return -math.pow(max_coeff, i)\n    else:\n        return None",
        "test": "assert find_zero([-6, 11, -6, 1]) == 1.0",
        "num_ids": 3940
    },
    {
        "number": 33,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n\n    # Helper function to swap two elements in a list\n    def swap(lst, i, j):\n        lst[i], lst[j] = lst[j], lst[i]\n\n    # Iterate over the indices that are not divisible by three\n    for i in range(len(l)):\n        # If the value at the i-th index is not divisible by three, swap it with the smallest value between i+1 and len(l)-1\n        if not (i+1) % 3:\n            min_val = float('inf')\n            min_index = -1\n            for j in range(i+1, len(l)):\n                if l[j] < min_val:\n                    min_val = l[j]\n                    min_index = j\n            swap(l, i, min_index)\n\n    # Sort the elements of the sorted list\n    return sorted(l)",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 2989
    },
    {
        "number": 34,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 100,
        "answer": "def unique(l: list) -> list:\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    # Convert the list to a set to remove duplicates\n    unique_set = set(l)\n    \n    # Convert the set back to a list and sort it\n    unique_list = sorted(list(unique_set))\n    \n    return unique_list",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 1558
    },
    {
        "number": 35,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    else:\n        return max(l)",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 1834
    },
    {
        "number": 36,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 0\n    elif n % 11 == 0 or n % 11 == 11:\n        return 1\n    elif n % 13 == 0 or n % 13 == 13:\n        return 1\n    else:\n        return 0",
        "test": "assert fizz_buzz(50) == 0, \"Expected 0, but got: {}\".format(fizz_buzz(50))",
        "num_ids": 1570
    },
    {
        "number": 37,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    for i in range(len(l)):\n        if i % 2!= 0:\n            l[i], l[-i - 1] = l[-i - 1], l[i]\n\n    return l",
        "test": "assert sort_even([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 2450
    },
    {
        "number": 38,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # initialize variables\n    decoded_s = \"\"\n    group_start = 0\n    group_length = 3\n    # loop through each group\n    for i in range(0, len(s), 3):\n        # if group length is less than 3, extend it to 3\n        if group_length < 3:\n            group_length += 3\n        # if current group is complete, add to decoded_s and start a new group\n        if (i + group_length) >= len(s):\n            decoded_s += s[group_start:i]\n            group_start = i\n            group_length = 3\n        # otherwise, simply add the current character to the decoded_s\n        else:\n            decoded_s += s[i:i + group_length]\n        # increment group_start and group_length for next iteration\n        group_start = i + group_length\n    return decoded_s\n",
        "test": "assert decode_cyclic(\"ABCDGH\") == \"ABC\"",
        "num_ids": 3273
    },
    {
        "number": 39,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n < 1 or n % 2 == 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    else:\n        a = 1\n        b = 2\n        while b < n:\n            a, b = b, a + b\n        return b\n\nprint(prime_fib(1))\nprint(prime_fib(2))\nprint(prime_fib(3))\nprint(prime_fib(4))\nprint(prime_fib(5))",
        "test": "assert prime_fib(1) == 2",
        "num_ids": 2099
    },
    {
        "number": 40,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    :param l: the input list\n    :return: True if there are three distinct elements in the list that\n            sum to zero, and False otherwise.\n    \"\"\"\n    seen = set()\n    for num in l:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False, \"There must be no triples of numbers with a sum of zero.\"",
        "num_ids": 3151
    },
    {
        "number": 41,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    collisions = 0\n    left_car = 0\n    right_car = n-1\n\n    while left_car < right_car:\n        if right_car == left_car:\n            collisions += 1\n            left_car += 1\n            right_car = n\n        elif right_car < left_car:\n            left_car += 1\n        else:\n            right_car -= 1\n\n    return collisions",
        "test": "assert car_race_collision(1) == 0  # Test 1",
        "num_ids": 3263
    },
    {
        "number": 42,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    for i in range(len(l)):\n        l[i] += 1\n    return l",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 2233
    },
    {
        "number": 43,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n\n    if len(l) < 2:\n        return False\n\n    set_1 = set(l)\n    if len(set_1)!= len(l):\n        return False\n\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n\n    return False\n",
        "test": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False, \"There are two distinct elements in the list that sum to zero.\"",
        "num_ids": 2740
    },
    {
        "number": 44,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"Base number must be greater than or equal to 2.\")\n    \n    if x == 0:\n        return \"0\"\n    \n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        if remainder > 9:\n            result = chr((remainder - 10) + ord('A')) + result\n        else:\n            result = str(remainder) + result\n        x //= base\n    \n    return result\n",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 2928
    },
    {
        "number": 45,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 110,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n",
        "test": "assert triangle_area(5, 3) == 7.5, \"Incorrect area calculation for triangle with sides a=5 and h=3.\"",
        "num_ids": 897
    },
    {
        "number": 46,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    elif n == 4:\n        return 0\n    elif n == 5:\n        return 4\n    elif n == 6:\n        return 8\n    elif n == 7:\n        return 14\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n",
        "test": "assert fib4(0) == 0",
        "num_ids": 1879
    },
    {
        "number": 47,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n\n    # Sort the list in ascending order\n    l = sorted(l)\n\n    # Calculate the number of elements in the list\n    n = len(l)\n\n    # Calculate the median\n    if n % 2 == 0:\n        # If the list has an odd number of elements, the median is the average of the two middle elements\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        # If the list has an even number of elements, the median is the middle element\n        return l[n//2]",
        "test": "assert median([3, 1, 2, 4, 5]) == 3",
        "num_ids": 2120
    },
    {
        "number": 48,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n\n    # Convert the string to lowercase and remove all non-alphanumeric characters\n    text = ''.join(filter(str.isalnum, text)).lower()\n\n    # Reverse the string and compare with original string\n    return text == text[::-1]",
        "test": "assert is_palindrome('aba') == True",
        "num_ids": 1376
    },
    {
        "number": 49,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0 or p < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return (2 ** n) % p",
        "test": "assert modp(3, 5) == 3, \"The function modp(3, 5) should return 3\"",
        "num_ids": 2943
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])",
        "test": "assert decode_shift(encode_shift(\"Hello, World!\")) == \"pkeo, Lro, World!\"",
        "num_ids": 2210
    },
    {
        "number": 51,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join(c for c in text if c not in vowels)",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 1834
    },
    {
        "number": 52,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(num < t for num in l)",
        "test": "assert below_threshold([1, 20, 4, 10], 5) is False",
        "num_ids": 1485
    },
    {
        "number": 53,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    :param x: the first number to be added\n    :param y: the second number to be added\n    :return: the sum of the two numbers\n    \"\"\"\n    return x + y",
        "test": "assert add(2, 3) == 5",
        "num_ids": 713
    },
    {
        "number": 54,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    # Convert the strings to sets to remove duplicates\n    s0 = set(s0)\n    s1 = set(s1)\n\n    # Check if the two sets have the same characters\n    if s0 == s1:\n        return True\n    else:\n        return False\n",
        "test": "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
        "num_ids": 2257
    },
    {
        "number": 55,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\nprint(fib(10)) # Output: 55\nprint(fib(1)) # Output: 1\nprint(fib(8)) # Output: 21",
        "test": "assert fib(1) == 1, \"Error: fib(1) is incorrect.\"",
        "num_ids": 1233
    },
    {
        "number": 56,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\"\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack or stack[-1]!= \"<\":\n                return False\n            stack.pop()\n    return not stack\n",
        "test": "assert correct_bracketing(\"<\") == False",
        "num_ids": 1813
    },
    {
        "number": 57,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 1:\n        return True\n    for i in range(len(l)-1):\n        if l[i] > l[i+1]:\n            return False\n    return True",
        "test": "assert monotonic([1, 20, 4, 10]) == False",
        "num_ids": 2153
    },
    {
        "number": 58,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Convert lists to sets for faster membership testing\n    l1 = set(l1)\n    l2 = set(l2)\n\n    # Find common elements in both sets\n    common_elements = l1.intersection(l2)\n\n    # Sort and return the common elements\n    return sorted(list(common_elements))",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 2433
    },
    {
        "number": 59,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n\n    largest_prime = 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n //= i\n\n    return largest_prime",
        "test": "assert largest_prime_factor(2048) == 2",
        "num_ids": 2434
    },
    {
        "number": 60,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total",
        "test": "assert sum_to_n(30) == 465, \"sum_to_n(30) should return 465\"",
        "num_ids": 1656
    },
    {
        "number": 61,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            elif stack[-1]!= \"(\":\n                return False\n            else:\n                stack.pop()\n    if len(stack) > 0:\n        return False\n    else:\n        return True\n",
        "test": "assert correct_bracketing(\"(\") is False",
        "num_ids": 1821
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    if len(xs) == 1:\n        return [0]\n    else:\n        return [1] + derivative(xs[1:])",
        "test": "assert derivative([1, 2, 3]) == [2, 6]",
        "num_ids": 1945
    },
    {
        "number": 63,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)",
        "test": "assert fibfib(0) == 0",
        "num_ids": 1974
    },
    {
        "number": 64,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouyAEIOUY\"\n    count = 0\n    i = len(s) - 1\n    while i >= 0:\n        if s[i] in vowels:\n            count += 1\n        i -= 1\n    return count",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 1987
    },
    {
        "number": 65,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n\n    # Get the number of digits in the original number\n    num_digits = len(str(x))\n\n    # Check if shift is greater than the number of digits\n    if shift > num_digits:\n        # If shift is greater than the number of digits, reverse the digits\n        x = str(x)[::-1]\n    else:\n        # If shift is less than or equal to the number of digits, just shift the digits\n        x = str(x) + str(x) * (shift - num_digits)\n\n    return x",
        "test": "assert circular_shift(12, 2) == \"12\"",
        "num_ids": 1911
    },
    {
        "number": 66,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    digit_sum = 0\n    for char in s:\n        if char.isupper():\n            digit_sum += ord(char)\n    return digit_sum",
        "test": "assert digitSum(\"\") == 0, \"digitSum('') should return 0\"",
        "num_ids": 2209
    },
    {
        "number": 67,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    For examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\", 3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    s = s.strip() # remove leading and trailing whitespaces\n    # split the string into an array of fruit names\n    fruit_names = s.split()\n    # count the number of apples and oranges\n    apple_count = sum([fruit_names.count(fruit) for fruit in ['apple', 'apples']])\n    orange_count = sum([fruit_names.count(fruit) for fruit in ['orange', 'oranges']])\n    # count the number of mango fruits\n    mango_count = sum([fruit_names.count(fruit) for fruit in ['mango','mangoes']])\n    # return the sum of the above counts\n    return apple_count + orange_count - mango_count",
        "test": "assert fruit_distribution(\"0 apples and 1 oranges\", 3) == 2",
        "num_ids": 3858
    },
    {
        "number": 68,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def pluck(arr):\n    if not arr:\n        return []\n    \n    even_count = 0\n    even_nodes = []\n\n    for i, node in enumerate(arr):\n        if node % 2 == 0:\n            even_count += 1\n            even_nodes.append(node)\n        elif even_count > 0:\n            even_count -= 1\n            even_nodes.append(even_nodes[-1])\n            if even_count == 0:\n                even_nodes.pop()\n\n    if even_count == 0:\n        return []\n\n    min_even = float('inf')\n    smallest_even_node = None\n    smallest_even_index = -1\n\n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < min_even:\n            min_even = node\n            smallest_even_node = node\n            smallest_even_index = i\n\n    return [smallest_even_node, smallest_even_index]\n",
        "test": "assert pluck([4, 2, 3]) == [2, 1]",
        "num_ids": 4624
    },
    {
        "number": 69,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    freq = {}\n    for num in lst:\n        if num > 0:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n    max_num = max(freq, key=freq.get)\n    if max_num == 0:\n        return -1\n    else:\n        return max_num",
        "test": "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3",
        "num_ids": 2512
    },
    {
        "number": 70,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    min_val = min(lst)\n    max_val = max(lst)\n\n    if min_val <= max_val:\n        return lst\n    else:\n        return strange_sort_list(lst[max_val:]) + [min_val]",
        "test": "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]",
        "num_ids": 2968
    },
    {
        "number": 71,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def triangle_area(a, b, c):\n    # check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # calculate the area of the triangle using Heron's formula\n        s = (a + b + c) / 2\n        area = round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n        return area\n    else:\n        return -1",
        "test": "assert triangle_area(1, 2, 10) == -1, \"Invalid triangle\"",
        "num_ids": 2413
    },
    {
        "number": 72,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def will_it_fly(q, w):\n    # Check if the first element is the same as the last element\n    if q[0]!= q[-1]:\n        return False\n\n    # Check if the sum of the elements of the list is less than or equal to the maximum possible weight\n    if sum(q) <= w:\n        return True\n    else:\n        return False",
        "test": "assert will_it_fly([1, 2], 5) == False # False",
        "num_ids": 2829
    },
    {
        "number": 73,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array\n    that is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n\n    \"\"\"\n    min_change = float('inf')\n    max_length = len(arr)\n\n    for i in range(max_length):\n        for j in range(i+1, max_length):\n            change = 0\n            for k in range(max_length):\n                if arr[i] == arr[k]:\n                    change += 1\n            if change == 0:\n                change = max_length - i\n            if change < min_change:\n                min_change = change\n                break\n\n    return min_change\n",
        "test": "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1",
        "num_ids": 3249
    },
    {
        "number": 74,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    # Get the total number of chars in the first list\n    total_chars = sum(len(lst1[0]) for lst1 in lst1)\n    # Get the total number of chars in the second list\n    other_total_chars = sum(len(lst2[0]) for lst2 in lst2)\n    # Find the total number of chars in the list that has less than the other list\n    if other_total_chars > total_chars:\n        return lst1\n    else:\n        return lst2",
        "test": "assert total_match([], []) == []",
        "num_ids": 2757
    },
    {
        "number": 75,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Return True if the given number (a) is the multiplication of 3 prime numbers,\n    and False otherwise.\"\"\"\n    for i in range(2, a//3):\n        if a % i == 0 or a % (i+2) == 0:\n            return True\n    return False",
        "test": "assert is_multiply_prime(100) == True",
        "num_ids": 2975
    },
    {
        "number": 76,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Returns True if x is a simple power of n, and False otherwise.\"\"\"\n    if n == 1:\n        return True\n    elif n > 1:\n        if x**(n//2) == x:\n            return is_simple_power(x, n//2)\n        else:\n            return False\n    else:\n        return False",
        "test": "assert is_simple_power(1, 4) == True",
        "num_ids": 2756
    },
    {
        "number": 77,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a == 1:\n        return True\n    elif a < 0:\n        return False\n    else:\n        count = 0\n        while a > 0:\n            a = a // 3\n            count += 1\n        if count == 2:\n            return True\n        else:\n            return False",
        "test": "assert iscube(2) == False",
        "num_ids": 1777
    },
    {
        "number": 78,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Remove spaces and convert to uppercase\n    num = num.replace(\" \", \"\").upper()\n    \n    # Initialize count and prime flag\n    count = 0\n    prime = False\n    \n    # Iterate through each hexadecimal digit\n    for digit in num:\n        # Check if the current digit is a prime number\n        if digit == \"2\" or digit == \"3\" or digit == \"5\" or digit == \"7\" or digit == \"B\" or digit == \"D\":\n            prime = True\n        elif digit == \"1\" or digit == \"A\" or digit == \"E\":\n            prime = False\n        \n        # Increment count if the digit is a prime number\n        if prime:\n            count += 1\n        \n        # Reset prime flag after counting all primes\n        prime = False\n    \n    return count",
        "test": "assert hex_key(\"AB\") == 1",
        "num_ids": 4559
    },
    {
        "number": 79,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"\n    This function takes a decimal number as input and returns its binary representation.\n    It uses the built-in format() function to convert the decimal number to a string.\n    The extra characters 'db' at the beginning and at the end of the string are added to help with the\n    format.\n\n    Args:\n        decimal (int): The decimal number to be converted to binary.\n\n    Returns:\n        str: The binary representation of the decimal number.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = format(decimal, '0b')\n    return 'db' + binary + 'db'\n",
        "test": "assert decimal_to_binary(15) == \"db1111db\", \"decimal_to_binary(15) should return 'db1111db'.\"",
        "num_ids": 2107
    },
    {
        "number": 80,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n\n    # Convert the string to lowercase and remove all non-alphabetic characters\n    s = ''.join(c.lower() for c in s if c.isalpha())\n\n    # Initialize a list to store the indices of each consecutive letter in the string\n    indices = [i for i in range(len(s))]\n\n    # Initialize a list to store the number of consecutive duplicates of each letter\n    consecutive_duplicates = [0] * 26\n\n    # Iterate through the string and check if every 3 consecutive letters are distinct\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            # If the number of consecutive duplicates of each letter is 3, then the string is happy\n            if consecutive_duplicates[ord(s[i]) - ord('a')] == 3:\n                return True\n            # If the number of consecutive duplicates of each letter is not 3, then increment the count\n            else:\n                consecutive_duplicates[ord(s[i]) - ord('a')] += 1\n\n    # If the string is not happy, return False\n    return False",
        "test": "assert is_happy(\"a\") == False",
        "num_ids": 2862
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n        GPA       |    Letter grade\n        4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n        0.0                E\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n    grades = sorted(grades)\n\n    letter_grades = []\n    letter_grade = 'E'\n\n    for i in range(len(grades)):\n        if grades[i] >= 4.0:\n            letter_grade = 'A+'\n        elif grades[i] >= 3.7:\n            letter_grade = 'A'\n        elif grades[i] >= 3.3:\n            letter_grade = 'A-'\n        elif grades[i] >= 3.0:\n            letter_grade = 'B+'\n        elif grades[i] >= 2.7:\n            letter_grade = 'B'\n        elif grades[i] >= 2.3:\n            letter_grade = 'B-'\n        elif grades[i] >= 2.0:\n            letter_grade = 'C+'\n        elif grades[i] >= 1.7:\n            letter_grade = 'C'\n        elif grades[i] >= 1.3:\n            letter_grade = 'C-'\n        elif grades[i] >= 1.0:\n            letter_grade = 'D+'\n        elif grades[i] >= 0.7:\n            letter_grade = 'D'\n        else:\n            letter_grade = 'D-'\n\n        letter_grades.append(letter_grade)\n\n    return letter_grades",
        "test": "assert numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']",
        "num_ids": 5462
    },
    {
        "number": 82,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    string_length = len(string)\n    if string_length == 1:\n        return True\n    elif is_prime(string_length):\n        return True\n    else:\n        return False",
        "test": "assert prime_length('Hello') == True",
        "num_ids": 1775
    },
    {
        "number": 83,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    num = 1\n    while num <= n:\n        if str(num) == \"1\":\n            count += 1\n            num += 1\n        else:\n            num += 1\n    return count",
        "test": "assert starts_one_ends(0) == 0",
        "num_ids": 1303
    },
    {
        "number": 84,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n                Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n        a string of binary number\n    \"\"\"\n    # check if the input is valid\n    if not isinstance(N, int) or N < 0 or N > 10000:\n        return \"Invalid input\"\n\n    # initialize the sum variable\n    total_sum = 0\n\n    # loop through all the digits of N\n    for digit in str(N):\n        # calculate the sum of digits of the current digit\n        digit_sum = int(digit)\n        total_sum += digit_sum\n\n    # convert the total sum to binary\n    binary_number = bin(total_sum)[2:]\n\n    # return the binary number\n    return binary_number",
        "test": "assert solve(1000) == \"1\"",
        "num_ids": 2600
    },
    {
        "number": 85,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n    \n    Args:\n        lst (list): list of integers\n    \n    Returns:\n        int: sum of even elements at odd indices\n    \n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    total = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0 and i % 2 == 1:\n            total += lst[i]\n    return total",
        "test": "assert add([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 20",
        "num_ids": 1460
    },
    {
        "number": 86,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n\n    # Split the string into words using space as a delimiter\n    words = s.split()\n\n    # Initialize an empty list to store the new words\n    result = []\n\n    # Iterate through each word in the original string\n    for word in words:\n        # Check if the word is already in the result list\n        if word not in result:\n            # If the word is not in the result list, add it to the result list\n            result.append(word)\n\n    # Join the result list back into a string using space as a delimiter\n    ordered_s =''.join(result)\n\n    return ordered_s",
        "test": "assert anti_shuffle('Hi') == 'Hi'",
        "num_ids": 2518
    },
    {
        "number": 87,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    rows = []\n    for row in lst:\n        if len(row) == x:\n            rows.append((0, len(row)))\n        elif len(row) > x:\n            rows.append((len(row) - x, len(row)))\n        else:\n            rows.append((0, len(row)))\n    rows.sort(key=lambda x: x[0])\n    for row in rows:\n        row.sort(key=lambda y: y[1])\n    return rows",
        "test": "assert get_row([], 1) == []",
        "num_ids": 4491
    },
    {
        "number": 88,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    # Create a copy of the array to avoid modifying the original array\n    temp_array = array.copy()\n\n    # Calculate the sum of the first and last index values\n    first_sum = sum(temp_array[0:len(temp_array)//2])\n    last_sum = sum(temp_array[len(temp_array)//2:])\n\n    # If the sum of the first and last index values is odd, sort the array in ascending order\n    if first_sum % 2 == 1:\n        temp_array.sort()\n    # If the sum of the first and last index values is even, sort the array in descending order\n    elif last_sum % 2 == 1:\n        temp_array.sort(reverse=True)\n\n    return temp_array",
        "test": "assert sort_array([5]) == [5]",
        "num_ids": 3789
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def rotate_alphabet(s):\n    \"\"\"Create a function rotate_alphabet that takes a string as an argument and\n    returns a string rotated by two places. For example:\n    rotate_alphabet('hi') returns 'lm'\n    rotate_alphabet('asdfghjkl') returns 'ewhjklnop'\n    rotate_alphabet('gf') returns 'kj'\n    rotate_alphabet('et') returns 'ix'\n    \"\"\"\n    # Define a list of all possible rotations\n    rotations = ['abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ']\n\n    # Create a copy of the string and rotate the alphabet\n    result = ''\n    for char in s:\n        if char in rotations[0]:\n            result += rotations[1][rotations[0].index(char)]\n        else:\n            result += char\n\n    return result\n",
        "test": "assert encrypt('asdfghjkl') == 'ewhjklnop', \"encrypt('asdfghjkl') should return 'ewhjklnop'\"",
        "num_ids": 2332
    },
    {
        "number": 90,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    if not lst:\n        return None\n\n    smallest = max(lst)\n    second_smallest = smallest + 1\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest:\n            second_smallest = num\n\n    return second_smallest",
        "test": "assert next_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 2279
    },
    {
        "number": 91,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    bored = 0\n    words = S.split()\n    for i in range(len(words)):\n        if words[i].startswith(\"I\"):\n            bored += 1\n    return bored",
        "test": "assert is_bored(\"Hello world\") == 0, \"The function is not returning the expected result.\"",
        "num_ids": 1792
    },
    {
        "number": 92,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    \n    # Check if all numbers are integers\n    if not all(isinstance(num, int) for num in [x, y, z]):\n        return False\n    \n    # Calculate the sum of the other two numbers\n    other_sum = x + y\n    \n    # Check if the sum is equal to the first number\n    if other_sum == x:\n        return True\n    \n    # Check if the sum is equal to the second number\n    elif other_sum == y:\n        return True\n    \n    # Check if the sum is equal to the third number\n    elif other_sum == z:\n        return True\n    \n    # If no condition is satisfied, return False\n    else:\n        return False",
        "test": "assert any_int(5, 2, 7) == True",
        "num_ids": 2543
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a way\n    that it swaps case of all letters, replaces all vowels in the message\n    with the letter that appears 2 places ahead of that vowel in the english alphabet.\n    Assume only letters.\n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGS GCG'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowels_count = {}\n    vowel_count = {}\n    for letter in message:\n        if letter in vowels:\n            count = vowels_count.get(letter, 0)\n            vowel_count[letter] = count + 2\n        else:\n            count = vowel_count.get(letter, 0)\n            vowel_count[letter] = count + 1\n        vowels_count[letter] = vowels_count.get(letter, 0) + 1\n    return \"\".join([vowel if vowel_count[vowel] == 2 else vowel[vowel_count[vowel]-2] for vowel in vowels])",
        "test": "assert encode('This is a message') == 'tHKS KS C MGSSCGG', \"Test Failed\"",
        "num_ids": 2785
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef largest_prime_sum(lst):\n    \"\"\"\n    Given a list of integers, return the largest prime value and its sum of its digits.\n    \"\"\"\n    largest_prime = -1\n    largest_prime_sum = 0\n    for num in lst:\n        if is_prime(num):\n            if num > largest_prime:\n                largest_prime = num\n                largest_prime_sum = sum(map(int, str(num)))\n            elif num == largest_prime:\n                largest_prime_sum += sum(map(int, str(num)))\n    return largest_prime_sum, largest_prime",
        "test": "assert skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25",
        "num_ids": 5229
    },
    {
        "number": 95,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.isupper():\n            return False\n        elif key.lower()!= key:\n            return False\n    return True",
        "test": "assert check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) == False",
        "num_ids": 2942
    },
    {
        "number": 96,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes",
        "test": "assert count_up_to(5) == [2, 3]",
        "num_ids": 3413
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def multiply(a, b):\n    \"\"\"\n    Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14, -15) should return 20.\n    \"\"\"\n    # Check if both inputs are valid\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Both inputs must be integers.\")\n\n    # Calculate the product of their unit digits\n    result = 0\n    while b > 0:\n        if b & 1:\n            result += a\n        a *= 10\n        b >>= 1\n\n    return result\n",
        "test": "assert multiply(19, 28) == 72, \"The product of 19 and 28 should be 72.\"",
        "num_ids": 3012
    },
    {
        "number": 98,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count",
        "test": "assert count_upper('abcdefg') == 0",
        "num_ids": 1346
    },
    {
        "number": 99,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    value = float(value)\n    return round(value)",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 3595
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    pile = []\n    for i in range(n):\n        if i % 2 == 0:\n            next_stone = n - 1 - (i // 2)\n        else:\n            next_stone = n - 1 - (i // 2) + 1\n\n        pile.append(next_stone)\n\n    return pile",
        "test": "assert make_a_pile(3) == [3, 5, 7], \"make_a_pile(3) should return [3, 5, 7]\"",
        "num_ids": 2661
    },
    {
        "number": 101,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Split the string by comma or space\n    words = s.split(\", \") if \",\" in s else s.split() if \" \" in s else [s]\n    \n    # Return the array of words\n    return words",
        "test": "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
        "num_ids": 1869
    },
    {
        "number": 102,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\n    # Initialize a variable to store the biggest even integer number found so far\n    max_num = -1\n\n    # Iterate through all even numbers in the range [x, y] inclusive\n    for num in range(x, y + 1, 2):\n        # If the current number is bigger than the current maximum number, update it\n        if num > max_num:\n            max_num = num\n\n    # If no number in the range [x, y] inclusive is found, return -1\n    if max_num == -1:\n        return -1\n    else:\n        return max_num",
        "test": "assert choose_num(13, 12) == -1",
        "num_ids": 2312
    },
    {
        "number": 103,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def rounded_avg(n, m):\n    \"\"\"\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        answer = (n + m) // 2\n        binary = bin(answer)[2:]\n        return binary",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 2461
    },
    {
        "number": 104,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Create an empty list to store the unique digits\n    unique_digits = []\n\n    # Loop through the list of numbers\n    for num in x:\n        # Check if the number has any even digit\n        if num % 2!= 0:\n            # If yes, append it to the unique digits list\n            unique_digits.append(num)\n\n    # Return the unique digits sorted in increasing order\n    return sorted(unique_digits)",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
        "num_ids": 2505
    },
    {
        "number": 105,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    if not arr:\n        return []\n\n    # Filter out numbers outside the range of 1-9\n    arr = [num for num in arr if 1 <= num <= 9]\n\n    # Sort the remaining numbers in ascending order\n    arr.sort()\n\n    # Reverse the sorted array\n    arr = arr[::-1]\n\n    # Replace each digit by its corresponding name\n    num_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n\n    result = []\n    for digit in arr:\n        result.append(num_to_name[digit])\n\n    return result",
        "test": "assert by_length([]) == []",
        "num_ids": 4905
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    factorials = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorials.append(i * i)\n        else:\n            factorials.append(sum(range(1, i+1)))\n    return factorials",
        "test": "assert f(5) == [1, 2, 6, 24, 15]  # Test 1",
        "num_ids": 2200
    },
    {
        "number": 107,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def even_odd_palindrome(n):\n    even_palindrome = 0\n    odd_palindrome = 0\n    num = 1\n    \n    while num <= n:\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                even_palindrome += 1\n            else:\n                odd_palindrome += 1\n        num += 1\n        \n    return (even_palindrome, odd_palindrome)",
        "test": "assert even_odd_palindrome(3) == (1, 2)",
        "num_ids": 3102
    },
    {
        "number": 108,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num >= 0:\n            digits = bin(num).count('1')\n            if digits > 0:\n                count += 1\n    return count",
        "test": "assert count_nums([]) == 0",
        "num_ids": 2068
    },
    {
        "number": 109,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import random\n\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performing 2 right shift operations, non-decreasing order can\n                    be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n    \"\"\"\n\n    # Check if the array is empty\n    if len(arr) == 0:\n        return True\n\n    # Shuffle the array\n    random.shuffle(arr)\n\n    # Performing right shift operation any number of times\n    for i in range(len(arr)-1):\n        arr[i], arr[i+1] = arr[i+1], arr[i]\n\n    # Check if the array is sorted in non-decreasing order\n    if arr[0] > arr[1]:\n        return True\n    else:\n        return False",
        "test": "assert move_one_ball([3, 4, 5, 1, 2]) == True",
        "num_ids": 4967
    },
    {
        "number": 110,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Check if the input lists are non-empty\n    if len(lst1) == 0 or len(lst2) == 0:\n        return \"NO\"\n\n    # Check if the two lists have the same length\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n\n    # Loop through the lists and check if the elements are even\n    for i in range(len(lst1)):\n        if lst1[i] % 2!= lst2[i] % 2:\n            return \"NO\"\n\n    # If all elements are even, return \"YES\"\n    return \"YES\"",
        "test": "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"",
        "num_ids": 4353
    },
    {
        "number": 111,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \n    \"\"\"\n    # Initialize a dictionary to store the counts\n    letter_count = {}\n\n    # Split the test string into individual letters\n    letters = test.split()\n\n    # Loop through each letter\n    for letter in letters:\n\n        # If the letter is already in the dictionary, increment its count\n        if letter in letter_count:\n            letter_count[letter] += 1\n        # If the letter is not in the dictionary, add it with a count of 1\n        else:\n            letter_count[letter] = 1\n\n    # Sort the dictionary by value in descending order\n    sorted_count = sorted(letter_count.items(), key=lambda x: x[1], reverse=True)\n\n    # Return the dictionary of letter counts\n    return dict(sorted_count)",
        "test": "assert histogram('a') == {'a': 1}",
        "num_ids": 3416
    },
    {
        "number": 112,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Create a set of characters in c\n    c_set = set(c)\n    \n    # Remove all characters in s that are equal to any character in c_set\n    s_new = ''.join([char for char in s if char not in c_set])\n    \n    # Check if the new string is palindrome\n    is_palindrome = s_new == s_new[::-1]\n    \n    return s_new, is_palindrome",
        "test": "assert reverse_delete(\"abcdef\",\"b\") == (\"acdef\",False)",
        "num_ids": 2267
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    # Create an empty list to store the output\n    output = []\n\n    # Loop through each string in the list\n    for i in lst:\n        # Loop through each character in the string\n        for char in i:\n            # Check if the character is an odd digit\n            if char % 2!= 0:\n                # Add the number of odd digits to the output string\n                output.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(\n                    char, char, char, len(i)))\n\n    return output",
        "test": "assert odd_count(['3', '11111111']) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]",
        "num_ids": 3546
    },
    {
        "number": 114,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    # Initialize the sum variable to be positive infinity\n    sum_ = float('inf')\n    # Initialize the current sub-array sum variable to be 0\n    current_sum = 0\n    # Initialize the start index variable to 0\n    start_index = 0\n    # Initialize the end index variable to 0\n    end_index = 0\n\n    # Loop through the array\n    for i in range(len(nums)):\n        # Update the current sub-array sum variable\n        current_sum += nums[i]\n        # If the current sub-array sum is smaller than the current sum,\n        # update the sum and start and end indices\n        if current_sum < sum_:\n            sum_ = current_sum\n            start_index = i\n        # If the current sub-array sum is smaller than the current sum\n        # and the current sub-array is empty, update the sum and start and end indices\n        elif current_sum == sum_ and len(nums[start_index:]) == 0:\n            sum_ = current_sum\n            start_index = i\n            end_index = i\n\n    # Return the sum of the sub-array\n    return sum_",
        "test": "assert minSubArraySum([-1, -2, -3]) == -6, \"The correctness of the minSubArraySum function has not been implemented.\"",
        "num_ids": 2652
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def max_fill(grid, bucket_capacity):\n    import math\n\n    # Initialize the maximum number of times each bucket needs to be filled\n    max_fill_count = [0] * len(grid)\n\n    # Initialize the number of times each bucket needs to be filled\n    fill_count = [0] * len(grid)\n\n    # Initialize the maximum number of buckets filled\n    max_buckets_filled = 0\n\n    # Iterate through each row\n    for i in range(len(grid)):\n        # Iterate through each unit of water in the row\n        for j in range(1, len(grid[i])):\n            # Check if there is enough water in the bucket\n            if grid[i][j] == 1 and fill_count[j] < bucket_capacity:\n                # Fill the bucket\n                fill_count[j] += 1\n            else:\n                # Check if the bucket is already filled\n                if fill_count[j] > 0:\n                    # Lower the bucket and increase the maximum number of buckets filled\n                    fill_count[j] -= 1\n                    max_buckets_filled += 1\n\n    # Return the maximum number of times each bucket needs to be filled\n    return max_fill_count, max_buckets_filled",
        "test": "assert max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5",
        "num_ids": 3846
    },
    {
        "number": 116,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def sort_array(arr):\n    \"\"\"\n    Sorts the given array of integers in ascending order based on the number of ones\n    in their binary representation. The sorting is done using the built-in `sorted` function.\n\n    Args:\n        arr (list): The array to be sorted.\n\n    Returns:\n        list: The sorted array.\n    \"\"\"\n    # Create a set of the binary representation of each integer in the array\n    binary_representation = set(bin(x)[2:])\n\n    # Sort the set based on the number of ones in each binary representation\n    sorted_binary_representation = sorted(binary_representation)\n\n    # Convert the sorted binary representation back to a list\n    sorted_list = [int(b) for b in sorted_binary_representation]\n\n    return sorted_list",
        "test": "assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]",
        "num_ids": 2684
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    # Initialize an empty list to store the words containing exactly n consonants\n    words = []\n\n    # Iterate through each character in the string s\n    for char in s:\n        # If the character is a consonant, add it to the list of words if it contains exactly n consonants\n        if char.lower() in \"aeiou\":\n            count = 0\n            for c in s:\n                if c.lower() == char.lower():\n                    count += 1\n            if count == n:\n                words.append(char.lower())\n\n    return words",
        "test": "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]",
        "num_ids": 3466
    },
    {
        "number": 118,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def get_closest_vowel(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    left = word[:-1]\n    right = word[1:]\n    left_consonant = left[0]\n    right_consonant = right[0]\n    left_count = 0\n    right_count = 0\n\n    for letter in left:\n        if letter.lower() in vowels:\n            left_count += 1\n        else:\n            break\n\n    for letter in right:\n        if letter.lower() in vowels:\n            right_count += 1\n        else:\n            break\n\n    if left_count > right_count:\n        closest_vowel = left_consonant\n    else:\n        closest_vowel = right_consonant\n\n    if closest_vowel:\n        return closest_vowel\n    else:\n        return \"\"",
        "test": "assert get_closest_vowel(\"FULL\") == \"U\"",
        "num_ids": 3128
    },
    {
        "number": 119,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    def check_balance(str1, str2):\n        count1 = 0\n        count2 = 0\n\n        for char in str1:\n            if char == '(':\n                count1 += 1\n            elif char == ')':\n                count2 += 1\n                if count1 < count2:\n                    return False\n            else:\n                return False\n        return True\n\n    # Check if the first string is good\n    if check_balance(lst[0], lst[1]):\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert match_parens([')', ')']) == 'No'",
        "num_ids": 2237
    },
    {
        "number": 120,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    arr = sorted(arr, reverse=True)  # sort the array in descending order\n\n    return arr[:k]  # return the first k elements of the sorted array",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]",
        "num_ids": 3336
    },
    {
        "number": 121,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    sum_of_odd_even = 0\n    for num in lst:\n        if num % 2 == 0:\n            sum_of_odd_even += num\n    return sum_of_odd_even",
        "test": "assert solution([3, 3, 3, 3, 3]) == 9",
        "num_ids": 1722
    },
    {
        "number": 122,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Create a list of all elements in the array\n    elements = list(set(arr[:k]))\n\n    # Sort the list in ascending order\n    elements.sort()\n\n    # Initialize the sum to 0\n    result = 0\n\n    # Iterate through the sorted list\n    for i in range(len(elements)):\n        # Check if the current element has at most two digits\n        if len(str(elements[i])) <= 2:\n            # Add it to the result and continue to the next element\n            result += elements[i]\n            i += 1\n\n    # Return the result\n    return result",
        "test": "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24",
        "num_ids": 3021
    },
    {
        "number": 123,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 130,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n < 1:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        odd_collatz = []\n        for i in range(2, n+1):\n            if n % i == 0:\n                if i % 2 == 0:\n                    next_num = int(i / 2)\n                else:\n                    next_num = (i * 3) + 1\n                odd_collatz.append(i)\n                odd_collatz.append(next_num)\n        odd_collatz.sort()\n        return odd_collatz",
        "test": "assert get_odd_collatz(1) == [1]  # The Collatz conjecture states that the first odd number in the sequence is 1.",
        "num_ids": 4146
    },
    {
        "number": 124,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def valid_date(date):\n    \"\"\"Validates a given date string and returns True if it is valid, otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    # Validate the date string\n    if len(date.strip()) == 0:\n        return False\n\n    # Split the date string into month, day, and year\n    parts = date.split('-')\n    if len(parts)!= 3:\n        return False\n\n    try:\n        # Convert the month and day strings to integers\n        month = int(parts[0])\n        day = int(parts[1])\n        year = int(parts[2])\n\n        # Check if the month is within range\n        if month < 1 or month > 12:\n            return False\n\n        # Check if the day is within range\n        if day < 1 or day > 31:\n            return False\n\n        # Check if the month is a leap year\n        if month in [4, 6, 9, 11] and day > 30:\n            return False\n\n        # Check if the month is February and the day is not 29\n        if month == 2 and day == 29:\n            return False\n\n        # Check if the number of days is within range for each month\n        if month in [1, 3, 5, 7, 8, 10, 12] and day > 30:\n            return False\n        elif month in [4, 6, 9, 11] and day > 30:\n            return False\n        elif month == 2 and day > 29:\n            return False\n\n        # Check if the date is in the format mm-dd-yyyy\n        if len(parts[0])!= 2 or len(parts[1])!= 2 or len(parts[2])!= 4:\n            return False\n    except ValueError:\n        return False\n\n    return True",
        "test": "assert valid_date('15-01-2012') == False",
        "num_ids": 6917
    },
    {
        "number": 125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def split_words(txt):\n    words = txt.split()\n    # Add any additional conditions here\n    if \" \" in words:\n        return words\n    elif \",\" in words:\n        num_lower = 0\n        for i in range(1, len(words), 2):\n            num_lower += len(words[i].lower())\n        return num_lower",
        "test": "assert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 2505
    },
    {
        "number": 126,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n\n    # If the list has only one element, it is sorted\n    if len(lst) == 1:\n        return True\n\n    # Sort the list and check if it is sorted\n    sorted_lst = sorted(lst)\n    if sorted_lst == lst:\n        return True\n\n    # If the list has more than 1 duplicate of the same number, it is not sorted\n    for i in range(1, len(sorted_lst)):\n        if sorted_lst[i] == sorted_lst[i - 1]:\n            return False\n\n    return True",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 2680
    },
    {
        "number": 127,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"\n    :param interval1: a pair of integers (start, end)\n    :param interval2: a pair of integers (start, end)\n    :return: \"YES\" if the length of intersection is a prime number, otherwise \"NO\"\n    \"\"\"\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    # Check if the two intervals don't intersect\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n\n    # Check if the length of intersection is a prime number\n    if is_prime(end1 - start1) and is_prime(end2 - start2):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\"",
        "num_ids": 3490
    },
    {
        "number": 128,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if len(arr) == 0:\n        return None\n\n    sum_mag = 0\n    sign_product = 1\n\n    for num in arr:\n        sign_product *= num\n        if sign_product < 0:\n            sign_product = 0\n        if sign_product > 1:\n            sign_product = 1\n        sum_mag += abs(num) * sign_product\n\n    return sum_mag",
        "test": "assert prod_signs([0, 1]) == 0",
        "num_ids": 2215
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n    # Check if the grid is valid\n    if not grid:\n        return []\n\n    # Initialize variables\n    n = len(grid)\n    m = len(grid[0])\n    min_path = [float('inf')] * (n * m)\n    visited = set()\n    path = []\n\n    # Define a function to find the minimum path from the given cell\n    def find_min_path(row, col):\n        # Check if the current cell is not visited yet\n        if (row, col) not in visited:\n            # Mark the current cell as visited\n            visited.add((row, col))\n\n            # Get the adjacent cells\n            left, down = row - 1, col\n            right, up = row + 1, col\n            up_left, down_left = row - 1, col - 1\n            up_right, down_right = row + 1, col - 1\n\n            # Check for the minimum path\n            if row == 0:\n                min_path[col] = grid[row][col]\n            elif col == 0:\n                min_path[row] = grid[row][col]\n            elif row == n - 1:\n                min_path[col] = grid[row][col]\n            elif col == m - 1:\n                min_path[row] = grid[row][col]\n            else:\n                # Check for the minimum path between the current cell and its adjacent cells\n                if min_path[down_left] > min_path[row] + grid[row][col]:\n                    min_path[down_left] = min_path[row] + grid[row][col]\n                if min_path[down_right] > min_path[row] + grid[row][col]:\n                    min_path[down_right] = min_path[row] + grid[row][col]\n                if min_path[up_left] > min_path[row] + grid[row][col]:\n                    min_path[up_left] = min_path[row] + grid[row][col]\n                if min_path[up_right] > min_path[row] + grid[row][col]:\n                    min_path[up_right] = min_path[row] + grid[row][col]\n\n            # Recursively call the function for the adjacent cells\n            if col > 0:\n                find_min_path(down, col - 1)\n            if row > 0:\n                find_min_path(row - 1, col)\n            if col < m - 1:\n                find_min_path(down, col + 1)\n            if row < n - 1:\n                find_min_path(row + 1, col)\n\n    # Call the function to find the minimum path\n    find_min_path(0, 0)\n\n   ",
        "test": "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]",
        "num_ids": 6843
    },
    {
        "number": 130,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def tri(n):\n    \"\"\"Returns the first n + 1 numbers of the Tribonacci sequence.\"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n    else:\n        a, b, c = 1, 3, 1\n        result = [0] * (n + 1)\n        result[0], result[1] = 3, 2\n        for i in range(2, n + 1):\n            result[i] = a + b + c\n            a, b, c = b, c, result[i]\n        return result\n",
        "test": "assert tri(1) == [3]",
        "num_ids": 2858
    },
    {
        "number": 131,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # Initialize a counter variable to keep track of the number of even digits\n    count = 0\n    \n    # Check if the number is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return 0\n        \n    # Loop through each digit of the number\n    for digit in str(n):\n        # Check if the digit is odd\n        if int(digit) % 2 == 1:\n            # Add the product of the odd digits to the count variable\n            count += int(digit) ** 2\n            \n    # If all digits are odd, return 0\n    if count == 0:\n        return 0\n    else:\n        # If all digits are even, return the product of their powers\n        return n ** count",
        "test": "assert digits(1) == 1, \"Expected 1 but got {}\".format(digits(1))",
        "num_ids": 1692
    },
    {
        "number": 132,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack.pop()!= '[':\n                return False\n    return not stack",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False",
        "num_ids": 1725
    },
    {
        "number": 133,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    total_sum = 0\n    for num in lst:\n        if isinstance(num, int):\n            total_sum += num**2\n            num = round(num, 0)\n    return total_sum\n",
        "test": "assert sum_squares([1,2,3]) == 14",
        "num_ids": 2120
    },
    {
        "number": 134,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    # split the string into words\n    words = txt.split()\n    # if the last word has only one character and is not a part of a word\n    if len(words[-1]) == 1 and words[-1] not in [\"a\", \"an\", \"the\", \"in\"]:\n        return True\n    else:\n        return False",
        "test": "assert check_if_last_char_is_a_letter(\"apple pie\") == False",
        "num_ids": 2085
    },
    {
        "number": 135,
        "max_answer_num": 18,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    if len(arr) == 1:\n        return 0\n\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return i\n\n    return -1",
        "test": "assert can_arrange([1,2,3]) == -1",
        "num_ids": 2155
    },
    {
        "number": 136,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    largest = None\n    smallest = None\n\n    for num in lst:\n        if num < 0:\n            if largest is None or num > largest:\n                largest = num\n        elif num > 0:\n            if smallest is None or num < smallest:\n                smallest = num\n\n    return (largest, smallest)",
        "test": "assert largest_smallest_integers([]) == (None, None)",
        "num_ids": 3094
    },
    {
        "number": 137,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if isinstance(a, (int, float)):\n        if isinstance(b, (int, float)):\n            return max(a, b)\n        else:\n            return b\n    else:\n        if isinstance(b, (int, float)):\n            return a\n        else:\n            return None",
        "test": "assert compare_one(1, 2.5) == 2.5, \"The function should return 2.5 if the values are equal\"",
        "num_ids": 3091
    },
    {
        "number": 138,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    \n    # Check if the given number is positive\n    if not n > 0:\n        return False\n\n    # Initialize variables to keep track of the sum of even numbers\n    even_sum = 0\n    odd_sum = 0\n\n    # Iterate through the given number n\n    for i in range(1, n+1):\n        # Check if the number i is even\n        if i % 2 == 0:\n            # Add the even number i to even_sum\n            even_sum += i\n        # Check if the number i is odd\n        else:\n            # Add the odd number i to odd_sum\n            odd_sum += i\n\n    # Check if the even_sum is equal to the sum of all the even numbers\n    if even_sum == sum(range(1, n+1, 2)):\n        return True\n    # If the even_sum is not equal to the sum of all the even numbers, return False\n    else:\n        return False",
        "test": "assert is_equal_to_sum_even(4) == False",
        "num_ids": 2343
    },
    {
        "number": 139,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n\n    return result",
        "test": "assert special_factorial(1) == 1, \"The function should return 1 for the integer 1.\"",
        "num_ids": 1749
    },
    {
        "number": 140,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n\n    text = text.replace(\" \", \"_\")\n\n    consecutive_spaces = 0\n\n    for i in range(len(text)):\n        if text[i] == \" \" and text[i-1]!= \" \":\n            consecutive_spaces += 1\n        elif text[i] == \" \" and text[i-1] == \" \":\n            consecutive_spaces -= 1\n        elif text[i]!= \" \" and text[i-1] == \" \":\n            consecutive_spaces = 0\n\n    if consecutive_spaces > 2:\n        return text.replace(\" \", \"-\")\n    else:\n        return text",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 2097
    },
    {
        "number": 141,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Check if there are more than three digits in the file name\n    if len(file_name) > 3 or any(char.isdigit() for char in file_name):\n        return 'No'\n\n    # Check if the file name contains exactly one dot '.'\n    if file_name.count('.')!= 1:\n        return 'No'\n\n    # Check if the substring before the dot starts with a letter from the latin alphapet\n    if not (file_name[0].isalpha() or file_name[0] == '_'):\n        return 'No'\n\n    # Check if the substring after the dot is one of the allowed values\n    if file_name.split('.')[-1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'",
        "test": "assert file_name_check(\"1example.dll\") == \"No\", \"The function should return 'No' if the file name is not valid.\"",
        "num_ids": 4555
    },
    {
        "number": 142,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_squares(lst):\n    sum_square = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4!= 0:\n            sum_square += lst[i]**2\n        elif i % 4 == 0 and i % 3!= 0:\n            sum_square += lst[i]**3\n        else:\n            sum_square += lst[i]\n    return sum_square",
        "test": "assert sum_squares([]) == 0, \"The sum of squares for the given list [] should be 0\"",
        "num_ids": 2515
    },
    {
        "number": 143,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = []\n    prime_lengths = []\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n            prime_lengths.append(len(word))\n    prime_words.sort()\n    prime_lengths.sort()\n    result = \" \".join(prime_words)\n    return result",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\"",
        "num_ids": 2386
    },
    {
        "number": 144,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def simplify(x, n):\n    \"\"\"\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Check if x and n are valid fractions\n    numerator, denominator = map(int, x.split('/'))\n    if denominator == 0:\n        return False\n    \n    # Check if x and n are both whole numbers\n    if numerator!= 0 or denominator!= 1:\n        return False\n    \n    # Calculate the simplified expression using integer division\n    simplified_expression = str(int(x) * int(n))\n    # Check if simplified expression is a whole number\n    if simplified_expression.isdigit():\n        return True\n    else:\n        return False",
        "test": "assert simplify(\"1/6\", \"2/1\") == False",
        "num_ids": 3204
    },
    {
        "number": 145,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(digit) for digit in str(x)))\n    return nums",
        "test": "assert order_by_points([]) == []",
        "num_ids": 3335
    },
    {
        "number": 146,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9):\n            count += 1\n    return count",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1  # output: 1",
        "num_ids": 2200
    },
    {
        "number": 147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    Returns the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Args:\n        n (int): The value of n.\n\n    Returns:\n        int: The number of triples that satisfy the given conditions.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if j < i+2 and a[i] + a[j] + a[k] == a[i] * a[i] - a[i] + a[j] * a[j] - a[j] + a[k] * a[k]:\n                count += 1\n    return count\n",
        "test": "assert get_max_triples(8) == 4, \"The expected output is 4, but got {} instead.\".format(get_max_triples(8)) # Test case 2",
        "num_ids": 2970
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closer to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\n    # Check if planet1 and planet2 are correct planet names\n    if planet1 not in ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']:\n        return \"Invalid planet names\"\n    \n    # Check if planet1 and planet2 exist in our solar system\n    if planet1 == \"Mercury\" and planet2 == \"Venus\":\n        return \"Invalid planet names\"\n    elif planet1 == \"Venus\" and planet2 == \"Mercury\":\n        return \"Invalid planet names\"\n    elif planet1 == \"Earth\" and planet2 == \"Mercury\":\n        return \"Invalid planet names\"\n    elif planet1 == \"Mars\" and planet2 == \"Mercury\":\n        return \"Invalid planet names\"\n    elif planet1 == \"Jupiter\" and planet2 == \"Mercury\":\n        return \"Invalid planet names\"\n    elif planet1 == \"Saturn\" and planet2 == \"Mercury\":\n        return \"Invalid planet names\"\n    elif planet1 == \"Uranus\" and planet2 == \"Mercury\":\n        return \"Invalid planet names\"\n    elif planet1 == \"Neptune\" and planet2 == \"Mercury\":\n        return \"Invalid planet names\"\n\n    # Check if planet2 and planet1 exist in our solar system\n    if planet1 == \"Mercury\" and planet2 == \"Venus\":\n        return \"Invalid planet names\"\n    elif planet1 == \"Venus\" and planet2 == \"Mercury\":\n        return \"Invalid planet names\"\n    elif planet1 == \"Earth\" and planet2 == \"Mercury\":\n        return \"Invalid planet names\"\n    elif planet1 == \"Mars\" and planet2 == \"Mercury\":\n        return \"Invalid planet names\"\n    elif planet1 == \"Jupiter\" and planet2 == \"Mercury\":\n        return \"Invalid planet names\"\n    elif planet1 == \"Saturn\" and planet2 == \"Mercury\":\n        return \"Invalid planet names\"\n    elif planet1 == \"Uranus\" and planet2 == \"Mercury\":\n        return \"Invalid planet names\"\n    elif planet1 == \"Neptune\" and planet2 == \"Mercury\":\n        return \"Invalid planet names\"\n\n    # Define the planets and their orbits\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n    # Initialize a list to store the planets in the order of proximity to the sun\n    nearest_planets = []\n\n    # Iterate through the planets and find the planets whose orbits are located between\n    # the orbits of planet1 and planet2\n    for planet in planets:\n        if planet in [planet1, planet2]:\n            continue\n        else:\n            # Calculate the distance between the centers of the planets and the sun\n            distance = ((planet1.center_x - planet2.center_x)**2 + (planet1.center_y - planet2.center_y)**2 + (planet1.center_z - planet2.center_z)**2)**0.5\n\n            # Check if the distance is less than or equal to the distance of the sun\n            if distance <= 15949.1594:\n                nearest_planets.append(planet)\n\n    # Sort the planets by distance to the sun and return the tuple\n    nearest_planets.sort(key=lambda x: ((x.center_x - 4000000000000)**2 + (x.center_y - 4000000000000)**2 + (x.center_z - 4000000",
        "test": "assert bf(\"Earth\", \"Mercury\") == (\"Venus\")",
        "num_ids": 7686
    },
    {
        "number": 149,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\n    # Define a helper function to check if a string is odd length\n    def is_odd_length(word):\n        return len(word) % 2 == 1\n\n    # Define a helper function to find the length of a word\n    def word_length(word):\n        return len(word)\n\n    # Define a helper function to sort a list of words by length\n    def sort_by_length(words):\n        return sorted(words, key=word_length)\n\n    # Define the main function that deletes words with odd lengths\n    # and sorts the list alphabetically by length of words\n    def list_sort(words):\n        # Create a new list of words with odd lengths removed\n        words = [word for word in words if not is_odd_length(word)]\n        # Sort the list by length of words\n        words = sort_by_length(words)\n        # Return the list sorted by length of words\n        return words\n\n    return list_sort(lst)",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 3250
    },
    {
        "number": 150,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def is_prime(n):\n    \"\"\"Check if a number is prime or not.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef x_or_y(n, x, y):\n    \"\"\"Return the value of x if n is a prime number, and the value of y otherwise.\"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "test": "assert x_or_y(7, 34, 12) == 34",
        "num_ids": 1787
    },
    {
        "number": 151,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    '''\n    \n    if not lst:\n        return 0\n    \n    total = 0\n    for num in lst:\n        if not isinstance(num, int) or num < 0:\n            continue\n        if num % 2 == 1:\n            total += num * num\n    \n    return total",
        "test": "assert double_the_difference([-1, -2, 0]) == 0",
        "num_ids": 2505
    },
    {
        "number": 152,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def compare(game, guess):\n    \"\"\"\n    This function takes two arrays of scores and guesses of equal length and returns an array of the same length\n    denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    Args:\n        game: list of scores\n        guess: list of guesses\n\n    Returns:\n        list of integers, representing the absolute difference between each guess and the score\n    \"\"\"\n\n    if len(game)!= len(guess):\n        raise ValueError(\"game and guess must have the same length\")\n\n    result = []\n    for i in range(len(game)):\n        if guess[i] == game[i]:\n            result.append(0)\n        else:\n            result.append(abs(guess[i] - game[i]))\n\n    return result\n",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 3657
    },
    {
        "number": 153,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    # Find the strongest extension among all the extensions\n    strength = -1\n    max_extension_strength = -1\n    for extension in extensions:\n        # Count the number of uppercase letters and lowercase letters\n        capital_count = extension.count('CAP')\n        small_count = extension.count('SM')\n        extension_strength = capital_count - small_count\n        if extension_strength > max_extension_strength:\n            max_extension_strength = extension_strength\n            strongest_extension = extension\n    \n    # Choose the strongest extension and return the class name with the extension\n    return f\"{class_name}.{strongest_extension}\"",
        "test": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'",
        "num_ids": 4835
    },
    {
        "number": 154,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def cycpattern_check(a, b):\n    # Remove all non-alphabetic characters and convert to lowercase\n    a = ''.join(c for c in a if c.isalpha()).lower()\n    b = ''.join(c for c in b if c.isalpha()).lower()\n\n    # Check if b is a substring of a in all rotations of a\n    rotations = [''.join([c, d]) for c in a for d in a if d!= c]\n    for rotation in rotations:\n        if b in rotation:\n            return True\n\n    # If a is a substring of b in all rotations of a, check if b is a substring of a in all rotations of b\n    rotations = [''.join([c, d]) for c in b for d in b if d!= c]\n    for rotation in rotations:\n        if a in rotation:\n            return True\n\n    return False",
        "test": "assert cycpattern_check(\"abcd\",\"abd\") == False",
        "num_ids": 2716
    },
    {
        "number": 155,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    if num < 0:\n        num = -num\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)",
        "test": "assert even_odd_count(123) == (1, 2)",
        "num_ids": 1948
    },
    {
        "number": 156,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = {\n        1000:'m', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    roman_numeral = ''\n    for key, value in roman_numerals.items():\n        while number >= key:\n            roman_numeral += value\n            number -= key\n    return roman_numeral.lower()",
        "test": "assert int_to_mini_roman(19) == 'xix'",
        "num_ids": 3866
    },
    {
        "number": 157,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    \n    # Check if the sides can form a right-angled triangle\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    \n    return False",
        "test": "assert right_angle_triangle(1, 2, 3) == False",
        "num_ids": 2199
    },
    {
        "number": 158,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def find_max(words):\n    \"\"\"\n    Accept a list of strings and return the word with maximum number of unique characters.\n    If multiple strings have maximum number of unique characters, return the one which comes first in lexicographical order.\n    \"\"\"\n    # Sort the list of words lexicographically\n    words.sort()\n    # Iterate through the sorted list of words\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        # Count the number of unique characters in the current word\n        char_count = len(set(word))\n        # If the current word has a higher count of unique characters than the previous max,\n        # update the max_count and max_word\n        if char_count > max_count:\n            max_count = char_count\n            max_word = word\n    # Return the max_word or an empty string if no words have unique characters\n    return max_word",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 2894
    },
    {
        "number": 159,
        "max_answer_num": 20,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\n    # Calculate the total number of eaten carrots\n    total_eaten = number + need\n\n    # Calculate the number of carrots left after the meals\n    meal_carrots_left = remaining - need\n\n    # Check if the number of carrots needed is greater than the number of carrots eaten\n    if meal_carrots_left < 0:\n        # There are not enough carrots to complete the meal\n        return [total_eaten, meal_carrots_left]\n\n    else:\n        # There are enough carrots to complete the meal\n        return [total_eaten, meal_carrots_left]",
        "test": "assert eat(5, 6, 10) == [11, 4]",
        "num_ids": 4270
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = 0\n    n = len(operand) - 1\n    for i in range(n):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '//':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n    return result",
        "test": "assert do_algebra(['+', '*', '-'], [2, 3, 4]) == 6",
        "num_ids": 4522
    },
    {
        "number": 161,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    if s.isalpha():\n        s = s[::-1]\n    else:\n        s = s[::-1]\n    return s",
        "test": "assert solve(\"1234\") == \"4321\"",
        "num_ids": 2060
    },
    {
        "number": 162,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\n    if not text:\n        return None\n\n    import hashlib\n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode())\n    return md5_hash.hexdigest()",
        "test": "assert string_to_md5('') == None # should return None",
        "num_ids": 1958
    },
    {
        "number": 163,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    result = []\n    for i in range(a, b+1, 2):\n        result.append(i)\n    return result",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 2281
    }
]