[
    {
        "number": 0,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False",
        "test": "assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True",
        "num_ids": 2516,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            paren_groups.append('')\n            i += 1\n        elif paren_string[i] == ')':\n            if paren_groups:\n                paren_groups.pop()\n            else:\n                return []\n        elif paren_string[i] =='' and paren_groups:\n            paren_groups.pop()\n        else:\n            paren_groups[-1] += paren_string[i]\n            i += 1\n    return paren_groups",
        "test": "assert separate_paren_groups('(a))((b)))') == []",
        "num_ids": 3485,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    # If the number is zero or negative, return the same number\n    if number == 0 or number < 0:\n        return number\n    \n    # Extract the integer and decimal parts\n    integer = int(number)\n    decimal = round(number - integer, 2)\n    \n    return decimal",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 1769,
        "indeed": false
    },
    {
        "number": 3,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    # Initialize a variable to keep track of the minimum balance\n    min_balance = float('inf')\n    \n    # Loop through each operation in the list\n    for operation in operations:\n        # If the operation is a withdrawal, subtract the amount from the balance\n        if operation < 0:\n            # If the new balance is less than the current minimum balance, update the minimum balance\n            if operation - min_balance < 0:\n                min_balance = operation - min_balance\n        # If the operation is a deposit, add the amount to the balance\n        elif operation > 0:\n            min_balance += operation\n    \n    # If the minimum balance is negative, it means there was a fall below zero\n    return min_balance < 0",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 2108,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    mad = 0.0\n    for number in numbers:\n        mad += abs(number - mean)\n    return mad / len(numbers)",
        "test": "assert mean_absolute_deviation([0.0]) == 0.0",
        "num_ids": 3147,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 220,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        else:\n            result.append(numbers[i] + delimeter)\n    return result",
        "test": "assert intersperse([], 4) == []",
        "num_ids": 2194,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    levels = []\n    stack = []\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(levels)\n            levels.append(1)\n        elif char == ')':\n            if stack:\n                levels.pop()\n            else:\n                raise ValueError(\"Mismatched parentheses\")\n\n    if levels:\n        raise ValueError(\"Invalid input\")\n\n    return levels",
        "test": "assert parse_nested_parens('') == []",
        "num_ids": 2738,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 1588,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\n    # Initialize sum and product variables\n    sum_ = 0\n    product_ = 1\n\n    # Loop through the list of numbers\n    for num in numbers:\n        # Add the current number to the sum variable\n        sum_ += num\n\n        # Multiply the current number with the product variable\n        product_ *= num\n\n    # Return a tuple containing the sum and product\n    return (sum_, product_)",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 2081,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 13,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a given list of integers, generate a list of rolling maximum element found until a given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_numbers = [numbers[0]]\n    for i in range(1, len(numbers)):\n        max_numbers.append(max(max_numbers[-1], numbers[i]))\n    return max_numbers",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4] # correct",
        "num_ids": 2366,
        "indeed": false
    },
    {
        "number": 10,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix of the string that is a palindrome\n    max_palindrome_length = 1\n    for i in range(len(string)):\n        if is_palindrome(string[:i+1]):\n            max_palindrome_length = i+1\n    \n    # Create a list of strings that start with the longest palindrome of the supplied string\n    palindromes = []\n    for i in range(len(string) - max_palindrome_length + 1):\n        substring = string[i:i+max_palindrome_length]\n        if is_palindrome(substring):\n            palindromes.append(substring)\n    \n    # Choose the shortest palindrome and reverse it\n    return ''.join(palindromes)\n\nprint(make_palindrome(''))  # ''\nprint(make_palindrome('cat'))  # 'catac'\nprint(make_palindrome('cata'))  # 'catac'",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 3291,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Performs binary XOR operation between two strings a and b.\n    Returns the result as a string.\n\n    >>> string_xor('010', '110')\n    '100'\n\n    >>> string_xor('101', '110')\n    '011'\n\n    \"\"\"\n\n    # Convert the strings to lists of 1s and 0s\n    a_list = [int(x) for x in a]\n    b_list = [int(x) for x in b]\n\n    # Perform XOR operation between the lists\n    xor_list = [a_list[i] ^ b_list[i] for i in range(len(a_list))]\n\n    # Convert the result back to a string\n    xor_str = ''.join([str(x) for x in xor_list])\n\n    return xor_str\n",
        "test": "assert string_xor('010', '110') == '100' # correct output",
        "num_ids": 2027,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n\n    if not strings:\n        return None\n    \n    max_length = len(strings[0])\n    longest_string = strings[0]\n    \n    for string in strings:\n        if len(string) > max_length:\n            max_length = len(string)\n            longest_string = string\n    \n    return longest_string",
        "test": "assert longest(['a', 'bb', 'ccc']) == 'ccc'",
        "num_ids": 1673,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b!= 0:\n        a, b = b, a % b\n    return a",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 1466,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string \"\"\"\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes",
        "test": "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
        "num_ids": 1779,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    :param n: The starting number for the sequence.\n    :return: A string containing space-delimited numbers starting from 0 upto n inclusive.\n    \"\"\"\n    # Initialize an empty string to store the sequence.\n    sequence = \"\"\n    \n    # Iterate through the range of numbers from 0 to n, and append each number to the sequence string.\n    for i in range(n + 1):\n        sequence += str(i) + \" \"\n    \n    # Remove the last space and return the sequence string.\n    return sequence[:-1]",
        "test": "assert string_sequence(0) == '0'",
        "num_ids": 1332,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    char_count = {}\n    for char in string:\n        if char.lower() not in char_count:\n            char_count[char.lower()] = 1\n        else:\n            char_count[char.lower()] += 1\n    return len(char_count)",
        "test": "assert count_distinct_characters('Jerry') == 4",
        "num_ids": 1791,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 16,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    beats = 0\n    last_beat = 0\n    for i, note in enumerate(music_string):\n        if note == 'o':\n            beats += 4\n        elif note == 'o|':\n            beats += 2\n        elif note == '.|':\n            beats += 1\n        else:\n            if i == 0:\n                last_beat = beats\n            else:\n                beats += (beats - last_beat)\n        last_beat = beats\n\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
        "test": "assert parse_music('o o|.| o| o|.|.|.|.| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
        "num_ids": 3731,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 2184,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 220,
        "answer": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    # Create a set of valid choices\n    valid_choices = {'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine'}\n\n    # Initialize the result string\n    result = ''\n\n    # Iterate over the numbers in the input string\n    for number in numbers.split():\n        # Check if the current number is a valid choice\n        if number.lower() not in valid_choices:\n            # If not, append it to the result string and reset the valid_choices set\n            result += number.lower()\n            valid_choices.remove(number.lower())\n        else:\n            # If it is a valid choice, append it to the result string\n            result += number.lower()\n\n    # Return the result string\n    return result",
        "test": "assert sort_numbers('zero') == 'zero'",
        "num_ids": 2307,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    # Initialize variables\n    closest_distance = float('inf')\n    closest_elements = None\n\n    # Loop through the numbers and find the closest elements\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance:\n                closest_distance = distance\n                closest_elements = (numbers[i], numbers[j])\n\n    return closest_elements",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
        "num_ids": 3763,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # Find the minimum and maximum values in the list\n    min_val = min(numbers)\n    max_val = max(numbers)\n\n    # Rescale the list to be between 0 and 1\n    scaled_numbers = [(x - min_val) / (max_val - min_val) for x in numbers]\n\n    return scaled_numbers",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 2706,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 1526,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)",
        "test": "assert strlen('') == 0",
        "num_ids": 548,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 110,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n\n    # Initialize a variable to store the largest divisor found\n    largest = n\n\n    # Loop through all numbers from 2 to n-1\n    for i in range(2, n):\n        # If the current number is divisible by i, update the largest divisor found so far\n        if n % i == 0:\n            largest = i\n\n    # Return the largest divisor found\n    return largest",
        "test": "assert largest_divisor(15) == 5",
        "num_ids": 1601,
        "indeed": false
    },
    {
        "number": 25,
        "max_answer_num": 30,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "def factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    factors.append(n)\n    return factors",
        "test": "assert factorize(8) == [2, 2, 2]",
        "num_ids": 2965,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 230,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # Create a set to store the unique elements\n    unique_numbers = set(numbers)\n    # Create an empty list to store the unique elements\n    unique_list = []\n    # Iterate over the unique elements and add them to the unique_list\n    for number in unique_numbers:\n        unique_list.append(number)\n    # Return the unique_list\n    return unique_list",
        "test": "assert remove_duplicates([1, 1, 1]) == [1]",
        "num_ids": 2127,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 220,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n    # Initialize an empty string to store the flipped string\n    flipped_string = ''\n\n    # Iterate through each character in the string\n    for char in string:\n        # If the character is lowercase, convert it to uppercase\n        if char.islower():\n            flipped_string += char.upper()\n        # If the character is uppercase, convert it to lowercase\n        elif char.isupper():\n            flipped_string += char.lower()\n\n    return flipped_string",
        "test": "assert flip_case('hello') == 'HELLO', \"Test 2 failed\"",
        "num_ids": 1113,
        "indeed": false
    },
    {
        "number": 28,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    \n    Args:\n        strings (List[str]): List of strings to concatenate\n    \n    Returns:\n        str: Concatenated string\n    \n    \"\"\"\n    concatenated_string = ''\n    for string in strings:\n        concatenated_string += string\n    return concatenated_string",
        "test": "assert concatenate([]) == ''",
        "num_ids": 900,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 1507,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return list(filter(lambda x: x > 0, l))",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 2018,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_prime(n):\n    \"\"\"Return True if the given number is prime, and False otherwise.\n\n    Parameters:\n    n: the number to check for primality\n\n    Returns:\n    True if n is prime, False otherwise\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert is_prime(6) == False",
        "num_ids": 1856,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 260,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x**2 +... xs[n] * x**n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    for i in range(len(xs)):\n        if gcd(xs[i], xs[0])!= 1:\n            return None\n\n    return -xs[0] / xs[1]",
        "test": "assert find_zero([1, 2]) == -0.5",
        "num_ids": 4563,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    result = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result.append(l[i])\n        else:\n            result.append(l[i])\n    result.sort()\n    return result",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 3299,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "def unique(l: list) -> list:\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 1278,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if not l:\n        return None\n    else:\n        return max(l)",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 1824,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\"\"\"\n\n    count = 0\n    if n < 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Check if n is divisible by 11\n    if n % 11 == 0:\n        count += 1\n\n    # Check if n is divisible by 13\n    if n % 13 == 0:\n        count += 1\n\n    return count",
        "test": "assert fizz_buzz(50) == 0, \"Incorrect result for fizz_buzz(50).\"",
        "num_ids": 1888,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 230,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_even = [num for num in l if num % 2 == 0]\n    l_odd = [num for num in l if num % 2!= 0]\n    return l_even + sorted(l_odd)",
        "test": "assert sort_even([2, 4, 6, 8, 1]) == [2, 4, 6, 8, 1]",
        "num_ids": 2722,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    encoded_groups = s.split(\" \")\n    decoded_groups = []\n    for group in encoded_groups:\n        decoded_groups.append(group[::-1])  # reverse each group\n    return \" \".join(decoded_groups)",
        "test": "assert decode_cyclic(encode_cyclic(\"a\")) == \"a\"",
        "num_ids": 3942,
        "indeed": false
    },
    {
        "number": 39,
        "max_answer_num": 20,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_fib(n: int) -> int:\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n % 2 == 0:\n        # If the number is even, it's not a Fibonacci number and hence prime.\n        return -1\n    else:\n        # Otherwise, find the nth Fibonacci number that's also prime and then return it.\n        a, b = 0, 1\n        for i in range(n - 1):\n            c = a + b\n            if is_prime(c):\n                a = b\n                b = c\n        return b",
        "test": "assert prime_fib(1) == 2",
        "num_ids": 2141,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    Takes a list of integers as input and returns True if there are three distinct\n    elements in the list that sum to zero, and False otherwise.\n\n    Args:\n        l (list): A list of integers.\n\n    Returns:\n        bool: True if there are three distinct elements in the list that sum to zero,\n                and False otherwise.\n\n    Examples:\n        >>> triples_sum_to_zero([1, 3, 5, 0])\n        False\n        >>> triples_sum_to_zero([1, 3, -2, 1])\n        True\n        >>> triples_sum_to_zero([1, 2, 3, 7])\n        False\n        >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n        True\n        >>> triples_sum_to_zero([1])\n        False\n    \"\"\"\n    seen = set()\n    for num in l:\n        if num in seen:\n            return True\n        seen.add(num)\n\n    return False",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 3923,
        "indeed": false
    },
    {
        "number": 41,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Initialize a variable to keep track of the number of collisions\n    num_collisions = 0\n    \n    # Loop through each car in the race\n    for i in range(n):\n        # Check if the car that's moving left to right is ahead of the car that's moving right to left\n        if i!= 0 and i % 2 == 0:\n            # Check if the two cars collided\n            if i - 1 >= n:\n                # If they collided, increment the number of collisions\n                num_collisions += 1\n    \n    # Return the number of collisions\n    return num_collisions",
        "test": "assert car_race_collision(1) == 0, \"Incorrect output for the first test.\"",
        "num_ids": 4407,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "def incr_list(l):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x+1 for x in l]",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 2220,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    if len(l) < 2:\n        return False\n    pairs = set()\n    for num in l:\n        if -num in pairs:\n            return True\n        pairs.add(num)\n    return False",
        "test": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 3458,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 30,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 10:\n        return str(x)\n    elif base < 2:\n        raise ValueError(\"Base must be greater than or equal to 2\")\n    elif base > 36:\n        raise ValueError(\"Base must be less than or equal to 36\")\n    else:\n        result = \"\"\n        while x > 0:\n            remainder = x % base\n            result = str(remainder) + result\n            x //= base\n        return result",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 2402,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h",
        "test": "assert triangle_area(5, 3) == 7.5, \"Error: Test failed for triangle_area(5, 3)\"",
        "num_ids": 995,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)",
        "test": "assert fib4(0) == 0",
        "num_ids": 3778,
        "indeed": true
    },
    {
        "number": 47,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 210,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sorted_list = sorted(l)\n    if len(sorted_list) % 2 == 0:\n        return (sorted_list[len(sorted_list) // 2 - 1] + sorted_list[len(sorted_list) // 2]) / 2\n    else:\n        return sorted_list[len(sorted_list) // 2]",
        "test": "assert median([3, 1, 2, 4, 5]) == 3",
        "num_ids": 2082,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    # Convert text to lowercase and remove non-alphanumeric characters\n    text = ''.join(c for c in text.lower() if c.isalnum())\n\n    # Check if text is equal to its reverse\n    return text == text[::-1]\n",
        "test": "assert is_palindrome('zbcd') == False",
        "num_ids": 1721,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 40,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        n = -n\n    result = 1\n    for i in range(1, n + 1):\n        result = (result * 2) % p\n    return result",
        "test": "assert modp(0, 101) == 1, \"The function should return 1 for n=0 and p=101.\"",
        "num_ids": 2135,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 220,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    encoded = \"\"\n    for char in s:\n        encoded += chr(((ord(char) + 5 - ord(\"a\")) % 26) + ord(\"a\"))\n    return encoded\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    decoded = \"\"\n    for char in s:\n        decoded += chr(((ord(char) - ord(\"a\") + 5) % 26) + ord(\"a\"))\n    return decoded",
        "test": "assert decode_shift(encode_shift(\"hello world\")) == \"nlohwrl\"",
        "num_ids": 1920,
        "indeed": false
    },
    {
        "number": 51,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 1867,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(num < t for num in l)",
        "test": "assert below_threshold([1, 20, 4, 10], 5) == False",
        "num_ids": 1371,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y",
        "test": "assert add(2, 3) == 5",
        "num_ids": 735,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n\n    Args:\n        s0 (str): The first word.\n        s1 (str): The second word.\n\n    Returns:\n        bool: True if the words have the same characters, False otherwise.\n\n    Examples:\n        >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n        True\n        >>> same_chars('abcd', 'dddddddabc')\n        True\n        >>> same_chars('dddddddabc', 'abcd')\n        True\n        >>> same_chars('eabcd', 'dddddddabc')\n        False\n        >>> same_chars('abcd', 'dddddddabce')\n        False\n        >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n        False\n    \"\"\"\n    if len(s0)!= len(s1):\n        return False\n    \n    s0_set = set(s0)\n    s1_set = set(s1)\n    \n    return s0_set == s1_set",
        "test": "assert same_chars('eabcd', 'dddddddabc') == False",
        "num_ids": 2052,
        "indeed": false
    },
    {
        "number": 55,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)",
        "test": "assert fib(1) == 1",
        "num_ids": 1220,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "test": "assert correct_bracketing(\"<\") is False",
        "num_ids": 2819,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 21,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 0:\n        return True\n    \n    for i in range(1, len(l)):\n        if l[i]!= l[i-1]:\n            return True\n    \n    return False",
        "test": "assert monotonic([1, 2, 4, 20]) == True",
        "num_ids": 2192,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Convert both lists to sets to remove duplicates\n    l1_set = set(l1)\n    l2_set = set(l2)\n\n    # Find the intersection of the two sets\n    common_set = l1_set.intersection(l2_set)\n\n    # Convert the set back to a list and sort it\n    common_list = sorted(list(common_set))\n\n    return common_list",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 2651,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 220,
        "answer": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    if n <= 1:\n        return None\n\n    factors = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n\n    if n > 1 and n!= 1:\n        factors.append(n)\n\n    return max(factors)",
        "test": "assert largest_prime_factor(2048) == 2",
        "num_ids": 2158,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total",
        "test": "assert sum_to_n(30) == 465",
        "num_ids": 2077,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack or stack.pop()!= \"(\":\n                return False\n    return not stack",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 1910,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 220,
        "answer": "def derivative(xs):\n    \"\"\"xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    n = len(xs)\n    x = 1\n    dfdx = [0] * n\n    dfdx[0] = 1\n    for i in range(1, n):\n        dfdx[i] = xs[i] * dfdx[i-1]\n    return dfdx\n",
        "test": "assert derivative([1, 2, 3]) == [2, 6]",
        "num_ids": 2431,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 32,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n > 2:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
        "test": "assert fibfib(2) == 1",
        "num_ids": 3191,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 230,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 1982,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 220,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    # Check if shift is positive and less than or equal to the number of digits\n    if shift > len(str(x)) or shift <= 0:\n        return str(x)[::-1]\n    \n    # Shift the digits of x right by shift\n    shifted_x = str(x)[shift:] + str(x)[:shift]\n    \n    # Return the shifted string as a string\n    return shifted_x",
        "test": "assert circular_shift(12, 2) == \"12\"",
        "num_ids": 1886,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    # Initialize the sum to 0\n    sum = 0\n\n    # Iterate over each character in the string\n    for char in s:\n        # Convert the character to an integer\n        num = ord(char)\n\n        # Check if the character is an uppercase letter\n        if num >= ord('A') and num <= ord('Z'):\n            # Add the character's ASCII code to the sum\n            sum += num\n\n    # Return the sum\n    return sum",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 2124,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    \"\"\"\n    # Split the string into a list of words\n    words = s.split()\n    \n    # Initialize the count of mango fruits to zero\n    mango_count = 0\n    \n    # Loop through each word in the list\n    for word in words:\n        # If the word is \"mango\", increment the count of mango fruits by one\n        if word.lower() == \"mango\":\n            mango_count += 1\n    \n    # Return the count of mango fruits\n    return mango_count",
        "test": "assert fruit_distribution(\"100 apples and 1 oranges\", 120) == 19",
        "num_ids": 3670,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                        so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n    if not arr:\n        return []\n\n    even_values = set()\n    smallest_even = float('inf')\n    smallest_index = -1\n    for i, value in enumerate(arr):\n        if value % 2 == 0:\n            even_values.add(value)\n            if value < smallest_even:\n                smallest_even = value\n                smallest_index = i\n\n    if not even_values:\n        return []\n\n    if smallest_even == float('inf'):\n        return arr[smallest_index]\n\n    return [smallest_even, smallest_index]",
        "test": "assert pluck([]) == []",
        "num_ids": 4633,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    \n    # Initialize the greatest integer and its frequency as -1\n    greatest = -1\n    max_freq = 0\n    \n    # Iterate through the list and update the greatest and max_freq\n    for num in lst:\n        if num > 0:\n            freq = lst.count(num)\n            if freq >= max_freq and freq > greatest:\n                greatest = num\n                max_freq = freq\n    \n    return greatest",
        "test": "assert search([1, 1, 1, 1, 1]) == 1  # Test Case 4",
        "num_ids": 3172,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def strange_sort_list(lst):\n    if not lst:\n        return []\n\n    # Find the minimum value in the list\n    min_val = min(lst)\n\n    # Find the maximum value in the list\n    max_val = max(lst)\n\n    # Find the difference between the maximum and minimum values\n    diff = max_val - min_val\n\n    # Sort the list based on the difference\n    sorted_lst = sorted(lst, key=lambda x: x + diff)\n\n    return sorted_lst",
        "test": "assert strange_sort_list([]) == []",
        "num_ids": 3013,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return round(0.5 * a * b, 2)\n    else:\n        return -1",
        "test": "assert triangle_area(1, 2, 10) == -1, \"Triangle area is incorrect.\"",
        "num_ids": 2342,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def will_it_fly(q, w):\n    # Check if the list is a palindrome\n    if q == q[::-1]:\n        # Calculate the sum of the elements\n        sum_q = sum(q)\n\n        # Check if the sum is less than or equal to the maximum possible weight\n        if sum_q <= w:\n            return True\n    return False",
        "test": "assert will_it_fly([3, 2, 3], 1) == False",
        "num_ids": 2874,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    min_num = float('inf')\n\n    for i in range(n):\n        for j in range(i, n):\n            if arr[i] == arr[j] and arr[i]!= arr[i-1]!= arr[i+1]:\n                change = abs(i - j) + 1\n                if change < min_num:\n                    min_num = change\n\n    return min_num",
        "test": "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1",
        "num_ids": 3754,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    # Initialize the sum of chars in the two lists\n    sum_list1 = sum(len(x) for x in lst1)\n    sum_list2 = sum(len(x) for x in lst2)\n\n    # Check if the two lists have the same number of chars\n    if sum_list1 == sum_list2:\n        # If they have, return the first list\n        return lst1\n    # If the sum of chars in the two lists is less than the sum of chars in the other list, return the first list\n    elif sum_list1 < sum_list2:\n        return lst1\n    # If the sum of chars in the two lists is greater than the sum of chars in the other list, return the second list\n    else:\n        return lst2",
        "test": "assert total_match([], []) == []",
        "num_ids": 3615,
        "indeed": true
    },
    {
        "number": 75,
        "max_answer_num": 24,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    for i in range(2, int(a**0.5)+1):\n        if a % i == 0 and a % (i+2) == 0:\n            return True\n    return False",
        "test": "assert is_multiply_prime(25) == False",
        "num_ids": 3110,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 30,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Return True if x is a simple power of n, False otherwise.\"\"\"\n    # Convert n to an integer and check if it is a power of x\n    if n == 1:\n        return True\n    elif n == 2 or x == 1:\n        return True\n    elif n % x == 0:\n        # Check if n is a power of x by using the fact that n is a multiple of x\n        return True\n    else:\n        return False",
        "test": "assert is_simple_power(1, 4) == True",
        "num_ids": 1538,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n\n    if a < 0:\n        return False\n    \n    for i in range(1, a+1):\n        if a == i**3:\n            return True\n    \n    return False",
        "test": "assert iscube(1) == True, \"iscube(1) should return True\"",
        "num_ids": 2167,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    count = 0\n    for digit in num:\n        if digit.upper() in '2357BDCF':\n            count += 1\n        if count >= 2:\n            return count\n    return count",
        "test": "assert hex_key(\"1077E\") == 2, \"Test case 2 failed\"",
        "num_ids": 4325,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\n    # convert the decimal to binary\n    binary = bin(decimal)[2:]\n\n    # add the extra characters to the beginning and end of the string\n    binary = 'db' + binary + 'db'\n\n    return binary",
        "test": "assert decimal_to_binary(15) == \"db1111db\", \"Test 1\"",
        "num_ids": 2123,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_happy(s):\n    \"\"\"\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n\n    count = 0\n    prev_char = s[0]\n\n    for i in range(1, len(s)):\n        if s[i]!= prev_char:\n            count += 1\n            prev_char = s[i]\n        if count % 3!= 0:\n            return False\n\n    return True",
        "test": "assert is_happy(\"a\") is False",
        "num_ids": 2716,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n             4.0                A+\n             > 3.7                A \n             > 3.3                A- \n             > 3.0                B+\n             > 2.7                B \n             > 2.3                B-\n             > 2.0                C+\n             > 1.7                C\n             > 1.3                C-\n             > 1.0                D+ \n             > 0.7                D \n             > 0.0                D-\n             0.0                E\n    \"\"\"\n    letter_grades = ['E', 'D', 'C-', 'C', 'B-', 'B', 'A-', 'A', 'B+', 'C+', 'D+', 'E']\n    return [letter_grades[grade] for grade in grades]\n",
        "test": "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']",
        "num_ids": 5177,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    if len(string) < 2:\n        return False\n\n    if len(string) == 2:\n        return True\n\n    for i in range(2, int(len(string)**0.5)+1):\n        if len(string) % i == 0:\n            return False\n\n    return True\n",
        "test": "assert prime_length('orange') == False",
        "num_ids": 2094,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def starts_one_ends(n):\n    count = 0\n    for i in range(10):\n        if str(i) + str(n - i) == str(n):\n            count += 1\n    return count",
        "test": "assert starts_one_ends(0) == 0",
        "num_ids": 1667,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 31,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n                Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n            a string of binary number\n    \"\"\"\n\n    # Initialize the sum and the count of digits\n    total_sum = 0\n    count = 0\n\n    # Iterate until we have no more digits to sum\n    while N > 0:\n        # Add the last digit to the total_sum\n        total_sum += N % 10\n        # Remove the last digit from N\n        N //= 10\n        # Increment the count of digits\n        count += 1\n\n    # Convert the total_sum to binary and return it\n    return bin(total_sum)[2:]",
        "test": "assert solve(1) == \"1\"",
        "num_ids": 2686,
        "indeed": true
    },
    {
        "number": 85,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\n    # Create an empty list to store the even elements at odd indices\n    evens_at_odd_indices = []\n\n    # Loop through the list\n    for i in range(len(lst)):\n        # Check if the current element is even\n        if lst[i] % 2 == 0:\n            # Check if the current element is at an odd index\n            if i % 2 == 1:\n                # Add the even element to the evens_at_odd_indices list\n                evens_at_odd_indices.append(lst[i])\n\n    # Return the sum of the even elements at odd indices\n    return sum(evens_at_odd_indices)\n",
        "test": "assert add([4, 2, 6, 7]) == 2, \"The expected output is 2, but it is: {}\".format(add([4, 2, 6, 7]))",
        "num_ids": 1709,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n    words = s.split()\n    shuffled_words = []\n    for i in range(len(words)):\n        shuffled_words.append(words[i])\n    shuffled_words.sort(key=lambda x: ''.join(sorted(map(str, [ord(c) for c in x]))))\n    shuffled_sentence =''.join(shuffled_words)\n    return shuffled_sentence\n",
        "test": "assert anti_shuffle('') == ''",
        "num_ids": 3042,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    rows = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                rows.append((i, j))\n                break\n\n    rows.sort(key=lambda x: (x[0], -x[1]))\n\n    return rows",
        "test": "assert get_row([], 1) == []",
        "num_ids": 4056,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Check if the array is empty or has only one element\n    if len(array) <= 1:\n        return array\n\n    # Initialize variables for first and last index values\n    first_index = 0\n    last_index = len(array) - 1\n\n    # Calculate sum of first and last index values\n    sum_first_to_last = sum(array[first_index:last_index+1])\n\n    # Check if the sum is odd or even\n    if sum_first_to_last % 2 == 0:\n        # Sort the array in descending order\n        sorted_array = sorted(array[first_index:last_index+1][::-1], reverse=True)\n    else:\n        # Sort the array in ascending order\n        sorted_array = sorted(array[first_index:last_index+1])\n\n    # Return the sorted array\n    return sorted_array",
        "test": "assert sort_array([]) == []",
        "num_ids": 4995,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # Convert the string to a list of characters\n    s = list(s)\n\n    # Initialize the new list of characters with the same length as the original\n    encrypted_s = []\n\n    # Iterate through each character in the original string\n    for i in range(len(s)):\n\n        # Shift the current character one place to the right\n        shifted_char = chr((ord(s[i]) - 65 + 2 * i) % 26 + 65)\n\n        # Append the shifted character to the new list of characters\n        encrypted_s.append(shifted_char)\n\n    # Convert the new list of characters back to a string\n    encrypted_s = ''.join(encrypted_s)\n\n    return encrypted_s",
        "test": "assert encrypt('et') == 'ix'",
        "num_ids": 2835,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    if not lst:\n        return None\n\n    smallest = lst[0]\n    second_smallest = lst[1]\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest:\n            second_smallest = num\n\n    if second_smallest == smallest:\n        return None\n    else:\n        return second_smallest\n",
        "test": "assert next_smallest([]) is None",
        "num_ids": 2454,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    boredom_count = 0\n    words = S.split()\n    for word in words:\n        if word.lower() == \"i\":\n            boredom_count += 1\n    return boredom_count",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 1994,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n\n    # Check if all the numbers are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        return False\n\n    # Check if one of the numbers is equal to the sum of the other two\n    if x + y == z:\n        return True\n    else:\n        return False",
        "test": "assert any_int(3.6, -2.2, 2) == False, \"any_int(3.6, -2.2, 2) should return False\"",
        "num_ids": 3199,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \"\"\"\n\n    # list of vowels in english alphabet\n    vowels = ['a', 'e', 'i', 'o', 'u']\n\n    # iterate through each character in the message\n    for char in message:\n\n        # check if the character is a letter\n        if char.isalpha():\n\n            # get the vowel at the current position in the message\n            vowel = message[char.lower() - 'a']\n\n            # check if the vowel is a vowel in the english alphabet\n            if vowel in vowels:\n\n                # get the next vowel in the english alphabet\n                next_vowel = vowels[(vowels.index(vowel) + 1) % len(vowels)]\n\n                # replace the vowel with the next vowel in the english alphabet\n                message = message.replace(vowel, next_vowel)\n\n    # return the encoded message\n    return message",
        "test": "assert encode('This is a message') == 'tHKS KS C mgsscgg'",
        "num_ids": 3663,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef largest_prime(lst):\n    largest = float('-inf')\n    for num in lst:\n        if is_prime(num):\n            if num > largest:\n                largest = num\n    return largest\n\ndef sum_of_digits(num):\n    return sum(int(digit) for digit in str(num))\n\nlst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\nlargest = largest_prime(lst)\nprint(largest)\nprint(sum_of_digits(largest))\n\nlst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\nlargest = largest_prime(lst)\nprint(largest)\nprint(sum_of_digits(largest))\n\nlst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\nlargest = largest_prime(lst)\nprint(largest)\nprint(sum_of_digits(largest))\n\nlst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\nlargest = largest_prime(lst)\nprint(largest)\nprint(sum_of_digits(largest))\n\nlst = [0,81,12,3,1,21]\nlargest = largest_prime(lst)\nprint(largest)\nprint(sum_of_digits(largest))\n\nlst = [0,8,1,2,1,7]\nlargest = largest_prime(lst)\nprint(largest)\nprint(sum_of_digits(largest))",
        "test": "assert skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11",
        "num_ids": 6522,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\n    if not dict:\n        return False\n\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n\n        if key.islower():\n            if dict[key].lower()!= dict[key]:\n                return False\n        else:\n            if dict[key].upper()!= dict[key]:\n                return False\n\n    return True\n",
        "test": "assert check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) == False",
        "num_ids": 3075,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\"\"\"\n    primes = []\n    for num in range(2, n+1):\n        is_prime = True\n        for i in range(2, num):\n            if (num % i) == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes\n\n\nprint(count_up_to(5)) # [2, 3]\nprint(count_up_to(11)) # [2, 3, 5, 7]\nprint(count_up_to(0)) # []\nprint(count_up_to(20)) # [2, 3, 5, 7, 11, 13, 17, 19]\nprint(count_up_to(1)) # []\nprint(count_up_to(18)) # [2, 3, 5, 7, 11, 13, 17]",
        "test": "assert count_up_to(0) == [], \"Function should return []\"",
        "num_ids": 4105,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def multiply(a, b):\n    \"\"\"\n    This function takes two integers a and b, and returns the product of their unit digits.\n    \"\"\"\n    product = 0\n    while b > 0:\n        if b % 10 == 0:\n            product += a\n        a *= 10\n        b //= 10\n    return product",
        "test": "assert multiply(2020, 1851) == 0",
        "num_ids": 2862,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] == 'a' or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u':\n            count += 1\n\n    return count\n",
        "test": "assert count_upper('dBBE') == 0",
        "num_ids": 1560,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 27,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    # Convert value to float\n    float_value = float(value)\n\n    # Check if value is zero\n    if float_value == 0:\n        return 0\n\n    # Check if value is even\n    if float_value % 2 == 0:\n        return int(float_value)\n\n    # Check if value is odd\n    return int(float_value + 0.5)",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 3997,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 320,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    result = []\n    for i in range(n):\n        num = 1\n        if i % 2 == 0:\n            num = 2\n        result.append(num)\n    return result",
        "test": "assert make_a_pile(9) == [9, 9, 7]",
        "num_ids": 3374,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 250,
        "answer": "def words_string(s):\n    \"\"\"\n    Given a string of words separated by commas or spaces, split the string into words\n    and return an array of the words.\n\n    Example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n\n    # split the string into words using commas or spaces as the separator\n    words = s.split(',') if ',' in s else s.split()\n\n    # convert the list of words to a list of strings\n    words_list = [word.strip() for word in words]\n\n    return words_list",
        "test": "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
        "num_ids": 1989,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 240,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Initialize the variable to store the greatest even integer number\n    max_num = 0\n    # Loop through all integers from x to y\n    for num in range(x, y + 1):\n        # Check if the number is even and greater than or equal to max_num\n        if num % 2 == 0 and num >= max_num:\n            # Update max_num if the new number is greater than max_num\n            max_num = num\n    # Return the max_num if it exists, otherwise return -1\n    return max_num if max_num!= 0 else -1",
        "test": "assert choose_num(13, 12) == -1, \"The function should return -1 for x = 13 and y = 12\"",
        "num_ids": 2339,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    rounded_n = round(n)\n    rounded_m = round(m)\n    total_sum = rounded_n + rounded_m\n    total_count = rounded_n + rounded_m + 1\n    average = total_sum / total_count\n    binary_average = bin(average)[2:]\n    return binary_average",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 2857,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 210,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = []\n    for num in x:\n        if num % 2!= 0:\n            digits.append(num)\n    return sorted(set(digits))",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
        "num_ids": 2618,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    # Check if the array is empty or contains any strange number\n    if len(arr) == 0 or any(x < 1 or x > 9 for x in arr):\n        return []\n\n    # Sort the integers between 1 and 9 inclusive\n    arr.sort(reverse=True)\n\n    # Reverse the resulting array\n    arr.reverse()\n\n    # Replace each digit by its corresponding name\n    result = []\n    for i, digit in enumerate(arr):\n        if 1 <= digit <= 9:\n            result.append(\"One\" if digit == 1 else \"Two\" if digit == 2 else \"Three\" if digit == 3 else \"Four\" if digit == 4 else \"Five\" if digit == 5 else \"Six\" if digit == 6 else \"Seven\" if digit == 7 else \"Eight\" if digit == 8 else \"Nine\")\n        else:\n            continue\n\n    return result",
        "test": "assert by_length([]) == []",
        "num_ids": 5470,
        "indeed": false
    },
    {
        "number": 106,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    # Create an empty list to store the factorials\n    factorials = []\n    \n    # Iterate over the range from 1 to n\n    for i in range(1, n+1):\n        # Check if i is even or if i is the last element of the range\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            factorials.append(factorial)\n        else:\n            factorial = sum(range(1, i+1))\n            factorials.append(factorial)\n    \n    return factorials",
        "test": "assert f(5) == [1, 2, 6, 24, 15], \"Test failed for f(5).\"",
        "num_ids": 2939,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 17,
        "max_test_num": 1,
        "total_product": 240,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)\n",
        "test": "assert even_odd_palindrome(3) == (1, 2)",
        "num_ids": 2982,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    num = 0\n    has_zero = False\n    has_negative = False\n\n    for num in arr:\n        if num < 0:\n            has_negative = True\n            num = abs(num)\n        elif num == 0:\n            has_zero = True\n        else:\n            has_negative = False\n\n    if has_zero:\n        return 0\n    elif has_negative:\n        return 1\n    else:\n        return len(arr)",
        "test": "assert count_nums([]) == 0, \"Expected: count_nums([]) == 0\"",
        "num_ids": 2670,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "import random\n\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n   \n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performing 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation: It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n    \n    # Shifting the first element of the array by 1 position to get the next\n    # element.\n    arr[0] = arr[0] >> 1\n    \n    # Performing the right shift operations for all other elements.\n    for i in range(1, len(arr)):\n        arr[i] = arr[i] >> 1\n        \n        # If the shifting operation does not result in non-decreasing order,\n        # then the array is not sorted.\n        if arr[i] > arr[i - 1]:\n            return False\n    \n    return True",
        "test": "assert move_one_ball([]) == True, \"Expected True\"",
        "num_ids": 4527,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 26,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Sort the lists\n    lst1.sort()\n    lst2.sort()\n    \n    # Check if lst1 and lst2 have the same length\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n    \n    # Check if lst1 and lst2 have the same elements\n    if lst1!= lst2:\n        return \"NO\"\n    \n    # Traverse the lists from right to left and swap elements if they are even\n    for i in range(len(lst1) - 1, -1, -1):\n        if lst1[i] % 2 == 1 and lst2[i] % 2 == 0:\n            lst1[i], lst2[i] = lst2[i], lst1[i]\n        elif lst1[i] % 2 == 0 and lst2[i] % 2 == 1:\n            lst1[i], lst2[i] = lst1[i], lst2[i]\n        elif lst1[i] % 2 == 1 and lst2[i] % 2 == 1:\n            lst1[i] += lst2[i]\n    \n    # Check if lst1 is a list of only even numbers\n    if all(x % 2 == 0 for x in lst1):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert exchange([1], [1, 2, 3, 4]) == \"NO\", \"Test 4\"",
        "num_ids": 4833,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 30,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    freq = {}\n    words = test.split()\n    for word in words:\n        if word.isalpha():\n            letter = word[0]\n            freq[letter] = freq.get(letter, 0) + 1\n    \n    # Find all the letters that have the same count\n    most_common = {}\n    for letter, count in freq.items():\n        if count > 1:\n            most_common[letter] = count\n    \n    return most_common",
        "test": "assert histogram('') == {}",
        "num_ids": 3521,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 30,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # convert c to a set to remove duplicates\n    c_set = set(c)\n    # loop through s and delete any characters equal to any character in c\n    s = ''.join([char for char in s if char not in c_set])\n    # check if the result string is palindrome\n    s_rev = s[::-1]\n    if s_rev == s:\n        return (s, True)\n    else:\n        return (s, False)",
        "test": "assert reverse_delete(\"abcdef\", \"b\") == ('acdef', False)",
        "num_ids": 2962,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 220,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    Args:\n        lst (list): A list of strings.\n\n    Returns:\n        list: A list of strings, where each element represents the output.\n    \"\"\"\n    count = 0\n    output = []\n    for i in lst:\n        if len(i) > 0:\n            odd_count = sum(int(x) for x in i if x.isdigit())\n            if odd_count % 2!= 0:\n                count += 1\n                output.append(f\"the number of odd elements in the {i} of the input.\")\n    output.append(f\"the number of odd elements in the total input is {count}.\")\n    return output",
        "test": "assert odd_count(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]",
        "num_ids": 3853,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 220,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    n = len(nums)\n    if n == 0:\n        return 0\n\n    # Initialize a variable to store the minimum sum\n    min_sum = float('inf')\n\n    # Loop through the array\n    for i in range(n):\n        # Calculate the sum of the current sub-array\n        sub_sum = sum(nums[i:])\n\n        # Check if the sum is greater than the current minimum sum\n        if sub_sum < min_sum:\n            min_sum = sub_sum\n\n    return min_sum",
        "test": "assert minSubArraySum([-1, -2, -3]) == -6",
        "num_ids": 2174,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def max_fill(grid, bucket_capacity):\n    import math\n    \n    # calculate the total number of units in the grid\n    total_units = sum(sum(row) for row in grid)\n\n    # calculate the maximum number of units in a bucket\n    max_bucket_units = math.ceil(total_units / bucket_capacity)\n\n    # calculate the number of times you need to lower the buckets\n    num_lowers = math.ceil(max_bucket_units / 2)\n\n    return num_lowers",
        "test": "assert max_fill([[0,0,0], [0,0,0]], 5) == 0",
        "num_ids": 4426,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 30,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    ones_count = 0\n    for num in arr:\n        ones_count += bin(num)[2:].count('1')\n    arr.sort(key=lambda x: (-ones_count, x))\n    return arr",
        "test": "assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]",
        "num_ids": 3508,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def select_words(s, n):\n    \"\"\"\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Remove all non-letter characters from the string\n    s = ''.join(c for c in s if c.isalpha())\n    \n    # Split the string into words\n    words = s.split()\n    \n    # Initialize an empty list to store the selected words\n    selected_words = []\n    \n    # Iterate over the words and check if they contain exactly n consonants\n    for word in words:\n        if len(word) >= n:\n            consonants = sum(1 for c in word if c.isalpha())\n            if consonants == n:\n                selected_words.append(word)\n    \n    return selected_words",
        "test": "assert select_words(\"simple white space\", 2) == []",
        "num_ids": 3883,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def get_closest_vowel(word):\n    \"\"\"\n    Returns the closest vowel that stands between two consonants in the right side\n    of the given word. Case-insensitive. Returns an empty string if no vowel is found.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    left_consonant_index = 0\n    right_consonant_index = len(word) - 1\n\n    while left_consonant_index < right_consonant_index:\n        left_char = word[left_consonant_index]\n        right_char = word[right_consonant_index]\n\n        if left_char in vowels and right_char.lower() in vowels:\n            return right_char.lower()\n\n        if left_char.lower() in vowels and right_char in vowels:\n            return left_char.lower()\n\n        if left_char.islower() and right_char.islower():\n            left_consonant_index += 1\n            right_consonant_index -= 1\n\n        if left_char.isupper() and right_char.isupper():\n            left_consonant_index += 1\n            right_consonant_index -= 1\n\n    return ''",
        "test": "assert get_closest_vowel(\"quick\") == \"\"",
        "num_ids": 3373,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "def match_parens(lst):\n    # Initialize variables to store the length of each opening parenthesis\n    opening_parenthesis = 0\n    # Iterate through the list of strings\n    for string in lst:\n        # Check if the string is empty\n        if string == '':\n            # Check if the current string is balanced\n            if opening_parenthesis == 0:\n                return 'No'\n            else:\n                # Update the length of each opening parenthesis\n                opening_parenthesis -= 1\n        # Check if the string is an opening parenthesis\n        elif string[0] == '(':\n            # Increment the length of each opening parenthesis\n            opening_parenthesis += 1\n        # Check if the string is a closing parenthesis\n        elif string[-1] == ')':\n            # Decrement the length of each opening parenthesis\n            opening_parenthesis -= 1\n    # Check if there's a way to make a good string\n    if opening_parenthesis == 0:\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert match_parens([')', '(', ')']) == 'No', 'The function should return \"No\" if there is no way to make a good string'",
        "num_ids": 2366,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[:k]",
        "test": "assert maximum([-3, -4, 5], 3) == [-4, -3, 5]",
        "num_ids": 3311,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def solution(lst):\n    \"\"\"\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 0\n    \"\"\"\n    even_sum = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum",
        "test": "assert solution([]) == 0",
        "num_ids": 2014,
        "indeed": false
    },
    {
        "number": 122,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 250,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Initialize the sum and count variables\n    sum = 0\n    count = 0\n\n    # Iterate through the first k elements of the array\n    for i in range(k):\n        # If the element has at most two digits, add it to the sum\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n            count += 1\n\n    return sum",
        "test": "assert add_elements([1, 2, 3, 4, 5], 5) == 15",
        "num_ids": 3233,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    # Initialize the list to store the odd numbers in collatz sequence\n    odd_numbers = []\n\n    # Base case: if n is 1, then the sequence is [1]\n    if n == 1:\n        odd_numbers.append(1)\n        return odd_numbers\n\n    # If n is odd, check if it is divisible by 2\n    if n % 2 == 1:\n        # If it is, add 1 to the sequence and then recursively call get_odd_collatz() with the new n\n        odd_numbers.append(1)\n        odd_numbers = get_odd_collatz(n - 1)\n        odd_numbers.append(1)\n        return odd_numbers\n\n    # If n is even, check if it is divisible by 2\n    if n % 2 == 0:\n        # If it is, add 2 to the sequence and then recursively call get_odd_collatz() with the new n\n        odd_numbers.append(2)\n        odd_numbers = get_odd_collatz(n // 2)\n        odd_numbers.append(2)\n        return odd_numbers\n\n    # If n is greater than 1, it must be divisible by 3 or 5\n    # If it is divisible by 3, add 3 to the sequence and then recursively call get_odd_collatz() with the new n\n    if n % 3 == 0:\n        odd_numbers.append(3)\n        odd_numbers = get_odd_collatz(n // 3)\n        odd_numbers.append(3)\n        return odd_numbers\n\n    # If it is divisible by 5, add 5 to the sequence and then recursively call get_odd_collatz() with the new n\n    if n % 5 == 0:\n        odd_numbers.append(5)\n        odd_numbers = get_odd_collatz(n // 5)\n        odd_numbers.append(5)\n        return odd_numbers\n\n    # If n is greater than 1, it must be divisible by 3 or 5\n    # If n is divisible by 3, add 3 to the sequence and then recursively call get_odd_collatz() with the new n\n    if n % 3 == 0:\n        odd_numbers.append(3)\n        odd_numbers = get_odd_collatz(n // 3)\n        odd_numbers.append(3)\n        return odd_numbers\n\n    # If n is greater than 1, it must be divisible by 5\n    # If n is divisible by 5, add 5 to the sequence and then recursively call get_odd_collatz() with the new n\n    if n % 5 == 0:\n        odd_numbers.append(5)\n        odd_numbers = get_odd_collatz(n // 5)\n        odd_numbers.append(5)\n        return odd_numbers\n\n    # If n is greater than 1, it must be divisible by 7\n    # If n is divisible by 7, add 7 to the sequence and then recursively call get_odd_collatz() with the new n\n    if n % 7 == 0:\n        odd_numbers.append(7)\n        odd_numbers = get_odd_collatz(n // 7)\n        odd_numbers.append(7)\n        return odd_numbers\n\n    # If n is greater than 1, it must be divisible by 11\n    # If n is divisible by 11, add 11 to the sequence and then recursively call get_",
        "test": "assert get_odd_collatz(1) == [1]  # The collatz sequence for 1 is [1], so the odd numbers are only 1.",
        "num_ids": 5163,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def valid_date(date):\n    \"\"\"\n    Validate a given date string and return True if it is valid.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n    \"\"\"\n    if not date:\n        return False\n    \n    try:\n        date_parts = date.split(\"-\")\n        month = int(date_parts[0])\n        day = int(date_parts[1])\n        year = int(date_parts[2])\n        \n        if month < 1 or month > 12:\n            return False\n        \n        if day < 1 or day > 31:\n            return False\n        \n        days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        \n        if month in [4, 6, 9, 11]:\n            days_in_month[1] = 29\n        \n        if month in [2]:\n            days_in_month[2] = 28\n            \n        if day < 1 or day > days_in_month[month-1]:\n            return False\n        \n        return True\n        \n    except ValueError:\n        return False",
        "test": "assert valid_date('04-0-2040') == False",
        "num_ids": 6431,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 300,
        "answer": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    words = txt.split()\n    if len(words) > 1:\n        return words\n    else:\n        count = 0\n        for i in range(ord('a'), ord('z') + 1):\n            if i % 2 == 0:\n                if count < len(words):\n                    words.append(str(i))\n                    count += 1\n                elif count > len(words):\n                    break\n    return words",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 3356,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    if len(lst) <= 1:\n        return True\n    \n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    \n    return True",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 3240,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n    \"\"\"\n    # Check if the two intervals intersect\n    if (interval1[1] <= interval2[0] and interval2[1] <= interval1[0]):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert intersection((-1, 1), (0, 4)) == \"NO\", \"No intersection\"",
        "num_ids": 3983,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    \n    if not arr:\n        return None\n    \n    total_mag = 0\n    prod_signs = 1\n    \n    for num in arr:\n        if num > 0:\n            prod_signs *= 1\n        elif num < 0:\n            prod_signs *= -1\n        else:\n            prod_signs *= 0\n            \n        total_mag += abs(num)\n        \n    return total_mag * prod_signs",
        "test": "assert prod_signs([]) is None, \"prod_signs([]) should return None\"",
        "num_ids": 2544,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    rows, cols = len(grid), len(grid[0])\n    dp = [[0] * cols for _ in range(rows)]\n    result = []\n\n    def dfs(x, y):\n        nonlocal result\n        if x < 0 or x >= rows or y < 0 or y >= cols or grid[x][y] == 0:\n            return\n        if x == rows - 1 and y == cols - 1:\n            result.append(grid[x][y])\n            return\n        dp[x][y] = 1\n        dfs(x - 1, y)\n        dfs(x, y - 1)\n        dfs(x + 1, y)\n        dfs(x, y + 1)\n\n    dfs(0, 0)\n    return result\n",
        "test": "assert minPath([ [5,9,3], [4,1,6], [7,8,2]], 1) == [1]",
        "num_ids": 6487,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 280,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    # Initializing variables\n    a, b, c = 0, 1, 1\n    # Generating first n + 1 numbers of the sequence\n    sequence = [a]\n    for i in range(2, n + 1):\n        d = a + b + c\n        sequence.append(d)\n        a, b, c = b, c, d\n    return sequence",
        "test": "assert tri(3) == [1, 3, 2, 8], \"tri(3) should return [1, 3, 2, 8]\"",
        "num_ids": 3204,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 23,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # Initialize the product to 1\n    product = 1\n    \n    # Loop through each digit of n\n    for digit in str(n):\n        # Convert the digit to an integer and multiply it by the corresponding odd digit\n        product *= int(digit)\n    \n    # Check if all digits are even and return the product\n    if all(int(digit) % 2 == 1 for digit in str(product)):\n        return product\n    else:\n        return 0",
        "test": "assert digits(1) == 1",
        "num_ids": 1749,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_nested(string):\n    opening_brackets = set(['[', '{'])\n    closing_brackets = set([']', '}'])\n    stack = []\n    for char in string:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack:\n                return False\n            elif stack.pop()!= char:\n                return False\n    return len(stack) == 0",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False",
        "num_ids": 1830,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 30,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n\n    result = 0\n    for num in lst:\n        result += num ** 2\n    result = round(result, 0)\n    return result",
        "test": "assert sum_squares([1,2,3]) == 14",
        "num_ids": 2534,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n\n    # Check if the string is empty\n    if not txt:\n        return False\n\n    # Get the last character of the string\n    last_char = txt[-1]\n\n    # Check if the last character is an alphabetical character\n    if not last_char.isalpha():\n        return False\n\n    # Check if the last character is not a part of a word\n    if last_char.isalpha() and last_char not in txt.split():\n        return False\n\n    return True",
        "test": "assert check_if_last_char_is_a_letter(\"apple pi e \") == False",
        "num_ids": 3377,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] >= arr[i+1]:\n            return i\n    return -1",
        "test": "assert can_arrange([1, 2, 3]) == -1",
        "num_ids": 2182,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # initialize variables\n    a = None\n    b = None\n\n    # iterate through the list and find the largest and smallest integers\n    for num in lst:\n        if num < 0:\n            if a is None or num > a:\n                a = num\n        elif num > 0:\n            if b is None or num < b:\n                b = num\n\n    # return the results\n    return (a, b)",
        "test": "assert largest_smallest_integers([]) == (None, None)",
        "num_ids": 2871,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 30,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, str) and isinstance(b, str):\n        if a > b:\n            return a\n        else:\n            return b\n    else:\n        return None",
        "test": "assert compare_one(1, 2.5) == 2.5",
        "num_ids": 3405,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n\n    # Initialize variables\n    count = 0\n    sum = 0\n\n    # Iterate through all numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if i is even and positive\n        if i % 2 == 0 and i > 0 and i % 2 == 0:\n            # Add i to sum\n            sum += i\n\n            # Increment count\n            count += 1\n\n            # Check if count is equal to 4\n            if count == 4:\n                return True\n\n    # If count is still 0, n cannot be written as the sum of exactly 4 positive even numbers\n    return False",
        "test": "assert is_equal_to_sum_even(4) == False, \"is_equal_to_sum_even(4) == False\"",
        "num_ids": 2362,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result",
        "test": "assert special_factorial(0) == 1",
        "num_ids": 3007,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 30,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    \n    # Initialize a new string variable to store the fixed text\n    fixed_text = \"\"\n    \n    # Loop through each character in the original text\n    for char in text:\n        # If the character is a space, add an underscore to the fixed text\n        if char == \" \":\n            fixed_text += \"_\"\n        # If the character is not a space, add it to the fixed text as is\n        else:\n            fixed_text += char\n    \n    # If the original text has more than 2 consecutive spaces, replace them with -\n    if len(fixed_text) > 2 and fixed_text[-2] == \" \":\n        fixed_text = fixed_text[:-2] + \"-\"\n    \n    return fixed_text",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 2584,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Check if there are more than three digits in the file name\n    count = 0\n    for char in file_name:\n        if char.isdigit():\n            count += 1\n            if count > 3:\n                return 'No'\n    # Check if the file name contains exactly one dot '.'\n    if file_name.count('.')!= 1:\n        return 'No'\n    # Check if the substring before the dot is empty, and if it starts with a letter from the latin alphapet\n    if not file_name.startswith(file_name.split('.')[0]) or not file_name.split('.')[0].isalpha():\n        return 'No'\n    # Check if the substring after the dot is one of these: ['txt', 'exe', 'dll']\n    if file_name.split('.')[-1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'",
        "test": "assert file_name_check(\"1example.dll\") == 'No', \"file_name_check('1example.dll') should return 'No'\"",
        "num_ids": 4445,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Iterate through each element in the list\n    for i in range(len(lst)):\n        # If the current element is a multiple of 3 and not a multiple of 4, square it\n        if i % 3 == 0 and i % 4!= 0:\n            lst[i] **= 2\n        # If the current element is a multiple of 4 and not a multiple of 3, cube it\n        elif i % 4 == 0 and i % 3!= 0:\n            lst[i] **= 3\n\n    # Iterate through each element in the list again and add it to the sum variable\n    for i in range(len(lst)):\n        sum += lst[i]\n\n    # Return the sum of all entries\n    return sum",
        "test": "assert sum_squares([]) == 0",
        "num_ids": 3021,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 260,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    prime_words.sort()\n    return''.join(prime_words)",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\"",
        "num_ids": 2626,
        "indeed": false
    },
    {
        "number": 144,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "def simplify(x, n):\n    \"\"\"\n    Simplifies the expression x * n.\n    Returns True if x * n evaluates to a whole number and False otherwise.\n    Both x and n are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n    \"\"\"\n    # Split the numerator and denominator into separate strings\n    numerator, denominator = x.split('/', 1)\n    numerator, denominator = numerator.strip(), denominator.strip()\n\n    # Check if the denominator is zero\n    if denominator == '':\n        return False\n\n    # Convert the denominator to an integer\n    denominator = int(denominator)\n\n    # Simplify the fraction by multiplying it by the numerator and dividing it by the denominator\n    simplified_numerator = int(numerator) * denominator\n    simplified_fraction = simplified_numerator / denominator\n\n    # Convert the simplified fraction to a string\n    simplified_fraction = str(simplified_fraction)\n\n    # Check if the simplified fraction evaluates to a whole number\n    if simplified_fraction.isdigit():\n        return True\n    else:\n        return False",
        "test": "assert simplify(\"1/6\", \"2/1\") == False",
        "num_ids": 3377,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # Convert list to a set to remove duplicates\n    nums = list(set(nums))\n\n    # Sort the list based on the sum of their digits\n    nums.sort(key=lambda x: sum(map(int, str(x))), reverse=True)\n\n    return nums",
        "test": "assert order_by_points([]) == [], \"order_by_points([]) == []\"",
        "num_ids": 3261,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if (num > 10) and (str(num)[0] in '13579') and (str(num)[-1] in '13579'):\n            count += 1\n    return count",
        "test": "assert specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0, \"The function should return 0 for the given input\"",
        "num_ids": 2572,
        "indeed": true
    },
    {
        "number": 147,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n    For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n            a = [1, 3, 7, 13, 21]\n            The only valid triple is (1, 7, 13).\n    \"\"\"\n\n    max_count = 0\n    count = 0\n    triple_count = 0\n\n    for i in range(n):\n        if i < n - 1 and i % 3!= 0:\n            count += 1\n            triple_count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 0\n            triple_count = 0\n\n    return max_count",
        "test": "assert get_max_triples(1) == 0, \"Expected 0, got {}\".format(get_max_triples(1))",
        "num_ids": 3166,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 300,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closer to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\n    # Check if planet1 and planet2 are correct planet names\n    if planet1 not in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n        return []\n\n    # Check if planet2 is a planet between planet1 and planet3\n    if planet2 not in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n        return []\n\n    # Find the orbit of planet1 between planet2 and the Sun\n    orb1_sun = []\n    while planet2 not in orb1_sun:\n        orb1_sun.append(planet2)\n        planet2 = orb1_sun[-1]\n        orb1 = find_orbit(planet2, \"Sun\")\n        orb1_sun.extend(orb1)\n\n    # Find the orbit of planet2 between planet1 and the Sun\n    orb2_sun = []\n    while planet1 not in orb2_sun:\n        orb2_sun.append(planet1)\n        planet1 = orb2_sun[-1]\n        orb2 = find_orbit(planet1, \"Sun\")\n        orb2_sun.extend(orb2)\n\n    # Return the planets between orb1 and orb2\n    return list(set(orb1_sun).intersection(orb2_sun))\n\ndef find_orbit(planet, target):\n    '''\n    Find the orbit of a planet between the target planet and the Sun.\n    The function takes a planet name as a string and returns a list of\n    the orbits of the planet between the target and the Sun.\n    Examples\n    find_orbit(\"Jupiter\", \"Sun\") ==> [\"Mars\", \"Saturn\"]\n    find_orbit(\"Earth\", \"Sun\") ==> [\"Venus\"]\n    find_orbit(\"Mercury\", \"Sun\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n    '''\n    orb = []\n    while planet!= target:\n        orb.append(planet)\n        planet = orb[-1]\n    orb.append(target)\n    return orb",
        "test": "assert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")",
        "num_ids": 10334,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 230,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # Remove odd length strings\n    lst = [s for s in lst if len(s) % 2 == 0]\n\n    # Sort list by length, and then alphabetically if lengths are equal\n    lst.sort(key=lambda x: (len(x), x))\n\n    return lst",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 3037,
        "indeed": true
    },
    {
        "number": 150,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y",
        "test": "assert x_or_y(15, 8, 5) == 5, \"x_or_y(15, 8, 5) should return 5\"",
        "num_ids": 2011,
        "indeed": true
    },
    {
        "number": 151,
        "max_answer_num": 39,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def double_the_difference(lst):\n    if not lst:\n        return 0\n\n    sum_of_squares = 0\n    for num in lst:\n        if not isinstance(num, int) or num < 0:\n            continue\n        square = num ** 2\n        if square % 2 == 1:\n            sum_of_squares += square\n\n    return sum_of_squares",
        "test": "assert double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 == 10",
        "num_ids": 2777,
        "indeed": true
    },
    {
        "number": 152,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 220,
        "answer": "def compare(game, guess):\n    \"\"\"\n    This function takes in two arrays, game and guess, where game[i] and guess[i] represent the score and guess for the i-th match, respectively.\n    It returns a new array containing the same length as the input arrays, with each element representing how far off the guess was from the game score.\n    If the guesses are correctly matched, the value at the corresponding index is 0, and if they are not, the value is the absolute difference between the guess and the game score.\n    \"\"\"\n    diff = [abs(game[i]-guess[i]) for i in range(len(game))]\n    return diff",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 4211,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n\n    # Create a dictionary to keep track of the strength of each extension\n    extension_strength = {}\n\n    # Iterate through the extensions and update the strength dictionary\n    for extension in extensions:\n        extension_name = extension.replace(\"'\", \"\")\n        uppercase_extension = extension_name.isupper()\n        lowercase_extension = extension_name.islower()\n        if uppercase_extension:\n            extension_strength[extension_name] = -1\n        elif lowercase_extension:\n            extension_strength[extension_name] = 0\n        else:\n            extension_strength[extension_name] = -2\n\n    # Find the strongest extension based on the strength dictionary\n    max_strength = max(extension_strength.values())\n    max_extension = None\n    for extension, strength in extension_strength.items():\n        if strength == max_strength:\n            max_extension = extension\n            break\n\n    # Find the strongest extension and return the string\n    if max_extension:\n        return f\"{class_name}.{max_extension}\"\n    else:\n        return None",
        "test": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'",
        "num_ids": 5456,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 29,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"\n    Check if the second word or any of its rotations is a substring in the first word.\n    \"\"\"\n    def rotate(word):\n        \"\"\"Rotate the word 3 times to check for rotations\"\"\"\n        return word[3:] + word[:3]\n\n    def substring_search(word, pattern):\n        \"\"\"Search for a pattern in a word, and return True if found\"\"\"\n        if pattern in word:\n            return True\n        elif pattern in word[::-1]:\n            return True\n        elif pattern in word[1:]:\n            return True\n        else:\n            return False\n\n    if substring_search(a, b):\n        return True\n    elif substring_search(rotate(a), b):\n        return True\n    else:\n        return False",
        "test": "assert cycpattern_check(\"abcd\", \"abd\") == False",
        "num_ids": 2845,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 240,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Args:\n        num (int): an integer to count the digits of\n\n    Returns:\n        tuple: a tuple containing the number of even and odd digits\n    \"\"\"\n    even = 0\n    odd = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)",
        "test": "assert even_odd_count(12) == (1, 1)",
        "num_ids": 1948,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 300,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    # Define a dictionary to store the Roman numeral values\n    roman_map = {\n        1000:'m',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'xi',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    # Initialize the output string\n    output = ''\n\n    # Iterate through the Roman numeral values from 1 to the input number\n    while number > 0:\n        # Find the largest multiple of the number that is smaller than or equal to the input number\n        multiple = max(1, number // roman_map[number])\n\n        # Add the roman numeral equivalent of the multiple to the output string\n        output += roman_map[multiple]\n\n        # Remove the largest multiple from the input number\n        number -= multiple\n\n    # Return the output string in lowercase\n    return output.lower()",
        "test": "assert int_to_mini_roman(426) == 'cdxxvi'",
        "num_ids": 4486,
        "indeed": false
    },
    {
        "number": 157,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 220,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\n    # Check if the length of any of the sides is zero\n    if a == 0 or b == 0 or c == 0:\n        return False\n\n    # Check if the sum of any of the sides is greater than the length of the \n    # other two sides\n    if a + b > c and a + c > b and b + c > a:\n        return True\n\n    # If none of the conditions are satisfied, the triangle is not a right-angled\n    return False",
        "test": "assert right_angle_triangle(1, 2, 3) == False",
        "num_ids": 2622,
        "indeed": false
    },
    {
        "number": 158,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n\n    max_word = \"\"\n    max_count = 0\n\n    for word in words:\n        word_count = len(word)\n        if word_count > max_count:\n            max_word = word\n            max_count = word_count\n\n    return max_word",
        "test": "assert find_max([]) == \"\"",
        "num_ids": 2541,
        "indeed": false
    },
    {
        "number": 159,
        "max_answer_num": 30,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if need > remaining:\n        return [remaining, 0]\n    else:\n        return [number + need, remaining - need]",
        "test": "assert eat(1, 10, 10) == [11, 0]",
        "num_ids": 4438,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = 0\n    i = 0\n    j = 0\n    while i < len(operator) and j < len(operand):\n        if operator[i] == '+':\n            result += operand[j]\n            j += 1\n        elif operator[i] == '-':\n            result -= operand[j]\n            j += 1\n        elif operator[i] == '*':\n            result *= operand[j]\n            j += 1\n        elif operator[i] == '//':\n            result //= operand[j]\n            j += 1\n        elif operator[i] == '**':\n            result **= operand[j]\n            j += 1\n        i += 1\n    return result",
        "test": "assert do_algebra(['+', '*'], [2, 3, 4]) == 6, \"The do_algebra function did not correctly evaluate the expression.\"",
        "num_ids": 4920,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    if not s:  # If the string is empty, reverse it\n        return s[::-1]\n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                result += s[i].upper()\n            else:\n                result += s[i].lower()\n        else:\n            result += s[i]\n    return result",
        "test": "assert solve(\"ab\") == \"AB\"",
        "num_ids": 2076,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 210,
        "answer": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()\n",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62', \"The function should return the md5 hash for the given string.\"",
        "num_ids": 2018,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    result = []\n    for i in range(a, b+1, 2):\n        result.append(i)\n    return result",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 2455,
        "indeed": false
    }
]