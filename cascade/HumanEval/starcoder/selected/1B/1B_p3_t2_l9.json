[
    {
        "number": 0,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"Check if in given list of numbers, are any two numbers closer to each other than given threshold.\"\"\"\n    # Sort the list of numbers in ascending order\n    sorted_numbers = sorted(numbers)\n\n    # Loop through all the numbers except the first one\n    for i in range(1, len(sorted_numbers)):\n        # Check if the difference between the two numbers is less than or equal to threshold\n        if abs(sorted_numbers[i] - sorted_numbers[i-1]) <= threshold:\n            return True\n\n    # If no two numbers are closer than the given threshold, return False\n    return False",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
        "num_ids": 867,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    # Split the string into individual characters\n    char_list = list(paren_string)\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Initialize a flag variable to keep track of whether we are currently inside a group\n    inside_group = False\n    \n    # Loop through each character in the string\n    for i in range(len(char_list)):\n        # If we encounter an open brace, start a new group\n        if char_list[i] == '(':\n            inside_group = True\n        # If we encounter a closing brace, end the current group and add the result to the list\n        elif char_list[i] == ')':\n            if not inside_group:\n                raise ValueError(\"Unbalanced parentheses detected\")\n            inside_group = False\n            result.append(''.join(char_list[i+1:i+2]))\n            i += 1\n    \n    # Return the list of separated groups\n    return result",
        "test": "assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']",
        "num_ids": 913,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part, decimals = divmod(number, 1)\n    return decimals",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 478,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \n    Args:\n        operations (List[int]): A list of deposit and withdrawal operations on a bank account that\n            starts with zero balance.\n    \n    Returns:\n        bool: True if at any point the balance of account falls below zero, False otherwise.\n    \"\"\"\n    \n    total_balance = 0\n    for operation in operations:\n        if operation > 0:\n            total_balance += operation\n        elif operation < 0:\n            return True\n    return total_balance == 0",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 632,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # Calculate the mean of the input numbers\n    mean = sum(numbers) / len(numbers)\n    # Calculate the centerpoint\n    centerpoint = mean\n    \n    # Calculate the MAD for each element\n    mad_list = []\n    for number in numbers:\n        mad = abs(number - centerpoint)\n        mad_list.append(mad)\n    \n    # Calculate the mean of the MADs\n    mad_mean = sum(mad_list) / len(mad_list)\n    \n    return mad_mean",
        "test": "assert mean_absolute_deviation([1.0, 1.0, 1.0, 1.0]) == 0.0",
        "num_ids": 708,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i > 0 and numbers[i] == numbers[i-1]:\n            # Delimeter already inserted, skip to next element\n            continue\n        result.append(numbers[i])\n        if i < len(numbers)-1 and numbers[i] == numbers[i+1]:\n            # Delimeter already inserted, skip to next element\n            continue\n        result.append(delimeter)\n    return result",
        "test": "assert intersperse([], 4) == []",
        "num_ids": 649,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    :param paren_string: the string to be parsed\n    :return: a list containing the deepest level of nesting of parentheses in the input string\n    \"\"\"\n    result = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return result\n            result.append(len(stack))\n            stack.pop()\n    return result",
        "test": "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
        "num_ids": 924,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 478,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n\n    # initialize sum and product variables\n    sum_ = 0\n    product_ = 1\n\n    # iterate through the list of integers and add them to the sum and product variables\n    for num in numbers:\n        sum_ += num\n        product_ *= num\n\n    # return the sum and product\n    return (sum_, product_)",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 632,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_elements = []\n    rolling_max_elements = []\n    \n    for i, num in enumerate(numbers):\n        if i == 0:\n            rolling_max_elements.append(num)\n            max_elements.append(num)\n        else:\n            rolling_max_elements.append(max(num, rolling_max_elements[-1]))\n            max_elements.append(rolling_max_elements[-1])\n    \n    return max_elements",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
        "num_ids": 703,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    longest_palindrome = ''\n    for i in range(len(string)):\n        # Check if the current character is a palindrome\n        if is_palindrome(string[i:i+1]):\n            # If it is, check if it is longer than the current longest palindrome\n            if len(string[i:i+1]) > len(longest_palindrome):\n                # If it is longer, update longest palindrome\n                longest_palindrome = string[i:i+1]\n    return longest_palindrome",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 904,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # initialize variables to store xor results\n    result = ''\n    \n    # iterate through each character of the strings\n    for i in range(len(a)):\n        # convert each character to an integer and then XOR them\n        xor_result = int(a[i]) ^ int(b[i])\n        # convert the XOR result back to a string\n        result += str(xor_result)\n    \n    return result",
        "test": "assert string_xor('010', '110') == '100' # True",
        "num_ids": 625,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\n    if not strings:\n        return None\n\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n\n    return longest_string",
        "test": "assert longest(['a', 'b', 'c']) == 'a'",
        "num_ids": 478,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a",
        "test": "assert greatest_common_divisor(3, 5) == 1, \"The function should return 1 for a and b = 3 and 5\"",
        "num_ids": 480,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefix = string[:i+1]\n        prefixes.append(prefix)\n    return prefixes",
        "test": "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
        "num_ids": 389,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    sequence = []\n    for i in range(n + 1):\n        sequence.append(str(i))\n    return''.join(sequence)",
        "test": "assert string_sequence(0) == '0'",
        "num_ids": 386,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert the string to lowercase\n    string = string.lower()\n\n    # Initialize an empty dictionary to keep track of the frequency of characters\n    char_freq = {}\n\n    # Iterate through the string and update the frequency of each character in the dictionary\n    for char in string:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    # Return the number of distinct characters in the string\n    return len(char_freq)",
        "test": "assert count_distinct_characters('Jerry') == 4",
        "num_ids": 490,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    notes = []\n    count = 0\n    is_middle = False\n\n    for char in music_string:\n        if char =='':\n            if count > 0:\n                notes.append(count)\n            count = 0\n        elif char == 'o':\n            if is_middle:\n                notes.append(count)\n            count += 4\n        elif char == '|':\n            is_middle = not is_middle\n        elif char == '.':\n            count += 2\n        else:\n            raise ValueError(f\"Invalid note: {char}\")\n\n    if count > 0:\n        notes.append(count)\n\n    return notes",
        "test": "assert parse_music('o o|.| o| o|.|.|.|.| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
        "num_ids": 850,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    :param string: The original string.\n    :param substring: The substring to find.\n    :return: The count of the occurrences of the substring in the original string.\n    \"\"\"\n\n    count = 0\n    left = 0\n    while True:\n        found = string.find(substring, left)\n        if found == -1:\n            break\n        count += 1\n        left = found + 1\n\n    return count",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 542,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Input: a string of numbers from 'zero' to 'nine'\n    Return: the string with numbers sorted from smallest to largest\n    \"\"\"\n    # Split the input string into individual numbers\n    numbers = [int(num) for num in numbers.split()]\n    \n    # Sort the numbers in ascending order\n    numbers.sort(reverse=True)\n    \n    # Join the sorted numbers back into a string with spaces\n    return''.join(map(str, numbers))",
        "test": "assert sort_numbers('zero two four') == 'four two zero'",
        "num_ids": 577,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Sort the list of numbers in ascending order\n    numbers.sort()\n    # Initialize two variables to store the smallest and largest elements of the list\n    smallest = numbers[0]\n    largest = numbers[0]\n    # Loop through the list of numbers and compare each element to the smallest and largest elements\n    for num in numbers[1:]:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n    # Return the two closest elements as a tuple\n    return smallest, largest",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)",
        "num_ids": 1226,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least two elements\")\n    min_value = min(numbers)\n    max_value = max(numbers)\n    rescaled_numbers = [(value - min_value) / (max_value - min_value) for value in numbers]\n    return rescaled_numbers",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 873,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    filtered_values = [value for value in values if isinstance(value, int)]\n    return filtered_values\n",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 484,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\nprint(strlen(''))  # Output: 0\nprint(strlen('abc'))  # Output: 3",
        "test": "assert strlen('') == 0",
        "num_ids": 214,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    if n == 1:\n        return 1\n    \n    largest = 1\n    smallest = 1\n\n    while smallest * smallest <= n:\n        if n % smallest == 0:\n            largest = smallest\n        smallest += 1\n\n    return largest",
        "test": "assert largest_divisor(15) == 5, \"Test failed: largest_divisor(15) should return 5, but instead returned {}\".format(largest_divisor(15))",
        "num_ids": 354,
        "indeed": false
    },
    {
        "number": 25,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "test": "assert factorize(8) == [2, 2, 2], \"Factorize(8) should return [2, 2, 2]\"",
        "num_ids": 699,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    # Create a set to store unique elements\n    unique_numbers = set(numbers)\n\n    # Convert set to list and sort it\n    unique_numbers_list = sorted(unique_numbers)\n\n    return unique_numbers_list",
        "test": "assert remove_duplicates([1, 1, 2, 2, 3, 3]) == [1, 2, 3]",
        "num_ids": 589,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.lower().upper()",
        "test": "assert flip_case('Hello') == 'hELLO'",
        "num_ids": 278,
        "indeed": false
    },
    {
        "number": 28,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n\n    # Convert the list of strings to a single string separated by space\n    result =''.join(strings)\n\n    return result",
        "test": "assert concatenate([]) == ''",
        "num_ids": 282,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    result = []\n    for s in strings:\n        if s.startswith(prefix):\n            result.append(s)\n    return result",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 427,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return list(filter(lambda x: x > 0, l))",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 681,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert is_prime(101), \"The function is_prime(101) should return True\"",
        "num_ids": 527,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x**2 +... xs[n] * x**n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    n = len(xs)\n    if n % 2 == 0 or not xs[n-1] > 0:\n        raise ValueError(\"xs must have even number of coefficients and largest non-zero coefficient.\")\n    \n    xs = xs[1:-1]\n    x = xs[n-1]\n    m = len(xs) // 2\n    A = [poly([0] * m, x) for i in range(m)]\n    B = [poly([0] * m, -x) for i in range(m)]\n    C = [poly([0] * m, math.pow(x, i)) for i in range(m)]\n    \n    for i in range(m):\n        for j in range(m):\n            if i!= j:\n                A[i] = A[i] + B[j] * C[i]\n                B[i] = B[i] + A[j] * C[j]\n                C[i] = C[i] + A[j] * B[j]\n    \n    for i in range(m):\n        if C[i] == 0:\n            return -x / (2 * m)\n    \n    return None  # no zero point found\n",
        "test": "assert round(find_zero([-6, 11, -6, 1]), 2) == 1.0",
        "num_ids": 1356,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n\n    # Loop through the list\n    for i in range(len(l)):\n        # If the value at the current index is not divisible by 3, skip it\n        if l[i] % 3!= 0:\n            continue\n\n        # Find the index of the third occurrence of the value at the current index\n        third_occurrence = i\n        while third_occurrence + 2 < len(l) and l[third_occurrence + 2] % 3 == 0:\n            third_occurrence += 2\n\n        # If the value at the current index is equal to the third occurrence of the value at the current index, skip it\n        if l[i] == l[third_occurrence]:\n            continue\n\n        # If the value at the current index is not equal to the third occurrence of the value at the current index, swap it\n        l[i], l[third_occurrence] = l[third_occurrence], l[i]\n\n    # Return the sorted list\n    return sorted(l)",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 1156,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    unique_set = set(l)\n    return sorted(unique_set)",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123], \"The code is not returning the expected result.\"",
        "num_ids": 446,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_element(l: list) -> int:\n    \"\"\"Return maximum element in the list.\n\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 457,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    if n < 0:\n        return \"Invalid input\"\n    elif n < 10:\n        return n\n    elif n % 11 == 0 or n % 11 == 13:\n        return n // 11 * 11\n    elif n % 11 == 7:\n        return n // 11 * 11 + 1\n    else:\n        return \"No fizzbuzz in this number\"\n",
        "test": "assert fizz_buzz(78) == 2",
        "num_ids": 568,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i, len(l)):\n            if l[i] % 2 == 0 and l[j] % 2 == 0:\n                if l[i] > l[j]:\n                    l[i], l[j] = l[j], l[i]\n    return l",
        "test": "assert sort_even([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 826,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    decoded = \"\"\n    for i in range(len(s)):\n        # cyclically shift the character to the left by one position\n        shifted = s[(i + 1) % len(s)]\n        # check if the shifted character matches the original character.\n        if shifted == s[i]:\n            decoded += s[i]\n        else:\n            # if the shifted character does not match the original character, we need to add the original character to the decoded string.\n            decoded += s[i]\n    return decoded",
        "test": "assert decode_cyclic(encode_cyclic(\"world\")) == \"orlawn\"",
        "num_ids": 875,
        "indeed": false
    },
    {
        "number": 39,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    # Initialize variables\n    a, b = 0, 1\n    # Check if n is prime\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n % 2 == 0:\n        # If n is even, check if the next number is prime\n        if is_prime(n + 1):\n            return n + 1\n        else:\n            return n\n    else:\n        # If n is odd, check if the previous number is prime\n        if is_prime(n - 1):\n            return n - 1\n        else:\n            # Otherwise, check if the next and previous numbers are both prime\n            if is_prime(n + 1) and is_prime(n - 1):\n                return n + 1 - n\n            else:\n                return n\n\ndef is_prime(n: int):\n    \"\"\"\n    is_prime function checks if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert prime_fib(1) == 2",
        "num_ids": 764,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    Triples_sum_to_zero takes a list of integers as an input.\n    It returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    Args:\n        l: list of integers\n\n    Returns:\n        bool: True if there are three distinct elements in the list that\n                sum to zero, and False otherwise.\n    \"\"\"\n    if len(set(l)) < 3:\n        return False\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False, \"The function should return False if there are three distinct elements in the list that sum to zero.\"",
        "num_ids": 871,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    collisions = 0\n    for i in range(n):\n        for j in range(n-i-1):\n            if i+j < n-1 and i+j < n:\n                if (i+j) % 2 == 0:\n                    collisions += 1\n    return collisions",
        "test": "assert car_race_collision(1) == 0, \"The function should return 0 when there is only one collision.\"",
        "num_ids": 917,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 666,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    # Create a dictionary to store the sum of elements\n    # and their indices\n    sum_dict = {}\n    \n    # Iterate through the list\n    for i in range(len(l)):\n        # Check if the current element has a positive sum\n        if l[i] > 0:\n            # If it does, get its index and increment its count\n            if l[i] in sum_dict:\n                sum_dict[l[i]] += 1\n            else:\n                # If it doesn't, add it to the dictionary with count 1\n                sum_dict[l[i]] = 1\n                \n            # Check if there are any negative sums left\n            if sum(sum_dict.values()) < 0:\n                return True\n                \n    # If no negative sums are left, there are no two distinct elements\n    # that sum to zero in the list\n    return False",
        "test": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 1016,
        "indeed": false
    },
    {
        "number": 44,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"Base must be between 2 and 36\")\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 542,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    area = 0.5 * a * h\n    return area",
        "test": "assert triangle_area(5, 3) == 7.5, \"Incorrect triangle_area function implementation.\"",
        "num_ids": 235,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)",
        "test": "assert fib4(0) == 0",
        "num_ids": 728,
        "indeed": true
    },
    {
        "number": 47,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 0:\n        return (sorted_l[n // 2 - 1] + sorted_l[n // 2]) / 2\n    else:\n        return sorted_l[n // 2]\n",
        "test": "assert median([3, 1, 2, 4, 5]) == 3",
        "num_ids": 676,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n\n    # Convert the string to lowercase and remove spaces\n    text = text.lower().replace(' ', '')\n\n    # Reverse the string and compare with the original\n    return text == text[::-1]",
        "test": "assert is_palindrome('') is True",
        "num_ids": 438,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef modp(n, p):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n < 0:\n        return -modp(-n, p)\n    else:\n        # Assuming n is odd\n        x = pow(2, n - 1, p)\n        y = pow(x, n - 1, p)\n        return (y + n * x) % p",
        "test": "assert modp(3, 5) == 3",
        "num_ids": 556,
        "indeed": false
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n    encoded_string = s\n    decoded_string = \"\"\n\n    for i in range(len(encoded_string)):\n        if encoded_string[i] == \"a\":\n            decoded_string += chr(((ord(encoded_string[i]) + 5 - ord(\"a\")) % 26) + ord(\"a\"))\n        else:\n            decoded_string += encoded_string[i]\n\n    return decoded_string\n",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hehe\"",
        "num_ids": 566,
        "indeed": false
    },
    {
        "number": 51,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiou'\n    return ''.join(char for char in text if char not in vowels)",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 473,
        "indeed": false
    },
    {
        "number": 52,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(num < t for num in l)",
        "test": "assert below_threshold([1, 20, 4, 10], 5) == False",
        "num_ids": 432,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    Args:\n        x (int): The first number\n        y (int): The second number\n    Returns:\n        int: The sum of x and y\n    \"\"\"\n    return x + y",
        "test": "assert add(2, 3) == 5",
        "num_ids": 264,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n\n    # convert both strings to lists to perform string manipulation\n    s0_list = list(s0)\n    s1_list = list(s1)\n\n    # check if the length of the two strings is the same\n    if len(s0_list)!= len(s1_list):\n        return False\n\n    # sort both lists in ascending order\n    s0_list.sort()\n    s1_list.sort()\n\n    # compare the two sorted lists\n    for i in range(len(s0_list)):\n        if s0_list[i]!= s1_list[i]:\n            return False\n\n    return True",
        "test": "assert same_chars('abcd', 'dddddddabc') == True",
        "num_ids": 545,
        "indeed": false
    },
    {
        "number": 55,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "test": "assert fib(10) == 55, \"The 10th Fibonacci number should be 55.\"",
        "num_ids": 331,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = set([\"<\", \">\"])\n    closing_brackets = set([\"<\", \">\"])\n    for bracket in brackets:\n        if bracket in opening_brackets:\n            opening_brackets.remove(bracket)\n        elif bracket in closing_brackets:\n            closing_brackets.remove(bracket)\n    return len(opening_brackets) == 0\n",
        "test": "assert correct_bracketing(\"<>\") == True",
        "num_ids": 538,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l[0] == l[-1]:\n        return True\n    else:\n        return all(x < l[-1] for x in l[1:-1])\n",
        "test": "assert monotonic([1, 20, 4, 10]) == False",
        "num_ids": 545,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\n\n    Args:\n        l1 (list): The first list of elements.\n        l2 (list): The second list of elements.\n\n    Returns:\n        list: Sorted unique common elements for the two input lists.\n\n    \"\"\"\n\n    # Convert the lists to sets to remove duplicates\n    set1 = set(l1)\n    set2 = set(l2)\n\n    # Get the common elements between the two sets\n    common_set = set1.intersection(set2)\n\n    # Convert the set back to a list and sort it\n    common_list = sorted(list(common_set))\n\n    return common_list",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 871,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    if n <= 1:\n        return \"n is less than or equal to 1\"\n    if n == 2:\n        return 2\n\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n            while n % i == 0:\n                n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        return n\n\n    return \"n is not a prime\"\n",
        "test": "assert largest_prime_factor(13195) == 29",
        "num_ids": 747,
        "indeed": false
    },
    {
        "number": 60,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total",
        "test": "assert sum_to_n(30) == 465",
        "num_ids": 496,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\"\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    if len(brackets) % 2!= 0:\n        return False\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack or stack[-1]!= \"(\":\n                return False\n            stack.pop()\n    return not stack\n",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 664,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "",
        "test": "assert derivative([1, 2, 3]) == [2, 6]",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib_list = [0, 0, 1]\n        for i in range(3, n + 1):\n            fib_list.append(fib_list[i - 1] + fib_list[i - 2] + fib_list[i - 3])\n        return fib_list[n]\n",
        "test": "assert fibfib(1) == 0",
        "num_ids": 601,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    # Remove the punctuation from the string\n    s = ''.join(e for e in s if e.isalnum())\n    # Initialize the count variable to 0\n    count = 0\n    # Loop through each character in the string\n    for char in s:\n        # If the character is a vowel, increment the count\n        if char in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    # If the count is 0, return -1 to indicate that the word is not a palindrome\n    return count if count > 0 else -1",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 685,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n        reversed_digits = ''.join([digits[-1]] + list(digits[:-1]))\n        return reversed_digits\n    else:\n        shifted_digits = digits[shift:] + digits[:shift]\n        return shifted_digits",
        "test": "assert circular_shift(12, 2) == \"12\"",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 509,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # split the string into an array of strings\n    arr = s.split()\n    \n    # initialize an empty list to store mango fruits\n    mango_fruits = []\n    \n    # iterate through the array of strings and count the number of mango fruits\n    for i in range(len(arr)):\n        if arr[i] == \"mango\":\n            mango_fruits.append(i+1)\n    \n    # return the number of mango fruits in the basket\n    return len(mango_fruits)",
        "test": "assert fruit_distribution(\"0 apples and 1 oranges\", 3) == 2",
        "num_ids": 1129,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                       so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n\n    even_indices = []\n    even_values = []\n    for i, value in enumerate(arr):\n        if value % 2 == 0:\n            even_indices.append(i)\n            even_values.append(value)\n\n    if not even_values:\n        return []\n\n    smallest_even = min(even_values)\n    smallest_even_index = even_indices[even_values.index(smallest_even)]\n\n    return [smallest_even, smallest_even_index]",
        "test": "assert pluck([4, 2, 3]) == [2, 1]",
        "num_ids": 1495,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    max_val = 0\n    max_freq = 0\n    for num in lst:\n        if num > 0 and num >= max_val:\n            max_val = num\n            max_freq = 1\n        elif num > 0 and num >= max_val and num <= max_val:\n            max_freq += 1\n    if max_freq >= max_val:\n        return -1\n    else:\n        return max_val",
        "test": "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3, \"search([1, 2, 2, 3, 3, 3, 4, 4, 4]) should return 3\"",
        "num_ids": 982,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst:\n        lst.sort(reverse=True)\n    return lst",
        "test": "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]",
        "num_ids": 726,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def triangle_area(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n\n    # Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the area of the triangle\n        s = (a + b + c) / 2\n        area = round(s * (s - a) * (s - b) * (s - c), 2)\n        return area\n    else:\n        return -1",
        "test": "assert triangle_area(1, 2, 10) == -1, \"Test failed\"",
        "num_ids": 750,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n\n    # Check if the object q is a palindromic list\n    if all(q[i] == q[i+1] for i in range(len(q)-1)):\n        # Check if the sum of its elements is less than or equal the maximum possible weight\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False",
        "test": "assert will_it_fly([3, 2, 3], 1) == False",
        "num_ids": 939,
        "indeed": false
    },
    {
        "number": 73,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array\n    that is read the same backwards and forwards. In one change, you can change one element\n    to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    change = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            change += min(arr[i], arr[j]) - arr[i]\n            if change == 0:\n                return j-i\n    return n",
        "test": "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1",
        "num_ids": 1038,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def total_match(lst1, lst2):\n    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        min_len = min(len(lst1), len(lst2))\n        min_list = lst1[:min_len]\n        max_list = lst2[:min_len]\n        return total_match(max_list, min_list) + [lst1[min_len:]] + [lst2[min_len:]]",
        "test": "assert total_match([], []) == []",
        "num_ids": 905,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    # Initialize variables\n    is_prime = True\n    temp = a\n\n    # Check if a is divisible by 3\n    if a % 3 == 0:\n        is_prime = False\n\n    # Check if a is divisible by 2\n    while temp % 2 == 0:\n        temp //= 2\n\n    # Check if a is divisible by 5\n    if temp % 5 == 0:\n        is_prime = False\n\n    # If a is not divisible by 3, 5, or 2, it is not a prime number\n    return not is_prime",
        "test": "assert is_multiply_prime(23) == False",
        "num_ids": 573,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_simple_power(x, n):\n    \"\"\"\n    This function takes two arguments: x and n.\n    It returns True if x is a simple power of n and False otherwise.\n    \n    The function first checks if n is a positive integer. If it is not,\n    then n**int will be the same as x and we return True immediately.\n    \n    If n is a positive integer, we use a loop to check if n is a simple power\n    of x. We start by checking if n is a power of 2. If it is, we return True.\n    \n    If n is not a power of 2, we need to check if n is a power of x-1. If it is,\n    then n**int will be equal to x and we return True.\n    \n    If none of the above conditions are met, then n**int will be equal to x and\n    we return False.\n    \"\"\"\n    # check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n    \n    # check if n is a power of 2\n    if n & (n-1) == 0:\n        return True\n    \n    # check if n is a power of x-1\n    return n**int(x-1) == x",
        "test": "assert is_simple_power(1, 4) == True, \"is_simple_power(1, 4) should return True.\"",
        "num_ids": 664,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n    if a == 1:\n        return True\n    elif a < 0:\n        return False\n    else:\n        cube = a ** 3\n        return cube == a",
        "test": "assert iscube(2) == False, \"Function iscube(2) should return False\"",
        "num_ids": 447,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_prime(num):\n    \"\"\"Returns True if the given number is prime, else False\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    hex_num = \"\"\n    for digit in num:\n        if digit.isalpha():\n            hex_num += digit\n    num_hex = int(hex_num, 16)\n    count = 0\n    for digit in hex_num:\n        if is_prime(int(digit, 16)):\n            count += 1\n    return count",
        "test": "assert hex_key(\"AB\") == 1",
        "num_ids": 1162,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"\n    This function takes in a decimal number and returns its binary representation in the form of a string.\n    Each character in the string represents a binary number.\n    \n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    \n    # initialize an empty string to store the binary representation\n    binary_str = \"\"\n    \n    # iterate over each digit in the decimal number and add them to the binary_str\n    while decimal > 0:\n        binary_str = str(decimal % 2) + binary_str\n        decimal = decimal // 2\n        \n    # add the extra 'db' characters at the beginning and at the end of the string\n    binary_str = 'db' + binary_str\n    \n    return binary_str",
        "test": "assert decimal_to_binary(32) == \"db100000db\", \"The function should return the binary string 'db100000db' for the given decimal value of 32.\"",
        "num_ids": 638,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n\n    # Initialize variables\n    count = 0\n    prev_char = None\n    prev_length = 0\n    curr_length = 1\n\n    # Iterate through the string\n    for char in s:\n        # Update the count and previous characters\n        count += 1\n        prev_char = char\n        prev_length = curr_length\n\n        # Update the current character length\n        curr_length = 1\n        for i in range(curr_length):\n            if char == prev_char:\n                curr_length += 1\n            else:\n                break\n\n        # If the length is less than 3 or there are less than 3 consecutive distinct characters, return False\n        if curr_length < 3 or count < 3:\n            return False\n\n    # If the length is greater than 3, return True\n    return prev_length > 3\n",
        "test": "assert is_happy('a') == False",
        "num_ids": 993,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \"\"\"\n    \n    letter_grades = []\n    \n    for grade in grades:\n        if 4.0 <= grade <= 4.9:\n            letter_grades.append('A+')\n        elif 3.7 <= grade <= 3.79:\n            letter_grades.append('A')\n        elif 3.3 <= grade <= 3.39:\n            letter_grades.append('A-')\n        elif 3.0 <= grade <= 3.09:\n            letter_grades.append('B+')\n        elif 2.7 <= grade <= 2.79:\n            letter_grades.append('B')\n        elif 2.3 <= grade <= 2.39:\n            letter_grades.append('B-')\n        elif 2.0 <= grade <= 2.09:\n            letter_grades.append('C+')\n        elif 1.7 <= grade <= 1.79:\n            letter_grades.append('C')\n        elif 1.3 <= grade <= 1.39:\n            letter_grades.append('C-')\n        elif 1.0 <= grade <= 1.09:\n            letter_grades.append('D+')\n        elif 0.7 <= grade <= 0.79:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    \n    return letter_grades\n",
        "test": "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']",
        "num_ids": 1697,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def prime_length(string):\n    \"\"\"\n    Write a function that takes a string and returns True if the string length\n    is a prime number or False otherwise.\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # Check if the length of the string is 0 or 1\n    if len(string) == 0 or len(string) == 1:\n        return False\n    \n    # Initialize a variable to keep track of whether the length is prime or not\n    is_prime = True\n    \n    # Iterate over all possible multiples of the string length\n    for i in range(2, int(string) + 1):\n        # Check if the string length is divisible by i\n        if len(string) % i == 0:\n            # If it is, set is_prime to False and break out of the loop\n            is_prime = False\n            break\n    \n    # If the length of the string is not a prime number, return False\n    return is_prime",
        "test": "assert prime_length('abcdcba') == True",
        "num_ids": 612,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i == 0 or i == n - 1:\n            # if i is either 0 or n-1, it must start or end with 1\n            count += 1\n    return count",
        "test": "assert starts_one_ends(0) == 0, \"The function should return 0 for an input of 0\"",
        "num_ids": 405,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n                Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n        a string of binary number\n    \"\"\"\n    total = 0\n    while N!= 0:\n        total += N % 10\n        N //= 10\n    return str(total)",
        "test": "assert solve(1000) == '1'",
        "num_ids": 632,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \n    \"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0)",
        "test": "assert add([4, 2, 6, 7]) == 2",
        "num_ids": 333,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n\n    words = s.split()\n    result = \"\"\n    for i in range(len(words)):\n        if i == len(words) - 1 or i > 0:\n            result += words[i] + \" \"\n        else:\n            result += words[i] + \" \"\n\n    return result[:-1]\n",
        "test": "assert anti_shuffle('Hi') == 'Hi'",
        "num_ids": 755,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    row_cols = []\n    for row in lst:\n        for col in row:\n            row_cols.append((len(lst)-1, len(row)-1))\n\n    row_cols = sorted(row_cols, key=lambda x: x[0])\n\n    result = []\n    for row in range(len(lst)):\n        for col in range(len(lst[row])):\n            if lst[row][col] == x:\n                result.append((row, col))\n\n    return result",
        "test": "assert get_row([",
        "num_ids": 1174,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    array.sort(reverse=True)\n    return array",
        "test": "assert sort_array([]) == []",
        "num_ids": 983,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n\n    # Create a list of all possible rotations of the alphabet\n    rotations = ['', 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p']\n\n    # Create an empty string to store the encrypted text\n    encrypted = ''\n\n    # Loop through each character in the original string\n    for char in s:\n        # Get the rotation value for the current character\n        rotation = rotations.index(char)\n\n        # Shift the rotation value to the left by one place\n        rotation = (rotation + 1) % 5\n\n        # Add the shifted rotation value to the beginning of the encrypted string\n        encrypted += rotations[rotation]\n\n    return encrypted",
        "test": "assert encrypt('asdfghjkl') == 'ewhjklnop', \"Error: encrypt('asdfghjkl') should return 'ewhjklnop'\"",
        "num_ids": 867,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of a list if there is one, otherwise returns None.\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    return lst[1]",
        "test": "assert next_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 432,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \"\"\"\n    \n    # Initialize variables\n    num_boredoms = 0\n    bored_sentence = \"\"\n    \n    # Loop through each sentence in the string\n    for sentence in S.split(\".?!\"):\n        # Check if the sentence starts with \"I\"\n        if sentence.startswith(\"I\"):\n            # Add the sentence to the list of bored sentences\n            bored_sentence = sentence\n            # Increment the counter of boredoms\n            num_boredoms += 1\n    \n    return num_boredoms",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 538,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    \n    # Check if the sum of the two numbers is equal to the product of the two numbers.\n    if (x + y == z) and (x.is_integer() and y.is_integer() and z.is_integer()):\n        return True\n    \n    # If the sum is not equal to the product, return False.\n    else:\n        return False",
        "test": "assert any_int(3, 2, 2) == False",
        "num_ids": 749,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    encoded = ''\n    for letter in message:\n        if letter.lower() in vowels:\n            encoded += letter + vowels[vowels.index(letter.lower()) + 2]\n        else:\n            encoded += letter.upper()\n    return encoded",
        "test": "assert encode('This is a message') == 'tHKS KS C MGSSCGG'",
        "num_ids": 1013,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def is_prime(n):\n    \"\"\"\n    Check if a number is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef largest_prime_sum(lst):\n    \"\"\"\n    Find the largest prime value in the list and return its sum of its digits.\n    \"\"\"\n    max_prime = 0\n    for num in lst:\n        if is_prime(num):\n            max_prime = num\n            break\n    return sum(int(digit) for digit in str(max_prime))\n",
        "test": "assert skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25, \"skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) should return 25\"",
        "num_ids": 993,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n\n    all_keys_lower = all(key.lower() in dict.keys() for key in dict.keys())\n    all_keys_upper = all(key.upper() in dict.keys() for key in dict.keys())\n\n    return all_keys_lower or all_keys_upper",
        "test": "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
        "num_ids": 888,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    prime_list = [True] * (n + 1)  # create a boolean list of size n+1\n    prime_list[0] = prime_list[1] = False  # set first two numbers to false\n\n    # iterate over remaining numbers\n    for i in range(2, int(n**0.5) + 1):\n        if prime_list[i]:  # if number is prime\n            for j in range(i*i, n+1, i):\n                prime_list[j] = False  # mark multiples of current number as not prime\n\n    # create an array of prime numbers and filter out those less than n\n    prime_list = [i for i in range(2, n+1) if prime_list[i]]\n\n    # return array of prime numbers\n    return prime_list\n",
        "test": "assert count_up_to(11) == [2, 3, 5, 7]",
        "num_ids": 970,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def multiply(a, b):\n    \"\"\"\n    This function takes two integers a and b and returns their product of their unit digits.\n    The function assumes that the input is always valid.\n    \"\"\"\n\n    # Check if a and b are valid integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        return \"Error: Both inputs must be integers.\"\n\n    # Get the maximum number of digits in a and b\n    max_digits = max(len(str(a)), len(str(b)))\n\n    # Convert a and b to lists of digits\n    a_list = list(map(int, str(a)))\n    b_list = list(map(int, str(b)))\n\n    # Multiply a_list and b_list and get the result\n    result = list(map(lambda x: x * y, a_list, b_list))\n\n    # Convert the result to a string and return it\n    return \"\".join(map(str, result))",
        "test": "assert multiply(19, 28) == 72, \"multiply(19, 28) should return 72.\"",
        "num_ids": 613,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] == s[i:i+2].upper():\n            count += 1\n    return count",
        "test": "assert count_upper('abcdefg') == 0",
        "num_ids": 421,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    # Convert value to float and round to nearest integer\n    value = round(float(value))\n\n    # If value is 0, return 0\n    if value == 0:\n        return 0\n\n    # Check if value is within range of two integers\n    min_value = min(int(value), 10**5)\n    max_value = max(int(value), 10**5)\n\n    # If value is equidistant from two integers, return one of them\n    if min_value == max_value:\n        return min_value\n\n    # If value is within range of two integers and is equidistant from two integers,\n    # return one of them\n    if min_value - 1 == max_value - 1:\n        return min_value\n\n    # If value is within range of two integers and is not equidistant from two integers,\n    # return the one that is the farthest from zero\n    if min_value == max_value - 1:\n        return max_value + 1\n\n    # If value is not within range of two integers, return the value itself\n    return value",
        "test": "assert closest_integer(\"15.3\") == 15, \"Failed: closest_integer('15.3') should return 15\"",
        "num_ids": 1036,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        pile = [n]\n        for i in range(2, n+1, 2):\n            pile.append(pile[-1] + i)\n        return pile",
        "test": "assert make_a_pile(3) == [3, 5, 7], \"The function is not correct. The output is not [3, 5, 7] for n=3.\"",
        "num_ids": 908,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Convert the string to a list of words using the split method\n    words = s.split(',')\n    # Return the list of words as an array\n    return words",
        "test": "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
        "num_ids": 506,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    result = -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            if i > result:\n                result = i\n    return result",
        "test": "assert choose_num(13, 12) == -1, \"The function should return -1\"",
        "num_ids": 715,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rounded_avg(n, m):\n    \"\"\"\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return \"{:b}\".format(n + m)",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 743,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    digits = list(map(int, str(x)))\n    unique_digits = sorted(set(digits), key=lambda x: x)\n    return unique_digits\n",
        "test": "assert unique_digits([152, 323, 1422, 10]) == []",
        "num_ids": 684,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n    If the array is empty, return an empty array:\n      arr = []\n      return []\n\n    If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # If the array is empty, return an empty array\n    if len(arr) == 0:\n        return []\n\n    # Helper function to reverse a list of numbers\n    def reverse_list(lst):\n        return [lst[-1]] + [lst[-2]] + [lst[-3]] + [lst[-4]] + [lst[-5]] + [lst[-6]] + [lst[-7]] + [lst[-8]]\n\n    # Reverse the array and sort the integers\n    arr = reverse_list(arr)\n    arr.sort()\n\n    # Replace each digit with its corresponding name\n    digit_map = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    result = []\n    for num in arr:\n        if num in digit_map:\n            result.append(digit_map[num])\n        else:\n            result.append(\"One\")\n\n    return result",
        "test": "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\", \"Five\", \"Eight\"]",
        "num_ids": 2005,
        "indeed": false
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n    factors = []\n\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(i * (i-1) // 2)\n\n    return factors",
        "test": "assert f(10) == [1, 2, 3, 6, 24, 120, 720, 5040, 40320], \"The function f should return [1, 2, 3, 6, 24, 120, 720, 5040, 40320] for n=10.\"",
        "num_ids": 759,
        "indeed": false
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    count = 0\n    for i in range(2, n + 1):\n        if i == int(i ** 0.5) + 1:\n            count += 2\n        elif i == int(i ** 0.5):\n            count += 1\n    return (count, n - count)",
        "test": "assert even_odd_palindrome(12) == (4, 6)",
        "num_ids": 883,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num >= 0:\n            sum_of_digits = sum(int(d) for d in str(num))\n            if sum_of_digits > 0:\n                count += 1\n    return count",
        "test": "assert count_nums([]) == 0",
        "num_ids": 620,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performing 2 right shift operations, non-decreasing order can\n                    be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation: It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n    \"\"\"\n    if len(arr) == 0:\n        return True\n\n    last_element = arr[0]\n\n    for i in range(1, len(arr)):\n        if last_element < arr[i]:\n            return False\n        else:\n            arr[i], arr[i-1] = arr[i-1], arr[i]\n            last_element = arr[i]\n\n    return True",
        "test": "assert move_one_ball([3, 5, 4, 1, 2]) == False, \"Test case 2\"",
        "num_ids": 1346,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\n    # Check if the two lists have the same length\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n\n    # Initialize a boolean list to store the result of the exchange\n    result = [True] * len(lst1)\n\n    # Iterate over the first list and check if all elements are even\n    for i in range(len(lst1)):\n        if lst1[i] % 2!= 0:\n            return \"NO\"\n\n    # Iterate over the second list and check if all elements are even\n    for i in range(len(lst2)):\n        if lst2[i] % 2!= 0:\n            return \"NO\"\n\n    # Iterate over the first list and check if all elements are even\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 0:\n            result[i] = False\n\n    # Iterate over the second list and check if all elements are even\n    for i in range(len(lst2)):\n        if lst2[i] % 2 == 0:\n            result[i] = False\n\n    # If all elements are even, return YES\n    if all(result):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"",
        "num_ids": 1328,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \n    \"\"\"\n    # Initialize an empty dictionary to store the count and the letter\n    letter_count = {}\n    \n    # Iterate over the test string\n    for letter in test:\n        # If the letter is not already in the dictionary, add it with a count of 1\n        if letter not in letter_count:\n            letter_count[letter] = 1\n        # If the letter is already in the dictionary, increment its count by 1\n        else:\n            letter_count[letter] += 1\n            \n    # Sort the dictionary by value in descending order\n    sorted_count = dict(sorted(letter_count.items(), key=lambda item: item[1], reverse=True))\n    \n    # Return the sorted dictionary\n    return sorted_count",
        "test": "assert histogram('a b b a') == {'a': 2, 'b': 2}",
        "num_ids": 1010,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def reverse_delete(s, c):\n    s = s.replace(c, '')\n    return s, s == s[::-1]\n\ns = \"abcde\"\nc = \"ae\"\nresult = reverse_delete(s, c)\nprint(result)  # Output: ('bcd', False)\n\ns = \"abcdef\"\nc = \"b\"\nresult = reverse_delete(s, c)\nprint(result)  # Output: ('acdef', False)\n\ns = \"abcdedcba\"\nc = \"ab\"\nresult = reverse_delete(s, c)\nprint(result)  # Output: ('cdedc', True)",
        "test": "assert reverse_delete(\"abcdef\", \"b\") == (\"acdef\", False)",
        "num_ids": 716,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    odd_count_lst = []\n    for i in lst:\n        num_of_odd = 0\n        for char in i:\n            if char.isdigit():\n                num_of_odd += 1\n        odd_count_lst.append(f\"the number of odd elements {num_of_odd}n the str{num_of_odd}ng {num_of_odd} of the {num_of_odd}nput.\")\n    return odd_count_lst",
        "test": "assert odd_count(['3', '11111111']) == ['the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.']",
        "num_ids": 1097,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n\n    if not nums:\n        return 0\n\n    # initialize variables\n    min_sum = float('inf')\n    current_sum = 0\n\n    # iterate through the array\n    for num in nums:\n        current_sum += num\n\n        # update the minimum sum if needed\n        if current_sum < 0:\n            current_sum = 0\n            min_sum = num\n        elif current_sum < min_sum:\n            min_sum = current_sum\n\n    return min_sum",
        "test": "assert minSubArraySum([-1, -2, -3]) == -6",
        "num_ids": 732,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_fill(grid, bucket_capacity):\n    rows = len(grid)\n    cols = len(grid[0])\n    max_lower = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                max_lower += min(bucket_capacity, 1)\n    return max_lower",
        "test": "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Expected 6, but got {}\".format(max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1))",
        "num_ids": 1211,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Convert the array to a list of strings to be able to sort it\n    arr_str = [str(num) for num in arr]\n\n    # Sort the list of strings based on the number of ones in each string\n    arr_str = sorted(arr_str, key=lambda x: sum(int(i) for i in x.replace('0', '1').replace('1', '0').replace('X', '1').replace('x', '0').split()))\n\n    # Convert the sorted list back to an array and return it\n    return [int(s) for s in arr_str]",
        "test": "assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]",
        "num_ids": 859,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if len(set(s[i:i+n])) == n:\n                words.append(s[i:i+n])\n    return words",
        "test": "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]",
        "num_ids": 904,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    left = \"\"\n    right = \"\"\n    # Find left and right consonants\n    for i in range(len(word)-1, -1, -1):\n        if word[i].lower() in vowels:\n            left += word[i]\n            if i == 0:\n                break\n        else:\n            break\n\n    # Find right consonant\n    for i in range(1, len(word)):\n        if word[i].lower() in vowels:\n            right += word[i]\n        else:\n            break\n\n    # Check if there is a closest vowel\n    if right:\n        return right[-1]\n    else:\n        return \"\"",
        "test": "assert get_closest_vowel(\"FULL\") == \"U\"",
        "num_ids": 833,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    def is_balanced(str):\n        stack = []\n        for char in str:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack or stack.pop()!= '(':\n                    return False\n        return not stack\n\n    # If the first string is balanced and the second string is good, return 'Yes'\n    if is_balanced(lst[0]) and is_balanced(lst[1]):\n        return 'Yes'\n    # If either of the strings is not balanced, return 'No'\n    else:\n        return 'No'",
        "test": "assert match_parens([')', ')']) == 'No'",
        "num_ids": 1300,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # sorting the array\n    arr.sort()\n\n    # getting the maximum k numbers from the sorted array\n    max_arr = arr[-k:]\n\n    # returning the sorted list with the maximum k numbers\n    return max_arr",
        "test": "assert maximum([-3, -4, 5], 3) == [-4, -3, 5]",
        "num_ids": 984,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n\n     Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 0\n    \"\"\"\n    # create a list of even numbers\n    even_nums = []\n    for i in range(1, len(lst), 2):\n        even_nums.append(lst[i])\n\n    # create an empty list to store the sum of odd even elements\n    sum_of_odd_even = []\n\n    # iterate through the even_nums list and calculate the sum of odd even elements\n    for num in even_nums:\n        if num % 2 == 1:\n            sum_of_odd_even.append(num)\n\n    # return the sum of odd even elements\n    return sum(sum_of_odd_even)\n",
        "test": "assert solution([3, 3, 3, 3, 3]) == 9",
        "num_ids": 524,
        "indeed": false
    },
    {
        "number": 122,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total = 0\n    for i in range(k):\n        num = int(arr[i])\n        total += num\n\n    return total",
        "test": "assert add_elements([100], 1) == 100 # sum of the first element",
        "num_ids": 799,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    # Base case\n    if n == 1:\n        return [1]\n\n    # Recursive case\n    elif n % 2 == 0:\n        # First term is odd\n        odd_term = get_odd_collatz(n // 2)[0]\n        # Rest of the terms are even\n        even_terms = get_odd_collatz(n // 2)[1:]\n        return [odd_term] + even_terms\n\n    else:\n        # First term is even\n        even_term = get_odd_collatz(n // 2)[0]\n        # Rest of the terms are odd\n        odd_terms = get_odd_collatz(n // 2)[1:]\n        return [even_term] + odd_terms\n",
        "test": "assert get_odd_collatz(1) == [1] # The collatz sequence for 1 is [1], so the odd numbers are only 1.",
        "num_ids": 1206,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def valid_date(date):\n    \"\"\"\n    This function validates a given date string and returns True if the date is valid\n    otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1, 3, 5, 7, 8, 10, 12.\n    3. The number of days is not less than 1 or higher than 30 days for months 4, 6, 9, 11.\n    4. The number of days is not less than 1 or higher than 29 for the month 2.\n    5. The months should not be less than 1 or higher than 12.\n    6. The date should be in the format: mm-dd-yyyy.\n\n    Args:\n        date (str): A string representing the date.\n\n    Returns:\n        bool: True if the date is valid, False otherwise.\n    \"\"\"\n    # Split the date string into month, day, and year components\n    date_parts = date.split('-')\n    if len(date_parts)!= 3:\n        return False\n\n    # Convert the date components to integers\n    month = int(date_parts[0])\n    day = int(date_parts[1])\n    year = int(date_parts[2])\n\n    # Check if the date is valid for each rule\n    if not date:\n        return False\n\n    # Check if the month is between 1 and 12\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the number of days is not less than 1 or higher than 31\n    if day < 1 or day > 31:\n        return False\n\n    # Check if the number of days is not less than 1 or higher than 30\n    if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 30:\n        return False\n\n    # Check if the number of days is not less than 1 or higher than 29 for the month 2\n    if month == 2 and day < 1 or day > 29:\n        return False\n\n    # Check if the year is a leap year\n    if year % 4!= 0 and (year % 100!= 0 or year % 400!= 0):\n        return False\n\n    # Check if the date is in the format: mm-dd-yyyy\n    if len(date_parts[0])!= 2 or len(date_parts[1])!= 2 or len(date_parts[2])!= 4:\n        return False\n\n    return True",
        "test": "assert valid_date('15-01-2012') == False",
        "num_ids": 1577,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def split_words(txt):\n    # split text by whitespace\n    words = txt.split()\n    # split by comma\n    if ',' in words:\n        return len(set(w.lower() for w in words if w.lower() in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z')))\n    else:\n        return words",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 568,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    # Remove duplicates and sort the list\n    lst = list(set(lst))\n    lst.sort()\n\n    # Check if the list is sorted\n    if lst == sorted(lst):\n        return True\n    else:\n        return False",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 765,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_prime(n):\n    \"\"\"Check if a number is prime\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n    \"\"\"\n    if (interval1[0] <= interval2[0]) and (interval1[1] >= interval2[1]):\n        if is_prime(interval1[1] - interval1[0] + 1):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\", \"Test 1\"",
        "num_ids": 1149,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    # Check if the array is empty\n    if len(arr) == 0:\n        return None\n\n    # Calculate the product of all signs\n    product = 1\n    for num in arr:\n        if num > 0:\n            product *= 1\n        elif num < 0:\n            product *= -1\n        else:\n            product *= 0\n\n    # Calculate the magnitudes of the integers in the array\n    magnitudes = [abs(num) for num in arr]\n\n    # Calculate the sum of magnitudes and product\n    return sum(magnitudes) * product",
        "test": "assert prod_signs([0, 1]) == 0",
        "num_ids": 679,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n\n    def min_path_value(row, col):\n        if row < 0 or row >= rows or col < 0 or col >= cols:\n            return float('-inf')\n        return grid[row][col]\n\n    def min_path(row, col):\n        min_val = min_path_value(row, col)\n        if row == 0 or col == 0:\n            return min_val\n        for i in range(1, min_path(row-1, col)):\n            for j in range(1, min_path(row, col-1)):\n                min_val = min(min_val, min_path_value(row-1, col-1) + grid[row][col])\n        return min_val\n\n    return min_path(rows-1, cols-1)",
        "test": "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]",
        "num_ids": 2452,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    result = []\n    a, b, c = 0, 1, 1\n\n    while len(result) < n + 1:\n        result.append(a)\n        a, b, c = b, c + b, a + b\n\n    return result[:n + 1]",
        "test": "assert tri(4) == [3, 6, 5, 12]",
        "num_ids": 651,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    result = 1\n    for i in range(1, n+1, 2):\n        result *= i\n    return result",
        "test": "assert digits(1) == 1, \"The product of the odd digits of 1 is 1.\"",
        "num_ids": 435,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            if stack.pop()!= '[':\n                return False\n    if stack:\n        return False\n    return True",
        "test": "assert is_nested('[[]]') == True",
        "num_ids": 260,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    # Initialize an empty list to store the squared numbers\n    squared_lst = []\n\n    # Iterate over each element of the input list\n    for num in lst:\n        # Calculate the square of the current element and append it to the list\n        squared_lst.append(int(num**2))\n\n    # Round each element in the list to the upper int(Ceiling) and sum it up\n    rounded_lst = []\n    for num in squared_lst:\n        rounded_lst.append(num)\n\n    return sum(rounded_lst)",
        "test": "assert sum_squares([1, 2, 3]) == 14",
        "num_ids": 840,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n\n    # Remove any leading/trailing whitespace\n    txt = txt.strip()\n\n    # Split the string into words\n    words = txt.split()\n\n    # Check if the last character is an alphabetical character\n    if words[-1].isalpha():\n        return True\n    else:\n        return False",
        "test": "assert check_if_last_char_is_a_letter(\"apple pi e\") == True",
        "num_ids": 759,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] >= arr[i+1]:\n            return i\n    return -1",
        "test": "assert can_arrange([1, 2, 3]) == -1",
        "num_ids": 561,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    a = None\n    b = None\n\n    for num in lst:\n        if num < 0:\n            if a is None or num > a:\n                a = num\n        elif num > 0:\n            if b is None or num < b:\n                b = num\n\n    return (a, b)",
        "test": "assert largest_smallest_integers([]) == (None, None)",
        "num_ids": 882,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if isinstance(a, float) and isinstance(b, float):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    elif isinstance(a, float) and isinstance(b, str):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    elif isinstance(a, str) and isinstance(b, float):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    elif isinstance(a, str) and isinstance(b, str):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    else:\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None",
        "test": "assert compare_one(1, 2.5) == 2.5",
        "num_ids": 973,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True",
        "test": "assert is_equal_to_sum_even(4) == False",
        "num_ids": 539,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    # Base case\n    if n == 0:\n        return 1\n\n    # Recursive case\n    else:\n        return n * special_factorial(n-1)\n",
        "test": "assert special_factorial(0) == 1, \"The special factorial of 0 is incorrect.\"",
        "num_ids": 620,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    # replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    # split the string into words and iterate over each word\n    words = text.split()\n    # iterate over each word and check if it has more than 2 consecutive spaces\n    for i in range(1, len(words)):\n        if len(words[i]) > 2 and words[i-1] == \" \":\n            words[i] = \"-\" * (len(words[i]) - 2)\n    # join the words back together with underscores\n    text = \"_\".join(words)\n    return text",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 653,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Check if the file's name is empty\n    if not file_name:\n        return 'No'\n\n    # Check if the file's name contains more than three digits\n    if any(c.isdigit() for c in file_name) and len(file_name.split('.')) > 2:\n        return 'No'\n\n    # Check if the file's name contains a dot '.'\n    if '.' not in file_name:\n        return 'No'\n\n    # Check if the substring before the dot is a valid letter\n    if file_name[0].isalpha() is False:\n        return 'No'\n\n    # Check if the substring after the dot is one of the allowed ones\n    allowed_file_extensions = ['txt', 'exe', 'dll']\n    if file_name.split('.')[-1] not in allowed_file_extensions:\n        return 'No'\n\n    return 'Yes'",
        "test": "assert file_name_check(\"1example.dll\") == \"No\"",
        "num_ids": 1263,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    sum = 0\n    \n    for i in lst:\n        if i % 3 == 0 and i % 4!= 0:\n            sum += i ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            sum += i ** 3\n    \n    return sum",
        "test": "assert sum_squares([]) == 0",
        "num_ids": 583,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    # Remove spaces from the sentence\n    sentence = sentence.replace(\" \", \"\")\n\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Initialize a list to store the prime numbers\n    primes = []\n\n    # Iterate over each word in the sentence\n    for word in words:\n        # Check if the word is prime\n        if is_prime(word):\n            # If it is prime, add it to the list\n            primes.append(word)\n\n    # Sort the list in increasing order\n    primes.sort()\n\n    # Join the words in the sorted list\n    new_sentence = \" \".join(primes)\n\n    return new_sentence\n\ndef is_prime(n):\n    \"\"\"\n    Check if a given number is prime or not.\n    \"\"\"\n    # Check if n is less than 2\n    if n < 2:\n        return False\n\n    # Check if n is 2 or 3\n    if n == 2 or n == 3:\n        return True\n\n    # Check if n is divisible by any number between 2 and its square root\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True",
        "test": "assert words_in_sentence(\"lets go for swimming\") == \"go for\"",
        "num_ids": 817,
        "indeed": false
    },
    {
        "number": 144,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def simplify(x, n):\n    \"\"\"Simplify an expression by multiplying it by n and taking the floor division.\n\n    Args:\n        x (str): The fraction to simplify.\n        n (str): The factor to multiply x by.\n\n    Returns:\n        bool: True if the simplified expression evaluates to a whole number, False otherwise.\n    \"\"\"\n    numerator = int(x.split('/')[-1])\n    denominator = int(n.split('/')[-1])\n\n    if numerator * denominator == numerator:\n        return True\n    else:\n        return False",
        "test": "assert simplify(\"1/5\", \"5/1\") == True",
        "num_ids": 545,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # Sort the list in ascending order based on the sum of their digits\n    sorted_nums = sorted(nums, key=lambda x: sum(int(d) for d in str(x)))\n\n    # Reverse the list so that the smallest elements are at the beginning\n    return sorted_nums[::-1]\n",
        "test": "assert order_by_points([]) == []",
        "num_ids": 749,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10:\n            if num % 10 == 1 and num % 100!= 1:\n                if num % 100 == 3 and num % 1000!= 3:\n                    if num % 1000 == 5 and num % 10000!= 5:\n                        if num % 10000 == 7 and num % 100000!= 7:\n                            if num % 100000 == 9 and num % 1000000!= 9:\n                                count += 1\n    return count",
        "test": "assert specialFilter([33, -2, -3, 45, 21, 109]) == 2",
        "num_ids": 713,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    max_triples = 0\n    a = [i*i-i+1 for i in range(n)]\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0 and a[i] == a[j] and a[j] == a[k]:\n                    max_triples += 1\n    return max_triples",
        "test": "assert get_max_triples(5) == 1",
        "num_ids": 1043,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def bf(planet1, planet2):\n    # Planet names and orbital elements\n    planets = {\n        \"Mercury\": {\n            \"semiMajorAxis\": 3.30298e24,\n            \"eccentricity\": 0.0067,\n            \"inclination\": 0.0073,\n            \"longitudeOfAscendingNode\": 219.666945,\n            \"argumentOfPeriapsis\": 0.0,\n            \"meanAnomaly\": 14.885742924,\n            \"perihelionDistance\": 14.951413779\n        },\n        \"Venus\": {\n            \"semiMajorAxis\": 4.86812e24,\n            \"eccentricity\": 0.0113,\n            \"inclination\": 0.0118,\n            \"longitudeOfAscendingNode\": 231.646385,\n            \"argumentOfPeriapsis\": 0.0,\n            \"meanAnomaly\": 3.561344695\n        },\n        \"Earth\": {\n            \"semiMajorAxis\": 5.97364e24,\n            \"eccentricity\": 0.0167,\n            \"inclination\": 0.0179,\n            \"longitudeOfAscendingNode\": 225.162774,\n            \"argumentOfPeriapsis\": 0.0,\n            \"meanAnomaly\": 0.0\n        },\n        \"Mars\": {\n            \"semiMajorAxis\": 6.41932e23,\n            \"eccentricity\": 0.0058,\n            \"inclination\": 0.0067,\n            \"longitudeOfAscendingNode\": 196.374944,\n            \"argumentOfPeriapsis\": 0.0,\n            \"meanAnomaly\": 12.29106868\n        },\n        \"Jupiter\": {\n            \"semiMajorAxis\": 1.89813e27,\n            \"eccentricity\": 0.0025,\n            \"inclination\": 0.0033,\n            \"longitudeOfAscendingNode\": 327.084309,\n            \"argumentOfPeriapsis\": 0.0,\n            \"meanAnomaly\": 21.31130535\n        },\n        \"Saturn\": {\n            \"semiMajorAxis\": 5.68336e26,\n            \"eccentricity\": 0.0157,\n            \"inclination\": 0.0176,\n            \"longitudeOfAscendingNode\": 213.205382,\n            \"argumentOfPeriapsis\": 0.0,\n            \"meanAnomaly\": 21.03667475\n        },\n        \"Uranus\": {\n            \"semiMajorAxis\": 8.68846e25,\n            \"eccentricity\": 0.0161,\n            \"inclination\": 0.0179,\n            \"longitudeOfAscendingNode\": 234.974408,\n            \"argumentOfPeriapsis\": 0.0,\n            \"meanAnomaly\": 21.0981212\n        },\n        \"Neptune\": {\n            \"semiMajorAxis\": 1.02439e26,\n            \"eccentricity\": 0.0041,\n            \"inclination\": 0.0053,\n            \"longitudeOfAscendingNode\": 229.912323,\n            \"argumentOfPeriapsis\": 0.0,\n            \"meanAnomaly\": 20.98428385\n        }\n    }\n\n    # Check if the input planet names are correct\n    if planet1 not in planets or planet2 not in planets:\n        return []\n\n    # Get the orbits of the input planets\n    orbits1 = planets[planet1]\n    orbits2 = planets[planet2]\n\n    # Calculate the mean anomaly of the input planets\n    meanAnomaly1 = orbits1[\"meanAnomaly\"]\n    meanAnomaly2 = orbits2[\"meanAnomaly\"]\n\n    # Calculate the position vector of the sun\n    sunPos = {\n        \"r\": 69595000,  # Radius of the Sun\n        \"t\": 24 * 3600  ",
        "test": "assert bf(\"Earth\", \"Mercury\") == (\"Venus\")",
        "num_ids": 2881,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\n    # Create a new list to store the strings with odd lengths\n    odd_strings = []\n\n    # Iterate through each string in the list\n    for word in lst:\n        # Check if the length of the word is odd\n        if len(word) % 2 == 1:\n            # If it is, append it to the new list\n            odd_strings.append(word)\n\n    # Sort the odd strings in ascending order by length\n    odd_strings.sort(key=lambda x: len(x))\n\n    # Return the sorted list of odd strings\n    return odd_strings",
        "test": "assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]",
        "num_ids": 927,
        "indeed": false
    },
    {
        "number": 150,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n\n    def is_prime(n):\n        \"\"\"Return True if n is a prime number, False otherwise.\"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y",
        "test": "assert x_or_y(7, 34, 12) == 34",
        "num_ids": 551,
        "indeed": true
    },
    {
        "number": 151,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    '''\n\n    if not lst:\n        return 0\n\n    sum_of_squares = 0\n    for num in lst:\n        if not isinstance(num, int):\n            continue\n        if num < 0:\n            continue\n        if num % 2!= 0:\n            sum_of_squares += num ** 2\n\n    return sum_of_squares",
        "test": "assert double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 == 10",
        "num_ids": 921,
        "indeed": true
    },
    {
        "number": 152,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    score = len(game)\n    diff = [0] * score\n    \n    for i in range(score):\n        if game[i] == guess[i]:\n            diff[i] = 0\n        else:\n            diff[i] = abs(game[i] - guess[i])\n    \n    return diff",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 1207,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    \n    # Convert the extensions list to a set to remove duplicates\n    extensions_set = set(extensions)\n    \n    # Create an empty dictionary to store the class and extension strengths\n    class_strengths = {}\n    \n    # Iterate over the extensions and update the class strengths\n    for extension in extensions_set:\n        # Get the uppercase letters and lowercase letters from the extension\n        uppercase_letters = 0\n        lowercase_letters = 0\n        for char in extension:\n            if char.isupper():\n                uppercase_letters += 1\n            else:\n                lowercase_letters += 1\n        # Calculate the strength\n        strength = uppercase_letters - lowercase_letters\n        # Update the class strengths dictionary\n        if extension in class_strengths:\n            class_strengths[extension] += strength\n        else:\n            class_strengths[extension] = strength\n    \n    # Find the strongest extension and return the string in the desired format\n    max_strength = max(class_strengths.values())\n    for extension in class_strengths:\n        if class_strengths[extension] == max_strength:\n            return class_name + '.' + extension\n    \n    # If no extensions have the same strength, return the class name as a string\n    return class_name",
        "test": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'",
        "num_ids": 1645,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"\n    This function takes two strings as input and returns True if the second word or any of its rotations is a substring in the first word.\n    \n    :param a: str, the first word\n    :param b: str, the second word\n    :return: bool, True if the second word or any of its rotations is a substring in the first word, False otherwise\n    \"\"\"\n    # Remove leading and trailing whitespaces\n    a = a.strip()\n    b = b.strip()\n    \n    # If the length of the second word is greater than the length of the first word, the second word is longer\n    if len(b) > len(a):\n        b = b[len(a):]\n    \n    # Check if the second word is in the first word\n    for i in range(len(a)):\n        if a[i:i+len(b)] == b:\n            # Check if any of the rotations of the second word are also in the first word\n            for j in range(i, len(a)-len(b)+1):\n                if a[j:j+len(b)] == b:\n                    return True\n    \n    return False",
        "test": "assert cycpattern_check(\"abcd\",\"abd\") == False",
        "num_ids": 825,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    num_str = str(num)\n    for char in num_str:\n        if char.isdigit():\n            digit = int(char)\n            if digit % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)",
        "test": "assert even_odd_count(123) == (1, 2)",
        "num_ids": 607,
        "indeed": true
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_dict = {\n        1000: 'M', 900: 'CM', 500: 'D', 400: 'CD',\n        100: 'C', 90: 'XC', 50: 'L', 40: 'XL',\n        10: 'X', 9: 'IX', 5: 'V', 4: 'IV',\n        1: 'I'\n    }\n\n    roman_value = 0\n    for i, value in enumerate(roman_dict.values()):\n        while number >= value:\n            number -= value\n            roman_value += 1\n\n    return roman_dict[roman_value]",
        "test": "assert int_to_mini_roman(152) == 'clii'",
        "num_ids": 994,
        "indeed": false
    },
    {
        "number": 157,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Check if the lengths of the sides of the triangle form a right-angled triangle\n    if a + b <= c and b + c <= a and c + a <= b:\n        return True\n    else:\n        return False",
        "test": "assert right_angle_triangle(1, 2, 3) == False, \"The triangle should not have three sides.\"",
        "num_ids": 917,
        "indeed": false
    },
    {
        "number": 158,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_length = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n            max_word = word\n    return max_word",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 601,
        "indeed": false
    },
    {
        "number": 159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if number > need:\n        # You can't eat more than you need\n        return [0, number]\n    if remaining < need:\n        # You don't have enough remaining carrots\n        return [0, remaining]\n    \n    # You can eat any number of carrots\n    return [number, remaining]\n",
        "test": "assert eat(4, 8, 9) == [12, 1]",
        "num_ids": 1308,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    result = 0\n    for i in range(len(operator) - 1):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '//':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n\n    return result\n",
        "test": "assert do_algebra(['+', '*', '-'], [2, 3, 4]) == 2 # Correct result for the second example",
        "num_ids": 1206,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            result += s[i].upper() if s[i].islower() else s[i].lower()\n        else:\n            result += s[i]\n    if not result:\n        return s[::-1]\n    return result",
        "test": "assert solve(\"ab\") == \"AB\"",
        "num_ids": 423,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n\n    md5_hash = hashlib.md5(text.encode('utf-8')).hexdigest()\n    return md5_hash",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
        "num_ids": 528,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    result = []\n    for num in range(a, b + 1):\n        if num % 2 == 0:\n            result.append(num)\n    return result",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 659,
        "indeed": false
    }
]