[
    {
        "number": 0,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    Args:\n        numbers (List[float]): List of numbers.\n        threshold (float): Threshold value for close elements.\n    Returns:\n        bool: True if any two numbers closer to each other than given threshold are present, False otherwise.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False",
        "test": "assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True",
        "num_ids": 1358
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Remove spaces from the string\n    paren_string = paren_string.replace(' ', '')\n    # Initialize an empty list to store the separate strings\n    separate_strings = []\n    # Initialize a flag to keep track of if a group is open or not\n    is_open = False\n    # Iterate through the string\n    for char in paren_string:\n        # If the character is an open brace, mark it as open and start a new separate string\n        if char == '(':\n            is_open = True\n            separate_strings.append('')\n        # If the character is a close brace, mark it as closed and add the separate string to the list\n        elif char == ')':\n            is_open = False\n            separate_strings[-1] += char\n    return separate_strings",
        "test": "assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']",
        "num_ids": 1808
    },
    {
        "number": 2,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n\n    return decimal_part",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 605
    },
    {
        "number": 3,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    Returns True if at any point the balance of the account falls below zero, and False otherwise.\n    \"\"\"\n    total_balance = 0\n    for operation in operations:\n        total_balance += operation\n    \n    # Check if any negative value is found in the total balance\n    for operation in operations:\n        if operation < 0:\n            return True\n    \n    # If no negative value is found in the total balance, then the balance is below zero\n    return False",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 810
    },
    {
        "number": 4,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n\n    # Calculate the mean\n    mean = sum(numbers) / len(numbers)\n\n    # Calculate the MAD\n    mad = 0.0\n    for num in numbers:\n        mad += abs(num - mean)\n\n    mad /= len(numbers)\n\n    return mad",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0, \"Expected output: 1.0, but got: {}\".format(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]))",
        "num_ids": 1209
    },
    {
        "number": 5,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n",
        "test": "assert intersperse([], 4) == []",
        "num_ids": 1062
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    This function takes a string representing multiple groups for nested parentheses separated by spaces and outputs\n    the deepest level of nesting of parentheses.\n\n    Parameters:\n    paren_string: a string representing multiple groups for nested parentheses separated by spaces.\n\n    Returns:\n    a list of integers representing the deepest level of nesting of parentheses.\n    \"\"\"\n\n    result = []\n\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                if stack[-1] == '(':\n                    stack.pop()\n                else:\n                    result.append(len(stack))\n                    stack.pop()\n\n    return result",
        "test": "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
        "num_ids": 1084
    },
    {
        "number": 7,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = []\n\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n\n    return filtered_strings",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 796
    },
    {
        "number": 8,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    \n    # Initialize sum and product variables\n    sum = 0\n    product = 1\n    \n    # Loop through the list and add up the integers\n    for num in numbers:\n        sum += num\n        product *= num\n    \n    # Return a tuple containing the sum and product\n    return sum, product",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 1193
    },
    {
        "number": 9,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if len(numbers) == 1:\n        return numbers\n\n    max_so_far = numbers[0]\n    rolling_max = [numbers[0]]\n\n    for num in numbers[1:]:\n        rolling_max.append(max(max_so_far, num))\n        max_so_far = rolling_max[-1]\n\n    return rolling_max",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
        "num_ids": 1376
    },
    {
        "number": 10,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    # Find the longest postfix of supplied string that is a palindrome\n    longest_palindrome = ''.join(reversed([string[i] for i in range(len(string)) if is_palindrome(string[:i+1]) and is_palindrome(string[i+1:])]))\n\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    prefix_before_palindrome = longest_palindrome[:len(longest_palindrome) // 2]\n    suffix_after_palindrome = longest_palindrome[len(longest_palindrome) // 2:]\n\n    return prefix_before_palindrome + suffix_after_palindrome",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 1415
    },
    {
        "number": 11,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # initialize result string to 0\n    result = ''\n    # iterate over each character of input strings\n    for i in range(len(a)):\n        # XOR the current character of input strings with result and append the result to result string\n        result += str(int(a[i]) ^ int(b[i]))\n    return result",
        "test": "assert string_xor('010', '110') == '100', \"Test Case 1 failed\"",
        "num_ids": 996
    },
    {
        "number": 12,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    max_length = 0\n    max_string = ''\n    for string in strings:\n        if len(string) > max_length:\n            max_length = len(string)\n            max_string = string\n    return max_string",
        "test": "assert longest([]) == None",
        "num_ids": 724
    },
    {
        "number": 13,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    # base case: gcd of 0 and a = a\n    if b == 0:\n        return a\n    \n    # base case: gcd of a and 0 = a\n    if a == 0:\n        return b\n    \n    # recursive case: compute gcd using Euclid's algorithm\n    return greatest_common_divisor(b, a % b)",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 805
    },
    {
        "number": 14,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes",
        "test": "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
        "num_ids": 841
    },
    {
        "number": 15,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return''.join(map(str, range(n)))",
        "test": "assert string_sequence(5) == '0 1 2 3 4 5'",
        "num_ids": 828
    },
    {
        "number": 16,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of.\n\n    :param string: a string to be processed\n    :return: the number of distinct characters in the given string\n    \"\"\"\n    # convert the string to lowercase and remove all non-alphabetic characters\n    string = ''.join(c.lower() for c in string if c.isalpha())\n    # convert the string to a set to remove duplicates\n    char_set = set(string)\n    # return the length of the set\n    return len(char_set)",
        "test": "assert count_distinct_characters('Jerry') == 4",
        "num_ids": 856
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    notes = music_string.split()\n    beats = []\n    current_beat = 0\n    current_note = ''\n    for note in notes:\n        if note == 'o':\n            beats.append(current_beat)\n            current_beat += 4\n        elif note == 'o|':\n            beats.append(current_beat)\n            current_beat += 2\n        elif note == '.|':\n            beats.append(current_beat)\n            current_beat += 1\n        elif note == 'o o':\n            beats.append(current_beat)\n            current_beat += 4\n            current_note = 'o'\n        elif note == 'o| o':\n            beats.append(current_beat)\n            current_beat += 2\n            current_note = 'o'\n        elif note == '.| o':\n            beats.append(current_beat)\n            current_beat += 1\n            current_note = 'o'\n        elif note == 'o o o':\n            beats.append(current_beat)\n            current_beat += 4\n            current_note = 'o'\n        elif note == 'o| o o':\n            beats.append(current_beat)\n            current_beat += 2\n            current_note = 'o'\n        elif note == '.| o o':\n            beats.append(current_beat)\n            current_beat += 1\n            current_note = 'o'\n        elif note == 'o o o o':\n            beats.append(current_beat)\n            current_beat += 4\n            current_note = 'o'\n        elif note == 'o| o o o':\n            beats.append(current_beat)\n            current_beat += 2\n            current_note = 'o'\n        elif note == '.| o o o':\n            beats.append(current_beat)\n            current_beat += 1\n            current_note = 'o'\n    return beats\n",
        "test": "assert parse_music('o o|.| o| o|.|.|.|.| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
        "num_ids": 2496
    },
    {
        "number": 18,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 823
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    \"\"\"\n    # Create a dictionary to store the numberals and their positions in the string\n    numberals = {}\n    for i, num in enumerate(numbers):\n        if num not in numberals:\n            numberals[num] = i\n\n    # Create a list to store the sorted numberals in ascending order\n    sorted_numbers = []\n    for num, pos in numberals.items():\n        sorted_numbers.append(num)\n\n    # Join the sorted numberals with spaces and return the result\n    return''.join(sorted_numbers)",
        "test": "assert sort_numbers('zero one two three four five six seven eight nine') == 'one three five six seven eight nine'",
        "num_ids": 1114
    },
    {
        "number": 20,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    smallest = numbers[0]\n    largest = numbers[0]\n    closest = None\n    \n    for num in numbers[1:]:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n        \n        if closest is None or abs(num - closest) > abs(smallest - largest):\n            closest = num\n            \n    return smallest, largest",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)",
        "num_ids": 1606
    },
    {
        "number": 21,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # Find the minimum and maximum values in the list\n    min_val = min(numbers)\n    max_val = max(numbers)\n\n    # Scale the values to be between 0 and 1\n    scaled_numbers = [(num - min_val) / (max_val - min_val) for num in numbers]\n\n    return scaled_numbers",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 1381
    },
    {
        "number": 22,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    :param values: list of any python values\n    :return: list of integers from the original list\n    \"\"\"\n    filtered_values = []\n    for value in values:\n        if isinstance(value, int):\n            filtered_values.append(value)\n    return filtered_values",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 708
    },
    {
        "number": 23,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)",
        "test": "assert strlen('') == 0, \"strlen('') should return 0\"",
        "num_ids": 290
    },
    {
        "number": 24,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\"\n    For a given number n, find the largest number that divides n evenly, smaller than n.\n    :param n: The number whose largest divisor we are looking for.\n    :return: The largest number that divides n evenly, smaller than n.\n    \"\"\"\n    # Initialize the largest divisor we can find to be 1\n    largest_divisor = 1\n\n    # Loop through all numbers from 2 to n\n    for i in range(2, n+1):\n        # If n is divisible by i, update the largest divisor\n        if n % i == 0:\n            largest_divisor = i\n\n    # Return the largest divisor we found\n    return largest_divisor",
        "test": "assert largest_divisor(15) == 5, \"largest_divisor(15) should return 5, but instead it returns {}\".format(largest_divisor(15))",
        "num_ids": 880
    },
    {
        "number": 25,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    num = n\n    while num > 1:\n        for i in range(2, num + 1):\n            if num % i == 0:\n                factors.append(i)\n                num //= i\n                break\n    if num > 1:\n        factors.append(num)\n    return factors",
        "test": "assert factorize(8) == [2, 2, 2], \"Expected [2, 2, 2]\"",
        "num_ids": 1164
    },
    {
        "number": 26,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    # Create a set to store the unique elements\n    unique_numbers = set(numbers)\n    \n    # Convert the set back to a list and return it\n    return list(unique_numbers)\n",
        "test": "assert remove_duplicates([1, 2, 3, 1, 2, 3, 4]) == [1, 2, 3, 4]",
        "num_ids": 761
    },
    {
        "number": 27,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.lower().upper()",
        "test": "assert flip_case('hello') == 'hELLO'",
        "num_ids": 643
    },
    {
        "number": 28,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    # Check if list is empty\n    if len(strings) == 0:\n        return ''\n    \n    # Concatenate the list of strings\n    return ''.join(strings)",
        "test": "assert concatenate([]) == ''",
        "num_ids": 463
    },
    {
        "number": 29,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    Args:\n        strings (List[str]): A list of strings to filter.\n        prefix (str): The prefix to filter by.\n    Returns:\n        List[str]: A list of strings that start with the given prefix.\n    \"\"\"\n    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 817
    },
    {
        "number": 30,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num > 0]",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 787
    },
    {
        "number": 31,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert is_prime(6) == False",
        "num_ids": 677
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x**2 +... xs[n] * x**n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n\n    # Check if xs has even number of coefficients and largest non zero coefficient\n    if len(set(xs))!= len(xs) or max(xs) == 0:\n        return \"Error: xs must have even number of coefficients and largest non zero coefficient.\"\n\n    # Find x such that poly(x) = 0\n    for i in range(len(xs)):\n        if poly(xs, i) == 0:\n            return i\n\n    # No zero point found\n    return \"No zero point found.\"",
        "test": "assert round(find_zero([-6, 11, -6, 1]), 2) == 1.0",
        "num_ids": 2504
    },
    {
        "number": 33,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    return sorted(l, key=lambda x: (x % 3 == 0, x))",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 1249
    },
    {
        "number": 34,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 25,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 834
    },
    {
        "number": 35,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_val = l[0]\n    for num in l:\n        if num > max_val:\n            max_val = num\n    return max_val\n",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 654
    },
    {
        "number": 36,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \"\"\"\n    result = 0\n    for i in range(1, n + 1):\n        if i % 11 == 0 or i % 13 == 0:\n            result += 1\n    return result",
        "test": "assert fizz_buzz(78) == 2",
        "num_ids": 873
    },
    {
        "number": 37,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_odd = []\n    l_even = []\n    for i in range(len(l)):\n        if i % 2 == 1:\n            l_odd.append(l[i])\n        else:\n            l_even.append(l[i])\n    l_odd.sort()\n    l_even.sort()\n    return [l_odd[i] for i in range(len(l_odd))]",
        "test": "assert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]",
        "num_ids": 1375
    },
    {
        "number": 38,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    decoded_groups = []\n    i = 0\n    while i < len(s):\n        start_index = i\n        end_index = start_index + 3\n        while end_index <= len(s) and s[end_index]!= s[start_index]:\n            end_index += 1\n        if end_index <= len(s):\n            decoded_groups.append(s[start_index:end_index])\n        i = end_index\n    return \"\".join(decoded_groups)",
        "test": "assert decode_cyclic(encode_cyclic(\"abcde\")) == \"fedcba\"",
        "num_ids": 2655
    },
    {
        "number": 39,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def is_prime(n: int) -> bool:\n    \"\"\"\n    is_prime returns True if n is a prime number, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    a, b = 0, 1\n    while b <= n:\n        a, b = b, a + b\n        if is_prime(b):\n            return b\n\nprint(prime_fib(1))  # 2\nprint(prime_fib(2))  # 3\nprint(prime_fib(3))  # 5\nprint(prime_fib(4))  # 13\nprint(prime_fib(5))  # 89",
        "test": "assert prime_fib(1) == 2, \"prime_fib(1) should return 2\"",
        "num_ids": 986
    },
    {
        "number": 40,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    Triples_sum_to_zero takes a list of integers as an input.\n    It returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    if len(l) < 3:\n        return False\n\n    seen_sum = set()\n    for i in range(len(l) - 2):\n        if l[i] + l[i + 1] + l[i + 2] in seen_sum:\n            return True\n        seen_sum.add(l[i] + l[i + 1] + l[i + 2])\n\n    return False",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False, \"Expected False\"",
        "num_ids": 1587
    },
    {
        "number": 41,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if i < j:\n                count += 1\n    return count",
        "test": "assert car_race_collision(3) == 3, \"Incorrect output for n = 3\"",
        "num_ids": 1316
    },
    {
        "number": 42,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def incr_list(l: list) -> list:\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    new_list = [x + 1 for x in l]\n    return new_list",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 1152
    },
    {
        "number": 43,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    if len(l) < 2:\n        return False\n\n    for i in range(len(l) - 1):\n        current_sum = l[i]\n        for j in range(i + 1, len(l)):\n            if current_sum + l[j] == 0:\n                return True\n\n    return False\n",
        "test": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 1392
    },
    {
        "number": 44,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"Base number must be greater than or equal to 2\")\n\n    result = \"\"\n    while x!= 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x //= base\n\n    return result",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 1101
    },
    {
        "number": 45,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 25,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h",
        "test": "assert triangle_area(5, 3) == 7.5, \"The area of a triangle with length 5 and height 3 is not 7.5.\"",
        "num_ids": 425
    },
    {
        "number": 46,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def fib4(n: int) -> int:\n    \"\"\"The Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)",
        "test": "assert fib4(0) == 0",
        "num_ids": 1390
    },
    {
        "number": 47,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # Sort the list\n    l.sort()\n\n    # Return the middle element of the sorted list\n    if len(l) % 2 == 0:\n        return (l[len(l)//2 - 1] + l[len(l)//2]) / 2\n    else:\n        return l[len(l)//2]",
        "test": "assert median([3, 1, 2, 4, 5]) == 3",
        "num_ids": 1149
    },
    {
        "number": 48,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n\n    # Convert the string to lowercase and remove all non-alphanumeric characters\n    text = ''.join(c for c in text.lower() if c.isalnum())\n\n    # Check if the string is equal to its reverse\n    if text == text[::-1]:\n        return True\n    else:\n        return False",
        "test": "assert is_palindrome('') == True",
        "num_ids": 657
    },
    {
        "number": 49,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        n = -n\n    if p < 2:\n        p = 2\n    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * result) % p\n        n = n // 2\n    return result\n",
        "test": "assert modp(1101, 101) == 2",
        "num_ids": 1979
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) + 5) % 26 + ord(\"a\")) for ch in s])\n\ns = input(\"Enter a string to encode: \")\nencoded = encode_shift(s)\nprint(f\"Encoded string: {encoded}\")\n\ns = input(\"Enter a string to decode: \")\ndecoded = decode_shift(encoded)\nprint(f\"Decoded string: {decoded}\")",
        "test": "assert decode_shift(\"NxyEaeiou\") == \"Nxyeaeoiu\"",
        "num_ids": 876
    },
    {
        "number": 51,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char.lower() not in vowels])",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 705
    },
    {
        "number": 52,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)",
        "test": "assert below_threshold([1, 20, 4, 10], 5) == False",
        "num_ids": 689
    },
    {
        "number": 53,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def add(x: int, y: int) -> int:\n    return x + y",
        "test": "assert add(2, 3) == 5",
        "num_ids": 374
    },
    {
        "number": 54,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    # Convert both strings to sets to remove duplicates\n    s0_set = set(s0)\n    s1_set = set(s1)\n    \n    # If the two sets have the same length, they have the same characters\n    if len(s0_set) == len(s1_set):\n        return True\n    \n    # If they have different lengths, they can't have the same characters\n    return False",
        "test": "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
        "num_ids": 1362
    },
    {
        "number": 55,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n\n    :param n: int, the index of the Fibonacci number to return\n    :return: int, the n-th Fibonacci number\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)",
        "test": "assert fib(1) == 1",
        "num_ids": 644
    },
    {
        "number": 56,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack or stack.pop()!= \"<\":\n                return False\n    return not stack",
        "test": "assert correct_bracketing(\"<\") == False",
        "num_ids": 856
    },
    {
        "number": 57,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\"\"\"\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            return False\n    return True",
        "test": "assert monotonic([1, 20, 4, 10]) == False",
        "num_ids": 879
    },
    {
        "number": 58,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 1329
    },
    {
        "number": 59,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    # Check if n is prime\n    if n <= 1:\n        return None\n\n    # Initialize prime factors\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n\n    while n % 3 == 0:\n        factors.append(3)\n        n //= 3\n\n    while n % 5 == 0:\n        factors.append(5)\n        n //= 5\n\n    # Check for remaining factors\n    while n > 2:\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                if i!= n // i:\n                    factors.append(i)\n                n //= i\n                break\n\n    # If n is still greater than 1, it is a prime factor\n    if n > 1:\n        factors.append(n)\n\n    # Return the largest prime factor\n    return max(factors)",
        "test": "assert largest_prime_factor(2048) == 2, \"Expected 2, but got {}\".format(largest_prime_factor(2048))",
        "num_ids": 1206
    },
    {
        "number": 60,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n",
        "test": "assert sum_to_n(30) == 465",
        "num_ids": 723
    },
    {
        "number": 61,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack or stack.pop()!= \"(\":\n                return False\n    if not stack:\n        return True\n    return False",
        "test": "assert correct_bracketing(\"(\") is False",
        "num_ids": 815
    },
    {
        "number": 62,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def derivative(xs):\n    \"\"\"\n    xs represents coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    Return derivative of this polynomial in the same form.\n    :param xs: list of coefficients\n    :return: list of derivatives\n    \"\"\"\n    derivatives = []\n    x = xs[0]\n    for i in range(1, len(xs)):\n        derivatives.append(x * xs[i])\n        x = xs[i]\n    return derivatives",
        "test": "assert derivative([1, 2, 3]) == [2, 6]",
        "num_ids": 1025
    },
    {
        "number": 63,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
        "test": "assert fibfib(1) == 0",
        "num_ids": 1070
    },
    {
        "number": 64,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = 'aeiouy'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n        if char == 'y' and s[-1] in vowels:\n            count += 1\n    return count",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 939
    },
    {
        "number": 65,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    return str(x)[shift:] + str(x)[:shift]",
        "test": "assert circular_shift(12, 1) == \"21\"",
        "num_ids": 1099
    },
    {
        "number": 66,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def digitSum(s):\n    \"\"\"\n    Write a function that takes a string as input and returns the sum of the upper characters only.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 991
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    fruit_count = 0\n    mango_count = 0\n\n    for fruit in s.split():\n        if fruit == 'apple':\n            fruit_count += 1\n        elif fruit == 'orange':\n            fruit_count += 2\n        elif fruit =='mango':\n            mango_count += 1\n\n    return mango_count",
        "test": "assert fruit_distribution(\"0 apples and 1 oranges\", 3) == 2, \"The code is not correct\"",
        "num_ids": 1745
    },
    {
        "number": 68,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                        so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n    # Base case: If the array is empty, return an empty list\n    if not arr:\n        return []\n\n    # If the array only contains zeros, return the first zero\n    if arr[0] == 0:\n        return [0, 0]\n\n    # Initialize the minimum value and its index\n    min_val = arr[0]\n    min_index = 0\n\n    # Iterate through the rest of the array\n    for i in range(1, len(arr)):\n        # If the current value is even and smaller than the minimum value, update the minimum value and its index\n        if arr[i] % 2 == 0 and arr[i] < min_val:\n            min_val = arr[i]\n            min_index = i\n\n    # Return the plucked node as [min_val, min_index]\n    return [min_val, min_index]\n",
        "test": "assert pluck([]) == []",
        "num_ids": 2595
    },
    {
        "number": 69,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\n    max_freq = 0\n    max_val = -1\n\n    for num in lst:\n        if num > 0 and num >= max_freq:\n            max_freq = num\n            max_val = num\n\n    return max_val\n",
        "test": "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3, \"search([1, 2, 2, 3, 3, 3, 4, 4, 4]) should return 3\"",
        "num_ids": 1428
    },
    {
        "number": 70,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    min_val = min(lst)\n    max_val = max(lst)\n    # Find the index of the minimum value in the list\n    min_idx = lst.index(min_val)\n    # Find the index of the maximum value in the list\n    max_idx = lst.index(max_val)\n    # Swap the maximum value with the minimum value at the minimum index\n    lst[min_idx], lst[max_idx] = lst[max_idx], lst[min_idx]\n    # Swap the minimum and maximum values from the remaining list\n    for i in range(min_idx+1, max_idx+1):\n        lst[i], lst[min_idx] = lst[min_idx], lst[i]\n    # Reverse the remaining list\n    lst = lst[::-1]\n    return lst",
        "test": "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]",
        "num_ids": 1754
    },
    {
        "number": 71,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def triangle_area(a, b, c):\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter of the triangle\n        s = (a + b + c) / 2\n\n        # Calculate the area of the triangle using Heron's formula\n        area = ((s * (s - a) * (s - b) * (s - c)) ** 0.5)\n\n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        return -1",
        "test": "assert triangle_area(1, 2, 10) == -1, \"Invalid triangle area.\"",
        "num_ids": 1164
    },
    {
        "number": 72,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def will_it_fly(q, w):\n    # check if the object q is balanced\n    if q == q[::-1]:\n        # check if the sum of the elements in the object q is less than or equal to the maximum possible weight\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False",
        "test": "assert will_it_fly([1, 2], 5) == False # 1+2 is less than the maximum possible weight, but it's unbalanced.",
        "num_ids": 709
    },
    {
        "number": 73,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    change = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                change += 1\n    return change",
        "test": "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1",
        "num_ids": 1428
    },
    {
        "number": 74,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\n    def count_chars(string):\n        return len(string)\n\n    result = []\n    for string in lst1:\n        count = 0\n        for char in string:\n            if char in lst2:\n                count += 1\n        if count < len(lst2):\n            result.append(string)\n\n    return result",
        "test": "assert total_match([], []) == []",
        "num_ids": 1801
    },
    {
        "number": 75,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    if a < 100:\n        return False\n\n    if a % 2 == 0 or a % 3 == 0:\n        return False\n\n    n = a // 2\n    while n % 2 == 0 or n % 3 == 0:\n        n //= 2\n\n    if n == 1 or n == 2:\n        return True\n\n    return False\n",
        "test": "assert is_multiply_prime(27) == False",
        "num_ids": 821
    },
    {
        "number": 76,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Returns True if x is a simple power of n and False otherwise.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => True\n    is_simple_power(2, 2) => True\n    is_simple_power(8, 2) => True\n    is_simple_power(3, 2) => False\n    is_simple_power(3, 1) => False\n    is_simple_power(5, 3) => False\n    \"\"\"\n    if n == 1:\n        return True\n    elif n < 0:\n        return False\n    elif n % 2 == 0:\n        return is_simple_power(x, n//2)\n    else:\n        return x**n == x",
        "test": "assert is_simple_power(1, 4) == True",
        "num_ids": 772
    },
    {
        "number": 77,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a == 0 or a == 1:\n        return True\n    elif a % 2 == 0:\n        return False\n    else:\n        i = 3\n        while i * i <= a:\n            if a % i == 0:\n                return False\n            i += 2\n        return True",
        "test": "assert iscube(2) == False, \"iscube(2) failed\"",
        "num_ids": 1001
    },
    {
        "number": 78,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    hex_dict = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    hex_num = int(num, 16)\n    count = 0\n    for digit in str(hex_num):\n        if digit.isdigit():\n            num_int = int(digit)\n            if num_int > 1:\n                for i in range(2, num_int):\n                    if num_int % i == 0:\n                        break\n                else:\n                    count += 1\n    return count\n",
        "test": "assert hex_key(\"1077E\") == 2",
        "num_ids": 1730
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"\n    This function will take a decimal number as input and convert it to binary format.\n    It will return a string with each character representing a binary number.\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n\n    # Adding the extra characters 'db' at the beginning and at the end of the string\n    binary = \"db\" + binary\n\n    return binary",
        "test": "assert decimal_to_binary(32) == \"db100000db\"",
        "num_ids": 1171
    },
    {
        "number": 80,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_happy(s):\n    \"\"\"\n    This function takes a string s as input and returns True if it is a happy string\n    and False otherwise.\n\n    A happy string is a string that reads the same backwards as forwards.\n\n    The function works by iterating through the string s and checking if each letter is\n    the same as the last letter in the string. If a letter is different, it is added to a\n    list of unhappy letters. If the length of the unhappy letters list is less than 3,\n    then the string is not a happy string and False is returned.\n\n    If the length of the unhappy letters list is 3 or greater, then the string is a happy\n    string and True is returned.\n\n    Note that the function works by iterating through the string s and checking if each\n    letter is the same as the last letter in the string. If a letter is different, it is\n    added to a list of unhappy letters. If the length of the unhappy letters list is less than 3,\n    then the string is not a happy string and False is returned.\n\n    If the length of the unhappy letters list is 3 or greater, then the string is a happy\n    string and True is returned.\n\n    Example:\n    >>> is_happy('a')\n    False\n    >>> is_happy('aa')\n    False\n    >>> is_happy('abcd')\n    True\n    >>> is_happy('aabb')\n    False\n    >>> is_happy('adb')\n    True\n    >>> is_happy('xyy')\n    False\n    \"\"\"\n\n    unhappy_letters = []\n\n    for i in range(len(s)-1):\n        if s[i] == s[-1]:\n            unhappy_letters.append(s[i])\n\n    if len(unhappy_letters) < 3:\n        return False\n\n    happy_string = \"\"\n    for i in range(len(unhappy_letters)-2):\n        if unhappy_letters[i]!= unhappy_letters[i+1]:\n            happy_string += unhappy_letters[i]\n\n    if unhappy_letters[-1]!= unhappy_letters[-2]:\n        happy_string += unhappy_letters[-1]\n\n    return happy_string == \"happy\"",
        "test": "assert is_happy('a') == False",
        "num_ids": 1377
    },
    {
        "number": 81,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n\n    GPA       |    Letter grade\n    -----------------------\n    GPAs for some students:\n       4.0    |    A+\n       3.7    |    A \n       3.3    |    A-\n       3.0    |    B+\n       2.7    |    B \n       2.3    |    B-\n       2.0    |    C+\n       1.7    |    C\n       1.3    |    C-\n       1.0    |    D+ \n       0.7    |    D \n       0.0    |    D-\n      0.0    |    E\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades\n",
        "test": "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']",
        "num_ids": 2437
    },
    {
        "number": 82,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise.\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # initialize the count of prime numbers found so far\n    count = 0\n    \n    # loop through each character in the string\n    for char in string:\n        # check if the current character is a prime number\n        if char == '0' or char == '1' or char == '2' or char == '3' or char == '4' or char == '5' or char == '6' or char == '7' or char == '8' or char == '9':\n            # increment the count of prime numbers found so far\n            count += 1\n    \n    # if the count of prime numbers found is odd, the string is not a prime\n    if count % 2 == 1:\n        return False\n    else:\n        return True",
        "test": "assert prime_length('abcdcba') == True",
        "num_ids": 876
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, 10):\n        num = i * n\n        if num > 9:\n            break\n        if str(num) == '1':\n            count += 1\n    return count",
        "test": "assert starts_one_ends(0) == 0 # case 1",
        "num_ids": 613
    },
    {
        "number": 84,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n                Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n        a string of binary number\n    \"\"\"\n    total_sum = 0\n    while N > 0:\n        digit = N % 10\n        total_sum += digit\n        N //= 10\n    return str(total_sum)",
        "test": "assert solve(1000) == \"1\"",
        "num_ids": 1324
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        if i % 2 == 0 and i % 2!= lst[i-1] % 2:\n            result.append(lst[i])\n    return result\n",
        "test": "assert add([4, 2, 6, 7]) == 2, \"The code seems to be correct\"",
        "num_ids": 811
    },
    {
        "number": 86,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n    # Remove all white spaces from the string\n    s = s.replace(' ', '')\n\n    # Split the string into words\n    words = s.split()\n\n    # Sort the words alphabetically and join them back into a string\n    shuffled = ''.join(sorted(words))\n\n    return shuffled",
        "test": "assert anti_shuffle('Hi') == 'Hi'",
        "num_ids": 1167
    },
    {
        "number": 87,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2D data, as a nested list,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    def sort_coords(lst, x):\n        lst.sort(key=lambda x: (x[0], x[1]))\n        return [(x[0], x[1]) for x in lst]\n    \n    rows = []\n    for i in range(len(lst)):\n        rows.extend(sort_coords(lst[i], x))\n    \n    rows.sort(key=lambda x: (x[0], x[1], -1))\n    \n    return rows",
        "test": "assert get_row([], 1) == []",
        "num_ids": 2103
    },
    {
        "number": 88,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    # Create a copy of the original array\n    new_array = array.copy()\n\n    # Sort the array using bubble sort algorithm\n    for i in range(len(new_array)):\n        for j in range(len(new_array) - 1 - i):\n            if sum(new_array[j], new_array[j + 1]) % 2!= 0:\n                new_array[j], new_array[j + 1] = new_array[j + 1], new_array[j]\n\n    return new_array\n",
        "test": "assert sort_array([5]) == [5]",
        "num_ids": 1649
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def rotate_alphabet(string):\n    \"\"\"Rotates the alphabet in a string by shifting the letters down by two multiplied to two places.\n    \"\"\"\n    rotated = \"\"\n    for char in string:\n        shifted = chr((ord(char) - 65) + 4 * 2)\n        rotated += shifted\n    return rotated\n\n\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    encrypted = rotate_alphabet(s)\n    return encrypted",
        "test": "assert encrypt('asdfghjkl') == 'ewhjklnop', \"encrypt('asdfghjkl') should return 'ewhjklnop'\"",
        "num_ids": 1169
    },
    {
        "number": 90,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    if len(lst) == 0:\n        return None\n\n    smallest = lst[0]\n    second_smallest = float('inf')\n\n    for i in range(1, len(lst)):\n        if lst[i] < smallest:\n            second_smallest = smallest\n            smallest = lst[i]\n        elif lst[i] < second_smallest:\n            second_smallest = lst[i]\n\n    return second_smallest\n",
        "test": "assert next_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 1181
    },
    {
        "number": 91,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?', or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    boredoms = 0\n    words = S.split()\n    for word in words:\n        if word.startswith(\"I\") and '.' not in word and '?' not in word and '!' not in word:\n            boredoms += 1\n    return boredoms",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 1013
    },
    {
        "number": 92,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) \u279e True\n\n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n\n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n\n    # Check if all numbers are integers\n    if not all(isinstance(n, int) for n in [x, y, z]):\n        return False\n\n    # Check if the sum of the two numbers is equal to the given numbers\n    sum_of_numbers = x + y + z\n    if x == sum_of_numbers or y == sum_of_numbers or z == sum_of_numbers:\n        return True\n    else:\n        return False",
        "test": "assert any_int(3, 2, 2) == False, \"False\"",
        "num_ids": 1299
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \"\"\"\n\n    # Define a dictionary to hold vowels and their corresponding letters\n    vowels = {'a': 'e', 'e': 'a', 'i': 'o', 'o': 'i', 'u': 'u', 'A': 'E', 'E': 'A', 'I': 'O', 'O': 'I', 'U': 'U'}\n\n    # Initialize an empty string to hold the encoded message\n    encoded_message = ''\n\n    # Iterate over each character in the message\n    for char in message:\n\n        # If the character is a letter, swap it with the letter that appears 2 places ahead of it in the english alphabet\n        if char.isalpha():\n            encoded_message += vowels[char] if char in vowels else char\n\n        # If the character is a vowel, replace it with the corresponding letter that appears 2 places ahead of it in the english alphabet\n        else:\n            encoded_message += char\n\n    return encoded_message",
        "test": "assert encode('This is a message') == 'tHKS KS C MGSSCGG'",
        "num_ids": 1406
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef largest_prime_digit_sum(lst):\n    largest_prime = float('-inf')\n    prime_sum = 0\n\n    for num in lst:\n        if is_prime(num):\n            prime_sum += sum(int(digit) for digit in str(num))\n            if num > largest_prime:\n                largest_prime = num\n\n    return prime_sum\n\nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nprint(largest_prime_digit_sum(lst))  # Output: 10\n\nlst = [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]\nprint(largest_prime_digit_sum(lst))  # Output: 25\n\nlst = [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]\nprint(largest_prime_digit_sum(lst))  # Output: 13\n\nlst = [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]\nprint(largest_prime_digit_sum(lst))  # Output: 11\n\nlst = [0, 81, 12, 3, 1, 21]\nprint(largest_prime_digit_sum(lst))  # Output: 3\n\nlst = [0, 8, 1, 2, 1, 7]\nprint(largest_prime_digit_sum(lst))  # Output: 7",
        "test": "assert skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25",
        "num_ids": 2797
    },
    {
        "number": 95,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.islower()!= key.isupper():\n            return False\n    return True",
        "test": "assert check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) == False",
        "num_ids": 1503
    },
    {
        "number": 96,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    \n    # Function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Create an empty list to store the prime numbers\n    prime_nums = []\n\n    # Iterate through numbers up to n\n    for num in range(1, n + 1):\n        # If the current number is prime and less than n, add it to the list\n        if is_prime(num) and num < n:\n            prime_nums.append(num)\n\n    return prime_nums",
        "test": "assert count_up_to(5) == [2, 3], \"count_up_to(5) should return [2, 3]\"",
        "num_ids": 1508
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def multiply(a, b):\n    \"\"\"\n    This function takes two integers a and b and returns the product of their unit digits.\n    It assumes the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16\n    multiply(19, 28) should return 72\n    multiply(2020, 1851) should return 0\n    multiply(14, -15) should return 20\n    \"\"\"\n    if a < 0 or b < 0:\n        return None\n\n    def reverse_digits(num):\n        reversed_num = 0\n        while num > 0:\n            reversed_num = reversed_num * 10 + num % 10\n            num //= 10\n        return reversed_num\n\n    def convert_to_unit_digits(num):\n        num_in_units = reverse_digits(num)\n        return num_in_units\n\n    result = convert_to_unit_digits(a) * convert_to_unit_digits(b)\n\n    return result",
        "test": "assert multiply(19, 28) == 72, \"multiply(19, 28) should return 72.\"",
        "num_ids": 1249
    },
    {
        "number": 98,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0:  # checking even indices\n            if s[i] == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U':\n                count += 1\n    return count",
        "test": "assert count_upper('abcdefg') == 0",
        "num_ids": 848
    },
    {
        "number": 99,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    # Split the value string into a list of integers\n    int_list = value.split(\".\")\n\n    # If there is only one integer, return it as is\n    if len(int_list) == 1:\n        return int(value)\n\n    # Check if there are two integers in the list\n    if len(int_list) == 2:\n        # Convert the integers to integers and then round away from zero\n        int_list[0] = int(int_list[0])\n        int_list[1] = int(int_list[1])\n        if int_list[0] == int_list[1]:\n            return int(value) - 1\n        else:\n            return int(value)\n\n    # Check if the first integer is equidistant from two integers\n    diff = abs(int_list[1] - int_list[0])\n    if diff < 1:\n        # Round the first integer away from zero\n        int_list[0] -= 1 if int_list[0] == 0 else 0\n        # Check if the second integer is equidistant from the first integer\n        diff = abs(int_list[1] - int_list[0])\n        if diff < 1:\n            # Round the second integer away from zero\n            int_list[1] -= 1 if int_list[1] == 0 else 0\n            return int(\"\".join(map(str, int_list)))\n\n    # Check if the second integer is equidistant from two integers\n    diff = abs(int_list[0] - int_list[1])\n    if diff < 1:\n        # Round the second integer away from zero\n        int_list[1] -= 1 if int_list[1] == 0 else 0\n        return int(\"\".join(map(str, int_list)))\n\n    # If the integers are not equidistant, return the integer with the smallest magnitude\n    int_list[0] = abs(int_list[0])\n    int_list[1] = abs(int_list[1])\n    if int_list[0] > int_list[1]:\n        return int(\"\".join(map(str, int_list)))\n    else:\n        return int(\"\".join(map(str, int_list)))",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 1834
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    num_stones = [n]  # initialize with one stone\n\n    # loop through each level of stones\n    for i in range(1, n):\n        if i % 2 == 0:\n            # if the next level is even, add an even number of stones\n            num_stones.append(num_stones[-1] + 2)\n        else:\n            # if the next level is odd, add an odd number of stones\n            num_stones.append(num_stones[-1] + 1)\n\n    return num_stones",
        "test": "assert make_a_pile(5) == [5, 10, 15, 20, 25]",
        "num_ids": 1395
    },
    {
        "number": 101,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def words_string(s):\n    \"\"\"\n    This function takes a string as input and splits it into words separated by commas or spaces.\n    It then returns an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Split the string into words using the split method of the string class\n    words = s.split(',')\n    # Return the array of words\n    return words",
        "test": "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
        "num_ids": 988
    },
    {
        "number": 102,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    num = x\n    # Loop until the biggest even integer number is found\n    while num <= y:\n        num += 2\n        if num % 2 == 0:\n            return num\n    # If no even integer number is found, return -1\n    return -1",
        "test": "assert choose_num(13, 12) == -1, \"The function should return the correct result for choose_num(13, 12).\"",
        "num_ids": 1219
    },
    {
        "number": 103,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    rounded_avg = round(avg)\n    binary = bin(rounded_avg)[2:]\n    return binary",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 1368
    },
    {
        "number": 104,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # initialize an empty list to store unique digits\n    unique_digits = []\n\n    # iterate through each element in the list\n    for num in x:\n        # check if the element has any even digit\n        if num % 2!= 0:\n            # add the element to the unique digits list\n            unique_digits.append(num)\n\n    # return the unique digits sorted in increasing order\n    return sorted(unique_digits)\n",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
        "num_ids": 1248
    },
    {
        "number": 105,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    # Check if the array is empty\n    if not arr:\n        return []\n\n    # Check if the array has only one element\n    if len(arr) == 1:\n        return [arr[0]]\n\n    # Sort the array\n    arr.sort()\n\n    # Reverse the sorted array\n    arr.reverse()\n\n    # Replace each digit with its corresponding name\n    digit_names = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n\n    # Initialize the result array\n    result = []\n\n    # Iterate through the sorted array\n    for num in arr:\n        # If the number is in the valid range, replace it with its name\n        if 1 <= num <= 9:\n            result.append(digit_names[num])\n\n    return result",
        "test": "assert by_length([]) == []",
        "num_ids": 2756
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    factors = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(sum(range(1, i+1)))\n    return factors",
        "test": "assert f(5) == [1, 2, 6, 24, 15], \"The function f(5) should return [1, 2, 6, 24, 15]\"",
        "num_ids": 1089
    },
    {
        "number": 107,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)",
        "test": "assert even_odd_palindrome(3) == (1, 2)",
        "num_ids": 1640
    },
    {
        "number": 108,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    total_sum = 0\n    count = 0\n\n    for num in arr:\n        if num < 0:\n            total_sum -= abs(num)\n        else:\n            total_sum += num\n\n        if total_sum > 0 and total_sum % 10 == 0:\n            count += 1\n\n    return count",
        "test": "assert count_nums([]) == 0, \"Empty array should have 0 count_nums\"",
        "num_ids": 981
    },
    {
        "number": 109,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import random\n\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].\n    The numbers in the array will be randomly ordered. Your task is to determine\n    if it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performing 2 right shift operations, non-decreasing order can\n        be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation: It is not possible to get non-decreasing order for the given\n        array by performing any number of right shift operations.\n    \"\"\"\n\n    if len(arr) == 0:\n        return True\n\n    max_num = max(arr)\n    min_num = min(arr)\n\n    for i in range(max_num - min_num + 1):\n        arr.append(i + min_num)\n\n    arr.sort()\n\n    return arr == sorted(arr)",
        "test": "assert move_one_ball([3, 4, 5, 1, 2]) == True, \"Expected True, but got {}\".format(move_one_ball([3, 4, 5, 1, 2]))",
        "num_ids": 2273
    },
    {
        "number": 110,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    \n    # Check if both lists have the same length\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n    \n    # Loop through the elements of lst1 and lst2\n    for i in range(len(lst1)):\n        if lst1[i] % 2!= lst2[i] % 2:\n            return \"NO\"\n    \n    # If all elements are even and exchanged, return \"YES\"\n    return \"YES\"",
        "test": "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"",
        "num_ids": 1906
    },
    {
        "number": 111,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \n    \"\"\"\n\n    # initialize an empty dictionary\n    letter_count = {}\n\n    # split the input string into a list of letters\n    letters = test.split()\n\n    # loop through each letter in the list\n    for letter in letters:\n        # if the letter is already in the dictionary, increment its count\n        if letter in letter_count:\n            letter_count[letter] += 1\n        # if the letter is not in the dictionary, add it with a count of 1\n        else:\n            letter_count[letter] = 1\n\n    # loop through the dictionary and find the letter with the highest count\n    max_count = 0\n    max_letter = ''\n    for letter, count in letter_count.items():\n        if count > max_count:\n            max_count = count\n            max_letter = letter\n\n    # if there are no occurrences of a letter, return an empty dictionary\n    if max_count == 0:\n        return {}\n\n    # if there is only one occurrence of a letter, return it as a dictionary with that letter as key and its count as value\n    elif max_count == 1:\n        return {max_letter: max_count}\n\n    # if there are more occurrences of a letter, return a dictionary with all of them as keys and their count as values\n    else:\n        return {letter: count for letter, count in letter_count.items()}\n",
        "test": "assert histogram('a') == {'a': 1}",
        "num_ids": 1831
    },
    {
        "number": 112,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # create a new string to store the palindromes\n    palindromes = []\n    \n    # iterate through each character in s\n    for char in s:\n        # if the character is equal to any character in c, delete it and continue\n        if char in c:\n            s = s[:s.index(char)] + s[s.index(char)+1:]\n        # if the character is not equal to any character in c, add it to the palindromes list\n        else:\n            palindromes.append(char)\n    \n    # check if the result string is palindrome\n    if s == s[::-1]:\n        return (s, True)\n    else:\n        return (s, False)",
        "test": "assert reverse_delete(\"abcdef\", \"b\") == ('acdef', False)",
        "num_ids": 1301
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def odd_count(lst):\n    \"\"\"\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n    \"\"\"\n    count = 0\n    odd_count = []\n    for i in lst:\n        digits = [int(d) for d in i]\n        count += len(digits)\n        odd_count.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, i, len(i), count))\n    return odd_count",
        "test": "assert odd_count(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]",
        "num_ids": 1742
    },
    {
        "number": 114,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n\n    # Initialize sum and min_sum as the first element\n    sum = nums[0]\n    min_sum = nums[0]\n\n    # Iterate through the array and update sum and min_sum as needed\n    for num in nums[1:]:\n        sum += num\n        min_sum = min(min_sum, sum)\n\n    return min_sum",
        "test": "assert minSubArraySum([-1, -2, -3]) == -6, \"minSubArraySum([-1, -2, -3]) should return -6\"",
        "num_ids": 925
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def max_fill(grid, capacity):\n    import math\n    \n    n = len(grid)\n    m = len(grid[0])\n    \n    if n == 0 or m == 0:\n        return 0\n    \n    dp = [[0] * m for _ in range(n)]\n    \n    for i in range(1, n):\n        for j in range(1, m):\n            if grid[i][j] == 1:\n                if i > 0 and grid[i-1][j] == 1:\n                    dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n                if j > 0 and grid[i][j-1] == 1:\n                    dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n                \n    max_count = 0\n    for i in range(1, n):\n        for j in range(1, m):\n            if dp[i][j] > max_count:\n                max_count = dp[i][j]\n                \n    return max_count",
        "test": "assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5",
        "num_ids": 1630
    },
    {
        "number": 116,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Sort the array of non-negative integers by the number of ones in their binary representation\n    sorted_arr = sorted(arr, key=lambda x: int(bin(x)[2:]))\n    return sorted_arr",
        "test": "assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]",
        "num_ids": 1558
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = s.split()\n    consonants = set(\"bcdfghjklmnpqrstvwxyz\")\n    result = []\n    for word in words:\n        if len(set(word) & consonants) == n:\n            result.append(word)\n    return result",
        "test": "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]",
        "num_ids": 1821
    },
    {
        "number": 118,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n    \n    You may assume that the given string contains English letter only.\n    \n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    vowels = \"aeiouAEIOU\"\n    left = word[:-1]\n    right = word[1:]\n\n    left_count = 0\n    right_count = 0\n    closest_vowel = \"\"\n\n    for char in left:\n        if char.lower() in vowels:\n            left_count += 1\n        else:\n            break\n\n    for char in right:\n        if char.lower() in vowels:\n            right_count += 1\n        else:\n            break\n\n    if left_count < right_count:\n        closest_vowel = \"u\"\n    elif left_count > right_count:\n        closest_vowel = \"U\"\n    else:\n        closest_vowel = \"\"\n\n    return closest_vowel",
        "test": "assert get_closest_vowel(\"yogurt\") == \"u\", \"The function should return 'u' for 'yogurt'\"",
        "num_ids": 1387
    },
    {
        "number": 119,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def match_parens(lst):\n    left_parentheses = 0\n    for char in lst:\n        if char == '(':\n            left_parentheses += 1\n        elif char == ')':\n            if left_parentheses == 0:\n                return 'No'\n            else:\n                left_parentheses -= 1\n    if left_parentheses == 0:\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert match_parens([')', ')']) == 'No'",
        "num_ids": 1364
    },
    {
        "number": 120,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    \n    # sort the array in ascending order\n    arr.sort()\n    \n    # return the first k elements\n    return arr[:k]",
        "test": "assert maximum([-3, -4, 5], 3) == [-4, -3, 5]",
        "num_ids": 1617
    },
    {
        "number": 121,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    sum = 0\n    for num in lst:\n        if num % 2!= 0:\n            sum += num\n    return sum",
        "test": "assert solution([3, 3, 3, 3, 3]) == 9",
        "num_ids": 884
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Initialize the sum variable to zero\n    total_sum = 0\n    # Loop through the first k elements of the array\n    for i in range(k):\n        # Convert the current element to a string and get the first two digits\n        digit_1 = str(arr[i])[0]\n        digit_2 = str(arr[i])[1]\n        # Calculate the sum of the elements with at most two digits from the array\n        total_sum += int(digit_1) + int(digit_2)\n    return total_sum",
        "test": "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24 # sum of 21 + 3",
        "num_ids": 1598
    },
    {
        "number": 123,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    if n <= 1:\n        return [n]\n    else:\n        sequence = [n]\n        while True:\n            n = sequence[-1]\n            if n <= 1:\n                return sequence[::-1]\n            elif n % 2 == 0:\n                sequence.append(n // 2)\n            else:\n                sequence.append(3 * n + 1)\n        return sequence[::-1]",
        "test": "assert get_odd_collatz(1) == [1]",
        "num_ids": 1900
    },
    {
        "number": 124,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def valid_date(date):\n    \"\"\"Validates a given date string and returns True if the date is valid\n    otherwise False. The date is valid if all of the following rules are\n    satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    For example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n\n    # Check if the date is empty\n    if not date:\n        return False\n\n    # Split the date string into its components\n    month, day, year = date.split('-')\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\n    # Check if the month is valid\n    if not 1 <= month <= 12:\n        return False\n\n    # Check if the day is valid\n    if not 1 <= day <= 31:\n        return False\n\n    # Check if the year is valid\n    if year < 1000 or year > 9999:\n        return False\n\n    # Check if the number of days is valid\n    if month == 2 and day > 29:\n        return False\n    elif month == 4 or month == 6 or month == 9 or month == 11:\n        if day > 30:\n            return False\n    else:\n        days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        if month == 2:\n            days_in_month[1] = 29\n        if month == 4 or month == 6 or month == 9 or month == 11:\n            days_in_month[0] = 30\n        if month == 1:\n            days_in_month[1] = 31 - day\n        if month == 3:\n            days_in_month[2] = 31\n        if month == 5 or month == 7 or month == 8 or month == 10:\n            days_in_month[4] = 30\n        if month == 8 or month == 10:\n            days_in_month[2] = 31\n        if month == 12:\n            days_in_month[5] = 31 - day\n        if day > days_in_month[month - 1]:\n            return False\n\n    # Check if the date is valid\n    return True",
        "test": "assert valid_date('15-01-2012') == False",
        "num_ids": 3002
    },
    {
        "number": 125,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def split_words(txt):\n    # Split the text by whitespace and return a list of words\n    words = txt.split()\n    # Check if there are no whitespaces and return None if so\n    if not words:\n        return None\n    # Check if there are no commas and return None if so\n    if not any(w.strip(',').islower() for w in words):\n        return None\n    # Check if the number of lower-case letters with odd order in the alphabet\n    # ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    count = 0\n    for word in words:\n        count += sum(1 for c in word if c.islower() and ord(c) % 2 == 1)\n    return words[:count]",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 1257
    },
    {
        "number": 126,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n    if len(lst) <= 1:\n        return True\n\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n\n    return True",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 1492
    },
    {
        "number": 127,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_prime(n):\n    \"\"\"Returns True if n is prime, else False.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n    \"\"\"\n    if not is_prime(min(interval1[0], interval2[0])) or not is_prime(max(interval1[1], interval2[1])):\n        return \"NO\"\n    \n    if interval1[0] <= interval2[0] and interval1[1] >= interval2[1]:\n        return \"YES\"\n    elif interval2[0] <= interval1[0] and interval2[1] >= interval1[1]:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\"",
        "num_ids": 1910
    },
    {
        "number": 128,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n\n    total_product = 1\n    for num in arr:\n        total_product *= (num * (-1 if num < 0 else 1))\n\n    magnitudes = sum(abs(num) for num in arr)\n    return magnitudes * total_product",
        "test": "assert prod_signs([0, 1]) == 0",
        "num_ids": 1102
    },
    {
        "number": 129,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n    rows = len(grid)\n    cols = len(grid[0])\n\n    for i in range(rows):\n        for j in range(cols):\n            if i == 0 and j == 0:\n                grid[i][j] = 1\n            elif j == 0:\n                grid[i][j] += grid[i][j-1]\n            elif i == 0:\n                grid[i][j] += grid[i-1][j]\n            else:\n                grid[i][j] += min(grid[i-1][j], grid[i][j-1])\n\n    result = []\n    for i in range(rows):\n        for j in range(cols):\n            result.append(grid[i][j])\n\n    return result[:k]\n",
        "test": "assert minPath([[5,9,3],[4,1,6],[7,8,2]], 1) == [1]",
        "num_ids": 3243
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    a, b, c = 0, 1, 1\n    result = [a]\n    for i in range(2, n + 1):\n        a, b, c = b, c, a + b + c\n        result.append(c)\n    return result",
        "test": "assert tri(4) == [3], \"The tri(4) function returns the expected output.\"",
        "num_ids": 1153
    },
    {
        "number": 131,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    i = 0\n    while i < len(str(n)):\n        digit = int(str(n)[i])\n        if digit % 2 == 1:\n            product *= digit\n        i += 1\n    return product",
        "test": "assert digits(1) == 1, \"Expected 1, got {}\".format(digits(1))",
        "num_ids": 784
    },
    {
        "number": 132,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_nested(string):\n    stack = []\n\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            if stack.pop()!= '[':\n                return False\n\n    return not stack",
        "test": "assert is_nested('[[]]') == True",
        "num_ids": 547
    },
    {
        "number": 133,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    # Initialize a variable to store the sum of squared numbers\n    total_sum = 0\n\n    # Loop through each element in the list\n    for num in lst:\n        # Round the number to the upper int(Ceiling)\n        rounded_num = round(num)\n\n        # Add the squared value to the total sum\n        total_sum += rounded_num ** 2\n\n    # Return the total sum\n    return total_sum",
        "test": "assert sum_squares([1,2,3]) == 14",
        "num_ids": 1381
    },
    {
        "number": 134,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    # remove leading and trailing whitespaces and split on space\n    words = txt.strip().split()\n\n    # check if the last word is an alphabetical character\n    if words[-1] == \"\" or words[-1].isalpha():\n        return True\n    else:\n        return False",
        "test": "assert check_if_last_char_is_a_letter(\"apple pi e\") == True",
        "num_ids": 1533
    },
    {
        "number": 135,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    if len(arr) < 2:\n        return -1\n\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i-1\n            break\n\n    if max_index == -1:\n        return -1\n\n    for i in range(max_index+1, len(arr)):\n        if arr[i] >= arr[i-1]:\n            max_index = i-1\n            break\n\n    if max_index == -1:\n        return -1\n\n    return max_index",
        "test": "assert can_arrange([1,2,4,3,5]) == 3",
        "num_ids": 1066
    },
    {
        "number": 136,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    max_negative = None\n    min_positive = None\n\n    for num in lst:\n        if num < 0:\n            if max_negative is None or num > max_negative:\n                max_negative = num\n        else:\n            if min_positive is None or num < min_positive:\n                min_positive = num\n\n    return (max_negative, min_positive)",
        "test": "assert largest_smallest_integers([]) == (None, None)",
        "num_ids": 1300
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if isinstance(a, (int, float)):\n        if isinstance(b, (int, float)):\n            return max(a, b)\n        elif isinstance(b, str):\n            return float(b)\n    elif isinstance(a, str):\n        if isinstance(b, (int, float)):\n            return float(a)\n        elif isinstance(b, str):\n            return max(a, b)\n    return None",
        "test": "assert compare_one(1, 2.5) == 2.5",
        "num_ids": 1316
    },
    {
        "number": 138,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    \n    if n == 1:\n        return True\n    \n    i = 2\n    while i <= n//2:\n        if n % i == 0:\n            return False\n        i += 2\n    \n    return True\n\nprint(is_equal_to_sum_even(4)) # False\nprint(is_equal_to_sum_even(6)) # False\nprint(is_equal_to_sum_even(8)) # True",
        "test": "assert is_equal_to_sum_even(6) == False",
        "num_ids": 990
    },
    {
        "number": 139,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    # Initialize a variable to store the factorial of the input number\n    factorial = 1\n    \n    # Loop through each number from 2 to n\n    for i in range(2, n+1):\n        # Multiply the current factorial by the i-th power of the input number\n        factorial *= i\n    \n    # Return the factorial\n    return factorial",
        "test": "assert special_factorial(0) == 1",
        "num_ids": 927
    },
    {
        "number": 140,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\")",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 974
    },
    {
        "number": 141,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    \n    # Check if the file's name contains exactly one dot '.'\n    if '.' not in file_name:\n        return 'No'\n    \n    # Check if there are no more than three digits in the file's name\n    if len(file_name) > 4:\n        return 'No'\n    \n    # Check if the substring before the dot is not empty and starts with a latin alphapet letter\n    if not file_name[0].isalpha():\n        return 'No'\n    \n    # Check if the substring after the dot is one of these: ['txt', 'exe', 'dll']\n    if file_name[file_name.rindex('.')+1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'",
        "test": "assert file_name_check(\"1example.dll\") == 'No', \"file_name_check should return 'No' when given '1example.dll'\"",
        "num_ids": 2108
    },
    {
        "number": 142,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_squares(lst):\n    if not lst:\n        return 0\n    else:\n        sum = 0\n        for i in range(len(lst)):\n            if i % 3 == 0 or i % 4 == 0:\n                sum += lst[i]**2\n            else:\n                sum += lst[i]\n        return sum",
        "test": "assert sum_squares([]) == 0",
        "num_ids": 1148
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n\n    # Remove all non-letter characters from the sentence\n    sentence = ''.join(c for c in sentence if c.isalpha())\n\n    # Initialize an empty list to store the prime numbers\n    primes = []\n\n    # Iterate through each character in the sentence\n    for i in range(len(sentence)):\n        # Check if the current character is prime\n        if sentence[i]!= sentence[i + 1] and sentence[i] + 1 == sentence[i + 1]:\n            # If it is, add it to the list of primes\n            primes.append(sentence[i])\n\n    # Sort the list of primes in ascending order\n    primes.sort()\n\n    # Create a new string by concatenating the first prime number\n    # followed by the remaining characters in the sentence\n    result = primes[0]\n    for c in sentence[len(primes[0]):]:\n        result += c\n\n    return result",
        "test": "assert words_in_sentence(\"lets go for swimming\") == \"go for\"",
        "num_ids": 1364
    },
    {
        "number": 144,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def simplify(x, n):\n    \"\"\"\n    Implement a function that will simplify the expression x * n.\n    The function returns True if x * n evaluates to a whole number and False otherwise.\n    Both x and n, are string representation of a fraction, and have the following format:\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    Assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    Simplify(\"1/5\", \"5/1\") = True\n    Simplify(\"1/6\", \"2/1\") = False\n    Simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n\n    # check if both n and x are positive integers\n    if n.isdigit() and x.isdigit():\n        # convert n to int and x to int\n        num_n = int(n)\n        den_x = int(x)\n\n        # check if denominator is zero\n        if den_x == 0:\n            return False\n\n        # check if numerator is a whole number\n        if num_n % den_x!= 0:\n            return False\n\n        # check if numerator is divisible by denominator\n        if num_n / den_x!= int(num_n / den_x):\n            return False\n\n        # return True if numerator is a whole number\n        return True\n    else:\n        # return False if either n or x is not a positive integer\n        return False",
        "test": "assert simplify(\"1/6\", \"2/1\") == False",
        "num_ids": 1489
    },
    {
        "number": 145,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # Helper function to find the sum of digits of a given number\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(num))\n\n    # Helper function to find the index of the given number in the original list\n    def find_index(num, nums):\n        for i, n in enumerate(nums):\n            if n == num:\n                return i\n        return -1\n\n    # Sort the list of numbers based on the sum of their digits\n    sorted_nums = sorted(nums, key=lambda x: (digit_sum(x), find_index(x, nums)))\n\n    return sorted_nums",
        "test": "assert order_by_points([]) == []",
        "num_ids": 1735
    },
    {
        "number": 146,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9):\n            count += 1\n\n    return count",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1, \"specialFilter([15, -73, 14, -15]) should return 1\"",
        "num_ids": 1096
    },
    {
        "number": 147,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n        and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(n)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0 and a[i] * a[i] - a[i] + a[j] * a[j] - a[j] + a[k] * a[k] - a[k] == a[i] + a[j] + a[k]:\n                    count += 1\n    return count",
        "test": "assert get_max_triples(10) == 0",
        "num_ids": 1471
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def bf(planet1, planet2):\n    \"\"\"\n    There are eight planets in our solar system: the closer to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    \"\"\"\n\n    # Check if the input strings are valid planet names\n    if planet1 not in (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"):\n        return ()\n\n    if planet2 not in (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"):\n        return ()\n\n    # Calculate the position difference between planet1 and planet2\n    position1 = [149597870.0, 10000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n    position2 = [149597870.0, 10000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n    for i in range(11):\n        position1[i] += [position1[i-1][i+1], position1[i-1][i-1], position1[i-1][i-2], position1[i-1][i-3], position1[i-1][i-4], position1[i-1][i-5], position1[i-1][i-6], position1[i-1][i-7], position1[i-1][i-8]]\n\n    for i in range(11):\n        position2[i] += [position2[i-1][i+1], position2[i-1][i-1], position2[i-1][i-2], position2[i-1][i-3], position2[i-1][i-4], position2[i-1][i-5], position2[i-1][i-6], position2[i-1][i-7], position2[i-1][i-8]]\n\n    # Calculate the eccentricity of both planets\n    ecc1 = position1[1]/position1[0]\n    ecc2 = position2[1]/position2[0]\n\n    # Calculate the inclination of both planets\n    inclination1 = position1[2]/(position1[0]**2)\n    inclination2 = position2[2]/(position2[0]**2)\n\n    # Calculate the mean anomaly of both planets\n    mean_anomaly1 = position1[3]\n    mean_anomaly2 = position2[3]\n\n    # Calculate the right ascension of the Sun\n    right_ascension1 = position1[4] + (mean_anomaly1*15.0)\n    right_ascension2 = position2[4] + (mean_anomaly2*15.0)\n\n    # Calculate the argument of perigee of both planets\n    arg_perigee1 = position1[5]\n    arg_perigee2 = position2[5]\n\n    # Calculate the semi-major axis of both planets\n    semi_major_axis1 = position1[6]\n    semi_major_axis2 = position2[6]\n\n    # Calculate the eccentric anomaly of both planets\n    ecc_anomaly1 = position1[7]\n    ecc_anomaly2 = position2[7]\n\n    # Calculate the ascending node of the ellipse of both planets\n    asc_node1 = position1[8]\n    asc_node2 = position2[8]\n\n    ",
        "test": "assert bf(\"Earth\", \"Mercury\") == (\"Venus\"), \"The function should return 'Venus' for planet1 = 'Earth' and planet2 = 'Mercury'.\"",
        "num_ids": 4159
    },
    {
        "number": 149,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # Create an empty set to store unique words\n    unique_words = set()\n\n    # Loop through the list and add each word to the set\n    for word in lst:\n        unique_words.add(word)\n\n    # Convert the set back to a list of words\n    words = sorted(list(unique_words))\n\n    # Initialize an empty list to store the sorted list\n    result = []\n\n    # Loop through the words and add them to the sorted list if their length is even\n    for i in range(len(words)):\n        if len(words[i]) % 2 == 0:\n            result.append(words[i])\n\n    # Return the sorted list of even-length words\n    return result",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 1708
    },
    {
        "number": 150,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"Return the value of x if n is a prime number, otherwise return the value of y.\"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\nfor n in [7, 15, 34]:\n    print(x_or_y(n, 34, 12))  # Output: 34\n    print(x_or_y(n, 8, 5))     # Output: 5",
        "test": "assert x_or_y(15, 8, 5) == 5, \"x_or_y(15, 8, 5) should return 5\"",
        "num_ids": 1270
    },
    {
        "number": 151,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    '''\n\n    if len(lst) == 0:\n        return 0\n\n    double_sum = 0\n    for num in lst:\n        if not isinstance(num, int) or num < 0:\n            continue\n        if num % 2!= 0:\n            square = num ** 2\n            double_sum += square\n\n    return double_sum",
        "test": "assert double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0",
        "num_ids": 1256
    },
    {
        "number": 152,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def compare(game, guess):\n    \"\"\"\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    :param game: An array of scores.\n    :param guess: An array of guesses.\n    :return: An array of the same length denoting how far off each guess was. If they have guessed correctly,\n              the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \"\"\"\n    num_matches = len(game)\n    diff_list = []\n    \n    for i in range(num_matches):\n        if game[i] == guess[i]:\n            diff_list.append(0)\n        else:\n            diff_list.append(abs(guess[i] - game[i]))\n    \n    return diff_list",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 2244
    },
    {
        "number": 153,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n\n    # Initialize variables\n    class_name_str = class_name.replace(' ', '_')\n    strongest_extension_name = ''\n    strongest_extension_strength = -1\n    best_extension = ''\n\n    # Iterate through the list of extensions and find the strongest one\n    for extension in extensions:\n        extension_name_str = extension.replace(' ', '_')\n        extension_strength = abs(len(extension_name_str) - len(str(len(extension_name_str))))\n        if extension_strength > strongest_extension_strength:\n            strongest_extension_name = extension_name_str\n            strongest_extension_strength = extension_strength\n            best_extension = extension\n\n    # Return the strongest extension in the format 'ClassName.StrongestExtensionName'\n    return f\"{class_name_str}.{strongest_extension_name}\"",
        "test": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'",
        "num_ids": 2295
    },
    {
        "number": 154,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"\n    This function checks if the second word or any of its rotations is a substring in the first word.\n\n    Args:\n        a (str): The first word\n        b (str): The second word\n\n    Returns:\n        bool: True if the second word or any of its rotations is a substring in the first word, False otherwise\n    \"\"\"\n\n    # Convert all the characters in the first word to lowercase and remove the spaces\n    a = ''.join(c.lower() for c in a)\n    b = ''.join(c.lower() for c in b)\n\n    # Check if the second word or any of its rotations is a substring in the first word\n    for i in range(len(a)):\n        if b in a[:i] or b in a[i+1:]:\n            return True\n\n    return False",
        "test": "assert cycpattern_check(\"abcd\",\"abd\") == False",
        "num_ids": 1499
    },
    {
        "number": 155,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if digit.isdigit():\n            digit = int(digit)\n            if digit % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)",
        "test": "assert even_odd_count(123) == (1, 2)",
        "num_ids": 922
    },
    {
        "number": 156,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_symbols = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    symbols = list(roman_symbols.keys())\n    symbols.sort(reverse=True)\n    result = ''\n    for symbol in symbols:\n        while number >= symbol:\n            result += roman_symbols[symbol]\n            number -= symbol\n    return result.lower()",
        "test": "assert int_to_mini_roman(19) == 'xix'",
        "num_ids": 1743
    },
    {
        "number": 157,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    \n    # Check if any of the sides are zero\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    \n    # Check if the other two sides are equal\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    \n    # If none of the above conditions are true, the triangle is not right-angled\n    return False",
        "test": "assert right_angle_triangle(1, 2, 3) == False",
        "num_ids": 1316
    },
    {
        "number": 158,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find_max(words):\n    \"\"\"\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n    \"\"\"\n    max_unique = \"\"\n    max_unique_count = 0\n    for word in words:\n        unique_count = len(set(word))\n        if unique_count > max_unique_count:\n            max_unique_count = unique_count\n            max_unique = word\n    return max_unique",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 1254
    },
    {
        "number": 159,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    \n    # check if there are enough carrots to eat\n    if need > remaining:\n        return [number, 0]\n    \n    # calculate the number of carrots to eat\n    eaten = min(need, remaining)\n    \n    # update the remaining number of carrots\n    remaining -= eaten\n    \n    # return the updated number and remaining carrots\n    return [number + eaten, remaining]",
        "test": "assert eat(5, 6, 10) == [11, 4]",
        "num_ids": 2151
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # Create a dictionary to map operator symbols to their corresponding function calls\n    algebra_dict = {'+': lambda x, y: x + y, '-': lambda x, y: x - y, '*': lambda x, y: x * y, '//': lambda x, y: x // y, **: lambda x, y: x ** y}\n\n    # Check if the length of operator and operand lists is correct\n    if len(operator)!= len(operand) - 1:\n        raise ValueError(\"Invalid operand list length\")\n\n    # Create a new list to store the resulting evaluation of the expression\n    result = []\n\n    # Iterate over the operator list and apply the corresponding function call to the operand list\n    for op in operator:\n        if op in algebra_dict:\n            result.append(algebra_dict[op](operand))\n        else:\n            raise ValueError(\"Invalid operator\")\n\n    # Return the resulting evaluation of the expression\n    return result\n",
        "test": "assert do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9, \"The expression should be 9\"",
        "num_ids": 2272
    },
    {
        "number": 161,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solve(s):\n    \"\"\"\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa.\n    Otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    # Initialize an empty string to store the resulted string\n    resulted = \"\"\n\n    # Loop through each character in the string\n    for i in range(len(s)):\n        # If the current character is a letter, reverse its case\n        if s[i].isalpha():\n            if s[i].islower():\n                resulted += s[i].upper()\n            else:\n                resulted += s[i].lower()\n        # If the current character is not a letter, keep it as is\n        else:\n            resulted += s[i]\n\n    # Return the resulted string\n    return resulted",
        "test": "assert solve(\"ab\") == \"AB\", \"The function should return the resulted string as expected.\"",
        "num_ids": 987
    },
    {
        "number": 162,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\n    if not text:\n        return None\n    import hashlib\n    md5_object = hashlib.md5()\n    md5_object.update(text.encode('utf-8'))\n    return md5_object.hexdigest()",
        "test": "assert string_to_md5('') is None, \"The md5 hash of an empty string is incorrect.\"",
        "num_ids": 998
    },
    {
        "number": 163,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    result = []\n    for i in range(a, b+1, 2):\n        result.append(i)\n    return result\n",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8], \"Error: Incorrect result for generate_integers(2, 8)\"",
        "num_ids": 1105
    }
]