[
    {
        "number": 0,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False",
        "test": "assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True",
        "num_ids": 1333,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Input:\n        paren_string: A string containing multiple groups of nested parentheses.\n\n    Output:\n        A list of strings, each representing a separate group of nested parentheses.\n\n    Description:\n        This function takes a string containing multiple groups of nested parentheses and separates them into separate strings.\n        It ignores any spaces in the input string.\n        For example:\n            >>> separate_paren_groups('( ) (( )) (( )( ))')\n            ['()', '(())', '(()())']\n    \"\"\"\n    # Remove spaces from input string\n    paren_string = paren_string.replace(\" \", \"\")\n\n    # Initialize empty list to store separate groups\n    groups = []\n\n    # Loop through each character in the string\n    for char in paren_string:\n        # If current character is an open parenthesis, add it to the start of a new group\n        if char == '(':\n            groups.append(char)\n        # If current character is a closing parenthesis, add the current group to the list and move to the next character\n        elif char == ')':\n            groups.append(''.join(groups))\n            groups = []\n\n    # Add the last group to the list\n    groups.append(''.join(groups))\n\n    return groups\n",
        "test": "assert separate_paren_groups('(   )   (   )  ') == ['(   )', '()', '()   (   )']",
        "num_ids": 1677,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimals = number - integer_part\n    return decimals",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 759,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    # Initialize a variable to keep track of the minimum balance\n    min_balance = float('inf')\n    \n    # Loop through each operation in the list\n    for operation in operations:\n        # If the operation is a withdrawal, subtract the amount from the balance\n        if operation < 0:\n            # If the new balance is less than the current minimum balance, update the minimum balance\n            if operation - min_balance < 0:\n                min_balance = operation - min_balance\n        # If the operation is a deposit, add the amount to the balance\n        elif operation > 0:\n            min_balance += operation\n    \n    # If the minimum balance is negative, it means there was a fall below zero\n    return min_balance < 0",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 1133,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    mad = 0.0\n    for number in numbers:\n        mad += abs(number - mean)\n    return mad / len(numbers)",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0, \"Test 1 failed\"",
        "num_ids": 1359,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    last_element = numbers[0]\n    result = [last_element]\n    for i in range(1, len(numbers)):\n        if i % 2 == 0:\n            result.append(numbers[i])\n        else:\n            result.append(last_element)\n        last_element = numbers[i]\n    return result",
        "test": "assert intersperse([], 4) == []",
        "num_ids": 1054,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    Args:\n        paren_string (str): The input string.\n\n    Returns:\n        List[int]: The list of nesting levels.\n    \"\"\"\n\n    # Initialize a variable to store the maximum level of nesting seen so far.\n    max_nesting = 0\n\n    # Initialize a variable to store the nesting level of each group.\n    group_nesting = []\n\n    # Loop through each group of parentheses in the string.\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            # Increment the nesting level of the group.\n            group_nesting.append(group_nesting[-1] + 1)\n            # Check if the nesting level of the group is greater than the current maximum.\n            if len(group_nesting) > max_nesting:\n                max_nesting = len(group_nesting)\n        elif char == ')':\n            # Decrement the nesting level of the group.\n            group_nesting.pop()\n\n    # Return the list of nesting levels.\n    return group_nesting",
        "test": "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
        "num_ids": 1364,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 814,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\n    # Initialize sum and product variables\n    sum_ = 0\n    product_ = 1\n\n    # Loop through the list of numbers\n    for num in numbers:\n        # Add the current number to the sum variable\n        sum_ += num\n\n        # Multiply the current number with the product variable\n        product_ *= num\n\n    # Return a tuple containing the sum and product\n    return (sum_, product_)",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 1010,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a given list of integers, generate a list of rolling maximum element found until a given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_numbers = [numbers[0]]\n    for i in range(1, len(numbers)):\n        max_numbers.append(max(max_numbers[-1], numbers[i]))\n    return max_numbers",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4] # correct",
        "num_ids": 1164,
        "indeed": false
    },
    {
        "number": 10,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix that is a palindrome\n    postfix = ''\n    for i in range(len(string)):\n        while string[-i-1] == string[-i]:\n            postfix += string[-i-1]\n        if is_palindrome(postfix):\n            break\n    # Reverse the palindrome prefix\n    prefix = string[-len(postfix):]\n    return prefix + postfix[::-1]",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 1574,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    xor_result = bin(int(a, 2) ^ int(b, 2))[2:]  # XOR of binary representation of strings\n    if len(xor_result) == 0:\n        xor_result = '0'\n    return xor_result\n",
        "test": "assert string_xor('010', '110') == '100' # correct output",
        "num_ids": 852,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n\n    if not strings:\n        return None\n    \n    max_length = len(strings[0])\n    longest_string = strings[0]\n    \n    for string in strings:\n        if len(string) > max_length:\n            max_length = len(string)\n            longest_string = string\n    \n    return longest_string",
        "test": "assert longest(['a', 'bb', 'ccc']) == 'ccc'",
        "num_ids": 781,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b!= 0:\n        a, b = b, a % b\n    return a",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 627,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string \"\"\"\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes",
        "test": "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
        "num_ids": 931,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    :param n: The starting number for the sequence.\n    :return: A string containing space-delimited numbers starting from 0 upto n inclusive.\n    \"\"\"\n    # Initialize an empty string to store the sequence.\n    sequence = \"\"\n    \n    # Iterate through the range of numbers from 0 to n, and append each number to the sequence string.\n    for i in range(n + 1):\n        sequence += str(i) + \" \"\n    \n    # Remove the last space and return the sequence string.\n    return sequence[:-1]",
        "test": "assert string_sequence(0) == '0'",
        "num_ids": 703,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    char_count = {}\n    for char in string:\n        if char.lower() not in char_count:\n            char_count[char.lower()] = 1\n        else:\n            char_count[char.lower()] += 1\n    return len(char_count)",
        "test": "assert count_distinct_characters('Jerry') == 4",
        "num_ids": 920,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    result = []\n    current_note = 'o'\n    current_beat = 1\n    for char in music_string:\n        if char == 'o':\n            if current_note == 'o':\n                current_beat += 4\n            else:\n                current_beat += 2\n        elif char == '|':\n            if current_note == 'o':\n                result.append(current_beat * 4)\n            elif current_note == 'o|':\n                result.append(current_beat * 2)\n            else:\n                result.append(current_beat)\n            current_note = char\n            current_beat = 1\n        else:\n            if current_note == 'o':\n                result.append(current_beat * 4)\n            elif current_note == 'o|':\n                result.append(current_beat * 2)\n            else:\n                result.append(current_beat)\n            current_note = char\n            current_beat = 1\n    if current_note!= 'o':\n        result.append(current_beat * 4 if current_note == 'o|o' else current_beat * 2)\n    return result",
        "test": "assert parse_music('o o|.| o| o|.|.|.|.| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
        "num_ids": 1670,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 966,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    \"\"\"\n    # split the string into a list of strings\n    numbers_list = numbers.split()\n\n    # initialize a variable to store the sorted string\n    sorted_string = \"\"\n\n    # loop through each string in the list\n    for num in numbers_list:\n        # check if the current number is valid\n        if num.isdigit() and int(num) >= 0 and int(num) <= 9:\n            # convert the number to a string and append it to the sorted string\n            sorted_string += str(int(num))\n\n    # return the sorted string\n    return sorted_string",
        "test": "assert sort_numbers('three one five') == 'one three five'",
        "num_ids": 1052,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    # Initialize variables\n    closest_distance = float('inf')\n    closest_elements = None\n\n    # Loop through the numbers and find the closest elements\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance:\n                closest_distance = distance\n                closest_elements = (numbers[i], numbers[j])\n\n    return closest_elements",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
        "num_ids": 1967,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # Find the minimum and maximum values in the list\n    min_val = min(numbers)\n    max_val = max(numbers)\n\n    # Rescale the list to be between 0 and 1\n    scaled_numbers = [(x - min_val) / (max_val - min_val) for x in numbers]\n\n    return scaled_numbers",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 1381,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 737,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)",
        "test": "assert strlen('') == 0",
        "num_ids": 306,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n\n    # Initialize a variable to store the largest divisor found\n    largest = n\n\n    # Loop through all numbers from 2 to n-1\n    for i in range(2, n):\n        # If the current number is divisible by i, update the largest divisor found so far\n        if n % i == 0:\n            largest = i\n\n    # Return the largest divisor found\n    return largest",
        "test": "assert largest_divisor(15) == 5",
        "num_ids": 819,
        "indeed": false
    },
    {
        "number": 25,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    factors.append(n)\n    return factors",
        "test": "assert factorize(8) == [2, 2, 2]",
        "num_ids": 1413,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # Create a set to store the unique elements\n    unique_numbers = set(numbers)\n    # Create an empty list to store the unique elements\n    unique_list = []\n    # Iterate over the unique elements and add them to the unique_list\n    for number in unique_numbers:\n        unique_list.append(number)\n    # Return the unique_list\n    return unique_list",
        "test": "assert remove_duplicates([1, 1, 1]) == [1]",
        "num_ids": 851,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n    # Initialize an empty string to store the flipped string\n    flipped_string = ''\n\n    # Iterate through each character in the string\n    for char in string:\n        # If the character is lowercase, convert it to uppercase\n        if char.islower():\n            flipped_string += char.upper()\n        # If the character is uppercase, convert it to lowercase\n        elif char.isupper():\n            flipped_string += char.lower()\n\n    return flipped_string",
        "test": "assert flip_case('hello') == 'HELLO', \"Test 2 failed\"",
        "num_ids": 539,
        "indeed": false
    },
    {
        "number": 28,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    \n    Args:\n        strings (List[str]): List of strings to concatenate\n    \n    Returns:\n        str: Concatenated string\n    \n    \"\"\"\n    concatenated_string = ''\n    for string in strings:\n        concatenated_string += string\n    return concatenated_string",
        "test": "assert concatenate([]) == ''",
        "num_ids": 462,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 707,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return list(filter(lambda x: x > 0, l))",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 943,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(n):\n    \"\"\"Return True if the given number is prime, and False otherwise.\n\n    Parameters:\n    n: the number to check for primality\n\n    Returns:\n    True if n is prime, False otherwise\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert is_prime(6) == False",
        "num_ids": 814,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x**2 +... xs[n] * x**n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 == 0 and max(xs)!= 0:\n        for i in range(len(xs) - 1, -1, -1):\n            if xs[i] == 0:\n                return xs[i] / 2\n        return None\n    else:\n        return None",
        "test": "assert round(find_zero([-6, 11, -6, 1]), 2) == 1.0",
        "num_ids": 2224,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    result = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result.append(l[i])\n        else:\n            result.append(l[i])\n    result.sort()\n    return result",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 1474,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def unique(l: list) -> list:\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 594,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if not l:\n        return None\n    else:\n        return max(l)",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 890,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\"\"\"\n\n    count = 0\n    if n < 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Check if n is divisible by 11\n    if n % 11 == 0:\n        count += 1\n\n    # Check if n is divisible by 13\n    if n % 13 == 0:\n        count += 1\n\n    return count",
        "test": "assert fizz_buzz(50) == 0, \"Incorrect result for fizz_buzz(50).\"",
        "num_ids": 820,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    # Initialize two pointers at the start and end of the list\n    i = 0\n    j = len(l) - 1\n\n    # While i is less than the length of the list\n    while i < j:\n        # If the current value of l[i] is even, swap it with the value at the even index\n        if l[i] % 2 == 0:\n            l[i], l[j] = l[j], l[i]\n        # If the current value of l[j] is even, swap it with the value at the even index\n        elif l[j] % 2 == 0:\n            l[i], l[j] = l[j], l[i]\n        # If the current value of l[i] is odd, increment i\n        else:\n            i += 1\n\n    # Return the sorted list\n    return l",
        "test": "assert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]",
        "num_ids": 1353,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    groups = s.split(\" \")\n    return \" \".join([groups[i] for i in range(len(groups))])",
        "test": "assert decode_cyclic(encode_cyclic(\"a\")) == \"a\"",
        "num_ids": 1326,
        "indeed": false
    },
    {
        "number": 39,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_fib(n: int) -> int:\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n % 2 == 0:\n        # If the number is even, it's not a Fibonacci number and hence prime.\n        return -1\n    else:\n        # Otherwise, find the nth Fibonacci number that's also prime and then return it.\n        a, b = 0, 1\n        for i in range(n - 1):\n            c = a + b\n            if is_prime(c):\n                a = b\n                b = c\n        return b",
        "test": "assert prime_fib(1) == 2",
        "num_ids": 1070,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    Takes a list of integers as input and returns True if there are three distinct\n    elements in the list that sum to zero, and False otherwise.\n\n    Args:\n        l (list): A list of integers.\n\n    Returns:\n        bool: True if there are three distinct elements in the list that sum to zero,\n                and False otherwise.\n\n    Examples:\n        >>> triples_sum_to_zero([1, 3, 5, 0])\n        False\n        >>> triples_sum_to_zero([1, 3, -2, 1])\n        True\n        >>> triples_sum_to_zero([1, 2, 3, 7])\n        False\n        >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n        True\n        >>> triples_sum_to_zero([1])\n        False\n    \"\"\"\n    seen = set()\n    for num in l:\n        if num in seen:\n            return True\n        seen.add(num)\n\n    return False",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 1615,
        "indeed": false
    },
    {
        "number": 41,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    car_positions = []\n    left_car = 0\n    right_car = 0\n    count = 0\n\n    while left_car < n:\n        car_positions.append(left_car)\n        left_car += 1\n\n    while right_car < n:\n        car_positions.append(right_car)\n        right_car += 1\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if car_positions[i] + car_positions[j] == n:\n                count += 1\n                break\n\n    return count\n",
        "test": "assert car_race_collision(1) == 0, \"Incorrect output for the first test.\"",
        "num_ids": 1706,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def incr_list(l):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x+1 for x in l]",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 1068,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    # Initialize variables\n    num_set = set()\n    sum_set = set()\n\n    # Iterate through the list and update the sets\n    for num in l:\n        if num in num_set and num in sum_set:\n            return True\n        if num in num_set:\n            num_set.remove(num)\n        num_set.add(num)\n\n    # If all elements are in num_set, the lists have the same sum\n    return False\n",
        "test": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 1347,
        "indeed": false
    },
    {
        "number": 44,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"Base number must be greater than or equal to 10.\")\n    elif base == 10:\n        return str(x)\n    elif base == 2:\n        return format(x, 'b')\n    elif base == 8:\n        return format(x, 'o')\n    elif base == 16:\n        return format(x, 'x')\n    else:\n        raise ValueError(\"Invalid base number.\")",
        "test": "assert change_base(8, 2) == '1000'",
        "num_ids": 1018,
        "indeed": false
    },
    {
        "number": 45,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h",
        "test": "assert triangle_area(5, 3) == 7.5, \"Error: Test failed for triangle_area(5, 3)\"",
        "num_ids": 417,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def fib4(n: int):\n    \"\"\"The Fibonacci sequence is a sequence of numbers in which each number is the sum of the two preceding ones, starting from 0 and 1. The sequence goes on until the nth term, which is 1 in this case. Please write a function to efficiently compute the n-th element of the Fibonacci sequence.\"\"\"\n    if n == 0 or n == 1:\n        return n\n\n    a, b = 0, 1\n    for i in range(2, n + 1):\n        a, b = b, a + b\n\n    return b",
        "test": "assert fib4(0) == 0",
        "num_ids": 1920,
        "indeed": false
    },
    {
        "number": 47,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sorted_list = sorted(l)\n    if len(sorted_list) % 2 == 0:\n        return (sorted_list[len(sorted_list) // 2 - 1] + sorted_list[len(sorted_list) // 2]) / 2\n    else:\n        return sorted_list[len(sorted_list) // 2]",
        "test": "assert median([3, 1, 2, 4, 5]) == 3",
        "num_ids": 1036,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    # Convert text to lowercase and remove non-alphanumeric characters\n    text = ''.join(c for c in text.lower() if c.isalnum())\n\n    # Check if text is equal to its reverse\n    return text == text[::-1]\n",
        "test": "assert is_palindrome('') == True",
        "num_ids": 751,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    # check if n is even or odd\n    if n % 2 == 0:\n        return n\n    else:\n        return (p - (n // 2) * (p - 1)) % p",
        "test": "assert modp(1101, 101) == 2",
        "num_ids": 938,
        "indeed": false
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"olleh\"",
        "num_ids": 979,
        "indeed": false
    },
    {
        "number": 51,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 780,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(num < t for num in l)",
        "test": "assert below_threshold([1, 20, 4, 10], 5) == False",
        "num_ids": 631,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y",
        "test": "assert add(2, 3) == 5",
        "num_ids": 340,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    :param s0: str: the first string\n    :param s1: str: the second string\n    :return: bool: True if the strings have the same characters, False otherwise\n    \"\"\"\n    return sorted(s0) == sorted(s1)",
        "test": "assert same_chars('abcd', 'dddddddabc') == True",
        "num_ids": 992,
        "indeed": false
    },
    {
        "number": 55,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)",
        "test": "assert fib(1) == 1",
        "num_ids": 486,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "test": "assert correct_bracketing(\"<\") is False",
        "num_ids": 1649,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    # Helper function to compare two lists\n    def compare(lst1, lst2):\n        for i in range(len(lst1)):\n            if lst1[i] < lst2[i]:\n                return False\n            elif lst1[i] > lst2[i]:\n                return True\n        return True\n\n    # Check if list is already monotonic\n    if l[0] > l[1]:\n        return False\n\n    # Traverse the list and compare adjacent elements\n    for i in range(1, len(l)):\n        if l[i] <= l[i-1]:\n            return False\n\n    return True",
        "test": "assert monotonic([1, 2, 4, 20]) == True",
        "num_ids": 776,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Convert both lists to sets to remove duplicates\n    l1_set = set(l1)\n    l2_set = set(l2)\n\n    # Find the intersection of the two sets\n    common_set = l1_set.intersection(l2_set)\n\n    # Convert the set back to a list and sort it\n    common_list = sorted(list(common_set))\n\n    return common_list",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 1452,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    if n <= 1:\n        return 1\n\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return i\n\n    return n",
        "test": "assert largest_prime_factor(2048) == 2",
        "num_ids": 922,
        "indeed": false
    },
    {
        "number": 60,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total",
        "test": "assert sum_to_n(30) == 465",
        "num_ids": 784,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack or stack.pop()!= \"(\":\n                return False\n    return not stack",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 782,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import numpy as np\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    if not isinstance(xs, list):\n        raise ValueError(\"Input must be a list\")\n    \n    derivatives = []\n    for x in xs:\n        derivatives.append(x)\n    \n    derivatives_array = np.array(derivatives)\n    return derivatives_array",
        "test": "assert derivative([1, 2, 3]) == [2, 6]",
        "num_ids": 1170,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def fibfib(n: int) -> int:\n    \"\"\"The Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    \n    a, b = 0, 1\n    \n    for i in range(n):\n        c = a + b\n        a, b = b, c\n    \n    return b",
        "test": "assert fibfib(5) == 4",
        "num_ids": 1952,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\n\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    vowels_count = 0\n    for c in s:\n        if c in vowels and c!= 'y':\n            vowels_count += 1\n    return vowels_count",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 889,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    result = \"\"\n    while shift > 0:\n        remainder = x % 10\n        result = str(remainder) + result\n        x //= 10\n        shift -= 1\n    if shift == 0:\n        return result\n    elif shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return result",
        "test": "assert circular_shift(12, 2) == \"12\"",
        "num_ids": 808,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    # Initialize the sum to 0\n    sum = 0\n\n    # Iterate over each character in the string\n    for char in s:\n        # Convert the character to an integer\n        num = ord(char)\n\n        # Check if the character is an uppercase letter\n        if num >= ord('A') and num <= ord('Z'):\n            # Add the character's ASCII code to the sum\n            sum += num\n\n    # Return the sum\n    return sum",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 899,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def fruit_distribution(s, n):\n    fruit_list = s.split()\n    apples = fruit_list[0]\n    oranges = fruit_list[1]\n\n    mangoes = n - int(apples) - int(oranges)\n\n    return mangoes",
        "test": "assert fruit_distribution(\"0 apples and 1 oranges\", 3) == 3 - 0 - 1 == 2",
        "num_ids": 1276,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                         so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n    def find_smallest_even_value(arr):\n        smallest_value = float('inf')\n        smallest_index = -1\n        for i, value in enumerate(arr):\n            if value % 2 == 0:\n                if value < smallest_value:\n                    smallest_value = value\n                    smallest_index = i\n        return smallest_value, smallest_index\n\n    even_value, even_index = find_smallest_even_value(arr)\n    if even_value == 0:\n        return [even_value, even_index]\n\n    def find_smallest_index(arr, start_index):\n        smallest_value = float('inf')\n        smallest_index = start_index\n        for i, value in enumerate(arr):\n            if value % 2 == 0:\n                if value < smallest_value:\n                    smallest_value = value\n                    smallest_index = i\n                elif value == smallest_value:\n                    return i\n        return smallest_index\n\n    smallest_index = find_smallest_index(arr, even_index)\n    return [even_value, smallest_index]",
        "test": "assert pluck([4,2,3]) == [2, 1]",
        "num_ids": 1715,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    \n    # Initialize the greatest integer and its frequency as -1\n    greatest = -1\n    max_freq = 0\n    \n    # Iterate through the list and update the greatest and max_freq\n    for num in lst:\n        if num > 0:\n            freq = lst.count(num)\n            if freq >= max_freq and freq > greatest:\n                greatest = num\n                max_freq = freq\n    \n    return greatest",
        "test": "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3  # 3 is the greatest integer with frequency greater than or equal to 3.",
        "num_ids": 1260,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # If the list is empty, return it\n    if not lst:\n        return lst\n\n    # If the list has only one element, return it\n    if len(lst) == 1:\n        return lst\n\n    # Find the maximum value in the list\n    max_val = max(lst)\n\n    # Split the list into two halves\n    left = [x for x in lst if x <= max_val]\n    right = [x for x in lst if x > max_val]\n\n    # Recursively sort the two halves\n    return strange_sort_list(left) + [max_val] + strange_sort_list(right)",
        "test": "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]",
        "num_ids": 1482,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return round(0.5 * a * b, 2)\n    else:\n        return -1",
        "test": "assert triangle_area(1, 2, 10) == -1, \"Triangle area is incorrect.\"",
        "num_ids": 1092,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def will_it_fly(q, w):\n    balanced = True\n    max_possible_weight = 100\n    sum_of_elements = sum(q)\n    \n    if len(q) % 2 == 0 or q[0]!= q[-1]:\n        balanced = False\n    \n    if sum_of_elements <= max_possible_weight:\n        balanced = False\n    \n    return balanced",
        "test": "assert will_it_fly([1, 2], 5) == False",
        "num_ids": 1196,
        "indeed": false
    },
    {
        "number": 73,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    min_num = float('inf')\n\n    for i in range(n):\n        for j in range(i, n):\n            if arr[i] == arr[j] and arr[i]!= arr[i-1]!= arr[i+1]:\n                change = abs(i - j) + 1\n                if change < min_num:\n                    min_num = change\n\n    return min_num",
        "test": "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1",
        "num_ids": 1772,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    if len(lst1)!= len(lst2):\n        return lst1\n\n    result = []\n    for i in range(len(lst1)):\n        if len(lst1[i]) < len(lst2[i]):\n            result.append(lst1[i])\n        else:\n            result.append(lst2[i])\n\n    return result",
        "test": "assert total_match([], []) == []",
        "num_ids": 1698,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    # Define a list of 3 prime numbers\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n\n    # Check if the given number is a multiply of 3 prime numbers\n    for prime in primes:\n        if a % prime == 0:\n            return True\n\n    # If the given number is not a multiply of 3 prime numbers, return False\n    return False",
        "test": "assert is_multiply_prime(28) == True",
        "num_ids": 984,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Return True if x is a simple power of n, False otherwise.\"\"\"\n    # Convert n to an integer and check if it is a power of x\n    if n == 1:\n        return True\n    elif n == 2 or x == 1:\n        return True\n    elif n % x == 0:\n        # Check if n is a power of x by using the fact that n is a multiple of x\n        return True\n    else:\n        return False",
        "test": "assert is_simple_power(1, 4) == True",
        "num_ids": 624,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a == 1:\n        return True\n    elif a == 0:\n        return True\n    elif a % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(a**0.5)+1, 2):\n            if a % i == 0:\n                return False\n        return True",
        "test": "assert iscube(2) == False, \"iscube(2) should return False\"",
        "num_ids": 1038,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    count = 0\n    for digit in num:\n        if digit.upper() in '2357BDCF':\n            count += 1\n        if count >= 2:\n            return count\n    return count",
        "test": "assert hex_key(\"1077E\") == 2, \"Test case 2 failed\"",
        "num_ids": 2009,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\n    # convert the decimal to binary\n    binary = bin(decimal)[2:]\n\n    # add the extra characters to the beginning and end of the string\n    binary = 'db' + binary + 'db'\n\n    return binary",
        "test": "assert decimal_to_binary(15) == \"db1111db\", \"Test 1\"",
        "num_ids": 1150,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_happy(s):\n    \"\"\"\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n\n    count = 0\n    prev_char = s[0]\n\n    for i in range(1, len(s)):\n        if s[i]!= prev_char:\n            count += 1\n            prev_char = s[i]\n        if count % 3!= 0:\n            return False\n\n    return True",
        "test": "assert is_happy(\"a\") is False",
        "num_ids": 1103,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n             4.0                A+\n             > 3.7                A \n             > 3.3                A- \n             > 3.0                B+\n             > 2.7                B \n             > 2.3                B-\n             > 2.0                C+\n             > 1.7                C\n             > 1.3                C-\n             > 1.0                D+ \n             > 0.7                D \n             > 0.0                D-\n             0.0                E\n    \"\"\"\n    letter_grades = []\n\n    for g in grades:\n        if g >= 4.0:\n            letter_grades.append('A+')\n        elif g >= 3.7:\n            letter_grades.append('A')\n        elif g >= 3.3:\n            letter_grades.append('A-')\n        elif g >= 3.0:\n            letter_grades.append('B+')\n        elif g >= 2.7:\n            letter_grades.append('B')\n        elif g >= 2.3:\n            letter_grades.append('B-')\n        elif g >= 2.0:\n            letter_grades.append('C+')\n        elif g >= 1.7:\n            letter_grades.append('C')\n        elif g >= 1.3:\n            letter_grades.append('C-')\n        elif g >= 1.0:\n            letter_grades.append('D+ ')\n        elif g >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n\n    return letter_grades\n",
        "test": "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']",
        "num_ids": 2691,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    if len(string) < 2:\n        return False\n\n    if len(string) == 2:\n        return True\n\n    for i in range(2, int(len(string)**0.5)+1):\n        if len(string) % i == 0:\n            return False\n\n    return True\n",
        "test": "assert prime_length('Hello') == True",
        "num_ids": 810,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def starts_one_ends(n):\n    count = 0\n    for i in range(10):\n        if str(i) + str(n - i) == str(n):\n            count += 1\n    return count",
        "test": "assert starts_one_ends(0) == 0",
        "num_ids": 523,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n                Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n            a string of binary number\n    \"\"\"\n\n    # Initialize the sum and the count of digits\n    total_sum = 0\n    count = 0\n\n    # Iterate until we have no more digits to sum\n    while N > 0:\n        # Add the last digit to the total_sum\n        total_sum += N % 10\n        # Remove the last digit from N\n        N //= 10\n        # Increment the count of digits\n        count += 1\n\n    # Convert the total_sum to binary and return it\n    return bin(total_sum)[2:]",
        "test": "assert solve(1000) == '1'",
        "num_ids": 1153,
        "indeed": true
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    result = 0\n    for i in range(0, len(lst), 2):\n        result += lst[i]\n    return result",
        "test": "assert add([1, 2, 3, 4, 5]) == 9, \"The function should return 9.\"",
        "num_ids": 695,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n    words = s.split()\n    shuffled_words = []\n    for i in range(len(words)):\n        shuffled_words.append(words[i])\n    shuffled_words.sort(key=lambda x: ''.join(sorted(map(str, [ord(c) for c in x]))))\n    shuffled_sentence =''.join(shuffled_words)\n    return shuffled_sentence\n",
        "test": "assert anti_shuffle('Hi') == 'Hi'",
        "num_ids": 1498,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    Given a nested list `lst` and an integer `x`,\n    return a list of tuples, where each tuple contains the\n    coordinate (row, column) of the element at index `x`\n    in the row `x` of the `lst` matrix.\n    The coordinates are sorted by rows and then by columns.\n    \"\"\"\n    rows = []\n    for row in lst:\n        sorted_row = sorted(enumerate(row), key=lambda x: x[0])\n        for (i, coord) in sorted_row:\n            if coord[1] == x:\n                rows.append((i, coord[1]))\n                break\n    return rows",
        "test": "assert get_row([], 1) == []",
        "num_ids": 1942,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sort_array(array):\n    # Sort the array using bubble sort\n    for i in range(len(array)):\n        for j in range(len(array)-i-1):\n            if array[j] > array[j+1]:\n                array[j], array[j+1] = array[j+1], array[j]\n\n    # Check if the sum of the first and last indices is even or odd\n    if sum(array[:len(array)//2]) % 2 == 0:\n        return array[len(array)//2:]\n    else:\n        return array[:len(array)//2]",
        "test": "assert sort_array([]) == []",
        "num_ids": 2218,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    alphabets = 'abcdefghijklmnopqrstuvwxyz'\n    rotated_alphabets = [alphabets[i] for i in range(len(alphabets)) * 2]\n    encrypted_s = ''\n    for letter in s:\n        encrypted_s += rotated_alphabets[(ord(letter) - 97) // 2]\n    return encrypted_s",
        "test": "assert encrypt('asdfghjkl') == 'ewhjklnop'",
        "num_ids": 1300,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    if not lst:\n        return None\n\n    smallest = lst[0]\n    second_smallest = lst[1]\n\n    for num in lst[2:]:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest:\n            second_smallest = num\n\n    return second_smallest if second_smallest!= smallest else None",
        "test": "assert next_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 1178,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    boredom_count = 0\n    words = S.split()\n    for word in words:\n        if word.lower() == \"i\":\n            boredom_count += 1\n    return boredom_count",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 929,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n\n    # Check if all the numbers are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        return False\n\n    # Check if one of the numbers is equal to the sum of the other two\n    if x + y == z:\n        return True\n    else:\n        return False",
        "test": "assert any_int(3, 2, 2) == False, \"any_int(3, 2, 2) should return False\"",
        "num_ids": 1322,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    \n    # Define the vowels in the english alphabet\n    vowels = \"AEIOUaeiou\"\n    \n    # Loop through each character in the message and check if it is a letter\n    for i in range(len(message)):\n        if message[i].isalpha():\n            # Check if the current character is a vowel\n            if message[i].lower() in vowels:\n                # If it is a vowel, replace it with the letter that appears 2 places ahead in the english alphabet\n                message = message[:i] + chr((ord(vowels[vowels.index(message[i].lower())]) + 2) % 26 + ord('A')) + message[i+1:]\n            # If the current character is not a vowel, keep it as it is\n            else:\n                message = message[:i] + message[i] + message[i+1:]\n    \n    return message",
        "test": "assert encode('This is a message') == 'THKS KS C MGSSCGG', \"encode('This is a message') should return 'THKS KS C MGSSCGG'\"",
        "num_ids": 2185,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def is_prime(n):\n    \"\"\"Check if a given number is prime or not.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef largest_prime_sum(lst):\n    \"\"\"Find the largest prime sum and return the sum of its digits.\"\"\"\n    largest = 0\n    for num in lst:\n        if is_prime(num):\n            digit_sum = sum(int(digit) for digit in str(num))\n            if digit_sum > largest:\n                largest = digit_sum\n    return largest\n\ndef main():\n    lst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\n    print(largest_prime_sum(lst))  # Output: 10\n    lst = [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]\n    print(largest_prime_sum(lst))  # Output: 25\n    lst = [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]\n    print(largest_prime_sum(lst))  # Output: 13\n    lst = [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]\n    print(largest_prime_sum(lst))  # Output: 11\n    lst = [0, 81, 12, 3, 1, 21]\n    print(largest_prime_sum(lst))  # Output: 3\n    lst = [0, 8, 1, 2, 1, 7]\n    print(largest_prime_sum(lst))  # Output: 7\n\nif __name__ == '__main__':\n    main()",
        "test": "assert skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25, \"skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])!= 25\"",
        "num_ids": 3116,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\n    if not dict:\n        return False\n\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.isupper():\n            continue\n        if not key.islower():\n            return False\n\n    return True",
        "test": "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
        "num_ids": 1358,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    for i in range(2, n+1):\n        if all(j % i!= 0 for j in range(i, n+1, i)):\n            primes.append(i)\n    return primes",
        "test": "assert count_up_to(11) == [2, 3, 5, 7], \"count_up_to(11) => [2, 3, 5, 7]\"",
        "num_ids": 1785,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def multiply(a, b):\n    \"\"\"\n    Complete the function that takes two integers and returns \n    the product of their unit digits.\n\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14, -15) should return 20.\n\n    Note: You should use the built-in `int` and `str` functions to work with integers and strings, respectively.\n    \"\"\"\n    # convert input to strings\n    str_a = str(a)\n    str_b = str(b)\n\n    # initialize a variable to store the result\n    result = 0\n\n    # iterate over the digits of the input strings\n    for i in range(len(str_a)):\n        # get the current digit of the input strings\n        digit_a = int(str_a[i])\n\n        # get the current digit of the result string\n        digit_b = int(str_b[i])\n\n        # add the current digits of the input strings and the current digit of the result string\n        result += digit_a * digit_b\n\n    # return the result\n    return result",
        "test": "assert multiply(19, 28) == 72, \"The product of 19 and 28 should be 72.\"",
        "num_ids": 1106,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] == 'a' or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u':\n            count += 1\n\n    return count\n",
        "test": "assert count_upper('aBCdEf') == 1",
        "num_ids": 749,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    \n    # Remove any leading or trailing spaces\n    value = value.strip()\n    \n    # Convert the value to a float\n    number = float(value)\n    \n    # Check if the number is equidistant from two integers\n    if number < 0 and number % 2 == 0:\n        # Round the number to the nearest integer\n        return int(number)\n    \n    # Otherwise, round the number away from zero\n    return int(number + (0 if number > 0 else -1))\n",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 1736,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]\n    for i in range(n-1):\n        if n % 2 == 0:\n            pile.append(pile[-1] + pile[-2])\n        else:\n            pile.append(pile[-1] + pile[-2] + 1)\n    return pile",
        "test": "assert make_a_pile(3) == [3, 5, 7]",
        "num_ids": 1492,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    words = s.split(\",\")\n    words = [word.strip() for word in words]\n    return words",
        "test": "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
        "num_ids": 923,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Initialize the variable to store the greatest even integer number\n    max_num = 0\n    # Loop through all integers from x to y\n    for num in range(x, y + 1):\n        # Check if the number is even and greater than or equal to max_num\n        if num % 2 == 0 and num >= max_num:\n            # Update max_num if the new number is greater than max_num\n            max_num = num\n    # Return the max_num if it exists, otherwise return -1\n    return max_num if max_num!= 0 else -1",
        "test": "assert choose_num(13, 12) == -1, \"The function should return -1 for x = 13 and y = 12\"",
        "num_ids": 1055,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    rounded_n = round(n)\n    rounded_m = round(m)\n    total_sum = rounded_n + rounded_m\n    total_count = rounded_n + rounded_m + 1\n    average = total_sum / total_count\n    binary_average = bin(average)[2:]\n    return binary_average",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 1172,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    \n    # create a dictionary to store the count of each digit\n    digit_count = {}\n    \n    # iterate over each element in the list\n    for num in x:\n        # check if the digit is even\n        if num % 2 == 0:\n            continue\n        \n        # add the digit to the dictionary\n        digit_count[num % 10] = digit_count.get(num % 10, 0) + 1\n    \n    # create a list to store unique digits\n    unique_digits = []\n    \n    # iterate over each key in the dictionary\n    for digit in sorted(digit_count.keys()):\n        # check if the count is 1\n        if digit_count[digit] == 1:\n            unique_digits.append(digit)\n    \n    # return the sorted unique digits list\n    return sorted(unique_digits)\n",
        "test": "assert unique_digits([152, 323, 1422, 10]) == []",
        "num_ids": 1267,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    # Check if the array is empty or contains any strange number\n    if len(arr) == 0 or any(x < 1 or x > 9 for x in arr):\n        return []\n\n    # Sort the integers between 1 and 9 inclusive\n    arr.sort(reverse=True)\n\n    # Reverse the resulting array\n    arr.reverse()\n\n    # Replace each digit by its corresponding name\n    result = []\n    for i, digit in enumerate(arr):\n        if 1 <= digit <= 9:\n            result.append(\"One\" if digit == 1 else \"Two\" if digit == 2 else \"Three\" if digit == 3 else \"Four\" if digit == 4 else \"Five\" if digit == 5 else \"Six\" if digit == 6 else \"Seven\" if digit == 7 else \"Eight\" if digit == 8 else \"Nine\")\n        else:\n            continue\n\n    return result",
        "test": "assert by_length([]) == []",
        "num_ids": 2605,
        "indeed": false
    },
    {
        "number": 106,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    # Create an empty list to store the factorials\n    factorials = []\n    \n    # Iterate over the range from 1 to n\n    for i in range(1, n+1):\n        # Check if i is even or if i is the last element of the range\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            factorials.append(factorial)\n        else:\n            factorial = sum(range(1, i+1))\n            factorials.append(factorial)\n    \n    return factorials",
        "test": "assert f(5) == [1, 2, 6, 24, 15], \"Test failed for f(5).\"",
        "num_ids": 1327,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)\n",
        "test": "assert even_odd_palindrome(3) == (1, 2)",
        "num_ids": 1301,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    num = 0\n    has_zero = False\n    has_negative = False\n\n    for num in arr:\n        if num < 0:\n            has_negative = True\n            num = abs(num)\n        elif num == 0:\n            has_zero = True\n        else:\n            has_negative = False\n\n    if has_zero:\n        return 0\n    elif has_negative:\n        return 1\n    else:\n        return len(arr)",
        "test": "assert count_nums([]) == 0, \"Expected: count_nums([]) == 0\"",
        "num_ids": 1292,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import random\n\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n   \n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performing 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation: It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n    \n    # Shifting the first element of the array by 1 position to get the next\n    # element.\n    arr[0] = arr[0] >> 1\n    \n    # Performing the right shift operations for all other elements.\n    for i in range(1, len(arr)):\n        arr[i] = arr[i] >> 1\n        \n        # If the shifting operation does not result in non-decreasing order,\n        # then the array is not sorted.\n        if arr[i] > arr[i - 1]:\n            return False\n    \n    return True",
        "test": "assert move_one_ball([3, 5, 4, 1, 2]) == False",
        "num_ids": 2093,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Sort the lists\n    lst1.sort()\n    lst2.sort()\n    \n    # Check if lst1 and lst2 have the same length\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n    \n    # Check if lst1 and lst2 have the same elements\n    if lst1!= lst2:\n        return \"NO\"\n    \n    # Traverse the lists from right to left and swap elements if they are even\n    for i in range(len(lst1) - 1, -1, -1):\n        if lst1[i] % 2 == 1 and lst2[i] % 2 == 0:\n            lst1[i], lst2[i] = lst2[i], lst1[i]\n        elif lst1[i] % 2 == 0 and lst2[i] % 2 == 1:\n            lst1[i], lst2[i] = lst1[i], lst2[i]\n        elif lst1[i] % 2 == 1 and lst2[i] % 2 == 1:\n            lst1[i] += lst2[i]\n    \n    # Check if lst1 is a list of only even numbers\n    if all(x % 2 == 0 for x in lst1):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"",
        "num_ids": 2370,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    freq = {}\n    words = test.split()\n    for word in words:\n        if word.isalpha():\n            letter = word[0]\n            freq[letter] = freq.get(letter, 0) + 1\n    \n    # Find all the letters that have the same count\n    most_common = {}\n    for letter, count in freq.items():\n        if count > 1:\n            most_common[letter] = count\n    \n    return most_common",
        "test": "assert histogram('') == {}",
        "num_ids": 1560,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    \"\"\"\n    # Remove all the characters in s that are equal to any character in c\n    s = s.replace(c, '')\n    \n    # Check if the result string is palindrome\n    s = ''.join(sorted(set(s)))\n    \n    # Return the result string and True/False for the check\n    return (s, s == s[::-1])",
        "test": "assert reverse_delete(\"abcdef\", \"b\") == ('acdef', False)",
        "num_ids": 1209,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\n    odd_count = []\n    for i in lst:\n        if i.isdigit():\n            num = 0\n            for digit in i:\n                if int(digit) % 2 == 1:\n                    num += 1\n            odd_count.append(f\"the number of odd elements {num} the str{i} of the {i}put.\")\n        else:\n            odd_count.append(f\"Invalid input for {i} in {lst}.\")\n\n    return odd_count",
        "test": "assert odd_count(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]",
        "num_ids": 1993,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    n = len(nums)\n    if n == 0:\n        return 0\n\n    # Initialize a variable to store the minimum sum\n    min_sum = float('inf')\n\n    # Loop through the array\n    for i in range(n):\n        # Calculate the sum of the current sub-array\n        sub_sum = sum(nums[i:])\n\n        # Check if the sum is greater than the current minimum sum\n        if sub_sum < min_sum:\n            min_sum = sub_sum\n\n    return min_sum",
        "test": "assert minSubArraySum([-1, -2, -3]) == -6",
        "num_ids": 960,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def max_fill(grid, capacity):\n    def empty_wells(grid, capacity):\n        import math\n        empty_count = 0\n        for row in grid:\n            for cell in row:\n                if cell == 0:\n                    empty_count += 1\n                    grid[row.index(cell)] = [1]*(capacity - 1) + [0]*(1 + capacity)\n        return empty_count\n\n    def count_max_fill(grid, capacity):\n        max_fill_count = 0\n        for row in grid:\n            for cell in row:\n                if cell == 0:\n                    max_fill_count += 1\n                    grid[row.index(cell)] = [1]*(capacity - 1) + [0]*(1 + capacity)\n        return max_fill_count\n\n    empty_count = empty_wells(grid, capacity)\n    max_fill_count = count_max_fill(grid, capacity)\n    return max_fill_count",
        "test": "assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5",
        "num_ids": 2357,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    ones_count = 0\n    for num in arr:\n        ones_count += bin(num)[2:].count('1')\n    arr.sort(key=lambda x: (-ones_count, x))\n    return arr",
        "test": "assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]",
        "num_ids": 1689,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Remove all punctuation marks from the string s\n    s = ''.join(e for e in s if e.isalnum())\n\n    # Split the string into words\n    words = s.split()\n\n    # Initialize an empty list to store the selected words\n    selected_words = []\n\n    # Iterate over the words and check if they contain exactly n consonants\n    for word in words:\n        if len(set(word)) == n:\n            selected_words.append(word)\n\n    return selected_words",
        "test": "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]",
        "num_ids": 1815,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def get_closest_vowel(word):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    closest_vowel = ''\n    left = 0\n    \n    while left < len(word):\n        if word[left].lower() in vowels:\n            closest_vowel = word[left].lower()\n            break\n        left += 1\n    \n    if closest_vowel:\n        right = left + 1\n        while right < len(word) and word[right].lower() in vowels:\n            right += 1\n        \n        return closest_vowel + word[left:right]\n    else:\n        return \"\"",
        "test": "assert get_closest_vowel(\"FULL\") == \"U\"",
        "num_ids": 1340,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def match_parens(lst):\n    # Initialize variables to store the length of each opening parenthesis\n    opening_parenthesis = 0\n    # Iterate through the list of strings\n    for string in lst:\n        # Check if the string is empty\n        if string == '':\n            # Check if the current string is balanced\n            if opening_parenthesis == 0:\n                return 'No'\n            else:\n                # Update the length of each opening parenthesis\n                opening_parenthesis -= 1\n        # Check if the string is an opening parenthesis\n        elif string[0] == '(':\n            # Increment the length of each opening parenthesis\n            opening_parenthesis += 1\n        # Check if the string is a closing parenthesis\n        elif string[-1] == ')':\n            # Decrement the length of each opening parenthesis\n            opening_parenthesis -= 1\n    # Check if there's a way to make a good string\n    if opening_parenthesis == 0:\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert match_parens([')', '(', ')']) == 'No', 'The function should return \"No\" if there is no way to make a good string'",
        "num_ids": 1303,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[:k]",
        "test": "assert maximum([-3, -4, 5], 3) == [-4, -3, 5]",
        "num_ids": 1475,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n    \"\"\"\n    sum_of_odd_elements = 0\n    for num in lst:\n        if num % 2!= 0:\n            sum_of_odd_elements += num\n    return sum_of_odd_elements\n",
        "test": "assert solution([3, 3, 3, 3, 3]) == 9",
        "num_ids": 909,
        "indeed": false
    },
    {
        "number": 122,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Initialize a sum variable\n    total = 0\n\n    # Loop through the array and check if the first k elements have at most two digits\n    for i in range(k):\n        if arr[i] // 100 == 0:\n            # If the first k elements have at most two digits, add them to the total\n            total += arr[i]\n\n    return total",
        "test": "assert add_elements([1, 2, 3, 4, 5], 5) == 15",
        "num_ids": 1482,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    # Base cases\n    if n < 2:\n        return [n]\n\n    # List to store the odd collatz numbers\n    odd_numbers = []\n\n    # Loop through the numbers from 2 to n-1\n    for num in range(2, n + 1):\n        # If the number is divisible by 2, it is already odd, so don't add it to the list\n        if num % 2 == 0:\n            continue\n\n        # If the number is divisible by 3, it is already an odd collatz number, so don't add it to the list\n        if num % 3 == 0:\n            continue\n\n        # If the number is an odd collatz number, add it to the list\n        odd_numbers.append(num)\n\n    # Sort the list in increasing order\n    odd_numbers.sort()\n\n    return odd_numbers",
        "test": "assert get_odd_collatz(1) == [1]  # The collatz sequence for 1 is [1], so the odd numbers are only 1.",
        "num_ids": 2875,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def valid_date(date):\n    \"\"\"\n    Validate a given date string and return True if it is valid.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n    \"\"\"\n    if not date:\n        return False\n    \n    try:\n        date_parts = date.split(\"-\")\n        month = int(date_parts[0])\n        day = int(date_parts[1])\n        year = int(date_parts[2])\n        \n        if month < 1 or month > 12:\n            return False\n        \n        if day < 1 or day > 31:\n            return False\n        \n        days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        \n        if month in [4, 6, 9, 11]:\n            days_in_month[1] = 29\n        \n        if month in [2]:\n            days_in_month[2] = 28\n            \n        if day < 1 or day > days_in_month[month-1]:\n            return False\n        \n        return True\n        \n    except ValueError:\n        return False",
        "test": "assert valid_date('03-11-2000') == True",
        "num_ids": 2951,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    words = txt.split()\n    if len(words) > 1:\n        return words\n    else:\n        count = 0\n        for i in range(ord('a'), ord('z') + 1):\n            if i % 2 == 0:\n                if count < len(words):\n                    words.append(str(i))\n                    count += 1\n                elif count > len(words):\n                    break\n    return words",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 1493,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    if len(lst) <= 1:\n        return True\n    \n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    \n    return True",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 1529,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n    \"\"\"\n    # Check if the two intervals intersect\n    if (interval1[1] <= interval2[0] and interval2[1] <= interval1[0]):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\", \"No intersection\"",
        "num_ids": 1818,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    \n    if not arr:\n        return None\n    \n    total_mag = 0\n    prod_signs = 1\n    \n    for num in arr:\n        if num > 0:\n            prod_signs *= 1\n        elif num < 0:\n            prod_signs *= -1\n        else:\n            prod_signs *= 0\n            \n        total_mag += abs(num)\n        \n    return total_mag * prod_signs",
        "test": "assert prod_signs([1, 2, 2, -4]) == -9, \"prod_signs([1, 2, 2, -4]) should return -9\"",
        "num_ids": 1250,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def minPath(grid, k):\n    def min_path_helper(grid, i, j, grid_dict, visited, path):\n        if i == len(grid) or j == len(grid[0]) or i < 0 or j < 0 or visited[i][j]:\n            return 0\n\n        if i == len(grid) - 1 and j == len(grid[0]) - 1:\n            path.append(grid[i][j])\n            return 1\n\n        visited[i][j] = True\n        min_val = min_path_helper(grid, i + 1, j, grid_dict, visited, path)\n        min_val = min(min_val, min_path_helper(grid, i, j + 1, grid_dict, visited, path))\n        visited[i][j] = False\n        return min_val\n\n    # Initialize the grid dictionary and visited list\n    grid_dict = {}\n    visited = [[False] * len(grid[0]) for _ in range(len(grid))]\n\n    # Find the minimum path length\n    path = []\n    min_path_length = min_path_helper(grid, 0, 0, grid_dict, visited, path)\n\n    return path",
        "test": "assert minPath([[5,9,3], [4,1,6], [7,8,2]], 1) == [1]",
        "num_ids": 2881,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def tri(n):\n    \"\"\"Returns the first n + 1 numbers of the Tribonacci sequence.\"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    else:\n        sequence = [1, 3]\n        for i in range(2, n):\n            sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence",
        "test": "assert tri(4) == [1, 3, 2, 8]  # test case 2",
        "num_ids": 1187,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def digits(n):\n    \"\"\"Return the product of the odd digits of n.\"\"\"\n    product = 1\n    for i in range(1, n+1, 2):\n        product *= i\n    return product",
        "test": "assert digits(1) == 1",
        "num_ids": 783,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0 or stack.pop()!= '[':\n                return False\n    return len(stack) == 0\n\nprint(is_nested('[]'))  # True\nprint(is_nested('[]]'))  # False\nprint(is_nested('[[]]'))  # True\nprint(is_nested('[][]'))  # False\nprint(is_nested('[]]'))  # False\nprint(is_nested('[[[[]]'))  # True\nprint(is_nested('[[]][[]]'))  # True",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False",
        "num_ids": 753,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n\n    result = 0\n    for num in lst:\n        result += num ** 2\n    result = round(result, 0)\n    return result",
        "test": "assert sum_squares([1,2,3]) == 14",
        "num_ids": 1205,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    last_char = txt[-1]\n    if last_char.isalpha():\n        if txt[-2].isalnum():\n            return False\n        else:\n            return True\n    else:\n        return False",
        "test": "assert check_if_last_char_is_a_letter(\"apple pie\") == False",
        "num_ids": 1468,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] >= arr[i+1]:\n            return i\n    return -1",
        "test": "assert can_arrange([1, 2, 3]) == -1",
        "num_ids": 1150,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # initialize variables\n    a = None\n    b = None\n\n    # iterate through the list and find the largest and smallest integers\n    for num in lst:\n        if num < 0:\n            if a is None or num > a:\n                a = num\n        elif num > 0:\n            if b is None or num < b:\n                b = num\n\n    # return the results\n    return (a, b)",
        "test": "assert largest_smallest_integers([]) == (None, None)",
        "num_ids": 1277,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def compare_one(a, b):\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, str) and isinstance(b, str):\n        if float(a) > float(b):\n            return a\n        elif float(b) > float(a):\n            return b\n        else:\n            return None\n    else:\n        return None",
        "test": "assert compare_one(1, 2.5) == 2.5",
        "num_ids": 1551,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    sum_of_even = 0\n    num = 0\n\n    while num < n:\n        num += 2\n        if num % 2 == 0:\n            sum_of_even += num\n\n    return sum_of_even == 4",
        "test": "assert is_equal_to_sum_even(4) == False, \"is_equal_to_sum_even(4) == False\"",
        "num_ids": 1222,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)",
        "test": "assert special_factorial(0) == 1",
        "num_ids": 1691,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    \n    # Initialize a new string variable to store the fixed text\n    fixed_text = \"\"\n    \n    # Loop through each character in the original text\n    for char in text:\n        # If the character is a space, add an underscore to the fixed text\n        if char == \" \":\n            fixed_text += \"_\"\n        # If the character is not a space, add it to the fixed text as is\n        else:\n            fixed_text += char\n    \n    # If the original text has more than 2 consecutive spaces, replace them with -\n    if len(fixed_text) > 2 and fixed_text[-2] == \" \":\n        fixed_text = fixed_text[:-2] + \"-\"\n    \n    return fixed_text",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 1230,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Check if there are more than three digits in the file name\n    count = 0\n    for char in file_name:\n        if char.isdigit():\n            count += 1\n            if count > 3:\n                return 'No'\n    # Check if the file name contains exactly one dot '.'\n    if file_name.count('.')!= 1:\n        return 'No'\n    # Check if the substring before the dot is empty, and if it starts with a letter from the latin alphapet\n    if not file_name.startswith(file_name.split('.')[0]) or not file_name.split('.')[0].isalpha():\n        return 'No'\n    # Check if the substring after the dot is one of these: ['txt', 'exe', 'dll']\n    if file_name.split('.')[-1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'",
        "test": "assert file_name_check(\"1example.dll\") == 'No', \"file_name_check('1example.dll') should return 'No'\"",
        "num_ids": 2006,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Iterate through each element in the list\n    for i in range(len(lst)):\n        # If the current element is a multiple of 3 and not a multiple of 4, square it\n        if i % 3 == 0 and i % 4!= 0:\n            lst[i] **= 2\n        # If the current element is a multiple of 4 and not a multiple of 3, cube it\n        elif i % 4 == 0 and i % 3!= 0:\n            lst[i] **= 3\n\n    # Iterate through each element in the list again and add it to the sum variable\n    for i in range(len(lst)):\n        sum += lst[i]\n\n    # Return the sum of all entries\n    return sum",
        "test": "assert sum_squares([]) == 0",
        "num_ids": 1333,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    prime_words.sort()\n    return''.join(prime_words)",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\"",
        "num_ids": 1219,
        "indeed": false
    },
    {
        "number": 144,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def simplify(x, n):\n    \"\"\"\n    Simplifies the expression x * n.\n    Returns True if x * n evaluates to a whole number and False otherwise.\n    Both x and n are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n    \"\"\"\n    # Split the numerator and denominator into separate strings\n    numerator, denominator = x.split('/', 1)\n    numerator, denominator = numerator.strip(), denominator.strip()\n\n    # Check if the denominator is zero\n    if denominator == '':\n        return False\n\n    # Convert the denominator to an integer\n    denominator = int(denominator)\n\n    # Simplify the fraction by multiplying it by the numerator and dividing it by the denominator\n    simplified_numerator = int(numerator) * denominator\n    simplified_fraction = simplified_numerator / denominator\n\n    # Convert the simplified fraction to a string\n    simplified_fraction = str(simplified_fraction)\n\n    # Check if the simplified fraction evaluates to a whole number\n    if simplified_fraction.isdigit():\n        return True\n    else:\n        return False",
        "test": "assert simplify(\"1/6\", \"2/1\") == False",
        "num_ids": 1806,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # Convert list to a set to remove duplicates\n    nums = list(set(nums))\n\n    # Sort the list based on the sum of their digits\n    nums.sort(key=lambda x: sum(map(int, str(x))), reverse=True)\n\n    return nums",
        "test": "assert order_by_points([]) == [], \"order_by_points([]) == []\"",
        "num_ids": 1677,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if (num > 10) and (str(num)[0] in '13579') and (str(num)[-1] in '13579'):\n            count += 1\n    return count",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1, \"specialFilter([15, -73, 14, -15]) should return 1\"",
        "num_ids": 1314,
        "indeed": true
    },
    {
        "number": 147,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = list(range(1,n+1))\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if a[i] + a[j] + a[k] % 3 == 0 and a[i] * a[i] - a[i] + a[j] * a[j] - a[j] + a[k] * a[k] - a[k] % 3 == 0:\n                    count += 1\n    return count",
        "test": "assert get_max_triples(6) == 0, \"Expected 0, got {}\".format(get_max_triples(6))",
        "num_ids": 1516,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closer to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\n    # check if the input planet1 and planet2 are correct\n    if planet1 not in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n        return \"\"\n    if planet2 not in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n        return \"\"\n\n    # define the variables for the planets\n    sun = \"Mercury\"\n    planets = [sun]\n\n    # loop through each planet and check if it is between planet1 and planet2\n    for planet in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n        if planet not in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n            continue\n        if planet == sun:\n            continue\n        for i in range(len(planets)):\n            if (planets[i]!= \"Mercury\" and planet == \"Mercury\" or\n                planets[i]!= \"Venus\" and planet == \"Venus\" or\n                planets[i]!= \"Earth\" and planet == \"Earth\" or\n                planets[i]!= \"Mars\" and planet == \"Mars\" or\n                planets[i]!= \"Jupiter\" and planet == \"Jupiter\" or\n                planets[i]!= \"Saturn\" and planet == \"Saturn\" or\n                planets[i]!= \"Uranus\" and planet == \"Uranus\" or\n                planets[i]!= \"Neptune\" and planet == \"Neptune\"):\n                continue\n            if ((planet == \"Mercury\" and planet1 in planets[i]) or\n                (planet == \"Venus\" and planet1 in planets[i]) or\n                (planet == \"Earth\" and planet1 in planets[i]) or\n                (planet == \"Mars\" and planet1 in planets[i]) or\n                (planet == \"Jupiter\" and planet1 in planets[i]) or\n                (planet == \"Saturn\" and planet1 in planets[i]) or\n                (planet == \"Uranus\" and planet1 in planets[i]) or\n                (planet == \"Neptune\" and planet1 in planets[i])):\n                if ((planet == \"Mercury\" and planet2 in planets[i]) or\n                    (planet == \"Venus\" and planet2 in planets[i]) or\n                    (planet == \"Earth\" and planet2 in planets[i]) or\n                    (planet == \"Mars\" and planet2 in planets[i]) or\n                    (planet == \"Jupiter\" and planet2 in planets[i]) or\n                    (planet == \"Saturn\" and planet2 in planets[i]) or\n                    (planet == \"Uranus\" and planet2 in planets[i]) or\n                    (planet == \"Neptune\" and planet2 in planets[i])):\n                    return tuple(sorted([planet1, planet2]))\n\n    return \"\"",
        "test": "assert bf(\"Earth\", \"Mercury\") == (\"Venus\")",
        "num_ids": 5216,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # Create a list of unique words\n    unique_words = list(set(lst))\n    \n    # Create a list of lists where each inner list contains the words with odd lengths\n    odd_lengths = []\n    for word in unique_words:\n        if len(word) % 2 == 1:\n            odd_lengths.append(word)\n    \n    # Create a list of lists where each inner list contains the words with same length\n    same_length = []\n    for word in odd_lengths:\n        if len(word) == len(word[0]):\n            same_length.append(word)\n    \n    # Merge the two lists\n    result = same_length + odd_lengths\n    \n    # Sort the list based on the given rule\n    result.sort()\n    \n    return result\n",
        "test": "assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]",
        "num_ids": 1767,
        "indeed": false
    },
    {
        "number": 150,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y",
        "test": "assert x_or_y(15, 8, 5) == 5, \"x_or_y(15, 8, 5) should return 5\"",
        "num_ids": 938,
        "indeed": true
    },
    {
        "number": 151,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def double_the_difference(lst):\n    if not lst:\n        return 0\n\n    sum_of_squares = 0\n    for num in lst:\n        if not isinstance(num, int) or num < 0:\n            continue\n        square = num ** 2\n        if square % 2 == 1:\n            sum_of_squares += square\n\n    return sum_of_squares",
        "test": "assert double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 == 10",
        "num_ids": 1161,
        "indeed": true
    },
    {
        "number": 152,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def compare(game, guess):\n    \"\"\"\n    This function takes in two arrays, game and guess, where game[i] and guess[i] represent the score and guess for the i-th match, respectively.\n    It returns a new array containing the same length as the input arrays, with each element representing how far off the guess was from the game score.\n    If the guesses are correctly matched, the value at the corresponding index is 0, and if they are not, the value is the absolute difference between the guess and the game score.\n    \"\"\"\n    diff = [abs(game[i]-guess[i]) for i in range(len(game))]\n    return diff",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 1620,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n\n    # Create a dictionary to keep track of the strength of each extension\n    extension_strength = {}\n\n    # Iterate through the extensions and update the strength dictionary\n    for extension in extensions:\n        extension_name = extension.replace(\"'\", \"\")\n        uppercase_extension = extension_name.isupper()\n        lowercase_extension = extension_name.islower()\n        if uppercase_extension:\n            extension_strength[extension_name] = -1\n        elif lowercase_extension:\n            extension_strength[extension_name] = 0\n        else:\n            extension_strength[extension_name] = -2\n\n    # Find the strongest extension based on the strength dictionary\n    max_strength = max(extension_strength.values())\n    max_extension = None\n    for extension, strength in extension_strength.items():\n        if strength == max_strength:\n            max_extension = extension\n            break\n\n    # Find the strongest extension and return the string\n    if max_extension:\n        return f\"{class_name}.{max_extension}\"\n    else:\n        return None",
        "test": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'",
        "num_ids": 2536,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"\n    Check if the second word or any of its rotations is a substring in the first word.\n    \"\"\"\n    def rotate(word):\n        \"\"\"Rotate the word 3 times to check for rotations\"\"\"\n        return word[3:] + word[:3]\n\n    def substring_search(word, pattern):\n        \"\"\"Search for a pattern in a word, and return True if found\"\"\"\n        if pattern in word:\n            return True\n        elif pattern in word[::-1]:\n            return True\n        elif pattern in word[1:]:\n            return True\n        else:\n            return False\n\n    if substring_search(a, b):\n        return True\n    elif substring_search(rotate(a), b):\n        return True\n    else:\n        return False",
        "test": "assert cycpattern_check(\"hello\", \"ell\") == True",
        "num_ids": 994,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Args:\n        num (int): an integer to count the digits of\n\n    Returns:\n        tuple: a tuple containing the number of even and odd digits\n    \"\"\"\n    even = 0\n    odd = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)",
        "test": "assert even_odd_count(123) == (1, 2), \"The function returns an incorrect output for 123\"",
        "num_ids": 858,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_symbols = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    mini_roman_numeral = ''\n\n    for key, value in roman_symbols.items():\n        while number >= value:\n            number -= value\n            mini_roman_numeral += key\n\n    return mini_roman_numeral.lower()",
        "test": "assert int_to_mini_roman(152) == 'clii', 'int_to_mini_roman(152) should return \"clii\"'",
        "num_ids": 2344,
        "indeed": false
    },
    {
        "number": 157,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\n    # Check if the length of any of the sides is zero\n    if a == 0 or b == 0 or c == 0:\n        return False\n\n    # Check if the sum of any of the sides is greater than the length of the \n    # other two sides\n    if a + b > c and a + c > b and b + c > a:\n        return True\n\n    # If none of the conditions are satisfied, the triangle is not a right-angled\n    return False",
        "test": "assert right_angle_triangle(1, 2, 3) == False",
        "num_ids": 1438,
        "indeed": false
    },
    {
        "number": 158,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n\n    max_word = \"\"\n    max_count = 0\n\n    for word in words:\n        word_count = len(word)\n        if word_count > max_count:\n            max_word = word\n            max_count = word_count\n\n    return max_word",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 1112,
        "indeed": false
    },
    {
        "number": 159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def eat(number, need, remaining):\n    if number == 0 and need == 0:\n        return [0, remaining]\n    elif number == 0:\n        return [0, remaining]\n    elif need == 0:\n        return [number, 0]\n    else:\n        total_eaten = number + need\n        remaining_after_meals = remaining - number\n        if remaining_after_meals >= need:\n            meals_needed = need\n        else:\n            meals_needed = remaining_after_meals\n        \n        return [total_eaten, meals_needed]",
        "test": "assert eat(4, 8, 9) == [12, 1]",
        "num_ids": 1931,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n    result = 0\n    for i in range(len(operand) - 1):\n        if operator[0] == '+':\n            result += operand[i]\n        elif operator[0] == '-':\n            result -= operand[i]\n        elif operator[0] == '*':\n            result *= operand[i]\n        elif operator[0] == '//':\n            result //= operand[i]\n        elif operator[0] == '**':\n            result **= operand[i]\n    return result",
        "test": "assert do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9",
        "num_ids": 2279,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def solve(s):\n    # Convert the string to lowercase\n    s = s.lower()\n    # Initialize an empty list to store the reversed characters\n    reversed_chars = []\n    # Loop through the string\n    for i in range(len(s)):\n        # Check if the character is a letter\n        if s[i].isalpha():\n            # Reverse the case of the letter\n            if i == 0 or s[i-1].islower():\n                reversed_chars.append(s[i].upper())\n            else:\n                reversed_chars.append(s[i].lower())\n    # If the string contains no letters, reverse the string\n    if not reversed_chars:\n        return s[::-1]\n    # Otherwise, join the reversed characters into a string and return it\n    return ''.join(reversed_chars)",
        "test": "assert solve(\"ab\") == \"AB\"",
        "num_ids": 875,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()\n",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62', \"The function should return the md5 hash for the given string.\"",
        "num_ids": 883,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    result = []\n    for i in range(a, b+1, 2):\n        result.append(i)\n    return result",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 1239,
        "indeed": false
    }
]