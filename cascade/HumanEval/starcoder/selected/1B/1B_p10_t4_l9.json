[
    {
        "number": 0,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 220,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"Check if in given list of numbers, are any two numbers closer to each other than given threshold.\"\"\"\n    # Sort the list of numbers in ascending order\n    sorted_numbers = sorted(numbers)\n\n    # Loop through all the numbers except the first one\n    for i in range(1, len(sorted_numbers)):\n        # Check if the difference between the two numbers is less than or equal to threshold\n        if abs(sorted_numbers[i] - sorted_numbers[i-1]) <= threshold:\n            return True\n\n    # If no two numbers are closer than the given threshold, return False\n    return False",
        "test": "assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True"
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n\n    # Initialize an empty list to store the groups\n    groups = []\n\n    # Initialize a flag to keep track of whether the current group is open or not\n    is_open = False\n\n    # Loop through the characters in the input string\n    for char in paren_string:\n        # If the character is an opening parenthesis, start a new group\n        if char == '(':\n            is_open = True\n            groups.append('')\n        # If the character is a closing parenthesis, end the current group\n        elif char == ')':\n            is_open = False\n\n            # If the group is not empty, add it to the list\n            if len(groups[-1]) > 0:\n                groups.append(groups[-1])\n\n            # Remove the last empty group from the list\n            groups.pop()\n\n    # Return the list of groups\n    return groups",
        "test": "assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']"
    },
    {
        "number": 2,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part, decimals = divmod(number, 1)\n    return decimals",
        "test": "assert truncate_number(0.0) == 0.0"
    },
    {
        "number": 3,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 210,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \n    Args:\n        operations (List[int]): A list of deposit and withdrawal operations on a bank account that\n            starts with zero balance.\n    \n    Returns:\n        bool: True if at any point the balance of account falls below zero, False otherwise.\n    \"\"\"\n    \n    total_balance = 0\n    for operation in operations:\n        if operation > 0:\n            total_balance += operation\n        elif operation < 0:\n            return True\n    return total_balance == 0",
        "test": "assert below_zero([1, 2, 3]) == False"
    },
    {
        "number": 4,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # Calculate the mean of the input numbers\n    mean = sum(numbers) / len(numbers)\n    # Calculate the centerpoint\n    centerpoint = mean\n    \n    # Calculate the MAD for each element\n    mad_list = []\n    for number in numbers:\n        mad = abs(number - centerpoint)\n        mad_list.append(mad)\n    \n    # Calculate the mean of the MADs\n    mad_mean = sum(mad_list) / len(mad_list)\n    \n    return mad_mean",
        "test": "assert mean_absolute_deviation([1.0, 1.0, 1.0, 1.0]) == 0.0"
    },
    {
        "number": 5,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 210,
        "answer": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i > 0 and numbers[i] == numbers[i-1]:\n            # Delimeter already inserted, skip to next element\n            continue\n        result.append(numbers[i])\n        if i < len(numbers)-1 and numbers[i] == numbers[i+1]:\n            # Delimeter already inserted, skip to next element\n            continue\n        result.append(delimeter)\n    return result",
        "test": "assert intersperse([], 4) == []"
    },
    {
        "number": 6,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    Args:\n        paren_string (str): The string that represents multiple groups for nested parentheses separated by spaces.\n\n    Returns:\n        List[int]: The deepest level of nesting of parentheses in the input string.\n    \"\"\"\n\n    # Split the string into groups of parentheses separated by spaces\n    groups = paren_string.split()\n\n    # Initialize the deepest level of nesting to 0\n    deepest_level = 0\n\n    # Iterate through each group of parentheses\n    for group in groups:\n        # If the group is empty, skip it\n        if not group:\n            continue\n\n        # Check if the group has any other characters than parentheses\n        if any(char not in '()' for char in group):\n            return [deepest_level]  # Return the deepest level of nesting\n\n        # If the group has any parentheses, check if it is a balanced pair or an unbalanced pair\n        # If it's a balanced pair, increment the deepest level of nesting\n        if group[0] in '()':\n            if group[-1] in '()':\n                deepest_level += 1\n            else:\n                deepest_level += 2\n        # If it's an unbalanced pair, decrement the deepest level of nesting\n        elif group[0] == group[-1]:\n            deepest_level -= 1\n\n    return [deepest_level]  # Return the deepest level of nesting",
        "test": "assert parse_nested_parens('(())()') == [1]"
    },
    {
        "number": 7,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings",
        "test": "assert filter_by_substring([], 'a') == []"
    },
    {
        "number": 8,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n\n    # initialize sum and product variables\n    sum_ = 0\n    product_ = 1\n\n    # iterate through the list of integers and add them to the sum and product variables\n    for num in numbers:\n        sum_ += num\n        product_ *= num\n\n    # return the sum and product\n    return (sum_, product_)",
        "test": "assert sum_product([]) == (0, 1)"
    },
    {
        "number": 9,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_elements = []\n    rolling_max_elements = []\n    \n    for i, num in enumerate(numbers):\n        if i == 0:\n            rolling_max_elements.append(num)\n            max_elements.append(num)\n        else:\n            rolling_max_elements.append(max(num, rolling_max_elements[-1]))\n            max_elements.append(rolling_max_elements[-1])\n    \n    return max_elements",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]"
    },
    {
        "number": 10,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    max_palindrome = ''\n    for i in range(len(string)):\n        max_palindrome = string[:i] + string[i:]\n        if is_palindrome(max_palindrome):\n            break\n    if not max_palindrome:\n        return ''\n    min_prefix = len(string) + 1\n    for i in range(len(string) - 1, -1, -1):\n        min_prefix = min(min_prefix, i + 1)\n        if string[:min_prefix] == max_palindrome[:min_prefix]:\n            break\n    return string[:min_prefix]",
        "test": "assert make_palindrome('') == ''"
    },
    {
        "number": 11,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Initialize variables\n    xor_result = ''\n    # Iterate through each character in the strings\n    for i in range(min(len(a), len(b))):\n        # XOR the corresponding characters\n        xor_result += str(int(a[i]) ^ int(b[i]))\n    # Return the result as a string\n    return xor_result",
        "test": "assert string_xor('010', '110') == '100' # True"
    },
    {
        "number": 12,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\n    if not strings:\n        return None\n\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n\n    return longest_string",
        "test": "assert longest(['a', 'b', 'c']) == 'a'"
    },
    {
        "number": 13,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a",
        "test": "assert greatest_common_divisor(25, 15) == 5, \"The function should return 5 for a and b = 25 and 15\""
    },
    {
        "number": 14,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 220,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefix = string[:i+1]\n        prefixes.append(prefix)\n    return prefixes",
        "test": "assert all_prefixes('a') == ['a']"
    },
    {
        "number": 15,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    sequence = []\n    for i in range(n + 1):\n        sequence.append(str(i))\n    return''.join(sequence)",
        "test": "assert string_sequence(0) == '0'"
    },
    {
        "number": 16,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 210,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert the string to lowercase\n    string = string.lower()\n\n    # Initialize an empty dictionary to keep track of the frequency of characters\n    char_freq = {}\n\n    # Iterate through the string and update the frequency of each character in the dictionary\n    for char in string:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    # Return the number of distinct characters in the string\n    return len(char_freq)",
        "test": "assert count_distinct_characters('Jerry') == 4"
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 110,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    notes = {'.': 1, '|': 2, 'o': 4}\n    beats = []\n    for note in music_string:\n        if note in notes:\n            beats.append(notes[note])\n        else:\n            if beats:\n                beats.append(beats[-1])\n    return beats",
        "test": "assert parse_music('') == []"
    },
    {
        "number": 18,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    :param string: The original string.\n    :param substring: The substring to find.\n    :return: The count of the occurrences of the substring in the original string.\n    \"\"\"\n\n    count = 0\n    left = 0\n    while True:\n        found = string.find(substring, left)\n        if found == -1:\n            break\n        count += 1\n        left = found + 1\n\n    return count",
        "test": "assert how_many_times('', 'a') == 0"
    },
    {
        "number": 19,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 260,
        "answer": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    # Remove whitespace from input and convert to list\n    numbers = numbers.strip().split()\n\n    # Sort numbers in descending order\n    numbers.sort(reverse=True)\n\n    # Join numbers into a string with a space between them\n    return''.join(numbers)",
        "test": "assert sort_numbers('one') == 'one'"
    },
    {
        "number": 20,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "from typing import List, Tuple\nimport math\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = (numbers[0], numbers[1])\n    min_distance = math.sqrt((numbers[0] - numbers[1])**2 + (numbers[1] - numbers[2])**2)\n    for i in range(2, len(numbers)):\n        distance = math.sqrt((numbers[i] - numbers[0])**2 + (numbers[i] - numbers[1])**2)\n        if distance < min_distance:\n            min_distance = distance\n            closest_pair = (numbers[0], numbers[1]) if distance == min_distance else (numbers[0], numbers[i])\n            closest_pair = (numbers[i], numbers[1]) if distance == min_distance else (numbers[i], numbers[1])\n    return closest_pair",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)"
    },
    {
        "number": 21,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least two elements\")\n    min_value = min(numbers)\n    max_value = max(numbers)\n    rescaled_numbers = [(value - min_value) / (max_value - min_value) for value in numbers]\n    return rescaled_numbers",
        "test": "assert rescale_to_unit([0.0, 0.25, 0.5, 0.75, 1.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]"
    },
    {
        "number": 22,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    filtered_values = [value for value in values if isinstance(value, int)]\n    return filtered_values\n",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]"
    },
    {
        "number": 23,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 210,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\nprint(strlen(''))  # Output: 0\nprint(strlen('abc'))  # Output: 3",
        "test": "assert strlen('') == 0"
    },
    {
        "number": 24,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 110,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    divisor = 2\n    while divisor * divisor <= n:\n        if n % divisor == 0:\n            return divisor\n        divisor += 1\n    return n",
        "test": "assert largest_divisor(1) == 1, f\"Expected {1}, got {largest_divisor(1)}\""
    },
    {
        "number": 25,
        "max_answer_num": 30,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "test": "assert factorize(8) == [2, 2, 2], \"Factorize(8) should return [2, 2, 2]\""
    },
    {
        "number": 26,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    # Create a set to store unique elements\n    unique_numbers = set(numbers)\n\n    # Convert set to list and sort it\n    unique_numbers_list = sorted(unique_numbers)\n\n    return unique_numbers_list",
        "test": "assert remove_duplicates([]) == []"
    },
    {
        "number": 27,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    uppercase_letters = []\n    for char in string:\n        if char.islower():\n            uppercase_letters.append(char.upper())\n        else:\n            uppercase_letters.append(char.lower())\n    return ''.join(uppercase_letters)\n",
        "test": "assert flip_case('\u00e1\u00e9\u00ed\u00f3\u00fa') == '\u00c1\u00c9\u00cd\u00d3\u00da'"
    },
    {
        "number": 28,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n\n    # Convert the list of strings to a single string separated by space\n    result =''.join(strings)\n\n    return result",
        "test": "assert concatenate([]) == ''"
    },
    {
        "number": 29,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    result = []\n    for s in strings:\n        if s.startswith(prefix):\n            result.append(s)\n    return result",
        "test": "assert filter_by_prefix([], 'a') == []"
    },
    {
        "number": 30,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return list(filter(lambda x: x > 0, l))",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]"
    },
    {
        "number": 31,
        "max_answer_num": 37,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert is_prime(101), \"The function is_prime(101) should return True\""
    },
    {
        "number": 32,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 230,
        "answer": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x**2 +... + xs[n] * x**n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n\n    def find_zero_helper(coeff, i, prev_zero_i, x):\n        if i == len(xs):\n            return prev_zero_i\n\n        if xs[i] == 0:\n            return find_zero_helper(coeff, i+1, prev_zero_i, x)\n\n        if prev_zero_i == -1:\n            prev_zero_i = i\n\n        if xs[i] > 0 and find_zero_helper(coeff, i+1, prev_zero_i, x) == -1:\n            return i\n\n        if xs[i] < 0 and find_zero_helper(coeff, i+1, prev_zero_i, -x) == -1:\n            return i\n\n        return find_zero_helper(coeff, i+1, prev_zero_i, x)\n\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n\n    if max(xs) == 0:\n        return -1\n\n    return find_zero_helper(xs[-1], 0, -1, 1)\n",
        "test": "assert find_zero([-1, -2, -3, -4]) == 0"
    },
    {
        "number": 33,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 220,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n\n    # Loop through the list\n    for i in range(len(l)):\n        # If the value at the current index is not divisible by 3, skip it\n        if l[i] % 3!= 0:\n            continue\n\n        # Find the index of the third occurrence of the value at the current index\n        third_occurrence = i\n        while third_occurrence + 2 < len(l) and l[third_occurrence + 2] % 3 == 0:\n            third_occurrence += 2\n\n        # If the value at the current index is equal to the third occurrence of the value at the current index, skip it\n        if l[i] == l[third_occurrence]:\n            continue\n\n        # If the value at the current index is not equal to the third occurrence of the value at the current index, swap it\n        l[i], l[third_occurrence] = l[third_occurrence], l[i]\n\n    # Return the sorted list\n    return sorted(l)",
        "test": "assert sort_third([1, 2, 4]) == [1, 2, 4]"
    },
    {
        "number": 34,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    unique_set = set(l)\n    return sorted(unique_set)",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123], \"The code is not returning the expected result.\""
    },
    {
        "number": 35,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 210,
        "answer": "def max_element(l: list) -> int:\n    \"\"\"Return maximum element in the list.\n\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)",
        "test": "assert max_element([1, 2, 3]) == 3"
    },
    {
        "number": 36,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n            if count == 3:\n                return count\n        if i % 7 == 0:\n            count += 1\n            if count == 3:\n                return count\n    return count",
        "test": "assert fizz_buzz(1) == 0"
    },
    {
        "number": 37,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 220,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i, len(l)):\n            if l[i] % 2 == 0 and l[j] % 2 == 0:\n                if l[i] > l[j]:\n                    l[i], l[j] = l[j], l[i]\n    return l",
        "test": "assert sort_even([1, 2, 3]) == [1, 2, 3]"
    },
    {
        "number": 38,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n\n    # define two indices for cycling.\n    cycle_indices = [len(s) - i - 1 for i in range(3)]\n\n    # define a list to store decoded characters.\n    decoded_chars = []\n\n    # decode each group of three characters in the original string.\n    for i in range(0, len(s), 3):\n        # decode the first three characters of the current group.\n        decoded_chars.append(s[i:i+3])\n        # cycle to the next three characters in the current group.\n        for j in range(3):\n            cycle_indices[j] = (cycle_indices[j] + 1) % len(s)\n        # decode the next three characters of the current group.\n        decoded_chars[-1] = s[cycle_indices[0]:cycle_indices[0]+3]\n\n    # join the decoded characters to form the original string.\n    return \"\".join(decoded_chars)\n",
        "test": "assert decode_cyclic(\"\") == \"\""
    },
    {
        "number": 39,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    # Initialize variables\n    a, b = 0, 1\n    # Check if n is prime\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n % 2 == 0:\n        # If n is even, check if the next number is prime\n        if is_prime(n + 1):\n            return n + 1\n        else:\n            return n\n    else:\n        # If n is odd, check if the previous number is prime\n        if is_prime(n - 1):\n            return n - 1\n        else:\n            # Otherwise, check if the next and previous numbers are both prime\n            if is_prime(n + 1) and is_prime(n - 1):\n                return n + 1 - n\n            else:\n                return n\n\ndef is_prime(n: int):\n    \"\"\"\n    is_prime function checks if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert prime_fib(1) == 2"
    },
    {
        "number": 40,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    Triples_sum_to_zero takes a list of integers as an input.\n    It returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    Args:\n        l: list of integers\n\n    Returns:\n        bool: True if there are three distinct elements in the list that\n                sum to zero, and False otherwise.\n    \"\"\"\n    if len(set(l)) < 3:\n        return False\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False, \"The function should return False if there are three distinct elements in the list that sum to zero.\""
    },
    {
        "number": 41,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    collisions = 0\n    for i in range(n):\n        if i == 0 or i == n - 1:\n            continue\n        for j in range(i + 1, n):\n            if j == i + 1 or j == n - 1:\n                continue\n            if i % 2 == 0 and j % 2 == 1:\n                if (i + 1) % 2 == 1:\n                    if j % 2 == 0:\n                        collisions += 1\n            elif i % 2 == 1 and j % 2 == 0:\n                if (j + 1) % 2 == 1:\n                    if i % 2 == 0:\n                        collisions += 1\n    return collisions",
        "test": "assert car_race_collision(1) == 0, \"The function should return 0 when there is only one collision.\""
    },
    {
        "number": 42,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]"
    },
    {
        "number": 43,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n\n    # Sort the list in ascending order\n    l.sort()\n\n    # Initialize two pointers to the first and second elements of the list\n    left = 0\n    right = 1\n\n    # Check if the sum of the elements at the left and right pointers is zero\n    while left < right:\n        current_sum = l[left] + l[right]\n\n        if current_sum == 0:\n            return True\n\n        # If the current sum is negative, move the right pointer to the right\n        elif current_sum < 0:\n            right += 1\n\n        # If the current sum is positive, move the left pointer to the left\n        else:\n            left += 1\n\n    return False",
        "test": "assert pairs_sum_to_zero([1, 2, 3, 7]) == False"
    },
    {
        "number": 44,
        "max_answer_num": 30,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"Base must be between 2 and 36\")\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result",
        "test": "assert change_base(8, 3) == '22'"
    },
    {
        "number": 45,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 120,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    area = 0.5 * a * h\n    return area",
        "test": "assert triangle_area(5, 3) == 7.5, \"Incorrect triangle_area function implementation.\""
    },
    {
        "number": 46,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)",
        "test": "assert fib4(0) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 0:\n        return (sorted_l[n // 2 - 1] + sorted_l[n // 2]) / 2\n    else:\n        return sorted_l[n // 2]\n",
        "test": "assert median([3, 1, 2, 4, 5]) == 3"
    },
    {
        "number": 48,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n\n    # Convert the string to lowercase and remove spaces\n    text = text.lower().replace(' ', '')\n\n    # Reverse the string and compare with the original\n    return text == text[::-1]",
        "test": "assert is_palindrome('') is True"
    },
    {
        "number": 49,
        "max_answer_num": 40,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)",
        "test": "assert modp(0, 101) == 1"
    },
    {
        "number": 50,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n    encoded_string = s\n    decoded_string = \"\"\n\n    for i in range(len(encoded_string)):\n        if encoded_string[i] == \"a\":\n            decoded_string += chr(((ord(encoded_string[i]) + 5 - ord(\"a\")) % 26) + ord(\"a\"))\n        else:\n            decoded_string += encoded_string[i]\n\n    return decoded_string\n",
        "test": "assert decode_shift(\"A\") == \"A\""
    },
    {
        "number": 51,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiou'\n    return ''.join(char for char in text if char not in vowels)",
        "test": "assert remove_vowels('') == ''"
    },
    {
        "number": 52,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 210,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(num < t for num in l)",
        "test": "assert below_threshold([1, 20, 4, 10], 5) == False"
    },
    {
        "number": 53,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    Args:\n        x (int): The first number\n        y (int): The second number\n    Returns:\n        int: The sum of x and y\n    \"\"\"\n    return x + y",
        "test": "assert add(2, 3) == 5"
    },
    {
        "number": 54,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\n    # Convert both strings to sets of characters\n    s0_set = set(s0)\n    s1_set = set(s1)\n\n    # Check if the two sets have the same characters\n    return s0_set == s1_set",
        "test": "assert same_chars('eabcd', 'dddddddabc') == False"
    },
    {
        "number": 55,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "test": "assert fib(10) == 55, \"The 10th Fibonacci number should be 55.\""
    },
    {
        "number": 56,
        "max_answer_num": 39,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack or stack.pop()!= \"<\":\n                return False\n    return len(stack) == 0",
        "test": "assert correct_bracketing(\"<>\") == True"
    },
    {
        "number": 57,
        "max_answer_num": 31,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def monotonic(l: list) -> bool:\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    Args:\n        l (list): A list of numbers.\n    Returns:\n        bool: True if the list elements are monotonically increasing or decreasing, False otherwise.\n    \"\"\"\n    return all(l[i] < l[i + 1] for i in range(len(l) - 1)) or all(l[i] > l[i + 1] for i in range(len(l) - 1))",
        "test": "assert monotonic([1, 20, 4, 10]) == False"
    },
    {
        "number": 58,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\n\n    Args:\n        l1 (list): The first list of elements.\n        l2 (list): The second list of elements.\n\n    Returns:\n        list: Sorted unique common elements for the two input lists.\n\n    \"\"\"\n\n    # Convert the lists to sets to remove duplicates\n    set1 = set(l1)\n    set2 = set(l2)\n\n    # Get the common elements between the two sets\n    common_set = set1.intersection(set2)\n\n    # Convert the set back to a list and sort it\n    common_list = sorted(list(common_set))\n\n    return common_list",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]"
    },
    {
        "number": 59,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 240,
        "answer": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    # Check if n is prime\n    if n < 2:\n        return 1\n    \n    # Loop through all numbers from 2 to sqrt(n)\n    for i in range(2, int(n ** 0.5) + 1):\n        # Check if n is divisible by i\n        if n % i == 0:\n            # If n is divisible by i, then i is the largest prime factor\n            # of n.\n            return i\n    \n    # If n is not divisible by any number in range(2, sqrt(n) + 1), then n is\n    # a prime and the largest prime factor is n itself.\n    return n",
        "test": "assert largest_prime_factor(2048) == 2"
    },
    {
        "number": 60,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total",
        "test": "assert sum_to_n(30) == 465"
    },
    {
        "number": 61,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\"\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    if len(brackets) % 2!= 0:\n        return False\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack or stack[-1]!= \"(\":\n                return False\n            stack.pop()\n    return not stack\n",
        "test": "assert correct_bracketing(\")(())\") == False"
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def derivative(xs):\n    \"\"\"Return the derivative of the polynomial xs.\"\"\"\n    n = len(xs)\n    if n == 1:\n        return [1]\n    else:\n        d = [1] * n\n        for i in range(1, n):\n            d[i] = xs[i] * d[i-1]\n        return d",
        "test": "assert derivative([1, 2, 3]) == [2, 6]"
    },
    {
        "number": 63,
        "max_answer_num": 31,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib_list = [0, 0, 1]\n        for i in range(3, n + 1):\n            fib_list.append(fib_list[i - 1] + fib_list[i - 2] + fib_list[i - 3])\n        return fib_list[n]\n",
        "test": "assert fibfib(0) == 0, \"fibfib(0) should return 0\""
    },
    {
        "number": 64,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 240,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = 'aeiouyAEIOUY'\n    count = 0\n    for c in s:\n        if c in vowels:\n            count += 1\n    return count",
        "test": "assert vowels_count(\"abcde\") == 2"
    },
    {
        "number": 65,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n        reversed_digits = ''.join([digits[-1]] + list(digits[:-1]))\n        return reversed_digits\n    else:\n        shifted_digits = digits[shift:] + digits[:shift]\n        return shifted_digits",
        "test": "assert circular_shift(12, 0) == \"12\""
    },
    {
        "number": 66,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum",
        "test": "assert digitSum(\"\") == 0"
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    For example:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\", 3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    fruits = []\n    for fruit in s.split():\n        if fruit == \"apples\":\n            fruits.append(1)\n        elif fruit == \"oranges\":\n            fruits.append(2)\n        elif fruit == \"mangoes\":\n            fruits.append(0)\n    mango_fruits = 0\n    for i in range(n):\n        if fruits[i] == 2:\n            mango_fruits += 1\n    return mango_fruits",
        "test": "assert fruit_distribution(\"100 apples and 1 oranges\", 120) == 19"
    },
    {
        "number": 68,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                       so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n\n    even_indices = []\n    even_values = []\n    for i, value in enumerate(arr):\n        if value % 2 == 0:\n            even_indices.append(i)\n            even_values.append(value)\n\n    if not even_values:\n        return []\n\n    smallest_even = min(even_values)\n    smallest_even_index = even_indices[even_values.index(smallest_even)]\n\n    return [smallest_even, smallest_even_index]",
        "test": "assert pluck([]) == []"
    },
    {
        "number": 69,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    freq = {}\n    max_val = -1\n    for num in lst:\n        if num > 0:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n            if freq[num] >= num:\n                max_val = num\n                break\n    return max_val\n",
        "test": "assert search([5, 5, 4, 4, 4]) == -1, \"search([5, 5, 4, 4, 4]) == -1\""
    },
    {
        "number": 70,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst:\n        lst.sort(reverse=True)\n    return lst",
        "test": "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]"
    },
    {
        "number": 71,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 230,
        "answer": "def triangle_area(a, b, c):\n    if a + b > c and b + c > a and a + c > b:\n        return round(0.5 * a * b, 2)\n    else:\n        return -1",
        "test": "assert triangle_area(1, 2, 10) == -1, \"Test failed\""
    },
    {
        "number": 72,
        "max_answer_num": 30,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n\n    # Check if the object q is a palindromic list\n    if all(q[i] == q[i+1] for i in range(len(q)-1)):\n        # Check if the sum of its elements is less than or equal the maximum possible weight\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False",
        "test": "assert will_it_fly([3, 2, 3], 1) == False"
    },
    {
        "number": 73,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array\n    that is read the same backwards and forwards. In one change, you can change one element\n    to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    change = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            change += min(arr[i], arr[j]) - arr[i]\n            if change == 0:\n                return j-i\n    return n",
        "test": "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1"
    },
    {
        "number": 74,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\n    # Initialize variables\n    total_chars = 0\n    first_list = []\n\n    # Iterate through the lists\n    for word in lst1 + lst2:\n        # Update the total number of characters in the first list\n        total_chars += len(word)\n\n        # If the total number of characters is less than the length of the second list,\n        # return the first list\n        if total_chars < len(lst2):\n            first_list = lst1\n            break\n\n    return first_list",
        "test": "assert total_match([], []) == []"
    },
    {
        "number": 75,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        # Check if a is a number and greater than 1\n        if isinstance(a, int) and a > 1:\n            # Check if the given number is a multiple of 3\n            is_multiple_of_3 = False\n            for i in range(2, a):\n                if a % i == 0:\n                    is_multiple_of_3 = True\n                    break\n            if is_multiple_of_3:\n                # Check if the given number is a multiple of 5\n                is_multiple_of_5 = False\n                for i in range(3, a, 2):\n                    if a % i == 0:\n                        is_multiple_of_5 = True\n                        break\n                if is_multiple_of_5:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False",
        "test": "assert is_multiply_prime(23) == False"
    },
    {
        "number": 76,
        "max_answer_num": 30,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def is_simple_power(x, n):\n    \"\"\"\n    This function takes two arguments: x and n.\n    It returns True if x is a simple power of n and False otherwise.\n    \n    The function first checks if n is a positive integer. If it is not,\n    then n**int will be the same as x and we return True immediately.\n    \n    If n is a positive integer, we use a loop to check if n is a simple power\n    of x. We start by checking if n is a power of 2. If it is, we return True.\n    \n    If n is not a power of 2, we need to check if n is a power of x-1. If it is,\n    then n**int will be equal to x and we return True.\n    \n    If none of the above conditions are met, then n**int will be equal to x and\n    we return False.\n    \"\"\"\n    # check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n    \n    # check if n is a power of 2\n    if n & (n-1) == 0:\n        return True\n    \n    # check if n is a power of x-1\n    return n**int(x-1) == x",
        "test": "assert is_simple_power(1, 4) == True, \"is_simple_power(1, 4) should return True.\""
    },
    {
        "number": 77,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n    if a == 1:\n        return True\n    elif a < 0:\n        return False\n    else:\n        cube = a ** 3\n        return cube == a",
        "test": "assert iscube(2) == False, \"Function iscube(2) should return False\""
    },
    {
        "number": 78,
        "max_answer_num": 40,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Check if input is empty or not a string\n    if not isinstance(num, str):\n        raise ValueError(\"Input should be a string.\")\n\n    # Initialize a counter to keep track of prime numbers\n    prime_count = 0\n\n    # Loop through each character in the string\n    for char in num:\n        # Convert the character to an integer\n        digit = int(char, 16)\n\n        # Check if the digit is prime\n        if digit > 1:\n            for i in range(2, int(digit**0.5) + 1):\n                if digit % i == 0:\n                    break\n            else:\n                prime_count += 1\n\n    # Return the count of prime numbers\n    return prime_count",
        "test": "assert hex_key(\"AB\") == 1"
    },
    {
        "number": 79,
        "max_answer_num": 20,
        "max_test_num": 1,
        "total_product": 210,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"\n    This function takes a decimal number as input and returns a string in binary format.\n    The output will have an extra couple of characters 'db' at the beginning and at the end of\n    the string.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary_str = bin(decimal)[2:].zfill(8)\n    binary_str = binary_str.lstrip('0b')\n    binary_str = 'db' + binary_str + 'db'\n    return binary_str",
        "test": "assert decimal_to_binary(15) == \"db1111db\", \"Test failed\""
    },
    {
        "number": 80,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n\n    # Initialize variables\n    count = 0\n    prev_char = None\n    prev_length = 0\n    curr_length = 1\n\n    # Iterate through the string\n    for char in s:\n        # Update the count and previous characters\n        count += 1\n        prev_char = char\n        prev_length = curr_length\n\n        # Update the current character length\n        curr_length = 1\n        for i in range(curr_length):\n            if char == prev_char:\n                curr_length += 1\n            else:\n                break\n\n        # If the length is less than 3 or there are less than 3 consecutive distinct characters, return False\n        if curr_length < 3 or count < 3:\n            return False\n\n    # If the length is greater than 3, return True\n    return prev_length > 3\n",
        "test": "assert is_happy('aa') == False"
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n            4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n            0.0                E\n    \"\"\"\n    grade_map = {\n        '4.0': 'A+',\n        '3.7': 'A',\n        '3.3': 'A-',\n        '3.0': 'B+',\n        '2.7': 'B',\n        '2.3': 'B-',\n        '2.0': 'C+',\n        '1.7': 'C',\n        '1.3': 'C-',\n        '1.0': 'D+',\n        '0.7': 'D',\n        '0.0': 'D-',\n        '0.0': 'E'\n    }\n\n    letter_grades = []\n    for grade in grades:\n        if isinstance(grade, float):\n            letter_grades.append(grade_map[str(grade)])\n        else:\n            letter_grades.append(grade_map[grade])\n\n    return letter_grades",
        "test": "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']"
    },
    {
        "number": 82,
        "max_answer_num": 40,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    if len(string) < 2:\n        return False\n\n    for i in range(2, len(string)):\n        if len(string) % i == 0:\n            return False\n\n    return True",
        "test": "assert prime_length('orange') == False"
    },
    {
        "number": 83,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10):\n        num = 10**i\n        if num <= n:\n            count += 1\n    return count\n",
        "test": "assert starts_one_ends(0) == 0, \"The function should return 0 for an input of 0\""
    },
    {
        "number": 84,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n                Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n        a string of binary number\n    \"\"\"\n    total = 0\n    while N!= 0:\n        total += N % 10\n        N //= 10\n    return str(total)",
        "test": "assert solve(1000) == '1'"
    },
    {
        "number": 85,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    even_sum = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0 and i % 2!= 0:\n            even_sum += lst[i]\n    return even_sum",
        "test": "assert add([]) == 0, \"add([]) should return 0.\""
    },
    {
        "number": 86,
        "max_answer_num": 30,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n    \n    # Replace each word with a new word by sorting its characters\n    new_words = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        new_words.append(sorted_word)\n    \n    # Join the new words back into a string and return it\n    return''.join(new_words)",
        "test": "assert anti_shuffle('Hi') == 'Hi'"
    },
    {
        "number": 87,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 120,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    row_cols = []\n    for row in lst:\n        for col in row:\n            row_cols.append((len(lst)-1, len(row)-1))\n\n    row_cols = sorted(row_cols, key=lambda x: x[0])\n\n    result = []\n    for row in range(len(lst)):\n        for col in range(len(lst[row])):\n            if lst[row][col] == x:\n                result.append((row, col))\n\n    return result",
        "test": "assert get_row([], 1) == []"
    },
    {
        "number": 88,
        "max_answer_num": 29,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    array.sort(reverse=True)\n    return array",
        "test": "assert sort_array([]) == []"
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # Initialize the empty string to store the encrypted string\n    encrypted = \"\"\n    # Loop through the string s and rotate each letter by two multiplied to two places\n    for i in range(len(s)):\n        # If the character is a lowercase letter, convert it to uppercase\n        if s[i].islower():\n            encrypted += chr(ord(s[i]) - 32) + chr(ord(s[i]) + 32)\n        # If the character is an uppercase letter, convert it to lowercase\n        elif s[i].isupper():\n            encrypted += chr(ord(s[i]) - 32) + chr(ord(s[i]) + 32)\n        # If the character is a number, leave it unchanged\n        else:\n            encrypted += s[i]\n    return encrypted",
        "test": "assert encrypt('et') == 'ix'"
    },
    {
        "number": 90,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list.\n    \"\"\"\n    if lst:\n        return sorted(lst)[1]\n    else:\n        return None",
        "test": "assert next_smallest([]) == None"
    },
    {
        "number": 91,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?', or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    boredom_count = 0\n    sentence = S.strip()  # Remove leading/trailing whitespace\n    words = sentence.split()\n    for word in words:\n        if word.lower() == \"i\":\n            boredom_count += 1\n    return boredom_count",
        "test": "assert is_bored(\"Hello world\") == 0"
    },
    {
        "number": 92,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def any_int(x, y, z):\n    # Check if all numbers are integers\n    if not all(isinstance(n, int) for n in [x, y, z]):\n        return False\n\n    # Check if the sum of the two numbers is equal to the first number\n    if x + y == z:\n        return True\n    \n    # Check if the sum of the two numbers is equal to the second number\n    elif x + y == z:\n        return True\n    \n    # If none of the above conditions are satisfied, return False\n    else:\n        return False",
        "test": "assert any_int(3.6, -2.2, 2) == False"
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n\n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'THKS KS C MGGSGS'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    for letter in message:\n        if letter.isalpha():\n            if letter in vowels:\n                encoded_message += vowels[(vowels.index(letter) + 1) % len(vowels)]\n            else:\n                encoded_message += letter.upper()\n        else:\n            encoded_message += letter\n    return encoded_message",
        "test": "assert encode('This is a message') == 'tHKS KS C MGSSCGG', \"The function should encode the given message 'This is a message' correctly.\""
    },
    {
        "number": 94,
        "max_answer_num": 40,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    primes = []\n    for num in lst:\n        if num > 1:\n            for i in range(2, int(num ** 0.5) + 1):\n                if num % i == 0:\n                    break\n            else:\n                primes.append(num)\n\n    if len(primes) == 0:\n        return \"No prime numbers found in the list.\"\n\n    largest_prime = max(primes)\n    largest_prime_sum = sum(int(digit) for digit in str(largest_prime))\n    return largest_prime_sum\n",
        "test": "assert skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10"
    },
    {
        "number": 95,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    \n    if not dict:\n        return False\n\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n\n        if key.lower() == key.upper():\n            continue\n        elif key.lower() in dict:\n            continue\n        else:\n            return False\n\n    return True\n",
        "test": "assert check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) == False"
    },
    {
        "number": 96,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    i = 2\n    while i <= n:\n        if all(i % x!= 0 for x in range(2, int(i**0.5)+1)):\n            primes.append(i)\n        i += 1\n    return primes",
        "test": "assert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]"
    },
    {
        "number": 97,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def multiply(a, b):\n    \"\"\"Return the product of a and b using the unit digits.\"\"\"\n    product = 0\n    while b!= 0:\n        if b % 10 == a % 10:\n            product += a % 10\n        a //= 10\n        b //= 10\n    return product",
        "test": "assert multiply(2020, 1851) == 0, \"Test failed for multiply(2020, 1851)\""
    },
    {
        "number": 98,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+2] == 'aeiouAEIOU':\n            count += 1\n    return count",
        "test": "assert count_upper('') == 0"
    },
    {
        "number": 99,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    # Convert value to float and round to nearest integer\n    value = round(float(value))\n\n    # If value is 0, return 0\n    if value == 0:\n        return 0\n\n    # Check if value is within range of two integers\n    min_value = min(int(value), 10**5)\n    max_value = max(int(value), 10**5)\n\n    # If value is equidistant from two integers, return one of them\n    if min_value == max_value:\n        return min_value\n\n    # If value is within range of two integers and is equidistant from two integers,\n    # return one of them\n    if min_value - 1 == max_value - 1:\n        return min_value\n\n    # If value is within range of two integers and is not equidistant from two integers,\n    # return the one that is the farthest from zero\n    if min_value == max_value - 1:\n        return max_value + 1\n\n    # If value is not within range of two integers, return the value itself\n    return value",
        "test": "assert closest_integer(\"10\") == 10, \"Failed: closest_integer('10') should return 10\""
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0 and i % 2 == 0:\n            stones.append(2 * stones[i-1])\n        elif n % 2 == 1 and i % 2 == 1:\n            stones.append(3 * stones[i-1])\n        else:\n            stones.append(stones[i-1])\n    return stones",
        "test": "assert make_a_pile(8) == [4, 6, 8]"
    },
    {
        "number": 101,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 240,
        "answer": "def words_string(s):\n    \"\"\"\n    Split a string of words separated by commas or spaces into an array of words.\n\n    Args:\n        s (str): A string of words separated by commas or spaces.\n\n    Returns:\n        list: An array of words from the input string.\n\n    Example:\n        words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n        words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    words = s.split(\",\") if \",\" in s else s.split()\n    return words",
        "test": "assert words_string(\"apple,banana,cherry,date,elderberry\") == [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]"
    },
    {
        "number": 102,
        "max_answer_num": 22,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    result = -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            if i > result:\n                result = i\n    return result",
        "test": "assert choose_num(13, 12) == -1, \"The function should return -1\""
    },
    {
        "number": 103,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def rounded_avg(n, m):\n    \"\"\"\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return \"{:b}\".format(n + m)",
        "test": "assert rounded_avg(7, 5) == -1"
    },
    {
        "number": 104,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 210,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique_list = []\n    for num in x:\n        if num % 2 == 0:\n            continue\n        else:\n            unique_list.append(num)\n    unique_list.sort()\n    return unique_list",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]"
    },
    {
        "number": 105,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n        -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n        -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n    If the array is empty, return an empty array:\n      arr = []\n      return []\n\n    If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n        -> sort arr -> [-1, 1, 55]\n        -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    # If the array is empty, return an empty array\n    if len(arr) == 0:\n        return []\n\n    # Sort the integers that are between 1 and 9 inclusive\n    arr.sort(reverse=True)\n\n    # Reverse the resulting array\n    arr.reverse()\n\n    # Replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    new_arr = []\n    for digit in arr:\n        if 1 <= digit <= 9:\n            new_arr.append(names[digit-1])\n        else:\n            pass\n\n    # Return the new array\n    return new_arr",
        "test": "assert by_length([]) == []"
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n    factors = [1] * n\n    factors[0] = 1\n\n    for i in range(1, n):\n        if i % 2 == 0:\n            factors[i] = factors[i//2] * i\n        else:\n            factors[i] = sum(range(1, i+1))\n\n    return factors",
        "test": "assert f(20) == [1, 2, 3, 4, 5, 12, 72, 504, 4032, 36288, 362880, 39916800]"
    },
    {
        "number": 107,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    palindromes = []\n    for i in range(1, n+1):\n        if i == int(str(i)[::-1]):\n            palindromes.append(i)\n    even_palindromes = [num for num in palindromes if num % 2 == 0]\n    odd_palindromes = [num for num in palindromes if num % 2!= 0]\n    return (len(even_palindromes), len(odd_palindromes))\n",
        "test": "assert even_odd_palindrome(3) == (1, 2)"
    },
    {
        "number": 108,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num >= 0:\n            sum_of_digits = sum(int(d) for d in str(num))\n            if sum_of_digits > 0:\n                count += 1\n    return count",
        "test": "assert count_nums([]) == 0"
    },
    {
        "number": 109,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performing 2 right shift operations, non-decreasing order can\n                    be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation: It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n    \"\"\"\n    if len(arr) == 0:\n        return True\n\n    last_element = arr[0]\n\n    for i in range(1, len(arr)):\n        if last_element < arr[i]:\n            return False\n        else:\n            arr[i], arr[i-1] = arr[i-1], arr[i]\n            last_element = arr[i]\n\n    return True",
        "test": "assert move_one_ball([]) == True, \"Test case 3\""
    },
    {
        "number": 110,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2!= lst2[i] % 2:\n            return \"NO\"\n    return \"YES\"\n",
        "test": "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\""
    },
    {
        "number": 111,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \n    \"\"\"\n    counts = {}\n    for char in test:\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    \n    max_count = 0\n    max_char = ''\n    for char, count in counts.items():\n        if count > max_count:\n            max_char = char\n            max_count = count\n    \n    return {max_char: max_count}",
        "test": "assert histogram('b b b b a') == {'b': 4}"
    },
    {
        "number": 112,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "def reverse_delete(s, c):\n    s = s.replace(c, '')\n    return s, s == s[::-1]\n\ns = \"abcde\"\nc = \"ae\"\nresult = reverse_delete(s, c)\nprint(result)  # Output: ('bcd', False)\n\ns = \"abcdef\"\nc = \"b\"\nresult = reverse_delete(s, c)\nprint(result)  # Output: ('acdef', False)\n\ns = \"abcdedcba\"\nc = \"ab\"\nresult = reverse_delete(s, c)\nprint(result)  # Output: ('cdedc', True)",
        "test": "assert reverse_delete(\"abcdef\", \"b\") == (\"acdef\", False)"
    },
    {
        "number": 113,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 220,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    odd_count_lst = []\n    for i in lst:\n        num_of_odd = 0\n        for char in i:\n            if char.isdigit():\n                num_of_odd += 1\n        odd_count_lst.append(f\"the number of odd elements {num_of_odd}n the str{num_of_odd}ng {num_of_odd} of the {num_of_odd}nput.\")\n    return odd_count_lst",
        "test": "assert odd_count(['3', '11111111']) == ['the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.']"
    },
    {
        "number": 114,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 220,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    # Initialize variables\n    min_sum = float('inf')\n    current_sum = 0\n    current_start = 0\n    # Iterate through the array\n    for i in range(len(nums)):\n        current_sum += nums[i]\n        # Update the minimum sum if the current sum becomes greater than min_sum\n        if current_sum < min_sum:\n            min_sum = current_sum\n            current_start = i\n    # Return the minimum sum\n    return min_sum\n",
        "test": "assert minSubArraySum([]) == 0"
    },
    {
        "number": 115,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 300,
        "answer": "def max_fill(grid, bucket_capacity):\n    rows = len(grid)\n    cols = len(grid[0])\n    max_lower = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                max_lower += min(bucket_capacity, 1)\n    return max_lower",
        "test": "assert max_fill([[0,0,0], [0,0,0]], 5) == 0, \"Expected 0, but got {}\".format(max_fill([[0,0,0], [0,0,0]], 5))"
    },
    {
        "number": 116,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 300,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Convert the array to a list of strings to be able to sort it\n    arr_str = [str(num) for num in arr]\n\n    # Sort the list of strings based on the number of ones in each string\n    arr_str = sorted(arr_str, key=lambda x: sum(int(i) for i in x.replace('0', '1').replace('1', '0').replace('X', '1').replace('x', '0').split()))\n\n    # Convert the sorted list back to an array and return it\n    return [int(s) for s in arr_str]",
        "test": "assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]"
    },
    {
        "number": 117,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n        if len(word) == n and word.isalpha():\n            result.append(word)\n    return result",
        "test": "assert select_words(\"simple white space\", 2) == []"
    },
    {
        "number": 118,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    left = \"\"\n    right = \"\"\n    # Find left and right consonants\n    for i in range(len(word)-1, -1, -1):\n        if word[i].lower() in vowels:\n            left += word[i]\n            if i == 0:\n                break\n        else:\n            break\n\n    # Find right consonant\n    for i in range(1, len(word)):\n        if word[i].lower() in vowels:\n            right += word[i]\n        else:\n            break\n\n    # Check if there is a closest vowel\n    if right:\n        return right[-1]\n    else:\n        return \"\"",
        "test": "assert get_closest_vowel(\"ab\") == \"\""
    },
    {
        "number": 119,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 210,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    def is_balanced(str):\n        stack = []\n        for char in str:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack or stack.pop()!= '(':\n                    return False\n        return not stack\n\n    # If the first string is balanced and the second string is good, return 'Yes'\n    if is_balanced(lst[0]) and is_balanced(lst[1]):\n        return 'Yes'\n    # If either of the strings is not balanced, return 'No'\n    else:\n        return 'No'",
        "test": "assert match_parens([')', ')']) == 'No'"
    },
    {
        "number": 120,
        "max_answer_num": 30,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # sorting the array\n    arr.sort()\n\n    # getting the maximum k numbers from the sorted array\n    max_arr = arr[-k:]\n\n    # returning the sorted list with the maximum k numbers\n    return max_arr",
        "test": "assert maximum([-3, -4, 5], 3) == [-4, -3, 5]"
    },
    {
        "number": 121,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 0\n    \"\"\"\n    # Initialize a variable to store the sum of all odd elements that are in even positions\n    total = 0\n\n    # Loop through the list and add the odd elements in even positions to the variable\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            total += lst[i]\n\n    return total",
        "test": "assert solution([]) == 0"
    },
    {
        "number": 122,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 240,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total = 0\n    for i in range(k):\n        num = int(arr[i])\n        total += num\n\n    return total",
        "test": "assert add_elements([100], 1) == 100 # sum of the first element"
    },
    {
        "number": 123,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 210,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    # Base case\n    if n == 1:\n        return [1]\n\n    # Recursive case\n    elif n % 2 == 0:\n        # First term is odd\n        odd_term = get_odd_collatz(n // 2)[0]\n        # Rest of the terms are even\n        even_terms = get_odd_collatz(n // 2)[1:]\n        return [odd_term] + even_terms\n\n    else:\n        # First term is even\n        even_term = get_odd_collatz(n // 2)[0]\n        # Rest of the terms are odd\n        odd_terms = get_odd_collatz(n // 2)[1:]\n        return [even_term] + odd_terms\n",
        "test": "assert get_odd_collatz(1) == [1] # The collatz sequence for 1 is [1], so the odd numbers are only 1."
    },
    {
        "number": 124,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def valid_date(date):\n    \"\"\"\n    This function validates a given date string and returns True if the date is valid\n    otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1, 3, 5, 7, 8, 10, 12.\n    3. The number of days is not less than 1 or higher than 30 days for months 4, 6, 9, 11.\n    4. The number of days is not less than 1 or higher than 29 for the month 2.\n    5. The months should not be less than 1 or higher than 12.\n    6. The date should be in the format: mm-dd-yyyy.\n\n    Args:\n        date (str): A string representing the date.\n\n    Returns:\n        bool: True if the date is valid, False otherwise.\n    \"\"\"\n    # Split the date string into month, day, and year components\n    date_parts = date.split('-')\n    if len(date_parts)!= 3:\n        return False\n\n    # Convert the date components to integers\n    month = int(date_parts[0])\n    day = int(date_parts[1])\n    year = int(date_parts[2])\n\n    # Check if the date is valid for each rule\n    if not date:\n        return False\n\n    # Check if the month is between 1 and 12\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the number of days is not less than 1 or higher than 31\n    if day < 1 or day > 31:\n        return False\n\n    # Check if the number of days is not less than 1 or higher than 30\n    if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 30:\n        return False\n\n    # Check if the number of days is not less than 1 or higher than 29 for the month 2\n    if month == 2 and day < 1 or day > 29:\n        return False\n\n    # Check if the year is a leap year\n    if year % 4!= 0 and (year % 100!= 0 or year % 400!= 0):\n        return False\n\n    # Check if the date is in the format: mm-dd-yyyy\n    if len(date_parts[0])!= 2 or len(date_parts[1])!= 2 or len(date_parts[2])!= 4:\n        return False\n\n    return True",
        "test": "assert valid_date('04-0-2040') == False"
    },
    {
        "number": 125,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "def split_words(txt):\n    # split text by whitespace\n    words = txt.split()\n    # split by comma\n    if ',' in words:\n        return len(set(w.lower() for w in words if w.lower() in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z')))\n    else:\n        return words",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]"
    },
    {
        "number": 126,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n\n    return True",
        "test": "assert is_sorted([5]) == True"
    },
    {
        "number": 127,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "def is_prime(n):\n    \"\"\"Check if a number is prime\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n    \"\"\"\n    if (interval1[0] <= interval2[0]) and (interval1[1] >= interval2[1]):\n        if is_prime(interval1[1] - interval1[0] + 1):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\", \"Test 1\""
    },
    {
        "number": 128,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    # Check if the array is empty\n    if len(arr) == 0:\n        return None\n\n    # Calculate the product of all signs\n    product = 1\n    for num in arr:\n        if num > 0:\n            product *= 1\n        elif num < 0:\n            product *= -1\n        else:\n            product *= 0\n\n    # Calculate the magnitudes of the integers in the array\n    magnitudes = [abs(num) for num in arr]\n\n    # Calculate the sum of magnitudes and product\n    return sum(magnitudes) * product",
        "test": "assert prod_signs([]) is None"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n    visited = [[False] * cols for _ in range(rows)]\n    min_val = float('inf')\n\n    def dfs(i, j, k):\n        if k == 1:\n            return grid[i][j]\n\n        if visited[i][j] or i < 0 or j < 0 or i >= rows or j >= cols or grid[i][j] == 0:\n            return 0\n\n        if k == 2:\n            return min(grid[i][j], dfs(i + 1, j, k - 1), dfs(i - 1, j, k - 1), dfs(i, j + 1, k - 1), dfs(i, j - 1, k - 1))\n\n        if k < 0:\n            return float('inf')\n\n        if k > 1:\n            return min(dfs(i + 1, j, k - 1), dfs(i - 1, j, k - 1), dfs(i, j + 1, k - 1), dfs(i, j - 1, k - 1))\n\n        return min(dfs(i + 1, j, k), dfs(i - 1, j, k), dfs(i, j + 1, k), dfs(i, j - 1, k))\n\n    for i in range(rows):\n        for j in range(cols):\n            min_val = min(min_val, dfs(i, j, k))\n\n    if min_val == float('inf'):\n        return []\n\n    path = []\n    cell = (rows - 1, cols - 1)\n    while cell!= (0, 0):\n        path.append(grid[cell[0]][cell[1]])\n        cell = (cell[0] - 1, cell[1])\n\n    path.reverse()\n    return path",
        "test": "assert minPath([ [5,9,3], [4,1,6], [7,8,2]], 1) == [1]"
    },
    {
        "number": 130,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 230,
        "answer": "def tri(n):\n    \"\"\"Returns a list of the first n + 1 numbers of the Tribonacci sequence.\"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    sequence = [0, 1, 1]\n    for i in range(2, n + 1):\n        sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 3])\n    return sequence",
        "test": "assert tri(0) == []"
    },
    {
        "number": 131,
        "max_answer_num": 27,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        product = 1\n        for i in range(1, 10):\n            if n % i == 0:\n                product *= i\n        if product == 1:\n            return 1\n        else:\n            return 0",
        "test": "assert digits(100)!= 1, \"The product of the odd digits of 100 is not 1.\""
    },
    {
        "number": 132,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_nested(string):\n    stack = []\n    bracket_count = 0\n    subsequence = ''\n\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack.pop()!= char:\n                return False\n        elif char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            if stack.pop()!= char:\n                return False\n        elif char == '{{':\n            bracket_count += 1\n        elif char == '}}':\n            if not stack:\n                return False\n            if stack.pop()!= char:\n                return False\n            bracket_count -= 1\n\n        subsequence += char\n\n    if not stack:\n        return True\n    return False",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False"
    },
    {
        "number": 133,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    # Initialize an empty list to store the squared numbers\n    squared_lst = []\n\n    # Iterate over each element of the input list\n    for num in lst:\n        # Calculate the square of the current element and append it to the list\n        squared_lst.append(int(num**2))\n\n    # Round each element in the list to the upper int(Ceiling) and sum it up\n    rounded_lst = []\n    for num in squared_lst:\n        rounded_lst.append(num)\n\n    return sum(rounded_lst)",
        "test": "assert sum_squares([1, 2, 3]) == 14"
    },
    {
        "number": 134,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    last_char = txt[-1]\n    if last_char.isalpha():\n        if last_char not in \"abcdefghijklmnopqrstuvwxyz\":\n            return False\n        last_char = txt[-2]\n        if last_char.isalpha():\n            if last_char not in \"abcdefghijklmnopqrstuvwxyz\":\n                return False\n        return True\n    else:\n        return False",
        "test": "assert check_if_last_char_is_a_letter(\"apple pi e\") == True"
    },
    {
        "number": 135,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            return i\n    return -1",
        "test": "assert can_arrange([]) == -1"
    },
    {
        "number": 136,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    a = None\n    b = None\n\n    for num in lst:\n        if num < 0:\n            if a is None or num > a:\n                a = num\n        elif num > 0:\n            if b is None or num < b:\n                b = num\n\n    return (a, b)",
        "test": "assert largest_smallest_integers([]) == (None, None)"
    },
    {
        "number": 137,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if isinstance(a, float) and isinstance(b, float):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    elif isinstance(a, float) and isinstance(b, str):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    elif isinstance(a, str) and isinstance(b, float):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    elif isinstance(a, str) and isinstance(b, str):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    else:\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None",
        "test": "assert compare_one(1, 2.5) == 2.5"
    },
    {
        "number": 138,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # Initialize variables\n    sum_even = 0\n    count = 0\n\n    # Calculate the sum of even numbers from 1 to n\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum_even += i\n            count += 1\n\n    # Check if the sum of even numbers is equal to 4\n    if count == 4:\n        return True\n    else:\n        return False",
        "test": "assert is_equal_to_sum_even(4) == False"
    },
    {
        "number": 139,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    # Base case\n    if n == 0:\n        return 1\n\n    # Recursive case\n    else:\n        return n * special_factorial(n-1)\n",
        "test": "assert special_factorial(1) == 1, \"The special factorial of 1 is incorrect.\""
    },
    {
        "number": 140,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    # replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    # split the string into words and iterate over each word\n    words = text.split()\n    # iterate over each word and check if it has more than 2 consecutive spaces\n    for i in range(1, len(words)):\n        if len(words[i]) > 2 and words[i-1] == \" \":\n            words[i] = \"-\" * (len(words[i]) - 2)\n    # join the words back together with underscores\n    text = \"_\".join(words)\n    return text",
        "test": "assert fix_spaces(\"Example\") == \"Example\""
    },
    {
        "number": 141,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Check if the file's name is empty\n    if not file_name:\n        return 'No'\n\n    # Check if the file's name contains more than three digits\n    if any(c.isdigit() for c in file_name) and len(file_name.split('.')) > 2:\n        return 'No'\n\n    # Check if the file's name contains a dot '.'\n    if '.' not in file_name:\n        return 'No'\n\n    # Check if the substring before the dot is a valid letter\n    if file_name[0].isalpha() is False:\n        return 'No'\n\n    # Check if the substring after the dot is one of the allowed ones\n    allowed_file_extensions = ['txt', 'exe', 'dll']\n    if file_name.split('.')[-1] not in allowed_file_extensions:\n        return 'No'\n\n    return 'Yes'",
        "test": "assert file_name_check(\"1example.dll\") == \"No\""
    },
    {
        "number": 142,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    sum = 0\n    \n    for i in lst:\n        if i % 3 == 0 and i % 4!= 0:\n            sum += i ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            sum += i ** 3\n    \n    return sum",
        "test": "assert sum_squares([]) == 0"
    },
    {
        "number": 143,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 230,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if num is a prime number,\n    False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    Returns a new string with the words from the input sentence,\n    whose lengths are prime numbers.\n    \"\"\"\n    words = sentence.split()\n    new_words = []\n    for word in words:\n        if is_prime(len(word)):\n            new_words.append(word)\n    return \" \".join(new_words)",
        "test": "assert words_in_sentence(\"\") == \"\""
    },
    {
        "number": 144,
        "max_answer_num": 30,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def simplify(x, n):\n    \"\"\"\n    Implement a function that takes two strings as input, x and n, representing a fraction.\n    The function should return True if x * n evaluates to a whole number and False otherwise.\n    Both x and n, are valid fractions, and do not have zero as denominator.\n\n    Examples:\n    >>> simplify(\"1/5\", \"5/1\")\n    True\n    >>> simplify(\"1/6\", \"2/1\")\n    False\n    >>> simplify(\"7/10\", \"10/2\")\n    False\n    \"\"\"\n\n    # Check if both x and n are valid fractions\n    if \"/\" in x or \"/\" in n:\n        # Split the strings on '/'\n        numerator, denominator = x.split('/')\n        numerator, denominator = float(numerator), float(denominator)\n\n        # Check if the denominator is positive\n        if denominator <= 0:\n            return False\n\n        # Check if the denominator is divisible by 2\n        if denominator % 2 == 0:\n            return False\n\n        # Check if x is a whole number\n        if numerator % 1 == 0:\n            return True\n\n    # If none of the above conditions are met, return False\n    return False",
        "test": "assert simplify(\"7/10\", \"10/2\") == False"
    },
    {
        "number": 145,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # Sort the list in ascending order based on the sum of their digits\n    sorted_nums = sorted(nums, key=lambda x: sum(int(d) for d in str(x)))\n\n    # Reverse the list so that the smallest elements are at the beginning\n    return sorted_nums[::-1]\n",
        "test": "assert order_by_points([]) == []"
    },
    {
        "number": 146,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10!= 1 and num % 10!= 3 and num % 10!= 5 and num % 10!= 7 and num % 10!= 9:\n            count += 1\n    return count",
        "test": "assert specialFilter([1, 3, 5, 7, 9]) == 0"
    },
    {
        "number": 147,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n        and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # create a list to store the values of a\n    a = []\n\n    # iterate through the integers from 1 to n\n    for i in range(1, n+1):\n        # create a string of the form i*i-i+1\n        num_str = str(i*i-i+1)\n        # check if the string is a multiple of 3\n        if num_str[-2:] == '03':\n            # append the string to the list of values of a\n            a.append(i)\n\n    # return the length of the list\n    return len(a)\n",
        "test": "assert get_max_triples(7) == 0, \"get_max_triples(7) should return 0\""
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 330,
        "answer": "def bf(planet1, planet2):\n    '''\n    Finds all planets whose orbits are located between the orbits of\n    planet1 and planet2, sorted by the proximity to the sun.\n    Returns an empty tuple if planet1 or planet2 are not correct planet names.\n    '''\n\n    # Check if planet1 and planet2 are correct planet names\n    if planet1 not in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n        return ()\n\n    # Create a dictionary to store the planets and their orbits\n    planets = {\n        \"Mercury\": 1,\n        \"Venus\": 69,\n        \"Earth\": 29,\n        \"Mars\": 63,\n        \"Jupiter\": 42,\n        \"Saturn\": 84,\n        \"Uranus\": 111,\n        \"Neptune\": 115\n    }\n\n    # Create a dictionary to store the planets and their orbits between planet1 and planet2\n    planet1_planets = {}\n    planet2_planets = {}\n\n    for key, value in planets.items():\n        if key!= planet1 and key!= planet2:\n            planet1_planets[key] = value\n            planet2_planets[key] = value\n\n    # Calculate the distance between planet1 and planet2 using the Euclidean distance formula\n    planet1_dist = 0\n    planet2_dist = 0\n\n    for key in planet1_planets:\n        planet1_dist += (planets[key] - planets[key.lower()])**2\n\n    for key in planet2_planets:\n        planet2_dist += (planets[key] - planets[key.lower()])**2\n\n    planet1_dist = math.sqrt(planet1_dist)\n    planet2_dist = math.sqrt(planet2_dist)\n\n    # Find the closest planet between planet1 and planet2 using the Manhattan distance formula\n    closest_planet = \"\"\n\n    for key in planet1_planets:\n        planet1_dist_to_closest = abs(planets[key] - planets[key.lower()])\n        if planet1_dist_to_closest < planet1_dist and key!= planet1:\n            closest_planet = key\n            planet1_dist = planet1_dist_to_closest\n\n    for key in planet2_planets:\n        planet2_dist_to_closest = abs(planets[key] - planets[key.lower()])\n        if planet2_dist_to_closest < planet2_dist and key!= planet2:\n            closest_planet = key\n            planet2_dist = planet2_dist_to_closest\n\n    if closest_planet == \"\":\n        return ()\n\n    # Sort the planets by their distance from the sun\n    sorted_planets = sorted(planet1_planets.items() + planet2_planets.items(), key=lambda x: x[1] - planets[x[0]])\n\n    # Find all planets whose orbits are located between planet1 and planet2\n    planet1_orbits = []\n    planet2_orbits = []\n\n    for planet, orbit in sorted_planets:\n        if planet == planet1:\n            planet1_orbits.append(orbit)\n        elif planet == planet2:\n            planet2_orbits.append(orbit)\n\n    return tuple(sorted_planets)",
        "test": "assert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Planet names are incorrect.\""
    },
    {
        "number": 149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 230,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\n    # Create a copy of the original list\n    new_lst = lst.copy()\n\n    # Delete strings with odd lengths\n    for i, word in enumerate(new_lst):\n        if len(word) % 2!= 0:\n            new_lst.pop(i)\n\n    # Convert the new list to a set to remove duplicates\n    new_lst = list(set(new_lst))\n\n    # Sort the list based on the rule\n    def custom_sort(word):\n        if len(word) % 2 == 0:\n            return word\n        else:\n            return word.lower()\n\n    new_lst.sort(key=custom_sort)\n\n    return new_lst",
        "test": "assert sorted_list_sum([\"hello\", \"world\", \"abc\", \"def\", \"hello\"]) == [\"abc\", \"def\", \"hello\"]"
    },
    {
        "number": 150,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 220,
        "answer": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n\n    def is_prime(n):\n        \"\"\"Return True if n is a prime number, False otherwise.\"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y",
        "test": "assert x_or_y(15, 8, 5) == 5"
    },
    {
        "number": 151,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    '''\n\n    if not lst:\n        return 0\n\n    sum_of_squares = 0\n    for num in lst:\n        if not isinstance(num, int):\n            continue\n        if num < 0:\n            continue\n        if num % 2!= 0:\n            sum_of_squares += num ** 2\n\n    return sum_of_squares",
        "test": "assert double_the_difference([0]) == 0  "
    },
    {
        "number": 152,
        "max_answer_num": 23,
        "max_test_num": 5,
        "total_product": 260,
        "answer": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    score = len(game)\n    diff = [0] * score\n    \n    for i in range(score):\n        if game[i] == guess[i]:\n            diff[i] = 0\n        else:\n            diff[i] = abs(game[i] - guess[i])\n    \n    return diff",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]"
    },
    {
        "number": 153,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StUFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    strength = [0] * len(extensions)\n    for ext in extensions:\n        ext_len = len(ext)\n        if ext[0].isupper():\n            CAP = ext_len\n            SM = ext_len\n        else:\n            CAP = ext_len\n            SM = ext_len\n        strength[CAP-SM] += 1\n    max_strength = max(strength)\n    max_extensions = [ext for ext, st in zip(extensions, strength) if st == max_strength]\n    if len(max_extensions) == 1:\n        return class_name + '.' + max_extensions[0]\n    else:\n        return max_extensions[0] + '.' + max_extensions[1]",
        "test": "assert Strongest_Extension('my_class', ['CC', 'EE', 'FF']) =='my_class.CC'"
    },
    {
        "number": 154,
        "max_answer_num": 30,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"\n    This function takes two strings as input and returns True if the second word or any of its rotations is a substring in the first word.\n    \n    :param a: str, the first word\n    :param b: str, the second word\n    :return: bool, True if the second word or any of its rotations is a substring in the first word, False otherwise\n    \"\"\"\n    # Remove leading and trailing whitespaces\n    a = a.strip()\n    b = b.strip()\n    \n    # If the length of the second word is greater than the length of the first word, the second word is longer\n    if len(b) > len(a):\n        b = b[len(a):]\n    \n    # Check if the second word is in the first word\n    for i in range(len(a)):\n        if a[i:i+len(b)] == b:\n            # Check if any of the rotations of the second word are also in the first word\n            for j in range(i, len(a)-len(b)+1):\n                if a[j:j+len(b)] == b:\n                    return True\n    \n    return False",
        "test": "assert cycpattern_check(\"hello\",\"ell\") == True"
    },
    {
        "number": 155,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 220,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    num_str = str(num)\n    for char in num_str:\n        if char.isdigit():\n            digit = int(char)\n            if digit % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)",
        "test": "assert even_odd_count(123) == (1, 2)"
    },
    {
        "number": 156,
        "max_answer_num": 31,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Check if the number is valid\n    if number < 1 or number > 1000:\n        raise ValueError(\"Number must be between 1 and 1000\")\n\n    # Initialize variables\n    roman_numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n\n    # Create the roman numerals\n    mini_roman = \"\"\n    for i, v in enumerate(roman_values):\n        while number >= v:\n            mini_roman += roman_numerals[i]\n            number -= v\n\n    return mini_roman.lower()",
        "test": "assert int_to_mini_roman(1000) =='m', \"The function should handle cases where the input number is too large: m\""
    },
    {
        "number": 157,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 230,
        "answer": "def right_angle_triangle(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False",
        "test": "assert right_angle_triangle(1, 2, 3) == False, \"The triangle should not have three sides.\""
    },
    {
        "number": 158,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def find_max(words):\n    \"\"\"\n    This function accepts a list of strings and returns the word with maximum\n    number of unique characters. If multiple strings have the same maximum number\n    of unique characters, it returns the one that comes first in lexicographical\n    order.\n    \"\"\"\n    unique_chars = set()\n    max_count = 0\n    max_word = \"\"\n\n    for word in words:\n        if len(word) > len(max_word):\n            max_word = word\n            max_count = 1\n        elif len(word) == len(max_word):\n            if word < max_word:\n                max_word = word\n                max_count = 1\n            elif word == max_word:\n                max_count += 1\n\n    if max_count == 0:\n        return \"\"\n\n    for char in max_word:\n        unique_chars.add(char)\n\n    return max_word",
        "test": "assert find_max([]) == \"\""
    },
    {
        "number": 159,
        "max_answer_num": 30,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                            the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if need > remaining:\n        return [remaining, 0]\n    else:\n        return [number + need, remaining - need]",
        "test": "assert eat(1, 10, 10) == [11, 0]"
    },
    {
        "number": 160,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Build the expression by performing the operations on the operands\n    expression = \"\"\n    for i in range(len(operand) - 1):\n        # Perform addition operation\n        if operator[0] == '+':\n            expression += str(operand[i]) + operator[1] + \" \"\n        # Perform subtraction operation\n        elif operator[0] == '-':\n            expression += str(operand[i]) + operator[1] + \" \"\n        # Perform multiplication operation\n        elif operator[0] == '*':\n            expression += str(operand[i]) + operator[1] + \" \"\n        # Perform floor division operation\n        elif operator[0] == '//':\n            expression += str(operand[i]) + operator[1] + \" \"\n        # Perform exponentiation operation\n        elif operator[0] == '**':\n            expression += str(operand[i]) + operator[1] + \" \"\n\n    # Perform the last operation on the operand\n    if operator[0] == '+':\n        expression += str(operand[-1])\n    elif operator[0] == '-':\n        expression += str(operand[-1])\n    elif operator[0] == '*':\n        expression += str(operand[-1])\n    elif operator[0] == '//':\n        expression += str(operand[-1])\n    elif operator[0] == '**':\n        expression += str(operand[-1])\n\n    # Evaluate the expression and return the result\n    try:\n        result = eval(expression)\n        return result\n    except ZeroDivisionError:\n        print(\"Error: Division by zero detected.\")\n        return \"Error: Division by zero detected.\"",
        "test": "assert do_algebra(['+', '*', '-'], [2, 3]) == 6, \"The result should be 6\""
    },
    {
        "number": 161,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            result += s[i].upper() if s[i].islower() else s[i].lower()\n        else:\n            result += s[i]\n    if not result:\n        return s[::-1]\n    return result",
        "test": "assert solve(\"ab\") == \"AB\""
    },
    {
        "number": 162,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n\n    md5_hash = hashlib.md5(text.encode('utf-8')).hexdigest()\n    return md5_hash",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'"
    },
    {
        "number": 163,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    result = []\n    for num in range(a, b + 1):\n        if num % 2 == 0:\n            result.append(num)\n    return result",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]"
    }
]