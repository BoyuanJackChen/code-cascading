[
    {
        "number": 0,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    :param numbers: list of floats\n    :param threshold: float, threshold for comparing distances\n    :return: boolean indicating if there are any two numbers closer than threshold to each other\n    \"\"\"\n    if len(numbers) < 2:\n        return False\n\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance <= threshold:\n                return True\n    return False",
        "test": "assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True",
        "num_ids": 699
    },
    {
        "number": 1,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    :param paren_string: The input string containing multiple groups of nested parentheses.\n    :return: A list of the separate groups of parentheses from the input string.\n    \"\"\"\n    # Initialize an empty list to store the separate groups\n    separate_groups = []\n\n    # Iterate through each character in the string\n    for char in paren_string:\n        # If the current character is an opening parenthesis, add it to the separate groups list\n        if char == '(':\n            separate_groups.append('')\n        # If the current character is a closing parenthesis, check if the last character in the group\n        # is an opening parenthesis and if so, add the closing parenthesis to the separate groups list\n        elif char == ')':\n            if len(separate_groups) > 0 and separate_groups[-1] == '(':\n                separate_groups.append('')\n\n    # Return the list of separate groups of parentheses from the input string\n    return separate_groups",
        "test": "assert separate_paren_groups('') == []",
        "num_ids": 1278
    },
    {
        "number": 2,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = float(number - integer_part)\n    return decimal_part",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 412
    },
    {
        "number": 3,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\"\"\"\n\n    if not operations:\n        return False\n\n    min_balance = min(operations)\n    if min_balance < 0:\n        return True\n\n    for operation in operations:\n        if operation < 0:\n            return True\n\n    return False",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 638
    },
    {
        "number": 4,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    mad = 0.0\n    for num in numbers:\n        mad += abs(num - mean)\n    return mad / len(numbers)\n",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0, \"The mean_absolute_deviation function is not correct.\"",
        "num_ids": 912
    },
    {
        "number": 5,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i % 2 == 0:\n            result.append(delimeter)\n    return result",
        "test": "assert intersperse([], 4) == []",
        "num_ids": 578
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # Initialize an empty list to store the maximum nesting levels for each group\n    max_nesting_levels = []\n    \n    # Iterate over the input string and keep track of the maximum nesting level for each group\n    for i, group in enumerate(paren_string.split()):\n        # If the group contains only one character, that character is considered to be part of the nested parentheses\n        if len(group) == 1:\n            max_nesting_levels.append(0)\n        else:\n            # If the group contains more than one character, iterate over each character and update the max_nesting_levels accordingly\n            max_nesting_levels.append(1)\n            for j in range(1, len(group)):\n                if group[j] == '(':\n                    max_nesting_levels[i] += 1\n                elif group[j] == ')':\n                    max_nesting_levels[i] -= 1\n    \n    return max_nesting_levels",
        "test": "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
        "num_ids": 959
    },
    {
        "number": 7,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    \"\"\"\n    return [s for s in strings if substring in s]",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 447
    },
    {
        "number": 8,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n\n    if not numbers:\n        return (0, 1)\n\n    total_sum = 0\n    total_product = 1\n\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n\n    return (total_sum, total_product)",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 693
    },
    {
        "number": 9,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_sum = []\n    for i in range(len(numbers)):\n        rolling_max_sum.append(max(numbers[i:i+3]))\n    return rolling_max_sum",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
        "num_ids": 742
    },
    {
        "number": 10,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix that is a palindrome\n    postfix = ''\n    while len(postfix) < len(string):\n        for i, c in enumerate(string[len(postfix):]):\n            if not is_palindrome(c):\n                postfix = string[len(postfix):i+1]\n                break\n        else:\n            postfix += string[len(postfix):]\n\n    # Reverse the longest palindrome prefix\n    prefix = ''\n    for i in range(len(postfix) - 1, -1, -1):\n        if not is_palindrome(postfix[i]):\n            prefix = postfix[i]\n            break\n    else:\n        prefix = ''\n\n    # Append to the end of the string reverse of the palindrome prefix\n    return prefix + string[::-1]",
        "test": "assert make_palindrome('racecar') == 'racecar'",
        "num_ids": 1013
    },
    {
        "number": 11,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    # Convert the strings to lists of 1 and 0\n    a_list = list(map(int, a))\n    b_list = list(map(int, b))\n\n    # Initialize variables to store the XOR result\n    result = ''\n\n    # Perform XOR on each element in the lists\n    for i in range(len(a_list)):\n        result += str(a_list[i] ^ b_list[i])\n\n    # Convert the result to a string\n    return result",
        "test": "assert string_xor('010', '110') == '100'",
        "num_ids": 672
    },
    {
        "number": 12,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_length = len(strings[0])\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > longest_length:\n            longest_length = len(string)\n            longest_string = string\n    return longest_string",
        "test": "assert longest([]) is None",
        "num_ids": 498
    },
    {
        "number": 13,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n    # Use Euclidean algorithm to find the greatest common divisor\n    while b:\n        a, b = b, a % b\n\n    return a",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 440
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(1, len(string)+1):\n        prefix = string[:i]\n        if prefix!= '':\n            prefixes.append(prefix)\n    return prefixes",
        "test": "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
        "num_ids": 388
    },
    {
        "number": 15,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    sequence = []\n    for i in range(n + 1):\n        sequence.append(str(i))\n    return''.join(sequence)",
        "test": "assert string_sequence(0) == '0'",
        "num_ids": 352
    },
    {
        "number": 16,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert the string to a set of characters to make it case-insensitive\n    char_set = set(string.lower())\n    return len(char_set)",
        "test": "assert count_distinct_characters('Jerry') == 4",
        "num_ids": 461
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    # Initialize an empty list to store the number of beats for each note\n    beats = [0] * 26 # 26 ASCII letters (A-Z)\n\n    # Iterate through each character in the string\n    for char in music_string:\n\n        # Check if the character is a note\n        if char in 'o|':\n\n            # Get the note and convert to its ASCII code\n            note = char.lower()\n            note_code = ord(note)\n\n            # Check if the note is a half note or a whole note with lasting four beats\n            if note_code == ord('o'):\n                beats[note_code] += 1\n            elif note_code == ord('o') + 1 or note_code == ord('o') + 3:\n                beats[note_code] += 4\n\n            # Check if the note is a half note or a whole note with lasting two beats\n            elif note_code == ord('o') + 4:\n                beats[note_code] += 2\n            elif note_code == ord('o') + 5:\n                beats[note_code] += 2\n\n            # Check if the note is a half note or a whole note with lasting one beat\n            elif note_code == ord('o') + 6:\n                beats[note_code] += 1\n            elif note_code == ord('o') + 7:\n                beats[note_code] += 1\n\n            # Check if the note is a quarter note or a whole note with lasting one beat\n            elif note_code == ord('o') + 8 or note_code == ord('o') + 9:\n                beats[note_code] += 1\n\n        # If the character is not a note, ignore it\n        else:\n            continue\n\n    # Return the list of beats for each note\n    return beats\n",
        "test": "assert parse_music('o o|.| o| o|.|.|.|.| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
        "num_ids": 1473
    },
    {
        "number": 18,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    :param string: The original string.\n    :param substring: The substring to search for in the original string.\n    :return: The number of times the given substring can be found in the original string, counting overlaping cases.\n    \"\"\"\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 588
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    \"\"\"\n    numbers = numbers.split()\n    numbers.sort(reverse=True)\n    return''.join(numbers)",
        "test": "assert sort_numbers('three one five') == 'one three five'",
        "num_ids": 684
    },
    {
        "number": 20,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    closest_elements = []\n    closest_distances = []\n\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if not closest_distances or distance < closest_distances[0]:\n                closest_elements = [numbers[i], numbers[j]]\n                closest_distances = [distance, distance]\n            elif distance < closest_distances[1]:\n                closest_elements = [numbers[i], numbers[j]]\n                closest_distances = [distance, closest_distances[1]]\n\n    return closest_elements",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)",
        "num_ids": 1065
    },
    {
        "number": 21,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    if range_val == 0:\n        raise ValueError(\"Cannot rescale a list with zero elements to a non-zero range\")\n    rescaled_list = [(num - min_val) / range_val for num in numbers]\n    return rescaled_list",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 871
    },
    {
        "number": 22,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda x: isinstance(x, int), values))",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 433
    },
    {
        "number": 23,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)",
        "test": "assert strlen('') == 0, \"strlen('') should return 0\"",
        "num_ids": 173
    },
    {
        "number": 24,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    divisor = 2\n    while n % divisor == 0:\n        divisor += 1\n    return divisor",
        "test": "assert largest_divisor(15) == 5, \"The expected value of largest_divisor(15) is 5, but it is: \" + str(largest_divisor(15))",
        "num_ids": 386
    },
    {
        "number": 25,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    factors = []\n    i = 2\n\n    while i * i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        factors.append(n)\n\n    return factors",
        "test": "assert factorize(8) == [2, 2, 2], \"Test 1 failed. Factorization should return [2, 2, 2] for 8\"",
        "num_ids": 773
    },
    {
        "number": 26,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    :param numbers: A list of integers.\n    :return: A new list containing all unique elements of the input list.\n    \"\"\"\n    \n    unique_numbers = []\n    \n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    \n    return unique_numbers",
        "test": "assert remove_duplicates([1, 2, 2, 3, 1]) == [1, 2, 3]",
        "num_ids": 542
    },
    {
        "number": 27,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    # Initialize an empty string to store the result\n    result = ''\n    # Iterate over each character in the input string\n    for char in string:\n        # If the character is a lowercase letter, convert it to uppercase and add it to the result string\n        if char.islower():\n            result += char.upper()\n        # If the character is an uppercase letter, convert it to lowercase and add it to the result string\n        elif char.isupper():\n            result += char.lower()\n    return result",
        "test": "assert flip_case('Hello') == 'hELLO'",
        "num_ids": 532
    },
    {
        "number": 28,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)",
        "test": "assert concatenate([]) == ''",
        "num_ids": 263
    },
    {
        "number": 29,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 276
    },
    {
        "number": 30,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 587
    },
    {
        "number": 31,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert is_prime(6) == False",
        "num_ids": 508
    },
    {
        "number": 32,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x**2 +.... xs[n] * x**n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n\n    xs = sorted(xs, reverse=True)\n    n = len(xs)\n    for i in range(n // 2 - 1):\n        a = xs[i]\n        b = xs[i + 1]\n        if a * b < 0:\n            return -a / b\n\n    return -xs[-1] / xs[-2]",
        "test": "assert find_zero([1, 2]) == -0.5",
        "num_ids": 1247
    },
    {
        "number": 33,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    return sorted([l[i] for i in range(len(l)) if i % 3!= 0])",
        "test": "assert sort_third([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5]",
        "num_ids": 813
    },
    {
        "number": 34,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    unique_list = []\n    for num in l:\n        if num not in unique_list:\n            unique_list.append(num)\n    unique_list.sort()\n    return unique_list",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 587
    },
    {
        "number": 35,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_element(l: list) -> int:\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if not l:\n        return None\n    return max(l)",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 564
    },
    {
        "number": 36,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n        if i % 7 == 0:\n            count += 1\n        if count == 3:\n            return count\n    return count\n\n\nprint(fizz_buzz(50))  # Output: 0\nprint(fizz_buzz(78))  # Output: 2\nprint(fizz_buzz(79))  # Output: 3",
        "test": "assert fizz_buzz(79) == 3, \"Test failed\"",
        "num_ids": 704
    },
    {
        "number": 37,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_even = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_even.append(l[i])\n    l_even = sorted(l_even)\n    return l_even",
        "test": "assert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]",
        "num_ids": 712
    },
    {
        "number": 38,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # initialize result string and pointers.\n    result = \"\"\n    i = 0\n    j = 0\n    # iterate through the encoded string.\n    while i < len(s):\n        # if the current character is a repeated character, repeat it.\n        if s[i] == s[j]:\n            result += s[i]\n            i += 1\n            j += 1\n        # if the current character is a group of three characters, append it to the result and advance pointers.\n        else:\n            result += s[i]\n            j += 1\n            i += 1\n    # return the decoded string.\n    return result",
        "test": "assert decode_cyclic(encode_cyclic(\"\")) == \"\"",
        "num_ids": 1089
    },
    {
        "number": 39,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def is_prime(n: int) -> bool:\n    \"\"\"\n    Checks if a number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    Returns n-th number that is a Fibonacci number and is prime.\n    \"\"\"\n    if not is_prime(n):\n        return None\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    a, b = 0, 1\n    while a < n:\n        a, b = b, a + b\n    return b",
        "test": "assert prime_fib(2) == 3",
        "num_ids": 637
    },
    {
        "number": 40,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    This function takes a list of integers as an input and returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    if len(l) < 3:\n        return False\n\n    # Create a set to store the unique elements in the list\n    unique_elements = set(l)\n\n    # Find the three elements that sum to zero\n    for i in range(len(l) - 2):\n        if l[i] + l[i + 1] + l[i + 2] in unique_elements:\n            return True\n\n    # If no three elements sum to zero, return False\n    return False",
        "test": "assert triples_sum_to_zero([1, 2, 3, 7]) == False, \"Expected False, got True\"",
        "num_ids": 1204
    },
    {
        "number": 41,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    This function returns the number of collisions between two sets of cars.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 2 == 0:\n            # Right car\n            if i + 1 < n:\n                if abs(i - n) <= 1:\n                    # Collision exists between two cars moving in opposite directions\n                    count += 1\n            else:\n                # Last car on right side of road\n                count += 1\n        else:\n            # Left car\n            if i - 1 >= 0:\n                if abs(i - n) <= 1:\n                    # Collision exists between two cars moving in opposite directions\n                    count += 1\n            else:\n                # First car on left side of road\n                count += 1\n    return count\n",
        "test": "assert car_race_collision(15) == 1",
        "num_ids": 980
    },
    {
        "number": 42,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 645
    },
    {
        "number": 43,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = {}\n    for num in l:\n        complement = abs(num) - num\n        if complement in seen:\n            return True\n        seen[num] = True\n    return False",
        "test": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 948
    },
    {
        "number": 44,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n\n    if base < 2:\n        raise ValueError(\"Base must be greater than or equal to 2.\")\n\n    if x == 0:\n        return \"0\"\n\n    result = []\n    while x > 0:\n        remainder = x % base\n        result.append(str(remainder))\n        x //= base\n\n    result.reverse()\n    return ''.join(result)\n",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 614
    },
    {
        "number": 45,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h",
        "test": "assert triangle_area(5, 3) == 7.5, \"Incorrect area calculation for triangle of length 5 and height 3.\"",
        "num_ids": 283
    },
    {
        "number": 46,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def fib4(n: int):\n    \"\"\"The Fibonacci sequence is a sequence of numbers in which each number is the sum of the two preceding ones, starting from 0 and 1.\n\n    The Fibonacci sequence is defined as follows:\n\n    fib4(0) -> 0\n    fib4(1) -> 1\n    fib4(2) -> 1\n    fib4(3) -> 2\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\n    The n-th element of the Fibonacci sequence is defined as:\n\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\n    This function computes the n-th element of the Fibonacci sequence using dynamic programming.\n    \"\"\"\n\n    if n <= 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n\n    # Fibonacci sequence of length 4\n    fib_seq = [0, 1]\n\n    # Compute the n-th element of the Fibonacci sequence using dynamic programming\n    for i in range(3, n+1):\n        fib_seq.append(fib_seq[i-1] + fib_seq[i-2] + fib_seq[i-3] + fib_seq[i-4])\n\n    return fib_seq[n-1]\n",
        "test": "assert fib4(0) == 0",
        "num_ids": 700
    },
    {
        "number": 47,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    l.sort()\n    return l[n//2]",
        "test": "assert median([3, 1, 2, 4, 5]) == 3",
        "num_ids": 521
    },
    {
        "number": 48,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]",
        "test": "assert is_palindrome('') == True",
        "num_ids": 585
    },
    {
        "number": 49,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0 or p == 0:\n        return 0\n    else:\n        return pow(2, n, p)",
        "test": "assert modp(3, 5) == 3",
        "num_ids": 670
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert decode_shift(\"aBcDeFgHiJkLmNoPqRsTuVwXyZ\") == \"ZYXWVUTSRQPONMLKJIHGFEDCBA\"",
        "num_ids": 652
    },
    {
        "number": 51,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(char for char in text if char not in vowels)",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 602
    },
    {
        "number": 52,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num < t:\n            return False\n    return True",
        "test": "assert below_threshold([1, 20, 4, 10], 5) is False",
        "num_ids": 447
    },
    {
        "number": 53,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y",
        "test": "assert add(2, 3) == 5",
        "num_ids": 261
    },
    {
        "number": 54,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    :param s0: The first string.\n    :param s1: The second string.\n    :return: True if the two strings have the same characters, False otherwise.\n    \"\"\"\n    return all(s0.count(c) == s1.count(c) for c in set(s0))",
        "test": "assert same_chars('eabcd', 'dddddddabc') is False",
        "num_ids": 577
    },
    {
        "number": 55,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)",
        "test": "assert fib(10) == 55, \"fib(10) should return 55\"",
        "num_ids": 443
    },
    {
        "number": 56,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\"\n    brackets is a string of \"<\" and \">\".\n    Return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n\n    return len(stack) == 0",
        "test": "assert correct_bracketing(\"<\") is False",
        "num_ids": 571
    },
    {
        "number": 57,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    \n    prev = l[0]\n    for i in range(1, len(l)):\n        if prev > l[i]:\n            return True\n        elif prev < l[i]:\n            return False\n        prev = l[i]\n    return True",
        "test": "assert monotonic([1, 20, 4, 10]) == False",
        "num_ids": 647
    },
    {
        "number": 58,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Convert lists to sets to remove duplicates\n    s1 = set(l1)\n    s2 = set(l2)\n\n    # Find the intersection of the sets\n    common_set = s1.intersection(s2)\n\n    # Convert the set back to a list and return it\n    return list(common_set)",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 820
    },
    {
        "number": 59,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    factors = []\n    for i in range(2, int(n**0.5) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n\n    if n > 1:\n        factors.append(n)\n\n    return factors[-1]",
        "test": "assert largest_prime_factor(2048) == 2",
        "num_ids": 1427
    },
    {
        "number": 60,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_to_n(n: int) -> int:\n    \"\"\"\n    This function takes an integer n as input and returns the sum of numbers from 1 to n.\n    \"\"\"\n    # Initialize the sum variable to zero\n    sum = 0\n\n    # Loop from 1 to n and add each number to the sum variable\n    for i in range(1, n+1):\n        sum += i\n\n    # Return the sum\n    return sum",
        "test": "assert sum_to_n(30) == 465",
        "num_ids": 543
    },
    {
        "number": 61,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    Return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            if stack[-1]!= '(':\n                return False\n            stack.pop()\n    return len(stack) == 0",
        "test": "assert correct_bracketing(\"()\") is True",
        "num_ids": 626
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    n = len(xs)\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 0]\n    else:\n        d = [1] * n\n        d[1] = 0\n        for i in range(2, n):\n            d[i] = d[i-1] * xs[i-1]\n        return d",
        "test": "assert derivative([1, 2, 3]) == [2, 6]",
        "num_ids": 599
    },
    {
        "number": 63,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib1 = 0\n        fib2 = 1\n        for i in range(3, n + 1):\n            fib = fib1 + fib2\n            fib1 = fib2\n            fib2 = fib\n        return fib2",
        "test": "assert fibfib(1) == 0, \"The FibFib number sequence is not defined for the first two numbers\"",
        "num_ids": 739
    },
    {
        "number": 64,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def vowels_count(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] in \"aeiouy\":\n            count += 1\n    return count\n",
        "test": "assert vowels_count(\"ABCDXY\") == 0",
        "num_ids": 521
    },
    {
        "number": 65,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    result = ''\n    while len(result) < shift:\n        if len(str(x)) > len(result):\n            result += str(x)[len(result):]\n        else:\n            x = x * 10\n            result += str(x)[len(result):]\n    if shift > len(str(x)):\n        return result[::-1]\n    else:\n        return result",
        "test": "assert circular_shift(12, 2) == \"12\"",
        "num_ids": 502
    },
    {
        "number": 66,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 616
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    fruit_dict = {'a':0,'b':0,'c':0,'d':0,'e':0,'f':0,'g':0,'h':0,'i':0,'j':0,'k':0,'l':0,'m':0,'n':0,'o':0,'p':0,'q':0,'r':0,'s':0,'t':0,'u':0,'v':0,'w':0,'x':0,'y':0,'z':0}\n    fruit_count = 0\n    for i in s:\n        fruit_dict[i] += 1\n        fruit_count += 1\n    mango_count = 0\n    for i in range(1,101):\n        if i in fruit_dict:\n            mango_count += 1\n    return fruit_count - mango_count",
        "test": "assert fruit_distribution(\"100 apples and 1 oranges\", 120) == 19, \"The correct number of mango fruits is not given in the output\"",
        "num_ids": 1176
    },
    {
        "number": 68,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                        so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    even_values = []\n    smallest_even = float('inf')\n    smallest_index = -1\n\n    for i, node in enumerate(arr):\n        if node % 2 == 0:\n            even_values.append(node)\n            if node < smallest_even:\n                smallest_even = node\n                smallest_index = i\n\n    if len(even_values) == 0:\n        return []\n\n    elif len(even_values) == 1:\n        return [even_values[0], smallest_index]\n\n    else:\n        return [even_values[smallest_index], smallest_index]\n",
        "test": "assert pluck([]) == []",
        "num_ids": 1612
    },
    {
        "number": 69,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    max_freq = 0\n    max_num = -1\n    for num in lst:\n        if num > 0 and num >= max_freq:\n            max_num = num\n            max_freq = num\n    return max_num",
        "test": "assert search([5, 5, 4, 4, 4]) == -1",
        "num_ids": 969
    },
    {
        "number": 70,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # Check if list is empty or only contains one element\n    if len(lst) <= 1:\n        return lst\n\n    # Find the minimum element of the list\n    min_val = min(lst)\n\n    # Create a new list with only one element, the minimum value\n    new_lst = [min_val]\n\n    # Traverse the list and add the next element to the new list if it's greater than or equal to the minimum value\n    for i in range(1, len(lst)):\n        if lst[i] >= min_val:\n            new_lst.append(lst[i])\n\n    # Return the new list in strange order\n    return new_lst",
        "test": "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]",
        "num_ids": 1138
    },
    {
        "number": 71,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def triangle_area(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # Check if the triangle is valid\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the area using Heron's formula\n        s = (a + b + c) / 2\n        area = round(s * (s - a) * (s - b) * (s - c), 2)\n        return area\n    else:\n        return -1",
        "test": "assert triangle_area(1, 2, 10) == -1, \"Expected area to be -1, but got {}\".format(triangle_area(1, 2, 10))",
        "num_ids": 809
    },
    {
        "number": 72,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n\n    if len(q) % 2 == 0:  # If the length of the list is even, it's unbalanced\n        return False\n\n    total = sum(q)  # Calculate the total sum of the list elements\n    max_weight = w  # Initialize the maximum possible weight as w\n\n    # Check if the sum is less than or equal to the maximum possible weight\n    if total <= max_weight:\n        return True\n    else:\n        return False",
        "test": "assert will_it_fly([3, 2, 3], 1) == False",
        "num_ids": 783
    },
    {
        "number": 73,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    # Create a dictionary to store the minimum number of changes required\n    min_changes = {}\n    min_changes[0] = 0\n    # Loop through the array and check for palindromes\n    for i in range(n):\n        for j in range(i, n):\n            # If the current palindrome is the same as the previous palindrome\n            if arr[i] == arr[j]:\n                # If the current palindrome has at least one difference, count the change\n                if j - i + 1 < len(arr) / 2:\n                    min_changes[j - i + 1] += 1\n    # Find the minimum number of changes required\n    for i in range(len(min_changes)):\n        if min_changes[i] == min(min_changes.values()):\n            return i\n    # If all palindromes have the same minimum number of changes, return 0\n    return 0",
        "test": "assert smallest_change([1, 2, 3, 2, 1]) == 0",
        "num_ids": 1212
    },
    {
        "number": 74,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\n    # Check if lists are empty\n    if not lst1 or not lst2:\n        return []\n\n    # Get length of lists\n    len1 = len(lst1)\n    len2 = len(lst2)\n\n    # If lengths of lists are different, return first list as it is total\n    if len1!= len2:\n        return lst1\n\n    # Check if lists have the same number of chars\n    if len1!= 0:\n        if set(lst1) == set(lst2):\n            return lst1\n        else:\n            return lst2\n\n    # If both lists have the same number of chars, compare their first elements\n    # to find the total match\n    for i in range(len1):\n        if lst1[i] < lst2[i]:\n            return lst1[:i+1]\n        elif lst1[i] > lst2[i]:\n            return lst2[:i+1]\n\n    # If no match found, return empty list\n    return []",
        "test": "assert total_match([], []) == []",
        "num_ids": 1086
    },
    {
        "number": 75,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    # Check if a is less than 100\n    if a < 100:\n        # Check if a is divisible by any 2 prime numbers\n        if 2 in [x for x in range(3, int(a**0.5) + 1, 2)]:\n            # Check if a is divisible by 3 prime numbers\n            if 3 in [x for x in range(3, int(a**0.5) + 1, 3)]:\n                return True\n    return False",
        "test": "assert is_multiply_prime(27) == False",
        "num_ids": 1609
    },
    {
        "number": 76,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Return True if x is a simple power of n and False otherwise.\"\"\"\n    if n == 1:\n        return True\n    elif n % 2 == 0:\n        return is_simple_power(x*x, n//2)\n    else:\n        return False",
        "test": "assert is_simple_power(1, 4) == True",
        "num_ids": 350
    },
    {
        "number": 77,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a <= 0:\n        return False\n    if a == 1:\n        return True\n    # check if a is a power of 3\n    for i in range(2, int(a ** 0.5) + 1):\n        if a % i == 0:\n            return False\n    return True",
        "test": "assert iscube(1) == True",
        "num_ids": 657
    },
    {
        "number": 78,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    hex_count = 0\n    for digit in num:\n        if digit.isdigit():\n            hex_count += 1\n            if digit in \"23456789ABCDEF\" and int(digit) > 1:\n                if int(digit) % 2 == 0:\n                    hex_count += 1\n    return hex_count",
        "test": "assert hex_key(\"123456789ABCDEF0\") == 6",
        "num_ids": 1293
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\n    # Initializing the binary string\n    binary_str = ''\n\n    # Converting the decimal to binary\n    while decimal > 0:\n        remainder = decimal % 2\n        binary_str = str(remainder) + binary_str\n        decimal = decimal // 2\n\n    # Removing the extra 'db' characters\n    binary_str = binary_str[2:-2]\n\n    return binary_str",
        "test": "assert decimal_to_binary(32) == 'db100000db'",
        "num_ids": 577
    },
    {
        "number": 80,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_happy(s):\n    \"\"\"\n    This function takes a string s as input and returns True if the string is happy and False otherwise.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    \"\"\"\n    if len(s) < 3:\n        return False\n    \n    i = 0\n    while i < len(s) - 2:\n        if s[i] == s[i+1] == s[i+2]:\n            i += 3\n        else:\n            return False\n    \n    return True\n",
        "test": "assert is_happy('a') == False",
        "num_ids": 727
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n             4.0                A+\n             > 3.7                A \n             > 3.3                A- \n             > 3.0                B+\n             > 2.7                B \n             > 2.3                B-\n             > 2.0                C+\n             > 1.7                C\n             > 1.3                C-\n             > 1.0                D+ \n             > 0.7                D \n             > 0.0                D-\n             0.0                E\n    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = {'A+': 'A+/',\n                    'A-': 'A-',\n                    'B+': 'B+',\n                    'B-': 'B-',\n                    'C+': 'C+',\n                    'C-': 'C-',\n                    'D+': 'D+',\n                    'D-': 'D-',\n                    'E': 'E'}\n    \n    letter_grades = {k: v for k, v in letter_grades.items() if v in grades}\n    \n    return sorted(letter_grades.keys())\n",
        "test": "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']",
        "num_ids": 1431
    },
    {
        "number": 82,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    length = len(string)\n    is_prime = True\n    for i in range(2, length):\n        if length % i == 0:\n            is_prime = False\n            break\n    return is_prime",
        "test": "assert prime_length('Hello') == True",
        "num_ids": 609
    },
    {
        "number": 83,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\n    count = 0\n    for i in range(n, 0, -1):\n        # Count the numbers of positive integers that start with 1\n        if i == 1:\n            count += 1\n\n        # Count the numbers of positive integers that end with 1\n        if i == n:\n            count += 1\n\n    return count",
        "test": "assert starts_one_ends(20) == 2 # This is the correct number of 20-digit positive integers that start or end with 1",
        "num_ids": 745
    },
    {
        "number": 84,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n                Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n        a string of binary number\n    \"\"\"\n    total = 0\n    while N > 0:\n        total += N % 10\n        N //= 10\n    return str(total)\n",
        "test": "assert solve(1000) == '1'",
        "num_ids": 795
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\n    \"\"\"\n\n    even_lst = [num for num in lst if num % 2 == 0]\n    odd_lst = [num for num in lst if num % 2!= 0]\n    even_odd_lst = even_lst + odd_lst\n\n    return sum(even_odd_lst)",
        "test": "assert add([4, 2, 6, 7]) == 2, \"add([4, 2, 6, 7]) failed\" # should output 2",
        "num_ids": 412
    },
    {
        "number": 86,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n    words = s.split() # Split the string into words\n    words.sort() # Sort the words in ascending order based on ascii value\n    shuffled_words = [''.join(sorted(word, key=lambda x: ord(x))) for word in words] # Sort each word and join them in ascending order based on ascii value\n    shuffled_sentence =''.join(shuffled_words) # Join the shuffled words back together with spaces\n    return shuffled_sentence",
        "test": "assert anti_shuffle('Hi') == 'Hi'",
        "num_ids": 857
    },
    {
        "number": 87,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D data, find integers x in the list, and return a list of tuples.\n    Sort coordinates by rows and by columns.\n    \"\"\"\n    rows = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                rows.append((i, j))\n    rows.sort(key=lambda x: (-x[0], x[1]))\n    return rows",
        "test": "assert get_row([], 1) == []",
        "num_ids": 1116
    },
    {
        "number": 88,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    # check if the sum of first and last indices is odd\n    odd_sum = sum(array[0:len(array)//2]) % 2 == 1\n\n    # sort the array using merge sort algorithm\n    if odd_sum:\n        return merge_sort(array)\n    else:\n        return merge_sort_desc(array)\n\n\ndef merge_sort(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    # base case\n    if len(array) <= 1:\n        return array\n\n    # divide the array into two halves\n    mid = len(array) // 2\n    left_half = array[:mid]\n    right_half = array[mid:]\n\n    # recursively sort each half\n    left_half = merge_sort(left_half)\n    right_half = merge_sort(right_half)\n\n    # merge the sorted halves\n    return merge(left_half, right_half)\n\n\ndef merge(left_half, right_half):\n    \"\"\"\n    Given two sorted arrays, return a merged array.\n\n    Note:\n    * don't change the given arrays.\n\n    Examples:\n    * merge([5, 3, 1, 4], [2, 4, 1, 5]) => [1, 2, 3, 4, 5]\n    \"\"\"\n\n    result = []\n    i = j = 0\n\n    while i < len(left_half) and j < len(right_half):\n        if left_half[i] <= right_half[j]:\n            result.append(left_half[i])\n            i += 1\n        else:\n            result.append(right_half[j])\n            j += 1\n\n    result.extend(left_half[i:])\n    result.extend(right_half[j:])\n\n    return result\n\n\ndef merge_sort_desc(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in descending order if the sum( first index value, last index value) is odd,\n    or sort it in ascending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array_desc([]) => []\n    * sort_array_desc([5]) => [5]\n    * sort_array_desc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n    * sort_array_desc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1]\n    \"\"\"\n\n    # base case\n    if len(array) <= 1:\n        return array\n\n    # divide the",
        "test": "assert sort_array([]) == []",
        "num_ids": 2138
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    encrypted_string = \"\"\n    for i in range(len(s)):\n        if i % 2 == 0:\n            encrypted_string += s[i] * 2\n        else:\n            encrypted_string += s[i]\n    return encrypted_string",
        "test": "assert encrypt('et') == 'ix'",
        "num_ids": 971
    },
    {
        "number": 90,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n\n    smallest = lst[0]\n    second_smallest = lst[1]\n\n    for i in range(2, len(lst)):\n        if lst[i] < smallest:\n            second_smallest = smallest\n            smallest = lst[i]\n        elif lst[i] < second_smallest and lst[i]!= smallest:\n            second_smallest = lst[i]\n\n    if second_smallest == lst[0]:\n        return None\n    else:\n        return second_smallest",
        "test": "assert next_smallest([]) == None",
        "num_ids": 591
    },
    {
        "number": 91,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "import re\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    words = re.findall(r'\\b(?:the|a|an|of)\\b', S)\n    bored_words = [word for word in words if word.lower() == 'i']\n    return len(bored_words)",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 1612
    },
    {
        "number": 92,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def any_int(x, y, z):\n    # check if x, y, and z are integers\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        return False\n    \n    # calculate the sum of x, y, and z\n    total = x + y + z\n    \n    # check if the sum of x, y, and z is equal to the product of x, y, and z\n    if total == x*y*z:\n        return True\n    else:\n        return False",
        "test": "assert any_int(3, 2, 2) == False",
        "num_ids": 571
    },
    {
        "number": 93,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \"\"\"\n    # Initialize an empty string to store the encoded message\n    encoded = ''\n\n    # Iterate over each character in the message\n    for char in message:\n        # If the character is a letter, add it to the encoded message\n        if char.isalpha():\n            # Replace vowels with corresponding letter in the english alphabet\n            if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n                char_ahead = chr(ord(char.lower()) + 2)\n                encoded += char_ahead.upper()\n            else:\n                encoded += char.upper()\n\n    return encoded",
        "test": "assert encode('test') == 'TGST', \"Encode should return the correct result for 'test'\"",
        "num_ids": 932
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef largest_prime_value(lst):\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num):\n            if num > largest_prime:\n                largest_prime = num\n    return largest_prime\n\nlst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nlargest_prime = largest_prime_value(lst)\nprint(\"The largest prime value in the list is:\", largest_prime)\n\nlst = [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]\nlargest_prime = largest_prime_value(lst)\nprint(\"The largest prime value in the list is:\", largest_prime)\n\nlst = [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]\nlargest_prime = largest_prime_value(lst)\nprint(\"The largest prime value in the list is:\", largest_prime)\n\nlst = [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]\nlargest_prime = largest_prime_value(lst)\nprint(\"The largest prime value in the list is:\", largest_prime)\n\nlst = [0, 81, 12, 3, 1, 21]\nlargest_prime = largest_prime_value(lst)\nprint(\"The largest prime value in the list is:\", largest_prime)\n\nlst = [0, 8, 1, 2, 1, 7]\nlargest_prime = largest_prime_value(lst)\nprint(\"The largest prime value in the list is:\", largest_prime)",
        "test": "assert skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11",
        "num_ids": 2190
    },
    {
        "number": 95,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # Check if the dictionary is empty\n    if not dict:\n        return False\n    \n    # Check if all keys are strings\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n    \n    # Check if all keys are strings in lower or upper case\n    all_lower = True\n    all_upper = True\n    for key in dict:\n        if key.islower():\n            all_lower = False\n        elif key.isupper():\n            all_upper = False\n        else:\n            return False\n    \n    # Return True if all conditions are True, else False\n    return all_lower or all_upper",
        "test": "assert check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) == False",
        "num_ids": 965
    },
    {
        "number": 96,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n < 0:\n        return []\n    elif n == 1:\n        return [2]\n    else:\n        prime_numbers = [2]\n        is_prime = [True] * (n + 1)\n        is_prime[0] = False\n        is_prime[1] = False\n\n        for i in range(2, int(n ** 0.5) + 1):\n            if is_prime[i]:\n                for j in range(i * i, n + 1, i):\n                    is_prime[j] = False\n\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if is_prime[i]:\n                prime_numbers.append(i)\n\n        return prime_numbers",
        "test": "assert count_up_to(0) == []",
        "num_ids": 1228
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def multiply(a, b):\n    \"\"\"\n    This function takes two integers as input and returns their product of their unit digits.\n    \"\"\"\n    # Convert both input integers to strings\n    num1 = str(a)\n    num2 = str(b)\n    # Loop through each digit of the first number\n    product = 0\n    for i in range(len(num1)):\n        # Loop through each digit of the second number\n        for j in range(len(num2)):\n            # Calculate the product of the current digits and add it to the result\n            product += int(num1[i]) * int(num2[j])\n    # Return the product of the unit digits\n    return product",
        "test": "assert multiply(14, -15) == 20, \"Multiply(14,-15) should return 20.\"",
        "num_ids": 888
    },
    {
        "number": 98,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n            \n    return count",
        "test": "assert count_upper('') == 0, \"The function should return 0 for an empty string\"",
        "num_ids": 542
    },
    {
        "number": 99,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    # Convert the string to a float\n    num = float(value)\n\n    # Find the difference between the minimum and maximum values\n    diff = num - int(num)\n\n    # If the difference is zero, return the number itself\n    if diff == 0:\n        return int(value)\n\n    # If the difference is less than 0, round the number down to the nearest integer\n    elif diff < 0:\n        return int(value) - 1\n\n    # If the difference is greater than 0, round the number up to the nearest integer\n    else:\n        return int(value) + 1",
        "test": "assert closest_integer(\"10\") == 10, \"closest_integer('10') should return 10\"",
        "num_ids": 1423
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    # Initialize an empty list to store the number of stones in each level\n    pile = [0] * (n+1)\n    \n    # Iterate through the levels of stones\n    for i in range(n):\n        # Check if n is odd or even\n        num = (i+1) % 2\n        # Calculate the next odd or even number\n        if num == 0:\n            next_num = (i+1)*2\n        else:\n            next_num = (i+1)*2 + 1\n        \n        # Update the pile with the new number of stones in the current level\n        pile[i+1] = next_num\n    \n    # Return the list of number of stones in each level\n    return pile",
        "test": "assert make_a_pile(9) == [9, 11, 13], \"The function is not returning the expected result.\"",
        "num_ids": 1003
    },
    {
        "number": 101,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def words_string(s):\n    \"\"\"\n    Split a string of words into an array of words.\n    \"\"\"\n    words = s.split(\",\")\n    return words",
        "test": "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
        "num_ids": 428
    },
    {
        "number": 102,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\n    count = 0\n    max_num = x\n    for i in range(x, y + 1, 2):\n        if i % 2 == 0:\n            count += 1\n            if i > max_num:\n                max_num = i\n\n    if count == 0:\n        return -1\n    else:\n        return max_num",
        "test": "assert choose_num(12, 15) == 14",
        "num_ids": 762
    },
    {
        "number": 103,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def rounded_avg(n, m):\n    \"\"\"\n    Function to compute the average of the integers from n to m (inclusive).\n    If n is greater than m, returns -1.\n    \"\"\"\n\n    if n > m:\n        return -1\n\n    average = (n + m) // 2\n    rounded_average = round(average)\n    binary_average = bin(rounded_average)[2:]\n\n    return binary_average",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 792
    },
    {
        "number": 104,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # create an empty list to store the unique digits\n    digits = []\n    # loop through the list and add all the even digits to the list\n    for num in x:\n        if num % 2 == 0: # check if the number is even\n            continue # skip even digits\n        else: # add the digit to the list\n            digits.append(num)\n    # sort the list in increasing order\n    digits.sort()\n    # return the sorted list\n    return digits",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
        "num_ids": 717
    },
    {
        "number": 105,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n      \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n      \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # Step 1: Sort the integers between 1 and 9 inclusive.\n    sorted_arr = sorted([int(digit) for digit in arr if 1 <= int(digit) <= 9])\n\n    # Step 2: Reverse the sorted array.\n    reversed_arr = sorted_arr[::-1]\n\n    # Step 3: Replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    name_dict = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    for i in range(len(reversed_arr)):\n        digit = reversed_arr[i]\n        if digit not in name_dict:\n            # Ignore the digit if it is not a valid number.\n            continue\n        reversed_arr[i] = name_dict[digit]\n\n    return reversed_arr",
        "test": "assert by_length([]) == []",
        "num_ids": 1779
    },
    {
        "number": 106,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def f(n):\n    \"\"\"Implement the function f that takes n as a parameter and returns a list of size n,\n    such that the value of the element at index i is the factorial of i if i is even or\n    the sum of numbers from 1 to i otherwise.\n    i starts from 1.\"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result",
        "test": "assert f(0) == [], \"The function f(0) should return []\"",
        "num_ids": 703
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    # Initialize variables\n    even_count = 0\n    odd_count = 0\n\n    # Loop through all numbers from 1 to n\n    for num in range(1, n+1):\n        # Check if the number is a palindrome\n        if str(num) == str(num)[::-1]:\n            # If it is a palindrome, check if it is even or odd\n            if str(num) == str(num)[::-1] // 2:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    # Return the tuple\n    return (even_count, odd_count)\n",
        "test": "assert even_odd_palindrome(12) == (4, 6)",
        "num_ids": 1012
    },
    {
        "number": 108,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n    count = 0\n    for num in arr:\n        if num > 0:\n            num_str = str(num)\n            num_sum = sum(int(digit) for digit in num_str)\n            if num_sum > 0:\n                count += 1\n\n    return count",
        "test": "assert count_nums([]) == 0",
        "num_ids": 728
    },
    {
        "number": 109,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "import random\n\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n        \n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performing 2 right shift operations, non-decreasing order can\n                be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation: It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n\n    # If the array is empty, return True\n    if len(arr) == 0:\n        return True\n\n    # Get the length of the array\n    n = len(arr)\n\n    # Randomly choose two elements to swap\n    i = random.randint(0, n-1)\n    j = random.randint(0, n-1)\n\n    # Swap the elements\n    arr[i], arr[j] = arr[j], arr[i]\n\n    # Right shift all elements of the array by one position in the right direction\n    for k in range(1, n):\n        arr[k] = arr[k-1]\n\n    # If the sorted array is non-decreasing, return True\n    if sorted(arr) == arr:\n        return True\n    else:\n        return False",
        "test": "assert move_one_ball([]) == True, \"move_one_ball([]) returns True for the empty array.\"",
        "num_ids": 1755
    },
    {
        "number": 110,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\n    # Check if the lengths of lst1 and lst2 are equal\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n\n    # Initialize two pointers to the beginning of lst1 and lst2\n    i = 0\n    j = 0\n\n    # Iterate through both lists simultaneously\n    while i < len(lst1) and j < len(lst2):\n        # If the current elements of lst1 are even and the current elements\n        # of lst2 are odd, then we cannot exchange them. Return \"NO\"\n        if lst1[i] % 2 == 0 and lst2[j] % 2!= 0:\n            return \"NO\"\n\n        # If the current elements of lst1 are odd and the current elements\n        # of lst2 are even, then we cannot exchange them. Return \"NO\"\n        elif lst1[i] % 2!= 0 and lst2[j] % 2 == 0:\n            return \"NO\"\n\n        # If the current elements of lst1 are even and the current elements\n        # of lst2 are even, then we can exchange the elements. Move both\n        # pointers forward.\n        elif lst1[i] % 2 == 0 and lst2[j] % 2 == 0:\n            i += 1\n            j += 1\n\n        # If the current elements of lst1 are odd and the current elements\n        # of lst2 are odd, then we can exchange the elements. Move the first\n        # pointer forward and the second pointer backward.\n        elif lst1[i] % 2!= 0 and lst2[j] % 2!= 0:\n            i += 1\n\n    # If all elements of lst1 and lst2 have even parity, then the list is even,\n    # and we can return \"YES\"\n    return \"YES\"",
        "test": "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"",
        "num_ids": 1822
    },
    {
        "number": 111,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Initialize the dictionary\n    counts = {}\n\n    # Split the input string into individual letters\n    letters = test.split()\n\n    # Loop through the letters and update the counts\n    for letter in letters:\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n\n    # Find the maximum count and corresponding letter\n    max_count = 0\n    max_letter = ''\n    for letter, count in counts.items():\n        if count > max_count:\n            max_count = count\n            max_letter = letter\n\n    # Return the dictionary\n    return {max_letter: max_count}",
        "test": "assert histogram('b b b b a') == {'b': 4}",
        "num_ids": 1029
    },
    {
        "number": 112,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    if result == s:\n        return (result, True)\n    else:\n        return (result, False)",
        "test": "assert reverse_delete(\"abcdef\",\"b\") == (\"acdef\", False)",
        "num_ids": 884
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    count = []\n    for i in lst:\n        count.append(\"the number of odd elements {} of the {}nput.\".format(len(i) // 2, i))\n    return count",
        "test": "assert odd_count(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]",
        "num_ids": 1090
    },
    {
        "number": 114,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    n = len(nums)\n\n    # Initialize a variable to store the minimum sum\n    min_sum = float('inf')\n\n    # Initialize a variable to store the prefix sum array\n    prefix_sum = [0] * n\n\n    # Initialize a variable to store the current sum\n    current_sum = 0\n\n    # Iterate through the array\n    for i in range(n):\n        # Increment the current sum by the current element\n        current_sum += nums[i]\n\n        # If the current sum is less than or equal to the minimum sum, update the minimum sum\n        if current_sum <= min_sum:\n            min_sum = current_sum\n\n        # Add the current element to the prefix sum array\n        prefix_sum[i] = current_sum\n\n    # Return the minimum sum\n    return min_sum\n",
        "test": "assert minSubArraySum([1, 2, 3, 4, 5]) == 1",
        "num_ids": 776
    },
    {
        "number": 115,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n    rows = len(grid)\n    cols = len(grid[0])\n    bucket_capacity = capacity\n\n    max_lower = math.inf\n    count = 0\n\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                if i > 0 and grid[i-1][j] == 1:\n                    # We are moving downwards, so we can lower one bucket\n                    bucket = bucket_capacity\n                    while bucket > 0:\n                        bucket -= 1\n                        if grid[i-1][j] == 1:\n                            max_lower = min(max_lower, bucket)\n                            break\n                        elif bucket == 0:\n                            break\n                    else:\n                        count += 1\n                        grid[i][j] = 0\n                else:\n                    # We are moving upwards, so we can lower the bucket directly\n                    bucket = bucket_capacity\n                    while bucket > 0:\n                        bucket -= 1\n                        if grid[i+1][j] == 1:\n                            max_lower = min(max_lower, bucket)\n                            break\n                        elif bucket == 0:\n                            break\n                    else:\n                        count += 1\n                        grid[i][j] = 0\n\n    return count",
        "test": "assert max_fill([[0,0,0], [0,0,0]], 5) == 0",
        "num_ids": 1386
    },
    {
        "number": 116,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    ones = [0] * len(arr)\n    zeros = [0] * len(arr)\n\n    for num in arr:\n        if num == 0:\n            zeros[num] += 1\n        else:\n            ones[num] += 1\n\n    sorted_ones = []\n    sorted_zeros = []\n\n    for i in range(1, len(ones) + 1):\n        for j in range(i, len(ones) + 1):\n            sorted_ones.append(ones[i - 1])\n            sorted_ones.append(ones[j - 1])\n\n    for i in range(1, len(zeros) + 1):\n        for j in range(i, len(zeros) + 1):\n            sorted_zeros.append(zeros[i - 1])\n            sorted_zeros.append(zeros[j - 1])\n\n    sorted_array = sorted_ones + sorted_zeros\n\n    return sorted_array",
        "test": "assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]",
        "num_ids": 1154
    },
    {
        "number": 117,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    s = s.replace(\" \", \"\").lower()\n    if not s:\n        return []\n    words = s.split()\n    result = []\n    for i in range(len(words)):\n        word = \" \".join(words[i:i+n])\n        if len(set(word)) == n:\n            result.append(word)\n    return result",
        "test": "assert select_words(\"simple white space\", 2) == []",
        "num_ids": 1052
    },
    {
        "number": 118,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def get_closest_vowel(word):\n    \"\"\"\n    You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    # Initialize variables\n    left_consonant = ''\n    right_consonant = ''\n    closest_vowel = ''\n\n    # Iterate through the string\n    for i in range(len(word)):\n        if word[i].lower() in 'aeiou':\n            left_consonant = word[i]\n        elif word[i].lower() in 'bcdfghjklmnpqrstvwxyz':\n            right_consonant = word[i]\n        else:\n            # If there's no consonant found, return empty string\n            if left_consonant == '':\n                return ''\n            # Find the closest vowel\n            elif left_consonant == right_consonant:\n                closest_vowel = left_consonant\n                break\n            elif left_consonant < right_consonant:\n                closest_vowel = left_consonant\n            else:\n                closest_vowel = right_consonant\n\n    return closest_vowel\n",
        "test": "assert get_closest_vowel(\"ab\") == \"\", \"Your code for get_closest_vowel is incorrect.\"",
        "num_ids": 1195
    },
    {
        "number": 119,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def match_parens(lst):\n    if len(lst) < 2:\n        return 'No'\n\n    stack = []\n    for char in lst[1:-1]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack[-1]!= '(':\n                return 'No'\n            stack.pop()\n\n    if not stack or stack[-1]!= '(':\n        return 'No'\n    return 'Yes'",
        "test": "assert match_parens([')', ')']) == 'No'",
        "num_ids": 367
    },
    {
        "number": 120,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    arr.sort()\n    return arr[:k]",
        "test": "assert maximum([-3, -4, 5], 3) == [-4, -3, 5]",
        "num_ids": 907
    },
    {
        "number": 121,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Args:\n    lst: A non-empty list of integers.\n\n    Returns:\n    An integer representing the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 0\n    \"\"\"\n\n    # Initialize an empty list to store the sum of odd elements that are in even positions\n    odd_elements_sum = []\n\n    # Loop through the list of integers\n    for num in lst:\n        # Check if the number is odd and even\n        if num % 2 == 0 and num % 2!= 0:\n            # If the number is odd and even, add it to the list of odd elements that are in even positions\n            odd_elements_sum.append(num)\n\n    # Return the sum of all the odd elements that are in even positions\n    return sum(odd_elements_sum)",
        "test": "assert solution([30, 13, 24, 321]) == 0",
        "num_ids": 787
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n    # sort the array in non-decreasing order\n    arr.sort()\n\n    # initialize the sum with the first element\n    total = arr[0]\n\n    # iterate through the remaining elements and add the digits with at most 2 digits\n    for i in range(1, k):\n        # add the current element to the total\n        total += arr[i]\n\n        # if the current element has at most 2 digits, add it to the result\n        if len(str(total)) <= 2:\n            result.append(total)\n\n    return result",
        "test": "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24",
        "num_ids": 784
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    # Initialize the first term\n    collatz_list = [n]\n\n    # Iterate through the list\n    for i in range(1, len(collatz_list)):\n        # If the term is odd, add it to the collatz list\n        if collatz_list[i] % 2!= 0:\n            collatz_list.append(collatz_list[i] // 2)\n\n    # Return the sorted list\n    return sorted(collatz_list)",
        "test": "assert get_odd_collatz(1) == [1], \"The collatz sequence for 1 is [1], so the odd numbers are only 1.\"",
        "num_ids": 1447
    },
    {
        "number": 124,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def valid_date(date):\n    \"\"\"Validates a given date string and returns True if the date is valid\n    otherwise False. The date is valid if all of the following rules are\n    satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    For example:\n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    # Check if the date string is not empty\n    if len(date.strip()) == 0:\n        return False\n    \n    # Split the date string into month, day, year\n    month, day, year = map(int, date.split('-'))\n    \n    # Check if the date is valid\n    if not (1 <= month <= 12 and 1 <= day <= 31 and 1 <= year <= 9999):\n        return False\n    \n    # Check if the number of days is valid\n    if month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n        if month in [4, 6, 9, 11] and day < 1:\n            return False\n        if month in [2] and day < 1:\n            return False\n    elif month in [2]:\n        if day < 1 or day > 28:\n            return False\n    else:\n        if day < 1 or day > 31:\n            return False\n    \n    return True",
        "test": "assert valid_date('03-11-2000') == True",
        "num_ids": 1775
    },
    {
        "number": 125,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def split_words(txt):\n    if ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt.lower():\n            if char.isalpha() and ord(char) % 2 == 1:\n                count += 1\n        return count",
        "test": "assert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 557
    },
    {
        "number": 126,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n\n    for i in range(1, len(lst)):\n        if lst[i - 1] > lst[i]:\n            return False\n\n    return True",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 957
    },
    {
        "number": 127,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n    start1 = interval1[0]\n    end1 = interval1[1]\n    start2 = interval2[0]\n    end2 = interval2[1]\n\n    if end1 >= start2:\n        return \"NO\"\n    elif start1 <= end2:\n        return \"NO\"\n    else:\n        if start2 + end2 == start1:\n            return \"YES\"\n        else:\n            return \"NO\"\n",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\"",
        "num_ids": 1100
    },
    {
        "number": 128,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    Returns the sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        int: The sum of magnitudes of integers multiplied by product of all signs\n        of each number in the array, represented by 1, -1 or 0.\n    \"\"\"\n    if not arr:\n        return None\n\n    prod = 1\n    magnitudes = []\n    for num in arr:\n        if num > 0:\n            magnitudes.append(num)\n            prod *= num\n        elif num < 0:\n            magnitudes.append(num)\n            prod *= num\n        else:\n            magnitudes.append(0)\n            prod *= num\n\n    return sum(magnitudes) * prod",
        "test": "assert prod_signs([]) is None, \"Incorrect result for arr=[]\"",
        "num_ids": 804
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def minPath(grid, k):\n    # create the 2D array dp\n    N = len(grid)\n    dp = [[0] * (N+1) for _ in range(N+1)]\n\n    # fill the array\n    for i in range(1, N+1):\n        for j in range(1, N+1):\n            if i == 1 and j == 1:\n                dp[i][j] = grid[0][0]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + grid[i-1][j-1]\n\n    # return the answer\n    return dp[N][N]",
        "test": "assert minPath([ [5,9,3], [4,1,6], [7,8,2]], 1) == [1]",
        "num_ids": 1485
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def tri(n):\n    \"\"\"Return a list of the first n + 1 numbers of the Tribonacci sequence.\"\"\"\n    if n <= 0:\n        return []\n\n    tri_sequence = [3]  # initialize the first 3 numbers of the sequence\n\n    for i in range(2, n + 1):\n        tri_sequence.append(tri_sequence[i - 1] + tri_sequence[i - 2] + tri_sequence[i - 3])\n\n    return tri_sequence",
        "test": "assert tri(3) == [1, 3, 2, 8], \"The correct output should be [1, 3, 2, 8]\"",
        "num_ids": 793
    },
    {
        "number": 131,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # Initialize the product to 1\n    product = 1\n\n    # Loop through each digit of the number\n    for digit in str(n):\n        # Convert the digit to an integer and multiply it with the product\n        product *= int(digit)\n\n    # Return the product if it's odd, otherwise return 0\n    return product % 2!= 0",
        "test": "assert digits(1) == 1",
        "num_ids": 595
    },
    {
        "number": 132,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_nested(string):\n    # Define an empty stack\n    stack = []\n\n    # Iterate over each character in the string\n    for char in string:\n\n        # If the current character is a closing bracket, remove the top two elements from the stack\n        if char == ']':\n            if len(stack) > 1:\n                stack.pop()\n                stack.pop()\n\n        # If the current character is a bracket, push it onto the stack\n        elif char == '[':\n            stack.append(char)\n\n        # If the current character is a space or an opening bracket, check if there is a valid subsequence of brackets\n        # where at least one bracket is nested\n        elif char.isspace():\n            if stack and stack[0] in string[1:]:\n                return True\n\n        # If the current character is not a bracket or a space, push it onto the stack\n        else:\n            stack.append(char)\n\n    # If the stack is empty, there is no valid subsequence of brackets where at least one bracket is nested\n    return False\n",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False",
        "num_ids": 616
    },
    {
        "number": 133,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    return sum(x**2 for x in lst)",
        "test": "assert sum_squares([1, 2, 3]) == 14",
        "num_ids": 771
    },
    {
        "number": 134,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n\n    # Initialize an empty string to store the current word\n    curr_word = \"\"\n\n    # Loop through the string and check if the last character\n    # is an alphabetical character and is not a part of a word\n    for char in txt:\n        if char.isalpha() and char!= \" \":\n            # If the last character is an alphabetical character,\n            # check if it is a part of a word\n            if char.lower() == txt[-1].lower():\n                curr_word += char\n            else:\n                # If the last character is not a part of a word,\n                # return False\n                return False\n\n    # If the loop completes without finding a word,\n    # return False\n    return False",
        "test": "assert check_if_last_char_is_a_letter(\"apple pie\") == False",
        "num_ids": 874
    },
    {
        "number": 135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    # initialize variables\n    max_index = -1\n    current_index = 0\n\n    # loop through the array\n    while current_index < len(arr):\n        # if the current element is less than or equal to the previous\n        # element, the array can be arranged\n        if arr[current_index] <= arr[current_index - 1]:\n            max_index = current_index\n            break\n        # move to the next element\n        current_index += 1\n\n    return max_index",
        "test": "assert can_arrange([1,2,3]) == -1",
        "num_ids": 795
    },
    {
        "number": 136,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    def get_max_and_min(lst):\n        max_val = float('-inf')\n        min_val = float('inf')\n        for val in lst:\n            if val > max_val:\n                max_val = val\n            elif val < min_val:\n                min_val = val\n        return (max_val, min_val)\n\n    max_val, min_val = get_max_and_min(lst)\n\n    if max_val == float('-inf'):\n        return (None, None)\n    elif min_val == float('inf'):\n        return (None, None)\n    else:\n        return (max_val, min_val)",
        "test": "assert largest_smallest_integers([]) == (None, None)",
        "num_ids": 1020
    },
    {
        "number": 137,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def compare_one(a, b):\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return max(a, b)\n    elif isinstance(a, str) and isinstance(b, str):\n        return float(a) if float(a).is_integer() else float(a).replace(\",\", \".\")\n    else:\n        return None",
        "test": "assert compare_one(1, 2.5) == 2.5, \"compare_one(1, 2.5) \u279e {}\".format(2.5)",
        "num_ids": 888
    },
    {
        "number": 138,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # Check if n is divisible by 4\n    if n % 4!= 0:\n        return False\n\n    # Check if n is a positive even number\n    if n % 2 == 0:\n        return False\n\n    # Initialize the sum as 0\n    sum = 0\n\n    # Iterate through the numbers 1 to n and check if they are even numbers\n    for i in range(1, n+1):\n        if i % 2 == 0 and i % 4 == 0:\n            sum += i\n\n    # If the sum is 4 and the number is divisible by 4, then it can be written as the sum of exactly 4 positive even numbers\n    if sum == 4 and n % 4 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_equal_to_sum_even(4) == False",
        "num_ids": 794
    },
    {
        "number": 139,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    result = 1\n\n    for i in range(1, n+1):\n        result *= i\n\n    return result",
        "test": "assert special_factorial(0) == 1",
        "num_ids": 727
    },
    {
        "number": 140,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    text = text.replace(' ', '_')\n    if'' in text:\n        if text.count(' ') == 2:\n            text = text.replace(' ', '-')\n        else:\n            text = text.replace(' ', '_')\n    return text",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 668
    },
    {
        "number": 141,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Check for more than three digits in the file name\n    if len(file_name.split('.')) > 3:\n        return 'No'\n    \n    # Check if the file name contains exactly one dot '.'\n    if file_name.count('.')!= 1:\n        return 'No'\n    \n    # Check if the substring before the dot is not empty and starts with a letter from the latin alphapet\n    if not file_name.split('.')[0].isalpha():\n        return 'No'\n    \n    # Check if the substring after the dot is one of these\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'",
        "test": "assert file_name_check(\"1example.dll\") == \"No\"",
        "num_ids": 1285
    },
    {
        "number": 142,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def sum_squares(lst):\n    if not lst:\n        return 0\n\n    total_sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4!= 0:\n            total_sum += lst[i] ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            total_sum += lst[i] ** 3\n    return total_sum",
        "test": "assert sum_squares([]) == 0",
        "num_ids": 783
    },
    {
        "number": 143,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    def find_prime_words(sentence, words):\n        prime_words = []\n        for word in words:\n            if is_prime(len(word)):\n                prime_words.append(word)\n        return prime_words\n\n    prime_words = find_prime_words(sentence.split(), sentence.split())\n    prime_words.sort()\n    prime_words_str =''.join(prime_words)\n    return prime_words_str",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\"",
        "num_ids": 717
    },
    {
        "number": 144,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Remove the '/' character from the denominator string\n    denominator = n.split('/')[-1]\n\n    # Convert the denominator to an integer\n    denominator = int(denominator)\n\n    # Check if the fraction can be simplified\n    if denominator == 1:\n        return True\n\n    # Split the fraction into numerator and denominator\n    numerator = x.split('/')[-1]\n    denominator = int(denominator)\n\n    # Simplify the fraction by dividing it by the numerator and multiplying the result by the denominator\n    simplified_fraction = numerator * denominator\n\n    # Check if the simplified fraction is equal to the original fraction\n    if simplified_fraction == x:\n        return True\n\n    # If the simplified fraction is not equal to the original fraction, return False\n    return False\n",
        "test": "assert simplify(\"7/10\", \"10/2\") == False",
        "num_ids": 663
    },
    {
        "number": 145,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Sort the given list of integers in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n            order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Helper function to calculate the sum of digits of a number\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    # Sort the list using the sum_of_digits function\n    nums.sort(key=lambda x: sum_of_digits(x))\n\n    # Reverse the sorted list to get the desired order\n    return nums[::-1]",
        "test": "assert order_by_points([]) == []",
        "num_ids": 839
    },
    {
        "number": 146,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) == 1 and (num % 100) // 10 == 1:\n            count += 1\n    return count",
        "test": "assert specialFilter([2, 2, 2, 2, 2]) == 0  # case 3",
        "num_ids": 705
    },
    {
        "number": 147,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(len(a)-1):\n        for j in range(i+1, len(a)):\n            if a[j] + a[i] == 3 and a[j] in a[i:j+1] and a[i] + a[j] + a[k] == 3:\n                count += 1\n    return count",
        "test": "assert get_max_triples(2) == 0, \"The expected output is 0. Your code is returning {}\".format(get_max_triples(2))",
        "num_ids": 943
    },
    {
        "number": 148,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closer to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    if planet1 not in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n        return ()\n    elif planet2 not in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n        return ()\n    else:\n        from math import radians, cos, sin, asin, sqrt\n        def distance(lat1, lon1, lat2, lon2):\n            \"\"\"\n            Calculate the distance between two points on the Earth's surface\n            \"\"\"\n            R = 6371  # km\n            dLat = radians(lat2-lat1)\n            dLon = radians(lon2-lon1)\n            a = sin(dLat/2)**2 + cos(radians(lat1)) * cos(radians(lat2)) * sin(dLon/2)**2\n            c = 2 * asin(sqrt(a))\n            return R * c\n\n        planets = []\n        for planet in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n            if planet == planet1 or planet == planet2:\n                continue\n            lat1, lon1 = calculate_latitude_longitude(planet1)\n            lat2, lon2 = calculate_latitude_longitude(planet2)\n            if distance(lat1, lon1, lat2, lon2) > 2000:  # check if the distance between the two planets is less than 2000 km\n                continue\n            planets.append((planet, distance(lat1, lon1, lat2, lon2)))\n        planets.sort(key=lambda x: x[1])\n        return tuple([planet[0] for planet in planets])\n\ndef calculate_latitude_longitude(name):\n    \"\"\"\n    Calculate the latitude and longitude of a planet from its name\n    \"\"\"\n    from math import radians, degrees, sin, cos, asin, sqrt\n\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n    if name not in planets:\n        raise ValueError(f\"{name} is not a valid planet name.\")\n\n    R = 6371  # km\n    lat = radians(90 - 36.83 * int(name[-1]) / 2)\n    lon = (180 + 36.83 * int(name[-1]) % 2) * radians(int(name[-2:])) / 360\n\n    return lat, lon",
        "test": "assert bf(\"Pluto\", \"Io\") == ()",
        "num_ids": 3055
    },
    {
        "number": 149,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\n    # Initialize an empty list to store the sorted list\n    sorted_list = []\n\n    # Iterate through each word in the list\n    for word in lst:\n        # If the word has an odd length, delete it from the list\n        if len(word) % 2 == 1:\n            continue\n\n        # Add the word to the sorted list\n        sorted_list.append(word)\n\n    # Sort the sorted list by length of each word\n    sorted_list.sort(key=len)\n\n    # Sort the sorted list alphabetically if the length of the words is the same\n    if len(sorted_list) > 1:\n        sorted_list.sort()\n\n    return sorted_list",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 1071
    },
    {
        "number": 150,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n\n    \"\"\"\n    is_prime = True\n    for i in range(2, n):\n        if n % i == 0:\n            is_prime = False\n            break\n\n    if is_prime:\n        return x\n    else:\n        return y",
        "test": "assert x_or_y(7, 34, 12) == 34, \"x_or_y(7, 34, 12) should return 34\"",
        "num_ids": 769
    },
    {
        "number": 151,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    '''\n    \n    # Check if the input list is empty\n    if not lst:\n        return 0\n    \n    # Initialize the sum of squares to 0\n    squares_sum = 0\n    \n    # Loop through each number in the list\n    for num in lst:\n        # Check if the number is an integer\n        if isinstance(num, int):\n            # Check if the number is odd\n            if num % 2!= 0:\n                # Add the square of the number to the sum\n                squares_sum += num ** 2\n    \n    return squares_sum",
        "test": "assert double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 == 10",
        "num_ids": 744
    },
    {
        "number": 152,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    # Check if the game and guess arrays are the same length\n    if len(game)!= len(guess):\n        return \"The game and guess arrays are not the same length.\"\n\n    # Initialize an empty array to store the difference between each guess and the game score\n    difference = [None] * len(guess)\n\n    # Loop through the game and guess arrays and calculate the difference between each pair\n    for i in range(len(guess)):\n        if game[i] == guess[i]:\n            difference[i] = 0\n        else:\n            difference[i] = abs(game[i] - guess[i])\n\n    return difference",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 1196
    },
    {
        "number": 153,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    extension_list = sorted(extensions, key=lambda x: (-len(x), x))\n    strongest_extension = extension_list[0]\n    \n    return f\"{class_name}.{strongest_extension}\"",
        "test": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'",
        "num_ids": 1461
    },
    {
        "number": 154,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n\n    # Define the pattern characters\n    pattern = [b]\n\n    # Check if the second word is a substring in the first word\n    for i in range(len(a) - len(b) + 1):\n        substring = a[i:i+len(b)]\n        if substring in pattern:\n            return True\n\n    return False",
        "test": "assert cycpattern_check(\"abcd\", \"abd\") == False",
        "num_ids": 993
    },
    {
        "number": 155,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)",
        "test": "assert even_odd_count(123) == (1, 2)",
        "num_ids": 519
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    # Define the roman numeral values for the given number\n    roman_numerals = {\n        1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC',\n        50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'\n    }\n\n    # Initialize the roman numeral and the output string\n    output = ''\n    roman_numeral = ''\n\n    # Iterate through the number in reverse order\n    for digit in range(len(roman_numerals), 0, -1):\n        while number >= roman_numerals[digit]:\n            output += roman_numerals[digit]\n            number -= roman_numerals[digit]\n\n    return output.lower()",
        "test": "assert int_to_mini_roman(426) == 'cdxxvi'",
        "num_ids": 1269
    },
    {
        "number": 157,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False",
        "test": "assert right_angle_triangle(1, 2, 3) == False",
        "num_ids": 556
    },
    {
        "number": 158,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n\n    max_word = \"\"\n    max_chars = 0\n    max_unique_chars = 0\n    for word in words:\n        if len(word) > max_chars:\n            max_word = word\n            max_chars = len(word)\n        elif len(word) == max_chars:\n            unique_chars = 0\n            for char in word:\n                unique_chars += 1\n                if unique_chars > max_unique_chars:\n                    max_word = word\n                    max_unique_chars = unique_chars\n\n    return max_word",
        "test": "assert find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"aaaaaaa\"",
        "num_ids": 868
    },
    {
        "number": 159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    Returns an array of [total number of eaten carrots after your meals, the number of carrots left after your meals].\n    \n    The function considers the following cases:\n    \n    Case 1: There are enough remaining carrots.\n    \n    If the number of carrots remaining is at least equal to the number of carrots needed, \n    it means we have eaten all the carrots and can return the array [number of carrots eaten, 0].\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n    \n    Have fun :)\n    \"\"\"\n    \n    # Handle the cases where there are not enough remaining carrots\n    if remaining < need:\n        return [number, remaining]\n    \n    # Calculate the number of carrots we can eat at the moment\n    can_eat = min(number, remaining)\n    \n    # Update the remaining carrots\n    remaining -= can_eat\n    \n    # Return the array [total number of carrots eaten, remaining carrots]\n    return [can_eat, remaining]",
        "test": "assert eat(2, 11, 5) == [7, 0]",
        "num_ids": 1121
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n    Division ( / )\n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n    # Build the algebraic expression\n    if operator[0] == '+':\n        result = operand[0] + operand[1]\n    elif operator[0] == '-':\n        result = operand[0] - operand[1]\n    elif operator[0] == '*':\n        result = operand[0] * operand[1]\n    elif operator[0] == '//':\n        if operand[0] == 0:\n            raise ValueError(\"Cannot divide by zero\")\n        result = operand[0] // operand[1]\n    elif operator[0] == '**':\n        if operand[0] == 0:\n            raise ValueError(\"Cannot raise zero to a negative power\")\n        result = pow(operand[0], operand[1], operand[2])\n    elif operator[0] == '/':\n        if operand[1] == 0:\n            raise ValueError(\"Cannot divide by zero\")\n        result = operand[0] / operand[1]\n    else:\n        raise ValueError(\"Invalid operator\")\n    \n    return result",
        "test": "assert do_algebra(['*', '/'], [2, 3, 4]) == 6",
        "num_ids": 1453
    },
    {
        "number": 161,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solve(s):\n    \"\"\"Reverse the case of the letters in a string.\n    If the string contains no letters, reverse the string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    if not s:\n        return s\n    result = \"\"\n    for i in s:\n        if i.isalpha():\n            if i.islower():\n                result += i.upper()\n            else:\n                result += i.lower()\n        else:\n            result += i\n    return result",
        "test": "assert solve(\"ab\") == \"AB\"",
        "num_ids": 667
    },
    {
        "number": 162,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\n    if text == '':\n        return None\n\n    import hashlib\n\n    md5 = hashlib.md5()\n    md5.update(text.encode('utf-8'))\n    return md5.hexdigest()",
        "test": "assert string_to_md5('') == None",
        "num_ids": 725
    },
    {
        "number": 163,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a >= b:\n        raise ValueError(\"a must be less than or equal to b\")\n\n    even_digits = []\n    while a <= b:\n        even_digits.append(a)\n        a += 2\n\n    return even_digits",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 831
    }
]