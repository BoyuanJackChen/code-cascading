[
    {
        "number": 0,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if abs(diff) < threshold:\n            return True\n    return False",
        "test": "assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True"
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other.\n    Ignore any spaces in the input string.\n    \"\"\"\n    paren_stack = []\n    paren_groups = []\n    start_index = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            if not paren_stack:\n                paren_groups.append(paren_string[start_index:i])\n                start_index = i + 1\n            else:\n                paren_stack.append((paren_string[start_index:i], i))\n        elif paren_string[i] == ')':\n            if not paren_stack:\n                raise ValueError(\"Invalid input: unmatched opening parentheses\")\n            opening_paren_index, closing_paren_index = paren_stack.pop()\n            closing_paren_index = min(closing_paren_index, i)\n            opening_paren = paren_string[opening_paren_index:closing_paren_index]\n            closing_paren = paren_string[closing_paren_index]\n            paren_groups.append(opening_paren)\n            paren_groups.append(closing_paren)\n    if paren_stack:\n        raise ValueError(\"Invalid input: unmatched closing parentheses\")\n    return paren_groups",
        "test": "assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']"
    },
    {
        "number": 2,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n\n    # Convert number to integer and decimal parts\n    integer_part = int(number)\n    decimal_part = number - integer_part\n\n    return decimal_part\n",
        "test": "assert truncate_number(3.5) == 0.5"
    },
    {
        "number": 3,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    The function takes a list of deposit and withdrawal operations on a bank account, and returns True if \n    at any point the balance of account falls below zero, and False otherwise.\n    \"\"\"\n    # Get the maximum value in the list\n    max_value = max(operations)\n\n    # Loop through each operation in the list\n    for operation in operations:\n        # Check if the operation is negative\n        if operation < 0:\n            # If it is, return True\n            return True\n\n        # Check if the balance of the account has reached zero\n        if operation > max_value:\n            # If it has, return True\n            return True\n\n    # If no operation is negative and the balance of the account has not reached zero, return False\n    return False",
        "test": "assert below_zero([1, 2, 3]) == False"
    },
    {
        "number": 4,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    mad = 0\n    for num in numbers:\n        mad += abs(num - mean)\n    return mad / len(numbers)",
        "test": "assert mean_absolute_deviation([1.0, 1.0, 1.0, 1.0]) == 0.0"
    },
    {
        "number": 5,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(0, len(numbers), 2):\n        result.append(numbers[i])\n        result.append(delimeter)\n    return result",
        "test": "assert intersperse([], 4) == []"
    },
    {
        "number": 6,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    :param paren_string: string representing multiple groups for nested parentheses separated by spaces.\n    :return: list of integers representing the deepest level of nesting of parentheses.\n    \"\"\"\n\n    # Split the string into groups of parentheses\n    groups = paren_string.split()\n\n    # Initialize a variable to store the deepest level of nesting of parentheses\n    deepest_level = 0\n\n    # Iterate through each group\n    for group in groups:\n        # If the group is an opening parenthesis, increment the deepest level\n        if group[0] == '(':\n            deepest_level += 1\n\n        # If the group is a closing parenthesis, decrement the deepest level\n        elif group[0] == ')':\n            deepest_level -= 1\n\n    # Return the deepest level of nesting of parentheses\n    return [deepest_level]",
        "test": "assert parse_nested_parens('((()))') == [1]"
    },
    {
        "number": 7,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    Args:\n        strings (List[str]): List of strings to filter\n        substring (str): The substring to search for\n    Returns:\n        List[str]: List of strings that contain the given substring\n    \"\"\"\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings",
        "test": "assert filter_by_substring([], 'a') == []"
    },
    {
        "number": 8,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n\n    total = sum(numbers)\n    product = 1\n    for num in numbers:\n        product *= num\n\n    return (total, product)",
        "test": "assert sum_product([]) == (0, 1)"
    },
    {
        "number": 9,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n\n    # Initialize the rolling max list with the first number in the list\n    rolling_max_list = [numbers[0]]\n\n    # Iterate over the remaining numbers in the list\n    for number in numbers[1:]:\n        # If the current number is greater than the current max in the rolling_max_list,\n        # add it to the rolling_max_list\n        if number > rolling_max_list[-1]:\n            rolling_max_list.append(number)\n        # If the current number is less than or equal to the current max in the rolling_max_list,\n        # replace it with the current number\n        else:\n            rolling_max_list[rolling_max_list.index(rolling_max_list[-1])] = number\n\n    return rolling_max_list",
        "test": "assert rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
        "number": 10,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix of the string that is a palindrome\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i+1]) and len(string[:i+1]) > len(longest_palindrome):\n            longest_palindrome = string[:i+1]\n\n    # Find the shortest prefix that comes before the longest palindrome\n    prefix = ''\n    for i in range(len(string)-len(longest_palindrome)+1):\n        if is_palindrome(string[i:i+len(longest_palindrome)]) and string[i:i+len(longest_palindrome)] < prefix:\n            prefix = string[i:i+len(longest_palindrome)]\n\n    # Append the prefix to the end of the string and reverse the result\n    return prefix + longest_palindrome[::-1]\n",
        "test": "assert make_palindrome('') == ''"
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\"\"\"\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == '0':\n            result += '0'\n        else:\n            result += '1'\n    for i in range(len(b)):\n        if b[i] == '0':\n            result += '0'\n        else:\n            result += '1'\n    return result",
        "test": "assert string_xor('010', '110') == '100'"
    },
    {
        "number": 12,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n\n    Args:\n        strings (list): List of strings.\n\n    Returns:\n        Optional[str]: The longest string from the input list, or None in case the input list is empty.\n    \"\"\"\n\n    if not strings:\n        return None\n    \n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    \n    return longest_str",
        "test": "assert longest([]) == None"
    },
    {
        "number": 13,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)",
        "test": "assert greatest_common_divisor(25, 15) == 5"
    },
    {
        "number": 14,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 25,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes",
        "test": "assert all_prefixes('abc') == ['a', 'ab', 'abc']"
    },
    {
        "number": 15,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\"Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\n    Args:\n        n (int): An integer that specifies the range of numbers to be generated.\n\n    Returns:\n        str: A string containing space-delimited numbers starting from 0 upto n inclusive.\n\n    \"\"\"\n    sequence = []\n    for i in range(n+1):\n        sequence.append(str(i))\n    return''.join(sequence)",
        "test": "assert string_sequence(0) == '0'"
    },
    {
        "number": 16,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from collections import Counter\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    counter = Counter(string.lower())\n    return len(counter)",
        "test": "assert count_distinct_characters('Jerry') == 4"
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    \n    beats = []\n    current_beat = 0\n    current_note = None\n\n    for char in music_string:\n        if char == 'o':\n            current_beat += 4\n        elif char == 'o|':\n            current_beat += 2\n        elif char == '.|':\n            current_beat += 1\n\n        if current_note is None:\n            current_note = current_beat\n\n        beats.append(current_note)\n        current_note = None\n        current_beat = 0\n\n    return beats",
        "test": "assert parse_music('o o|.| o| o|.| o| o| o| o|') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"
    },
    {
        "number": 18,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    i = 0\n    while i < len(string) - len(substring) + 1:\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count",
        "test": "assert how_many_times('aaa', 'a') == 3"
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    \"\"\"\n    # convert the string to a list of integers\n    numbers_list = [int(x) for x in numbers.split()]\n\n    # sort the list in ascending order\n    sorted_numbers = sorted(numbers_list, reverse=True)\n\n    # convert the sorted list back to a string and join with spaces\n    sorted_numbers_str =''.join(str(x) for x in sorted_numbers)\n\n    return sorted_numbers_str\n",
        "test": "assert sort_numbers('zero four five six seven eight nine three two one') == 'one three five'"
    },
    {
        "number": 20,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    closest_numbers = []\n    smallest = numbers[0]\n    largest = numbers[0]\n    smallest_distance = abs(numbers[0] - smallest)\n    largest_distance = abs(numbers[0] - largest)\n\n    for number in numbers[1:]:\n        distance = abs(number - smallest)\n        if distance < smallest_distance:\n            smallest_distance = distance\n            closest_numbers.clear()\n            closest_numbers.append(smallest)\n        elif distance > largest_distance:\n            largest_distance = distance\n            closest_numbers.clear()\n            closest_numbers.append(largest)\n        else:\n            closest_numbers.append(number)\n\n    return closest_numbers",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)"
    },
    {
        "number": 21,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    delta = max_val - min_val\n    scaled_numbers = [(num - min_val) / delta for num in numbers]\n    return scaled_numbers",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]"
    },
    {
        "number": 22,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]"
    },
    {
        "number": 23,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)",
        "test": "assert strlen('') == 0, \"Wrong string length\""
    },
    {
        "number": 24,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n\n    if n % 2 == 0:\n        largest_divisor = n\n    else:\n        largest_divisor = n - 1\n\n    return largest_divisor\n",
        "test": "assert largest_divisor(25) == 15, \"The function should return 15 for a number 25.\""
    },
    {
        "number": 25,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    i = 2\n    \n    while i*i <= n:\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n        \n        i += 1\n    \n    if n > 1:\n        factors.append(n)\n    \n    return factors",
        "test": "assert factorize(8) == [2, 2, 2], \"factorize(8) should return [2, 2, 2]\""
    },
    {
        "number": 26,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # Create a set to store the unique elements\n    unique_set = set(numbers)\n    # Convert the set back to a list to get the unique elements\n    unique_list = list(unique_set)\n    # Sort the list in ascending order\n    unique_list.sort()\n    # Return the unique list\n    return unique_list",
        "test": "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"
    },
    {
        "number": 27,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.lower().upper()",
        "test": "assert flip_case('A') == 'A'"
    },
    {
        "number": 28,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    result = \"\"\n    for s in strings:\n        result += s\n    return result",
        "test": "assert concatenate([]) == ''"
    },
    {
        "number": 29,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]",
        "test": "assert filter_by_prefix([], 'a') == []"
    },
    {
        "number": 30,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    :param l: a list of numbers\n    :return: a list of positive numbers from the original list\n    \"\"\"\n\n    return [num for num in l if num > 0]",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]"
    },
    {
        "number": 31,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\n    if n < 2:\n        return False\n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True\n",
        "test": "assert is_prime(6) is False"
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x**2 +.... xs[n] * x**n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n\n    # Check if xs has an even number of coefficients\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have an even number of coefficients\")\n\n    # Find the largest non-zero coefficient\n    max_coeff = max(xs)\n\n    # Find the zero point using the poly function\n    zero_point = poly(xs, max_coeff)\n\n    return zero_point",
        "test": "assert round(find_zero([-6, 11, -6, 1]), 2) == 1.0"
    },
    {
        "number": 33,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    if len(l) % 3!= 0:\n        raise ValueError(\"The list must have an even length\")\n    result = []\n    for i in range(0, len(l), 3):\n        temp = [l[j] for j in range(i, i+3)]\n        temp = sorted(temp)\n        result += temp\n    return result",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3]"
    },
    {
        "number": 34,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    # Create a set to store unique elements\n    unique_set = set(l)\n    # Convert the set back to a list and return it\n    return sorted(list(unique_set))",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]"
    },
    {
        "number": 35,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if len(l) == 0:\n        return None\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return max(l)",
        "test": "assert max_element([1, 2, 3]) == 3"
    },
    {
        "number": 36,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \"\"\"\n    count = 0\n    for num in range(1, n+1):\n        if num % 11 == 0 and num % 13 == 0:\n            count += 1\n    return count",
        "test": "assert fizz_buzz(50) == 0, \"fizz_buzz(50) should return 0\""
    },
    {
        "number": 37,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    # Create an empty list to store the sorted values\n    sorted_list = []\n\n    # Iterate through each element of the input list\n    for num in l:\n        # If the current element is odd, append it to the sorted list\n        if num % 2 == 1:\n            sorted_list.append(num)\n\n    # Return the sorted list\n    return sorted_list",
        "test": "assert sort_even([5, 3, 7, 9, 1]) == [5, 3, 7, 9, 1]"
    },
    {
        "number": 38,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string into groups of three characters.\n    groups = s.split(\" \")\n    # reverse the order of elements in each group.\n    return \" \".join(reversed(groups))",
        "test": "assert decode_cyclic(encode_cyclic(\"\")) == \"\""
    },
    {
        "number": 39,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def prime_fib(n: int):\n    \"\"\"\n    Returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b",
        "test": "assert prime_fib(1) == 2"
    },
    {
        "number": 40,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    # Initialize a set to keep track of the distinct elements\n    distinct_set = set()\n\n    # Iterate through the list and add each element to the set if it's not already present\n    for num in l:\n        if num not in distinct_set:\n            distinct_set.add(num)\n\n    # Check if there are exactly three distinct elements in the set that sum up to zero\n    if len(distinct_set) == 3:\n        return True\n    else:\n        return False",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False"
    },
    {
        "number": 41,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Implementation of the car race collision problem.\n\n    Input:\n        n: An integer representing the number of cars in the race.\n\n    Returns:\n        An integer representing the number of collisions.\n    \"\"\"\n    # Initialize a counter for collisions\n    collisions = 0\n\n    # Create an array to store the positions of the cars\n    positions = []\n\n    # Create two lists: one for the cars moving left to right, and one for the cars moving right to left\n    left_cars = []\n    right_cars = []\n\n    # Loop through the number of cars\n    for i in range(n):\n        # Add the current position of the car to the list of positions\n        positions.append((i + 1, 1))\n\n        # Create a new car for the left side of the road\n        left_cars.append((i + 1, 1))\n\n        # Create a new car for the right side of the road\n        right_cars.append((i + 1, -1))\n\n    # Loop through each collision\n    for i in range(len(positions) - 1):\n        for j in range(len(positions) - 1):\n            # Check if there is a collision between the cars\n            if positions[i][1] == positions[j][1]:\n                # If there is, increment the collision count\n                collisions += 1\n\n    # Return the collision count\n    return collisions",
        "test": "assert car_race_collision(1) == 0, \"Expected 0 collisions, got: {}\".format(car_race_collision(1))"
    },
    {
        "number": 42,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x+1 for x in l]",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]"
    },
    {
        "number": 43,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    # Sort the list in ascending order\n    l.sort()\n    # Initialize two pointers\n    i = 0\n    j = 1\n    # Iterate through the list\n    while i < len(l) - 1:\n        # Check if the sum of the two elements at index i and j is zero\n        if l[i] + l[j] == 0:\n            # Return True if there are two distinct elements that sum to zero\n            return True\n        # If the sum of the two elements at index i and j is greater than zero,\n        # move the pointers towards each other\n        elif l[i] + l[j] > 0:\n            i += 1\n        # If the sum of the two elements at index i and j is less than zero,\n        # move the pointers towards each other\n        else:\n            j += 1\n    # If the sum of the two elements at index i and j is zero, then there is\n    # only one distinct element that sum to zero.\n    return False",
        "test": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False"
    },
    {
        "number": 44,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x //= base\n    return result\n",
        "test": "assert change_base(8, 3) == '22'"
    },
    {
        "number": 45,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n\n    return (0.5 * a * h)",
        "test": "assert triangle_area(5, 3) == 7.5, \"Incorrect area calculated.\""
    },
    {
        "number": 46,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.\n    Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)",
        "test": "assert fib4(0) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    # sort the list in ascending order\n    l.sort()\n    # get the middle index of the list\n    mid = n // 2\n    # if the length of the list is odd, return the middle element\n    if n % 2 == 1:\n        return l[mid]\n    # if the length of the list is even, return the average of the two middle elements\n    else:\n        return (l[mid - 1] + l[mid]) / 2",
        "test": "assert median([3, 1, 2, 4, 5]) == 3"
    },
    {
        "number": 48,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    # Convert string to lowercase and remove non-alphabetic characters\n    text = ''.join(c for c in text.lower() if c.isalpha())\n    # If the string is empty or has one character, it's a palindrome\n    if len(text) <= 1:\n        return True\n    # Split the string into two halves and check if each half is a palindrome\n    left, right = 0, len(text)-1\n    while left < right:\n        if text[left]!= text[right]:\n            return False\n        left += 1\n        right -= 1\n    # If all characters are palindromes, return True\n    return True\n",
        "test": "assert is_palindrome('') == True"
    },
    {
        "number": 49,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2 ** n % p",
        "test": "assert modp(0, 101) == 1, \"0 should be 1.\""
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n    # initialize empty string to store decoded characters\n    decoded = \"\"\n\n    # iterate through each character in the encoded string\n    for ch in s:\n\n        # check if the character is a letter and if it's the last character of the string\n        if ch.isalpha() and ch == s[-1]:\n\n            # calculate the index of the letter in the alphabet\n            index = ord(ch) - ord(\"a\")\n\n            # check if the character is greater than the last character of the string\n            if index > len(s) - 1:\n                decoded += ch\n            else:\n                decoded += s[index]\n\n    return decoded",
        "test": "assert decode_shift(encode_shift(\"!@#$%^&*()_+-=[]{}|;':\\\",.<>/?\")) == \"!@#$%^&*()_+-=[]{}|;':\\\",.<>/?\""
    },
    {
        "number": 51,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n",
        "test": "assert remove_vowels('') == ''"
    },
    {
        "number": 52,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    # Initialize a variable to keep track of the number of elements below threshold\n    count = 0\n\n    # Iterate through each element in the list\n    for num in l:\n        # Increment the count if the number is below the threshold\n        if num < t:\n            count += 1\n\n        # If we've counted all elements below the threshold, return True\n        if count == len(l):\n            return True\n\n    # If we've iterated through the entire list and haven't returned True, return False\n    return False",
        "test": "assert below_threshold([1, 20, 4, 10], 5) == False"
    },
    {
        "number": 53,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y",
        "test": "assert add(2, 3) == 5, \"Error: add(2, 3) should return 5.\""
    },
    {
        "number": 54,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    # Convert strings to sets of characters\n    s0_set = set(s0)\n    s1_set = set(s1)\n    \n    # Check if sets have the same characters\n    if s0_set == s1_set:\n        return True\n    else:\n        return False",
        "test": "assert same_chars('eabcd', 'dddddddabc') == False"
    },
    {
        "number": 55,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)",
        "test": "assert fib(1) == 1, \"Fib(1) should be 1, but it is not.\""
    },
    {
        "number": 56,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack or stack[-1]!= \"<\":\n                return False\n            stack.pop()\n        elif char == \"[\":\n            stack.append(char)\n        elif char == \"]\":\n            if not stack or stack[-1]!= \"[\":\n                return False\n            stack.pop()\n    return not stack",
        "test": "assert correct_bracketing(\"<>\") == True"
    },
    {
        "number": 57,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    # Find the first element in the list\n    first_element = l[0]\n\n    # Check if the list is decreasing\n    if first_element >= max(l):\n        return True\n\n    # Check if the list is increasing\n    else:\n        return False",
        "test": "assert monotonic([1, 20, 4, 10]) == False"
    },
    {
        "number": 58,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from collections import Counter\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    common_elements = []\n    for element in l1:\n        if element in l2:\n            common_elements.append(element)\n    return sorted(common_elements)",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]"
    },
    {
        "number": 59,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return None\n    \n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            \n    if n > 1:\n        return n\n    \n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    \n    if n > 1:\n        return n\n    \n    return None",
        "test": "assert largest_prime_factor(2048) == 2, \"2048 is not a prime number.\""
    },
    {
        "number": 60,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_to_n(n: int) -> int:\n    \"\"\"\n    A function to sum all numbers from 1 to n.\n    \"\"\"\n    # Initialize the sum to 0\n    total = 0\n    \n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # Add each number to the sum\n        total += i\n    \n    # Return the sum\n    return total",
        "test": "assert sum_to_n(30) == 465, \"sum_to_n(30) should return 465\""
    },
    {
        "number": 61,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "test": "assert correct_bracketing(\"(\") == False, \"The first opening bracket is not paired with a corresponding closing bracket.\""
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def derivative(xs):\n    \"\"\"\n    xs represents coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x**2 +....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n    n = len(xs)\n    result = [1] * n\n    result[n-1] = 0\n\n    for i in range(n-2, -1, -1):\n        result[i] = result[i+1] * xs[i]\n\n    return result",
        "test": "assert derivative([1, 2, 3]) == [2, 6]"
    },
    {
        "number": 63,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def fibfib(n: int):\n    \"\"\"The Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib_prev_prev = 0\n        fib_prev = 1\n        fib_current = 1\n        for i in range(2, n):\n            fib_next = fib_prev_prev + fib_prev\n            fib_prev_prev = fib_prev\n            fib_prev = fib_current\n            fib_current = fib_next\n        return fib_current",
        "test": "assert fibfib(1) == 0, \"fibfib(1) is not 0\""
    },
    {
        "number": 64,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouy\"\n    count = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels and i == len(s)-1:\n            count += 1\n    return count",
        "test": "assert vowels_count(\"world\") == 0"
    },
    {
        "number": 65,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x) + str(x)[shift:]",
        "test": "assert circular_shift(12, 2) == \"12\""
    },
    {
        "number": 66,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n\n    sum = 0\n\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n\n    return sum",
        "test": "assert digitSum(\"\") == 0, \"digitSum('') should return 0\""
    },
    {
        "number": 67,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    \"\"\"\n    fruit_dict = {\"apple\": 0, \"orange\": 0, \"mango\": 0}\n    fruit_count = 0\n    for fruit in s.split():\n        fruit = fruit.lower()\n        if fruit in fruit_dict:\n            fruit_dict[fruit] += 1\n        elif fruit == \"apple\":\n            fruit_dict[\"apple\"] += 1\n        elif fruit == \"orange\":\n            fruit_dict[\"orange\"] += 1\n        else:\n            fruit_dict[\"mango\"] += 1\n        fruit_count += 1\n    return n - fruit_dict[\"apple\"] - fruit_dict[\"orange\"] - fruit_count",
        "test": "assert fruit_distribution(\"2 apples and 3 oranges\", 100) == 95"
    },
    {
        "number": 68,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def pluck(arr):\n    even_values = []\n    smallest_value = float('inf')\n    smallest_index = 0\n\n    for i, value in enumerate(arr):\n        if value % 2 == 0:\n            even_values.append(value)\n            if value < smallest_value:\n                smallest_value = value\n                smallest_index = i\n\n    if not even_values or len(arr) == 0:\n        return []\n\n    if len(even_values) == 1:\n        return [even_values[0], smallest_index]\n\n    return [min(even_values), smallest_index]",
        "test": "assert pluck([]) == []"
    },
    {
        "number": 69,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    max_freq = max(lst, key=lst.count)\n    return max_freq if max_freq!= 0 else -1",
        "test": "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3"
    },
    {
        "number": 70,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def strange_sort_list(lst):\n    if lst:\n        max_val = lst[0]\n        min_val = lst[0]\n\n        for val in lst:\n            if val > max_val:\n                max_val = val\n            elif val < min_val:\n                min_val = val\n\n        sorted_lst = [min_val, max_val] + [val for val in lst if val!= max_val and val!= min_val]\n\n        return strange_sort_list(sorted_lst)\n    else:\n        return []",
        "test": "assert strange_sort_list([]) == []"
    },
    {
        "number": 71,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    \n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the area of the triangle using Heron's formula\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        \n        # Round the area to 2 decimal points\n        area = round(area, 2)\n        \n        return area\n    else:\n        return -1",
        "test": "assert triangle_area(1, 2, 10) == -1, \"The area of a triangle with sides 1, 2, and 10 is -1.\""
    },
    {
        "number": 72,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    \n    # Check if the input list is a palindrome\n    if q!= q[::-1]:\n        return False\n    \n    # Calculate the sum of elements in the list\n    total_weight = sum(q)\n    \n    # Check if the sum is less than or equal to the maximum possible weight\n    if total_weight <= w:\n        return True\n    else:\n        return False",
        "test": "assert will_it_fly([3, 2, 3], 1) == False, \"it's balanced, but 3+2+3 is more than the maximum possible weight.\""
    },
    {
        "number": 73,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    min_num_changes = float('inf')\n    for i in range(len(arr)):\n        curr_num = arr[i]\n        for j in range(i+1, len(arr)):\n            new_num = arr[j]\n            if new_num < curr_num:\n                min_num_changes = min(min_num_changes, j-i)\n    return min_num_changes",
        "test": "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1"
    },
    {
        "number": 74,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\n    # Check if the lists have the same length\n    if len(lst1)!= len(lst2):\n        return lst1\n\n    # Calculate the total number of chars\n    total_chars = sum(len(word) for word in lst1)\n\n    # Get the list with the total number of chars less than the other list\n    result = [word for word in lst2 if total_chars - len(word) > 0]\n\n    # Return the result\n    return result",
        "test": "assert total_match([], []) == []"
    },
    {
        "number": 75,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        for i in range(2, int(a**0.5) + 1):\n            if a % i == 0 and a % (i + 2) == 0:\n                return True\n        return False\n    else:\n        return True",
        "test": "assert is_multiply_prime(19) == False"
    },
    {
        "number": 76,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Returns True if x is a simple power of n and False otherwise.\"\"\"\n    if n == 1:\n        return True\n    elif n > 1 and x >= 1:\n        return is_simple_power(x, n - 1)\n    else:\n        return False",
        "test": "assert is_simple_power(1, 4) == True"
    },
    {
        "number": 77,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a == 1:\n        return True\n    elif a == 2:\n        return False\n    elif a == 3:\n        return True\n    elif a == 4:\n        return False\n    elif a < 0:\n        return False\n    elif a % 2 == 0:\n        return iscube(a // 2) * iscube(a // 2)\n    else:\n        return False",
        "test": "assert iscube(2) == False, \"iscube(2) failed\""
    },
    {
        "number": 78,
        "max_answer_num": 15,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Initialize a variable to store the count of primes\n    count = 0\n    \n    # Loop through each character in the hexadecimal number\n    for char in num:\n        # Convert the character to its decimal equivalent\n        dec_char = int(char, 16)\n        \n        # Check if the decimal equivalent is a prime number\n        if dec_char > 1 and dec_char > 1 and dec_char % 2!= 0:\n            count += 1\n    \n    # Return the count of primes\n    return count",
        "test": "assert hex_key(\"1077E\") == 2"
    },
    {
        "number": 79,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal & 1) + binary\n        decimal >>= 1\n    return 'db' + binary[::-1] + 'db'",
        "test": "assert decimal_to_binary(15) == \"db1111db\""
    },
    {
        "number": 80,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_happy(s):\n    \"\"\"\n    This function takes a string as input and returns True if it is happy, and False otherwise.\n    \"\"\"\n    \n    # Define a set of all the letters in the string\n    letter_set = set(s)\n    \n    # Check if the length of the string is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Check if the string has any duplicate letters\n    if len(letter_set)!= len(set(s)):\n        return False\n    \n    # Check if all 3 consecutive letters are distinct\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    \n    # If all checks pass, the string is happy\n    return True",
        "test": "assert is_happy(\"a\") == False"
    },
    {
        "number": 81,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n    letter_grades = ['A+', 'B', 'C-', 'C', 'A-']\n    for i in range(len(grades)):\n        if grades[i] >= 4.0:\n            letter_grades[i] = 'A+'\n        elif grades[i] > 3.7:\n            letter_grades[i] = 'A'\n        elif grades[i] > 3.3:\n            letter_grades[i] = 'A-'\n        elif grades[i] > 3.0:\n            letter_grades[i] = 'B+'\n        elif grades[i] > 2.7:\n            letter_grades[i] = 'B'\n        elif grades[i] > 2.3:\n            letter_grades[i] = 'B-'\n        elif grades[i] > 2.0:\n            letter_grades[i] = 'C+'\n        elif grades[i] > 1.7:\n            letter_grades[i] = 'C'\n        elif grades[i] > 1.3:\n            letter_grades[i] = 'C-'\n        elif grades[i] > 1.0:\n            letter_grades[i] = 'D+'\n        elif grades[i] > 0.7:\n            letter_grades[i] = 'D'\n        else:\n            letter_grades[i] = 'D-'\n\n    return letter_grades\n",
        "test": "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']"
    },
    {
        "number": 82,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    if len(string) < 2:\n        return False\n    \n    for i in range(2, int(len(string)**0.5)+1):\n        if len(string) % i == 0:\n            return False\n    \n    return True",
        "test": "assert prime_length('Hello') == True"
    },
    {
        "number": 83,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def starts_one_ends(n):\n    count = 0\n    for i in range(n, 0, -1):\n        if i == 1 or i == n - 1:\n            count += 1\n    return count",
        "test": "assert starts_one_ends(1) == 1  # 1010"
    },
    {
        "number": 84,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n                Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n        a string of binary number\n    \"\"\"\n    \n    # Convert N to string and reverse the string\n    n_str = str(N)\n    n_str = n_str[::-1]\n    \n    # Initialize a variable to store the total sum of digits in binary\n    total_sum = 0\n    \n    # Iterate through each character in the string and add them to the total sum\n    for digit in n_str:\n        total_sum += int(digit)\n    \n    # Convert the total sum to binary and return the result as a string\n    binary_sum = bin(total_sum)[2:]\n    \n    # If the length of the binary sum is odd, add a leading zero to it\n    if len(binary_sum) % 2 == 1:\n        binary_sum = '0' + binary_sum\n    \n    return binary_sum",
        "test": "assert solve(147) == '1100'"
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def add(lst):\n    \"\"\"\n    Given a non-empty list of integers lst. add the even elements that are at odd indices.\n    \"\"\"\n    even_indices = [i for i, x in enumerate(lst) if x % 2 == 0]\n    even_sum = sum(lst[i] for i in even_indices)\n    return even_sum",
        "test": "assert add([4, 2, 6, 7]) == 2, \"add([4, 2, 6, 7]) must return 2.\""
    },
    {
        "number": 86,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n    # Remove all spaces and split the string into words\n    words = s.replace(\" \", \"\").split()\n\n    # Create a new string with the ordered words\n    ordered_str = \"\"\n    for word in words:\n        # Create a new string with the characters arranged in ascending order based on ascii value\n        ordered_word = \"\".join(sorted(word))\n        ordered_str += ordered_word + \" \"\n\n    # Remove the extra space at the end of the ordered string\n    ordered_str = ordered_str[:-1]\n\n    return ordered_str",
        "test": "assert anti_shuffle('Hi') == 'Hi'"
    },
    {
        "number": 87,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    \n    # Initialize empty list to store the sorted coordinates\n    sorted_coords = []\n    \n    # Sort rows in ascending order\n    rows = sorted(set([i for i in range(len(lst)) if isinstance(lst[i], list)]))\n    \n    # Iterate over each row and find x\n    for row in rows:\n        for i in range(len(lst[row])):\n            if isinstance(lst[row][i], int):\n                if lst[row][i] == x:\n                    sorted_coords.append((row, i))\n    \n    # Sort coordinates of the row in descending order\n    sorted_coords.sort(key=lambda x: (-x[0], -x[1]))\n    \n    return sorted_coords",
        "test": "assert get_row([], 1) == []"
    },
    {
        "number": 88,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    # Calculate the sum of all elements in the array\n    total_sum = sum(array)\n\n    # Sort the array in ascending order\n    if total_sum % 2 == 1:\n        array.sort()\n    else:\n        array.sort(reverse=True)\n\n    return array\n",
        "test": "assert sort_array([]) == []"
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    return s[::-2]",
        "test": "assert encrypt('et') == 'ix'"
    },
    {
        "number": 90,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    if len(lst) == 0:\n        return None\n    \n    smallest = lst[0]\n    second_smallest = float('inf')\n    for i in range(1, len(lst)):\n        if lst[i] < smallest:\n            second_smallest = smallest\n            smallest = lst[i]\n        elif lst[i] < second_smallest and lst[i]!= smallest:\n            second_smallest = lst[i]\n\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest",
        "test": "assert next_smallest([]) == None"
    },
    {
        "number": 91,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n        for word in sentence.split():\n            if word.lower() == \"i\" and sentence.split('.')[0].lower()!= \"i\":\n                boredoms += 1\n    return boredoms",
        "test": "assert is_bored(\"Hello world\") == 0"
    },
    {
        "number": 92,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    # Check if all numbers are integers\n    if not all(isinstance(num, int) for num in [x, y, z]):\n        return False\n    \n    # Check if the sum of the other two numbers is equal to the first number\n    if x + y == z:\n        return True\n    \n    return False",
        "test": "assert any_int(3.6, -2.2, 2) == False"
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n\n    # Define a dictionary to store the vowels and their positions\n    vowels = {'a': 0, 'e': 1, 'i': 2, 'o': 3, 'u': 4}\n\n    # Initialize an empty string to store the encoded message\n    encoded_message = ''\n\n    # Loop through each character in the message\n    for char in message:\n\n        # Check if the character is a letter\n        if char.isalpha():\n\n            # Convert the character to lowercase to make the code case-insensitive\n            char = char.lower()\n\n            # Get the position of the character in the english alphabet\n            index = ord(char) - ord('a')\n\n            # If the character is a vowel, replace it with the vowel that appears 2 places ahead in the alphabet\n            if char in vowels:\n                char = chr((vowels[char] + 2) % 52)\n\n            # Append the character to the encoded message\n            encoded_message += char\n\n    # Return the encoded message\n    return encoded_message",
        "test": "assert encode('This is a message') == 'THKS KS C MGSSCGG'"
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def largest_prime_sum(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    largest_prime = 0\n    largest_sum = 0\n    for num in lst:\n        if num > 0:\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    break\n            else:\n                if num > largest_prime:\n                    largest_prime = num\n                    largest_sum = sum(map(int, str(num)))\n    return largest_sum\n\nlst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\nprint(largest_prime_sum(lst))\n\nlst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\nprint(largest_prime_sum(lst))\n\nlst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\nprint(largest_prime_sum(lst))\n\nlst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\nprint(largest_prime_sum(lst))\n\nlst = [0,81,12,3,1,21]\nprint(largest_prime_sum(lst))\n\nlst = [0,8,1,2,1,7]\nprint(largest_prime_sum(lst))\n",
        "test": "assert skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11"
    },
    {
        "number": 95,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\n    if not dict:\n        return False\n\n    for key, value in dict.items():\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n\n    return True",
        "test": "assert check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}) == False"
    },
    {
        "number": 96,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_prime(n):\n    \"\"\"Checks if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Returns an array of the first n prime numbers less than n\"\"\"\n    prime_numbers = [i for i in range(2, n+1) if is_prime(i)]\n    return prime_numbers[:n]",
        "test": "assert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19], \"count_up_to(20) should return [2, 3, 5, 7, 11, 13, 17, 19]\""
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Convert the input numbers to strings to work with their unit digits\n    a = str(a)\n    b = str(b)\n    \n    # Initialize the result string to an empty string\n    result = ''\n    \n    # Loop through each character in the input strings\n    for i in range(len(a)):\n        # Get the current character from the input strings\n        current_char = a[i]\n        \n        # Loop through each character in the result string to add the current character to it\n        for j in range(len(result)):\n            # Get the current character from the result string\n            current_result_char = result[j]\n            \n            # Calculate the product of the current character and the current character from the input strings\n            product = int(current_char) * int(current_result_char)\n            \n            # Convert the product to a string and append it to the result string\n            result += str(product)\n    \n    # Convert the result string to an integer and return it\n    return int(result)",
        "test": "assert multiply(14, -15) == 20, \"multiply(14,-15) should return 20\""
    },
    {
        "number": 98,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count",
        "test": "assert count_upper('abcdefg') == 0"
    },
    {
        "number": 99,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    # Convert the value to a float, since we'll need it later\n    float_value = float(value)\n\n    # Get the absolute difference between the two integers\n    diff = abs(float_value - int(float_value))\n\n    # Round the difference to the nearest integer\n    rounded_diff = round(diff)\n\n    # Check if the difference is exactly 0\n    if rounded_diff == 0:\n        # If it is exactly 0, return the closest integer\n        closest_integer = round(float_value)\n    else:\n        # If it's not exactly 0, find the closest integer from the two\n        # integers that are farthest from zero\n        closest_integer = max(round(float_value - rounded_diff), 0)\n\n        # If the difference is negative, round it towards zero\n        if diff < 0:\n            closest_integer = max(closest_integer + rounded_diff, 0)\n\n    return closest_integer",
        "test": "assert closest_integer(\"0.5\") == 0, \"Error: closest_integer should return 0 for '0.5'.\""
    },
    {
        "number": 100,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    # Base case: if n is 0, return an empty list\n    if n == 0:\n        return []\n\n    # Base case: if n is 1, return a list with one stone\n    if n == 1:\n        return [1]\n\n    # If n is odd, make a pile of stones with n-1 stones\n    if n % 2 == 1:\n        pile = [1] * (n - 1)\n        pile[0] = n - 1\n        return pile\n\n    # If n is even, make a pile of stones with n-1 stones, then with n-2 stones, and so on\n    pile = [1] * (n - 1)\n    pile[0] = n - 1\n    for i in range(1, n):\n        pile.append(pile[-1] + 1)\n\n    return pile",
        "test": "assert make_a_pile(2) == [1, 2]"
    },
    {
        "number": 101,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Split the string by commas or spaces\n    words = s.split(',')\n    words = [word.strip() for word in words]\n\n    return words",
        "test": "assert words_string(\"apple,banana,cherry,date,elderberry\") == [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]"
    },
    {
        "number": 102,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Calculate the range of integers in the desired range\n    num_range = y - x + 1\n    \n    # Initialize the first even integer as the first integer in the range\n    num = x\n    even_num = num\n    next_num = num + 2  # Add a second integer to skip the first one\n    \n    while even_num < num_range:\n        even_num += 2\n        next_num += 2\n    \n    # Check if we found a number in the desired range\n    if even_num == num_range:\n        return even_num\n    else:\n        return -1",
        "test": "assert choose_num(13, 12) == -1"
    },
    {
        "number": 103,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    \n    # Check if n is greater than m\n    if n > m:\n        return -1\n    \n    # Calculate the total sum of the integers\n    total_sum = (n + m) // 2\n    \n    # Calculate the average\n    avg = str(round(total_sum))\n    \n    # Convert the binary string to decimal and round it to 2 decimal places\n    avg = round(int(avg, 2))\n    \n    return avg",
        "test": "assert rounded_avg(7, 5) == -1"
    },
    {
        "number": 104,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def unique_digits(x):\n    \"\"\"\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    def is_even_digit(num):\n        return num % 2 == 0\n    \n    filtered_x = []\n    for num in x:\n        if num % 2!= 0 and num not in filtered_x:\n            filtered_x.append(num)\n    \n    return sorted(set(filtered_x))",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]"
    },
    {
        "number": 105,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n      -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n      -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n      \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n      \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n      -> sort arr -> [-1, 1, 55]\n      -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    \n    # Check if the array is empty or contains any numbers\n    if len(arr) == 0 or arr[0] in [1, 2, 3, 4, 5, 6, 7, 8, 9]:\n        return []\n    \n    # Sort the integers in ascending order\n    sorted_arr = sorted(arr)\n    \n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Replace each digit with its corresponding name from the list \"One\", \"Two\", \"Three\",...\n    digit_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    result = []\n    for digit in reversed_arr:\n        result.append(digit_name[digit])\n    \n    return result",
        "test": "assert by_length([]) == []"
    },
    {
        "number": 106,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 1:\n        return [1]\n    else:\n        result = []\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                result.append(i * f(i-1)[-1])\n            else:\n                result.append(sum(range(1, i+1)))\n        return result",
        "test": "assert f(5) == [1, 2, 6, 24, 15], \"Function f(5) is not correct\""
    },
    {
        "number": 107,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n\n    # Iterate through each number in the range (1, n)\n    for i in range(1, n+1):\n        # Check if the number is a palindrome\n        if str(i) == str(i)[::-1]:\n            # Check if the number is even\n            if i % 2 == 0:\n                count_even += 1\n            # Check if the number is odd\n            else:\n                count_odd += 1\n\n    # Return the tuple with the count of even and odd palindromes\n    return (count_even, count_odd)",
        "test": "assert even_odd_palindrome(1) == (0, 1)"
    },
    {
        "number": 108,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    result = 0\n    for num in arr:\n        if num >= 0:\n            result += 1\n    return result",
        "test": "assert count_nums([]) == 0"
    },
    {
        "number": 109,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "import random\n\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performing 2 right shift operations, non-decreasing order can\n                    be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n    \"\"\"\n    \n    if len(arr) == 0:\n        return True\n    \n    left_sum = 0\n    right_sum = 0\n    for i in range(len(arr)):\n        left_sum += arr[i]\n        right_sum += arr[i]\n\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n\n    return True",
        "test": "assert move_one_ball([]) == True, \"move_one_ball([]) should return True\""
    },
    {
        "number": 110,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n    \n    # Check if the numbers are unique in lst1\n    if len(set(lst1))!= len(lst1):\n        return \"NO\"\n    \n    even_lst1 = [num for num in lst1 if num % 2 == 0]\n    even_lst2 = [num for num in lst2 if num % 2 == 0]\n    \n    # If the length of even_lst1 and even_lst2 are equal,\n    # then even_lst1 is a subset of even_lst2 and can be exchanged\n    if len(even_lst1) == len(even_lst2):\n        even_lst1 = sorted(even_lst1)\n        even_lst2 = sorted(even_lst2)\n        \n        # Check if the sorted even_lst1 is a subset of even_lst2\n        for i in range(len(even_lst1)):\n            if even_lst1[i]!= even_lst2[i]:\n                return \"NO\"\n        \n        # If the above condition is satisfied, then even_lst1 is a subset of even_lst2\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\""
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n    # Initialize an empty dictionary to store the letter with its count\n    letter_count = {}\n\n    # Iterate through each letter in the string\n    for letter in test:\n\n        # If the letter is already in the dictionary, increment its count\n        if letter in letter_count:\n            letter_count[letter] += 1\n        # Otherwise, add the letter to the dictionary and set its count to 1\n        else:\n            letter_count[letter] = 1\n\n    # If the dictionary is empty, return an empty dictionary\n    if not letter_count:\n        return {}\n\n    # If the dictionary has only one key-value pair, return the key and its count\n    if len(letter_count) == 1:\n        return letter_count\n\n    # Otherwise, return a dictionary of the letter with its count and all the others\n    return dict(sorted(letter_count.items(), key=lambda x: (-x[1], x[0])))",
        "test": "assert histogram('') == {}"
    },
    {
        "number": 112,
        "max_answer_num": 15,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def reverse_delete(s, c):\n    \"\"\"\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    \"\"\"\n\n    # Create a set of characters in c that are not in s\n    s_set = set(c) - set(s)\n\n    # Create a new string that contains all the characters in s that are not in c\n    result = ''.join([x for x in s if x not in c])\n\n    # Check if the result string is palindrome\n    if result == result[::-1]:\n        return (result, True)\n    else:\n        return (result, False)",
        "test": "assert reverse_delete(\"abcdef\", \"b\") == ('acdef', False), \"The result should be ('acdef', False)\""
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for s in lst:\n        num = 0\n        for c in s:\n            if c.isdigit():\n                num += 1\n        if num % 2!= 0:\n            result.append(f\"the number of odd elements {num} the str{num}ng {num} of the 4nput.\")\n    return result",
        "test": "assert odd_count(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]"
    },
    {
        "number": 114,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    start = 0\n\n    for i in range(len(nums)):\n        current_sum += nums[i]\n\n        while current_sum >= 0:\n            current_sum -= nums[start]\n            start += 1\n\n        if current_sum < min_sum:\n            min_sum = current_sum\n\n    return min_sum",
        "test": "assert minSubArraySum([-1, -2, -3]) == -6"
    },
    {
        "number": 115,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def max_fill(grid, capacity):\n    import math\n\n    def max_area(rows):\n        def cross(a, b):\n            return a[0] * b[1] - a[1] * b[0]\n\n        left, right = 0, len(rows) - 1\n        while left < right:\n            area = cross(rows[left], rows[right])\n            if area > 0:\n                right -= 1\n            else:\n                left += 1\n            if left < right and rows[left][0] == rows[right][0]:\n                left += 1\n        return left - right - 1\n\n    def max_area_bottom_up(rows):\n        height = len(rows)\n        for i in range(height):\n            for j in range(i, height):\n                if rows[i][0] <= rows[j][0]:\n                    rows[i], rows[j] = rows[j], rows[i]\n        for i in range(height - 1, -1, -1):\n            area = max_area(rows[i:])\n            if area > 0:\n                return i + 1\n        return 0\n\n    def bottom_up(grid):\n        max_area = max_area_bottom_up(grid)\n        return max_area\n\n    result = bottom_up(grid)\n    return result if result < capacity else 0",
        "test": "assert max_fill([[0,0,0], [0,0,0]], 5) == 0"
    },
    {
        "number": 116,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n\n    :param arr: The input array\n    :return: The sorted array\n    \"\"\"\n    def decimal_sort(a, b):\n        # Convert decimal values to binary and sort them\n        ab = bin(a)[2:]\n        bb = bin(b)[2:]\n\n        # Compare binary values\n        if ab > bb:\n            return 1\n        elif ab < bb:\n            return -1\n        else:\n            # Convert decimal values back to decimal\n            ac = int(a, 2)\n            bc = int(b, 2)\n\n            # Sort by decimal value\n            if ac > bc:\n                return 1\n            elif ac < bc:\n                return -1\n            else:\n                return 0\n\n    sorted_arr = sorted(arr, key=decimal_sort)\n    return sorted_arr",
        "test": "assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]"
    },
    {
        "number": 117,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def select_words(s, n):\n    \"\"\"Returns a list of all words from string s that contain exactly n consonants.\n    If the string s is empty, returns an empty list.\n    Note: you may assume the input string contains only letters and spaces.\"\"\"\n    if not s:\n        return []\n    consonants = set(['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'])\n    words = s.split()\n    result = []\n    for word in words:\n        if len(word) == n and all(c in consonants for c in word):\n            result.append(word)\n    return result",
        "test": "assert select_words(\"simple white space\", 2) == []"
    },
    {
        "number": 118,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def get_closest_vowel(word):\n    \"\"\"\n    You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    left_count = 0\n    right_count = 0\n    left_char = word[0]\n    right_char = word[-1]\n    \n    for char in word[1:-1]:\n        if char in vowels:\n            if char == left_char:\n                left_count += 1\n            elif char == right_char:\n                right_count += 1\n        \n        if left_count >= 2 and right_count >= 2:\n            return char\n    \n    return ''",
        "test": "assert get_closest_vowel(\"quick\") == \"\""
    },
    {
        "number": 119,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def match_parens(lst):\n    # Initialize variables\n    left = 0\n    right = 0\n\n    # Iterate through the list\n    while right < len(lst):\n        # Check if there's a match for opening parentheses\n        if lst[right] == '(':\n            left += 1\n        # Check if there's a match for closing parentheses\n        elif lst[right] == ')':\n            if left == 0:\n                # If there are no opening parentheses, return 'No'\n                return 'No'\n            left -= 1\n\n        # Move to the next character\n        right += 1\n\n    # If there are no matching parentheses, return 'Yes'\n    return 'Yes'\n",
        "test": "assert match_parens([')', ')']) == 'No'"
    },
    {
        "number": 120,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # sort the array in descending order\n    arr.sort(reverse=True)\n\n    # return the first k elements\n    return arr[:k]",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]"
    },
    {
        "number": 121,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    even_sum = 0\n    for num in lst:\n        if num % 2 == 0:  # Check if the number is even\n            even_sum += num\n    return even_sum",
        "test": "assert solution([30, 13, 24, 321]) == 0"
    },
    {
        "number": 122,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n    # Count the number of elements with at most two digits from the first k elements of arr\n    count = 0\n    for i in range(k):\n        for j in range(i+1, k):\n            if arr[j] < 10**2:\n                count += 1\n                break\n    \n    # Calculate the sum of the elements with at most two digits from the first k elements of arr\n    sum = 0\n    for i in range(k):\n        sum += arr[i]\n    \n    return sum",
        "test": "assert add_elements([1000000000], 1) == 1000000000, \"add_elements([1000000000], 1) should return 1000000000\""
    },
    {
        "number": 123,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    if n <= 1:\n        return [n]\n\n    sequence = [n]\n    while n % 2 == 0:\n        n //= 2\n        sequence.append(n)\n\n    for i in range(2, len(sequence)):\n        if sequence[i] % 2!= 0:\n            sequence[i] = 3 * sequence[i] + 1\n\n    return sequence",
        "test": "assert get_odd_collatz(1) == [1]"
    },
    {
        "number": 124,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def valid_date(date):\n    \"\"\"This function validates the given date string according to the given rules.\n    If the date is valid, it returns True. Otherwise, it returns False.\n    \"\"\"\n    # Check if the date string is not empty\n    if len(date) == 0:\n        return False\n    \n    # Check if the number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12\n    if len(date.split('-'))!= 3:\n        return False\n    month, day, year = map(int, date.split('-'))\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    \n    # Check if the number of days is not less than 1 or higher than 30 days for months 4,6,9,11\n    if month in [4, 6, 9, 11] and day < 1 or day > 30:\n        return False\n    \n    # Check if the number of days is not less than 1 or higher than 29 for the month 2\n    if month == 2 and day < 1 or day > 29:\n        return False\n    \n    # Check if the month is not less than 1 or higher than 12\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the date is in the format mm-dd-yyyy\n    try:\n        datetime.datetime.strptime(date, '%m-%d-%Y')\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert valid_date('15-01-2012') == False"
    },
    {
        "number": 125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def split_words(txt):\n    # split the text on whitespace\n    words = txt.split()\n\n    # if no whitespaces exists, split on commas ','\n    if not any(word.isalpha() for word in words):\n        split_char = ','\n    # if no commas exists, return the number of lower-case letters with odd order in the alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    elif not any(word.islower() for word in words):\n        count = sum(1 for word in words if word.islower())\n        split_char = chr(ord('a') + count % 2)\n    else:\n        split_char = None\n\n    return words, split_char",
        "test": "assert split_words(\"abcdef\") == 3"
    },
    {
        "number": 126,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    if len(lst) <= 1:\n        return True\n\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n\n    return True\n",
        "test": "assert is_sorted([5]) == True"
    },
    {
        "number": 127,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def is_prime(num):\n    \"\"\"Check if a number is prime or not\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n    \"\"\"\n    if (interval1[0] == interval2[0] and interval1[1] == interval2[1]):\n        return \"YES\"\n    elif not (interval1[0] <= interval2[1] and interval2[0] <= interval1[1]):\n        return \"NO\"\n    else:\n        if is_prime(abs(interval1[0] - interval2[1])):\n            return \"NO\"\n        else:\n            return \"YES\"",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\""
    },
    {
        "number": 128,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def prod_signs(arr):\n    if len(arr) == 0:\n        return None\n\n    # initialize variables\n    max_mag = 0\n    prod_signs = 1\n\n    # iterate through the array\n    for num in arr:\n        # update max_mag and prod_signs\n        max_mag = max(max_mag, num)\n        prod_signs *= num\n\n    # return the product of all signs multiplied by magnitude\n    return prod_signs",
        "test": "assert prod_signs([]) == None"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n    # Create a 2D list to represent the grid\n    rows = len(grid)\n    cols = len(grid[0])\n    path = [[0 for _ in range(cols)] for _ in range(rows)]\n\n    # Initialize the minimum path to 1\n    min_path = [1] * (rows * cols)\n\n    # Initialize the minimum distance to infinity\n    min_dist = float('inf')\n\n    # Loop through the grid and find the minimum path\n    for i in range(rows):\n        for j in range(cols):\n            if i == 0 and j == 0:\n                min_path[i * cols + j] = grid[i][j]\n                continue\n\n            if i == 0:\n                min_path[i * cols + j] = min_path[i * cols + j - 1] + grid[i][j]\n            elif j == 0:\n                min_path[i * cols + j] = min_path[i * cols + j] + grid[i][j]\n            else:\n                min_path[i * cols + j] = min(min_path[i * cols + j - 1], min_path[i * cols + j - cols]) + grid[i][j]\n\n            # Update the minimum distance\n            min_dist = min(min_dist, abs(i - k) + abs(j - k))\n\n    # Sort the path based on the minimum distance\n    path = sorted(path, key=lambda x: x[cols-1])\n\n    # Extract the values from the path\n    values = [grid[i][j] for i in range(k) for j in range(k)]\n\n    # Return the sorted path and the values\n    return path, values",
        "test": "assert minPath([ [5,9,3], [4,1,6], [7,8,2]], 1) == [1]"
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def tri(n):\n    \"\"\"Returns a list of the first n + 1 numbers of the Tribonacci sequence.\n    \"\"\"\n    sequence = [1, 3]\n    for i in range(2, n + 1):\n        next_number = sequence[i - 1] + sequence[i - 2] + sequence[i - 3]\n        sequence.append(next_number)\n    return sequence",
        "test": "assert tri(3) == [2, 3, 8]"
    },
    {
        "number": 131,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def digits(n):\n    if n == 0:\n        return 0\n    else:\n        result = 0\n        while n > 0:\n            digit = n % 10\n            if digit % 2!= 0:\n                result += digit\n            n //= 10\n        return result",
        "test": "assert digits(1) == 1, \"The product of the odd digits of 1 is 1\""
    },
    {
        "number": 132,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    if not string or not string[0] == '[':\n        return False\n\n    stack = []\n    i = 0\n\n    while i < len(string):\n        if string[i] == '[':\n            stack.append(i)\n        elif string[i] == ']':\n            if not stack:\n                return False\n            if string[stack.pop()] == '[':\n                return False\n            else:\n                return False\n        i += 1\n\n    return not stack",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False"
    },
    {
        "number": 133,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function takes a list of numbers as input, and returns the sum of squared numbers in the given list,\n    rounded each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1, 2, 3] the output should be 14\n    For lst = [1, 4, 9] the output should be 98\n    For lst = [1, 3, 5, 7] the output should be 84\n    For lst = [1.4, 4.2, 0] the output should be 29\n    For lst = [-2.4, 1, 1] the output should be 6\n    \"\"\"\n\n    total_sum = 0\n\n    for num in lst:\n        num_squared = num ** 2\n        total_sum += int(round(num_squared))\n\n    return total_sum",
        "test": "assert sum_squares([1, 2, 3]) == 14"
    },
    {
        "number": 134,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    # remove any white space from the string\n    txt = txt.strip()\n\n    # if the string is empty, then the last character is not a letter\n    if not txt:\n        return False\n\n    # get the last character of the string\n    last_char = txt[-1]\n\n    # check if the last character is an alphabetical character\n    if not last_char.isalpha():\n        return False\n\n    # check if the last character is not a part of a word\n    for word in txt.split():\n        if last_char in word:\n            return False\n\n    # if the last character is not a part of a word, it is a letter\n    return True\n",
        "test": "assert check_if_last_char_is_a_letter(\"\") == False"
    },
    {
        "number": 135,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    if not arr:\n        return -1\n    first = last = -1\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            last = i-1\n        else:\n            first = i\n    if first!= -1 and last!= -1:\n        max_index = last\n    else:\n        max_index = -1\n    return max_index",
        "test": "assert can_arrange([1,2,4,3,5]) == 3"
    },
    {
        "number": 136,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n\n    # Initialize largest and smallest variables\n    largest = None\n    smallest = None\n\n    # Loop through the list and update the largest and smallest\n    # variables as necessary\n    for num in lst:\n        if num < 0:\n            if largest is None or num > largest:\n                largest = num\n        elif num > 0:\n            if smallest is None or num < smallest:\n                smallest = num\n\n    # Return the tuple of largest and smallest integers\n    return (largest, smallest)",
        "test": "assert largest_smallest_integers([]) == (None, None)"
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n    # Check if a and b are integers\n    if isinstance(a, int) and isinstance(b, int):\n        return a if a > b else b\n\n    # Check if a and b are floats\n    if isinstance(a, float) and isinstance(b, float):\n        return a if a > b else b\n\n    # Check if a and b are strings\n    if isinstance(a, str) and isinstance(b, str):\n        a = a.strip()\n        b = b.strip()\n        if a.endswith(',') or b.endswith(','):\n            a, b = a[:-1], b[:-1]\n        if a.endswith('.') or b.endswith('.'):\n            a, b = a[:-1], b[:-1]\n        return compare_one(float(a), float(b))\n\n    # If a and b are not integers, floats, or strings, return None\n    return None\n",
        "test": "assert compare_one(\"1\", 1) == None"
    },
    {
        "number": 138,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n\n    # Initialize variables to keep track of the number of positive even numbers and the sum of the even numbers\n    num_positive_even = 0\n    even_sum = 0\n\n    # Calculate the number of even numbers less than or equal to n\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_sum += i\n            num_positive_even += 1\n\n    # Check if the given number n can be written as the sum of exactly 4 positive even numbers\n    if num_positive_even == 0:\n        return False\n    elif num_positive_even == 1:\n        return even_sum == n\n    elif num_positive_even == 2:\n        return even_sum == 2*n\n    else:\n        return even_sum == 4*n",
        "test": "assert is_equal_to_sum_even(4) == False"
    },
    {
        "number": 139,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    # Base case: if n is 0 or 1, return 1\n    if n == 0 or n == 1:\n        return 1\n\n    # Recursive case: compute the factorial by multiplying n and the\n    # factorial of the previous number, minus one, and so on\n    factorial = n * special_factorial(n - 1)\n    return factorial",
        "test": "assert special_factorial(1) == 1"
    },
    {
        "number": 140,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace consecutive spaces with - \n    for i in range(len(text)-1):\n        if text[i] == \" \" and text[i+1] == \" \":\n            text = text[:i] + \"-\" + text[i+2:]\n    \n    return text",
        "test": "assert fix_spaces(\"Example\") == \"Example\""
    },
    {
        "number": 141,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3 or not any(file_name.startswith(i) for i in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"):\n        return \"No\"\n\n    if file_name.count(\".\") == 0:\n        return \"No\"\n\n    if file_name.split(\".\")[-1] not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n\n    return \"Yes\"",
        "test": "assert file_name_check(\"1example.dll\") == \"No\""
    },
    {
        "number": 142,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4!= 0:\n            lst[i] = lst[i] ** 3\n        elif i % 4 == 0 and i % 3!= 0:\n            lst[i] = lst[i] ** 4\n        total += lst[i]\n    return total",
        "test": "assert sum_squares([]) == 0"
    },
    {
        "number": 143,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if n is a prime number, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    Returns a string containing the words from the original sentence,\n    whose lengths are prime numbers.\n    \"\"\"\n    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    return \" \".join(prime_words)",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\""
    },
    {
        "number": 144,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def simplify(x, n):\n    \"\"\"\n    Simplifies the fraction represented by x and n, represented as strings with the format\n    <numerator>/<denominator>, where both numerator and denominator are positive whole numbers.\n\n    Returns True if x * n evaluates to a whole number and False otherwise.\n    \"\"\"\n    # Remove any leading zeros from n\n    n = n.lstrip('0')\n\n    # Check if n is a valid fraction\n    numerator, denominator = map(int, n.split('/'))\n    if denominator == 0:\n        return False\n\n    # Simplify the fraction\n    numerator, denominator = simplify_fraction(numerator, denominator)\n\n    # Check if x * n evaluates to a whole number\n    if numerator == denominator:\n        return True\n    else:\n        return False\n\ndef simplify_fraction(numerator, denominator):\n    \"\"\"\n    Simplifies the fraction represented by numerator and denominator, represented as integers.\n    \"\"\"\n    while denominator == 0:\n        # If the denominator is 0, there are no more divisors left, so we can simplify the fraction\n        numerator //= 10\n        denominator = 10\n\n    while numerator == denominator:\n        # If the numerator is the same as the denominator, we can simplify the fraction\n        numerator //= 10\n\n    return numerator, denominator",
        "test": "assert simplify(\"1/6\", \"2/1\") == False"
    },
    {
        "number": 145,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # Create a dictionary to store the sum of digits and their index in the list\n    digit_dict = {}\n    for i, num in enumerate(nums):\n        digit_sum = sum(int(digit) for digit in str(num))\n        if digit_sum in digit_dict:\n            digit_dict[digit_sum].append(i)\n        else:\n            digit_dict[digit_sum] = [i]\n\n    # Sort the list of integers based on the sum of their digits\n    sorted_nums = []\n    for digit_sum in sorted(digit_dict.keys()):\n        sorted_nums.extend([nums[i] for i in digit_dict[digit_sum]])\n\n    return sorted_nums",
        "test": "assert order_by_points([]) == []"
    },
    {
        "number": 146,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 == 1 and num % 10 == num[0] % 10 and num % 10 == num[-1] % 10:\n            count += 1\n    return count",
        "test": "assert specialFilter([33, -2, -3, 45, 21, 109]) == 2"
    },
    {
        "number": 147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (i + j) % 3 == 0:\n                count += 1\n    return count",
        "test": "assert get_max_triples(5) == 1"
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closer to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\n    # Check if planet1 and planet2 are valid planet names\n    if planet1 not in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n        return ()\n\n    if planet2 not in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n        return ()\n\n    # Calculate distance between planets\n    distance = bf_distance(planet1, planet2)\n\n    # Calculate the time for each planet\n    time1 = time_for_planet(planet1, distance)\n    time2 = time_for_planet(planet2, distance)\n\n    # Find the planets located between the two planets\n    planets = []\n    for i in range(len(time1)):\n        if time1[i] < time2[i]:\n            planets.append(planet1)\n        else:\n            planets.append(planet2)\n\n    # Sort planets by distance and time\n    planets.sort(key=lambda x: (bf_distance(x, planet2), time_for_planet(x, distance)))\n\n    return planets\n\ndef bf_distance(planet1, planet2):\n    '''\n    Calculate the distance between two planets in km\n    '''\n    # Check if planet1 and planet2 are valid planet names\n    if planet1 not in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n        return ()\n\n    if planet2 not in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n        return ()\n\n    # Calculate distance between planets\n    distance = 0\n    if planet1 == \"Mercury\":\n        distance += 3959\n    elif planet1 == \"Venus\":\n        distance += 2400\n    elif planet1 == \"Earth\":\n        distance += 3959\n    elif planet1 == \"Mars\":\n        distance += 1924\n    elif planet1 == \"Jupiter\":\n        distance += 8837\n    elif planet1 == \"Saturn\":\n        distance += 21220\n    elif planet1 == \"Uranus\":\n        distance += 15219\n    elif planet1 == \"Neptune\":\n        distance += 12273\n\n    if planet2 == \"Mercury\":\n        distance += 3959\n    elif planet2 == \"Venus\":\n        distance += 2400\n    elif planet2 == \"Earth\":\n        distance += 3959\n    elif planet2 == \"Mars\":\n        distance += 1924\n    elif planet2 == \"Jupiter\":\n        distance += 8837\n    elif planet2 == \"Saturn\":\n        distance += 21220\n    elif planet2 == \"Uranus\":\n        distance += 15219\n    elif planet2 == \"Neptune\":\n        distance += 12273\n\n    return distance\n\ndef time_for_planet(planet, distance):\n    '''\n    Calculate the time for a planet based on its distance from the Sun\n    '''\n    # Calculate the time for each planet\n    if planet == \"Mercury\":\n        time = 5871.5\n    elif planet == \"Venus\":\n        time = 8438.9\n    elif planet == \"Earth\":\n        time = 3959\n    elif planet == \"Mars\":\n        time = 1924\n    elif planet == \"Jupiter\":\n        time = 8837\n    elif planet == \"Saturn\":\n        time = 2",
        "test": "assert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Mercury and Uranus not in the solar system\""
    },
    {
        "number": 149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"\n    Accepts a list of strings as input.\n    Deletes the odd-length strings from the list.\n    Returns the list with a sorted order,\n    considering the given rules.\n    \"\"\"\n    cleaned_list = []\n    for word in lst:\n        if len(word) % 2 == 1:\n            cleaned_list.append(word)\n\n    cleaned_list.sort(key=lambda x: (len(x), x))\n    return cleaned_list",
        "test": "assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]"
    },
    {
        "number": 150,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n\n    \"\"\"\n    # function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y",
        "test": "assert x_or_y(15, 8, 5) == 5"
    },
    {
        "number": 151,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    \n    # Create an empty set to store the numbers that are odd\n    odd_numbers = set()\n    \n    # Iterate over the list and check if each number is odd\n    for num in lst:\n        if not isinstance(num, int) or num < 0:\n            continue\n        \n        # If the number is odd, add it to the set of odd numbers\n        if num % 2!= 0:\n            odd_numbers.add(num)\n    \n    # Return the sum of squares of the numbers in the set\n    return sum(num**2 for num in odd_numbers)",
        "test": "assert double_the_difference([0]) == 0"
    },
    {
        "number": 152,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def compare(game, guess):\n    \"\"\"\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n\n    # If the length of the arrays is not equal, then they cannot compare\n    if len(game)!= len(guess):\n        return \"Error: The arrays must have equal lengths.\"\n\n    # Create an empty array to store the result\n    result = []\n\n    # Compare each element of the arrays\n    for i in range(len(game)):\n        # If the guess is equal to the game, then it is correct\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            # Calculate the absolute difference between the guess and the game score\n            diff = abs(game[i] - guess[i])\n            result.append(diff)\n\n    return result",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]"
    },
    {
        "number": 153,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    max_strength = 0\n    max_extension = None\n\n    for extension in extensions:\n        extension_strength = 0\n        for letter in extension:\n            if letter.isupper():\n                extension_strength += 1\n        if extension_strength > max_strength:\n            max_strength = extension_strength\n            max_extension = extension\n\n    return class_name + '.' + max_extension",
        "test": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'"
    },
    {
        "number": 154,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"Return True if the second word or any of its rotations is a substring in the first word\"\"\"\n    # check if b is a substring of a\n    if b in a:\n        # check if there are any rotations of b that are also substrings\n        rotations = set(b) & set(a)\n        if len(rotations) > 0:\n            return True\n        else:\n            return False\n    else:\n        return False",
        "test": "assert cycpattern_check(\"abcd\",\"abd\") == False"
    },
    {
        "number": 155,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if digit.isdigit():\n            digit = int(digit)\n            if digit % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)",
        "test": "assert even_odd_count(123) == (1, 2)"
    },
    {
        "number": 156,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    roman_map = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n\n    mini_roman = ''\n\n    while number > 0:\n        for key, value in roman_map.items():\n            if number >= key:\n                mini_roman += value\n                number -= key\n                break\n        else:\n            raise ValueError(\"Number is not in the Roman numeral system\")\n\n    return mini_roman.lower()\n",
        "test": "assert int_to_mini_roman(19) == 'xix'"
    },
    {
        "number": 157,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False",
        "test": "assert right_angle_triangle(1, 2, 3) == False"
    },
    {
        "number": 158,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    unique_chars = set()\n    max_length = 0\n    max_word = \"\"\n\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n            max_word = word\n        unique_chars.update(word)\n\n    return max_word if max_length > 0 else \"\"\n",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\""
    },
    {
        "number": 159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "The given problem statement is clear and well-defined. We have to create a Python script for this problem that meets the given constraints and constraints.",
        "test": "assert eat(2, 11, 5) == [7, 0]"
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # Define the basic algebra operations\n    operations = {\n        '+' : lambda x, y: x + y,\n        '-' : lambda x, y: x - y,\n        '*' : lambda x, y: x * y,\n        '//' : lambda x, y: x // y,\n        '**' : lambda x, y: x ** y\n    }\n\n    # Check if the length of the operator list is equal to the length of operand list minus one\n    if len(operator)!= len(operand) - 1:\n        raise ValueError(\"Invalid operand and operator list lengths.\")\n\n    # Initialize the result variable\n    result = None\n\n    # Iterate through the operators and operands\n    for i in range(len(operator)):\n        # Get the operator and operand\n        operation = operator[i]\n        operand = operand[i]\n\n        # Evaluate the current operation and operand\n        result = operations[operation](result, operand)\n\n    # Return the result\n    return result",
        "test": "assert do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9"
    },
    {
        "number": 161,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def solve(s):\n    \"\"\"Reverses the case of all the letters in the string.\"\"\"\n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                result += s[i].lower()\n            else:\n                result += s[i].upper()\n        else:\n            result += s[i]\n    return result",
        "test": "assert solve(\"ab\") == \"AB\""
    },
    {
        "number": 162,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\n    if not text:\n        return None\n\n    md5_object = hashlib.md5()\n    md5_object.update(text.encode('utf-8'))\n    md5_hex = md5_object.hexdigest()\n    return md5_hex",
        "test": "assert string_to_md5(\"\") is None, \"Expected None, but got: {}\".format(string_to_md5(\"\"))"
    },
    {
        "number": 163,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    even_digits = []\n    num = a\n    while num <= b:\n        if num % 2 == 0:\n            even_digits.append(num)\n        num += 2\n    return even_digits",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]"
    }
]