[
    {
        "number": 0,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) <= threshold:\n            return True\n\n    return False",
        "test": "assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True"
    },
    {
        "number": 1,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(' ', '')\n    # Initialize an empty list to store the separated groups\n    groups = []\n    # Initialize a stack to keep track of the opening braces\n    stack = []\n    # Loop through each character in the input string\n    for char in paren_string:\n        # If the character is an opening brace, push it onto the stack\n        if char == '(':\n            stack.append(char)\n        # If the character is a closing brace, pop the top element from the stack and add it to the groups list\n        elif char == ')':\n            while stack and stack[-1]!= '(':\n                groups.append(''.join(stack))\n                stack.pop()\n            stack.pop()\n        # If the character is a balanced opening brace, push it onto the stack and ignore it\n        elif char == '{':\n            stack.append(char)\n        # If the character is a balanced closing brace, pop the top element from the stack and add it to the groups list\n        elif char == '}':\n            while stack and stack[-1]!= '{':\n                groups.append(''.join(stack))\n                stack.pop()\n            stack.pop()\n    # Add any remaining open braces and their corresponding closing braces onto the stack\n    while stack:\n        groups.append(''.join(stack))\n        stack.pop()\n    # Convert the list of groups to a list of strings and return it\n    return [group.strip('()') for group in groups]",
        "test": "assert separate_paren_groups('') == []"
    },
    {
        "number": 2,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part",
        "test": "assert truncate_number(3.5) == 0.5"
    },
    {
        "number": 3,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    total = sum(operations)\n    if total == 0:\n        return True\n    for op in operations:\n        if op < 0:\n            return True\n    return False",
        "test": "assert below_zero([1, 2, 3]) == False"
    },
    {
        "number": 4,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    mad = 0.0\n    for num in numbers:\n        mad += abs(num - mean)\n    return mad / len(numbers)",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0, \"The mean_absolute_deviation function should return 1.0 for the given list of numbers [1.0, 2.0, 3.0, 4.0].\""
    },
    {
        "number": 5,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    \n    # Check if the input list is empty\n    if not numbers:\n        return numbers\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Loop through the input list and add the numbers between each pair of consecutive elements\n    for i in range(len(numbers)):\n        if i == 0 or i == len(numbers)-1:\n            result.append(numbers[i])\n        else:\n            result.append(numbers[i] + delimeter)\n    \n    return result",
        "test": "assert intersperse([], 4) == []"
    },
    {
        "number": 6,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # Initialize an empty list to store the deepest level of nesting of parentheses\n    deepest_level_of_nesting = []\n    \n    # Loop through each group of parentheses in the input string\n    for group in paren_string.split():\n        # Check if the group is empty (i.e. just contains spaces)\n        if len(group) == 0:\n            # If the group is empty, add 0 to the deepest_level_of_nesting list to indicate the current level of nesting is 0\n            deepest_level_of_nesting.append(0)\n        else:\n            # If the group is not empty, split it into individual parentheses and add the length of each group to the deepest_level_of_nesting list\n            deepest_level_of_nesting.append(len(group))\n    \n    return deepest_level_of_nesting",
        "test": "assert parse_nested_parens('') == []"
    },
    {
        "number": 7,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    Args:\n        strings (List[str]): List of strings to filter\n        substring (str): Substring to find in each string\n    Returns:\n        List[str]: List of strings that contain the given substring\n    \"\"\"\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings",
        "test": "assert filter_by_substring([], 'a') == []"
    },
    {
        "number": 8,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n\n    # Initialize variables for sum and product\n    sum = 0\n    product = 1\n\n    # Loop through the list and add the integer to the sum and product\n    for num in numbers:\n        sum += num\n        product *= num\n\n    return (sum, product)\n",
        "test": "assert sum_product([]) == (0, 1)"
    },
    {
        "number": 9,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if len(numbers) == 0:\n        return []\n\n    max_so_far = numbers[0]\n    result = [max_so_far]\n\n    for num in numbers[1:]:\n        if num > max_so_far:\n            max_so_far = num\n            result.append(max_so_far)\n        else:\n            result.append(max_so_far)\n\n    return result",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]"
    },
    {
        "number": 10,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    # Find the longest postfix of the string that is a palindrome\n    postfix = string[::-1]\n    while not is_palindrome(postfix):\n        postfix = postfix[:-1]\n\n    # Append the palindrome to the end of the string\n    result = string + postfix\n    return result",
        "test": "assert make_palindrome('') == ''"
    },
    {
        "number": 11,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a)!= len(b):\n        raise ValueError(\"The length of input strings should be equal\")\n    \n    # Convert the strings to lists of 1s and 0s\n    list_a = [int(i) for i in a]\n    list_b = [int(i) for i in b]\n    \n    # Initialize variables\n    result = ''\n    carry = 0\n    \n    # Iterate through the lists and perform binary XOR\n    for i in range(len(list_a)):\n        sum = list_a[i] ^ list_b[i]\n        carry = sum >> 1\n        \n        # Convert the binary result to a string and add it to the result string\n        result += str(sum)\n    \n    # Handle the last carry value\n    if carry:\n        result += str(carry)\n    \n    return result",
        "test": "assert string_xor('010', '110') == '100' # correct"
    },
    {
        "number": 12,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest):\n            longest = s\n    return longest",
        "test": "assert longest([]) is None"
    },
    {
        "number": 13,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n    # Check if b is 0, in which case gcd(a, b) is a\n    if b == 0:\n        return a\n\n    # Loop until b becomes 0\n    while b!= 0:\n        a, b = b, a % b\n\n    return a",
        "test": "assert greatest_common_divisor(3, 5) == 1"
    },
    {
        "number": 14,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n\n    prefixes = []\n\n    for i in range(len(string)):\n        prefix = string[:i+1]\n        prefixes.append(prefix)\n\n    return prefixes",
        "test": "assert all_prefixes('abc') == ['a', 'ab', 'abc']"
    },
    {
        "number": 15,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    result = \"\"\n    for i in range(n + 1):\n        result += str(i) + \" \"\n    return result[:-1]",
        "test": "assert string_sequence(0) == '0'"
    },
    {
        "number": 16,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    char_count = {}\n    for char in string:\n        if char.lower() in char_count:\n            char_count[char.lower()] += 1\n        else:\n            char_count[char.lower()] = 1\n    return len(char_count)",
        "test": "assert count_distinct_characters('') == 0, \"Test 3 failed.\""
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # initialize an empty list to store the result\n    result = []\n    # initialize a variable to store the current note and the number of beats it lasts\n    current_note = ''\n    current_beats = 0\n    \n    # loop through each character in the string\n    for char in music_string:\n        # check if the current character is the start of a note\n        if char == 'o':\n            # increment the current beats counter\n            current_beats += 4\n        elif char == 'o|':\n            # increment the current beats counter by 2\n            current_beats += 2\n        elif char == '.|':\n            # increment the current beats counter by 1\n            current_beats += 1\n        else:\n            # if the current character is not one of the above, it is the end of a note\n            # add the number of beats it lasts to the result list\n            result.append(current_beats)\n            # reset the current beats counter and the current note to empty strings\n            current_beats = 0\n            current_note = ''\n    \n    # add the last note if it exists (i.e., there is no 'o' or 'o|')\n    if current_note:\n        result.append(current_beats)\n    \n    return result",
        "test": "assert parse_music('o o|.| o| o|.|.|.|.| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"
    },
    {
        "number": 18,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n\n    # Count the number of occurrences of the substring in the string\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n\n    return count",
        "test": "assert how_many_times('', 'a') == 0"
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n    # Convert string to list of integers\n    numbers_list = list(map(int, numbers.split()))\n\n    # Sort the list of integers using bubble sort algorithm\n    for i in range(len(numbers_list)):\n        for j in range(len(numbers_list) - i - 1):\n            if numbers_list[j] > numbers_list[j + 1]:\n                numbers_list[j], numbers_list[j + 1] = numbers_list[j + 1], numbers_list[j]\n\n    # Convert sorted list of integers back to string\n    sorted_numbers =''.join(map(str, numbers_list))\n\n    return sorted_numbers",
        "test": "assert sort_numbers('three one five') == 'one three five'"
    },
    {
        "number": 20,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = None\n    closest_diff = float('inf')\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < closest_diff:\n                closest_pair = (numbers[i], numbers[j])\n                closest_diff = diff\n\n    if closest_pair is None:\n        return None, None\n    else:\n        return closest_pair[0], closest_pair[1]",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)"
    },
    {
        "number": 21,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    :param numbers: the list of numbers\n    :return: the transformed list\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    scale_factor = 1 / (max_val - min_val)\n\n    return [(num - min_val) * scale_factor for num in numbers]",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]"
    },
    {
        "number": 22,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    filtered_values = [value for value in values if isinstance(value, int)]\n    return filtered_values",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]"
    },
    {
        "number": 23,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)",
        "test": "assert strlen('') == 0"
    },
    {
        "number": 24,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\"\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    :param n: int, the number for which we need to find the largest divisor\n    :return: int, the largest divisor\n    \"\"\"\n    max_divisor = 0\n    while n % max_divisor!= 0:\n        max_divisor += 1\n    return max_divisor",
        "test": "assert largest_divisor(15) == 5, \"The largest divisor is not 5 for 15.\""
    },
    {
        "number": 25,
        "max_answer_num": 15,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors",
        "test": "assert factorize(8) == [2, 2, 2]"
    },
    {
        "number": 26,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" Remove all duplicates from a list of integers. Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    unique_numbers = []\n    for num in numbers:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    return unique_numbers",
        "test": "assert remove_duplicates([1, 2, 3, 4, 4]) == [1, 2, 3, 4]"
    },
    {
        "number": 27,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    \"\"\"\n\n    # Initialize a variable to store the flipped string\n    flipped_string = ''\n\n    # Loop through each character in the original string\n    for char in string:\n\n        # If the character is lowercase, add it to the flipped string\n        if char.islower():\n            flipped_string += char.upper()\n\n        # If the character is uppercase, add it to the flipped string\n        else:\n            flipped_string += char.lower()\n\n    # Return the flipped string\n    return flipped_string",
        "test": "assert flip_case('Hello') == 'hELLO'"
    },
    {
        "number": 28,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    result = ''\n    for string in strings:\n        result += string\n    return result",
        "test": "assert concatenate([]) == ''"
    },
    {
        "number": 29,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]",
        "test": "assert filter_by_prefix([], 'a') == []"
    },
    {
        "number": 30,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]"
    },
    {
        "number": 31,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    # Initialize the sieve with all numbers as prime\n    sieve = [True] * (n + 1)\n    sieve[0] = sieve[1] = False\n\n    # Sieve out multiples of each prime number\n    for i in range(2, int(n ** 0.5) + 1):\n        if sieve[i]:\n            for j in range(i * i, n + 1, i):\n                sieve[j] = False\n\n    # Check if the number is prime\n    return sieve[n]",
        "test": "assert is_prime(6) == False"
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x**2 +... xs[n] * x**n\n    \"\"\"\n    result = 0\n    for i in range(len(xs)):\n        result += xs[i] * math.pow(x, i)\n    return result\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    xs = sorted(xs)\n    n = len(xs)\n    result = -1\n    for i in range(1, n):\n        if i > 0 and xs[i] == 0:\n            continue\n        if poly(xs[:i], xs[i]) == 0:\n            result = xs[i]\n            break\n    return result",
        "test": "assert round(find_zero([-6, 11, -6, 1]), 2) == 1.0"
    },
    {
        "number": 33,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    # Find the indices of the values that are divisible by three\n    divisible_by_three = [i for i, val in enumerate(l) if i % 3 == 0]\n\n    # Sort the divisible_by_three values\n    divisible_by_three.sort()\n\n    # Remove the divisible_by_three values from the list\n    l = [val for val in l if val not in divisible_by_three]\n\n    return l",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3]"
    },
    {
        "number": 34,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]"
    },
    {
        "number": 35,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def max_element(l: list) -> int:\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    # initialize max value to first element of list\n    max_value = l[0]\n    # iterate through list and update max value if current element is greater\n    for element in l[1:]:\n        if element > max_value:\n            max_value = element\n    # return the max value\n    return max_value",
        "test": "assert max_element([1, 2, 3]) == 3, \"max_element([1, 2, 3]) should return 3\""
    },
    {
        "number": 36,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n            if count == 3:\n                print(i)\n                count = 0\n    if count == 3:\n        print(i)",
        "test": "assert fizz_buzz(79) == 3"
    },
    {
        "number": 37,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    l' = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l' += [l[i]]\n        else:\n            l' += [l[i] for j in range(i+1, len(l), 2)]\n\n    return l'",
        "test": "assert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]"
    },
    {
        "number": 38,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # initialize variables.\n    encoded = \"\"\n    index = 0\n    shift = 0\n\n    # loop through each character in the input string\n    while index < len(s):\n        # check if the character is cyclic.\n        if s[index] == s[index - shift - 1] and s[index] == s[index - shift] and s[index] == s[index - shift + 1]:\n            # increment the index by 1.\n            index += 1\n        else:\n            # add the encoded character to the encoded string.\n            encoded += s[index]\n            # increment the index by 1.\n            index += 1\n\n        # check if the encoded string has length 3. If it does, shift the left shift variable.\n        if len(encoded) == 3:\n            shift = (shift + 1) % 3\n\n    # return the decoded string.\n    return encoded",
        "test": "assert decode_cyclic('HWXXVHXX') == 'HWXXVHXX'"
    },
    {
        "number": 39,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def is_prime(n: int) -> bool:\n    \"\"\"\n    is_prime returns True if n is a prime number and False otherwise.\n    >>> is_prime(5)\n    True\n    >>> is_prime(11)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    a, b = 0, 1\n    count = 0\n    while b <= n:\n        if is_prime(b):\n            count += 1\n        a, b = b, a + b\n    return count\n",
        "test": "assert prime_fib(4) == 13"
    },
    {
        "number": 40,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n   triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    # Initialize a dictionary to store the elements as keys and their counts as values\n    count_dict = {}\n\n    # Iterate through the list\n    for num in l:\n        # Check if the current number is already present in the dictionary\n        if num in count_dict:\n            # Increment the count of the current number\n            count_dict[num] += 1\n        # If the current number is not present in the dictionary, add it with a count of 1\n        else:\n            count_dict[num] = 1\n\n    # Check if there are three distinct elements in the dictionary with a count of 3\n    if len(count_dict) == 3:\n        return True\n    else:\n        return False",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False"
    },
    {
        "number": 41,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    collisions = 0\n    cars_left = n\n    cars_right = 0\n\n    while cars_left > 0 and cars_right > 0:\n        if cars_left > cars_right:\n            collisions += 1\n            cars_left -= 1\n        else:\n            cars_right -= 1\n\n    return collisions",
        "test": "assert car_race_collision(0) == 0"
    },
    {
        "number": 42,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    # Create a new list to store the modified values\n    modified_list = []\n    # Loop through each element in the original list\n    for num in l:\n        # Increment the element by 1 and append it to the modified list\n        modified_list.append(num + 1)\n    # Return the modified list\n    return modified_list",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]"
    },
    {
        "number": 43,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    if len(l) < 2:\n        return False\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False",
        "test": "assert pairs_sum_to_zero([1, 3, -2, 1]) == False"
    },
    {
        "number": 44,
        "max_answer_num": 15,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    if base < 2 or base > 36:\n        raise ValueError(\"Invalid base. Please use a number between 2 and 36.\")\n\n    if x == 0:\n        return '0'\n\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x //= base\n\n    return result",
        "test": "assert change_base(8, 2) == '1000'"
    },
    {
        "number": 45,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 25,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2",
        "test": "assert triangle_area(5, 3) == 7.5, \"The function should return the correct area of the triangle with length 5 and height 3.\""
    },
    {
        "number": 46,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence. \n    Do not use recursion.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)",
        "test": "assert fib4(0) == 0, \"The first element of the Fibonacci sequence is 0.\""
    },
    {
        "number": 47,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2.0\n    else:\n        return l[n//2]",
        "test": "assert median([3, 1, 2, 4, 5]) == 3"
    },
    {
        "number": 48,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    # Convert the string to lowercase\n    text = text.lower()\n\n    # Initialize two pointers to the start and end of the string\n    start = 0\n    end = len(text) - 1\n\n    # Loop through the string and compare the characters\n    while start < end:\n        # If the characters don't match, return False\n        if text[start]!= text[end]:\n            return False\n        # Move the pointers to the next position\n        start += 1\n        end -= 1\n\n    # If we get here, the string is a palindrome\n    return True",
        "test": "assert is_palindrome('') == True"
    },
    {
        "number": 49,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if p < 2:\n        raise ValueError(\"p must be at least 2\")\n\n    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result = result * p % p\n        n = n // 2\n        p = p // 2\n\n    return result",
        "test": "assert modp(0, 101) == 1"
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"olleh\""
    },
    {
        "number": 51,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    new_text = ''\n    for char in text:\n        if char.lower() not in vowels:\n            new_text += char\n    return new_text",
        "test": "assert remove_vowels('') == ''"
    },
    {
        "number": 52,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(num < t for num in l)",
        "test": "assert below_threshold([1, 20, 4, 10], 5) == False"
    },
    {
        "number": 53,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y",
        "test": "assert add(2, 3) == 5"
    },
    {
        "number": 54,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    # Convert both strings to sets\n    set0 = set(s0)\n    set1 = set(s1)\n    # Check if the sets are equal\n    if set0 == set1:\n        return True\n    else:\n        return False",
        "test": "assert same_chars('eabcd', 'dddddddabc') == False"
    },
    {
        "number": 55,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib_prev1, fib_prev2 = 0, 1\n        for i in range(2, n + 1):\n            fib_curr = fib_prev1 + fib_prev2\n            fib_prev1 = fib_prev2\n            fib_prev2 = fib_curr\n        return fib_prev2",
        "test": "assert fib(10) == 55, \"The n-th Fibonacci number is incorrect.\""
    },
    {
        "number": 56,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            if stack[-1] == \"<\":\n                stack.pop()\n    return not stack",
        "test": "assert correct_bracketing(\"><<>\") is False"
    },
    {
        "number": 57,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # Check if the list is empty\n    if not l:\n        return True\n    \n    # Check if the first element is greater than all the other elements\n    if l[0] > max(l[1:], default=float('inf')):\n        return False\n    \n    # Check if the last element is less than all the other elements\n    if l[-1] < min(l[:-1], default=float('-inf')):\n        return False\n    \n    # Check if the list has at least two elements\n    if len(l) < 2:\n        return True\n    \n    # Check if all the elements are increasing or decreasing\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            return False\n        elif l[i] > l[i-1]:\n            return True\n    \n    # If all the checks pass, the list is monotonic\n    return True",
        "test": "assert monotonic([1, 2, 4, 20]) == True"
    },
    {
        "number": 58,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n\n    # remove duplicates from the lists\n    l1 = list(set(l1))\n    l2 = list(set(l2))\n\n    # sort the lists\n    l1.sort()\n    l2.sort()\n\n    # find the common elements\n    common_elements = []\n    i = j = 0\n\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            common_elements.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n\n    # return the list of common elements\n    return common_elements\n",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]"
    },
    {
        "number": 59,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    # Check if n is prime\n    if n == 2:\n        return 2\n    elif n % 2 == 0:\n        return 2\n\n    # Loop through numbers from 3 to the square root of n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            n //= i\n\n    return n\n",
        "test": "assert largest_prime_factor(2048) == 2, \"The largest prime factor of 2048 is not 2.\""
    },
    {
        "number": 60,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    # Initialize a variable to hold the sum\n    total = 0\n    # Loop through numbers from 1 to n\n    for i in range(1, n+1):\n        # Add the current number to the total variable\n        total += i\n    # Return the total\n    return total",
        "test": "assert sum_to_n(30) == 465"
    },
    {
        "number": 61,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" Returns True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack[-1]!= '(':\n                return False\n            stack.pop()\n    return not stack",
        "test": "assert correct_bracketing(\"()\") is True"
    },
    {
        "number": 62,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n    # Initialize the derivative array with ones\n    derivative = [1] * len(xs)\n\n    # Reverse the derivative array\n    for i in range(1, len(xs)):\n        derivative[i] = -derivative[i-1]\n\n    return derivative",
        "test": "assert derivative([1]) == [1]"
    },
    {
        "number": 63,
        "max_answer_num": 15,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    \"\"\"\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "assert fibfib(1) == 0, \"fibfib(1) should return 0.\""
    },
    {
        "number": 64,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def vowels_count(s):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count",
        "test": "assert vowels_count(\"abcde\") == 2"
    },
    {
        "number": 65,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n\n    # Find the number of digits in the original number\n    num_digits = len(str(abs(x)))\n\n    # Check if the shift is greater than the number of digits\n    if shift > num_digits:\n        # Reverse the digits and return the result as a string\n        return str(x)[::-1]\n\n    # Shift the digits right by the given shift amount\n    shifted_digits = int(x/10) * 10 + shift\n\n    # Return the shifted digits as a string\n    return str(shifted_digits)",
        "test": "assert circular_shift(12, 2) == \"12\""
    },
    {
        "number": 66,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    total = 0\n    for c in s:\n        if c.isupper():\n            total += ord(c)\n    return total",
        "test": "assert digitSum(\"\") == 0"
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    #Split the string into separate list\n    string_list = s.split()\n    #Get the total number of apples and oranges in the basket\n    total_apples = int(string_list[0])\n    total_oranges = int(string_list[1])\n    #Get the total number of fruits in the basket\n    total_fruits = int(n)\n    #Count the number of mango fruits in the basket\n    mango_count = 0\n    for i in range(total_fruits):\n        if string_list[i] =='mango':\n            mango_count += 1\n    return mango_count",
        "test": "assert fruit_distribution(\"100 apples and 1 oranges\", 120) == 19, \"The number of oranges in the basket should be 19.\""
    },
    {
        "number": 68,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but there are two zeros,\n                         so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n    even_values = []\n    smallest_even_value = float('inf')\n    smallest_index = None\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_values.append(arr[i])\n            if arr[i] < smallest_even_value:\n                smallest_even_value = arr[i]\n                smallest_index = i\n\n    if even_values:\n        return [smallest_even_value, smallest_index]\n    else:\n        return []",
        "test": "assert pluck([]) == []"
    },
    {
        "number": 69,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    max_num = -1\n    max_freq = 0\n    \n    for num in lst:\n        if num > 0 and num >= max_num:\n            max_num = num\n            max_freq = 1\n        elif num > 0 and num == max_num:\n            max_freq += 1\n    \n    return max_num if max_freq >= max_num else -1",
        "test": "assert search([5, 5, 4, 4, 4]) == -1"
    },
    {
        "number": 70,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # Check if the list is empty\n    if not lst:\n        return []\n\n    # Get the first element\n    first_element = lst[0]\n\n    # Use a while loop to sort the list\n    while True:\n        # Find the maximum element in the list\n        max_element = max(lst)\n\n        # Use another while loop to find the correct position of the first element\n        start_index = 0\n        end_index = len(lst) - 1\n\n        while start_index < end_index:\n            mid_index = (start_index + end_index) // 2\n\n            if lst[mid_index] < first_element:\n                start_index = mid_index + 1\n            else:\n                end_index = mid_index\n\n        # Move the first element to the correct position in the sorted list\n        lst[start_index] = first_element\n\n        # Check if the list is now sorted\n        if end_index - start_index == len(lst):\n            break\n\n        # Update the minimum element and start the loop again\n        start_index += 1\n        end_index = len(lst) - 1\n        first_element = max_element\n\n    return lst",
        "test": "assert strange_sort_list([]) == []"
    },
    {
        "number": 71,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter of the triangle\n        s = (a + b + c) / 2\n\n        # Calculate the area of the triangle\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n        return round(area, 2)\n    else:\n        return -1",
        "test": "assert triangle_area(1, 2, 10) == -1"
    },
    {
        "number": 72,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Args:\n        q (list): A list of integers.\n        w (int): The maximum possible weight of the object.\n\n    Returns:\n        bool: True if the object q will fly, and False otherwise.\n    '''\n\n    # Check if the list is a palindrome.\n    if not q == q[::-1]:\n        return False\n\n    # Calculate the sum of the elements in the list.\n    total_sum = sum(q)\n\n    # Check if the sum is less than or equal to the maximum possible weight.\n    if total_sum <= w:\n        return True\n    else:\n        return False\n",
        "test": "assert will_it_fly([3, 2, 3], 1) is False"
    },
    {
        "number": 73,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    min_count = len(arr)\n\n    for i in range(1, len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] == arr[j]:\n                count = 0\n                for k in range(i, j):\n                    if arr[k]!= arr[i]:\n                        count += 1\n                if count < min_count:\n                    min_count = count\n\n    return min_count",
        "test": "assert smallest_change([1, 2, 3, 2, 1]) == 0"
    },
    {
        "number": 74,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\n    # Initialize a variable to store the total number of chars\n    total_chars = 0\n\n    # Iterate over each string in lst1\n    for string1 in lst1:\n        # Iterate over each string in lst2 and check if there is any char less than the current string\n        for string2 in lst2:\n            if len(string2) < len(string1):\n                # If a char is found less than the current string, increment the total_chars variable\n                total_chars += len(string2)\n\n    # Create an empty list to store the total_chars less than the current string\n    result = []\n\n    # Iterate over each string in lst1\n    for string1 in lst1:\n        # Iterate over each string in lst2 and check if there is any char less than the current string\n        for string2 in lst2:\n            if len(string2) < len(string1):\n                # If a char is found less than the current string, append it to the result list\n                result.append(string2)\n\n    # Return the result list\n    return result",
        "test": "assert total_match([], []) == []"
    },
    {
        "number": 75,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    for i in range(2, a):\n        if a % i == 0 and i!= a:\n            return True\n    return False\n",
        "test": "assert is_multiply_prime(11) == False, \"11 is the multiplication of 3 prime numbers.\""
    },
    {
        "number": 76,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Returns True if x is a simple power of n, and False otherwise.\"\"\"\n    if n == 1:\n        return True\n    elif n % 2 == 0 and x % 2 == 0:\n        return is_simple_power(x // 2, n // 2)\n    else:\n        return False",
        "test": "assert is_simple_power(3, 2) == False"
    },
    {
        "number": 77,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    # Check if the input is negative\n    if a < 0:\n        return False\n\n    # Check if the input is already a cube\n    if a == 1 or a == 4 or a == 6 or a == 8 or a == 10 or a == 12 or a == 14 or a == 16 or a == 18 or a == 20 or a == 22 or a == 24 or a == 26 or a == 28 or a == 30 or a == 32 or a == 34 or a == 36 or a == 38 or a == 40 or a == 42 or a == 44 or a == 46 or a == 48 or a == 50 or a == 52 or a == 54 or a == 56 or a == 58 or a == 60 or a == 62 or a == 64 or a == 66 or a == 68 or a == 70 or a == 72 or a == 74 or a == 76 or a == 78 or a == 80 or a == 82 or a == 84 or a == 86 or a == 88 or a == 90 or a == 92 or a == 94 or a == 96 or a == 98 or a == 100 or a == 102 or a == 104 or a == 106 or a == 108 or a == 110 or a == 112 or a == 114 or a == 116 or a == 118 or a == 120 or a == 122 or a == 124 or a == 126 or a == 128 or a == 130 or a == 132 or a == 134 or a == 136 or a == 138 or a == 140 or a == 142 or a == 144 or a == 146 or a == 148 or a == 150 or a == 152 or a == 154 or a == 156 or a == 158 or a == 160 or a == 162 or a == 164 or a == 166 or a == 168 or a == 170 or a == 172 or a == 174 or a == 176 or a == 178 or a == 180:\n        return True\n\n    # Check if the input is a factor of 3, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, ",
        "test": "assert iscube(1) == True, \"iscube(1) should return True\""
    },
    {
        "number": 78,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if num is a prime number, False otherwise.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    \"\"\"\n    Returns the number of primes in the given hexadecimal number.\n    \"\"\"\n    primes = 0\n    for i in range(len(num)):\n        if num[i].isdigit() and int(num[i]) >= 2 and int(num[i]) <= 9 and is_prime(int(num[i])):\n            primes += 1\n    return primes",
        "test": "assert hex_key(\"1077E\") == 2"
    },
    {
        "number": 79,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\n    # Initialize the binary string\n    binary = \"\"\n\n    # Convert the decimal number to binary\n    while decimal > 0:\n        binary = \"0\" + binary + str(decimal % 2)\n        decimal //= 2\n\n    # Reverse the binary string\n    binary = binary[::-1]\n\n    # Remove the extra characters\n    binary = binary[:-4]\n\n    # Return the binary string\n    return \"db\" + binary + \"db\"",
        "test": "assert decimal_to_binary(15) == \"db1111db\""
    },
    {
        "number": 80,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n\n    if len(s) < 3:\n        return False\n\n    # Initialize a set to store the letters of the string\n    seen_letters = set()\n\n    for i in range(len(s)):\n        # Check if the current character is in the seen_letters set\n        if s[i] in seen_letters:\n            return False\n\n        # Add the current character to the seen_letters set\n        seen_letters.add(s[i])\n\n    return True\n",
        "test": "assert is_happy(\"a\") == False"
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n    GPA       |    Letter grade\n      4.0                A+\n    > 3.7                A \n    > 3.3                A- \n    > 3.0                B+\n    > 2.7                B \n    > 2.3                B-\n    > 2.0                C+\n    > 1.7                C\n    > 1.3                C-\n    > 1.0                D+ \n    > 0.7                D \n    > 0.0                D-\n      0.0                E\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n        0.0: 'E'\n    }\n\n    result = []\n    for gpa in grades:\n        if gpa >= 4:\n            result.append(letter_grades[gpa])\n        elif gpa >= 3.7:\n            result.append(letter_grades[gpa])\n        elif gpa >= 3.3:\n            result.append(letter_grades[gpa])\n        elif gpa >= 3:\n            result.append(letter_grades[gpa])\n        elif gpa >= 2.7:\n            result.append(letter_grades[gpa])\n        elif gpa >= 2.3:\n            result.append(letter_grades[gpa])\n        elif gpa >= 2:\n            result.append(letter_grades[gpa])\n        elif gpa >= 1.7:\n            result.append(letter_grades[gpa])\n        elif gpa >= 1.3:\n            result.append(letter_grades[gpa])\n        elif gpa >= 1:\n            result.append(letter_grades[gpa])\n        elif gpa >= 0.7:\n            result.append(letter_grades[gpa])\n        elif gpa >= 0:\n            result.append(letter_grades[gpa])\n\n    return result\n",
        "test": "assert numerical_letter_grade([4.2, 3.8, 1.7, 2, 3.5]) == ['B-', 'B+', 'C-', 'C', 'A-']"
    },
    {
        "number": 82,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\"\"\"\n\n    # Define a list of prime numbers\n    primes = [2, 3, 5, 7]\n\n    # Check if the length of the string is in the prime list\n    if len(string) in primes:\n        return True\n    else:\n        return False",
        "test": "assert prime_length('abcdcba') == True"
    },
    {
        "number": 83,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if i % 10 == 1: # check if i is a multiple of 10\n            count += 1\n            if i == n: # if i is equal to n, we have reached the end of the sequence\n                break\n    return count",
        "test": "assert starts_one_ends(0) == 0"
    },
    {
        "number": 84,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n                Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n        a string of binary number\n    \"\"\"\n    total_sum = 0\n    while N!= 0:\n        total_sum += N % 10\n        N //= 10\n    return str(total_sum)",
        "test": "assert solve(1000) == \"1\""
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and i % 2!= lst[i - 1]:\n            result += lst[i]\n    return result",
        "test": "assert add([5]) == 5, \"The code is not returning the expected output.\""
    },
    {
        "number": 86,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n    # Create a list of words in the input string\n    words = s.split()\n\n    # Create an empty list to store the ordered words\n    ordered_words = []\n\n    # Iterate over the words of the input string\n    for word in words:\n        # Convert the word to lowercase and remove all non-alphanumeric characters\n        word = ''.join(filter(str.isalnum, word)).lower()\n\n        # Sort the characters in the word in ascending order based on ascii value\n        sorted_word = ''.join(sorted(word))\n\n        # Add the sorted word to the ordered_words list\n        ordered_words.append(sorted_word)\n\n    # Join the ordered_words list into a string with space as the delimiter\n    ordered_string =''.join(ordered_words)\n\n    return ordered_string",
        "test": "assert anti_shuffle('hello') == 'ehllo'"
    },
    {
        "number": 87,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    \n    # Helper function to get column for each row\n    def get_columns(row):\n        return [lst[i][j] for j in range(len(lst[0]))]\n    \n    # Get the list of coordinates for each row\n    coordinates = [(row, get_columns(row)) for row in lst]\n    \n    # Sort coordinates by rows first and then columns\n    coordinates.sort(key=lambda x: x[0])\n    \n    # Filter coordinates for x\n    filtered_coordinates = [(coord[0], coord[1][coord[1].index(x):]) for coord in coordinates for x in coord[1]]\n    \n    return filtered_coordinates",
        "test": "assert get_row([], 1) == []"
    },
    {
        "number": 88,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    # Sort the given array using merge sort algorithm\n    def merge(left, right):\n        result = []\n        i = j = 0\n\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n\n        result += left[i:]\n        result += right[j:]\n\n        return result\n\n    def merge_sort(array):\n        if len(array) <= 1:\n            return array\n\n        mid = len(array) // 2\n        left = array[:mid]\n        right = array[mid:]\n\n        left = merge_sort(left)\n        right = merge_sort(right)\n\n        return merge(left, right)\n\n    sorted_array = merge_sort(array)\n\n    return sorted_array",
        "test": "assert sort_array([]) == []"
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def rotate_alphabet(s):\n    \"\"\"\n    Rotate the alphabet of a given string by two places.\n    \"\"\"\n    # Create a dictionary to map the characters of the alphabet to their\n    # corresponding indices.\n    char_indices = {c: i for i, c in enumerate('abcdefghijklmnopqrstuvwxyz')}\n    \n    # Iterate over each character of the input string and rotate its index\n    # by two places.\n    for i in range(len(s)):\n        index = char_indices[s[i]]\n        new_index = (index + 2) % 26\n        char_indices[s[i]] = new_index\n    \n    # Convert the dictionary back to a string and return it.\n    return ''.join(chr(i) for i in char_indices.values())\n",
        "test": "assert encrypt('et') == 'ix'"
    },
    {
        "number": 90,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the given list or None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    \n    if len(lst) < 2:\n        return None\n    \n    smallest = lst[0]\n    second_smallest = float('inf')\n    \n    for i in range(1, len(lst)):\n        if lst[i] < smallest:\n            second_smallest = smallest\n            smallest = lst[i]\n        elif lst[i] < second_smallest and lst[i]!= smallest:\n            second_smallest = lst[i]\n    \n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest",
        "test": "assert next_smallest([]) == None"
    },
    {
        "number": 91,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    boredom_count = 0\n    words = S.split()\n    for word in words:\n        if word.lower() == \"i\" and word.isalpha():\n            boredom_count += 1\n    return boredom_count",
        "test": "assert is_bored(\"Hello world\") == 0"
    },
    {
        "number": 92,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n\n    # Check if all numbers are integers\n    if not all(isinstance(num, int) for num in [x, y, z]):\n        return False\n\n    # Check if the sum of the numbers is equal to the third one\n    if x + y == z:\n        return True\n\n    return False",
        "test": "assert any_int(3, 2, 2) == False"
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    \n    def swap_case(char):\n        if char.islower():\n            return char.upper()\n        else:\n            return char.lower()\n    \n    def replace_vowel(char):\n        if char in 'aeiouAEIOU':\n            vowel_count = message.count(char)\n            if vowel_count == 2:\n                return 'AEIOU'[vowel_count-1]\n            elif vowel_count == 1:\n                return 'AEIOU'[vowel_count]\n        return char\n    \n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            encoded_message += swap_case(char)\n        elif char in 'aeiouAEIOU':\n            encoded_message += replace_vowel(char)\n        else:\n            encoded_message += char\n    \n    return encoded_message",
        "test": "assert encode('This is a message') == 'tHKS KS C MGSSCGG'"
    },
    {
        "number": 94,
        "max_answer_num": 20,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef largest_prime(lst):\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    return max_prime\n\ndef sum_of_digits(num):\n    return sum(int(digit) for digit in str(num))\n\ndef skjkasdkd(lst):\n    max_prime = largest_prime(lst)\n    digits_sum = sum_of_digits(max_prime)\n    return digits_sum",
        "test": "assert skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10"
    },
    {
        "number": 95,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    \n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.isupper():\n            if key.lower() not in dict:\n                return False\n        elif key.lower() not in dict:\n            return False\n    \n    return True",
        "test": "assert check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) == False"
    },
    {
        "number": 96,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_prime(n):\n    \"\"\"Check if a given integer is prime\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    for i in range(2, n + 1):\n        if is_prime(i):\n            primes.append(i)\n            if len(primes) == n:\n                break\n    return primes",
        "test": "assert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19], \"count_up_to(20) should return [2, 3, 5, 7, 11, 13, 17, 19]\""
    },
    {
        "number": 97,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def multiply(a, b):\n    \"\"\"\n    Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\n    result = 0\n    a = abs(a)\n    b = abs(b)\n\n    while b > 0:\n        carry = a & b\n        a = a ^ b\n        b = carry << 1\n\n        if result > (10 ** (len(str(result)))) - 1 or result == (10 ** (len(str(result)))) - 1:\n            return \"Result overflow\"\n\n    return result\n",
        "test": "assert multiply(2020, 1851) == 0"
    },
    {
        "number": 98,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U':\n            if i % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert count_upper('abcdefg') == 0"
    },
    {
        "number": 99,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    # Convert the value to a float\n    value = float(value)\n\n    # Check if the value is between two integers\n    if value - value % 1 == 0:\n        # If the value is exactly equal to an integer, return the integer\n        return int(value)\n\n    # Check if the value is equal to two integers\n    if value - value % 1 == 0 and value % 1 == 0:\n        # If the value is exactly equal to two integers, return the integer\n        return int(value)\n\n    # Check if the value is greater than two integers\n    if value > 2:\n        # If the value is greater than two integers, round it down to the nearest integer\n        value -= value % 1\n        return int(value)\n\n    # Check if the value is less than or equal to two integers\n    if value <= 2:\n        # If the value is less than or equal to two integers, round it up to the nearest integer\n        value += 1\n        return int(value)\n\n    # If the value is not between two integers, round it away from zero\n    value -= value % 1\n    return int(value)",
        "test": "assert closest_integer(\"10\") == 10"
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    # initialize the list to store the numbers of stones in each level\n    levels = []\n\n    # iterate over each level of stones\n    for i in range(n):\n        # calculate the number of stones in the next level based on whether the current level is odd or even\n        stones_per_level = 0\n        if i % 2 == 0:\n            stones_per_level = n - i\n        else:\n            stones_per_level = n - (i + 1)\n\n        # add the number of stones in the current level to the list of stones in the current level\n        levels.append(stones_per_level)\n\n    return levels",
        "test": "assert make_a_pile(6) == [6, 8, 10]"
    },
    {
        "number": 101,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    words = s.split(\",\")\n    return words",
        "test": "assert words_string(\"Apple,Banana,Cherry\") == [\"Apple\", \"Banana\", \"Cherry\"]"
    },
    {
        "number": 102,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\n    # Initialize a variable to store the biggest even integer number\n    max_num = -1\n\n    # Iterate through all numbers from x to y\n    for num in range(x, y + 1):\n        # If the number is even, check if it's larger than the current maximum\n        if num % 2 == 0:\n            if num > max_num:\n                max_num = num\n\n    return max_num",
        "test": "assert choose_num(13, 12) == -1"
    },
    {
        "number": 103,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    if n > m:\n        return -1\n    \n    total = n + m\n    avg = total // 2\n    rounded_avg = int(avg)\n    \n    if n == m:\n        binary = \"0b0\"\n    else:\n        binary = \"0b\"\n        while rounded_avg > 0:\n            bit = \"0\" if rounded_avg % 2 == 0 else \"1\"\n            binary += bit\n            rounded_avg //= 2\n            \n    return binary",
        "test": "assert rounded_avg(7, 5) == -1"
    },
    {
        "number": 104,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    # initialize an empty list to store unique digits\n    unique_digits = []\n\n    # iterate through the list of positive integers x\n    for num in x:\n        # check if the number has any even digit\n        if num % 2!= 0:\n            # append the number to the unique_digits list\n            unique_digits.append(num)\n\n    # sort the unique_digits list in increasing order\n    unique_digits.sort()\n\n    return unique_digits\n",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]"
    },
    {
        "number": 105,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n        sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n        reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n      \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n      \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n        sort arr -> [-1, 1, 55]\n        reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    # Sort the array\n    arr.sort()\n\n    # Reverse the array\n    arr.reverse()\n\n    # Replace each digit by its corresponding name\n    names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    result = []\n    for num in arr:\n        if num < 10:\n            result.append(names[num - 1])\n        else:\n            result.append('Ignore')\n\n    return result",
        "test": "assert by_length([]) == []"
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(i * (i-1))\n    return result\n\nprint(f(5))  # Output: [1, 2, 6, 24, 15]",
        "test": "assert f(5) == [1, 2, 6, 24, 15], \"The function f(5) should return the list [1, 2, 6, 24, 15].\""
    },
    {
        "number": 107,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n    odd_count = 0\n    even_count = 0\n    for i in range(1, n+1):\n        if i == int(str(i)[::-1]):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)",
        "test": "assert even_odd_palindrome(0) == (0, 0)"
    },
    {
        "number": 108,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num > 0:\n            sum_of_digits = sum(map(int, str(num)))\n            if sum_of_digits > 0:\n                count += 1\n    return count",
        "test": "assert count_nums([]) == 0"
    },
    {
        "number": 109,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def move_one_ball(arr):\n    \"\"\"\n    We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].\n    The numbers in the array will be randomly ordered. Your task is to determine\n    if it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n    \n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n    \n    Note: The given list is guaranteed to have unique elements.\n    \n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performing 2 right shift operations, non-decreasing order can\n                    be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation: It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n    \"\"\"\n    if len(arr) == 0:\n        return True\n    \n    for i in range(len(arr) - 1, -1, -1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                return False\n                \n    return True",
        "test": "assert move_one_ball([]) == True, \"The given array is empty.\""
    },
    {
        "number": 110,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Check if the length of the two lists are the same\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n    \n    # Iterate over the elements of lst1\n    for i in range(len(lst1)):\n        # Check if the element of lst2 is even\n        if lst2[i] % 2!= 0:\n            # If the element of lst2 is even, and not the same as the element\n            # of lst1, return \"NO\"\n            if lst1[i]!= lst2[i]:\n                return \"NO\"\n    \n    # If the loop completes without returning \"NO\", return \"YES\"\n    return \"YES\"",
        "test": "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\""
    },
    {
        "number": 111,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Initialize an empty dictionary to store the letter counts\n    letter_count = {}\n\n    # Split the input string into a list of words\n    words = test.split()\n\n    # Iterate over each word in the list\n    for word in words:\n        # Check if the word contains only letters\n        if not all(c.isalpha() for c in word):\n            continue\n\n        # Split the word into a list of characters\n        chars = list(word)\n\n        # Iterate over each character in the word\n        for char in chars:\n            # Check if the character is already in the dictionary\n            if char in letter_count:\n                # If it is, increment its count\n                letter_count[char] += 1\n            else:\n                # Otherwise, add it to the dictionary with a count of 1\n                letter_count[char] = 1\n\n    # Return the dictionary of letter counts\n    return letter_count",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}"
    },
    {
        "number": 112,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def reverse_delete(s, c):\n    \"\"\"\n    Reverses the given string `s` and deletes all the characters in `s` that are equal to any character in `c`.\n    Then checks if the result string is a palindrome.\n    Returns a tuple containing the result string and True/False for the check.\n    \"\"\"\n    # reverse the string\n    s = s[::-1]\n\n    # create a set of characters in c\n    c_set = set(c)\n\n    # remove all characters in s that are equal to any character in c\n    result = ''.join([char for char in s if char not in c_set])\n\n    # check if the result string is a palindrome\n    is_palindrome = result == result[::-1]\n\n    return result, is_palindrome",
        "test": "assert reverse_delete(\"abcdedcba\", \"ab\") == (\"cdedc\", True)"
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\n    result = []\n    for i in range(len(lst)):\n        odd_count = 0\n        for j in range(len(lst[i])):\n            if lst[i][j] % 2!= 0:\n                odd_count += 1\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(\n            odd_count, i, lst[i], i\n        ))\n    return result\n",
        "test": "assert odd_count(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]"
    },
    {
        "number": 114,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        current_sum -= num\n    return min_sum",
        "test": "assert minSubArraySum([1]) == 1"
    },
    {
        "number": 115,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def max_fill(grid, capacity):\n    import math\n    \n    # Find the maximum capacity of all buckets\n    max_capacity = math.inf\n    for row in grid:\n        for bucket in row:\n            if bucket > max_capacity:\n                max_capacity = bucket\n    \n    # Iterate through the grid and update the wells if the bucket is full\n    count = 0\n    for row in grid:\n        for bucket in row:\n            if bucket == max_capacity:\n                # If the bucket is full, find the next empty well\n                for j in range(1, len(row)):\n                    if row[j] == 0:\n                        bucket = 0\n                        break\n                else:\n                    # If no empty wells found, lower the bucket to fill the empty well\n                    bucket = 0\n                count += 1\n    \n    return count\n",
        "test": "assert max_fill([[0,0,0], [0,0,0]], 5) == 0"
    },
    {
        "number": 116,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(num):\n        return bin(num).count('1')\n\n    # Sort the array based on the count of ones\n    arr.sort(key=count_ones)\n\n    return arr\n",
        "test": "assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]"
    },
    {
        "number": 117,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Remove spaces and convert to lowercase\n    s = s.translate(str.maketrans(\"\", \"\", \"aeiouAEIOU\"))\n    # Split string into list of words\n    words = s.split()\n    # Initialize an empty list to store selected words\n    selected_words = []\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is equal to the number of consonants\n        if len(word) == n:\n            # Check if all the consonants are in the word\n            if all(c in word for c in \"aeiouAEIOU\"):\n                # If all conditions are met, add the word to the selected_words list\n                selected_words.append(word)\n    # Return the selected_words list\n    return selected_words",
        "test": "assert select_words(\"simple white space\", 2) == []"
    },
    {
        "number": 118,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def get_closest_vowel(word):\n    \"\"\"\n    Find the closest vowel in the word to the consonants from the right side.\n    \"\"\"\n\n    vowels = \"AEIOUaeiou\"\n    left_char = word[0].lower()\n    right_char = word[-1].lower()\n\n    # Check if the left and right characters are vowels\n    if left_char in vowels and right_char in vowels:\n        # Check if the vowels are adjacent to each other\n        if left_char.isalpha() and left_char.upper() == right_char.upper():\n            return left_char\n        else:\n            return right_char\n    else:\n        return \"\"\n",
        "test": "assert get_closest_vowel(\"quick\") == \"\""
    },
    {
        "number": 119,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    # Create a stack to keep track of open parentheses\n    stack = []\n\n    # Iterate through each string in the list\n    for s in lst:\n        # Iterate through each character in the string\n        for i in range(len(s)):\n            # If the character is an opening parenthesis, push it onto the stack\n            if s[i] == '(':\n                stack.append(i)\n            # If the character is a closing parenthesis, pop it from the stack\n            elif s[i] == ')':\n                if not stack:\n                    return 'No'\n                else:\n                    stack.pop()\n\n    # If there are no more characters in the stack, it means all parentheses are balanced\n    if not stack:\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert match_parens([')', ')']) == 'No', 'Incorrect output for example 2'"
    },
    {
        "number": 120,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[:k]",
        "test": "assert maximum([-3, -4, 5], 3) == [-4, -3, 5]"
    },
    {
        "number": 121,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    sum = 0\n    for num in lst:\n        if num % 2!= 0:  # check if number is odd\n            if num % 2 == 0:  # check if number is even\n                sum += num\n    return sum",
        "test": "assert solution([30, 13, 24, 321]) == 0"
    },
    {
        "number": 122,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    result = 0\n    for num in arr[:k]:\n        if len(str(num)) <= 2:\n            result += num\n    return result",
        "test": "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24 # sum of 21 + 3"
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    # Base cases\n    if n <= 1:\n        return [n]\n\n    # Recursive case\n    odd_collatz = []\n    current_num = n\n    while True:\n        if current_num % 2 == 1:\n            odd_collatz.append(current_num)\n            current_num = 3 * current_num + 1\n        else:\n            current_num = int(current_num / 2)\n\n    return sorted(odd_collatz)",
        "test": "assert get_odd_collatz(1) == [1]"
    },
    {
        "number": 124,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def valid_date(date):\n    \"\"\"\n    This function takes a date string in the format of mm-dd-yyyy and returns True if the date is valid,\n    otherwise it returns False.\n\n    The function checks the following rules:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    # Check if date string is not empty\n    if not date:\n        return False\n\n    # Split the date string into month, day, and year\n    month, day, year = map(int, date.split('-'))\n\n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the day is valid\n    if day < 1 or day > 31:\n        return False\n\n    # Check if the year is valid\n    if year < 1900:\n        return False\n\n    # Check if the number of days is valid\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        if day > days[month - 1]:\n            return False\n    elif month in [4, 6, 9, 11]:\n        days = [30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]\n        if day > days[month - 4]:\n            return False\n    elif month == 2:\n        days = [29, 28, 29, 28, 29, 28, 29, 28]\n        if day > days[month - 2]:\n            return False\n\n    return True",
        "test": "assert valid_date('04-0-2040') == False"
    },
    {
        "number": 125,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def split_words(txt):\n    if ',' in txt:\n        words = txt.split(',')\n    else:\n        words = txt.lower().split()\n        odd_order_letters = [letter for letter in words if ord(letter) % 2 == 1]\n        words.append(odd_order_letters)\n        words = list(set(words))\n    return words",
        "test": "assert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]"
    },
    {
        "number": 126,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n    if len(lst) <= 1:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True",
        "test": "assert is_sorted([5]) == True"
    },
    {
        "number": 127,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def intersection(interval1, interval2):\n    \"\"\"\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n    \"\"\"\n    if interval1[0] == interval2[0]:\n        return \"NO\"\n\n    if (interval1[0] < interval2[1] and interval1[1] > interval2[0]):\n        return \"NO\"\n\n    if (interval2[0] < interval1[1] and interval2[1] > interval1[0]):\n        return \"NO\"\n\n    if (interval1[0] < interval2[0] and interval1[1] > interval2[1]):\n        return \"YES\"\n\n    return \"NO\"",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\""
    },
    {
        "number": 128,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n\n    if not arr:\n        return None\n\n    magnitudes = []\n    product = 1\n\n    for num in arr:\n        magnitude = abs(num)\n        magnitudes.append(magnitude)\n        product *= sign(num)\n\n    return sum(magnitudes) * product\n\n\ndef sign(num):\n    if num > 0:\n        return 1\n    elif num < 0:\n        return -1\n    else:\n        return 0",
        "test": "assert prod_signs([0, 1]) == 0"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    def min_path_helper(grid, k, row, col):\n        if row == len(grid) - 1 and col == len(grid[0]) - 1:\n            return grid[row][col]\n        if row == len(grid) - 1:\n            return min_path_helper(grid, k, row, col + 1)\n        if col == len(grid[0]) - 1:\n            return min_path_helper(grid, k, row + 1, col)\n        min_val = float('inf')\n        if grid[row][col] < min_val:\n            min_val = grid[row][col]\n        if row > 0 and col > 0 and grid[row][col] < min_path_helper(grid, k, row - 1, col - 1):\n            min_val = min_path_helper(grid, k, row - 1, col - 1)\n        if row > 0 and grid[row][col] < min_path_helper(grid, k, row - 1, col):\n            min_val = min_path_helper(grid, k, row - 1, col)\n        if col > 0 and grid[row][col] < min_path_helper(grid, k, row, col - 1):\n            min_val = min_path_helper(grid, k, row, col - 1)\n        return min_val\n\n    return min_path_helper(grid, k, 0, 0)",
        "test": "assert minPath([ [5,9,3], [4,1,6], [7,8,2] ], 1) == [1]"
    },
    {
        "number": 130,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n\n    # Initialize an empty list to store the first n + 1 numbers of the Tribonacci sequence\n    tri_sequence = []\n\n    # Check if n is greater than 0\n    if n > 0:\n        # Check if n is odd or even\n        if n % 2 == 0:\n            # If n is even, calculate the first n / 2 numbers using the formula tri(n) = 1 + n / 2\n            for i in range(n // 2):\n                tri_sequence.append(1 + i)\n        else:\n            # If n is odd, calculate the first n numbers using the formula tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1)\n            for i in range(n):\n                tri_sequence.append(tri(i) + tri(i - 1) + tri(i + 1))\n\n    # Return the list of the first n + 1 numbers of the Tribonacci sequence\n    return tri_sequence\n",
        "test": "assert tri(-1) == [], \"The tribonacci sequence for n = -1 is not correct.\""
    },
    {
        "number": 131,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    odd_digits = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            odd_digits *= digit\n        n //= 10\n    return odd_digits",
        "test": "assert digits(1) == 1, \"digits(1) should be 1\""
    },
    {
        "number": 132,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def is_nested(string):\n    stack = []\n\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if top_char == '[' and char!= '[':\n                return False\n            elif top_char == '[' and char == '[':\n                stack.append(char)\n\n    return not stack\n",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False"
    },
    {
        "number": 133,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n    \"\"\"\n    # Initialize the sum of squares and the count of elements in the list\n    total_sum = 0\n    count = len(lst)\n    \n    # Iterate through each element in the list and calculate its square\n    for num in lst:\n        total_sum += num ** 2\n        \n    # Round each element to the upper int(Ceiling) and return the result\n    return round(total_sum, int(count ** 0.5))\n    \n",
        "test": "assert sum_squares([1, 2, 3]) == 14"
    },
    {
        "number": 134,
        "max_answer_num": 15,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n\n    if not txt:\n        return False\n\n    last_char = txt[-1]\n\n    if last_char.isalpha() and not txt.endswith(last_char):\n        return True\n    else:\n        return False",
        "test": "assert check_if_last_char_is_a_letter(\"apple pi e \") == False"
    },
    {
        "number": 135,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    prev_index = -1\n    max_index = -1\n    for i in range(len(arr)):\n        if arr[i] > arr[prev_index]:\n            max_index = prev_index\n            prev_index = i\n        elif arr[i] == arr[prev_index]:\n            prev_index += 1\n    return max_index",
        "test": "assert can_arrange([]) == -1"
    },
    {
        "number": 136,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list. If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    \n    # Initialize variables\n    a = None\n    b = None\n    \n    # Iterate through the list\n    for num in lst:\n        # If the number is negative, update a\n        if num < 0:\n            a = num\n        # If the number is positive, update b\n        elif num > 0:\n            b = num\n    \n    # Return the result\n    return (a, b)",
        "test": "assert largest_smallest_integers([]) == (None, None)"
    },
    {
        "number": 137,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    \n    if isinstance(a, (int, float)):\n        if isinstance(b, (int, float)):\n            return max(a, b)\n        elif isinstance(b, str):\n            return b\n    elif isinstance(a, str):\n        if isinstance(b, str):\n            return max(a, b)\n        elif isinstance(b, (int, float)):\n            return a\n    elif isinstance(b, str):\n        if isinstance(a, (int, float)):\n            return b\n    elif isinstance(a, (int, float)):\n        return a\n    elif isinstance(b, (int, float)):\n        return b\n    else:\n        return None",
        "test": "assert compare_one(1, 2.5) == 2.5"
    },
    {
        "number": 138,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n % 2 == 0:\n        if n % 4 == 0:\n            return True\n    return False",
        "test": "assert is_equal_to_sum_even(6) == False"
    },
    {
        "number": 139,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result",
        "test": "assert special_factorial(0) == 1, \"The special_factorial function returns incorrect result.\""
    },
    {
        "number": 140,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    # replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n\n    # replace consecutive spaces with -\n    count = 0\n    for i in range(len(text)-1):\n        if text[i] == \" \":\n            if i > 0 and text[i-1] == \" \":\n                text = text[:i] + \"-\" + text[i+1:]\n                count += 1\n            elif i < len(text)-2 and text[i+1] == \" \":\n                text = text[:i] + \"_-\" + text[i+2:]\n                count += 1\n\n    return text",
        "test": "assert fix_spaces(\"Example\") == \"Example\""
    },
    {
        "number": 141,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Check if the name has more than three digits\n    has_digits = False\n    for char in file_name:\n        if char.isdigit():\n            has_digits = True\n            break\n    if has_digits:\n        return 'No'\n\n    # Check if there is exactly one dot '.'\n    if file_name.count('.')!= 1:\n        return 'No'\n\n    # Check if the substring before the dot is empty and starts with a letter from a-z\n    if not file_name.startswith(file_name.split('.')[0]):\n        return 'No'\n\n    # Check if the substring after the dot is one of these: ['txt', 'exe', 'dll']\n    if file_name.split('.')[1].lower() not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'",
        "test": "assert file_name_check(\"1example.dll\") == \"No\""
    },
    {
        "number": 142,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    if not lst:\n        return 0\n\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 == 0:\n            total += lst[i] ** 2\n        elif i % 3 == 0:\n            total += lst[i] ** 3\n        elif i % 4 == 0:\n            total += lst[i] ** 4\n\n    return total",
        "test": "assert sum_squares([]) == 0, \"The function should return 0 when given an empty list.\""
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Create an empty list to store the prime numbers of words\n    prime_numbers = []\n\n    # Iterate over each word in the sentence\n    for word in words:\n        # Check if the length of the word is prime\n        if all(num in word for num in \"23456789\"):\n            # If it is, append it to the list of prime numbers\n            prime_numbers.append(word)\n\n    # Sort the prime numbers in ascending order\n    prime_numbers.sort()\n\n    # Join the prime numbers into a single string and return it\n    return \" \".join(prime_numbers)",
        "test": "assert words_in_sentence(\"\") == \"\""
    },
    {
        "number": 144,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def simplify(x, n):\n    \"\"\"\n    Simplify an expression x * n.\n\n    :param x: A string representation of a fraction.\n    :param n: A string representation of a positive whole number.\n    :return: True if x * n evaluates to a whole number and False otherwise.\n    \"\"\"\n    # Split the fraction into numerator and denominator\n    numerator, denominator = x.split('/')\n\n    # Check if the denominator is zero\n    if denominator == '0':\n        return False\n\n    # Convert the denominator from string to an integer\n    denominator_int = int(denominator)\n\n    # Check if the numerator is a whole number\n    if numerator.isdigit():\n        # Convert the numerator from string to an integer\n        numerator_int = int(numerator)\n\n        # Check if the resulting integer is a power of 2\n        if (numerator_int & (numerator_int - 1)) == 0 and numerator_int <= denominator_int:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert simplify(\"7/10\", \"10/2\") == False"
    },
    {
        "number": 145,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    \n    # Create a dictionary to store the sum of each digit\n    digit_sums = {}\n    \n    # Iterate through the list of integers\n    for num in nums:\n        # Get the sum of the digits of the number\n        digit_sum = sum(int(digit) for digit in str(num))\n        \n        # Add the digit sum to the dictionary\n        if digit_sum in digit_sums:\n            digit_sums[digit_sum].append(num)\n        else:\n            digit_sums[digit_sum] = [num]\n    \n    # Iterate through the dictionary and sort the numbers based on their index in the original list\n    sorted_nums = []\n    for num, indices in digit_sums.items():\n        for index in indices:\n            sorted_nums.append(index)\n    \n    return sorted_nums",
        "test": "assert order_by_points([]) == []"
    },
    {
        "number": 146,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9):\n            count += 1\n    return count",
        "test": "assert specialFilter([0, 0, 0]) == 0, \"Test 3: incorrect output.\""
    },
    {
        "number": 147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n        and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if i < j < k and a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count",
        "test": "assert get_max_triples(30) == 5, \"The output of get_max_triples(30) should be 5\""
    },
    {
        "number": 148,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closer to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    for p in planets:\n        if (p!= planet1 and p!= planet2) and (planet1 in p.split() or planet2 in p.split()):\n            if p == planet1 or p == planet2:\n                continue\n            else:\n                return (p, )\n\n    return ()",
        "test": "assert bf(\"Mercury\", \"Neptune\") == (), \"Mercury and Neptune should not orbit each other\""
    },
    {
        "number": 149,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    result = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            result.append(word)\n    result.sort(key=len)\n    return result",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]"
    },
    {
        "number": 150,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    is_prime = True\n    for i in range(2, n):\n        if n % i == 0:\n            is_prime = False\n            break\n    if is_prime:\n        return x\n    else:\n        return y\n",
        "test": "assert x_or_y(7, 34, 12) == 34, \"The result of x_or_y(7, 34, 12) should be 34, not {}.\".format(x_or_y(7, 34, 12))"
    },
    {
        "number": 151,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def double_the_difference(lst):\n    # Check if the input list is empty\n    if not lst:\n        return 0\n    \n    # Initialize the sum variable\n    sum = 0\n    \n    # Loop through the list\n    for num in lst:\n        # Check if the number is odd and is not negative\n        if num % 2 == 1 and num > 0:\n            # Square the number and add it to the sum variable\n            sum += num**2\n            \n    return sum",
        "test": "assert double_the_difference([9, -2]) == 81"
    },
    {
        "number": 152,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    example:\n    \n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    \n    diff = [abs(guess[i] - game[i]) for i in range(len(game))]\n    return diff",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]"
    },
    {
        "number": 153,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    strongest_extension = ''\n    strongest_strength = -1\n    for extension in extensions:\n        extension_strength = (len(extension) - len(extension.lower()))\n        if extension_strength > strongest_strength:\n            strongest_extension = class_name + '.' + extension\n            strongest_strength = extension_strength\n    return strongest_extension",
        "test": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'"
    },
    {
        "number": 154,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    # Check if the second word is a substring of the first word\n    if a in b:\n        return True\n    # Check if the second word is a substring of any of its rotations of the first word\n    for i in range(len(b)):\n        rotated_word = b[i] + b[:i] + b[i+1:]\n        if rotated_word in a:\n            return True\n    return False",
        "test": "assert cycpattern_check(\"abcd\", \"abd\") == False"
    },
    {
        "number": 155,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n       even_odd_count(-12) ==> (1, 1)\n       even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)",
        "test": "assert even_odd_count(123) == (1, 2)"
    },
    {
        "number": 156,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_map = {1000:'m', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'xi', 5: 'v', 4: 'iv', 1: 'i'}\n    mini_roman = ''\n\n    while number > 0:\n        for value, symbol in roman_map.items():\n            if number >= value:\n                number -= value\n                mini_roman += symbol\n                break\n\n    return mini_roman.lower()",
        "test": "assert int_to_mini_roman(152) == 'clii', \"152 should be 'clii'\""
    },
    {
        "number": 157,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def right_angle_triangle(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False",
        "test": "assert right_angle_triangle(1, 2, 3) == False"
    },
    {
        "number": 158,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    unique_chars = set()\n    max_char_count = 0\n    max_word = \"\"\n\n    for word in words:\n        for char in word:\n            unique_chars.add(char)\n            if len(unique_chars) > max_char_count:\n                max_char_count = len(unique_chars)\n                max_word = word\n\n    if max_char_count == 0:\n        return \"\"\n    else:\n        return max_word",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\""
    },
    {
        "number": 159,
        "max_answer_num": 15,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # Return early if the remaining carrots are less than the required number\n    if remaining < need:\n        return [number, remaining]\n\n    # If there are enough remaining carrots, eat the required number and update the number of carrots\n    number += need\n    remaining -= need\n\n    # If there are no more remaining carrots, return [total_number_of_carrots, 0]\n    if remaining == 0:\n        return [number, 0]\n\n    # If there are still remaining carrots after eating the required number, return [total_number_of_carrots, remaining]\n    return [number, remaining]",
        "test": "assert eat(5, 6, 10) == [11, 4]"
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Check if operator list is empty or contains only one operator\n    if len(operator)!= 1:\n        raise ValueError(\"Operator list must have at least one operator\")\n    \n    # Check if operand list is empty or contains less than two operands\n    if len(operand) < 2:\n        raise ValueError(\"Operand list must have at least two operands\")\n    \n    # Get the operator character and its corresponding value\n    operator_char = operator[0]\n    operator_value = eval(operator_char)\n    \n    # Build the expression by evaluating the operator on the operands\n    expression = []\n    for operand_value in operand:\n        expression.append(operator_value(operand_value))\n    \n    # Return the evaluation of the expression\n    return expression",
        "test": "assert do_algebra(['*', '-'], [2, 3]) == 6"
    },
    {
        "number": 161,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.upper() if char.islower() else char.lower()\n        else:\n            result += char\n\n    return result",
        "test": "assert solve(\"ab\") == \"AB\""
    },
    {
        "number": 162,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash",
        "test": "assert string_to_md5('') == None"
    },
    {
        "number": 163,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    even_digits = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            even_digits.append(num)\n    even_digits.sort()\n    return even_digits",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]"
    }
]