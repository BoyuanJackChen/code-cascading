[
    {
        "number": 0,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if abs(diff) < threshold:\n            return True\n    return False",
        "test": "assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True",
        "num_ids": 2341,
        "indeed": false
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    \"\"\"\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n\n    # Initialize an empty list to store the separated groups\n    separated_groups = []\n\n    # Initialize a variable to keep track of the opening brace of the current group\n    open_brace_count = 0\n\n    # Loop through each character in the input string\n    for char in paren_string:\n        # If the character is an opening brace, increment the open brace count\n        if char == \"(\":\n            open_brace_count += 1\n        # If the character is a closing brace, decrement the open brace count\n        elif char == \")\":\n            open_brace_count -= 1\n\n        # If the open brace count becomes negative, append an empty group to the list\n        if open_brace_count < 0:\n            separated_groups.append(\"\")\n        # If the open brace count becomes zero, append the current group to the list\n        elif open_brace_count == 0:\n            separated_groups.append(char)\n\n    # Remove any empty groups from the list\n    separated_groups = [group for group in separated_groups if group]\n\n    return separated_groups",
        "test": "assert separate_paren_groups('( ) (( ))   (( )( ))') == ['()', '(())', '(()())']",
        "num_ids": 3576,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 130,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    # Find the largest integer and its decimal part\n    integer, decimal = divmod(number, 1)\n    # Truncate the integer part to the largest integer smaller than the given number\n    truncated_integer = int(integer)\n    # Return the decimal part of the truncated integer\n    return decimal",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 1472,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    The function takes a list of deposit and withdrawal operations on a bank account, and returns True if \n    at any point the balance of account falls below zero, and False otherwise.\n    \"\"\"\n    # Get the maximum value in the list\n    max_value = max(operations)\n\n    # Loop through each operation in the list\n    for operation in operations:\n        # Check if the operation is negative\n        if operation < 0:\n            # If it is, return True\n            return True\n\n        # Check if the balance of the account has reached zero\n        if operation > max_value:\n            # If it has, return True\n            return True\n\n    # If no operation is negative and the balance of the account has not reached zero, return False\n    return False",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 1846,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    mad = 0\n    for num in numbers:\n        mad += abs(num - mean)\n    return mad / len(numbers)",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
        "num_ids": 2620,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(0, len(numbers), 2):\n        result.append(numbers[i])\n        result.append(delimeter)\n    return result",
        "test": "assert intersperse([], 4) == []",
        "num_ids": 2009,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    :param paren_string: string representing multiple groups for nested parentheses separated by spaces.\n    :return: list of integers representing the deepest level of nesting of parentheses.\n    \"\"\"\n\n    # Split the string into groups of parentheses\n    groups = paren_string.split()\n\n    # Initialize a variable to store the deepest level of nesting of parentheses\n    deepest_level = 0\n\n    # Iterate through each group\n    for group in groups:\n        # If the group is an opening parenthesis, increment the deepest level\n        if group[0] == '(':\n            deepest_level += 1\n\n        # If the group is a closing parenthesis, decrement the deepest level\n        elif group[0] == ')':\n            deepest_level -= 1\n\n    # Return the deepest level of nesting of parentheses\n    return [deepest_level]",
        "test": "assert parse_nested_parens('((()))') == [1]",
        "num_ids": 2740,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    Args:\n        strings (List[str]): List of strings to filter\n        substring (str): The substring to search for\n    Returns:\n        List[str]: List of strings that contain the given substring\n    \"\"\"\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 1545,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n\n    total = sum(numbers)\n    product = 1\n    for num in numbers:\n        product *= num\n\n    return (total, product)",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 2022,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 110,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n\n    # Initialize the rolling max list with the first number in the list\n    rolling_max_list = [numbers[0]]\n\n    # Iterate over the remaining numbers in the list\n    for number in numbers[1:]:\n        # If the current number is greater than the current max in the rolling_max_list,\n        # add it to the rolling_max_list\n        if number > rolling_max_list[-1]:\n            rolling_max_list.append(number)\n        # If the current number is less than or equal to the current max in the rolling_max_list,\n        # replace it with the current number\n        else:\n            rolling_max_list[rolling_max_list.index(rolling_max_list[-1])] = number\n\n    return rolling_max_list",
        "test": "assert rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 2587,
        "indeed": false
    },
    {
        "number": 10,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Step 1: Find the longest postfix that is a palindrome\n    longest_palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:i+2]):\n            longest_palindrome = string[i:i+2]\n\n    # Step 2: Append the palindrome to the end of the string\n    result = ''\n    for i in range(len(string) - len(longest_palindrome) - 1, -1, -1):\n        result += longest_palindrome[i]\n\n    # Step 3: Reverse the result and return it\n    return result[::-1]",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 3020,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    # Convert strings to lists of integers\n    a_list = list(map(int, a))\n    b_list = list(map(int, b))\n\n    # Perform binary XOR operation between the two lists\n    result_list = [a_list[i] ^ b_list[i] for i in range(len(a_list))]\n\n    # Convert the result list to a string\n    result_str = ''.join(str(x) for x in result_list)\n\n    return result_str",
        "test": "assert string_xor('010', '110') == '100'",
        "num_ids": 2122,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n\n    Args:\n        strings (list): List of strings.\n\n    Returns:\n        Optional[str]: The longest string from the input list, or None in case the input list is empty.\n    \"\"\"\n\n    if not strings:\n        return None\n    \n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    \n    return longest_str",
        "test": "assert longest([]) == None",
        "num_ids": 1455,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)",
        "test": "assert greatest_common_divisor(25, 15) == 5",
        "num_ids": 1548,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 120,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes",
        "test": "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
        "num_ids": 1090,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\"Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\n    Args:\n        n (int): An integer that specifies the range of numbers to be generated.\n\n    Returns:\n        str: A string containing space-delimited numbers starting from 0 upto n inclusive.\n\n    \"\"\"\n    sequence = []\n    for i in range(n+1):\n        sequence.append(str(i))\n    return''.join(sequence)",
        "test": "assert string_sequence(0) == '0'",
        "num_ids": 1335,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from collections import Counter\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    counter = Counter(string.lower())\n    return len(counter)",
        "test": "assert count_distinct_characters('Jerry') == 4",
        "num_ids": 1595,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    result = []\n    current_beat = 0\n    current_note = None\n\n    for char in music_string:\n        if char == 'o':\n            if current_note is not None and current_beat == 0:\n                result.append(4)\n            elif current_note is not None and current_beat == 1:\n                result.append(2)\n            elif current_note is not None and current_beat == 2:\n                result.append(1)\n        elif char == '|':\n            if current_note is not None and current_beat == 0:\n                result.append(2)\n            elif current_note is not None and current_beat == 1:\n                result.append(1)\n        elif char == '.':\n            if current_note is not None and current_beat == 0:\n                result.append(1)\n            elif current_note is not None and current_beat == 1:\n                result.append(1)\n            elif current_note is not None and current_beat == 2:\n                result.append(1)\n            elif current_note is not None and current_beat == 3:\n                result.append(1)\n        elif char =='':\n            current_note = None\n        elif char == 'o':\n            if current_note is not None and current_beat == 0:\n                result.append(4)\n            elif current_note is not None and current_beat == 1:\n                result.append(2)\n            elif current_note is not None and current_beat == 2:\n                result.append(1)\n        elif char == '|':\n            if current_note is not None and current_beat == 0:\n                result.append(2)\n            elif current_note is not None and current_beat == 1:\n                result.append(1)\n        elif char == '.':\n            if current_note is not None and current_beat == 0:\n                result.append(1)\n            elif current_note is not None and current_beat == 1:\n                result.append(1)\n            elif current_note is not None and current_beat == 2:\n                result.append(1)\n            elif current_note is not None and current_beat == 3:\n                result.append(1)\n        elif char =='':\n            current_note = None\n        elif char == 'o':\n            if current_note is not None and current_beat == 0:\n                result.append(4)\n            elif current_note is not None and current_beat == 1:\n                result.append(2)\n            elif current_note is not None and current_beat == 2:\n                result.append(1)\n        elif char == '|':\n            if current_note is not None and current_beat == 0:\n                result.append(2)\n            elif current_note is not None and current_beat == 1:\n                result.append(1)\n        elif char == '.':\n            if current_note is not None and current_beat == 0:\n                result.append(1)\n            elif current_note is not None and current_beat == 1:\n                result.append(1)\n            elif current_note is not None and current_beat == 2:\n                result.append(1)\n            elif current_note is not None and current_beat == 3:\n                result.append(1)\n        elif char =='':\n            current_note = None\n        else:\n            current_note = ord(char) - ord('a') + 4\n\n    return result\n",
        "test": "assert parse_music('o o|.| o| o|.|.|.|.| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
        "num_ids": 3894,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    i = 0\n    while i < len(string) - len(substring) + 1:\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count",
        "test": "assert how_many_times('aaa', 'a') == 3",
        "num_ids": 1859,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n    # Split the input string into a list of numbers\n    nums = numbers.split()\n\n    # Sort the list of numbers in ascending order\n    nums.sort()\n\n    # Join the sorted numbers into a string separated by spaces\n    result =''.join(nums)\n\n    return result",
        "test": "assert sort_numbers('zero') == 'zero'",
        "num_ids": 2154,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must contain at least two elements\")\n\n    closest_numbers = []\n    smallest_distance = float('inf')\n    largest_distance = float('-inf')\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < smallest_distance:\n                smallest_distance = distance\n            if distance > largest_distance:\n                largest_distance = distance\n            closest_numbers.append((numbers[i], numbers[j]))\n\n    closest_numbers.sort(key=lambda x: (-x[0], x[1]))\n\n    return closest_numbers[0][0], closest_numbers[-1][1]",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)",
        "num_ids": 3869,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 120,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    delta = max_val - min_val\n    scaled_numbers = [(num - min_val) / delta for num in numbers]\n    return scaled_numbers",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 2674,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 1466,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)",
        "test": "assert strlen('') == 0, \"Wrong string length\"",
        "num_ids": 590,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n\n    max_divisor = n\n    smallest_divisor = 2\n    \n    # Loop through all odd numbers less than n\n    for i in range(3, n+1, 2):\n        # Check if i divides n evenly\n        if n % i == 0:\n            # Update max_divisor if smaller\n            if i > max_divisor:\n                max_divisor = i\n    \n    # Return max_divisor\n    return max_divisor",
        "test": "assert largest_divisor(15) == 5, \"Error: The correct output is not displayed. Please check the code.\"",
        "num_ids": 1507,
        "indeed": false
    },
    {
        "number": 25,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    i = 2\n    \n    while i*i <= n:\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n        \n        i += 1\n    \n    if n > 1:\n        factors.append(n)\n    \n    return factors",
        "test": "assert factorize(8) == [2, 2, 2], \"factorize(8) should return [2, 2, 2]\"",
        "num_ids": 2484,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    :param numbers: A list of integers\n    :return: A new list with duplicates removed\n    \"\"\"\n    # Create an empty dictionary to keep track of the frequency of each element\n    frequency = {}\n    for num in numbers:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    # Create a new list with only the unique elements\n    unique_numbers = []\n    for num in numbers:\n        if frequency[num] == 1:\n            unique_numbers.append(num)\n    \n    return unique_numbers",
        "test": "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1612,
        "indeed": true
    },
    {
        "number": 27,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def flip_case(string: str, index: int = 0) -> str:\n    \"\"\"\n    For a given string and index, flip the characters at the index to uppercase and lowercase.\n    If the index is equal to the length of the string, return the string.\n    Otherwise, recursively call the function with the next index.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    if index == len(string):\n        return string\n    else:\n        first_char = string[index]\n        return first_char.upper() + flip_case(string, index + 1)",
        "test": "assert flip_case('Hello') == 'hELLO'",
        "num_ids": 1218,
        "indeed": false
    },
    {
        "number": 28,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    result = \"\"\n    for s in strings:\n        result += s\n    return result",
        "test": "assert concatenate([]) == ''",
        "num_ids": 856,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 1530,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    :param l: a list of numbers\n    :return: a list of positive numbers from the original list\n    \"\"\"\n\n    return [num for num in l if num > 0]",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 2025,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\n    if n < 2:\n        return False\n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True\n",
        "test": "assert is_prime(6) is False",
        "num_ids": 1308,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x**2 +.... xs[n] * x**n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n\n    max_coeff = max(xs)\n    coeff_index = xs.index(max_coeff)\n\n    zero_point = xs[coeff_index]\n\n    return zero_point",
        "test": "assert find_zero([-6, 11, -6, 1]) == 1.0",
        "num_ids": 4258,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    if len(l) % 3!= 0:\n        raise ValueError(\"The list must have an even length\")\n    result = []\n    for i in range(0, len(l), 3):\n        temp = [l[j] for j in range(i, i+3)]\n        temp = sorted(temp)\n        result += temp\n    return result",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 3131,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 120,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    # Create a set to store unique elements\n    unique_set = set(l)\n    # Convert the set back to a list and return it\n    return sorted(list(unique_set))",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 1510,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if len(l) == 0:\n        return None\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return max(l)",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 1577,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \"\"\"\n    count = 0\n    for num in range(1, n+1):\n        if num % 11 == 0 and num % 13 == 0:\n            count += 1\n    return count",
        "test": "assert fizz_buzz(50) == 0, \"fizz_buzz(50) should return 0\"",
        "num_ids": 1731,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def sort_even(l: list) -> list:\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l = sorted(l, reverse=True)\n    l = list(set(l))\n    return l",
        "test": "assert sort_even([1, 2, 3]) == [1, 2, 3], \"Incorrect sort_even([1, 2, 3])\"",
        "num_ids": 2642,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string into groups of three characters.\n    groups = s.split(\" \")\n    # reverse the order of elements in each group.\n    return \" \".join(reversed(groups))",
        "test": "assert decode_cyclic(encode_cyclic(\"A\")) == \"A\"",
        "num_ids": 3195,
        "indeed": false
    },
    {
        "number": 39,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def prime_fib(n: int):\n    \"\"\"\n    Returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b",
        "test": "assert prime_fib(1) == 2",
        "num_ids": 1844,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    # Initialize a set to keep track of the distinct elements\n    distinct_set = set()\n\n    # Iterate through the list and add each element to the set if it's not already present\n    for num in l:\n        if num not in distinct_set:\n            distinct_set.add(num)\n\n    # Check if there are exactly three distinct elements in the set that sum up to zero\n    if len(distinct_set) == 3:\n        return True\n    else:\n        return False",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 3228,
        "indeed": false
    },
    {
        "number": 41,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    collisions = 0\n\n    # Calculate the number of collisions\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            if i > j:\n                collisions += 1\n\n    # Return the number of collisions\n    return collisions",
        "test": "assert car_race_collision(1) == 0, \"Expected 0 collisions, got: {}\".format(car_race_collision(1))",
        "num_ids": 4591,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x+1 for x in l]",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 2153,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    count = 0\n    for i in range(len(l) - 1):\n        if l[i] + l[i + 1] == 0:\n            count += 1\n            if count > 1:\n                return False\n    return count == 1\n",
        "test": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 3074,
        "indeed": false
    },
    {
        "number": 44,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x //= base\n    return result\n",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 1960,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 110,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n\n    return (0.5 * a * h)",
        "test": "assert triangle_area(5, 3) == 7.5, \"Incorrect area calculated.\"",
        "num_ids": 919,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.\n    Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)",
        "test": "assert fib4(0) == 0",
        "num_ids": 2013,
        "indeed": true
    },
    {
        "number": 47,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    # sort the list in ascending order\n    l.sort()\n    # get the middle index of the list\n    mid = n // 2\n    # if the length of the list is odd, return the middle element\n    if n % 2 == 1:\n        return l[mid]\n    # if the length of the list is even, return the average of the two middle elements\n    else:\n        return (l[mid - 1] + l[mid]) / 2",
        "test": "assert median([3, 1, 2, 4, 5]) == 3",
        "num_ids": 1806,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    # Convert string to lowercase and remove non-alphabetic characters\n    text = ''.join(c for c in text.lower() if c.isalpha())\n    # If the string is empty or has one character, it's a palindrome\n    if len(text) <= 1:\n        return True\n    # Split the string into two halves and check if each half is a palindrome\n    left, right = 0, len(text)-1\n    while left < right:\n        if text[left]!= text[right]:\n            return False\n        left += 1\n        right -= 1\n    # If all characters are palindromes, return True\n    return True\n",
        "test": "assert is_palindrome('') == True",
        "num_ids": 1346,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2 ** n % p",
        "test": "assert modp(3, 5) == 3, \"3 should be 3.\"",
        "num_ids": 2552,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])",
        "test": "assert decode_shift(encode_shift(\"abcdefghijklmnopqrstuvwxyz\")) == \"abcdefghijklmnopqrstuvwxyz\"",
        "num_ids": 2000,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 1677,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    # Initialize a variable to keep track of the number of elements below threshold\n    count = 0\n\n    # Iterate through each element in the list\n    for num in l:\n        # Increment the count if the number is below the threshold\n        if num < t:\n            count += 1\n\n        # If we've counted all elements below the threshold, return True\n        if count == len(l):\n            return True\n\n    # If we've iterated through the entire list and haven't returned True, return False\n    return False",
        "test": "assert below_threshold([1, 20, 4, 10], 5) == False",
        "num_ids": 1555,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y",
        "test": "assert add(2, 3) == 5, \"Error: add(2, 3) should return 5.\"",
        "num_ids": 727,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    # Convert strings to sets of characters\n    s0_set = set(s0)\n    s1_set = set(s1)\n    \n    # Check if sets have the same characters\n    if s0_set == s1_set:\n        return True\n    else:\n        return False",
        "test": "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
        "num_ids": 2048,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)",
        "test": "assert fib(1) == 1, \"Fib(1) should be 1, but it is not.\"",
        "num_ids": 1298,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack or stack[-1]!= \"<\":\n                return False\n            stack.pop()\n        elif char == \"[\":\n            stack.append(char)\n        elif char == \"]\":\n            if not stack or stack[-1]!= \"[\":\n                return False\n            stack.pop()\n    return not stack",
        "test": "assert correct_bracketing(\"<>\") == True",
        "num_ids": 2139,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            return False\n    return True",
        "test": "assert monotonic([1, 2, 4, 20]) == True",
        "num_ids": 1702,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from collections import Counter\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    common_elements = []\n    for element in l1:\n        if element in l2:\n            common_elements.append(element)\n    return sorted(common_elements)",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 2356,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return None\n    \n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            \n    if n > 1:\n        return n\n    \n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    \n    if n > 1:\n        return n\n    \n    return None",
        "test": "assert largest_prime_factor(2048) == 2, \"2048 is not a prime number.\"",
        "num_ids": 2124,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_to_n(n: int) -> int:\n    \"\"\"\n    A function to sum all numbers from 1 to n.\n    \"\"\"\n    # Initialize the sum to 0\n    total = 0\n    \n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # Add each number to the sum\n        total += i\n    \n    # Return the sum\n    return total",
        "test": "assert sum_to_n(30) == 465, \"sum_to_n(30) should return 465\"",
        "num_ids": 1642,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "test": "assert correct_bracketing(\"(\") == False, \"The first opening bracket is not paired with a corresponding closing bracket.\"",
        "num_ids": 1850,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n    n = len(xs)\n    if n < 3:\n        return []\n    else:\n        h = xs[n-1] / n\n        ys = [0] * n\n        ys[n-1] = 1\n        for i in range(n-2, -1, -1):\n            ys[i] = (ys[i+1] * i + h * xs[i]) / i\n        return ys",
        "test": "assert derivative([1, 2, 3]) == [2, 6]",
        "num_ids": 2156,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 0\n    else:\n        a, b, c = 0, 1, 1\n        for i in range(3, n + 1):\n            temp = a + b\n            a, b, c = b, temp, c + b\n        return c",
        "test": "assert fibfib(1) == 0, \"fibfib(1) is not 0\"",
        "num_ids": 2172,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    count = 0\n    word = s.lower()\n    for letter in word:\n        if letter in vowels:\n            count += 1\n    return count\n",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 1405,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n\n    if shift > len(str(x)):\n        return str(x)[-shift:] + str(x)[0:shift]\n    else:\n        return str(x)[shift:] + str(x)[0:shift]",
        "test": "assert circular_shift(12, 2) == \"12\"",
        "num_ids": 1763,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n\n    sum = 0\n\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n\n    return sum",
        "test": "assert digitSum(\"\") == 0, \"digitSum('') should return 0\"",
        "num_ids": 1922,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\", 3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\n    fruit_count = 0\n\n    for apple in s.split():\n        if apple.endswith(\"apple\"):\n            fruit_count += 1\n\n    orange_count = 0\n\n    for orange in s.split():\n        if orange.endswith(\"orange\"):\n            orange_count += 1\n\n    mango_count = fruit_count - orange_count\n\n    return mango_count",
        "test": "assert fruit_distribution(\"0 apples and 1 oranges\", 3) == 2",
        "num_ids": 3645,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def pluck(arr):\n    even_values = []\n    smallest_value = float('inf')\n    smallest_index = 0\n\n    for i, value in enumerate(arr):\n        if value % 2 == 0:\n            even_values.append(value)\n            if value < smallest_value:\n                smallest_value = value\n                smallest_index = i\n\n    if not even_values or len(arr) == 0:\n        return []\n\n    if len(even_values) == 1:\n        return [even_values[0], smallest_index]\n\n    return [min(even_values), smallest_index]",
        "test": "assert pluck([4, 2, 3]) == [2, 1]",
        "num_ids": 4418,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    max_freq = max(lst, key=lst.count)\n    return max_freq if max_freq!= 0 else -1",
        "test": "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3",
        "num_ids": 2552,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # Define the minimum value\n    min_val = lst[0]\n\n    # Sort the remaining integers from the minimum value to the end\n    for i in range(1, len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n\n    # Reverse the sorted list\n    return lst[::-1]",
        "test": "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]",
        "num_ids": 2798,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    \n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the area of the triangle using Heron's formula\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        \n        # Round the area to 2 decimal points\n        area = round(area, 2)\n        \n        return area\n    else:\n        return -1",
        "test": "assert triangle_area(1, 2, 10) == -1, \"The area of a triangle with sides 1, 2, and 10 is -1.\"",
        "num_ids": 1696,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    if len(q) == 1 and q[0] == q[0]:\n        return True\n    elif len(q) % 2 == 0 and q[-1] == q[-2]:\n        # Check for even length and odd last element\n        if q[0] + q[-1] > w:\n            return False\n        else:\n            return True\n    else:\n        return False",
        "test": "assert will_it_fly([3, 2, 3], 1) == False, \"it's balanced, but 3+2+3 is more than the maximum possible weight.\"",
        "num_ids": 3505,
        "indeed": false
    },
    {
        "number": 73,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    min_num_changes = float('inf')\n    for i in range(len(arr)):\n        curr_num = arr[i]\n        for j in range(i+1, len(arr)):\n            new_num = arr[j]\n            if new_num < curr_num:\n                min_num_changes = min(min_num_changes, j-i)\n    return min_num_changes",
        "test": "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1",
        "num_ids": 2966,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\n    # Check if the lists have the same length\n    if len(lst1)!= len(lst2):\n        return lst1\n\n    # Calculate the total number of chars\n    total_chars = sum(len(word) for word in lst1)\n\n    # Get the list with the total number of chars less than the other list\n    result = [word for word in lst2 if total_chars - len(word) > 0]\n\n    # Return the result\n    return result",
        "test": "assert total_match([], []) == []",
        "num_ids": 2887,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        for i in range(2, int(a**0.5) + 1):\n            if a % i == 0 and a % (i + 2) == 0:\n                return True\n        return False\n    else:\n        return True",
        "test": "assert is_multiply_prime(50) == False",
        "num_ids": 2941,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Returns True if x is a simple power of n and False otherwise.\"\"\"\n    if n == 1:\n        return True\n    elif n > 1 and x >= 1:\n        return is_simple_power(x, n - 1)\n    else:\n        return False",
        "test": "assert is_simple_power(1, 4) == True",
        "num_ids": 1527,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a == 1:\n        return True\n    elif a == 2:\n        return False\n    elif a == 3:\n        return True\n    elif a == 4:\n        return False\n    elif a < 0:\n        return False\n    elif a % 2 == 0:\n        return iscube(a // 2) * iscube(a // 2)\n    else:\n        return False",
        "test": "assert iscube(2) == False, \"iscube(2) failed\"",
        "num_ids": 1623,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Initialize a variable to store the count of primes\n    count = 0\n    \n    # Loop through each character in the hexadecimal number\n    for char in num:\n        # Convert the character to its decimal equivalent\n        dec_char = int(char, 16)\n        \n        # Check if the decimal equivalent is a prime number\n        if dec_char > 1 and dec_char > 1 and dec_char % 2!= 0:\n            count += 1\n    \n    # Return the count of primes\n    return count",
        "test": "assert hex_key(\"1077E\") == 2",
        "num_ids": 4586,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal & 1) + binary\n        decimal >>= 1\n    return 'db' + binary[::-1] + 'db'",
        "test": "assert decimal_to_binary(15) == \"db1111db\"",
        "num_ids": 2440,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_happy(s):\n    \"\"\"\n    This function takes a string as input and returns True if it is happy, and False otherwise.\n    \"\"\"\n    \n    # Define a set of all the letters in the string\n    letter_set = set(s)\n    \n    # Check if the length of the string is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Check if the string has any duplicate letters\n    if len(letter_set)!= len(set(s)):\n        return False\n    \n    # Check if all 3 consecutive letters are distinct\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    \n    # If all checks pass, the string is happy\n    return True",
        "test": "assert is_happy(\"a\") == False",
        "num_ids": 2417,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n    letter_grades = ['A+', 'B', 'C-', 'C', 'A-']\n    for i in range(len(grades)):\n        if grades[i] >= 4.0:\n            letter_grades[i] = 'A+'\n        elif grades[i] > 3.7:\n            letter_grades[i] = 'A'\n        elif grades[i] > 3.3:\n            letter_grades[i] = 'A-'\n        elif grades[i] > 3.0:\n            letter_grades[i] = 'B+'\n        elif grades[i] > 2.7:\n            letter_grades[i] = 'B'\n        elif grades[i] > 2.3:\n            letter_grades[i] = 'B-'\n        elif grades[i] > 2.0:\n            letter_grades[i] = 'C+'\n        elif grades[i] > 1.7:\n            letter_grades[i] = 'C'\n        elif grades[i] > 1.3:\n            letter_grades[i] = 'C-'\n        elif grades[i] > 1.0:\n            letter_grades[i] = 'D+'\n        elif grades[i] > 0.7:\n            letter_grades[i] = 'D'\n        else:\n            letter_grades[i] = 'D-'\n\n    return letter_grades\n",
        "test": "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']",
        "num_ids": 5522,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    if len(string) < 2:\n        return False\n    \n    for i in range(2, int(len(string)**0.5)+1):\n        if len(string) % i == 0:\n            return False\n    \n    return True",
        "test": "assert prime_length('abcdcba') == True",
        "num_ids": 1900,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\n    # Initialize a counter for the number of starts\n    count_starts = 0\n\n    # Initialize a counter for the number of ends\n    count_ends = 0\n\n    # Initialize a string to store the digits of n\n    n_str = str(n)\n\n    # Iterate over each character in the string\n    for i in range(len(n_str)):\n        # If the current character is a digit, increment the count of starts\n        if n_str[i].isdigit():\n            count_starts += 1\n\n        # If the current character is not a digit, decrement the count of ends\n        else:\n            count_ends -= 1\n\n        # If both counts are zero, we have found a start or end, so increment the result count\n        if count_starts == 0 and count_ends == 0:\n            count_starts = 1\n            count_ends = 1\n\n    # Return the final result count\n    return count_starts",
        "test": "assert starts_one_ends(1) == 1  # 1010",
        "num_ids": 1518,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n                Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n            a string of binary number\n    \"\"\"\n    \n    # Initialize variables\n    num = str(N)\n    sum_digits = 0\n    \n    # Iterate through each digit\n    for digit in num:\n        # Convert each digit to binary\n        binary_digit = bin(int(digit))[2:]\n        \n        # Add binary digit to sum_digits\n        sum_digits += int(binary_digit, 2)\n    \n    # Convert sum_digits to binary\n    binary_sum = bin(sum_digits)[2:]\n    \n    # Return binary sum\n    return binary_sum\n",
        "test": "assert solve(1000) == '1'",
        "num_ids": 2727,
        "indeed": true
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\n    # initialize a list to store the even elements\n    even_lst = []\n\n    # iterate over the list\n    for num in lst:\n        # check if the number is odd\n        if num % 2!= 0:\n            # add the even number to the even_lst\n            even_lst.append(num)\n\n    # return the final list\n    return even_lst",
        "test": "assert add([4, 2, 6, 7]) == 2",
        "num_ids": 1529,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n    # Remove all spaces and split the string into words\n    words = s.replace(\" \", \"\").split()\n\n    # Create a new string with the ordered words\n    ordered_str = \"\"\n    for word in words:\n        # Create a new string with the characters arranged in ascending order based on ascii value\n        ordered_word = \"\".join(sorted(word))\n        ordered_str += ordered_word + \" \"\n\n    # Remove the extra space at the end of the ordered string\n    ordered_str = ordered_str[:-1]\n\n    return ordered_str",
        "test": "assert anti_shuffle('Hi') == 'Hi'",
        "num_ids": 3063,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    \n    # Initialize empty list to store the sorted coordinates\n    sorted_coords = []\n    \n    # Sort rows in ascending order\n    rows = sorted(set([i for i in range(len(lst)) if isinstance(lst[i], list)]))\n    \n    # Iterate over each row and find x\n    for row in rows:\n        for i in range(len(lst[row])):\n            if isinstance(lst[row][i], int):\n                if lst[row][i] == x:\n                    sorted_coords.append((row, i))\n    \n    # Sort coordinates of the row in descending order\n    sorted_coords.sort(key=lambda x: (-x[0], -x[1]))\n    \n    return sorted_coords",
        "test": "assert get_row([], 1) == []",
        "num_ids": 4546,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    # Calculate the sum of all elements in the array\n    total_sum = sum(array)\n\n    # Sort the array in ascending order\n    if total_sum % 2 == 1:\n        array.sort()\n    else:\n        array.sort(reverse=True)\n\n    return array\n",
        "test": "assert sort_array([]) == []",
        "num_ids": 3754,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n\n    # Create a list of all the possible characters in the alphabet\n    alphabet = list('abcdefghijklmnopqrstuvwxyz')\n\n    # Create a dictionary to store the rotations for each letter in the alphabet\n    rotations = {\n        'a': 'bcdfghjklm',\n        'b': 'defghijkmno',\n        'c': 'ghijklmno',\n        'd': 'hijklm',\n        'e': 'klmnopqrs',\n        'f': 'lmno',\n        'g': 'nopqrst',\n        'h': 'qrst',\n        'i': 'uv',\n        'j': 'vwxyz',\n        'k': 'xyz',\n        'l': 'yz',\n       'm': 'z',\n        'n': 'a',\n        'o': 'b',\n        'p': 'c',\n        'q': 'd',\n        'r': 'e',\n       's': 'f',\n        't': 'g',\n        'u': 'h',\n        'v': 'i',\n        'w': 'j',\n        'x': 'k',\n        'y': 'l',\n        'z':'m',\n    }\n\n    # Initialize an empty string to store the encrypted string\n    encrypted_string = ''\n\n    # Loop through each character in the input string\n    for char in s:\n\n        # If the character is a letter, rotate it using the dictionary and add it to the encrypted string\n        if char in rotations:\n            encrypted_char = rotations[char]\n            encrypted_string += encrypted_char\n\n    # Return the encrypted string\n    return encrypted_string\n",
        "test": "assert encrypt('asdfghjkl') == 'ewhjklnop'",
        "num_ids": 2487,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    if len(lst) == 0:\n        return None\n    \n    smallest = lst[0]\n    second_smallest = float('inf')\n    for i in range(1, len(lst)):\n        if lst[i] < smallest:\n            second_smallest = smallest\n            smallest = lst[i]\n        elif lst[i] < second_smallest and lst[i]!= smallest:\n            second_smallest = lst[i]\n\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest",
        "test": "assert next_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 2425,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n        for word in sentence.split():\n            if word.lower() == \"i\" and sentence.split('.')[0].lower()!= \"i\":\n                boredoms += 1\n    return boredoms",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 1970,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    # Check if all numbers are integers\n    if not all(isinstance(num, int) for num in [x, y, z]):\n        return False\n    \n    # Check if the sum of the other two numbers is equal to the first number\n    if x + y == z:\n        return True\n    \n    return False",
        "test": "assert any_int(3, 2, 2) == False",
        "num_ids": 2545,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'THKS KS CGSCGG'\n    \"\"\"\n    \n    # convert message to lowercase\n    message = message.lower()\n    \n    # initialize an empty list to store encoded message\n    encoded = []\n    \n    # iterate over each character in message\n    for char in message:\n        \n        # if character is a letter, check if it is a vowel\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                # get the vowel that appears 2 places ahead of the current character\n                next_char = message[message.index(char) + 2]\n                \n                # if the next character is a vowel, replace it with the current character\n                if next_char.isalpha():\n                    encoded.append(next_char)\n                else:\n                    # if the next character is not a vowel, just append the current character\n                    encoded.append(char)\n            else:\n                # if the character is not a vowel, append the current character\n                encoded.append(char)\n        else:\n            # if the character is not a letter, append it as is\n            encoded.append(char)\n    \n    # return the encoded message\n    return ''.join(encoded)",
        "test": "assert encode('test') == 'TGST', 'The function should return \"TGST\" for \"test\".'",
        "num_ids": 3380,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def is_prime(n):\n    \"\"\"Returns True if n is a prime number, False otherwise.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"Returns the sum of the digits of n.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef largest_prime_sum(lst):\n    \"\"\"Finds the largest prime sum and returns the sum of its digits.\"\"\"\n    max_prime_sum = float('-inf')\n    largest_prime = None\n\n    for num in lst:\n        if is_prime(num):\n            prime_sum = sum_of_digits(num)\n            if prime_sum > max_prime_sum:\n                max_prime_sum = prime_sum\n                largest_prime = num\n\n    return max_prime_sum",
        "test": "assert skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25",
        "num_ids": 4388,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.isupper():\n            return False\n    return True\n",
        "test": "assert check_dict_case({\"a\": \"apple\", \"b\": \"banana\"}) == True",
        "num_ids": 2979,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    \n    # Initialize an empty list to store prime numbers less than n\n    primes = []\n    \n    # Traverse through the range of numbers from 2 to n\n    for num in range(2, n+1):\n        # Check if the number is prime\n        if num > 1:\n            is_prime = True\n            \n            # Traverse through the range of numbers from 2 to the square root of the number\n            for i in range(2, int(num**0.5)+1):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            \n            # If the number is prime, add it to the list of primes\n            if is_prime:\n                primes.append(num)\n                \n    return primes",
        "test": "assert count_up_to(11) == [2, 3, 5, 7], \"count_up_to(11) should return [2, 3, 5, 7]\"",
        "num_ids": 3003,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def multiply(a, b):\n    \"\"\"\n    Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14, -15) should return 20.\n    \"\"\"\n    result = 0\n    while b:\n        digit = b % 10\n        result += digit * (a // 10)\n        a %= 10\n        b //= 10\n    return result",
        "test": "assert multiply(19, 28) == 72, \"Multiply function does not return correct result\"",
        "num_ids": 2906,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count",
        "test": "assert count_upper('abcdefg') == 0",
        "num_ids": 1423,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    # Convert the value to a float, since we'll need it later\n    float_value = float(value)\n\n    # Get the absolute difference between the two integers\n    diff = abs(float_value - int(float_value))\n\n    # Round the difference to the nearest integer\n    rounded_diff = round(diff)\n\n    # Check if the difference is exactly 0\n    if rounded_diff == 0:\n        # If it is exactly 0, return the closest integer\n        closest_integer = round(float_value)\n    else:\n        # If it's not exactly 0, find the closest integer from the two\n        # integers that are farthest from zero\n        closest_integer = max(round(float_value - rounded_diff), 0)\n\n        # If the difference is negative, round it towards zero\n        if diff < 0:\n            closest_integer = max(closest_integer + rounded_diff, 0)\n\n    return closest_integer",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 4352,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    pile = []\n    for i in range(n):\n        stones = 0\n        if i % 2 == 0:\n            stones = 2 * i\n        else:\n            stones = 2 * i + 1\n        pile.append(stones)\n\n    return pile",
        "test": "assert make_a_pile(3) == [3, 5, 7], \"Expected: [3, 5, 7], but got: {}\".format(make_a_pile(3))",
        "num_ids": 2941,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Split the string by commas or spaces\n    words = s.split(',')\n    words = [word.strip() for word in words]\n\n    return words",
        "test": "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
        "num_ids": 1824,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\n    # Initialize the variable to store the result\n    result = -1\n\n    # Loop through all numbers in the range [x, y]\n    for num in range(x, y + 1):\n        # Check if the number is even and greater than 0\n        if num % 2 == 0 and num > 0:\n            # If the number is the biggest, update the result variable\n            if num > result:\n                result = num\n\n    # Return the result\n    return result",
        "test": "assert choose_num(13, 12) == -1",
        "num_ids": 2220,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    \n    # Check if n is greater than m\n    if n > m:\n        return -1\n    \n    # Calculate the total sum of the integers\n    total_sum = (n + m) // 2\n    \n    # Calculate the average\n    avg = str(round(total_sum))\n    \n    # Convert the binary string to decimal and round it to 2 decimal places\n    avg = round(int(avg, 2))\n    \n    return avg",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 2219,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def unique_digits(x):\n    \"\"\"\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    def is_even_digit(num):\n        return num % 2 == 0\n    \n    filtered_x = []\n    for num in x:\n        if num % 2!= 0 and num not in filtered_x:\n            filtered_x.append(num)\n    \n    return sorted(set(filtered_x))",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
        "num_ids": 2601,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n        -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n        -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n      \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n      \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n        -> sort arr -> [-1, 1, 55]\n        -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # check if the array is empty or contains any strange number\n    if len(arr) == 0 or any(x < 1 or x > 9 for x in arr):\n        return []\n    # sort the array and reverse it\n    arr.sort(reverse=True)\n    arr.reverse()\n    # replace each digit by its corresponding name\n    for i in range(len(arr)):\n        if arr[i] < 10:\n            arr[i] = \"One\"\n        elif arr[i] < 20:\n            arr[i] = \"Two\"\n        elif arr[i] < 30:\n            arr[i] = \"Three\"\n        elif arr[i] < 40:\n            arr[i] = \"Four\"\n        elif arr[i] < 50:\n            arr[i] = \"Five\"\n        elif arr[i] < 60:\n            arr[i] = \"Six\"\n        elif arr[i] < 70:\n            arr[i] = \"Seven\"\n        elif arr[i] < 80:\n            arr[i] = \"Eight\"\n        elif arr[i] < 90:\n            arr[i] = \"Nine\"\n    return arr",
        "test": "assert by_length([]) == []",
        "num_ids": 5588,
        "indeed": false
    },
    {
        "number": 106,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 1:\n        return [1]\n    else:\n        result = []\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                result.append(i * f(i-1)[-1])\n            else:\n                result.append(sum(range(1, i+1)))\n        return result",
        "test": "assert f(5) == [1, 2, 6, 24, 15], \"Function f(5) is not correct\"",
        "num_ids": 2362,
        "indeed": false
    },
    {
        "number": 107,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n\n    # Iterate through each number in the range (1, n)\n    for i in range(1, n+1):\n        # Check if the number is a palindrome\n        if str(i) == str(i)[::-1]:\n            # Check if the number is even\n            if i % 2 == 0:\n                count_even += 1\n            # Check if the number is odd\n            else:\n                count_odd += 1\n\n    # Return the tuple with the count of even and odd palindromes\n    return (count_even, count_odd)",
        "test": "assert even_odd_palindrome(3) == (1, 2)",
        "num_ids": 3379,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    result = 0\n    for num in arr:\n        if num >= 0:\n            result += 1\n    return result",
        "test": "assert count_nums([]) == 0",
        "num_ids": 2317,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "import random\n\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performing 2 right shift operations, non-decreasing order can\n                    be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n    \"\"\"\n    \n    # Check if the given array is empty\n    if not arr:\n        return True\n    \n    # Shuffle the array\n    random.shuffle(arr)\n    \n    # Perform 2 right shift operations\n    for _ in range(2):\n        # Traverse from the second last element to the first element\n        for i in range(1, len(arr)-1):\n            # Swap the elements at i and i+1\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n    \n    # Check if the array is sorted\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    \n    # If all conditions are satisfied, return True\n    return True",
        "test": "assert move_one_ball([3, 5, 4, 1, 2]) == False",
        "num_ids": 4758,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n    \n    # Check if the numbers are unique in lst1\n    if len(set(lst1))!= len(lst1):\n        return \"NO\"\n    \n    even_lst1 = [num for num in lst1 if num % 2 == 0]\n    even_lst2 = [num for num in lst2 if num % 2 == 0]\n    \n    # If the length of even_lst1 and even_lst2 are equal,\n    # then even_lst1 is a subset of even_lst2 and can be exchanged\n    if len(even_lst1) == len(even_lst2):\n        even_lst1 = sorted(even_lst1)\n        even_lst2 = sorted(even_lst2)\n        \n        # Check if the sorted even_lst1 is a subset of even_lst2\n        for i in range(len(even_lst1)):\n            if even_lst1[i]!= even_lst2[i]:\n                return \"NO\"\n        \n        # If the above condition is satisfied, then even_lst1 is a subset of even_lst2\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"",
        "num_ids": 3941,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \n    \"\"\"\n    # Convert the input string to lowercase and split it into a list of words\n    words = test.lower().split()\n    \n    # Create an empty dictionary to store the letter and its count\n    letter_count = {}\n    \n    # Loop through the list of words and increment the count of each letter in the dictionary\n    for word in words:\n        if word in letter_count:\n            letter_count[word] += 1\n        else:\n            letter_count[word] = 1\n    \n    # Create a list of the letters with the highest count in descending order\n    highest_count_letters = sorted(letter_count.keys(), key=lambda x: letter_count[x], reverse=True)\n    \n    # Return the dictionary with the letter(s) and count(s)\n    return dict(zip(highest_count_letters, letter_count.values()))",
        "test": "assert histogram('') == {}",
        "num_ids": 3356,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def reverse_delete(s, c):\n    \"\"\"\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    \"\"\"\n\n    # Create a set of characters in c that are not in s\n    s_set = set(c) - set(s)\n\n    # Create a new string that contains all the characters in s that are not in c\n    result = ''.join([x for x in s if x not in c])\n\n    # Check if the result string is palindrome\n    if result == result[::-1]:\n        return (result, True)\n    else:\n        return (result, False)",
        "test": "assert reverse_delete(\"abcdef\", \"b\") == ('acdef', False), \"The result should be ('acdef', False)\"",
        "num_ids": 2345,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    odd_count_list = []\n    for i in lst:\n        count = 0\n        for digit in i:\n            if digit % 2!= 0:\n                count += 1\n        odd_count_list.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return odd_count_list",
        "test": "assert odd_count(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]",
        "num_ids": 3761,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    # Initialize a variable to store the minimum sum\n    min_sum = float('inf')\n    \n    # Loop through the array and find the sum of the sub-arrays\n    for i in range(len(nums)):\n        # Initialize a variable to store the sum of the sub-array\n        sub_sum = 0\n        \n        # Loop through the array from the i-th element to the end\n        for j in range(i, len(nums)):\n            # Update the sum of the sub-array\n            sub_sum += nums[j]\n            \n            # If the sum is smaller than the current minimum sum,\n            # update the minimum sum\n            if sub_sum < min_sum:\n                min_sum = sub_sum\n    \n    # Return the minimum sum\n    return min_sum",
        "test": "assert minSubArraySum([-1, -2, -3]) == -6",
        "num_ids": 2059,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n    num_wells = len(grid)\n    num_rows = len(grid[0])\n\n    bucket_counts = [0] * num_rows\n    bucket_max_capacity = [0] * num_rows\n\n    max_lower = 0\n\n    for i in range(num_wells):\n        for j in range(num_rows):\n            if grid[i][j] == 1:\n                bucket_counts[j] += 1\n                if bucket_counts[j] > bucket_max_capacity[j]:\n                    bucket_max_capacity[j] = bucket_counts[j]\n                if j == 0 or bucket_counts[j] == bucket_max_capacity[j]:\n                    max_lower += 1\n\n    return max_lower",
        "test": "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6",
        "num_ids": 4430,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 20,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of non-negative integers according to the number of ones in their binary representation in ascending order.\n    For similar number of ones, sorts based on decimal value.\n\n    Args:\n    arr (list): An array of non-negative integers.\n\n    Returns:\n    list: A new sorted array of integers.\n    \"\"\"\n    # Convert the array to a string representation of their binary representation\n    binary_string = ''.join(['1' if i else '0' for i in arr])\n\n    # Convert the binary string to an integer\n    decimal_value = int(binary_string, 2)\n\n    # Sort the array based on the number of ones in its binary representation\n    sorted_arr = sorted(arr, key=lambda x: -bin(x).count('1'))\n\n    # Sort the array based on the decimal value\n    sorted_arr = sorted(arr, key=lambda x: x - decimal_value)\n\n    return sorted_arr",
        "test": "assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]",
        "num_ids": 3658,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Remove all spaces from the string\n    s = s.replace(' ', '')\n    # Initialize an empty list to store the selected words\n    selected_words = []\n    # Iterate through each character in the string\n    for i in range(len(s)):\n        # If the character is a consonant and its count of consonants is equal to n\n        if s[i] in 'bcdfghjklmnpqrstvwxyz' and s[i+n-1] in 'bcdfghjklmnpqrstvwxyz':\n            # Add the character to the selected_words list\n            selected_words.append(s[i:i+n])\n    return selected_words",
        "test": "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]",
        "num_ids": 3154,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def get_closest_vowel(word):\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    closest = ''\n\n    # Check if word is empty\n    if len(word) == 0:\n        return closest\n\n    # Traverse the word from right side\n    for i in range(len(word)-1, -1, -1):\n        if word[i].lower() in vowels:\n            closest = word[i]\n            break\n\n    return closest",
        "test": "assert get_closest_vowel(\"FULL\") == \"U\"",
        "num_ids": 2751,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def match_parens(lst):\n    # Initialize variables\n    left = 0\n    right = 0\n\n    # Iterate through the list\n    while right < len(lst):\n        # Check if there's a match for opening parentheses\n        if lst[right] == '(':\n            left += 1\n        # Check if there's a match for closing parentheses\n        elif lst[right] == ')':\n            if left == 0:\n                # If there are no opening parentheses, return 'No'\n                return 'No'\n            left -= 1\n\n        # Move to the next character\n        right += 1\n\n    # If there are no matching parentheses, return 'Yes'\n    return 'Yes'\n",
        "test": "assert match_parens([')', ')']) == 'No'",
        "num_ids": 2596,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    \n    # Count the number of elements in the array\n    n = len(arr)\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Initialize the maximum list with the first k elements\n    max_list = arr[:k]\n\n    # Initialize the maximum value as the first element of the array\n    max_value = arr[0]\n\n    # Loop through the remaining elements of the array\n    for i in range(k, n):\n        # If the current element is greater than the maximum value, update the maximum value\n        if arr[i] > max_value:\n            max_value = arr[i]\n\n        # If the current element is the maximum value, append it to the maximum list\n        elif arr[i] == max_value:\n            max_list.append(arr[i])\n\n    return max_list",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]",
        "num_ids": 3281,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def solution(lst):\n    \"\"\"\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 0\n    \"\"\"\n    even_sum = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum",
        "test": "assert solution([3, 3, 3, 3, 3]) == 9",
        "num_ids": 1711,
        "indeed": false
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n    # Find the first k elements and their digits\n    first_k_elements = arr[:k]\n    digits = ''.join([str(num) for num in first_k_elements])\n\n    # Calculate the sum of the elements with at most two digits\n    total_sum = 0\n    for i in range(k, len(arr)):\n        if arr[i].isdigit() and int(arr[i]) >= 0:\n            current_digit = int(arr[i])\n            total_sum += current_digit * (i - k + 1)\n\n    return total_sum",
        "test": "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24, \"The sum of the elements with at most two digits from the first k elements of arr should be 24.\"",
        "num_ids": 3181,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    if n <= 1:\n        return [n]\n\n    sequence = [n]\n    while n % 2 == 0:\n        n //= 2\n        sequence.append(n)\n\n    for i in range(2, len(sequence)):\n        if sequence[i] % 2!= 0:\n            sequence[i] = 3 * sequence[i] + 1\n\n    return sequence",
        "test": "assert get_odd_collatz(1) == [1]",
        "num_ids": 4652,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def valid_date(date):\n    \"\"\"Validates a given date string and returns True if the date is valid\n    otherwise False.\n\n    Args:\n        date (str): The date string to validate.\n\n    Returns:\n        bool: True if the date is valid, False otherwise.\n    \"\"\"\n    date_parts = date.split('-')\n    if len(date_parts)!= 3:\n        return False\n\n    try:\n        month = int(date_parts[0])\n        day = int(date_parts[1])\n        year = int(date_parts[2])\n\n        if month < 1 or month > 12:\n            return False\n\n        if day < 1 or day > 31:\n            return False\n\n        if month == 2 and day > 29:\n            return False\n\n        if month in [4, 6, 9, 11] and day < 1 or day > 30:\n            return False\n\n        if month == 1 and day < 1 or day > 28:\n            return False\n    except ValueError:\n        return False\n\n    return True",
        "test": "assert valid_date('15-01-2012') == False",
        "num_ids": 5268,
        "indeed": true
    },
    {
        "number": 125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def split_words(txt):\n    words = txt.lower().split()\n    no_spaces = len(words)\n    no_commas = len(words.count(','))\n    no_odd_alpha_ord = len([w for w in words if w.isalpha() and int(w) % 2!= 0])\n    if no_spaces == 1:\n        return words[0]\n    elif no_commas == 1:\n        return words[no_spaces - 1]\n    elif no_odd_alpha_ord == 1:\n        return words[no_spaces - 1]\n    elif no_spaces == 3:\n        return words[no_spaces - 2:]\n    else:\n        return 0",
        "test": "assert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 2212,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    if len(lst) <= 1:\n        return True\n\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n\n    return True\n",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 3172,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def is_prime(num):\n    \"\"\"Check if a number is prime or not\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n    \"\"\"\n    if (interval1[0] == interval2[0] and interval1[1] == interval2[1]):\n        return \"YES\"\n    elif not (interval1[0] <= interval2[1] and interval2[0] <= interval1[1]):\n        return \"NO\"\n    else:\n        if is_prime(abs(interval1[0] - interval2[1])):\n            return \"NO\"\n        else:\n            return \"YES\"",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\"",
        "num_ids": 3271,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def prod_signs(arr):\n    if len(arr) == 0:\n        return None\n\n    # initialize variables\n    max_mag = 0\n    prod_signs = 1\n\n    # iterate through the array\n    for num in arr:\n        # update max_mag and prod_signs\n        max_mag = max(max_mag, num)\n        prod_signs *= num\n\n    # return the product of all signs multiplied by magnitude\n    return prod_signs",
        "test": "assert prod_signs([0, 1]) == 0",
        "num_ids": 2241,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Initialize a table to store the minimum distance for each cell\n    distance = [[0] * len(grid[0]) for _ in range(len(grid))]\n\n    # Calculate the minimum distance for each cell\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            distance[i][j] = grid[i][j]\n            if i > 0:\n                distance[i][j] = min(distance[i][j], distance[i-1][j])\n            if j > 0:\n                distance[i][j] = min(distance[i][j], distance[i][j-1])\n            if i > 0 and j > 0:\n                distance[i][j] = min(distance[i][j], distance[i-1][j-1])\n\n    # Initialize an empty list to store the minimum path\n    min_path = []\n\n    # Initialize a variable to keep track of the current cell and its index\n    curr_index = (0, 0)\n    min_distance = distance[curr_index[0]][curr_index[1]]\n\n    # Calculate the minimum path and append the values\n    for i in range(1, k+1):\n        for j in range(1, len(grid[0])+1):\n            curr_index = (curr_index[0] + i-1, curr_index[1] + j-1)\n            min_distance = min(min_distance, distance[curr_index[0]][curr_index[1]])\n            min_path.append(grid[curr_index[0]][curr_index[1]])\n\n    return min_path",
        "test": "assert minPath([ [5,9,3], [4,1,6], [7,8,2]], 1) == [1]",
        "num_ids": 7911,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def tri(n):\n    \"\"\"\n    This function takes a non-negative integer n as input and returns a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    \"\"\"\n    tribonacci_sequence = [1, 1, 2]\n    for i in range(2, n+1):\n        tribonacci_sequence.append(tribonacci_sequence[i-1] + tribonacci_sequence[i-2] + tribonacci_sequence[i-3])\n    return tribonacci_sequence",
        "test": "assert tri(4) == [3], \"The function tri(4) should return [3] but it returns {}\".format(tri(4))",
        "num_ids": 2381,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def digits(n):\n    if n == 0:\n        return 0\n    else:\n        result = 0\n        while n > 0:\n            digit = n % 10\n            if digit % 2!= 0:\n                result += digit\n            n //= 10\n        return result",
        "test": "assert digits(1) == 1, \"The product of the odd digits of 1 is 1\"",
        "num_ids": 1595,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_nested(string):\n    stack = []\n\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            if stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n\n    if len(stack)!= 0:\n        return False\n\n    return True",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False",
        "num_ids": 1694,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function takes a list of numbers as input, and returns the sum of squared numbers in the given list,\n    rounded each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1, 2, 3] the output should be 14\n    For lst = [1, 4, 9] the output should be 98\n    For lst = [1, 3, 5, 7] the output should be 84\n    For lst = [1.4, 4.2, 0] the output should be 29\n    For lst = [-2.4, 1, 1] the output should be 6\n    \"\"\"\n\n    total_sum = 0\n\n    for num in lst:\n        num_squared = num ** 2\n        total_sum += int(round(num_squared))\n\n    return total_sum",
        "test": "assert sum_squares([1, 2, 3]) == 14",
        "num_ids": 2029,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    if not txt:\n        return False\n    if txt[-1].isalpha() and not txt[-1].isspace():\n        return False\n    return True",
        "test": "assert check_if_last_char_is_a_letter(\"apple pie\") == False",
        "num_ids": 2885,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    if not arr:\n        return -1\n    first = last = -1\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            last = i-1\n        else:\n            first = i\n    if first!= -1 and last!= -1:\n        max_index = last\n    else:\n        max_index = -1\n    return max_index",
        "test": "assert can_arrange([1,2,3]) == -1",
        "num_ids": 2365,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n\n    # Initialize largest and smallest variables\n    largest = None\n    smallest = None\n\n    # Loop through the list and update the largest and smallest\n    # variables as necessary\n    for num in lst:\n        if num < 0:\n            if largest is None or num > largest:\n                largest = num\n        elif num > 0:\n            if smallest is None or num < smallest:\n                smallest = num\n\n    # Return the tuple of largest and smallest integers\n    return (largest, smallest)",
        "test": "assert largest_smallest_integers([]) == (None, None)",
        "num_ids": 2569,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if isinstance(a, (int, float)):\n        if isinstance(b, (int, float)):\n            return max(a, b)\n        else:\n            return b\n    else:\n        if isinstance(b, (int, float)):\n            return a\n        else:\n            return b",
        "test": "assert compare_one(1, 2.5) == 2.5",
        "num_ids": 3571,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n\n    # Initialize variables to keep track of the number of positive even numbers and the sum of the even numbers\n    num_positive_even = 0\n    even_sum = 0\n\n    # Calculate the number of even numbers less than or equal to n\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_sum += i\n            num_positive_even += 1\n\n    # Check if the given number n can be written as the sum of exactly 4 positive even numbers\n    if num_positive_even == 0:\n        return False\n    elif num_positive_even == 1:\n        return even_sum == n\n    elif num_positive_even == 2:\n        return even_sum == 2*n\n    else:\n        return even_sum == 4*n",
        "test": "assert is_equal_to_sum_even(4) == False",
        "num_ids": 2022,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    # Base case: if n is 0 or 1, return 1\n    if n == 0 or n == 1:\n        return 1\n\n    # Recursive case: compute the factorial by multiplying n and the\n    # factorial of the previous number, minus one, and so on\n    factorial = n * special_factorial(n - 1)\n    return factorial",
        "test": "assert special_factorial(1) == 1",
        "num_ids": 1709,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace consecutive spaces with - \n    for i in range(len(text)-1):\n        if text[i] == \" \" and text[i+1] == \" \":\n            text = text[:i] + \"-\" + text[i+2:]\n    \n    return text",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 2801,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # check if file name is valid\n    num_digits = sum(1 for c in file_name if c.isdigit())\n    if num_digits > 3:\n        return 'No'\n    if '.' not in file_name:\n        return 'No'\n    if file_name.split('.')[-1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    # check if file name starts with a latin alphapet letter\n    if not (file_name[0].isalpha() or file_name[0].islower()):\n        return 'No'\n\n    # check if file name contains only latin alphapet letters\n    if not any(c.isalpha() for c in file_name):\n        return 'No'\n\n    return 'Yes'",
        "test": "assert file_name_check(\"1example.dll\") == \"No\"",
        "num_ids": 3933,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4!= 0:\n            lst[i] = lst[i] ** 3\n        elif i % 4 == 0 and i % 3!= 0:\n            lst[i] = lst[i] ** 4\n        total += lst[i]\n    return total",
        "test": "assert sum_squares([]) == 0",
        "num_ids": 2227,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if n is a prime number, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    Returns a string containing the words from the original sentence,\n    whose lengths are prime numbers.\n    \"\"\"\n    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    return \" \".join(prime_words)",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\"",
        "num_ids": 2997,
        "indeed": true
    },
    {
        "number": 144,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def simplify(x, n):\n    \"\"\"\n    Simplifies the fraction represented by x and n, represented as strings with the format\n    <numerator>/<denominator>, where both numerator and denominator are positive whole numbers.\n\n    Returns True if x * n evaluates to a whole number and False otherwise.\n    \"\"\"\n    # Remove any leading zeros from n\n    n = n.lstrip('0')\n\n    # Check if n is a valid fraction\n    numerator, denominator = map(int, n.split('/'))\n    if denominator == 0:\n        return False\n\n    # Simplify the fraction\n    numerator, denominator = simplify_fraction(numerator, denominator)\n\n    # Check if x * n evaluates to a whole number\n    if numerator == denominator:\n        return True\n    else:\n        return False\n\ndef simplify_fraction(numerator, denominator):\n    \"\"\"\n    Simplifies the fraction represented by numerator and denominator, represented as integers.\n    \"\"\"\n    while denominator == 0:\n        # If the denominator is 0, there are no more divisors left, so we can simplify the fraction\n        numerator //= 10\n        denominator = 10\n\n    while numerator == denominator:\n        # If the numerator is the same as the denominator, we can simplify the fraction\n        numerator //= 10\n\n    return numerator, denominator",
        "test": "assert simplify(\"1/6\", \"2/1\") == False",
        "num_ids": 2615,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # Create a dictionary to store the sum of digits and their index in the list\n    digit_dict = {}\n    for i, num in enumerate(nums):\n        digit_sum = sum(int(digit) for digit in str(num))\n        if digit_sum in digit_dict:\n            digit_dict[digit_sum].append(i)\n        else:\n            digit_dict[digit_sum] = [i]\n\n    # Sort the list of integers based on the sum of their digits\n    sorted_nums = []\n    for digit_sum in sorted(digit_dict.keys()):\n        sorted_nums.extend([nums[i] for i in digit_dict[digit_sum]])\n\n    return sorted_nums",
        "test": "assert order_by_points([]) == []",
        "num_ids": 3096,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2!= 0 and (num % 100) % 10!= 0:\n            count += 1\n    return count",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1",
        "num_ids": 1873,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    Returns the number of triples of the given array a where a[i] < a[j] < a[k]\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    :param n: a positive integer\n    :return: the number of triples\n    \"\"\"\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n\n    return count\n",
        "test": "assert get_max_triples(5) == 1, \"The number of triples is not correct.\"",
        "num_ids": 3204,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closer to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\n    # Check if the inputs are correct planet names\n    if planet1 not in [\"Jupiter\", \"Neptune\", \"Earth\", \"Mercury\", \"Venus\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n        return \"Invalid planet names\"\n    if planet2 not in [\"Jupiter\", \"Neptune\", \"Earth\", \"Mercury\", \"Venus\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n        return \"Invalid planet names\"\n\n    # Define a function to calculate the distance between two points\n    def distance(p1, p2):\n        lat1, lon1 = p1[0], p1[1]\n        lat2, lon2 = p2[0], p2[1]\n        R = 6371  # Radius of the earth in kilometers\n        dlat = math.radians(lat2 - lat1)\n        dlon = math.radians(lon2 - lon1)\n        a = math.sin(dlat/2) * math.sin(dlat/2) + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(dlon/2) * math.sin(dlon/2)\n        c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n        distance = R * c\n        return distance\n\n    # Initialize an empty list to store the planets with orbits between them\n    planets = []\n\n    # Get all planets with orbits between the two given planets\n    for planet in [planet1, planet2]:\n        if planet not in [\"Jupiter\", \"Neptune\", \"Earth\", \"Mercury\", \"Venus\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n            return \"Invalid planet names\"\n        planets_with_orbit = []\n        for other_planet in [planet1, planet2]:\n            if other_planet!= planet:\n                # Calculate the distance between the two planets\n                distance = distance((1980, 0), (2000, 0))\n                # Check if the distance between the two planets is less than a certain threshold\n                if distance < 1e-6:\n                    # If the distance is less than a certain threshold, add both planets to the list\n                    planets_with_orbit.append((planet, other_planet))\n        if planets_with_orbit:\n            planets.extend(planets_with_orbit)\n\n    # Sort the planets by proximity to the sun\n    planets.sort(key=lambda x: distance((x[0], x[1]), (0, 0)))\n\n    # Return the list of planets with orbits between them\n    return planets\n",
        "test": "assert bf(\"Earth\", \"Mercury\") == (\"Venus\"), \"Wrong planet names\"",
        "num_ids": 7763,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 20,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # Delete strings with odd length\n    lst = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort list by length of each word\n    lst = sorted(lst, key=lambda s: len(s))\n    \n    # Sort list by alphabetical order if two words have the same length\n    if lst[1:] == lst[:-1]:\n        lst = sorted(lst, key=str.lower)\n    \n    return lst",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 3204,
        "indeed": false
    },
    {
        "number": 150,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n\n    \"\"\"\n    # function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y",
        "test": "assert x_or_y(15, 8, 5) == 5",
        "num_ids": 1964,
        "indeed": true
    },
    {
        "number": 151,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    \n    # Create an empty set to store the numbers that are odd\n    odd_numbers = set()\n    \n    # Iterate over the list and check if each number is odd\n    for num in lst:\n        if not isinstance(num, int) or num < 0:\n            continue\n        \n        # If the number is odd, add it to the set of odd numbers\n        if num % 2!= 0:\n            odd_numbers.add(num)\n    \n    # Return the sum of squares of the numbers in the set\n    return sum(num**2 for num in odd_numbers)",
        "test": "assert double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 == 10",
        "num_ids": 2635,
        "indeed": true
    },
    {
        "number": 152,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def compare(game, guess):\n    \"\"\"\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n\n    # If the length of the arrays is not equal, then they cannot compare\n    if len(game)!= len(guess):\n        return \"Error: The arrays must have equal lengths.\"\n\n    # Create an empty array to store the result\n    result = []\n\n    # Compare each element of the arrays\n    for i in range(len(game)):\n        # If the guess is equal to the game, then it is correct\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            # Calculate the absolute difference between the guess and the game score\n            diff = abs(game[i] - guess[i])\n            result.append(diff)\n\n    return result",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 3668,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    strongest_extension = ''\n    for extension in extensions:\n        extension_name = extension.split('.')[0]\n        if len(extension_name) > len(strongest_extension):\n            strongest_extension = extension_name\n    return class_name + '.' + strongest_extension",
        "test": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'",
        "num_ids": 4518,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"Return True if the second word or any of its rotations is a substring in the first word\"\"\"\n    # check if b is a substring of a\n    if b in a:\n        # check if there are any rotations of b that are also substrings\n        rotations = set(b) & set(a)\n        if len(rotations) > 0:\n            return True\n        else:\n            return False\n    else:\n        return False",
        "test": "assert cycpattern_check(\"abcd\",\"abd\") == False",
        "num_ids": 3064,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if digit.isdigit():\n            digit = int(digit)\n            if digit % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)",
        "test": "assert even_odd_count(123) == (1, 2)",
        "num_ids": 1841,
        "indeed": true
    },
    {
        "number": 156,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    roman_map = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n\n    mini_roman = ''\n\n    while number > 0:\n        for key, value in roman_map.items():\n            if number >= key:\n                mini_roman += value\n                number -= key\n                break\n        else:\n            raise ValueError(\"Number is not in the Roman numeral system\")\n\n    return mini_roman.lower()\n",
        "test": "assert int_to_mini_roman(19) == 'xix'",
        "num_ids": 3411,
        "indeed": true
    },
    {
        "number": 157,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False",
        "test": "assert right_angle_triangle(1, 2, 3) == False",
        "num_ids": 2363,
        "indeed": false
    },
    {
        "number": 158,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    unique_chars = set()\n    max_length = 0\n    max_word = \"\"\n\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n            max_word = word\n        unique_chars.update(word)\n\n    return max_word if max_length > 0 else \"\"\n",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 2793,
        "indeed": false
    },
    {
        "number": 159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n    \n    Have fun :)\n    \"\"\"\n    if remaining < need:\n        return [number, remaining]\n    else:\n        return [number + remaining, need - remaining]",
        "test": "assert eat(4, 8, 9) == [12, 1]",
        "num_ids": 3438,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Check if operator list has at least one operator and operand list has at least two operands\n    if len(operator) < 1 or len(operand) < 2:\n        return \"Invalid operator or operand list.\"\n\n    # Initialize variables\n    result = 0\n    carry = 0\n\n    # Iterate through each element in operand list\n    for i in range(len(operand)):\n        # Check if i-th element is a valid operand\n        if not isinstance(operand[i], int):\n            return \"Invalid operand.\"\n\n        # Initialize variables for current operand and operator\n        current_operand = operand[i]\n        current_operator = operator[i]\n\n        # Perform the algebraic operation\n        if current_operator == \"+\":\n            result += current_operand + carry\n        elif current_operator == \"-\":\n            result += current_operand - carry - 1\n            carry = 1\n        elif current_operator == \"*\":\n            result += current_operand * carry\n        elif current_operator == \"//\":\n            quotient, remainder = divmod(current_operand, 1)\n            result += quotient * 10 ** (len(str(remainder)) - 1)\n            carry = 1\n        elif current_operator == \"**\":\n            result += current_operand ** (len(operator) - 1 - i)\n            carry = 1\n\n    # Handle the last element in operand list\n    if carry == 1:\n        result += carry\n\n    return result\n",
        "test": "assert do_algebra(['+', '*', '-'], [2, 3, 4]) == 6",
        "num_ids": 4722,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def reverse_case(s):\n    \"\"\"Reverses the case of the characters in the given string.\"\"\"\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    return result\n\ndef solve(s):\n    \"\"\"Returns the reversed case of the characters in the given string.\"\"\"\n    if not s:  # empty string\n        return s\n    if s[0].isalpha():  # first character is a letter\n        return reverse_case(s)\n    else:  # first character is not a letter\n        return s[::-1]\n\nprint(solve(\"1234\"))  # Output: \"4321\"\nprint(solve(\"ab\"))  # Output: \"AB\"\nprint(solve(\"#a@C\"))  # Output: \"#A@c\"",
        "test": "assert solve(\"ab\") == \"AB\"",
        "num_ids": 1683,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\n    if not text:\n        return None\n\n    md5_object = hashlib.md5()\n    md5_object.update(text.encode('utf-8'))\n    md5_hex = md5_object.hexdigest()\n    return md5_hex",
        "test": "assert string_to_md5(\"\") is None, \"Expected None, but got: {}\".format(string_to_md5(\"\"))",
        "num_ids": 2047,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    even_digits = []\n    num = a\n    while num <= b:\n        if num % 2 == 0:\n            even_digits.append(num)\n        num += 2\n    return even_digits",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 2037,
        "indeed": false
    }
]