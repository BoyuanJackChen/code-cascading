[
    {
        "number": 0,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False"
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return None\n            else:\n                stack.pop()\n                if len(stack) == 0:\n                    result.append(''.join(paren_string[len(result)*2:len(result)*2+len(stack)*2+1]))\n    return result\n",
        "test": "assert separate_paren_groups('(abc)def(gh(ij)kl)') == ['(abc)', '(def)', '(gh(ij)kl)']"
    },
    {
        "number": 2,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n\nprint(truncate_number(3.5))  # Output: 0.5",
        "test": "assert truncate_number(3.5) == 0.5"
    },
    {
        "number": 3,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
        "test": "assert below_zero([1, 2, 3]) == False"
    },
    {
        "number": 4,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    n = len(numbers)\n    mean = sum(numbers) / n\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    mad = sum(absolute_deviations) / n\n    return mad\n",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0"
    },
    {
        "number": 5,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n",
        "test": "assert intersperse([], 4) == []"
    },
    {
        "number": 6,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    groups = paren_string.split()\n    max_levels = []\n    for group in groups:\n        level = 0\n        max_level = 0\n        for paren in group:\n            if paren == '(':\n                level += 1\n                if level > max_level:\n                    max_level = level\n            elif paren == ')':\n                level -= 1\n        max_levels.append(max_level)\n    return max_levels",
        "test": "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]"
    },
    {
        "number": 7,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_list = []\n    for string in strings:\n        if substring in string:\n            filtered_list.append(string)\n    return filtered_list",
        "test": "assert filter_by_substring([], 'a') == []"
    },
    {
        "number": 8,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), 1)",
        "test": "assert sum_product([]) == (0, 1)"
    },
    {
        "number": 9,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_numbers = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        max_numbers.append(max_so_far)\n    return max_numbers",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]"
    },
    {
        "number": 10,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        prefix = string[:i]\n        if is_palindrome(prefix):\n            return prefix + string[::-1]\n    return string",
        "test": "assert make_palindrome('') == ''"
    },
    {
        "number": 11,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result",
        "test": "assert string_xor('000000', '000000') == '000000'"
    },
    {
        "number": 12,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string",
        "test": "assert longest([]) is None"
    },
    {
        "number": 13,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
        "test": "assert greatest_common_divisor(3, 5) == 1"
    },
    {
        "number": 14,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes",
        "test": "assert all_prefixes('a') == ['a']"
    },
    {
        "number": 15,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return''.join(map(str, range(n+1)))\n",
        "test": "assert string_sequence(0) == '0'"
    },
    {
        "number": 16,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of \"\"\"\n    distinct_characters = set(string.lower())  # convert string to lowercase and remove duplicates\n    return len(distinct_characters)\n",
        "test": "assert count_distinct_characters('xyzXYZ') == 3"
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    note_lengths = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    beats = []\n    current_length = 0\n    for note in music_string.split():\n        current_length += note_lengths[note]\n        beats.append(current_length)\n    return beats",
        "test": "assert parse_music('o o|.| o| o|.|.|.|.| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"
    },
    {
        "number": 18,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n        i += 1\n    return count",
        "test": "assert how_many_times('', 'a') == 0"
    },
    {
        "number": 19,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    # split the input string into a list of numbers\n    num_list = numbers.split()\n\n    # create a dictionary to map numbers to integers\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}\n\n    # sort the numbers in the list using the sorted() function and a lambda function as the key for sorting\n    sorted_list = sorted(num_list, key=lambda x: num_dict[x])\n\n    # join the sorted list of numbers into a string and return it\n    return''.join(sorted_list)",
        "test": "assert sort_numbers('zero') == 'zero'"
    },
    {
        "number": 20,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    \n    closest_pair = (numbers[0], numbers[1])\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < abs(closest_pair[0] - closest_pair[1]):\n                closest_pair = (numbers[i], numbers[j])\n    \n    return closest_pair",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 1.5]) == (1.0, 1.5)"
    },
    {
        "number": 21,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(num - min_val) / (max_val - min_val) for num in numbers]\n\n\nif __name__ == \"__main__\":\n    numbers = [1.0, 2.0, 3.0, 4.0, 5.0]\n    scaled_numbers = rescale_to_unit(numbers)\n    print(scaled_numbers)",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]"
    },
    {
        "number": 22,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda x: isinstance(x, int), values))",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]"
    },
    {
        "number": 23,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)",
        "test": "assert strlen('') == 0"
    },
    {
        "number": 24,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1",
        "test": "assert largest_divisor(15) == 5"
    },
    {
        "number": 25,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors",
        "test": "assert factorize(8) == [2, 2, 2]"
    },
    {
        "number": 26,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    return list(set(numbers))\n",
        "test": "assert remove_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4] # test case 2"
    },
    {
        "number": 27,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result",
        "test": "assert flip_case('Hello') == 'hELLO'"
    },
    {
        "number": 28,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)",
        "test": "assert concatenate([]) == ''"
    },
    {
        "number": 29,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    result = []\n    for s in strings:\n        if s.startswith(prefix):\n            result.append(s)\n    return result",
        "test": "assert filter_by_prefix([], 'a') == []"
    },
    {
        "number": 30,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def get_positive(l: list) -> list:\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num > 0]\n\nprint(get_positive([-1, 2, -4, 5, 6]))\nprint(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]"
    },
    {
        "number": 31,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\n    if n < 2:\n        return False\n\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n\n    return True",
        "test": "assert is_prime(6) == False"
    },
    {
        "number": 32,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2!= 0 or max(xs) == 0:\n        raise ValueError(\"List of coefficients should have even length and contain non zero largest coefficient.\")\n    for i in range(len(xs)):\n        if xs[i]!= 0 and i % 2 == 0:\n            return -xs[i+1]/(2*xs[i])\n",
        "test": "assert find_zero([0, 1]) == None # no zero point"
    },
    {
        "number": 33,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    sorted_list = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            sorted_list.append(l[i])\n        else:\n            sorted_list.append(l[i])\n    return sorted_list",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3]"
    },
    {
        "number": 34,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]"
    },
    {
        "number": 35,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    return max(l)",
        "test": "assert max_element([1, 2, 3]) == 3"
    },
    {
        "number": 36,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0) or (i % 13 == 0):\n            if '7' in str(i):\n                count += 1\n    return count",
        "test": "assert fizz_buzz(50) == 0"
    },
    {
        "number": 37,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    odd_indices = [i for i in range(len(l)) if i % 2 == 1]\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    sorted_even = sorted(l[i] for i in even_indices)\n    result = [None] * len(l)\n    for i in odd_indices:\n        result[i] = l[i]\n    for i in range(len(sorted_even)):\n        result[even_indices[i]] = sorted_even[i]\n    return result",
        "test": "assert sort_even([1, 2, 3]) == [1, 2, 3]"
    },
    {
        "number": 38,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def encode_cyclic(s: str) -> str:\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse the cycled elements in each group.\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "test": "assert decode_cyclic(encode_cyclic(\"aaaaaa\")) == \"aaaaaa\""
    },
    {
        "number": 39,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def is_prime(num: int) -> bool:\n    \"\"\"\n    Helper function to check if a given number is prime or not.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        a, b = 2, 3\n        for i in range(3, n + 1):\n            c = a + b\n            if is_prime(c):\n                a, b = b, c\n            else:\n                a, b = b, c - 1\n        return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
        "test": "assert prime_fib(1) == 2"
    },
    {
        "number": 40,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    n = len(l)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False"
    },
    {
        "number": 41,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def car_race_collision(n: int):\n    count = 0\n    for i in range(n):\n        if i % 2 == 0:\n            # car i is moving left to right\n            if i >= n // 2:\n                # car i is in the left half of the track\n                count += n - i - 1\n            else:\n                # car i is in the right half of the track\n                count += i\n        else:\n            # car i is moving right to left\n            if i < n // 2:\n                # car i is in the left half of the track\n                count += n - i - 1\n            else:\n                # car i is in the right half of the track\n                count += i\n    return count",
        "test": "assert car_race_collision(1) == 0"
    },
    {
        "number": 42,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def incr_list(l):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x+1 for x in l]",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]"
    },
    {
        "number": 43,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
        "test": "assert pairs_sum_to_zero([1, 3, -2, 1]) == False"
    },
    {
        "number": 44,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return \"0\"\n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    return result",
        "test": "assert change_base(8, 3) == '22'"
    },
    {
        "number": 45,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h",
        "test": "assert triangle_area(5, 3) == 7.5"
    },
    {
        "number": 46,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        fib4_list = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib4_list.append(fib4_list[i-1] + fib4_list[i-2] + fib4_list[i-3] + fib4_list[i-4])\n        return fib4_list[-1]",
        "test": "assert fib4(0) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    sorted_l = sorted(l)\n    if n % 2 == 0:\n        return (sorted_l[n//2-1] + sorted_l[n//2])/2\n    else:\n        return sorted_l[n//2]",
        "test": "assert median([3, 1, 2, 4, 5]) == 3"
    },
    {
        "number": 48,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]",
        "test": "assert is_palindrome('') == True"
    },
    {
        "number": 49,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    result = 1\n    for i in range(n):\n        result = (result * 2) % p\n    return result",
        "test": "assert modp(0, 101) == 1"
    },
    {
        "number": 50,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hello\" # line 1"
    },
    {
        "number": 51,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result",
        "test": "assert remove_vowels('') == ''"
    },
    {
        "number": 52,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    return all(num < t for num in l)",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True"
    },
    {
        "number": 53,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y",
        "test": "assert add(2, 3) == 5"
    },
    {
        "number": 54,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    # Convert the strings to sets and compare them\n    return set(s0) == set(s1)",
        "test": "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True, \"Test case 1 failed\""
    },
    {
        "number": 55,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)",
        "test": "assert fib(10) == 55"
    },
    {
        "number": 56,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "test": "assert correct_bracketing(\"<\") == False"
    },
    {
        "number": 57,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))",
        "test": "assert monotonic([1, 20, 4, 10]) == False"
    },
    {
        "number": 58,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]"
    },
    {
        "number": 59,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n",
        "test": "assert largest_prime_factor(2048) == 2, \"Incorrect result for 2048\""
    },
    {
        "number": 60,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return sum(range(1, n+1))\n\n\nprint(sum_to_n(30)) # Output: 465\nprint(sum_to_n(100)) # Output: 5050\nprint(sum_to_n(5)) # Output: 15\nprint(sum_to_n(10)) # Output: 55\nprint(sum_to_n(1)) # Output: 1",
        "test": "assert sum_to_n(30) == 465"
    },
    {
        "number": 61,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "test": "assert correct_bracketing(\"(\") == False"
    },
    {
        "number": 62,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    n = len(xs)\n    dxs = []\n    for i in range(1, n):\n        dxs.append(i*xs[i])\n    return dxs",
        "test": "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]"
    },
    {
        "number": 63,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert fibfib(0) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def vowels_count(s):\n    \"\"\"Returns the number of vowels in a string\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for c in s:\n        if c.lower() in vowels or (c.lower() == 'y' and s.lower().endswith('y')):\n            count += 1\n    return count",
        "test": "assert vowels_count(\"abcde\") == 2"
    },
    {
        "number": 65,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    num = str(x)\n    n = len(num)\n    if shift > n:\n        return num[::-1]\n    else:\n        return num[-shift:] + num[:-shift]",
        "test": "assert circular_shift(12, 1) == \"21\""
    },
    {
        "number": 66,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum",
        "test": "assert digitSum(\"\") == 0"
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    This function takes a string and an integer as input. The string represents the total number of \n    apples and oranges in the basket. The integer represents the total number of fruits in the basket. \n    The function returns the number of mango fruits in the basket.\n    \"\"\"\n    # Split the string into two parts, one for apples and one for oranges\n    parts = s.split()\n    # Get the number of apples and oranges from the string\n    apples = int(parts[0])\n    oranges = int(parts[2])\n    \n    # Calculate the number of mango fruits in the basket\n    mangoes = n - apples - oranges\n    \n    return mangoes",
        "test": "assert fruit_distribution(\"100 apples and 1 oranges\",120) == 19"
    },
    {
        "number": 68,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n    even_vals = [(val, index) for index, val in enumerate(arr) if val % 2 == 0]\n    if not even_vals:\n        return []\n\n    smallest_val, smallest_index = sorted(even_vals)[0]\n    return [smallest_val, smallest_index]",
        "test": "assert pluck([4,2,3]) == [2, 1]"
    },
    {
        "number": 69,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def search(lst):\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    for i in sorted(freq.keys(), reverse=True):\n        if i > 0 and freq[i] >= i:\n            return i\n    return -1",
        "test": "assert search([5, 5, 4, 4, 4]) == -1"
    },
    {
        "number": 70,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if not lst: # if the list is empty\n        return []\n    elif len(lst) == 1: # if the list contains only one element\n        return lst\n    else:\n        min_val = min(lst)\n        max_val = max(lst)\n        lst.remove(min_val)\n        lst.remove(max_val)\n        return [min_val] + strange_sort_list(lst) + [max_val]\n",
        "test": "assert strange_sort_list([]) == []"
    },
    {
        "number": 71,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a+b > c and b+c > a and c+a > b:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1",
        "test": "assert triangle_area(3, 4, 5) == 6.00"
    },
    {
        "number": 72,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def will_it_fly(q, w):\n    \"\"\"\n    Returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    \"\"\"\n    if is_palindrome(q) and sum(q) <= w:\n        return True\n    else:\n        return False\n\ndef is_palindrome(lst):\n    \"\"\"\n    Returns True if the list is palindromic, and False otherwise.\n    \"\"\"\n    return lst == lst[::-1]\n",
        "test": "assert will_it_fly([1, 2], 5) == False # 1+2 is less than the maximum possible weight, but it's unbalanced."
    },
    {
        "number": 73,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i]!= arr[n-i-1]:\n            count += 1\n    return count",
        "test": "assert smallest_change([1,2,3,5,4,7,9,6]) == 4"
    },
    {
        "number": 74,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\n    # if both lists are empty\n    if not lst1 and not lst2:\n        return []\n\n    # if either list is empty\n    if not lst1:\n        return lst2\n\n    if not lst2:\n        return lst1\n\n    # calculate total length of each list\n    total_len_lst1 = sum(len(s) for s in lst1)\n    total_len_lst2 = sum(len(s) for s in lst2)\n\n    # if total length of lst1 is less than total length of lst2\n    if total_len_lst1 < total_len_lst2:\n        return lst1\n\n    # if total length of lst1 is greater than total length of lst2\n    if total_len_lst1 > total_len_lst2:\n        return lst2\n\n    # if total length of lst1 is equal to total length of lst2\n    return lst1",
        "test": "assert total_match([], []) == []"
    },
    {
        "number": 75,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 2 or a > 99:\n        return False\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    count = 0\n    for prime in primes:\n        if a % prime == 0:\n            count += 1\n            if count == 3:\n                return True\n    return False",
        "test": "assert is_multiply_prime(50) == False"
    },
    {
        "number": 76,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int(log(x)/log(n))=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if n == 0:\n        return False\n    if x == 1:\n        return True\n    if x == n:\n        return True\n    return False",
        "test": "assert is_simple_power(2, 2) == True # n**int=2"
    },
    {
        "number": 77,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a == 0 or a < 0:\n        return True\n    else:\n        return int(a**(1/3))**3 == a",
        "test": "assert iscube(1) == True"
    },
    {
        "number": 78,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is prime, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    \"\"\"Count the number of hexadecimal digits that are primes.\"\"\"\n    count = 0\n    for c in num:\n        if c in \"0123456789ABCDEF\":\n            if is_prime(int(c, 16)):\n                count += 1\n    return count",
        "test": "assert hex_key(\"AB\") == 1"
    },
    {
        "number": 79,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = bin(decimal)[2:]  # convert decimal to binary and remove the '0b' prefix\n    return 'db' + binary + 'db'  # add the 'db' characters at the beginning and end of the string\n",
        "test": "assert decimal_to_binary(255) == \"db11111111db\""
    },
    {
        "number": 80,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n\n    for i in range(0, len(s)-2, 3):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    \n    return True",
        "test": "assert is_happy(\"a\") == False"
    },
    {
        "number": 81,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n                 GPA       |       Letter grade\n                  4.0              A+\n                > 3.7              A \n                 > 3.3             A- \n                 > 3.0             B+\n                 > 2.7             B \n                 > 2.3             B-\n                 > 2.0             C+\n                 > 1.7             C\n                 > 1.3             C-\n                 > 1.0             D+ \n                 > 0.7             D \n                 > 0.0             D-\n                  0.0             E\n    \"\"\"\n    letter_grades = []\n    for g in grades:\n        if g >= 4.0:\n            letter_grades.append('A+')\n        elif g >= 3.7:\n            letter_grades.append('A')\n        elif g >= 3.3:\n            letter_grades.append('A-')\n        elif g >= 3.0:\n            letter_grades.append('B+')\n        elif g >= 2.7:\n            letter_grades.append('B')\n        elif g >= 2.3:\n            letter_grades.append('B-')\n        elif g >= 2.0:\n            letter_grades.append('C+')\n        elif g >= 1.7:\n            letter_grades.append('C')\n        elif g >= 1.3:\n            letter_grades.append('C-')\n        elif g >= 1.0:\n            letter_grades.append('D+')\n        elif g >= 0.7:\n            letter_grades.append('D')\n        elif g >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades",
        "test": "assert numerical_letter_grade([3.0, 2.0, 1.0]) == ['B+', 'C+', 'D+']"
    },
    {
        "number": 82,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\"\"\"\n    length = len(string)\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True",
        "test": "assert prime_length('Hello') == True"
    },
    {
        "number": 83,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, 10**n):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count",
        "test": "assert starts_one_ends(1) == 1"
    },
    {
        "number": 84,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Convert N to binary string\n    binary = bin(N)[2:]\n    # Initialize sum to 0\n    digit_sum = 0\n    # Loop through each digit of the binary string\n    for digit in binary:\n        # Add the digit to the sum\n        digit_sum += int(digit)\n    # Return the sum as a binary string\n    return bin(digit_sum)[2:]",
        "test": "assert solve(0) == \"0\""
    },
    {
        "number": 85,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    even_indices = [i for i in range(len(lst)) if i % 2 == 0]\n    odd_indices = [i for i in range(len(lst)) if i % 2 == 1]\n    result = sum([lst[i] for i in odd_indices if lst[i] % 2 == 0])\n    return result",
        "test": "assert add([4, 2, 6, 7]) == 2"
    },
    {
        "number": 86,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n\n    # Split the string into words\n    words = s.split()\n\n    # Sort the characters in each word based on ascii value\n    for i in range(len(words)):\n        words[i] = ''.join(sorted(words[i]))\n\n    # Join the words back into a string\n    result =''.join(words)\n\n    return result",
        "test": "assert anti_shuffle('Hi') == 'Hi'"
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    if not lst:\n        return []\n    else:\n        result = []\n        for i in range(len(lst)):\n            for j in range(len(lst[i])):\n                if lst[i][j] == x:\n                    result.append((i, j))\n        return sorted(result, key=lambda x: (x[0], -x[1]))",
        "test": "assert get_row(["
    },
    {
        "number": 88,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) <= 1:\n        return array\n    \n    # Find the sum of the first and last index values\n    sum_of_first_and_last = array[0] + array[-1]\n    \n    # Check if the sum is odd or even\n    if sum_of_first_and_last % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)",
        "test": "assert sort_array([5]) == [5]"
    },
    {
        "number": 89,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            index = alphabet.index(char.lower())\n            new_index = (index + 2 * 2) % 26\n            encrypted_string += alphabet[new_index]\n        else:\n            encrypted_string += char\n    return encrypted_string",
        "test": "assert encrypt('hi') == 'lm', \"Expected 'lm' but got '{}'\".format(encrypt('hi'))"
    },
    {
        "number": 90,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of lst, or None if there is no such element.\n    \"\"\"\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest:\n            second_smallest = num\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest",
        "test": "assert next_smallest([]) == None"
    },
    {
        "number": 91,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_bored(S):\n    count = 0\n    for sentence in S.split('.'):\n        words = sentence.split()\n        if words and words[0] == 'I':\n            count += 1\n    return count",
        "test": "assert is_bored(\"\") == 0"
    },
    {
        "number": 92,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \"\"\"\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x + y == z or y + z == x or z + x == y)",
        "test": "assert any_int(5, 2, 7) == True"
    },
    {
        "number": 93,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    for letter in message:\n        if letter in vowels:\n            if letter.isupper():\n                encoded_message += chr((ord(letter) + 2 - ord('A')) % 26 + ord('A'))\n            else:\n                encoded_message += chr((ord(letter) + 2 - ord('a')) % 26 + ord('a'))\n        else:\n            encoded_message += letter.swapcase()\n    return encoded_message",
        "test": "assert encode('12345') == '12345'"
    },
    {
        "number": 94,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_prime(n):\n    \"\"\"\n    Check if a number is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"\n    Calculate the sum of digits of a number.\n    \"\"\"\n    return sum(int(i) for i in str(n))\n\ndef skjkasdkd(lst):\n    \"\"\"\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n    \"\"\"\n    max_prime = -1\n    for num in lst:\n        if is_prime(num):\n            if num > max_prime:\n                max_prime = num\n    if max_prime == -1:\n        return 0\n    return sum_of_digits(max_prime)",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10"
    },
    {
        "number": 95,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not dict:  # check if dictionary is empty\n        return False\n    first_key = next(iter(dict))  # get the first key\n    if isinstance(first_key, str):  # check if first key is string\n        if first_key.islower():\n            return all(isinstance(key, str) and key.islower() for key in dict)\n        elif first_key.isupper():\n            return all(isinstance(key, str) and key.isupper() for key in dict)\n    return False",
        "test": "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True"
    },
    {
        "number": 96,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\"\"\"\n    \n    # Create an empty list to store the prime numbers\n    primes = []\n    \n    # Iterate from 2 to n\n    for i in range(2, n):\n        # Check if i is prime\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n            \n    # Return the first n primes\n    return primes[:n]\n",
        "test": "assert count_up_to(0) == []"
    },
    {
        "number": 97,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    a_unit_digit = a % 10\n    b_unit_digit = b % 10\n    return a_unit_digit * b_unit_digit",
        "test": "assert multiply(148, 412) == 16"
    },
    {
        "number": 98,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count",
        "test": "assert count_upper('abcdefg') == 0"
    },
    {
        "number": 99,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    elif num < 0:\n        return int(num - 0.5)\n    else:\n        return int(num)\n",
        "test": "assert closest_integer(\"10\") == 10"
    },
    {
        "number": 100,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    levels = []\n    levels.append(n)\n    for i in range(1, n):\n        if n % 2 == 0:\n            levels.append(levels[i-1]+2)\n        else:\n            levels.append(levels[i-1]+1)\n    return levels\n\nprint(make_a_pile(3)) # Output: [3, 5, 7]",
        "test": "assert make_a_pile(4) == [4, 6, 8, 10]"
    },
    {
        "number": 101,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def words_string(s):\n    \"\"\"\n    This function takes a string of words separated by commas or spaces and returns an array of the words.\n    \"\"\"\n    # Split the string into words using either comma or space as the delimiter.\n    words = s.split(\", \") if \",\" in s else s.split()\n    # Remove any leading or trailing white space from each word.\n    words = [word.strip() for word in words]\n    return words",
        "test": "assert words_string(\"One two three four five six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"
    },
    {
        "number": 102,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    max_num = -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            if i > max_num:\n                max_num = i\n    return max_num if max_num!= -1 else -1",
        "test": "assert choose_num(13, 12) == -1"
    },
    {
        "number": 103,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    if n > m:\n        return -1\n\n    total = n + m\n    avg = total / 2\n\n    rounded_avg = round(avg)\n\n    binary_avg = bin(rounded_avg)[2:]\n\n    return \"0b\" + binary_avg",
        "test": "assert rounded_avg(1, 5) == \"0b11\""
    },
    {
        "number": 104,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique_list = []\n    for num in x:\n        has_even_digit = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            unique_list.append(num)\n    unique_list.sort()\n    return unique_list",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]"
    },
    {
        "number": 105,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    # Filter out integers outside of the range [1, 9]\n    arr = list(filter(lambda x: 1 <= x <= 9, arr))\n    \n    # Sort the remaining integers\n    arr.sort()\n    \n    # Reverse the sorted array\n    arr.reverse()\n    \n    # Replace each digit with its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [names[x-1] for x in arr]\n    \n    return arr",
        "test": "assert by_length([]) == []"
    },
    {
        "number": 106,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def f(n):\n    \"\"\"Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result",
        "test": "assert f(5) == [1, 2, 6, 24, 15]"
    },
    {
        "number": 107,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even_palindromes = 0\n    odd_palindromes = 0\n\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_palindromes += 1\n            else:\n                odd_palindromes += 1\n\n    return (even_palindromes, odd_palindromes)",
        "test": "assert even_odd_palindrome(3) == (1, 2)"
    },
    {
        "number": 108,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    count = 0\n    for num in arr:\n        sum_of_digits = sum(int(digit) > 0 for digit in str(abs(num)))\n        if sum_of_digits > 0:\n            count += 1\n    return count",
        "test": "assert count_nums([]) == 0"
    },
    {
        "number": 109,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def move_one_ball(arr):\n    n = len(arr)\n    if n == 0:\n        return True\n    # Iterate through the array, moving each element to its correct position.\n    for i in range(n):\n        # Check if the element can be moved to its correct position.\n        if arr[i] > i+1:\n            # Find the index where the correct position is.\n            j = i+1\n            while j < n and arr[j] > j:\n                j += 1\n            # Move the element to the correct position.\n            arr[j-1] = arr[i]\n            arr[i] = j-1\n    # Check if the array is sorted in non-decreasing order.\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            return False\n    return True",
        "test": "assert move_one_ball([3, 5, 4, 1, 2]) == False, \"Test case 2 failed\""
    },
    {
        "number": 110,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    if all(num % 2 == 0 for num in lst1):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\""
    },
    {
        "number": 111,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Split the string into a list of words\n    words = test.split()\n\n    # Create an empty dictionary to store the letter counts\n    letter_count = {}\n\n    # Loop through each word in the list\n    for word in words:\n        # Loop through each letter in the word\n        for letter in word:\n            # If the letter is already in the dictionary, increment the count\n            if letter in letter_count:\n                letter_count[letter] += 1\n            # If the letter is not in the dictionary, add it with a count of 1\n            else:\n                letter_count[letter] = 1\n\n    # Create a new dictionary to store the most repeated letters\n    max_letters = {}\n\n    # Loop through each key-value pair in the letter_count dictionary\n    for letter, count in letter_count.items():\n        # If the count is greater than or equal to the count of the most repeated letter(s),\n        # add the letter to the max_letters dictionary with its count\n        if count >= max(letter_count.values()):\n            max_letters[letter] = count\n\n    # Return the max_letters dictionary\n    return max_letters",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}"
    },
    {
        "number": 112,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def reverse_delete(s, c):\n    \"\"\"\n    Function to reverse delete characters from a string.\n\n    Args:\n    s: input string\n    c: string containing characters to be deleted\n\n    Returns:\n    A tuple containing the result string and True/False for the check.\n\n    \"\"\"\n\n    # Remove all characters from c that are present in s\n    for char in c:\n        s = s.replace(char, '')\n\n    # Check if the resulting string is palindrome or not\n    if s == s[::-1]:\n        return (s, True)\n    else:\n        return (s, False)\n",
        "test": "assert reverse_delete(\"abcde\",\"ae\") == ('bcd',False)"
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4 in the string 4 of the input.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1 in the string 1 of the input.\",\n     \"the number of odd elements 8 in the string 8 of the input.\"]\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        count = 0\n        for j in lst[i]:\n            if int(j) % 2 == 1:\n                count += 1\n        result.append(\"the number of odd elements {} in the string {} of the input.\".format(count, i))\n    return result",
        "test": "assert odd_count(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]"
    },
    {
        "number": 114,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Initialize variables to keep track of the minimum sum and current sum\n    min_sum = float('inf')\n    curr_sum = 0\n    \n    # Loop through the array and keep updating the current sum\n    for num in nums:\n        curr_sum += num\n        \n        # If the current sum is less than the minimum sum, update the minimum sum\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n        \n        # If the current sum becomes negative, reset it to zero\n        if curr_sum < 0:\n            curr_sum = 0\n    \n    return min_sum",
        "test": "assert minSubArraySum([1, 1, 1]) == 1"
    },
    {
        "number": 115,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def max_fill(grid, capacity):\n    n_rows = len(grid)\n    n_cols = len(grid[0])\n    bucket_count = 0\n    for i in range(n_rows):\n        for j in range(n_cols):\n            if grid[i][j] == 1:\n                bucket_count += math.ceil(grid[i][j] / capacity)\n    return bucket_count",
        "test": "assert max_fill([[0,0,0], [0,0,0]], 5) == 0"
    },
    {
        "number": 116,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr.sort(key=lambda x: (count_ones(x), x))\n    return arr\n\ndef count_ones(n):\n    \"\"\"\n    Returns the number of ones in the binary representation of a non-negative integer.\n    \"\"\"\n    count = 0\n    while n > 0:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count",
        "test": "assert sort_array([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]"
    },
    {
        "number": 117,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    # If s is empty, return an empty list\n    if not s:\n        return []\n\n    # Create a list of words from s\n    words = s.split()\n\n    # Create a list of all words that contain exactly n consonants\n    result = []\n    for word in words:\n        if sum(1 for c in word if c.isalpha() and c.lower() not in 'aeiou') == n:\n            result.append(word)\n\n    # Return the result in order these words appear in the string s\n    return result",
        "test": "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]"
    },
    {
        "number": 118,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n    \n    You may assume that the given string contains English letter only.\n    \n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    \n    vowels = \"aeiouAEIOU\"\n    closest_vowel = \"\"\n    last_vowel_index = -1\n    \n    # loop through the word from right to left\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            # if this vowel is the closest to last_vowel_index\n            if i > last_vowel_index:\n                closest_vowel = word[i]\n                last_vowel_index = i\n                \n    return closest_vowel",
        "test": "assert get_closest_vowel(\"FULL\") == \"U\""
    },
    {
        "number": 119,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    # helper function to check if a string is balanced\n    def is_balanced(s):\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack or stack.pop()!= '(':\n                    return False\n        return not stack\n    \n    # try all possible combinations of the two strings\n    for s1 in lst[0]:\n        for s2 in lst[1]:\n            # concatenate the two strings and check if it's balanced\n            result = s1 + s2\n            if is_balanced(result):\n                return 'Yes'\n    return 'No'",
        "test": "assert match_parens([')', ')']) == 'No'"
    },
    {
        "number": 120,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr = sorted(arr, reverse=True)\n    return arr[:k]",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]"
    },
    {
        "number": 121,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\"\"\"\n    result = 0\n    for i in range(0, len(lst)):\n        if i % 2 == 0: # check if the element is even\n            if lst[i] % 2!= 0: # check if the element is odd\n                result += lst[i]\n    return result",
        "test": "assert solution([5, 8, 7, 1]) == 12"
    },
    {
        "number": 122,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total_sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            total_sum += arr[i]\n    return total_sum",
        "test": "assert add_elements([111,21,3,4000,5,6,7,8,9], 4) == 24"
    },
    {
        "number": 123,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    collatz = [n]\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return sorted(set(filter(lambda x: x % 2!= 0, collatz)))",
        "test": "assert get_odd_collatz(5) == [1, 5] # Test case 1"
    },
    {
        "number": 124,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n    \n    for example: \n    valid_date('03-11-2000') => True\n    \n    valid_date('15-01-2012') => False\n    \n    valid_date('04-0-2040') => False\n    \n    valid_date('06-04-2020') => True\n    \n    valid_date('06/04/2020') => False\n    \"\"\"\n    # Split the date string by '-'\n    date_list = date.split('-')\n    \n    # Check if the length of the list is not equal to 3\n    if len(date_list)!= 3:\n        return False\n    \n    # Check if all the elements in the list are integers\n    if not all(elem.isdigit() for elem in date_list):\n        return False\n    \n    # Convert the elements in the list to integers\n    date_list = [int(elem) for elem in date_list]\n    \n    # Extract the month, day, and year from the list\n    month, day, year = date_list\n    \n    # Check if the month is within the valid range (1-12)\n    if not (1 <= month <= 12):\n        return False\n    \n    # Check if the year is a positive integer\n    if not isinstance(year, int):\n        return False\n    \n    # Check if the day is within the valid range for the given month\n    if month == 2:\n        # February has 29 days in a leap year\n        if not (1 <= day <= 29):\n            return False\n    elif month in [1, 3, 5, 7, 8, 10, 12]:\n        # months with 31 days\n        if not (1 <= day <= 31):\n            return False\n    else:\n        # months with 30 days\n        if not (1 <= day <= 30):\n            return False\n    \n    # If all the checks pass, the date is valid\n    return True",
        "test": "assert valid_date('03-11-2000') == True"
    },
    {
        "number": 125,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def split_words(txt):\n    # split on whitespace\n    words = txt.split()\n    if words:\n        return words\n    \n    # split on commas\n    words = txt.split(\",\")\n    if words:\n        return words\n    \n    # count odd-ordered lowercase letters\n    count = 0\n    for c in txt:\n        if c.islower():\n            o = ord(c)\n            if o % 2 == 1:\n                count += 1\n    return count",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]"
    },
    {
        "number": 126,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_sorted(lst):\n    # Check if list is empty or has only one element\n    if len(lst) <= 1:\n        return True\n    \n    # Check for duplicates\n    if len(set(lst))!= len(lst):\n        return False\n    \n    # Check if list is sorted in ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True",
        "test": "assert is_sorted([5]) == True"
    },
    {
        "number": 127,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if n is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef intersection(interval1, interval2):\n    \"\"\"\n    Determines whether the length of the intersection of the given intervals\n    is a prime number.\n    \"\"\"\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end1 or start2 > end2:\n        return \"NO\"\n    if start1 > start2:\n        start1, end1, start2, end2 = start2, end2, start1, end1\n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    if intersection_end - intersection_start == 0:\n        return \"NO\"\n    if is_prime(intersection_end - intersection_start):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\""
    },
    {
        "number": 128,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def prod_signs(arr):\n    if not arr:\n        return None\n    else:\n        magnitude_sum = sum([abs(num) for num in arr])\n        product_sign = 1\n        for num in arr:\n            if num > 0:\n                product_sign *= 1\n            elif num < 0:\n                product_sign *= -1\n        return magnitude_sum * product_sign",
        "test": "assert prod_signs([]) == None"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    \n    def get_neighbors(i, j):\n        \"\"\"\n        Returns the list of neighbors of cell (i, j) in the grid.\n        \"\"\"\n        res = []\n        if i > 0:\n            res.append((i-1, j))\n        if i < len(grid)-1:\n            res.append((i+1, j))\n        if j > 0:\n            res.append((i, j-1))\n        if j < len(grid[0])-1:\n            res.append((i, j+1))\n        return res\n    \n    def dfs(i, j, k, visited, path, res):\n        \"\"\"\n        Performs a DFS search from cell (i, j) in the grid.\n        \"\"\"\n        if k == 0:\n            res.append(path)\n            return\n        visited.add((i, j))\n        neighbors = get_neighbors(i, j)\n        for ni, nj in neighbors:\n            if (ni, nj) not in visited:\n                dfs(ni, nj, k-1, visited, path+[grid[ni][nj]], res)\n        visited.remove((i, j))\n    \n    # Perform DFS search from every cell in the grid.\n    n = len(grid)\n    res = []\n    for i in range(n):\n        for j in range(n):\n            visited = set()\n            dfs(i, j, k, visited, [grid[i][j]], res)\n    \n    # Sort the paths in lexicographical order and return the first one.\n    res.sort()\n    return res[0]\n",
        "test": "assert minPath([[1,2,3],[4,5,6],[7,8,9]], 4) == [1, 2, 3, 4]"
    },
    {
        "number": 130,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def tri(n):\n    \"\"\"Returns the first n + 1 numbers of the Tribonacci sequence.\"\"\"\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        tri_seq = [1, 1, 1]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                tri_seq.append(1 + i // 2)\n            else:\n                tri_seq.append(tri_seq[i-1] + tri_seq[i-2] + tri_seq[i+1])\n        return tri_seq",
        "test": "assert tri(1) == [1]"
    },
    {
        "number": 131,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    while n > 0:\n        digit = n % 10  # get the rightmost digit\n        if digit % 2 == 1:  # if it's odd, add it to the product\n            product *= digit\n        n //= 10  # remove the rightmost digit\n    return product if product!= 1 else 0  # 1 means all digits are even, return 0 instead",
        "test": "assert digits(4) == 0"
    },
    {
        "number": 132,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return bool(stack)",
        "test": "assert is_nested('[][]') == False"
    },
    {
        "number": 133,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    \"\"\"\n    result = 0\n    for num in lst:\n        result += math.ceil(num) ** 2\n    return result",
        "test": "assert sum_squares([1,2,3]) == 14"
    },
    {
        "number": 134,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False\n    \"\"\"\n    if txt == \"\":\n        return False\n    else:\n        last_char = txt[-1]\n        # Check if the last character is an alphabetical character\n        if last_char.isalpha():\n            # Check if the last character is at the end of a word\n            if last_char.isspace() or (last_char == \" \" and txt[-2].isspace()):\n                return False\n            else:\n                return True\n        else:\n            return False",
        "test": "assert check_if_last_char_is_a_letter(\"apple pi e \") == False"
    },
    {
        "number": 135,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                return j-1\n    return -1",
        "test": "assert can_arrange([1,2,3]) == -1"
    },
    {
        "number": 136,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    neg_integers = [x for x in lst if x < 0]\n    pos_integers = [x for x in lst if x > 0]\n\n    if neg_integers:\n        largest_neg = max(neg_integers)\n    else:\n        largest_neg = None\n\n    if pos_integers:\n        smallest_pos = min(pos_integers)\n    else:\n        smallest_pos = None\n\n    return (largest_neg, smallest_pos)",
        "test": "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)"
    },
    {
        "number": 137,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    \n    if isinstance(a, str) and isinstance(b, str):\n        if a.replace(',', '').replace('.', '').isdigit() and b.replace(',', '').replace('.', '').isdigit():\n            a_float = float(a.replace(',', '.'))\n            b_float = float(b.replace(',', '.'))\n            if a_float > b_float:\n                return a\n            elif b_float > a_float:\n                return b\n            else:\n                return None\n        else:\n            if a > b:\n                return a\n            elif b > a:\n                return b\n            else:\n                return None\n    elif isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None",
        "test": "assert compare_one(\"5,1\", \"6\") == \"6\""
    },
    {
        "number": 138,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    if n < 8:\n        return False\n    even_numbers = [2*i for i in range(1, n//2+1)]\n    if n in even_numbers:\n        return True\n    return sum(even_numbers) == n",
        "test": "assert is_equal_to_sum_even(4) == False"
    },
    {
        "number": 139,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n    \n    For example:\n    >>> special_factorial(4)\n    288\n    \n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial\n",
        "test": "assert special_factorial(0) == 1"
    },
    {
        "number": 140,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    if len(text.split()) > 1:\n        text = text.replace(\"  \", \"-\")\n        text = text.replace(\" \", \"_\")\n    else:\n        text = text.replace(\" \", \"_\")\n    return text",
        "test": "assert fix_spaces(\"Example\") == \"Example\""
    },
    {
        "number": 141,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # split the file name into its components\n    components = file_name.split(\".\")\n    \n    # check if the file name has more than three digits\n    if any(char.isdigit() for char in file_name):\n        return \"No\"\n    \n    # check if the file name has exactly one dot\n    if len(components)!= 2:\n        return \"No\"\n    \n    # check if the file name starts with a letter from the latin alphabet\n    if not components[0][0].isalpha():\n        return \"No\"\n    \n    # check if the file extension is valid\n    if components[1] not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    \n    # if all the conditions are met, return \"Yes\"\n    return \"Yes\"",
        "test": "assert file_name_check(\"1example.dll\") == 'No' # the name should start with a latin alphapet letter"
    },
    {
        "number": 142,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            lst[i] = lst[i] ** 3\n    for x in lst:\n        total += x\n    return total",
        "test": "assert sum_squares([]) == 0"
    },
    {
        "number": 143,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    Returns a string containing only the words from the given sentence whose lengths are prime numbers.\n    \"\"\"\n    words = sentence.split()\n    result = \"\"\n    for word in words:\n        if len(word) > 1 and is_prime(len(word)):\n            result += word + \" \"\n    return result.strip()",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\""
    },
    {
        "number": 144,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def simplify(x, n):\n    a, b = map(int, x.split('/'))\n    c, d = map(int, n.split('/'))\n    return (a * d) // b == c",
        "test": "assert simplify(\"1/6\", \"2/1\") == False"
    },
    {
        "number": 145,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    This function sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def calculate_points(num):\n        \"\"\"\n        A helper function to calculate the sum of digits of a given number\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    return sorted(nums, key=lambda num: (calculate_points(num), nums.index(num)))",
        "test": "assert order_by_points([]) == []"
    },
    {
        "number": 146,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 in [1, 3, 5, 7, 9] and num % 100 not in [11, 33, 55, 77, 99]:\n            count += 1\n    return count",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1"
    },
    {
        "number": 147,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count",
        "test": "assert get_max_triples(5) == 1"
    },
    {
        "number": 148,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def bf(planet1, planet2):\n    \"\"\"\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    \"\"\"\n    \n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    index1 = planets.index(planet1) if planet1 in planets else None\n    index2 = planets.index(planet2) if planet2 in planets else None\n    \n    if index1 is None or index2 is None:\n        return tuple()\n    \n    bf_planets = tuple(planets[index1+1:index2])\n    \n    return bf_planets",
        "test": "assert bf(\"Pluto\", \"Uranus\") == ()"
    },
    {
        "number": 149,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # First, remove all odd-length words from the list\n    lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # Next, sort the list by length and alphabetically by word\n    lst.sort(key=lambda x: (len(x), x))\n    \n    # Return the sorted list\n    return lst",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]"
    },
    {
        "number": 150,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    prime = True\n    for i in range(2, n):\n        if n % i == 0:\n            prime = False\n            break\n    if prime:\n        return x\n    else:\n        return y",
        "test": "assert x_or_y(7, 34, 12) == 34"
    },
    {
        "number": 151,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\n\n    If the input list is empty, return 0.\n    \"\"\"\n\n    # Initialize the sum to 0\n    sum_of_squares = 0\n\n    # Loop through each number in the list\n    for num in lst:\n        # If the number is negative or not an integer, ignore it\n        if num < 0 or not isinstance(num, int):\n            continue\n        \n        # If the number is odd, add its square to the sum\n        if num % 2!= 0:\n            sum_of_squares += num ** 2\n\n    # Return the sum of squares of odd numbers\n    return sum_of_squares",
        "test": "assert double_the_difference([1, 3, 2, 0]) == 10"
    },
    {
        "number": 152,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \"\"\"\n\n    result = []\n\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(guess[i] - game[i]))\n\n    return result",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]"
    },
    {
        "number": 153,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n\n    # Initialize the strongest extension's strength as negative infinity\n    strongest_strength = float('-inf')\n\n    # Initialize the strongest extension as None\n    strongest_extension = None\n\n    # Loop through all the extensions in the list\n    for extension in extensions:\n        # Calculate the strength of the extension\n        cap_count = sum(1 for char in extension if char.isupper())\n        sm_count = sum(1 for char in extension if char.islower())\n        strength = cap_count - sm_count\n\n        # Check if the strength of the extension is greater than the current strongest strength\n        if strength > strongest_strength:\n            # If it is, update the strongest strength and the strongest extension\n            strongest_strength = strength\n            strongest_extension = extension\n\n    # Return the class name followed by the strongest extension's name\n    return class_name + '.' + strongest_extension",
        "test": "assert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'"
    },
    {
        "number": 154,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    \"\"\"\n    if b in a:\n        return True\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False",
        "test": "assert cycpattern_check(\"abcd\",\"abd\") == False"
    },
    {
        "number": 155,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    count_even = 0\n    count_odd = 0\n    \n    if num < 0:\n        num = abs(num)\n    \n    while num!= 0:\n        if num % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        \n        num = num // 10\n        \n    return (count_even, count_odd)",
        "test": "assert even_odd_count(123) == (1, 2)"
    },
    {
        "number": 156,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral_map = {\n        1000:'m',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n    roman_numeral = ''\n    for i in roman_numeral_map:\n        while number >= i:\n            roman_numeral += roman_numeral_map[i]\n            number -= i\n    return roman_numeral.lower()\n",
        "test": "assert int_to_mini_roman(19) == 'xix'"
    },
    {
        "number": 157,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or 90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2:\n        return True\n    else:\n        return False",
        "test": "assert right_angle_triangle(3, 4, 5) == True, \"Test 1 failed\""
    },
    {
        "number": 158,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def find_max(words):\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n        count = len(set(word))\n        if count > max_count or (count == max_count and word < max_word):\n            max_word = word\n            max_count = count\n    return max_word",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\""
    },
    {
        "number": 159,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\n    if remaining < need:\n        return [remaining + number, 0]\n\n    else:\n        eaten = number + remaining // need\n        remaining = remaining % need\n        return [eaten, remaining]\n",
        "test": "assert eat(2, 11, 5) == [7, 0]"
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n\n    # initialize result to the first operand\n    result = operand[0]\n\n    # loop through the remaining operands and operators\n    for i in range(1, len(operator)):\n        # perform the operation on the result and the current operand\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '//':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n\n    # return the final result\n    return result",
        "test": "assert do_algebra(['+', '-', '*', '/', '^'], [10, 2, 3, 4, 5]) == 261024"
    },
    {
        "number": 161,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solve(s):\n    # Check if the string contains letters\n    has_letters = False\n    for c in s:\n        if c.isalpha():\n            has_letters = True\n            break\n\n    # If there are no letters, reverse the string\n    if not has_letters:\n        return s[::-1]\n\n    # Otherwise, reverse the case of each letter\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            result += c.swapcase()\n        else:\n            result += c\n\n    return result",
        "test": "assert solve(\"1234\") == \"4321\""
    },
    {
        "number": 162,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\n    if text == '':\n        return None\n\n    md5 = hashlib.md5()\n    md5.update(text.encode('utf-8'))\n\n    return md5.hexdigest()",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'"
    },
    {
        "number": 163,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    even_digits = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            even_digits.append(num)\n    return even_digits",
        "test": "assert generate_integers(1, 100)!= [2, 4, 6, 8]"
    }
]