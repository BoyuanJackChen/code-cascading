[
    {
        "number": 0,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
        "num_ids": 1321
    },
    {
        "number": 1,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    \"\"\"\n    groups = []\n    current_group = ''\n    depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n            current_group += char\n        elif char == ')':\n            depth -= 1\n            current_group += char\n            if depth == 0:\n                groups.append(current_group)\n                current_group = ''\n        elif char!='':\n            current_group += char\n\n    return groups",
        "test": "assert separate_paren_groups('(())') == ['(())']",
        "num_ids": 2032
    },
    {
        "number": 2,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 862
    },
    {
        "number": 3,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 810
    },
    {
        "number": 4,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(numbers)\n\nprint(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]))  # Output: 1.0",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
        "num_ids": 1529
    },
    {
        "number": 5,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers' \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers)-1:\n            result.append(delimeter)\n    return result",
        "test": "assert intersperse([], 4) == []",
        "num_ids": 1021
    },
    {
        "number": 6,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    groups = paren_string.split()\n    levels = []\n    for group in groups:\n        level = 0\n        max_level = 0\n        for char in group:\n            if char == \"(\":\n                level += 1\n                if level > max_level:\n                    max_level = level\n            elif char == \")\":\n                level -= 1\n        levels.append(max_level)\n    return levels",
        "test": "assert parse_nested_parens('') == []",
        "num_ids": 1398
    },
    {
        "number": 7,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    return [string for string in strings if substring in string]",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 1002
    },
    {
        "number": 8,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    total = sum(numbers)\n    product = 1\n    for num in numbers:\n        product *= num\n    return (total, product)\n",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 870
    },
    {
        "number": 9,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    max_so_far = numbers[0]\n    result.append(max_so_far)\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n        result.append(max_so_far)\n    return result",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
        "num_ids": 1537
    },
    {
        "number": 10,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    else:\n        for i in range(len(string), -1, -1):\n            if is_palindrome(string[:i]):\n                return string[:i] + string[::-1]\n    return ''",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 1370
    },
    {
        "number": 11,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = \"\"\n    for i in range(max(len(a), len(b))):\n        if i < len(a) and i < len(b):\n            result += str(int(a[i]) ^ int(b[i]))\n        elif i < len(a):\n            result += a[i]\n        else:\n            result += b[i]\n    return result",
        "test": "assert string_xor('010', '110') == '100'",
        "num_ids": 1286
    },
    {
        "number": 12,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_len = 0\n    longest_str = None\n    for string in strings:\n        if len(string) > max_len:\n            max_len = len(string)\n            longest_str = string\n    return longest_str",
        "test": "assert longest([]) is None",
        "num_ids": 757
    },
    {
        "number": 13,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b \"\"\"\n    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n\nprint(greatest_common_divisor(3, 5)) # Output: 1\nprint(greatest_common_divisor(25, 15)) # Output: 5",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 827
    },
    {
        "number": 14,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes",
        "test": "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
        "num_ids": 821
    },
    {
        "number": 15,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return \" \".join(str(i) for i in range(n+1))",
        "test": "assert string_sequence(0) == \"0\"",
        "num_ids": 999
    },
    {
        "number": 16,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \"\"\"\n    distinct_chars = set()\n    for char in string:\n        distinct_chars.add(char.lower())\n    return len(distinct_chars)",
        "test": "assert count_distinct_characters('xyzXYZ') == 3",
        "num_ids": 693
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    beats = []\n    for char in music_string:\n        if char == 'o':\n            beats.append(4)\n        elif char == 'o|':\n            beats.append(2)\n        elif char == '.|':\n            beats.append(1)\n    return beats",
        "test": "assert parse_music('') == []",
        "num_ids": 3028
    },
    {
        "number": 18,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string)-len(substring)+1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 954
    },
    {
        "number": 19,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    # Split the string into a list of numbers\n    num_list = numbers.split()\n    \n    # Sort the numbers in ascending order using the sorted() function\n    sorted_list = sorted(num_list)\n    \n    # Join the sorted list into a string and return it\n    return \" \".join(sorted_list)",
        "test": "assert sort_numbers(\"\") == \"\"",
        "num_ids": 1296
    },
    {
        "number": 20,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0]) == (1.0, 2.0)",
        "num_ids": 1656
    },
    {
        "number": 21,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [((x - min_num) / (max_num - min_num)) for x in numbers]",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 2061
    },
    {
        "number": 22,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 899
    },
    {
        "number": 23,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string \"\"\"\n    return len(string)",
        "test": "assert strlen('') == 0",
        "num_ids": 423
    },
    {
        "number": 24,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    divisor = 2\n    while divisor < n:\n        if n % divisor == 0:\n            n //= divisor\n        else:\n            divisor += 1\n    return n",
        "test": "assert largest_divisor(25) == 5",
        "num_ids": 687
    },
    {
        "number": 25,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    i = 2\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors",
        "test": "assert factorize(8) == [2, 2, 2]",
        "num_ids": 1144
    },
    {
        "number": 26,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    # create a new list to hold unique numbers\n    unique_numbers = []\n    # loop through each number in the input list\n    for number in numbers:\n        # if the number is not already in the unique list, add it\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    # return the unique list\n    return unique_numbers",
        "test": "assert remove_duplicates([1, 1, 2, 2, 3]) == [1, 2, 3]",
        "num_ids": 1087
    },
    {
        "number": 27,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()",
        "test": "assert flip_case('Hello') == 'hELLO'",
        "num_ids": 583
    },
    {
        "number": 28,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)",
        "test": "assert concatenate([]) == ''",
        "num_ids": 561
    },
    {
        "number": 29,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 759
    },
    {
        "number": 30,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]\n",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 1032
    },
    {
        "number": 31,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert is_prime(6) == False",
        "num_ids": 596
    },
    {
        "number": 32,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "import math\n\ndef poly(xs, x):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs should have even number of coefficients\")\n\n    largest_coeff = max(abs(coeff) for coeff in xs)\n    if largest_coeff == 0:\n        raise ValueError(\"all coefficients are zero\")\n\n    # We want to find a zero point of poly(x) = 0\n    # We can use the fact that poly(x) has at most degree n-1\n    # We can check if poly(x) = 0 for x = a, a+h, a+2h,..., b-h, b\n    # where a = -inf, b = +inf and h = 2*largest_coeff\n    a = -1000 * largest_coeff\n    b = 1000 * largest_coeff\n    h = 2 * largest_coeff\n    n = len(xs) // 2\n\n    for i in range(n):\n        # Check if poly(a+i*h) = 0\n        if poly(xs, a+i*h) == 0:\n            return a+i*h\n\n    return None\n\nif __name__ == \"__main__\":\n    xs = [1, 2] # f(x) = 1 + 2x\n    x_zero = find_zero(xs)\n    print(f\"f(x) = {xs[0]} + {xs[1]}x\")\n    print(f\"f(x_zero) = 0 at x_zero = {x_zero}\")\n\n    xs = [-6, 11, -6, 1] # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    x_zero = find_zero(xs)\n    print(f\"f(x) = {xs[0]} + {xs[1]}x + {xs[2]}x^2 + {xs[3]}x^3\")\n    print(f\"f(x_zero) = 0 at x_zero = {x_zero}\")",
        "test": "assert find_zero([1, -1]) == None # does not have a solution",
        "num_ids": 1814
    },
    {
        "number": 33,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    result = []\n    for i in range(len(l)):\n        if i % 3!= 0:\n            result.append(l[i])\n        else:\n            result.append(sorted(l)[i//3])\n    return result",
        "test": "assert sort_third([]) == []",
        "num_ids": 1746
    },
    {
        "number": 34,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 770
    },
    {
        "number": 35,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 774
    },
    {
        "number": 36,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).count('7') > 0:\n                count += 1\n    return count",
        "test": "assert fizz_buzz(50) == 0",
        "num_ids": 781
    },
    {
        "number": 37,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even_idx = [i for i in range(len(l)) if i % 2 == 0]\n    even_vals = [l[i] for i in even_idx]\n    sorted_even_vals = sorted(even_vals)\n    for i in even_idx:\n        l[i] = sorted_even_vals.pop(0)\n    return l",
        "test": "assert sort_even([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 1545
    },
    {
        "number": 38,
        "max_answer_num": 20,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def encode_cyclic(s: str) -> str:\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1:] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "test": "assert decode_cyclic(encode_cyclic(\"hello world\")) == \"hello world\"",
        "num_ids": 1613
    },
    {
        "number": 39,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_prime(n: int) -> bool:\n    \"\"\"\n    is_prime returns True if n is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 2\n    \n    a, b = 0, 1\n    for i in range(2, n+1):\n        c = a + b\n        if is_prime(c):\n            a, b = b, c\n        else:\n            a, b = b, c-1\n    \n    return b",
        "test": "assert prime_fib(1) == 2",
        "num_ids": 1144
    },
    {
        "number": 40,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 1730
    },
    {
        "number": 41,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    left_to_right = [-float('inf')] * n\n    right_to_left = [float('inf')] * n\n    collisions = 0\n    for i in range(1, n):\n        left_to_right[i] = left_to_right[i-1] - 1\n        right_to_left[i] = right_to_left[i-1] + 1\n        if left_to_right[i] == right_to_left[i]:\n            collisions += 1\n    return collisions",
        "test": "assert car_race_collision(0) == 0",
        "num_ids": 1686
    },
    {
        "number": 42,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x+1 for x in l]\n",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 995
    },
    {
        "number": 43,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
        "test": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 1013
    },
    {
        "number": 44,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # check if base is greater than 10\n    if base > 10:\n        return \"Invalid base number\"\n    \n    # initialize empty list to store the result in reverse order\n    result = []\n    \n    # convert input number to base and store in result list\n    while x > 0:\n        remainder = x % base\n        result.append(str(remainder))\n        x //= base\n    \n    # join the list elements to form a string and return it\n    return \"\".join(result[::-1])",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 1136
    },
    {
        "number": 45,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5*a*h\n",
        "test": "assert triangle_area(5, 3) == 7.5, \"incorrect area calculation\"",
        "num_ids": 584
    },
    {
        "number": 46,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)",
        "test": "assert fib4(0) == 0",
        "num_ids": 1117
    },
    {
        "number": 47,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l_sorted = sorted(l)\n    n = len(l_sorted)\n    if n % 2 == 0:\n        # If the list has even number of elements, then the median is the average of the two middle numbers\n        return (l_sorted[n//2-1] + l_sorted[n//2])/2\n    else:\n        # If the list has odd number of elements, then the median is the middle number\n        return l_sorted[n//2]",
        "test": "assert median([1]) == 1",
        "num_ids": 1194
    },
    {
        "number": 48,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    if text == text[::-1]:\n        return True\n    else:\n        return False",
        "test": "assert is_palindrome('') == True, \"empty string should be a palindrome\"",
        "num_ids": 759
    },
    {
        "number": 49,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    result = 1\n    for i in range(n):\n        result = (result * 2) % p\n    return result",
        "test": "assert modp(0, 101) == 1",
        "num_ids": 789
    },
    {
        "number": 50,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hello\"",
        "num_ids": 919
    },
    {
        "number": 51,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def remove_vowels(text):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_text = \"\"\n    for letter in text:\n        if letter.lower() not in vowels:\n            new_text += letter\n    return new_text\n",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 728
    },
    {
        "number": 52,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True",
        "num_ids": 705
    },
    {
        "number": 53,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n",
        "test": "assert add(2, 3) == 5",
        "num_ids": 627
    },
    {
        "number": 54,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    s0_chars = set(s0)\n    s1_chars = set(s1)\n    if s0_chars == s1_chars:\n        return True\n    return False",
        "test": "assert same_chars('eabcd', 'dddddddabc') == False",
        "num_ids": 1066
    },
    {
        "number": 55,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\nprint(fib(10))\nprint(fib(1))\nprint(fib(8))",
        "test": "assert fib(0) == 0",
        "num_ids": 597
    },
    {
        "number": 56,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "test": "assert correct_bracketing(\"<\") == False",
        "num_ids": 785
    },
    {
        "number": 57,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))",
        "test": "assert monotonic([1, 2, 4, 20]) == True",
        "num_ids": 1143
    },
    {
        "number": 58,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    common_elements = list(set(l1) & set(l2))\n    common_elements.sort()\n    return common_elements",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 1274
    },
    {
        "number": 59,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    factor = 2\n    while factor * factor <= n:\n        if n % factor == 0:\n            n //= factor\n        else:\n            factor += 1\n    return n",
        "test": "assert largest_prime_factor(2048) == 2",
        "num_ids": 1143
    },
    {
        "number": 60,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total",
        "test": "assert sum_to_n(30) == 465",
        "num_ids": 931
    },
    {
        "number": 61,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 701
    },
    {
        "number": 62,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    n = len(xs)\n    if n == 1:\n        return [0]\n    else:\n        result = []\n        for i in range(1, n):\n            result.append(i * xs[i])\n        return result",
        "test": "assert derivative([]) == []",
        "num_ids": 955
    },
    {
        "number": 63,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
        "test": "assert fibfib(0) == 0",
        "num_ids": 1085
    },
    {
        "number": 64,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'y'])\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 1169
    },
    {
        "number": 65,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    num_str = str(x)\n    num_len = len(num_str)\n    if shift > num_len:\n        return num_str[::-1]\n    shift = shift % num_len\n    return num_str[-shift:] + num_str[:-shift]",
        "test": "assert circular_shift(12, 1) == \"21\"",
        "num_ids": 1099
    },
    {
        "number": 66,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def digitSum(s):\n    \"\"\"\n    Takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n    \"\"\"\n    # Initialize the sum to 0\n    sum = 0\n    \n    # Loop through each character in the string\n    for char in s:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Add its ASCII code to the sum\n            sum += ord(char)\n    \n    # Return the sum\n    return sum",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 857
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    \"\"\"\n    # split the string into words using whitespace as delimiter\n    words = s.split()\n    # initialize variables for apples, oranges and mango fruits\n    apples = oranges = mangoes = 0\n    # iterate over each word in the string and check if it is an apple or an orange\n    for word in words:\n        if word == \"apples\":\n            apples = int(words[0])\n        elif word == \"oranges\":\n            oranges = int(words[1])\n        # if the word is not an apple or an orange, it must be a mango fruit\n        else:\n            mangoes = int(word)\n    # calculate the total number of fruits in the basket and subtract the number of apples and oranges\n    total_fruits = n - apples - oranges\n    # return the number of mango fruits in the basket\n    return total_fruits",
        "test": "assert fruit_distribution(\"100 apples and 1 oranges\",120) == 19",
        "num_ids": 1261
    },
    {
        "number": 68,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but there are two zeros, so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if len(arr) == 0:\n        return []\n\n    even_values = []\n    smallest_even_value = float('inf')\n    smallest_even_index = -1\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_values.append(arr[i])\n            if arr[i] < smallest_even_value:\n                smallest_even_value = arr[i]\n                smallest_even_index = i\n\n    if len(even_values) == 0:\n        return []\n\n    return [smallest_even_value, smallest_even_index]",
        "test": "assert pluck([4,2,3]) == [2, 1]",
        "num_ids": 2216
    },
    {
        "number": 69,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def search(lst):\n    \"\"\"\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    \"\"\"\n\n    # Count the frequency of each integer in the list\n    freq = {}\n    for num in lst:\n        if num > 0:\n            freq[num] = freq.get(num, 0) + 1\n    \n    # Find the highest integer that has a frequency greater than or equal to itself\n    for num in sorted(freq.keys(), reverse=True):\n        if freq[num] >= num:\n            return num\n    \n    # No such value exists\n    return -1",
        "test": "assert search([4, 1, 2, 2, 3, 1]) == 2",
        "num_ids": 1234
    },
    {
        "number": 70,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    n = len(lst)\n    if n == 0:\n        return []\n    if n == 1:\n        return lst\n    \n    sorted_lst = []\n    i = 0\n    while i < n:\n        minimum = lst[i]\n        for j in range(i+1, n):\n            if lst[j] < minimum:\n                minimum = lst[j]\n        sorted_lst.append(minimum)\n        lst.remove(minimum)\n        n -= 1\n        if n == 1:\n            sorted_lst.append(lst[0])\n            break\n        maximum = lst[0]\n        for j in range(1, n):\n            if lst[j] > maximum:\n                maximum = lst[j]\n        sorted_lst.append(maximum)\n        lst.remove(maximum)\n        n -= 1\n    \n    return sorted_lst",
        "test": "assert strange_sort_list([]) == []",
        "num_ids": 1627
    },
    {
        "number": 71,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # Check if three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        # Return -1 if three sides do not form a valid triangle\n        return -1",
        "test": "assert triangle_area(3, 4, 5) == 6.0",
        "num_ids": 1578
    },
    {
        "number": 72,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    if is_balanced(q) and sum(q) <= w:\n        return True\n    else:\n        return False\n\ndef is_balanced(lst):\n    \"\"\"\n    Check if a list is palindromic.\n    \"\"\"\n    if lst == lst[::-1]:\n        return True\n    else:\n        return False",
        "test": "assert will_it_fly([1, 2], 5) == False",
        "num_ids": 1558
    },
    {
        "number": 73,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    count = 0\n    \n    # Check if the array is already palindromic\n    for i in range(n//2):\n        if arr[i]!= arr[n-i-1]:\n            count += 1\n            \n    return count",
        "test": "assert smallest_change([1,2,3,5,4,7,9,6]) == 4",
        "num_ids": 1630
    },
    {
        "number": 74,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n    \"\"\"\n\n    # if both lists are empty, return an empty list\n    if not lst1 and not lst2:\n        return []\n\n    # if one of the lists is empty, return the non-empty list\n    if not lst1:\n        return lst2\n    elif not lst2:\n        return lst1\n\n    # calculate the total number of chars in lst1 and lst2\n    total_chars1 = sum([len(s) for s in lst1])\n    total_chars2 = sum([len(s) for s in lst2])\n\n    # if the total number of chars in lst1 is less than lst2, return lst1\n    if total_chars1 < total_chars2:\n        return lst1\n    # if the total number of chars in lst2 is less than lst1, return lst2\n    elif total_chars2 < total_chars1:\n        return lst2\n    # if the two lists have the same number of chars, return the first list\n    else:\n        return lst1",
        "test": "assert total_match([], []) == []",
        "num_ids": 2102
    },
    {
        "number": 75,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        elif n <= 3:\n            return True\n        elif n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    count = 0\n    for i in range(1, a):\n        if is_prime(i) and is_prime(a//i):\n            count += 1\n            if count == 3:\n                return True\n    return False\n",
        "test": "assert is_multiply_prime(2) == False",
        "num_ids": 1493
    },
    {
        "number": 76,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_simple_power(x, n):\n    if x == 1 or x == n:\n        return True\n    elif n == 1 or x % n!= 0:\n        return False\n    else:\n        return is_simple_power(x/n, n)",
        "test": "assert is_simple_power(2, 2) == True",
        "num_ids": 825
    },
    {
        "number": 77,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a == 0:\n        return True\n    elif a < 0:\n        return iscube(-a)\n    else:\n        root = int(a ** 0.5)\n        return a == root ** 3",
        "test": "assert iscube(1) == True",
        "num_ids": 925
    },
    {
        "number": 78,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def hex_key(num):\n    \"\"\"Counts the number of hexadecimal digits that are primes.\"\"\"\n    # Define a set of prime numbers\n    primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    # Convert the string to a list of characters\n    chars = [char for char in num]\n    # Count the number of primes in the list\n    count = 0\n    for char in chars:\n        if int(char, 16) in primes:\n            count += 1\n    # Return the count of primes\n    return count",
        "test": "assert hex_key(\"1077E\") == 2",
        "num_ids": 1309
    },
    {
        "number": 79,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    \n    # Convert decimal to binary\n    binary = bin(decimal)[2:]\n\n    # Add 'db' characters to start and end of binary string\n    binary = 'db' + binary + 'db'\n\n    return binary",
        "test": "assert decimal_to_binary(15) == \"db1111db\"",
        "num_ids": 1305
    },
    {
        "number": 80,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_happy(s):\n    \"\"\"\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    \n    seen = set()\n    for i in range(len(s)):\n        if i+2 < len(s):\n            curr_triplet = s[i:i+3]\n            if curr_triplet in seen:\n                return False\n            seen.add(curr_triplet)\n    \n    return True",
        "test": "assert is_happy('a') == False",
        "num_ids": 870
    },
    {
        "number": 81,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA     |   Letter grade\n              4.0          A+\n            > 3.7          A \n             > 3.3         A- \n             > 3.0         B+\n             > 2.7         B \n             > 2.3         B-\n             > 2.0         C+\n             > 1.7         C\n             > 1.3         C-\n             > 1.0         D+ \n             > 0.7         D \n             > 0.0         D-\n              0.0         E\n    \"\"\"\n\n    letter_grades = []\n\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append(\"A+\")\n        elif grade >= 3.7:\n            letter_grades.append(\"A\")\n        elif grade >= 3.3:\n            letter_grades.append(\"A-\")\n        elif grade >= 3.0:\n            letter_grades.append(\"B+\")\n        elif grade >= 2.7:\n            letter_grades.append(\"B\")\n        elif grade >= 2.3:\n            letter_grades.append(\"B-\")\n        elif grade >= 2.0:\n            letter_grades.append(\"C+\")\n        elif grade >= 1.7:\n            letter_grades.append(\"C\")\n        elif grade >= 1.3:\n            letter_grades.append(\"C-\")\n        elif grade >= 1.0:\n            letter_grades.append(\"D+\")\n        elif grade >= 0.7:\n            letter_grades.append(\"D\")\n        elif grade >= 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n\n    return letter_grades",
        "test": "assert numerical_letter_grade([3.7, 3.3, 3.0, 2.7, 2.3]) == ['A', 'A-', 'B+', 'B', 'B-']",
        "num_ids": 2768
    },
    {
        "number": 82,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is prime, False otherwise\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Return True if the length of the string is prime, False otherwise\"\"\"\n    return is_prime(len(string))",
        "test": "assert prime_length('Hello') == True",
        "num_ids": 802
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count",
        "test": "assert starts_one_ends(1) == 1",
        "num_ids": 734
    },
    {
        "number": 84,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    binary = bin(N)[2:] # convert integer to binary string\n    total_sum = sum(int(digit) for digit in binary) # calculate sum of binary digits\n    return bin(total_sum)[2:] # convert sum to binary string and return",
        "test": "assert solve(0) == \"0\"",
        "num_ids": 1289
    },
    {
        "number": 85,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total",
        "test": "assert add([4, 2, 6, 7]) == 2 ",
        "num_ids": 894
    },
    {
        "number": 86,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n    # Split the string into a list of words\n    words = s.split()\n\n    # Loop through each word in the list\n    for i in range(len(words)):\n        # Split the word into a list of characters\n        chars = list(words[i])\n\n        # Sort the list of characters\n        chars.sort()\n\n        # Join the sorted list of characters back into a string\n        words[i] = ''.join(chars)\n\n    # Join the list of words back into a string and return it\n    return''.join(words)",
        "test": "assert anti_shuffle('Hi') == 'Hi'",
        "num_ids": 1370
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == x:\n                result.append((i, j))\n    result.sort()\n    for i, row in enumerate(lst):\n        row_result = []\n        for j, col in enumerate(row):\n            if col == x:\n                row_result.append((i, j))\n        row_result.sort(key=lambda x: x[1], reverse=True)\n        result[i] = row_result\n    return result",
        "test": "assert get_row([",
        "num_ids": 2066
    },
    {
        "number": 88,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n    \n    first_index_value = array[0]\n    last_index_value = array[-1]\n    \n    if (first_index_value + last_index_value) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)",
        "test": "assert sort_array([]) == []",
        "num_ids": 1925
    },
    {
        "number": 89,
        "max_answer_num": 20,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_string = ''\n    for char in s:\n        if char.isalpha():\n            index = alphabet.index(char.lower())\n            new_index = (index + 4) % 26\n            encrypted_char = alphabet[new_index]\n            if char.islower():\n                encrypted_string += encrypted_char\n            else:\n                encrypted_string += encrypted_char.upper()\n        else:\n            encrypted_string += char\n    return encrypted_string",
        "test": "assert encrypt('hi') == 'lm'",
        "num_ids": 1278
    },
    {
        "number": 90,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    smallest = lst[0]\n    second_smallest = lst[1]\n    for i in range(2, len(lst)):\n        if lst[i] < smallest:\n            second_smallest = smallest\n            smallest = lst[i]\n        elif lst[i] < second_smallest:\n            second_smallest = lst[i]\n    if second_smallest == lst[0]:\n        return None\n    return second_smallest",
        "test": "assert next_smallest([]) == None",
        "num_ids": 1166
    },
    {
        "number": 91,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Split the string into sentences\n    sentences = S.split('. ')\n    sentences += S.split('! ')\n    sentences += S.split('? ')\n    \n    # Count the number of boredoms\n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0].lower() == 'i':\n            count += 1\n    \n    return count",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 970
    },
    {
        "number": 92,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    if type(x)!= int or type(y)!= int or type(z)!= int:\n        return False\n    elif x + y == z or x + z == y or y + z == x:\n        return True\n    else:\n        return False",
        "test": "assert any_int(5, 2, 7) == True, \"Example Test Case 1 failed\"",
        "num_ids": 1289
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    encoded_message = \"\"\n    for letter in message:\n        if letter.isalpha():\n            if letter.lower() in \"aeiou\":\n                if letter.isupper():\n                    encoded_message += chr(ord(letter) + 23)\n                else:\n                    encoded_message += chr(ord(letter) + 9)\n            else:\n                if letter.isupper():\n                    encoded_message += chr(ord(letter) + 32)\n                else:\n                    encoded_message += chr(ord(letter))\n        else:\n            encoded_message += letter\n    return encoded_message",
        "test": "assert encode('This is a message') == 'tHKS KS C MGSSCGG'",
        "num_ids": 1557
    },
    {
        "number": 94,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n    \"\"\"\n    largest_prime = max(filter(is_prime, lst), default=0)\n    return sum_of_digits(largest_prime)\n",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
        "num_ids": 2274
    },
    {
        "number": 95,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n\n    if all(isinstance(key, str) and key.islower() for key in dict):\n        return True\n    elif all(isinstance(key, str) and key.isupper() for key in dict):\n        return True\n    else:\n        return False",
        "test": "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
        "num_ids": 1599
    },
    {
        "number": 96,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n            count += 1\n            if count == n:\n                return primes\n    return primes\n",
        "test": "assert count_up_to(0) == []",
        "num_ids": 1271
    },
    {
        "number": 97,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Convert integers to strings\n    a = str(a)\n    b = str(b)\n    \n    # Extract unit digits\n    a_unit_digit = int(a[-1])\n    b_unit_digit = int(b[-1])\n    \n    # Multiply unit digits\n    product = a_unit_digit * b_unit_digit\n    \n    return product",
        "test": "assert multiply(148, 412) == 16",
        "num_ids": 1021
    },
    {
        "number": 98,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count",
        "test": "assert count_upper('aBCdEf') == 1",
        "num_ids": 831
    },
    {
        "number": 99,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n    num = float(value)\n    if num == int(num):\n        return int(num)\n    elif num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 1077
    },
    {
        "number": 100,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = []\n    for i in range(n):\n        if n % 2 == 0:\n            pile.append(n)\n            n += 1\n        else:\n            pile.append(n)\n            n += 2\n    return pile",
        "test": "assert make_a_pile(1) == [1] # Test case 4",
        "num_ids": 1635
    },
    {
        "number": 101,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()",
        "test": "assert words_string(\"One\") == [\"One\"]",
        "num_ids": 1344
    },
    {
        "number": 102,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1",
        "test": "assert choose_num(12, 15) == 14",
        "num_ids": 1109
    },
    {
        "number": 103,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        sum_of_integers = 0\n        for i in range(n, m+1):\n            sum_of_integers += i\n        avg = sum_of_integers / (m-n+1)\n        rounded_avg = round(avg)\n        binary_avg = bin(rounded_avg)[2:]\n        return \"0b\" + binary_avg",
        "test": "assert rounded_avg(1, 5) == \"0b11\"",
        "num_ids": 1038
    },
    {
        "number": 104,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique = []\n    for i in x:\n        digits = set(str(i))\n        if not any(int(digit) % 2 == 0 for digit in digits):\n            unique.append(i)\n    return sorted(unique)",
        "test": "assert unique_digits([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 3, 5, 7, 9]",
        "num_ids": 2552
    },
    {
        "number": 105,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n      \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n      \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    # create a list of names for each digit from 1 to 9\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n\n    # filter out integers outside the range [1, 9]\n    arr = list(filter(lambda x: x >= 1 and x <= 9, arr))\n\n    # sort the remaining integers and reverse the order\n    arr.sort(reverse=True)\n\n    # replace each digit by its corresponding name\n    return [names[x - 1] for x in arr]",
        "test": "assert by_length([]) == []",
        "num_ids": 2824
    },
    {
        "number": 106,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            res.append(math.factorial(i))\n        else:\n            res.append(sum(range(1, i+1)))\n    return res",
        "test": "assert f(1) == [1]",
        "num_ids": 3412
    },
    {
        "number": 107,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    \n    even_palindromes = 0\n    odd_palindromes = 0\n    \n    for num in range(1, n+1):\n        # check if the number is a palindrome\n        if str(num) == str(num)[::-1]:\n            # check if the number is even or odd\n            if num % 2 == 0:\n                even_palindromes += 1\n            else:\n                odd_palindromes += 1\n    \n    return (even_palindromes, odd_palindromes)",
        "test": "assert even_odd_palindrome(3) == (1, 2)",
        "num_ids": 1783
    },
    {
        "number": 108,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num < 0:\n            first_digit = abs(num) % 10\n        else:\n            first_digit = num % 10\n        if first_digit > 0:\n            count += 1\n    return count",
        "test": "assert count_nums([]) == 0",
        "num_ids": 1155
    },
    {
        "number": 109,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return True\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n",
        "test": "assert move_one_ball([3, 5, 4, 1, 2])==False #Example 2",
        "num_ids": 2672
    },
    {
        "number": 110,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Check if all elements in lst1 are even\n    if all(num % 2 == 0 for num in lst1):\n        return \"YES\"\n    else:\n        # Create a set of even numbers in lst1\n        even_nums = set(num for num in lst1 if num % 2 == 0)\n        # Iterate through lst2 and check if all elements are even or in even_nums\n        for num in lst2:\n            if num % 2!= 0 and num not in even_nums:\n                return \"NO\"\n        return \"YES\"",
        "test": "assert exchange([1, 2, 3, 4], [5, 10, 15, 20]) == \"NO\"",
        "num_ids": 2476
    },
    {
        "number": 111,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\"\"\"\n\n    # Remove white spaces from the string\n    test = test.replace(\" \", \"\")\n\n    # Initialize an empty dictionary\n    letter_count = {}\n\n    # Loop through each character in the string\n    for char in test:\n        # If the character is already in the dictionary, increment its count\n        if char in letter_count:\n            letter_count[char] += 1\n        # Otherwise, add the character to the dictionary with a count of 1\n        else:\n            letter_count[char] = 1\n\n    # Initialize a variable to hold the maximum count\n    max_count = 0\n\n    # Initialize an empty list to hold the keys with the maximum count\n    max_keys = []\n\n    # Loop through each key-value pair in the dictionary\n    for key, value in letter_count.items():\n        # If the value is greater than the current maximum count, update the maximum count\n        if value > max_count:\n            max_count = value\n            max_keys = [key]\n        # If the value is equal to the maximum count, add the key to the list of max keys\n        elif value == max_count:\n            max_keys.append(key)\n\n    # Create a new dictionary with the maximum keys and their maximum count\n    histogram_dict = {}\n    for key in max_keys:\n        histogram_dict[key] = max_count\n\n    return histogram_dict",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
        "num_ids": 2108
    },
    {
        "number": 112,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    for i in s:\n        if i not in c:\n            result += i\n    if result == result[::-1]:\n        return (result, True)\n    else:\n        return (result, False)",
        "test": "assert reverse_delete(\"abcde\",\"ae\") == ('bcd',False)",
        "num_ids": 1225
    },
    {
        "number": 113,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\n    result = []\n    for string in lst:\n        count = 0\n        for digit in string:\n            if int(digit)%2!= 0:\n                count += 1\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count,count,count,count))\n    return result",
        "test": "assert odd_count(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]",
        "num_ids": 2264
    },
    {
        "number": 114,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    \n    # Initialize variables for the current sum, the minimum sum, and the start index of the subarray\n    curr_sum = nums[0]\n    min_sum = nums[0]\n    start_index = 0\n    \n    # Loop through the array from the second element to the end\n    for i in range(1, len(nums)):\n        # Add the current element to the current sum\n        curr_sum += nums[i]\n        \n        # If the current sum is less than or equal to the minimum sum seen so far, update the minimum sum and the start index of the subarray\n        if curr_sum <= min_sum:\n            min_sum = curr_sum\n            start_index = i\n            \n        # If the current sum is greater than the minimum sum, reset the current sum to the next element\n        elif curr_sum > min_sum:\n            curr_sum = nums[i]\n            \n    # Return the minimum sum\n    return min_sum",
        "test": "assert minSubArraySum([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1376
    },
    {
        "number": 115,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def max_fill(grid, capacity):\n    import math\n\n    num_wells = len(grid)\n    num_buckets = math.ceil(num_wells / capacity)\n\n    buckets = [[0] * num_buckets for _ in range(num_wells)]\n\n    for row in range(num_wells):\n        for col in range(num_wells):\n            if grid[row][col] == 1:\n                bucket_index = col // capacity\n                buckets[row][bucket_index] += 1\n\n    num_fills = 0\n\n    for row in range(num_wells):\n        total_units = sum(buckets[row])\n        if total_units > capacity:\n            num_fills += math.ceil(total_units / capacity)\n\n    return num_fills",
        "test": "assert max_fill([[0,0,0], [0,0,0]], 5) == 0",
        "num_ids": 1680
    },
    {
        "number": 116,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(abs(x)).count('1'), abs(x)))",
        "test": "assert sort_array([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]",
        "num_ids": 1610
    },
    {
        "number": 117,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def select_words(s, n):\n    if not s:\n        return []\n\n    vowels = \"aeiou\"\n    words = s.split()\n    result = []\n\n    for word in words:\n        consonants = [c for c in word if c.lower() not in vowels]\n        if len(consonants) == n:\n            result.append(word)\n\n    return result",
        "test": "assert select_words(\"simple white space\", 2) == []",
        "num_ids": 1445
    },
    {
        "number": 118,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    closest_vowel = \"\"\n    for i in range(1, len(word)):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            closest_vowel = word[i]\n            break\n    return closest_vowel",
        "test": "assert get_closest_vowel(\"quick\") == \"\"",
        "num_ids": 1077
    },
    {
        "number": 119,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def is_balanced(s):\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack or stack.pop()!= '(':\n                    return False\n        return not stack\n\n    def combine(s1, s2):\n        return s1 + s2\n\n    def find_combination(s1, s2):\n        for i in range(len(s1)):\n            for j in range(len(s2)):\n                if is_balanced(combine(s1[:i+1], s2[:j+1])):\n                    return combine(s1[:i+1], s2[:j+1])\n\n    s1, s2 = lst\n    if is_balanced(s1) and is_balanced(s2):\n        return 'Yes'\n    if find_combination(s1, s2):\n        return 'Yes'\n    return 'No'",
        "test": "assert match_parens([')', ')']) == 'No'",
        "num_ids": 1599
    },
    {
        "number": 120,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]",
        "num_ids": 1256
    },
    {
        "number": 121,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2!= 0:\n            sum += lst[i]\n    return sum",
        "test": "assert solution([5, 8, 7, 1]) == 12",
        "num_ids": 1022
    },
    {
        "number": 122,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    total = 0\n    for i in range(k):\n        if arr[i] < 100:\n            total += arr[i]\n    return total",
        "test": "assert add_elements([1, 2, 3, 4, 5], 5) == 15",
        "num_ids": 1645
    },
    {
        "number": 123,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    odd_nums = []\n    while n!= 1:\n        if n % 2 == 1:\n            odd_nums.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = (3 * n) + 1\n    odd_nums.append(n)\n    return sorted(odd_nums)",
        "test": "assert get_odd_collatz(1) == [1]",
        "num_ids": 1987
    },
    {
        "number": 124,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def valid_date(date):\n    \"\"\"\n    Validates a given date string and returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. \n       And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. \n       And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n    \"\"\"\n\n    # Splitting the date string into month, day, and year\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n\n    # Checking if the year is a 4-digit number\n    if len(str(year))!= 4:\n        return False\n\n    # Checking if the month is within the valid range\n    if month < 1 or month > 12:\n        return False\n\n    # Checking if the day is within the valid range for the given month\n    if month == 2:\n        if day < 1 or day > 29:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    else:\n        if day < 1 or day > 31:\n            return False\n\n    # If all the checks pass, the date is valid\n    return True",
        "test": "assert valid_date('03-11-2000') == True",
        "num_ids": 2555
    },
    {
        "number": 125,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def split_words(txt):\n    # If no whitespaces exists in the text, split on commas\n    if txt.find(' ') == -1:\n        words = txt.split(',')\n    # If no commas exists, count the number of odd-order letters\n    else:\n        words = txt.split()\n    # Count the number of odd-order letters in the alphabet\n    count = 0\n    for letter in 'abcdefghijklmnopqrstuvwxyz':\n        if txt.count(letter) % 2 == 1:\n            count += 1\n    return words if words!= [''] else count",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 1037
    },
    {
        "number": 126,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    n = len(lst)\n    for i in range(1, n):\n        if lst[i] < lst[i-1]:\n            return False\n        elif lst[i] == lst[i-1] and i < n-1:\n            return False\n    return True",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 1820
    },
    {
        "number": 127,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start2 > end1 or start1 > end2:\n        return \"NO\"\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    intersection_length = intersection_end - intersection_start + 1\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\"",
        "num_ids": 1651
    },
    {
        "number": 128,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    signs = [1 if x > 0 else -1 if x < 0 else 0 for x in arr]\n    magnitudes = [abs(x) for x in arr]\n    product_signs = 1\n    for sign in signs:\n        product_signs *= sign\n    \n    result = sum(magnitudes) * product_signs\n    return result",
        "test": "assert prod_signs([1, 2, 2, -4]) == -9",
        "num_ids": 777
    },
    {
        "number": 129,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def minPath(grid, k):\n    n = len(grid)\n    visited = [[False for j in range(n)] for i in range(n)]\n    queue = [(0, 0, [grid[0][0]])]\n    visited[0][0] = True\n    while queue:\n        i, j, path = queue.pop(0)\n        if len(path) == k:\n            return path\n        for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < n and 0 <= nj < n and not visited[ni][nj]:\n                queue.append((ni, nj, path + [grid[ni][nj]]))\n                visited[ni][nj] = True\n    return []",
        "test": "assert minPath([[1,2,3], [4,5,6], [7,8,9]], 2) == [1, 2]",
        "num_ids": 2671
    },
    {
        "number": 130,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n    else:\n        tri_seq = [3, 1, 1]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                tri_seq.append(1 + i // 2)\n            else:\n                tri_seq.append(tri_seq[i-1] + tri_seq[i-2] + tri_seq[i+1])\n        return tri_seq",
        "test": "assert tri(1) == [3]",
        "num_ids": 2115
    },
    {
        "number": 131,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def digits(n):\n    # Convert the number to a string to access individual digits\n    n_str = str(n)\n    \n    # Initialize the product to 1\n    product = 1\n    \n    # Iterate over the digits in the string, multiplying the odd ones\n    for digit in n_str:\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n    \n    # If the product is 0, it means all digits were even\n    if product == 0:\n        return 0\n    else:\n        return product",
        "test": "assert digits(235) == 15",
        "num_ids": 794
    },
    {
        "number": 132,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_nested(string):\n    stack = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            stack.append(i)\n        elif string[i] == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack and i - stack[-1] > 1:\n                return True\n    return False",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False",
        "num_ids": 731
    },
    {
        "number": 133,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\"\"\"\n    sum = 0\n    for num in lst:\n        sum += int(math.ceil(num))**2\n    return sum",
        "test": "assert sum_squares([1,2,3]) == 14",
        "num_ids": 1164
    },
    {
        "number": 134,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    \"\"\"\n    \n    if len(txt) == 0:\n        return False\n    \n    if txt[-1].isalpha() and (len(txt) == 1 or txt[-2].isspace()):\n        return True\n    else:\n        return False",
        "test": "assert check_if_last_char_is_a_letter(\"apple pi e \") == False",
        "num_ids": 1570
    },
    {
        "number": 135,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    \n    n = len(arr)\n    # if array is empty or has only one element, return -1\n    if n <= 1:\n        return -1\n    \n    # initialize a variable to store the maximum value of an element\n    max_val = max(arr)\n    \n    # initialize a variable to store the index of the maximum value\n    max_idx = arr.index(max_val)\n    \n    # initialize a variable to store the index of the previous element\n    prev_idx = -1\n    \n    # iterate through the array from the second element to the last element\n    for i in range(1, n):\n        # if the current element is greater than or equal to the previous element,\n        # then the previous index is the largest index of an element which is not\n        # greater than or equal to the element immediately preceding it\n        if arr[i] >= arr[prev_idx + 1]:\n            prev_idx = i\n            \n        # if the current element is less than the previous element,\n        # then the previous index is not the largest index of an element which is not\n        # greater than or equal to the element immediately preceding it\n        elif arr[i] < arr[prev_idx + 1]:\n            # if the current element is equal to the maximum value,\n            # then the previous index is the largest index of an element which is not\n            # greater than or equal to the element immediately preceding it\n            if arr[i] == max_val:\n                return prev_idx\n            \n            # if the current element is greater than the maximum value,\n            # then the previous index is not the largest index of an element which is not\n            # greater than or equal to the element immediately preceding it\n            else:\n                return -1\n            \n    # if the code reaches this point, then the largest index of an element which is not\n    # greater than or equal to the element immediately preceding it does not exist\n    return -1",
        "test": "assert can_arrange([1,2,3]) == -1",
        "num_ids": 1431
    },
    {
        "number": 136,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    # Initialize the largest and smallest variables to None\n    largest = None\n    smallest = None\n\n    # Loop through each element in the list\n    for element in lst:\n        # Check if the element is negative\n        if element < 0:\n            # If it is, update the largest variable if it's smaller\n            if largest is None or element > largest:\n                largest = element\n        # Check if the element is positive\n        elif element > 0:\n            # If it is, update the smallest variable if it's larger\n            if smallest is None or element < smallest:\n                smallest = element\n\n    # Return a tuple with the largest and smallest variables\n    return (largest, smallest)",
        "test": "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
        "num_ids": 1463
    },
    {
        "number": 137,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n    else:\n        if type(a) in [int, float]:\n            return b\n        elif type(b) in [int, float]:\n            return a",
        "test": "assert compare_one(1, 2.5) == 2.5",
        "num_ids": 1419
    },
    {
        "number": 138,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    for a in range(2, n, 2):\n        for b in range(2, n, 2):\n            for c in range(2, n, 2):\n                for d in range(2, n, 2):\n                    if a + b + c + d == n:\n                        return True\n    return False",
        "test": "assert is_equal_to_sum_even(4) == False",
        "num_ids": 1155
    },
    {
        "number": 139,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    factorial = 1\n    for i in range(n, 0, -1):\n        factorial *= i\n    return factorial",
        "test": "assert special_factorial(0) == 1",
        "num_ids": 1043
    },
    {
        "number": 140,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    new_text = \"\"\n    consecutive_spaces = 0\n    for char in text:\n        if char == \" \":\n            if consecutive_spaces < 2:\n                new_text += \"_\"\n            consecutive_spaces += 1\n        else:\n            consecutive_spaces = 0\n            new_text += char\n    return new_text",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 955
    },
    {
        "number": 141,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if file_name.count('.')!= 1: # check if there is exactly one dot in the file's name\n        return 'No'\n    file_name_parts = file_name.split('.')\n    if len(file_name_parts[0]) == 0 or not file_name_parts[0][0].isalpha(): # check if the substring before the dot is not empty and starts with a latin alphapet letter\n        return 'No'\n    if file_name_parts[1] not in ['txt', 'exe', 'dll']: # check if the substring after the dot is one of the allowed extensions\n        return 'No'\n    if any(char.isdigit() for char in file_name): # check if there are more than three digits in the file's name\n        return 'No'\n    return 'Yes'",
        "test": "assert file_name_check(\"example.txt\") == \"Yes\"",
        "num_ids": 2262
    },
    {
        "number": 142,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i]**2\n        elif i % 4 == 0 and i % 3!= 0:\n            lst[i] = lst[i]**3\n    for i in lst:\n        result += i\n    return result",
        "test": "assert sum_squares([1,2,3]) == 6",
        "num_ids": 1384
    },
    {
        "number": 143,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def is_prime(num):\n    \"\"\"\n    Function to check if a number is prime or not\n    \"\"\"\n    if num == 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n    \"\"\"\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_words)",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\"",
        "num_ids": 1287
    },
    {
        "number": 144,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def simplify(x, n):\n    # Convert the fractions to floats\n    x = float(x.split(\"/\")[0])/float(x.split(\"/\")[1])\n    n = float(n.split(\"/\")[0])/float(n.split(\"/\")[1])\n    \n    # Check if the product of x and n is a whole number\n    if x*n == int(x*n):\n        return True\n    else:\n        return False",
        "test": "assert simplify(\"7/10\", \"10/2\") == False # 7/5 \u2260 1/1",
        "num_ids": 1255
    },
    {
        "number": 145,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(digit) for digit in str(abs(x))))",
        "test": "assert order_by_points([]) == []",
        "num_ids": 1406
    },
    {
        "number": 146,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and num % 2 == 1 and int(str(num)[0]) % 2 == 1 and int(str(num)[-1]) % 2 == 1:\n            count += 1\n    return count",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1",
        "num_ids": 1431
    },
    {
        "number": 147,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = []\n    count = 0\n    \n    for i in range(1, n+1):\n        a.append(i*i - i + 1)\n    \n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count\n",
        "test": "assert get_max_triples(5) == 1",
        "num_ids": 1199
    },
    {
        "number": 148,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    '''\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Check if planet1 or planet2 are correct planet names\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Get the indices of the planets\n    i = planets.index(planet1)\n    j = planets.index(planet2)\n    \n    # Sort the planets based on their distance from the Sun\n    planets = planets[i:j+1]\n    planets.sort(key=lambda planet: planets.index(planet))\n    \n    return tuple(planets)",
        "test": "assert bf(\"Uranus\", \"Pluto\") == ()",
        "num_ids": 1744
    },
    {
        "number": 149,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # deleting odd length strings from the list\n    lst = [word for word in lst if len(word) % 2 == 0]\n    # sorting the list by length of each word, and if two words have the same length, sorting by alphabetical order\n    lst.sort(key=lambda x: (len(x), x))\n    return lst",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 1444
    },
    {
        "number": 150,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n <= 1:\n        return y\n    \n    # checking if n is a prime number\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n    \n    return x\n",
        "test": "assert x_or_y(7, 34, 12) == 34",
        "num_ids": 1020
    },
    {
        "number": 151,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    \"\"\"\n    \n    if not lst:  # check if the list is empty\n        return 0\n    \n    result = 0\n    \n    for num in lst:\n        if num > 0 and num % 2!= 0:  # check if the number is positive and odd\n            result += num ** 2\n    \n    return result",
        "test": "assert double_the_difference([1, 3, 2, 0]) == 10, \"Should be 10\"",
        "num_ids": 1384
    },
    {
        "number": 152,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def compare(game, guess):\n    \"\"\"\n    Compare a list of scores with a list of guesses.\n    Return a list of differences in absolute value.\n    \"\"\"\n    result = []\n    for i in range(len(game)):\n        diff = abs(game[i] - guess[i])\n        result.append(diff)\n    return result",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 1657
    },
    {
        "number": 153,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def Strongest_Extension(class_name, extensions):\n    strongest_strength = float('-inf')\n    strongest_extension = None\n    for extension in extensions:\n        cap_count = sum(1 for char in extension if char.isupper())\n        sm_count = sum(1 for char in extension if char.islower())\n        strength = cap_count - sm_count\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'",
        "test": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'",
        "num_ids": 2009
    },
    {
        "number": 154,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\"\"\"\n\n    # Concatenate the second word with itself to get all possible rotations\n    b_rotations = b + b[1:] + b[2:]\n\n    # Check if the second word or any of its rotations is a substring in the first word\n    if b in a or b_rotations in a:\n        return True\n    else:\n        return False",
        "test": "assert cycpattern_check(\"abcd\",\"abd\") == False",
        "num_ids": 980
    },
    {
        "number": 155,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    if num < 0:\n        num = abs(num)\n    while num!= 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)",
        "test": "assert even_odd_count(123) == (1, 2)",
        "num_ids": 1017
    },
    {
        "number": 156,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = {\n        1000:'m',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i',\n    }\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()",
        "test": "assert int_to_mini_roman(19) == 'xix'",
        "num_ids": 1714
    },
    {
        "number": 157,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n",
        "test": "assert right_angle_triangle(10, 10, 10) == False",
        "num_ids": 1147
    },
    {
        "number": 158,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_max(words):\n    max_word = \"\"\n    max_count = 0\n    \n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_count or (unique_chars == max_count and word < max_word):\n            max_word = word\n            max_count = unique_chars\n            \n    return max_word",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 1060
    },
    {
        "number": 159,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n    \n    Have fun :)\n    \"\"\"\n    if remaining < need:\n        return [number + remaining, 0]\n    else:\n        return [number + need, remaining - need]",
        "test": "assert eat(1, 10, 10) == [11, 0]",
        "num_ids": 2234
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator = ['+', '*', '-']\n    operand = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator)!= len(operand) - 1:\n        print(\"Invalid input. Operator and operand lists are not of the same length.\")\n        return None\n    \n    # Create an empty string to store the expression\n    expression = \"\"\n    \n    # Loop through the operator list and operand list and append the corresponding characters to the expression string\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            expression += str(operand[i]) + \" + \"\n        elif operator[i] == '-':\n            expression += str(operand[i]) + \" - \"\n        elif operator[i] == '*':\n            expression += str(operand[i]) + \" * \"\n        elif operator[i] == '//':\n            expression += str(operand[i]) + \" // \"\n        elif operator[i] == '**':\n            expression += str(operand[i]) + \" ** \"\n        else:\n            print(\"Invalid operator found in operator list.\")\n            return None\n    \n    # Remove the last two characters from the expression string (i.e. the'+'or'-'or'*'or'//'or'**'characters)\n    expression = expression[:-2]\n    \n    # Evaluate the expression and return the result\n    result = eval(expression)\n    \n    return result",
        "test": "assert do_algebra(['*', '/', '+', '-', '^'], [2, 3, 4, 5, 6]) == 20",
        "num_ids": 2377
    },
    {
        "number": 161,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    result = \"\"\n    letters = False\n    for char in s:\n        if char.isalpha():\n            letters = True\n            result += char.upper() if char.islower() else char.lower()\n        else:\n            result += char\n    if not letters:\n        result = result[::-1]\n    return result",
        "test": "assert solve(\"1234\") == \"4321\"",
        "num_ids": 1025
    },
    {
        "number": 162,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
        "num_ids": 1357
    },
    {
        "number": 163,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    even_digits = []\n    for num in range(a, b+1):\n        if all(int(digit) % 2 == 0 for digit in str(num)):\n            even_digits.append(num)\n    return even_digits",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 1338
    }
]