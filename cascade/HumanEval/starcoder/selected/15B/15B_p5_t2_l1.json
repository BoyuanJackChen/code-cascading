[
    {
        "number": 0,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i]-numbers[j]) <= threshold:\n                return True\n    return False\n",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
        "num_ids": 1235,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    group = \"\"\n    level = 0\n    \n    for char in paren_string:\n        if char == \"(\":\n            level += 1\n            group += char\n        elif char == \")\":\n            level -= 1\n            group += char\n            if level == 0:\n                groups.append(group)\n                group = \"\"\n        elif char.isspace():\n            continue\n        else:\n            raise ValueError(\"Input string contains invalid characters\")\n    \n    if level!= 0:\n        raise ValueError(\"Input string is not balanced\")\n    \n    return groups",
        "test": "assert separate_paren_groups('()()') == ['()', '()']",
        "num_ids": 1414,
        "indeed": true
    },
    {
        "number": 2,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n\n    integer_part = int(number)\n    decimal_part = number - integer_part\n\n    return decimal_part",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 716,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 762,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    deviation_sum = sum([abs(x - mean) for x in numbers])\n    return deviation_sum / len(numbers)\n",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
        "num_ids": 1133,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    \n    # Edge case - if numbers is empty, return empty list\n    if not numbers:\n        return []\n    \n    # Initialize empty list to store result\n    result = []\n    \n    # Iterate over the numbers and insert delimeter between them\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i!= len(numbers)-1: # Check if we are not at the last element of numbers\n            result.append(delimeter)\n    \n    return result",
        "test": "assert intersperse([], 4) == []",
        "num_ids": 929,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    levels = []\n    current_level = 0\n    for paren in paren_string:\n        if paren == '(':\n            current_level += 1\n        else:\n            current_level -= 1\n        if current_level > len(levels):\n            levels.append(current_level)\n        else:\n            levels[current_level] = max(levels[current_level], current_level)\n    return levels",
        "test": "assert parse_nested_parens('()') == [1]",
        "num_ids": 1143,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    \"\"\"\n    return [s for s in strings if substring in s]\n",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 569,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    sum_ = 0\n    product = 1\n    for num in numbers:\n        sum_ += num\n        product *= num\n    return (sum_, product)",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 858,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_list = []\n    for num in numbers:\n        if not max_list or num > max_list[-1]:\n            max_list.append(num)\n        else:\n            max_list.append(max_list[-1])\n    return max_list",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
        "num_ids": 1275,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    else:\n        for i in range(len(string)-1, -1, -1):\n            if is_palindrome(string[i:]):\n                return string + string[:i][::-1]",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 1150,
        "indeed": true
    },
    {
        "number": 11,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result\n\nprint(string_xor('010', '110')) # Output: '100'",
        "test": "assert string_xor('010', '110') == '100'",
        "num_ids": 1110,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str",
        "test": "assert longest([]) == None",
        "num_ids": 750,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 630,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes",
        "test": "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
        "num_ids": 610,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return \" \".join(str(i) for i in range(n+1))\n",
        "test": "assert string_sequence(0) == '0'",
        "num_ids": 490,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \"\"\"\n    distinct_chars = set(string.lower())\n    return len(distinct_chars)\n",
        "test": "assert count_distinct_characters('xyzXYZ') == 3",
        "num_ids": 559,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    beats = []\n    current_beat = 1  # start with one beat\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n            current_beat = 1\n        elif note == 'o|':\n            beats.append(2)\n            current_beat = 1\n        elif note == '.|':\n            beats.append(1)\n            current_beat = 1\n        else:\n            current_beat += 1\n    return beats",
        "test": "assert parse_music('') == []",
        "num_ids": 1623,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    start = 0\n    while True:\n        index = string.find(substring, start)\n        if index == -1:\n            break\n        count += 1\n        start = index + 1\n    return count",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 776,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def sort_numbers(numbers: str) -> str:\n    # Convert the string to a list of integers\n    numbers_list = [int(num) for num in numbers.split()]\n\n    # Sort the list in ascending order\n    sorted_numbers_list = sorted(numbers_list)\n\n    # Convert the sorted list back to a string\n    sorted_numbers_str =''.join([str(num) for num in sorted_numbers_list])\n\n    return sorted_numbers_str",
        "test": "assert sort_numbers('five two three four') == 'two three four five'",
        "num_ids": 893,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    sorted_numbers = sorted(numbers)\n    min_diff = abs(sorted_numbers[0] - sorted_numbers[1])\n    closest_pair = (sorted_numbers[0], sorted_numbers[1])\n    for i in range(len(sorted_numbers)-1):\n        for j in range(i+1, len(sorted_numbers)):\n            diff = abs(sorted_numbers[i] - sorted_numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                closest_pair = (sorted_numbers[i], sorted_numbers[j])\n    return closest_pair\n\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
        "num_ids": 1595,
        "indeed": true
    },
    {
        "number": 21,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 1242,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 666,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)",
        "test": "assert strlen('') == 0",
        "num_ids": 281,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n \"\"\"\n    if n == 1:\n        return 1\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return largest_divisor(n // i)\n        return n",
        "test": "assert largest_divisor(15) == 5, \"Test case 1 failed\"",
        "num_ids": 566,
        "indeed": false
    },
    {
        "number": 25,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n /= divisor\n        else:\n            divisor += 1\n    return factors",
        "test": "assert factorize(8) == [2, 2, 2]",
        "num_ids": 947,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    unique_numbers = []\n    for num in numbers:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    return unique_numbers",
        "test": "assert remove_duplicates([1, 1, 2, 2, 3, 3]) == [1, 2, 3]",
        "num_ids": 832,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()",
        "test": "assert flip_case('Hello') == 'hELLO'",
        "num_ids": 544,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)",
        "test": "assert concatenate([]) == ''",
        "num_ids": 426,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 656,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 841,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert is_prime(6) == False",
        "num_ids": 496,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2!= 0:\n        raise ValueError(\"Coefficients must have even length.\")\n    non_zero_coeff = max(filter(lambda x: x!= 0, xs))\n    xs = [coeff / non_zero_coeff for coeff in xs] # normalize the coefficients\n    for i in range(len(xs)):\n        if i == 0 or i == len(xs) - 1:\n            continue # skip first and last coefficients\n        if xs[i] == 0:\n            return None # all coefficients are zero\n    # use the quadratic formula to find the roots\n    a, b, c = xs[0], xs[1], xs[-1]\n    delta = b**2 - 4 * a * c\n    if delta < 0:\n        return None # no real roots\n    elif delta == 0:\n        return -b / (2 * a)\n    else:\n        x1 = (-b + math.sqrt(delta)) / (2 * a)\n        x2 = (-b - math.sqrt(delta)) / (2 * a)\n        return x1, x2\n\nif __name__ == '__main__':\n    xs = [-6, 11, -6, 1]\n    zero_point = find_zero(xs)\n    if zero_point is None:\n        print(\"No zero point found.\")\n    elif isinstance(zero_point, (list, tuple)):\n        print(\"Multiple zero points found.\")\n        for x in zero_point:\n            print(x)\n    else:\n        print(f\"Zero point found at {zero_point}.\")",
        "test": "assert find_zero([-6, 11, -6, 1]) == 1.0",
        "num_ids": 1852,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    new_list = []\n    for i in range(len(l)):\n        if i % 3!= 0:\n            new_list.append(l[i])\n        else:\n            new_list.append(sorted(l)[i//3])\n    return new_list",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 1292,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 645,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -5\n    \"\"\"\n    max_num = float('-inf')\n    has_positive = False\n    has_negative = False\n    \n    for num in l:\n        if num > max_num:\n            max_num = num\n        if num > 0:\n            has_positive = True\n        elif num < 0:\n            has_negative = True\n            \n    if has_positive and has_negative:\n        return max_num\n    else:\n        return max(l, key=abs) # Return the maximum absolute value",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 719,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count",
        "test": "assert fizz_buzz(50) == 0",
        "num_ids": 612,
        "indeed": true
    },
    {
        "number": 37,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    # Initialize a new list to store the sorted even elements\n    sorted_even = []\n    # Iterate over the list l\n    for i in range(len(l)):\n        # If the index i is even, append the value at the index i to the sorted_even list\n        if i % 2 == 0:\n            sorted_even.append(l[i])\n    # Sort the sorted_even list in ascending order\n    sorted_even.sort()\n    # Initialize a new list l'\n    l_prime = []\n    # Iterate over the list l again\n    for i in range(len(l)):\n        # If the index i is odd, append the value at the index i to the l_prime list\n        if i % 2!= 0:\n            l_prime.append(l[i])\n        # If the index i is even, append the value at the index i in the sorted_even list to the l_prime list\n        elif i % 2 == 0:\n            l_prime.append(sorted_even[i//2])\n    # Return the l_prime list\n    return l_prime",
        "test": "assert sort_even([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 1363,
        "indeed": true
    },
    {
        "number": 38,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # un-cycle elements in each group.\n    groups = [(group[-1:] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "test": "assert decode_cyclic(encode_cyclic(\"abcd\")) == \"abcd\"",
        "num_ids": 1200,
        "indeed": true
    },
    {
        "number": 39,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_prime(num):\n    \"\"\"\n    is_prime returns True if a number is prime, otherwise False.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        fib = [2, 3]\n        for i in range(2, n):\n            fib.append(fib[i-1] + fib[i-2])\n        for num in fib:\n            if is_prime(num):\n                return num\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
        "test": "assert prime_fib(1) == 2",
        "num_ids": 1000,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 1608,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Initialize a count variable to keep track of collisions\n    collision_count = 0\n    \n    # Create a list to store the positions of the cars\n    car_positions = [0] * n\n    \n    # Iterate over each car and move it towards the center of the road\n    for i in range(n):\n        car_positions[i] -= i\n        \n    # Iterate over each pair of cars and check if they collide\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(car_positions[i]) == abs(car_positions[j]):\n                collision_count += 1\n    \n    # Return the count of collisions\n    return collision_count",
        "test": "assert car_race_collision(1) == 0",
        "num_ids": 1411,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x + 1 for x in l]",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 978,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False",
        "test": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 969,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = digits[remainder] + result\n        x //= base\n    return result if result else \"0\"",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 906,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n",
        "test": "assert triangle_area(5, 3) == 7.5",
        "num_ids": 447,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        fib_prev_prev = 0\n        fib_prev = 0\n        fib = 2\n        for i in range(3, n+1):\n            fib = fib_prev + fib_prev_prev + fib_prev + fib_prev_prev\n            fib_prev_prev = fib_prev\n            fib_prev = fib\n        return fib",
        "test": "assert fib4(0) == 0",
        "num_ids": 1145,
        "indeed": false
    },
    {
        "number": 47,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def median(l: list) -> float:\n    \"\"\"Return median of elements in the list l.\"\"\"\n    n = len(l)\n    sorted_l = sorted(l)\n    if n % 2 == 0:\n        return (sorted_l[n//2-1] + sorted_l[n//2]) / 2\n    else:\n        return sorted_l[n//2]\n",
        "test": "assert median([3, 1, 2, 4, 5]) == 3",
        "num_ids": 780,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text.lower() == text[::-1].lower()\n",
        "test": "assert is_palindrome('') == True",
        "num_ids": 538,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    res = 1\n    for i in range(n):\n        res = (res * 2) % p\n    return res",
        "test": "assert modp(3, 5) == 3",
        "num_ids": 591,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hello\"",
        "num_ids": 780,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for char in text:\n        if char.lower() not in vowels:\n            result += char\n    return result",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 862,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True",
        "num_ids": 672,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    \n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y",
        "test": "assert add(2, 3) == 5",
        "num_ids": 340,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    # convert strings to sets to remove duplicates\n    set0 = set(s0)\n    set1 = set(s1)\n    # check if sets have same elements\n    return set0 == set1",
        "test": "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
        "num_ids": 917,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Negative arguments are not supported\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)",
        "test": "assert fib(1) == 1",
        "num_ids": 490,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n    stack = []\n    for b in brackets:\n        if b == \"<\":\n            stack.append(b)\n        elif b == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "test": "assert correct_bracketing(\"<\") == False",
        "num_ids": 510,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] > l[i+1]:\n            return False\n    return True",
        "test": "assert monotonic([1, 2, 4, 20]) == True",
        "num_ids": 946,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def common(l1, l2):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    common_elements = []\n    for element in l1:\n        if element in l2 and element not in common_elements:\n            common_elements.append(element)\n    return sorted(set(common_elements))",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 1270,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n",
        "test": "assert largest_prime_factor(2048) == 2",
        "num_ids": 901,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return sum(range(1, n+1))\n\nif __name__ == \"__main__\":\n    print(sum_to_n(30))  # Output: 465\n    print(sum_to_n(100))  # Output: 5050\n    print(sum_to_n(5))  # Output: 15\n    print(sum_to_n(10))  # Output: 55\n    print(sum_to_n(1))  # Output: 1",
        "test": "assert sum_to_n(30) == 465",
        "num_ids": 714,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 544,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * xs[i] for i in range(1, len(xs))]",
        "test": "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
        "num_ids": 923,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\"\"\"\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert fibfib(0) == 0",
        "num_ids": 1034,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def vowels_count(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for letter in s:\n        if letter.lower() in vowels:\n            count += 1\n    if s.lower().endswith('y') and s[-2].isalpha():\n        count += 1\n    return count",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 765,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]",
        "test": "assert circular_shift(12, 1) == \"21\"",
        "num_ids": 883,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def digitSum(s):\n    \"\"\"\n    Calculates the sum of the ASCII codes of the upper-case characters in a given string.\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c)\n    return sum",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 740,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    \"\"\"\n    # Split the given string to get the number of apples and oranges\n    a, o = s.split()\n\n    # Convert the strings to integers\n    a = int(a[:-1])\n    o = int(o[:-1])\n\n    # Calculate the total number of fruits in the basket\n    total = a + o\n\n    # Calculate the number of mango fruits in the basket\n    mango = n - total\n\n    return mango",
        "test": "assert fruit_distribution(\"0 apples and 1 oranges\",3) == 2",
        "num_ids": 1140,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def pluck(arr):\n    if not arr:\n        return []\n    smallest_even = float('inf')\n    smallest_even_index = -1\n    smallest_index = float('inf')\n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest_even:\n            smallest_even = node\n            smallest_even_index = i\n        if node < smallest_index:\n            smallest_index = i\n    if smallest_even_index!= -1:\n        return [smallest_even, smallest_even_index]\n    else:\n        return []",
        "test": "assert pluck([4,2,3]) == [2, 1]",
        "num_ids": 1664,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def search(lst):\n    \"\"\"\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    \"\"\"\n    freq_dict = {}\n    max_freq = 0\n    max_num = -1\n    \n    for num in lst:\n        if num > 0:\n            if num not in freq_dict:\n                freq_dict[num] = 1\n            else:\n                freq_dict[num] += 1\n            \n            if freq_dict[num] >= num and freq_dict[num] > max_freq:\n                max_freq = freq_dict[num]\n                max_num = num\n    \n    if max_num == -1:\n        return -1\n    else:\n        return max_num",
        "test": "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3",
        "num_ids": 1096,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    \n    min_val = min(lst)\n    new_lst = [min_val]\n    lst.remove(min_val)\n    \n    while lst:\n        max_val = max(lst)\n        new_lst.append(max_val)\n        lst.remove(max_val)\n        \n        if not lst:\n            break\n        \n        min_val = min(lst)\n        new_lst.append(min_val)\n        lst.remove(min_val)\n    \n    return new_lst",
        "test": "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]",
        "num_ids": 1594,
        "indeed": true
    },
    {
        "number": 71,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a+b>c and b+c>a and c+a>b:\n        s = (a+b+c)/2\n        area = math.sqrt(s*(s-a)*(s-b)*(s-c))\n        return round(area, 2)\n    else:\n        return -1",
        "test": "assert triangle_area(3, 4, 5) == 6.00",
        "num_ids": 1112,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def will_it_fly(q, w):\n    \"\"\"\n    Returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    \"\"\"\n    if sum(q) > w:\n        return False\n    if q == q[::-1]:\n        return True\n    return False",
        "test": "assert will_it_fly([1, 2], 5) == False # 1+2 is less than the maximum possible weight, but it's unbalanced.",
        "num_ids": 1457,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    # Count the number of elements in the array that need to be changed\n    count = 0\n    for i in range(n // 2):\n        if arr[i]!= arr[n - i - 1]:\n            count += 1\n    # Return the minimum number of changes required\n    return count\n",
        "test": "assert smallest_change([1,2,3,5,4,7,9,6]) == 4",
        "num_ids": 1484,
        "indeed": true
    },
    {
        "number": 74,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    If the two lists have the same number of chars, return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n    >>> total_match(['hi', 'admin'], ['hI', 'Hi'])\n    ['hI', 'Hi']\n    >>> total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ['hi', 'admin']\n    >>> total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\n    ['hI', 'hi', 'hi']\n    >>> total_match(['4'], ['1', '2', '3', '4', '5'])\n    ['4']\n    \"\"\"\n\n    lst1_len = sum(len(s) for s in lst1)\n    lst2_len = sum(len(s) for s in lst2)\n\n    if lst1_len == lst2_len:\n        return lst1\n\n    if lst1_len < lst2_len:\n        return lst1\n\n    return lst2",
        "test": "assert total_match([], []) == []",
        "num_ids": 1952,
        "indeed": true
    },
    {
        "number": 75,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is prime, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    \"\"\"Return True if a is the multiplication of 3 prime numbers, False otherwise.\"\"\"\n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and is_prime(a // i):\n            count += 1\n            if count == 3:\n                return True\n    return False",
        "test": "assert is_multiply_prime(30) == False",
        "num_ids": 1184,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int(log(x)/log(n))=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    import math\n    if x == 1:\n        return False\n    elif x == n:\n        return True\n    elif n == 1:\n        return False\n    elif math.log(x, n) % 1!= 0:\n        return False\n    else:\n        return x == n**int(math.log(x, n))",
        "test": "assert is_simple_power(2, 2) == True, \"x=2, n=2\"",
        "num_ids": 1012,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n\n    # check if the input is 0 or a negative integer\n    if a <= 0:\n        return True\n    \n    # check if the input is an integer\n    if a!= int(a):\n        return False\n    \n    # find the cube root of the input\n    cube_root = a ** (1/3)\n    \n    # check if the cube root is an integer\n    if cube_root!= int(cube_root):\n        return False\n    \n    # check if the cube root is equal to the input\n    if cube_root ** 3 == a:\n        return True\n    \n    # otherwise, the input is not a cube\n    return False",
        "test": "assert iscube(1) == True",
        "num_ids": 756,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    \"\"\"Count the number of hexadecimal digits that are primes.\"\"\"\n    count = 0\n    for digit in num:\n        if is_prime(int(digit, 16)):\n            count += 1\n    return count",
        "test": "assert hex_key(\"AB\") == 1, \"Failed for AB\"",
        "num_ids": 700,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\n    # Convert decimal to binary and store in a string\n    binary = bin(decimal)[2:]\n\n    # Add 'db' characters at the beginning and end of the string to indicate the start and end of the binary number\n    binary = 'db' + binary + 'db'\n\n    return binary",
        "test": "assert decimal_to_binary(15) == \"db1111db\"",
        "num_ids": 1252,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    seen = set()\n    for i in range(len(s)):\n        if i % 3 == 2:\n            return False\n        if s[i] in seen:\n            return False\n        seen.add(s[i])\n    return True",
        "test": "assert is_happy('a') == False",
        "num_ids": 872,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n         > 3.3                A- \n         > 3.0                B+\n         > 2.7                B \n         > 2.3                B-\n         > 2.0                C+\n         > 1.7                C\n         > 1.3                C-\n         > 1.0                D+ \n         > 0.7                D \n         > 0.0                D-\n              0.0                E\n\n    Example:\n    numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for g in grades:\n        if g == 4.0:\n            letter_grades.append('A+')\n        elif g > 3.7:\n            letter_grades.append('A')\n        elif g > 3.3:\n            letter_grades.append('A-')\n        elif g > 3.0:\n            letter_grades.append('B+')\n        elif g > 2.7:\n            letter_grades.append('B')\n        elif g > 2.3:\n            letter_grades.append('B-')\n        elif g > 2.0:\n            letter_grades.append('C+')\n        elif g > 1.7:\n            letter_grades.append('C')\n        elif g > 1.3:\n            letter_grades.append('C-')\n        elif g > 1.0:\n            letter_grades.append('D+')\n        elif g > 0.7:\n            letter_grades.append('D')\n        elif g > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades",
        "test": "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']",
        "num_ids": 3201,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\"\"\"\n    return is_prime(len(string))",
        "test": "assert prime_length('Hello') == True, \"prime_length('Hello') should return True\"",
        "num_ids": 688,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count",
        "test": "assert starts_one_ends(1) == 1",
        "num_ids": 788,
        "indeed": true
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solve(N):\n    # convert N to binary string\n    binary_str = bin(N)[2:]\n    \n    # initialize sum of digits to 0\n    sum_digits = 0\n    \n    # iterate over each character in binary string\n    for char in binary_str:\n        # if the character is a digit, add it to sum_digits\n        if char.isdigit():\n            sum_digits += int(char)\n    \n    # return the sum of digits as a binary string\n    return bin(sum_digits)[2:]",
        "test": "assert solve(150) == \"110\"",
        "num_ids": 1092,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\"\"\"\n    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total",
        "test": "assert add([1, 3, 5, 7]) == 0",
        "num_ids": 732,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def anti_shuffle(s):\n    words = s.split()\n    sorted_words = [\"\".join(sorted(word)) for word in words]\n    return \" \".join(sorted_words)",
        "test": "assert anti_shuffle('Hi') == 'Hi'",
        "num_ids": 744,
        "indeed": true
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i,j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result",
        "test": "assert get_row([",
        "num_ids": 1102,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n    \n    # Calculate the sum of the first and last indices\n    sum_first_last = array[0] + array[-1]\n    \n    # Determine the sorting order based on the sum of the first and last indices\n    if sum_first_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)",
        "test": "assert sort_array([5]) == [5]",
        "num_ids": 1664,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # Create a dictionary to map each letter to its new position\n    # in the rotated alphabet\n    rotated = {}\n    for i, c in enumerate(s):\n        rotated[c] = chr((ord(c) - 97 + 2*2) % 26 + 97)\n\n    # Create a new string by mapping each letter to its new position\n    # in the rotated alphabet\n    result = ''\n    for c in s:\n        result += rotated[c]\n\n    return result",
        "test": "assert encrypt('hi') == 'lm'",
        "num_ids": 1439,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if not lst:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n            \n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest",
        "test": "assert next_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 1084,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    count = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words) > 0 and words[0] == 'I':\n            count += 1\n    return count",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 772,
        "indeed": true
    },
    {
        "number": 92,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def any_int(x, y, z):\n    if type(x)!= int or type(y)!= int or type(z)!= int:\n        return False\n    elif x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False",
        "test": "assert any_int(5, 2, 7) == True",
        "num_ids": 848,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            index = vowels.find(letter)\n            new_letter = vowels[index+2] if index+2 < len(vowels) else vowels[0]\n            new_message += new_letter\n        elif letter.isalpha():\n            new_letter = letter.swapcase()\n            new_message += new_letter\n        else:\n            new_message += letter\n    return new_message",
        "test": "assert encode('This is a message') == 'tHKS KS C MGSSCGG'",
        "num_ids": 1117,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    largest_prime = max(filter(is_prime, lst))\n    return sum_of_digits(largest_prime)",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
        "num_ids": 1333,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not dict:\n        return False\n    \n    all_keys_lower = True\n    all_keys_upper = True\n    \n    for key in dict:\n        if isinstance(key, str):\n            if key!= key.lower():\n                all_keys_lower = False\n            elif key!= key.upper():\n                all_keys_upper = False\n        else:\n            return False\n    \n    if all_keys_lower or all_keys_upper:\n        return True\n    else:\n        return False",
        "test": "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
        "num_ids": 1223,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n            if len(primes) == n:\n                return primes\n    return primes",
        "test": "assert count_up_to(5) == [2, 3]",
        "num_ids": 1043,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    a_unit_digit = a % 10\n    b_unit_digit = b % 10\n    \n    return a_unit_digit * b_unit_digit",
        "test": "assert multiply(148, 412) == 16",
        "num_ids": 1063,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in ['A', 'E', 'I', 'O', 'U']:\n            count += 1\n    return count",
        "test": "assert count_upper('aBCdEf') == 1, \"count_upper('aBCdEf') should return 1\"",
        "num_ids": 751,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    num = float(value)\n    if num.is_integer():\n        return int(num)\n    else:\n        if num >= 0:\n            return int(num + 0.5)\n        else:\n            return int(num - 0.5)",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 1139,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    pile = [n]\n    for i in range(n-1):\n        if pile[-1] % 2 == 0:\n            pile.append(pile[-1] + 1)\n        else:\n            pile.append(pile[-1] + 2)\n    return pile",
        "test": "assert make_a_pile(1) == [1]",
        "num_ids": 1164,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Split the string into words using comma or space separator\n    words = s.split(\", \")\n    if len(words) == 1:\n        words = s.split()\n\n    # Return the array of words\n    return words",
        "test": "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
        "num_ids": 1024,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1",
        "test": "assert choose_num(13, 12) == -1",
        "num_ids": 912,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        rounded_avg = round(avg)\n        binary = bin(rounded_avg)[2:]\n        return \"0b\" + binary",
        "test": "assert rounded_avg(1, 5) == \"0b11\"",
        "num_ids": 1041,
        "indeed": true
    },
    {
        "number": 104,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    unique_list = []\n\n    for num in x:\n        digits = str(num)\n        has_even = False\n\n        for digit in digits:\n            if int(digit) % 2 == 0:\n                has_even = True\n                break\n\n        if not has_even:\n            unique_list.append(num)\n\n    unique_list.sort()\n    return unique_list",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
        "num_ids": 1147,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # Create a list of names for each digit from \"One\" to \"Nine\"\n    names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n\n    # Filter the array to keep only numbers between 1 and 9\n    arr = list(filter(lambda x: 1 <= x <= 9, arr))\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Reverse the sorted array\n    arr.reverse()\n\n    # Replace each digit with its corresponding name from \"One\" to \"Nine\"\n    for i in range(len(arr)):\n        arr[i] = names[arr[i]-1]\n\n    # Return the modified array\n    return arr",
        "test": "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]",
        "num_ids": 2551,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result",
        "test": "assert f(5) == [1, 2, 6, 24, 15]",
        "num_ids": 1140,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_palindrome(n):\n    \"\"\"\n    Helper function to check if a number is a palindrome\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i) and i%2 == 0:\n            even_count += 1\n        elif is_palindrome(i) and i%2 == 1:\n            odd_count += 1\n    return (even_count, odd_count)",
        "test": "assert even_odd_palindrome(3) == (1, 2)",
        "num_ids": 1230,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num > 0:\n            digits_sum = sum(int(digit) for digit in str(abs(num)))\n            if digits_sum > 0:\n                count += 1\n    return count",
        "test": "assert count_nums([]) == 0",
        "num_ids": 887,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def move_one_ball(arr):\n    if not arr:\n        return True\n    n = len(arr)\n    i, j = 0, n-1\n    while i < j:\n        if arr[i] > arr[j]:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        else:\n            i += 1\n    return arr == sorted(arr)",
        "test": "assert move_one_ball([3, 5, 4, 1, 2])==False",
        "num_ids": 995,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    even_lst1 = [num for num in lst1 if num % 2 == 0]\n    even_lst2 = [num for num in lst2 if num % 2 == 0]\n    if set(even_lst1)!= set(even_lst2):\n        return \"NO\"\n    return \"YES\"",
        "test": "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"",
        "num_ids": 2144,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Split the input string into a list of characters\n    chars = test.split()\n\n    # Create an empty dictionary to store the results\n    result = {}\n\n    # Iterate through the characters and update the dictionary accordingly\n    for char in chars:\n        if char in result:\n            result[char] += 1\n        else:\n            result[char] = 1\n\n    # Find the maximum count\n    max_count = max(result.values())\n\n    # Create a new dictionary with the characters with the maximum count\n    max_chars = {key: value for key, value in result.items() if value == max_count}\n\n    return max_chars",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
        "num_ids": 1831,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def reverse_delete(s, c):\n    s_new = \"\"\n    for char in s:\n        if char not in c:\n            s_new += char\n    s_new = s_new.lower()\n    return s_new, s_new == s_new[::-1]",
        "test": "assert reverse_delete(\"abcde\", \"ae\") == ('bcd',False)",
        "num_ids": 601,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4 in the string 4 of the input.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1 in the string 1 of the input.\",\n     \"the number of odd elements 8 in the string 8 of the input.\"]\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        count = 0\n        for j in lst[i]:\n            if int(j) % 2!= 0:\n                count += 1\n        result.append(f\"the number of odd elements {count} in the string {i+1} of the input.\")\n    return result",
        "test": "assert odd_count(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",",
        "num_ids": 1687,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n = len(nums)\n    prefix_sum = [0] * (n + 1)\n    min_sum = float('inf')\n\n    # compute prefix sum\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + nums[i - 1]\n\n    # find the minimum subarray sum\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            cur_sum = prefix_sum[j] - prefix_sum[i - 1]\n            if cur_sum < min_sum:\n                min_sum = cur_sum\n\n    return min_sum",
        "test": "assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1",
        "num_ids": 1168,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def max_fill(grid, capacity):\n    import math\n    m, n = len(grid), len(grid[0])\n    count = 0\n    \n    # Calculate the minimum amount of water required to fill each well\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                water = 1\n                for x in range(i, m):\n                    if grid[x][j] == 1:\n                        break\n                    water += 1\n                for y in range(j, n):\n                    if grid[i][y] == 1:\n                        break\n                    water += 1\n                water = math.ceil(water/2)\n                count += water\n    \n    # Calculate the number of times we need to lower the buckets\n    buckets = count // capacity\n    if count % capacity!= 0:\n        buckets += 1\n    \n    return buckets",
        "test": "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6",
        "num_ids": 1686,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def num_ones(n):\n        count = 0\n        while n > 0:\n            if n & 1:\n                count += 1\n            n >>= 1\n        return count\n\n    def key(n):\n        return (num_ones(n), n)\n\n    return sorted(arr, key=key)",
        "test": "assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]",
        "num_ids": 1468,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if not s:\n        return []\n    \n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    words = s.split()\n    result = []\n    \n    for word in words:\n        count = 0\n        for letter in word:\n            if letter in consonants:\n                count += 1\n        if count == n:\n            result.append(word)\n    \n    return result",
        "test": "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
        "num_ids": 1297,
        "indeed": true
    },
    {
        "number": 118,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n    \n    You may assume that the given string contains English letter only.\n    \n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    closest_vowel = ''\n    for i in range(len(word)):\n        if word[i].lower() in vowels and (closest_vowel == '' or abs(i - len(word)) < abs(i - closest_vowel)):\n            closest_vowel = i\n    \n    return word[closest_vowel].upper() if closest_vowel!= '' else ''",
        "test": "assert get_closest_vowel(\"FULL\") == \"U\"",
        "num_ids": 1248,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def match_parens(lst):\n    s1 = lst[0]\n    s2 = lst[1]\n    stack = []\n    for c in s1 + s2:\n        if c == '(':\n            stack.append('(')\n        elif c == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    if stack:\n        return 'No'\n    return 'Yes'",
        "test": "assert match_parens([')', ')']) == 'No'",
        "num_ids": 867,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    n = len(arr)\n    if k == n:\n        return sorted(arr)\n    elif k == 1:\n        return [max(arr)]\n    else:\n        # Find the index of the smallest element in the array\n        smallest_idx = arr.index(min(arr))\n        # Partition the array around the smallest element\n        left = arr[:smallest_idx]\n        mid = arr[smallest_idx]\n        right = arr[smallest_idx+1:]\n        # Recursively find the maximum subarray of length k-1 in the left and right partitions\n        left_max = maximum(left, k-1)\n        right_max = maximum(right, k-1)\n        # Merge the maximum subarrays and return the result\n        return sorted(left_max + [mid] + right_max)",
        "test": "assert maximum([-3, -4, 5], 3) == [-4, -3, 5]",
        "num_ids": 1600,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2!= 0:\n            total += lst[i]\n    return total",
        "test": "assert solution([5, 8, 7, 1]) == 12",
        "num_ids": 855,
        "indeed": true
    },
    {
        "number": 122,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    result = 0\n    count = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            result += arr[i]\n            count += 1\n    return result",
        "test": "assert add_elements([1, 2, 3, 4, 5], 3) == 6",
        "num_ids": 1250,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    odd_collatz = []\n    while n!= 1:\n        if n % 2 == 1:\n            odd_collatz.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    odd_collatz.append(1)\n    return sorted(odd_collatz)",
        "test": "assert get_odd_collatz(5) == [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.",
        "num_ids": 1861,
        "indeed": true
    },
    {
        "number": 124,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def valid_date(date):\n    \"\"\"Validates a given date string and returns True if the date is valid otherwise False\"\"\"\n\n    # Split the date string into month, day, and year parts\n    month, day, year = date.split('-')\n\n    # Convert the parts to integers\n    month, day, year = int(month), int(day), int(year)\n\n    # Check if the date string is not empty\n    if not date:\n        return False\n\n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the day is valid for the given month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if year % 4 == 0:\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n\n    # Check if the year is valid\n    if len(str(year))!= 4:\n        return False\n\n    # If all the checks pass, the date is valid\n    return True",
        "test": "assert valid_date('03-11-2000') == True",
        "num_ids": 2132,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def split_words(txt):\n    if ',' in txt:\n        return txt.split(',')\n    elif'' in txt:\n        return txt.split()\n    else:\n        count = 0\n        for i in range(26):\n            if ord(chr(i)) % 2 == 1:\n                count += 1\n        return count",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 673,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    if len(set(lst))!= len(lst):\n        return False\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 1638,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(n):\n    \"\"\"\n    Function to check if a given number is prime or not\n    \"\"\"\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"\n    Function to find the intersection of two intervals\n    \"\"\"\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n        end = min(interval1[1], interval2[1])\n        length = end - start + 1\n        if is_prime(length):\n            return \"YES\"\n        else:\n            return \"NO\"",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\"",
        "num_ids": 1423,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def prod_signs(arr):\n    if not arr:\n        return None\n    total_mag = 0\n    product_signs = 1\n    for num in arr:\n        mag = abs(num)\n        total_mag += mag\n        product_signs *= (1 if num > 0 else -1 if num < 0 else 0)\n    return total_mag * product_signs",
        "test": "assert prod_signs([1, 2, 2, -4]) == -9",
        "num_ids": 982,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def minPath(grid, k):\n    n = len(grid)\n    INF = float('inf')\n    dp = [[INF] * n for _ in range(n)]\n    dp[0][0] = 0\n    for i in range(n):\n        for j in range(n):\n            if i > 0:\n                dp[i][j] = min(dp[i][j], dp[i-1][j] + grid[i][j])\n            if j > 0:\n                dp[i][j] = min(dp[i][j], dp[i][j-1] + grid[i][j])\n    path = [grid[0][0]]\n    for _ in range(k-1):\n        i, j = max(enumerate([dp[i][j] for i in range(n) for j in range(n)]), key=lambda x: x[1])[0] // n, max(enumerate([dp[i][j] for i in range(n) for j in range(n)]), key=lambda x: x[1])[0] % n\n        path.append(grid[i][j])\n        dp[i][j] = -INF\n    path.sort()\n    return path",
        "test": "assert minPath([ [5,9,3], [4,1,6], [7,8,2]], 1) == [1]",
        "num_ids": 3202,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def tri(n):\n    \"\"\"Returns a list of the first n+1 numbers of the Tribonacci sequence.\"\"\"\n    sequence = [1]\n    if n > 0:\n        sequence += [3]\n        for i in range(2, n):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i+1])\n    return sequence",
        "test": "assert tri(1) == [1, 1, 2]",
        "num_ids": 1803,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n        n //= 10\n    return 0 if product == 1 else product",
        "test": "assert digits(4) == 0",
        "num_ids": 662,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack)!= 0",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False",
        "num_ids": 549,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    \"\"\"\n    result = 0\n    for num in lst:\n        result += math.ceil(num)**2\n    return result\n\nprint(sum_squares([1,2,3])) # Output: 14\nprint(sum_squares([1,4,9])) # Output: 98\nprint(sum_squares([1,3,5,7])) # Output: 84\nprint(sum_squares([1.4,4.2,0])) # Output: 29\nprint(sum_squares([-2.4,1,1])) # Output: 6",
        "test": "assert sum_squares([1,2,3]) == 14",
        "num_ids": 865,
        "indeed": true
    },
    {
        "number": 134,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False\n    '''\n    if len(txt) == 0:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and txt[-2].isspace():\n        return True\n    return False",
        "test": "assert check_if_last_char_is_a_letter(\"apple pie\") == False",
        "num_ids": 951,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def can_arrange(arr):\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] >= arr[i+1]:\n            for j in range(i+1, n):\n                if arr[i] < arr[j]:\n                    return j-1\n    return -1",
        "test": "assert can_arrange([1,2,3]) == -1",
        "num_ids": 652,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    \n    neg_max = pos_min = None\n    \n    for num in lst:\n        if num < 0:\n            if neg_max is None or num > neg_max:\n                neg_max = num\n        elif num > 0:\n            if pos_min is None or num < pos_min:\n                pos_min = num\n                \n    return (neg_max, pos_min)",
        "test": "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
        "num_ids": 1439,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if a == b:\n        return None\n    elif type(a) == type(b):\n        return max(a, b)\n    else:\n        return max(a, b, key=float)",
        "test": "assert compare_one(1, 2.5) == 2.5",
        "num_ids": 1414,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    if n < 8 or n % 2 == 1:\n        return False\n    evens = [2, 4, 6, 8]\n    evens.sort()\n    nums = [1, 3, 5, 7]\n    nums.sort()\n    count = 0\n    for e in evens:\n        while e <= n and nums:\n            n -= e\n            nums.pop(0)\n            count += 1\n            if count == 4:\n                return True\n        if n < 8:\n            return False\n    return False",
        "test": "assert is_equal_to_sum_even(4) == False",
        "num_ids": 893,
        "indeed": true
    },
    {
        "number": 139,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    factorial = 1\n    for i in range(n, 0, -1):\n        factorial *= i\n    return factorial\n",
        "test": "assert special_factorial(1) == 1",
        "num_ids": 794,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    while \"  \" in text:\n        text = text.replace(\"  \", \"-\")\n    text = text.replace(\" \", \"_\")\n    return text",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 707,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Split the file name into two parts: before the dot and after the dot\n    parts = file_name.split(\".\")\n    # Check if there are more than three digits in the file name\n    if any(char.isdigit() for char in file_name):\n        return \"No\"\n    # Check if the file name contains exactly one dot\n    if len(parts)!= 2:\n        return \"No\"\n    # Check if the substring before the dot starts with a letter from the latin alphabet\n    if not parts[0][0].isalpha():\n        return \"No\"\n    # Check if the substring after the dot is one of the allowed extensions\n    if parts[1] not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    # If all checks passed, return \"Yes\"\n    return \"Yes\"",
        "test": "assert file_name_check(\"example.txt\") == \"Yes\"",
        "num_ids": 1735,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            lst[i] = lst[i] ** 3\n        total += lst[i]\n    return total",
        "test": "assert sum_squares([1,2,3]) == 6, \"Failed Example 1\"",
        "num_ids": 1334,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(num):\n    \"\"\"\n    A function to check if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n    \"\"\"\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return \" \".join(result)",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\"",
        "num_ids": 1028,
        "indeed": true
    },
    {
        "number": 144,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num*n_den) % x_den == 0",
        "test": "assert simplify(\"1/6\", \"2/1\") == False",
        "num_ids": 1244,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Sorts the given list of integers in ascending order according to the sum of their digits.\n    If there are several items with similar sum of their digits, orders them based on their index in original list.\n    \"\"\"\n    def sum_of_digits(n):\n        \"\"\"\n        Returns the sum of the digits of the given integer.\n        \"\"\"\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    nums = sorted(nums, key=lambda n: (sum_of_digits(n), nums.index(n)))\n    return nums",
        "test": "assert order_by_points([]) == []",
        "num_ids": 1071,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def specialFilter(nums):\n    \"\"\"\n    Returns the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 % 2 == 1 and num // 10 % 2 == 1:\n            count += 1\n    return count",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1",
        "num_ids": 754,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count",
        "test": "assert get_max_triples(5) == 1",
        "num_ids": 1016,
        "indeed": true
    },
    {
        "number": 148,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    \n    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    return tuple(planets[index1+1:index2])",
        "test": "assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")",
        "num_ids": 1717,
        "indeed": true
    },
    {
        "number": 149,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sorted_list_sum(lst):\n    # filter out odd-length strings\n    lst = filter(lambda s: len(s) % 2 == 0, lst)\n    # sort by length and then alphabetically\n    lst = sorted(lst, key=lambda s: (len(s), s))\n    return lst",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 1143,
        "indeed": true
    },
    {
        "number": 150,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is a prime number, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"Return the value of x if n is a prime number, y otherwise.\"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y",
        "test": "assert x_or_y(7, 34, 12) == 34",
        "num_ids": 929,
        "indeed": true
    },
    {
        "number": 151,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    '''\n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2!= 0:\n            result += num ** 2\n    return result",
        "test": "assert double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 == 10, \"Test case 1 failed\"",
        "num_ids": 1059,
        "indeed": true
    },
    {
        "number": 152,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def compare(game, guess):\n    \"\"\"\n    Compare a game result with a guess.\n    Return a list of differences between the guess and the game result.\n    \"\"\"\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 1042,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    strongest = ''\n    max_strength = -1\n    for extension in extensions:\n        cap_count = extension.count(chr(65)) + extension.count(chr(97))\n        sm_count = extension.count(chr(32))\n        if (cap_count - sm_count) > max_strength:\n            max_strength = cap_count - sm_count\n            strongest = extension\n    return f\"{class_name}.{strongest}\"\n",
        "test": "assert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'",
        "num_ids": 1722,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\"\"\"\n    if b in a:\n        return True\n    else:\n        b_rotated = b[1:] + b[0] # rotate b\n        if b_rotated in a:\n            return True\n        else:\n            return False",
        "test": "assert cycpattern_check(\"abcd\",\"abd\") == False",
        "num_ids": 985,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    even_count = 0\n    odd_count = 0\n\n    # Check if the number is negative or not\n    if num < 0:\n        num = abs(num)\n\n    # Loop through each digit of the number\n    while num > 0:\n        digit = num % 10\n\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        num = num // 10\n\n    return (even_count, odd_count)",
        "test": "assert even_odd_count(123) == (1, 2)",
        "num_ids": 831,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    True\n    >>> int_to_mini_roman(152) == 'clii'\n    True\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    True\n    \"\"\"\n    roman_numeral_map = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', \n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000:'m'\n    }\n    result = ''\n    for value, numeral in sorted(roman_numeral_map.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()",
        "test": "assert int_to_mini_roman(19) == 'xix'",
        "num_ids": 1863,
        "indeed": true
    },
    {
        "number": 157,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\n\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Check if it's a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    # Check if the triangle is right-angled\n    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2:\n        return True\n    # Check if the triangle is obtuse\n    if a**2 + b**2 < c**2 or b**2 + c**2 < a**2 or c**2 + a**2 < b**2:\n        return False\n    # Check if the triangle is acute\n    return True\n",
        "test": "assert right_angle_triangle(1, 2, 3) == False",
        "num_ids": 1341,
        "indeed": false
    },
    {
        "number": 158,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_max(words):\n    max_word = \"\"\n    max_len = 0\n    \n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_len:\n            max_len = len(unique_chars)\n            max_word = word\n        elif len(unique_chars) == max_len:\n            if word < max_word:\n                max_word = word\n    \n    return max_word",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 848,
        "indeed": true
    },
    {
        "number": 159,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n    \n    Have fun :)\n    \"\"\"\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]",
        "test": "assert eat(5, 6, 10) == [11, 4]",
        "num_ids": 1965,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator = ['+', '*', '-']\n    operand = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    \n    # initialize an empty string to store the expression\n    expression = ''\n\n    # iterate through the operand list\n    for i in range(len(operand)):\n        # check if the current index is the last index\n        if i == len(operand) - 1:\n            # if it is, add the current operand to the expression\n            expression += str(operand[i])\n        else:\n            # if it isn't, add the current operand and operator to the expression\n            expression += str(operand[i]) + operator[i]\n\n    # evaluate the expression and return the result\n    return eval(expression)",
        "test": "assert do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9",
        "num_ids": 1683,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\n    # check if the string contains any letters\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            break\n\n    # if the string contains no letters, reverse the string and return it\n    if not has_letter:\n        return s[::-1]\n\n    # if the string contains letters, reverse the case of each letter and return it\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n\n    return result",
        "test": "assert solve(\"1234\") == \"4321\"",
        "num_ids": 1051,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    True\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()",
        "test": "assert string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"",
        "num_ids": 803,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # Get even digits between a and b\n    even_digits = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            even_digits.append(num)\n    return even_digits",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 1361,
        "indeed": false
    }
]