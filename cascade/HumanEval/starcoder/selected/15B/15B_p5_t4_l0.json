[
    {
        "number": 0,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
        "num_ids": 1228
    },
    {
        "number": 1,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    groups = []\n    current_group = ''\n    \n    for c in paren_string:\n        if c == '(':\n            stack.append(c)\n            current_group += c\n        elif c == ')':\n            if stack:\n                stack.pop()\n                current_group += c\n            else:\n                # Found a closing brace without an opening one, start a new group\n                groups.append(current_group)\n                current_group = ''\n        elif c.isspace():\n            # Ignore spaces in the input string\n            pass\n        else:\n            # Found a non-space character that we don't recognize\n            raise ValueError(f'Unexpected character: {c}')\n    \n    # Add the last group (if any) to the list of groups\n    if current_group:\n        groups.append(current_group)\n    \n    return groups",
        "test": "assert separate_paren_groups('') == []",
        "num_ids": 1929
    },
    {
        "number": 2,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 851
    },
    {
        "number": 3,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 708
    },
    {
        "number": 4,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
        "num_ids": 1511
    },
    {
        "number": 5,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result",
        "test": "assert intersperse([], 4) == []",
        "num_ids": 991
    },
    {
        "number": 6,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    stack = []\n    max_depth = []\n    level = 0\n    \n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            stack.append(i)\n            level += 1\n        elif paren_string[i] == ')':\n            start = stack.pop()\n            depth = level - len(stack)\n            if depth > max_depth[-1] if max_depth else True:\n                max_depth.append(depth)\n            else:\n                max_depth[-1] = depth\n            level -= 1\n    \n    return max_depth",
        "test": "assert parse_nested_parens('()') == [1]",
        "num_ids": 1199
    },
    {
        "number": 7,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 947
    },
    {
        "number": 8,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    else:\n        sum = 0\n        product = 1\n        for num in numbers:\n            sum += num\n            product *= num\n        return (sum, product)",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 1147
    },
    {
        "number": 9,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_numbers = []\n    max_so_far = numbers[0]\n    max_numbers.append(max_so_far)\n    for num in numbers[1:]:\n        if num > max_so_far:\n            max_so_far = num\n        max_numbers.append(max_so_far)\n    return max_numbers",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
        "num_ids": 1793
    },
    {
        "number": 10,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[::-1]\n    return None\n",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 1095
    },
    {
        "number": 11,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result",
        "test": "assert string_xor('010', '110') == '100'",
        "num_ids": 1260
    },
    {
        "number": 12,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str",
        "test": "assert longest(['a', 'b', 'c']) == 'a'",
        "num_ids": 1053
    },
    {
        "number": 13,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 774
    },
    {
        "number": 14,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    n = len(string)\n    prefixes = []\n    for i in range(n):\n        prefixes.append(string[:i+1])\n    return prefixes",
        "test": "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
        "num_ids": 713
    },
    {
        "number": 15,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    sequence = \"\"\n    for i in range(n+1):\n        sequence += str(i) + \" \"\n    return sequence[:-1]",
        "test": "assert string_sequence(0) == '0'",
        "num_ids": 1267
    },
    {
        "number": 16,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of \"\"\"\n    # Convert the string to lowercase\n    string = string.lower()\n    # Create an empty set to store unique characters\n    unique_chars = set()\n    # Loop through each character in the string\n    for char in string:\n        # Add the character to the set if it's not already there\n        if char not in unique_chars:\n            unique_chars.add(char)\n    # Return the size of the set\n    return len(unique_chars)",
        "test": "assert count_distinct_characters('xyzXYZ') == 3",
        "num_ids": 729
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    notes = ['o', 'o|', '.|']\n    beats = [4, 2, 1]\n    result = []\n\n    for char in music_string.strip().split():\n        for i, note in enumerate(notes):\n            if char == note:\n                result.append(beats[i])\n\n    return result",
        "test": "assert parse_music('o o|.| o| o|.|.|.|.| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
        "num_ids": 2506
    },
    {
        "number": 18,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 1018
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    nums = numbers.split()\n    nums.sort(key=lambda x: ['zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine'].index(x))\n    return''.join(nums)",
        "test": "assert sort_numbers('zero one two three four five six seven eight nine') == 'zero one two three four five six seven eight nine'",
        "num_ids": 1231
    },
    {
        "number": 20,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    # Start by sorting the list of numbers\n    sorted_numbers = sorted(numbers)\n\n    # Find the two numbers that are closest to each other\n    closest_pair = sorted_numbers[:2]\n\n    # If the second number in the sorted list is closer to the first than the first number,\n    # swap them to ensure that the first number is the smaller number in the final result\n    if abs(closest_pair[0] - sorted_numbers[1]) > abs(closest_pair[1] - closest_pair[0]):\n        closest_pair[0], closest_pair[1] = closest_pair[1], closest_pair[0]\n\n    # Return the two closest numbers in order (smaller number, larger number)\n    return (closest_pair[0], closest_pair[1])",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 1.1]) == (1.0, 1.1)",
        "num_ids": 2066
    },
    {
        "number": 21,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    if min_val == max_val:\n        return [0.0]*len(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 1873
    },
    {
        "number": 22,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return [value for value in values if isinstance(value, int)]",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 844
    },
    {
        "number": 23,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)",
        "test": "assert strlen('') == 0",
        "num_ids": 362
    },
    {
        "number": 24,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    divisor = 2\n    while divisor < n:\n        if n % divisor == 0:\n            n //= divisor\n        else:\n            divisor += 1\n    return n",
        "test": "assert largest_divisor(15) == 5",
        "num_ids": 710
    },
    {
        "number": 25,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    d = 2\n    while d * d <= n:\n        while (n % d) == 0:\n            factors.append(d)\n            n //= d\n        d += 1\n    if n > 1:\n        factors.append(n)\n    return factors",
        "test": "assert factorize(8) == [2, 2, 2]",
        "num_ids": 1066
    },
    {
        "number": 26,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result",
        "test": "assert remove_duplicates([1, 1, 2, 2, 3, 3]) == [1, 2, 3]",
        "num_ids": 1067
    },
    {
        "number": 27,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    new_string = ''\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string",
        "test": "assert flip_case('Hello') == 'hELLO'",
        "num_ids": 833
    },
    {
        "number": 28,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)",
        "test": "assert concatenate([]) == ''",
        "num_ids": 612
    },
    {
        "number": 29,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 774
    },
    {
        "number": 30,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num > 0]",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 905
    },
    {
        "number": 31,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert is_prime(6) == False",
        "num_ids": 805
    },
    {
        "number": 32,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2!= 0:\n        return None\n    n = len(xs) // 2\n    a, b = xs[:n], xs[n:]\n    if a[-1] == 0 or b[-1] == 0:\n        return None\n    for i, x in enumerate(b):\n        if x!= 0:\n            break\n    c, d = a[:i], a[i:]\n    p, q = poly(c, 0), poly(d, 0)\n    m = b[i-1] / q\n    x = m\n    if p!= 0:\n        x = m - p / q\n    return x",
        "test": "assert find_zero([0, 0, 0, 0, 0, 0]) == None # Invalid input",
        "num_ids": 1605
    },
    {
        "number": 33,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    return [elem if i % 3!= 0 else sorted(l)[i // 3] for i, elem in enumerate(l)]",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 1182
    },
    {
        "number": 34,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 887
    },
    {
        "number": 35,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    return max(l)",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 917
    },
    {
        "number": 36,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\"\"\"\n    count = 0\n    for num in range(1, n):\n        if num % 11 == 0 or num % 13 == 0:\n            count += str(num).count('7')\n    return count",
        "test": "assert fizz_buzz(50) == 0",
        "num_ids": 707
    },
    {
        "number": 37,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    evens = []\n    for i in range(0, len(l), 2):\n        evens.append(l[i])\n    evens.sort()\n    for i in range(1, len(l), 2):\n        l[i] = evens[i//2]\n    return l",
        "test": "assert sort_even([2, 4, 6, 8]) == [2, 4, 6, 8]",
        "num_ids": 1602
    },
    {
        "number": 38,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def encode_cyclic(s: str) -> str:\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # join groups back into string.\n    return \"\".join(groups)",
        "test": "assert decode_cyclic(encode_cyclic(\"ab\")) == \"ab\"",
        "num_ids": 1532
    },
    {
        "number": 39,
        "max_answer_num": 20,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def is_prime(num: int) -> bool:\n    \"\"\"\n    is_prime returns True if the given number is prime, otherwise False.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    a, b = 1, 1\n    count = 0\n    while count < n:\n        if is_prime(b):\n            count += 1\n        if count == n:\n            return b\n        a, b = b, a + b",
        "test": "assert prime_fib(1) == 2",
        "num_ids": 1208
    },
    {
        "number": 40,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    n = len(l)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "test": "assert triples_sum_to_zero([1, 2, 3, 7]) == False",
        "num_ids": 1548
    },
    {
        "number": 41,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    left_to_right = [False] * n\n    right_to_left = [False] * n\n    collisions = 0\n    \n    for i in range(n):\n        if left_to_right[i] and right_to_left[i]:\n            collisions += 1\n        left_to_right[i] = True\n        right_to_left[n-i-1] = True\n    \n    return collisions",
        "test": "assert car_race_collision(1) == 0",
        "num_ids": 1328
    },
    {
        "number": 42,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x + 1 for x in l]",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 990
    },
    {
        "number": 43,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    seen = set()\n    for i in l:\n        if -i in seen:\n            return True\n        seen.add(i)\n    return False",
        "test": "assert pairs_sum_to_zero([1, 3, -2, 1]) == False",
        "num_ids": 1322
    },
    {
        "number": 44,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result if result else \"0\"\n",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 1203
    },
    {
        "number": 45,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n",
        "test": "assert triangle_area(5, 3) == 7.5",
        "num_ids": 712
    },
    {
        "number": 46,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def fib4(n: int):\n    fib_list = [0, 0, 2, 0]  # Initializing the list with the first 4 Fibonacci numbers\n    if n < 4:\n        return fib_list[n]\n    for i in range(4, n+1):\n        fib_list.append(fib_list[i-1] + fib_list[i-2] + fib_list[i-3] + fib_list[i-4])\n    return fib_list[n]",
        "test": "assert fib4(0) == 0",
        "num_ids": 873
    },
    {
        "number": 47,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    sorted_l = sorted(l)\n    if n % 2 == 0:\n        median = (sorted_l[n//2 - 1] + sorted_l[n//2]) / 2\n    else:\n        median = sorted_l[n//2]\n    return median",
        "test": "assert median([3, 1, 2, 4, 5]) == 3",
        "num_ids": 976
    },
    {
        "number": 48,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n",
        "test": "assert is_palindrome('') == True",
        "num_ids": 703
    },
    {
        "number": 49,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p",
        "test": "assert modp(0, 101) == 1",
        "num_ids": 661
    },
    {
        "number": 50,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hello\"",
        "num_ids": 1090
    },
    {
        "number": 51,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def remove_vowels(text):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    return ''.join([char for char in text if char not in vowels])",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 757
    },
    {
        "number": 52,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True",
        "num_ids": 758
    },
    {
        "number": 53,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y",
        "test": "assert add(2, 3) == 5",
        "num_ids": 589
    },
    {
        "number": 54,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    :param s0: The first string.\n    :param s1: The second string.\n    :return: True if the two words have the same characters, False otherwise.\n    \"\"\"\n    # Convert the strings to sets to remove duplicates\n    s0_set = set(s0)\n    s1_set = set(s1)\n    \n    # Check if the sets are equal\n    return s0_set == s1_set",
        "test": "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
        "num_ids": 626
    },
    {
        "number": 55,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)",
        "test": "assert fib(10) == 55, \"Incorrect result for fib(10)\"",
        "num_ids": 695
    },
    {
        "number": 56,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for b in brackets:\n        if b == \"<\":\n            stack.append(b)\n        elif b == \">\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0",
        "test": "assert correct_bracketing(\"<\") == False",
        "num_ids": 832
    },
    {
        "number": 57,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    else:\n        if l[0] < l[1]:\n            for i in range(2, len(l)):\n                if l[i] < l[i-1]:\n                    return False\n        elif l[0] > l[1]:\n            for i in range(2, len(l)):\n                if l[i] > l[i-1]:\n                    return False\n        else:\n            return True\n    return True",
        "test": "assert monotonic([1, 2, 4, 20]) == True",
        "num_ids": 934
    },
    {
        "number": 58,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    # Convert both lists to sets to remove duplicates\n    set1 = set(l1)\n    set2 = set(l2)\n    # Find the intersection of the two sets and convert back to a list\n    common_list = sorted(list(set1.intersection(set2)))\n    return common_list",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 1236
    },
    {
        "number": 59,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n",
        "test": "assert largest_prime_factor(13195) == 29",
        "num_ids": 1218
    },
    {
        "number": 60,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result\n\nprint(sum_to_n(30)) # 465\nprint(sum_to_n(100)) # 5050\nprint(sum_to_n(5)) # 15\nprint(sum_to_n(10)) # 55\nprint(sum_to_n(1)) # 1",
        "test": "assert sum_to_n(30) == 465",
        "num_ids": 1074
    },
    {
        "number": 61,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 744
    },
    {
        "number": 62,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    n = len(xs)\n    if n == 1:\n        return [0]\n    elif n == 2:\n        return [xs[1]]\n    else:\n        d = []\n        for i in range(1, n):\n            d.append(i * xs[i])\n        return d",
        "test": "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
        "num_ids": 1135
    },
    {
        "number": 63,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert fibfib(1) == 0",
        "num_ids": 782
    },
    {
        "number": 64,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def vowels_count(s):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1] == 'y' and s[-2] not in vowels:\n        count += 1\n    return count\n",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 976
    },
    {
        "number": 65,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    x = str(x) # Convert x to a string\n    if shift > len(x): # If shift is greater than number of digits, reverse the digits and return\n        return x[::-1]\n    else:\n        return x[shift:] + x[:shift] # Shift the digits right by shift and return the result as a string\n",
        "test": "assert circular_shift(12, 2) == \"12\"",
        "num_ids": 1164
    },
    {
        "number": 66,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum = 0\n    for i in s:\n        if i.isupper():\n            sum += ord(i)\n    return sum",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 805
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def fruit_distribution(s,n):\n    # split the string to get the number of apples and oranges\n    apples, oranges = s.split()\n    apples, oranges = int(apples), int(oranges.split('and')[0])\n    # calculate the number of mango fruits\n    mango = n - apples - oranges\n    return mango",
        "test": "assert fruit_distribution(\"100 apples and 1 oranges\",120) == 19",
        "num_ids": 1495
    },
    {
        "number": 68,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n    even_nodes = []\n    smallest_even_node = None\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_nodes.append([arr[i], i])\n\n    if len(even_nodes) == 0:\n        return []\n\n    smallest_even_node = min(even_nodes, key=lambda x: (x[0], x[1]))\n\n    return [smallest_even_node[0], smallest_even_node[1]]",
        "test": "assert pluck([]) == []",
        "num_ids": 1233
    },
    {
        "number": 69,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num > 0:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n    for num in sorted(freq, reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1",
        "test": "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3",
        "num_ids": 856
    },
    {
        "number": 70,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    # Sort the list in ascending order\n    lst.sort()\n    # Find the minimum value in the list\n    min_val = lst[0]\n    # Create a new list with the minimum value removed\n    lst = lst[1:]\n    # Create a new list with the reversed sorted values\n    new_lst = [x for x in reversed(lst) if x < min_val] + [min_val] + [x for x in lst if x >= min_val]\n    return new_lst",
        "test": "assert strange_sort_list([]) == []",
        "num_ids": 1269
    },
    {
        "number": 71,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)",
        "test": "assert triangle_area(3, 4, 5) == 6.00",
        "num_ids": 1297
    },
    {
        "number": 72,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def will_it_fly(q, w):\n    \"\"\"\n    Returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    \"\"\"\n    # Check if q is a palindrome\n    if q == q[::-1]:\n        # Check if the sum of elements in q is less than or equal to w\n        if sum(q) <= w:\n            return True\n    return False",
        "test": "assert will_it_fly([3, 2, 3], 1) == False # it's balanced, but 3+2+3 is more than the maximum possible weight.",
        "num_ids": 1513
    },
    {
        "number": 73,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    n = len(arr)\n    count = 0\n\n    for i in range(n // 2):\n        if arr[i]!= arr[n - i - 1]:\n            count += 1\n\n    return count",
        "test": "assert smallest_change([1, 1, 1, 1]) == 0",
        "num_ids": 1605
    },
    {
        "number": 74,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def total_match(lst1, lst2):\n    if len(lst1) == 0 and len(lst2) == 0:\n        return []\n    elif len(lst1) == 0:\n        return lst2\n    elif len(lst2) == 0:\n        return lst1\n    else:\n        total_len1 = sum(len(s) for s in lst1)\n        total_len2 = sum(len(s) for s in lst2)\n        if total_len1 < total_len2:\n            return lst1\n        elif total_len2 < total_len1:\n            return lst2\n        else:\n            return lst1",
        "test": "assert total_match([], []) == []",
        "num_ids": 1717
    },
    {
        "number": 75,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    # check if a is less than 100\n    if a >= 100:\n        return False\n    \n    # initialize a list to store prime numbers\n    primes = []\n    \n    # iterate over numbers from 2 to a\n    for num in range(2, a):\n        # check if num is prime\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                primes.append(num)\n    \n    # check if there are exactly 3 prime numbers in the list\n    if len(primes)!= 3:\n        return False\n    \n    # check if the product of the three prime numbers is equal to a\n    if primes[0]*primes[1]*primes[2]!= a:\n        return False\n    \n    return True",
        "test": "assert is_multiply_prime(45) == False",
        "num_ids": 1471
    },
    {
        "number": 76,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int(log(x, n))=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == 1 or n == 1:\n        return True\n    if x == 0 or x % n!= 0:\n        return False\n    return is_simple_power(x/n, n)",
        "test": "assert is_simple_power(1, 4) == True",
        "num_ids": 1283
    },
    {
        "number": 77,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    return a**3 == 0 or a**3 == 1 or a**3 == -1",
        "test": "assert iscube(1) == True # test case 1",
        "num_ids": 813
    },
    {
        "number": 78,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    count = 0\n    for digit in num:\n        if digit in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count",
        "test": "assert hex_key(\"1077E\") == 2",
        "num_ids": 1204
    },
    {
        "number": 79,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"Converts a decimal number to binary.\"\"\"\n    binary = bin(decimal)[2:]  # convert to binary and remove \"0b\" prefix\n    binary_str = \"db\" + binary + \"db\"  # add extra characters to format the output\n    return binary_str",
        "test": "assert decimal_to_binary(15) == \"db1111db\"",
        "num_ids": 1242
    },
    {
        "number": 80,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\"\"\"\n\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    \n    return True",
        "test": "assert is_happy('a') == False",
        "num_ids": 1056
    },
    {
        "number": 81,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n                 GPA       |    Letter grade\n                  4.0                A+\n                > 3.7                A \n                > 3.3                A- \n                > 3.0                B+\n                > 2.7                B \n                > 2.3                B-\n                > 2.0                C+\n                > 1.7                C\n                > 1.3                C-\n                > 1.0                D+ \n                > 0.7                D \n                > 0.0                D-\n                  0.0                E\n    \n\n    Example:\n    numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for g in grades:\n        if g >= 4.0:\n            letter_grades.append('A+')\n        elif g >= 3.7:\n            letter_grades.append('A')\n        elif g >= 3.3:\n            letter_grades.append('A-')\n        elif g >= 3.0:\n            letter_grades.append('B+')\n        elif g >= 2.7:\n            letter_grades.append('B')\n        elif g >= 2.3:\n            letter_grades.append('B-')\n        elif g >= 2.0:\n            letter_grades.append('C+')\n        elif g >= 1.7:\n            letter_grades.append('C')\n        elif g >= 1.3:\n            letter_grades.append('C-')\n        elif g >= 1.0:\n            letter_grades.append('D+')\n        elif g >= 0.7:\n            letter_grades.append('D')\n        elif g >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades",
        "test": "assert numerical_letter_grade([3.7, 3.3, 3.0, 2.7, 2.3]) == ['A', 'A-', 'B+', 'B', 'B-']",
        "num_ids": 3908
    },
    {
        "number": 82,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\"\"\"\n    return is_prime(len(string))",
        "test": "assert prime_length('Hello') == True",
        "num_ids": 759
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count",
        "test": "assert starts_one_ends(1) == 1 # 1",
        "num_ids": 705
    },
    {
        "number": 84,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    # convert decimal to binary\n    binary_num = bin(N)[2:]\n    \n    # sum of digits in binary number\n    sum_of_digits = sum(int(digit) for digit in binary_num)\n    \n    return str(sum_of_digits)",
        "test": "assert solve(0) == \"0\"",
        "num_ids": 1221
    },
    {
        "number": 85,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\n    \"\"\"\n    result = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            result += lst[i]\n    return result",
        "test": "assert add([4, 2, 6, 7]) == 2 ",
        "num_ids": 793
    },
    {
        "number": 86,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n    words = s.split()\n    new_words = []\n    for word in words:\n        new_word = ''.join(sorted(word))\n        new_words.append(new_word)\n    return''.join(new_words)",
        "test": "assert anti_shuffle('Hi') == 'Hi'",
        "num_ids": 1221
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    \n    result.sort(key=lambda x: x[0])\n    for i in range(len(result)):\n        row = result[i][0]\n        result[i] = (row, result[i][1])\n\n    for i in range(len(result)):\n        row = result[i][0]\n        result[i] = (row, sorted(result[i][1], reverse=True))\n\n    return result",
        "test": "assert get_row([",
        "num_ids": 1443
    },
    {
        "number": 88,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    if not array:\n        return []\n\n    # Check if the sum of the first and last indices is odd or even\n    if (array[0] + array[-1]) % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n\n    # Return a copy of the sorted array\n    return array.copy()",
        "test": "assert sort_array([5]) == [5]",
        "num_ids": 2071
    },
    {
        "number": 89,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    result = ''\n    for i in s:\n        if i.isalpha():\n            if i.islower():\n                new_index = (ord(i) - ord('a') + 2*2) % 26\n                result += chr(ord('a') + new_index)\n            elif i.isupper():\n                new_index = (ord(i) - ord('A') + 2*2) % 26\n                result += chr(ord('A') + new_index)\n        else:\n            result += i\n    return result",
        "test": "assert encrypt('hi') == 'lm'",
        "num_ids": 1431
    },
    {
        "number": 90,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    \n    smallest = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < smallest:\n            smallest = lst[i]\n    \n    second_smallest = float('inf')\n    for i in range(len(lst)):\n        if lst[i] < second_smallest and lst[i]!= smallest:\n            second_smallest = lst[i]\n    \n    if second_smallest == float('inf'):\n        return None\n    \n    return second_smallest",
        "test": "assert next_smallest([5, 1, 4, 3, 2]) == 2",
        "num_ids": 1084
    },
    {
        "number": 91,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    count = 0\n    words = S.split()\n    for word in words:\n        if word.startswith(\"I\"):\n            count += 1\n        elif word in [\".\", \"?\", \"!\"]:\n            count += 1\n    return count\n",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 1103
    },
    {
        "number": 92,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) \u279e True\n\n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n\n    any_int(3.6, -2.2, 2) \u279e False\n    \"\"\"\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False",
        "test": "assert any_int(5, 2, 7) == True",
        "num_ids": 1156
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in message:\n        if char in vowels:\n            if char.islower():\n                result += vowels[(vowels.index(char) + 2) % 5]\n            else:\n                result += vowels[(vowels.index(char.lower()) + 2) % 5].upper()\n        else:\n            result += char\n    return result",
        "test": "assert encode('Python is awesome') == 'PYTH NM SSSEA'",
        "num_ids": 1327
    },
    {
        "number": 94,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if n is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    \"\"\"\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n    \"\"\"\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num):\n            if num > largest_prime:\n                largest_prime = num\n    return sum(int(digit) for digit in str(largest_prime))",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
        "num_ids": 2511
    },
    {
        "number": 95,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not dict:  # If the dictionary is empty, return False.\n        return False\n    \n    # Check if all keys are strings in lower case.\n    lower_case = True\n    for key in dict:\n        if not isinstance(key, str):  # If a key is not a string, return False.\n            return False\n        if key.lower()!= key:  # If a key is not in lower case, set lower_case to False.\n            lower_case = False\n            break\n    if lower_case:\n        return True\n    \n    # Check if all keys are strings in upper case.\n    upper_case = True\n    for key in dict:\n        if not isinstance(key, str):  # If a key is not a string, return False.\n            return False\n        if key.upper()!= key:  # If a key is not in upper case, set upper_case to False.\n            upper_case = False\n            break\n    if upper_case:\n        return True\n    \n    # If neither condition is true, return False.\n    return False",
        "test": "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
        "num_ids": 1404
    },
    {
        "number": 96,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n\n    # Initialize an empty array to store the prime numbers\n    primes = []\n\n    # Loop through all numbers from 2 to n-1\n    for num in range(2, n):\n\n        # Check if the number is prime\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n\n        # If the number is prime and less than n, add it to the array of primes\n        if is_prime and num < n:\n            primes.append(num)\n\n        # If we have found n prime numbers, return the array of primes\n        if len(primes) == n:\n            return primes\n\n    # If we have not found n prime numbers, return an empty array\n    return []",
        "test": "assert count_up_to(0) == []",
        "num_ids": 1454
    },
    {
        "number": 97,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Extract the unit digits of a and b\n    a_unit = a % 10\n    b_unit = b % 10\n    \n    # Compute the product of the unit digits\n    product = a_unit * b_unit\n    \n    return product",
        "test": "assert multiply(148, 412) == 16",
        "num_ids": 1076
    },
    {
        "number": 98,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count",
        "test": "assert count_upper('dBBE') == 0",
        "num_ids": 789
    },
    {
        "number": 99,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n\n    num = float(value)\n\n    if num.is_integer():\n        return int(num)\n\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 1313
    },
    {
        "number": 100,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    if n == 1:\n        return [1]\n\n    # initialize the list with the first level\n    pile = [n]\n\n    # loop through the rest of the levels\n    for i in range(n-1):\n        if pile[i] % 2 == 0:\n            pile.append(pile[i] + 1)\n        else:\n            pile.append(pile[i] + 2)\n\n    return pile",
        "test": "assert make_a_pile(3) == [3, 5, 7] # example test",
        "num_ids": 1715
    },
    {
        "number": 101,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()",
        "test": "assert words_string(\"\") == []",
        "num_ids": 1060
    },
    {
        "number": 102,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\n    # Initialize the max_num variable to -1\n    max_num = -1\n\n    # Loop through the range [x, y] inclusive\n    for num in range(x, y+1):\n\n        # If the current number is even and greater than max_num, update max_num\n        if num % 2 == 0 and num > max_num:\n            max_num = num\n\n    # Return max_num\n    return max_num",
        "test": "assert choose_num(12, 15) == 14",
        "num_ids": 1266
    },
    {
        "number": 103,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def rounded_avg(n, m):\n    \"\"\"\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    \"\"\"\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    avg = round(avg)\n    \n    binary = bin(avg)[2:]\n    \n    return \"0b\" + binary",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 1204
    },
    {
        "number": 104,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for num in x:\n        unique = True\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                unique = False\n                break\n        if unique:\n            result.append(num)\n    return sorted(result)",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
        "num_ids": 1542
    },
    {
        "number": 105,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n      \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n      \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    # filter out any numbers outside the range [1,9]\n    arr = list(filter(lambda x: 1 <= x <= 9, arr))\n\n    # sort the remaining numbers and reverse the order\n    arr.sort(reverse=True)\n\n    # replace each number by its corresponding name\n    for i in range(len(arr)):\n        arr[i] = {\n            1: \"One\",\n            2: \"Two\",\n            3: \"Three\",\n            4: \"Four\",\n            5: \"Five\",\n            6: \"Six\",\n            7: \"Seven\",\n            8: \"Eight\",\n            9: \"Nine\"\n        }.get(arr[i], \"\")\n\n    # filter out any empty strings and return the resulting array\n    return list(filter(lambda x: x!= \"\", arr))",
        "test": "assert by_length([]) == []",
        "num_ids": 2619
    },
    {
        "number": 106,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append((i*(i+1))//2)\n    return result",
        "test": "assert f(1) == [1]",
        "num_ids": 2558
    },
    {
        "number": 107,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return count_even, count_odd",
        "test": "assert even_odd_palindrome(3) == (1, 2)",
        "num_ids": 1499
    },
    {
        "number": 108,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num > 0 and sum(abs(int(digit)) for digit in str(num)) > 0:\n            count += 1\n    return count",
        "test": "assert count_nums([]) == 0",
        "num_ids": 1196
    },
    {
        "number": 109,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def move_one_ball(arr):\n    n = len(arr)\n    if n == 0:\n        return True\n    \n    for i in range(n):\n        # Perform a right shift operation\n        temp = arr[n-1]\n        for j in range(n-1, 0, -1):\n            arr[j] = arr[j-1]\n        arr[0] = temp\n        \n        # Check if the array is sorted in non-decreasing order or not\n        is_sorted = True\n        for j in range(1, n):\n            if arr[j] < arr[j-1]:\n                is_sorted = False\n                break\n        \n        if is_sorted:\n            return True\n    \n    return False",
        "test": "assert move_one_ball([3, 5, 4, 1, 2])==False",
        "num_ids": 1576
    },
    {
        "number": 110,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Create a set of the even numbers in lst1\n    even_nums = set(num for num in lst1 if num % 2 == 0)\n    # Create a set of the even numbers in lst2\n    even_nums_in_lst2 = set(num for num in lst2 if num % 2 == 0)\n    # Check if the even numbers in lst1 and lst2 are equal\n    if even_nums == even_nums_in_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"",
        "num_ids": 2357
    },
    {
        "number": 111,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\"\"\"\n    \n    if not test:\n        return {}\n    \n    count = {}\n    for letter in test.split():\n        if letter in count:\n            count[letter] += 1\n        else:\n            count[letter] = 1\n    \n    max_count = max(count.values())\n    max_letters = [letter for letter, occurrence in count.items() if occurrence == max_count]\n    \n    return {letter: count[letter] for letter in max_letters}\n",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
        "num_ids": 1905
    },
    {
        "number": 112,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def reverse_delete(s,c):\n    # Create a new string without the characters in c\n    new_s = ''\n    for char in s:\n        if char not in c:\n            new_s += char\n    \n    # Check if the new string is a palindrome\n    if new_s == new_s[::-1]:\n        return (new_s, True)\n    else:\n        return (new_s, False)",
        "test": "assert reverse_delete(\"abcdedcba\", \"ab\") == ('cdedc', True)",
        "num_ids": 1252
    },
    {
        "number": 113,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for string in lst:\n        count = 0\n        for digit in string:\n            if int(digit) % 2 == 1:\n                count += 1\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result",
        "test": "assert odd_count(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]",
        "num_ids": 1926
    },
    {
        "number": 114,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n = len(nums)\n    if n == 1:\n        return nums[0]\n    min_sum = float('inf')\n    curr_sum = 0\n    start = 0\n    end = 0\n    for i in range(n):\n        curr_sum += nums[i]\n        if curr_sum < nums[i]:\n            curr_sum = nums[i]\n            start = i\n            end = i\n        while curr_sum > 0:\n            min_sum = min(min_sum, curr_sum)\n            end += 1\n            if end == n:\n                break\n            curr_sum -= nums[end-1]\n    return min_sum",
        "test": "assert minSubArraySum([1]) == 1",
        "num_ids": 1379
    },
    {
        "number": 115,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n    # get the number of wells and their length\n    num_wells = len(grid)\n    well_length = len(grid[0])\n\n    # initialize the bucket levels to be 0\n    bucket_levels = [0] * num_wells\n\n    # initialize the count of bucket fills needed to 0\n    bucket_fills = 0\n\n    # loop through each row of the grid\n    for row in range(num_wells):\n        # initialize the count of water available in the row to be 0\n        water_available = 0\n        # loop through each column of the row\n        for col in range(well_length):\n            # if there is water in the well, add it to the water available in the row\n            if grid[row][col] == 1:\n                water_available += 1\n        # if there is water available in the row, fill the bucket\n        if water_available > 0:\n            # calculate the number of full buckets and remaining water\n            num_full_buckets = math.floor(water_available / capacity)\n            remaining_water = water_available % capacity\n            # if there is remaining water, add it to the next bucket\n            if remaining_water > 0:\n                num_full_buckets += 1\n            # add the number of full buckets to the bucket fills count\n            bucket_fills += num_full_buckets\n            # add the remaining water to the next bucket\n            bucket_levels[row] = remaining_water\n\n    # return the number of bucket fills needed\n    return bucket_fills",
        "test": "assert max_fill([[0,0,0], [0,0,0]], 5) == 0",
        "num_ids": 2633
    },
    {
        "number": 116,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def sort_array(arr):\n    # sort by number of ones in binary representation and then by decimal value\n    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr",
        "test": "assert sort_array([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]",
        "num_ids": 1571
    },
    {
        "number": 117,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if not s:  # check if s is empty\n        return []\n    \n    vowels = \"aeiou\"\n    words = s.split()  # split the string into words\n    result = []\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter.lower() not in vowels:\n                count += 1\n        if count == n:\n            result.append(word)\n    return result",
        "test": "assert select_words(\"simple white space\", 2) == []",
        "num_ids": 1781
    },
    {
        "number": 118,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def get_closest_vowel(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    i = len(word) - 1\n    while i >= 0:\n        if word[i] in vowels:\n            if i > 0 and i < len(word) - 1:\n                return word[i]\n            else:\n                return ''\n        i -= 1\n    return ''",
        "test": "assert get_closest_vowel(\"ab\") == \"\"",
        "num_ids": 1171
    },
    {
        "number": 119,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    # Concatenate the two strings and remove any extra parentheses\n    s = lst[0] + lst[1]\n    s = s.replace('()', '').replace('()', '')\n    \n    # Check if the resulting string is good\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    \n    return 'Yes'",
        "test": "assert match_parens([')', ')']) == 'No'",
        "num_ids": 1740
    },
    {
        "number": 120,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    arr.sort()\n    return arr[-k:]",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]",
        "num_ids": 1204
    },
    {
        "number": 121,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def solution(lst):\n    \"\"\"\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \"\"\"\n    total = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2!= 0:\n            total += lst[i]\n    return total",
        "test": "assert solution([30, 13, 24, 321]) == 0",
        "num_ids": 992
    },
    {
        "number": 122,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum\n",
        "test": "assert add_elements([1,2,3,4,5], 5) == 15 # sum of all elements",
        "num_ids": 1854
    },
    {
        "number": 123,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    seq = [n]\n    while seq[-1]!= 1:\n        if seq[-1] % 2 == 0:\n            seq.append(seq[-1] // 2)\n        else:\n            seq.append(3 * seq[-1] + 1)\n    return sorted(set([i for i in seq if i % 2!= 0]))",
        "test": "assert get_odd_collatz(5) == [1, 5]",
        "num_ids": 2363
    },
    {
        "number": 124,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def valid_date(date):\n    \"\"\"\n    You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n    \n    for example: \n    valid_date('03-11-2000') => True\n    \n    valid_date('15-01-2012') => False\n    \n    valid_date('04-0-2040') => False\n    \n    valid_date('06-04-2020') => True\n    \n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    \n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n    \n    if not (1 <= month <= 12):\n        return False\n    \n    if month in (4, 6, 9, 11):\n        max_day = 30\n    elif month == 2:\n        max_day = 29\n    else:\n        max_day = 31\n    \n    if not (1 <= day <= max_day):\n        return False\n    \n    if not (1 <= year <= 9999):\n        return False\n    \n    return True\n",
        "test": "assert valid_date('15-01-2012') == False, 'invalid date'",
        "num_ids": 2743
    },
    {
        "number": 125,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    if ',' in txt:\n        return txt.split(',')\n    elif'' in txt:\n        return txt.split()\n    else:\n        count = 0\n        for i in range(26):\n            if i % 2!= 0:\n                count += 1\n        return count",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 1030
    },
    {
        "number": 126,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 1372
    },
    {
        "number": 127,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    else:\n        intersection_interval = (max(interval1[0], interval2[0]), min(interval1[1], interval2[1]))\n        if intersection_interval[1] - intersection_interval[0] == 1:\n            return \"NO\"\n        elif is_prime(intersection_interval[1] - intersection_interval[0]):\n            return \"YES\"\n        else:\n            return \"NO\"\n\nprint(intersection((1, 2), (2, 3)))  # Output: \"NO\"\nprint(intersection((-1, 1), (0, 4)))  # Output: \"NO\"\nprint(intersection((-3, -1), (-5, 5)))  # Output: \"YES\"",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\"",
        "num_ids": 1746
    },
    {
        "number": 128,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def prod_signs(arr):\n    if not arr:\n        return None\n    magnitude_sum = 0\n    sign_product = 1\n    for num in arr:\n        magnitude_sum += abs(num)\n        sign_product *= 1 if num > 0 else -1 if num < 0 else 0\n    return sign_product * magnitude_sum",
        "test": "assert prod_signs([]) == None",
        "num_ids": 658
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "Here's the Python code implementing the solution:",
        "test": "assert minPath([[5,9,3],[4,1,6],[7,8,2]], 1) == [1]",
        "num_ids": 2020
    },
    {
        "number": 130,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n    else:\n        tri_seq = [1, 3]\n        for i in range(2, n):\n            if i % 2 == 0:\n                tri_seq.append(1 + i // 2)\n            else:\n                tri_seq.append(tri_seq[i-1] + tri_seq[i-2] + tri_seq[i+1])\n        return tri_seq",
        "test": "assert tri(1) == [3]",
        "num_ids": 1871
    },
    {
        "number": 131,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n        n //= 10\n    return product",
        "test": "assert digits(235) == 15",
        "num_ids": 797
    },
    {
        "number": 132,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_nested(string):\n    stack = []\n    for i, char in enumerate(string):\n        if char == '[':\n            stack.append(i)\n        elif char == ']':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return bool(stack)",
        "test": "assert is_nested('[][]') == False",
        "num_ids": 556
    },
    {
        "number": 133,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    result = 0\n    for i in lst:\n        result += math.ceil(i)**2\n    return result",
        "test": "assert sum_squares([1,2,3]) == 14",
        "num_ids": 1002
    },
    {
        "number": 134,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    if txt == \"\":\n        return False\n    elif txt[-1].isalpha():\n        return True\n    else:\n        for i in range(len(txt)-1, -1, -1):\n            if txt[i].isalpha():\n                return True\n            elif not txt[i].isalpha() and txt[i]!='':\n                return False",
        "test": "assert check_if_last_char_is_a_letter(\"apple pi e \") == False",
        "num_ids": 1166
    },
    {
        "number": 135,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def can_arrange(arr):\n    \"\"\"\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i+1] >= arr[i]:\n            continue\n        for j in range(i+1, n):\n            if arr[j] <= arr[i]:\n                return j-1\n    return -1\n",
        "test": "assert can_arrange([1,3,2]) == 1",
        "num_ids": 879
    },
    {
        "number": 136,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    negative_integers = []\n    positive_integers = []\n    \n    for num in lst:\n        if num < 0:\n            negative_integers.append(num)\n        elif num > 0:\n            positive_integers.append(num)\n    \n    if len(negative_integers) == 0:\n        largest_negative = None\n    else:\n        largest_negative = max(negative_integers)\n    \n    if len(positive_integers) == 0:\n        smallest_positive = None\n    else:\n        smallest_positive = min(positive_integers)\n    \n    return (largest_negative, smallest_positive)",
        "test": "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
        "num_ids": 1666
    },
    {
        "number": 137,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    # Check if a or b is a float\n    if isinstance(a, float) or isinstance(b, float):\n        # If a is not a float, convert it to float\n        if not isinstance(a, float):\n            a = float(a)\n        # If b is not a float, convert it to float\n        if not isinstance(b, float):\n            b = float(b)\n        # Compare a and b\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    # If a and b are not floats, compare them as strings\n    else:\n        # If a is not a string, convert it to string\n        if not isinstance(a, str):\n            a = str(a)\n        # If b is not a string, convert it to string\n        if not isinstance(b, str):\n            b = str(b)\n        # Compare a and b lexicographically\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None",
        "test": "assert compare_one(1, 2.5) == 2.5",
        "num_ids": 1586
    },
    {
        "number": 138,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n\n    # Initialize a set to store even numbers that have not been used yet\n    evens = {2, 4, 6, 8}\n\n    # Initialize a set to store the remaining numbers that can be used to form the sum\n    remaining_nums = set(range(1, n+1))\n\n    # Iterate until we have found 4 even numbers that add up to n\n    for i in range(4):\n        # Find the next even number in the set that is still in the remaining numbers\n        for num in evens:\n            if num in remaining_nums:\n                break\n        else:\n            return False  # If there are no more even numbers, n cannot be written as the sum of 4 even numbers\n\n        # Remove the found even number from the remaining numbers and the set of evens\n        remaining_nums.remove(num)\n        evens.remove(num)\n\n    # If we have found 4 even numbers that add up to n, n can be written as the sum of 4 even numbers\n    return True",
        "test": "assert is_equal_to_sum_even(4) == False",
        "num_ids": 1235
    },
    {
        "number": 139,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n\nprint(special_factorial(4))",
        "test": "assert special_factorial(0) == 1",
        "num_ids": 1022
    },
    {
        "number": 140,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    # Replace consecutive spaces with -\n    while \"  \" in text:\n        text = text.replace(\"  \", \"-\")\n    return text",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 892
    },
    {
        "number": 141,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n    # Check if the name contains more than 3 digits\n    if any(char.isdigit() for char in file_name) and sum(char.isdigit() for char in file_name) > 3:\n        return \"No\"\n\n    # Check if the name contains exactly one dot\n    if file_name.count(\".\")!= 1:\n        return \"No\"\n\n    # Split the name into two substrings\n    name, extension = file_name.split(\".\")\n\n    # Check if the name starts with a letter from the latin alphabet\n    if not name[0].isalpha() or not name[0].isascii():\n        return \"No\"\n\n    # Check if the extension is one of the allowed extensions\n    allowed_extensions = [\"txt\", \"exe\", \"dll\"]\n    if extension not in allowed_extensions:\n        return \"No\"\n\n    # If all conditions are met, return \"Yes\"\n    return \"Yes\"",
        "test": "assert file_name_check(\"1example.dll\") == 'No'",
        "num_ids": 2267
    },
    {
        "number": 142,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i]**2\n        elif i % 4 == 0:\n            if i % 3!= 0:\n                lst[i] = lst[i]**3\n        sum += lst[i]\n    return sum",
        "test": "assert sum_squares([]) == 0",
        "num_ids": 1115
    },
    {
        "number": 143,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_prime(n):\n    \"\"\"\n    This function checks if a number is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n    \"\"\"\n    words = sentence.split()\n    result = \"\"\n    for word in words:\n        if is_prime(len(word)):\n            result += word + \" \"\n    return result.strip()",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\"",
        "num_ids": 1234
    },
    {
        "number": 144,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def simplify(x, n):\n    \"\"\"Simplify the expression x * n.\"\"\"\n    # Convert the fractions to decimals\n    x_decimal = float(x.split('/')[0]) / float(x.split('/')[1])\n    n_decimal = float(n.split('/')[0]) / float(n.split('/')[1])\n\n    # Evaluate the expression\n    result = x_decimal * n_decimal\n\n    # Check if the result is a whole number\n    if result.is_integer():\n        return True\n    else:\n        return False",
        "test": "assert simplify(\"1/5\", \"5/1\") == True",
        "num_ids": 1140
    },
    {
        "number": 145,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(num))\n\n    # Sort the list of integers using the custom key function\n    sorted_nums = sorted(nums, key=lambda num: (digit_sum(num), nums.index(num)))\n\n    return sorted_nums",
        "test": "assert order_by_points([]) == []",
        "num_ids": 1194
    },
    {
        "number": 146,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def specialFilter(nums):\n    \"\"\"\n    This function takes an array of numbers as input and returns the number of elements in the array \n    that are greater than 10 and both first and last digits of a number are odd.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and num % 2 == 1 and int(str(num)[0]) % 2 == 1 and int(str(num)[-1]) % 2 == 1:\n            count += 1\n    return count",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1",
        "num_ids": 1226
    },
    {
        "number": 147,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def get_max_triples(n):\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count",
        "test": "assert get_max_triples(5) == 1 # Example output",
        "num_ids": 1124
    },
    {
        "number": 148,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    result = planets[planet1_index+1:planet2_index]\n    return tuple(sorted(result, key=lambda p: planets.index(p)))\n\nprint(bf(\"Jupiter\", \"Neptune\")) # Output: ('Saturn', 'Uranus')\nprint(bf(\"Earth\", \"Mercury\")) # Output: ('Venus')\nprint(bf(\"Mercury\", \"Uranus\")) # Output: ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')",
        "test": "assert bf(\"not_a_planet\", \"Mars\") == (), \"The function should return an empty tuple if planet1 or planet2 are not correct planet names.\"",
        "num_ids": 1682
    },
    {
        "number": 149,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # Create a new list to hold the filtered and sorted strings\n    result = []\n    \n    # Loop through each string in the input list\n    for string in lst:\n        # Check if the length of the string is even\n        if len(string) % 2 == 0:\n            # Add the string to the result list if it is even-length\n            result.append(string)\n    \n    # Sort the result list by ascending length of each word, and alphabetically if the lengths are equal\n    result.sort(key=lambda x: (len(x), x))\n    \n    # Return the sorted and filtered list\n    return result",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 1540
    },
    {
        "number": 150,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    is_prime = True\n    for i in range(2, n):\n        if n % i == 0:\n            is_prime = False\n            break\n    \n    if is_prime:\n        return x\n    else:\n        return y",
        "test": "assert x_or_y(7, 34, 12) == 34",
        "num_ids": 1041
    },
    {
        "number": 151,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\n\n    If the input list is empty, return 0.\n    \"\"\"\n    if not lst:\n        return 0\n    odd_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2!= 0:\n            odd_squares += num**2\n    return odd_squares",
        "test": "assert double_the_difference([-1, -2, 0]) == 0",
        "num_ids": 1312
    },
    {
        "number": 152,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \"\"\"\n    results = []\n    for i in range(len(game)):\n        if guess[i] == game[i]:\n            results.append(0)\n        else:\n            results.append(abs(guess[i] - game[i]))\n    return results",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 1458
    },
    {
        "number": 153,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    \n    # create a dictionary to store the strength of each extension\n    extension_strength = {}\n    for extension in extensions:\n        cap_count = sum(1 for c in extension if c.isupper())\n        sm_count = sum(1 for c in extension if c.islower())\n        strength = cap_count - sm_count\n        extension_strength[extension] = strength\n    \n    # find the strongest extension\n    strongest_extension = max(extension_strength, key=extension_strength.get)\n    \n    # return the final string\n    return f\"{class_name}.{strongest_extension}\"",
        "test": "assert Strongest_Extension(\"Cat\", ['DOG', 'Bird', 'Elephant', 'Lion']) == 'Cat.DOG'",
        "num_ids": 2239
    },
    {
        "number": 154,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\"\"\"\n    if b in a:\n        return True\n    else:\n        for i in range(len(b)):\n            if b[i:] + b[:i] in a:\n                return True\n    return False",
        "test": "assert cycpattern_check(\"abcd\",\"abd\") == False",
        "num_ids": 766
    },
    {
        "number": 155,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    even_count = 0\n    odd_count = 0\n\n    if num < 0:\n        num = abs(num)\n\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n\n    return (even_count, odd_count)",
        "test": "assert even_odd_count(123) == (1, 2)",
        "num_ids": 1050
    },
    {
        "number": 156,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_mapping = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', \n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000:'m'\n    }\n    result = ''\n    for value, numeral in sorted(roman_mapping.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()",
        "test": "assert int_to_mini_roman(19) == 'xix'",
        "num_ids": 1580
    },
    {
        "number": 157,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Check if the input lengths form a triangle\n    if a + b <= c or b + c <= a or c + a <= b:\n        return False\n    \n    # Check if the triangle is right-angled\n    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2:\n        return True\n    \n    # Check if the triangle is obtuse\n    if a**2 + b**2 < c**2 or b**2 + c**2 < a**2 or c**2 + a**2 < b**2:\n        return False\n    \n    # Check if the triangle is acute\n    if a**2 + b**2 > c**2 or b**2 + c**2 > a**2 or c**2 + a**2 > b**2:\n        return False\n    \n    # If none of the above conditions are met, then the triangle is not right-angled\n    return False",
        "test": "assert right_angle_triangle(3, 4, 5) == True",
        "num_ids": 1331
    },
    {
        "number": 158,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n        word_set = set(word)\n        if len(word_set) > max_len or (len(word_set) == max_len and word < max_word):\n            max_word = word\n            max_len = len(word_set)\n    return max_word",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 1220
    },
    {
        "number": 159,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if need > remaining:\n        return [number + remaining, 0]\n    else:\n        return [number + need, remaining - need]",
        "test": "assert eat(2, 11, 5) == [7, 0], \"eat(2, 11, 5) should return [7, 0]\"",
        "num_ids": 2430
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n\n    result = operand[0]\n    for i in range(1, len(operator)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '//':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n        else:\n            raise ValueError('Invalid operator')\n    return result",
        "test": "assert do_algebra(['*', '-', '+'], [10, 3, 2]) == 20",
        "num_ids": 2176
    },
    {
        "number": 161,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solve(s):\n    \"\"\"\n    You are given a string s.\n    If s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            new_str += s[i].upper() if s[i].islower() else s[i].lower()\n        else:\n            new_str += s[i]\n    return new_str[::-1] if not any(c.isalpha() for c in s) else new_str",
        "test": "assert solve(\"1234\") == \"4321\"",
        "num_ids": 1137
    },
    {
        "number": 162,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    True\n    \"\"\"\n\n    if not text:\n        return None\n\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n\n    return md5_hash",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
        "num_ids": 1140
    },
    {
        "number": 163,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    even_digits = []\n\n    # If a is odd, move to the next even number\n    if a % 2 == 1:\n        a += 1\n\n    # Loop through all the numbers between a and b (inclusive)\n    for num in range(a, b+1):\n        # If the number has even digits, add it to the list\n        if all(int(digit) % 2 == 0 for digit in str(num)):\n            even_digits.append(num)\n\n    return even_digits",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 1340
    }
]