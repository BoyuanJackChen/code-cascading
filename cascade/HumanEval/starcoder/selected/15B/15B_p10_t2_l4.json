[
    {
        "number": 0,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    n = len(numbers)\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
        "num_ids": 2343,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    current_group = []\n    level = 0\n    for char in paren_string:\n        if char == \"(\":\n            level += 1\n            current_group.append(char)\n        elif char == \")\":\n            level -= 1\n            current_group.append(char)\n            if level == 0:\n                groups.append(\"\".join(current_group))\n                current_group = []\n        elif char.isspace():\n            continue\n        else:\n            current_group.append(char)\n    return groups",
        "test": "assert separate_paren_groups('()') == ['()']",
        "num_ids": 3598,
        "indeed": true
    },
    {
        "number": 2,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 1204,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 1182,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(x - mean) for x in numbers]\n    mad = sum(absolute_differences) / len(absolute_differences)\n    return mad",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
        "num_ids": 2322,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result",
        "test": "assert intersperse([], 4) == []",
        "num_ids": 1762,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # Initialize variables\n    max_depth = 0\n    depth = 0\n    max_depth_list = []\n\n    # Iterate through each character in the string\n    for char in paren_string:\n        if char == '(':\n            # If the character is a left parenthesis, increase depth\n            depth += 1\n            if depth > max_depth:\n                # If the current depth is greater than the maximum depth, update max_depth\n                max_depth = depth\n        elif char == ')':\n            # If the character is a right parenthesis, decrease depth\n            depth -= 1\n            if depth < 0:\n                # If depth goes below zero, reset depth to 0 and continue to the next character\n                depth = 0\n                continue\n            if depth == 0:\n                # If the current depth is 0, add the maximum depth to the list\n                max_depth_list.append(max_depth)\n                # Reset max_depth to 0 for the next group\n                max_depth = 0\n\n    return max_depth_list",
        "test": "assert parse_nested_parens('()') == [1]",
        "num_ids": 2420,
        "indeed": true
    },
    {
        "number": 7,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    \"\"\"\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 1375,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    else:\n        total = 0\n        product = 1\n        for num in numbers:\n            total += num\n            product *= num\n        return total, product",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 1856,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        max_so_far = max(num, max_so_far)\n        result.append(max_so_far)\n    return result",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
        "num_ids": 2438,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[::-1]\n    return ''",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 2443,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    result = ''\n    for i in range(max(len(a), len(b))):\n        if i < len(a) and i < len(b):\n            result += str(int(a[i]) ^ int(b[i]))\n        elif i < len(a):\n            result += a[i]\n        else:\n            result += b[i]\n    return result\n",
        "test": "assert string_xor('010', '110') == '100'",
        "num_ids": 1995,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    max_len = 0\n    longest_str = \"\"\n    for string in strings:\n        if len(string) > max_len:\n            max_len = len(string)\n            longest_str = string\n    return longest_str",
        "test": "assert longest([]) == None",
        "num_ids": 1516,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 1269,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes",
        "test": "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
        "num_ids": 1228,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    result = \"\"\n    for i in range(n+1):\n        result += str(i) + \" \"\n    return result.strip()",
        "test": "assert string_sequence(0) == '0'",
        "num_ids": 1245,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \"\"\"\n    distinct_chars = set()\n    for char in string.lower():\n        distinct_chars.add(char)\n    return len(distinct_chars)",
        "test": "assert count_distinct_characters('xyzXYZ') == 3",
        "num_ids": 1026,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Create an empty list to store the beats for each note\n    beats = []\n    # Loop through each character in the input string\n    for char in music_string:\n        # If the character is an 'o', add four beats to the list\n        if char == 'o':\n            beats.append(4)\n        # If the character is an 'o|', add two beats to the list\n        elif char == 'o|':\n            beats.append(2)\n        # If the character is a '.|', add one beat to the list\n        elif char == '.|':\n            beats.append(1)\n    # Return the list of beats\n    return beats",
        "test": "assert parse_music('') == []",
        "num_ids": 4139,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 1613,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    num_list = numbers.split()\n    num_list = sorted(num_list)\n    return''.join(num_list)",
        "test": "assert sort_numbers('nine eight four three seven two one zero') == 'zero one two three four seven eight nine'",
        "num_ids": 2070,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_elements = ()\n    for i in range(len(sorted_numbers)-1):\n        diff = sorted_numbers[i+1] - sorted_numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_elements = (sorted_numbers[i], sorted_numbers[i+1])\n    return closest_elements",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
        "num_ids": 2909,
        "indeed": true
    },
    {
        "number": 21,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled = [(x - minimum) / (maximum - minimum) for x in numbers]\n    return rescaled",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 2793,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [val for val in values if isinstance(val, int)]",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 1455,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)",
        "test": "assert strlen('') == 0",
        "num_ids": 544,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return n",
        "test": "assert largest_divisor(15) == 5  # Test case 1",
        "num_ids": 1129,
        "indeed": false
    },
    {
        "number": 25,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors",
        "test": "assert factorize(8) == [2, 2, 2]",
        "num_ids": 1775,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    seen = set()\n    return [x for x in numbers if not (x in seen or seen.add(x))]\n",
        "test": "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1641,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()",
        "test": "assert flip_case(\"Hello\") == \"hELLO\"",
        "num_ids": 944,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)",
        "test": "assert concatenate([]) == ''",
        "num_ids": 830,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 1473,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num > 0]\n",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 1399,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert is_prime(6) == False",
        "num_ids": 1138,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "The implementation of `find_zero` is more involved and requires some knowledge of polynomials. The method used here is to find the roots of the polynomial using the `np.roots` function from the numpy library. However, this method only works for polynomials with real coefficients. To handle polynomials with complex coefficients, we can use the `sympy` library to perform the algebraic manipulation and find the roots. This is beyond the scope of this problem, but it is worth noting for more complex polynomials.",
        "test": "assert find_zero([-6, 11, -6, 1]) == 1.0",
        "num_ids": 2845,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    for i in range(len(l)):\n        if i % 3!= 0:\n            l[i] = l[i]\n        else:\n            l[i] = sorted([l[i], l[i-1]])[0]\n    return l",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 2420,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 1247,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def max_element(l):\n    return max(l)",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 1020,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0) or (i % 13 == 0):\n            count += str(i).count('7')\n    return count",
        "test": "assert fizz_buzz(50) == 0",
        "num_ids": 1386,
        "indeed": true
    },
    {
        "number": 37,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even_sorted = sorted(l[::2])\n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_sorted.pop(0))\n        else:\n            result.append(l[i])\n    return result",
        "test": "assert sort_even([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 2260,
        "indeed": true
    },
    {
        "number": 38,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def encode_cyclic(s: str) -> str:\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "test": "assert decode_cyclic(encode_cyclic(\"ABC\")) == \"ABC\"",
        "num_ids": 2822,
        "indeed": true
    },
    {
        "number": 39,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def is_prime(n: int) -> bool:\n    \"\"\"\n    is_prime returns True if n is a prime number, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        fib = [1, 1]\n        while len(fib) < n:\n            fib.append(fib[-1] + fib[-2])\n        for i in range(n-1, 0, -1):\n            if is_prime(fib[i]):\n                return fib[i]",
        "test": "assert prime_fib(1) == 2",
        "num_ids": 2213,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    n = len(l)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 2931,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def car_race_collision(n: int) -> int:\n    # Initialize the cars' positions to the left and right edges of the road\n    left_cars = [0] * n\n    right_cars = [1000] * n\n\n    # Count the number of collisions\n    collisions = 0\n    for i in range(n):\n        # Move the cars that are currently on the left side of the road\n        if left_cars[i] > 0:\n            left_cars[i] += 1\n            for j in range(i+1, n):\n                if right_cars[j] == left_cars[i]:\n                    collisions += 1\n        # Move the cars that are currently on the right side of the road\n        if right_cars[i] < 1000:\n            right_cars[i] -= 1\n            for j in range(i+1, n):\n                if left_cars[j] == right_cars[i]:\n                    collisions += 1\n\n    return collisions",
        "test": "assert car_race_collision(0) == 0",
        "num_ids": 2862,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def incr_list(l: list) -> list:\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [i+1 for i in l]",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 1685,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False",
        "test": "assert pairs_sum_to_zero([1, 3, -2, 1]) == False",
        "num_ids": 1972,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result\n",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 1726,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\"\"\"\n    area = 0.5 * a * h\n    return area",
        "test": "assert triangle_area(5, 3) == 7.5, \"Test case 1 failed\"",
        "num_ids": 881,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def fib4(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        fib4_0 = 0\n        fib4_1 = 0\n        fib4_2 = 2\n        fib4_3 = 0\n        for i in range(4, n+1):\n            fib4_next = fib4_0 + fib4_1 + fib4_2 + fib4_3\n            fib4_0 = fib4_1\n            fib4_1 = fib4_2\n            fib4_2 = fib4_3\n            fib4_3 = fib4_next\n        return fib4_3",
        "test": "assert fib4(0) == 0",
        "num_ids": 2255,
        "indeed": true
    },
    {
        "number": 47,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 0:\n        return (sorted_l[n//2 - 1] + sorted_l[n//2])/2\n    else:\n        return sorted_l[n//2]",
        "test": "assert median([3, 1, 2, 4, 5]) == 3",
        "num_ids": 1891,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]",
        "test": "assert is_palindrome('') == True",
        "num_ids": 1230,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        square = modp(n // 2, p)\n        return (square * square) % p\n    else:\n        square = modp((n - 1) // 2, p)\n        return ((square * square) * 2) % p",
        "test": "assert modp(3, 5) == 3",
        "num_ids": 1388,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hello\"",
        "num_ids": 1608,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    result = \"\"\n    \n    for char in text:\n        if char not in vowels:\n            result += char\n            \n    return result",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 1616,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True",
        "num_ids": 1215,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n\n    Args:\n        x (int): The first number to add\n        y (int): The second number to add\n\n    Returns:\n        int: The sum of x and y\n\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n",
        "test": "assert add(2, 3) == 5",
        "num_ids": 825,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n\n    Args:\n    - s0 (str): First word.\n    - s1 (str): Second word.\n\n    Returns:\n    - bool: True if the two words have the same characters, False otherwise.\n\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\n    # Convert strings to sets of characters\n    set0 = set(s0)\n    set1 = set(s1)\n\n    # Check if the sets are equal\n    return set0 == set1",
        "test": "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
        "num_ids": 1498,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n < 2:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)",
        "test": "assert fib(10) == 55",
        "num_ids": 1061,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\" characters.\n    Return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "test": "assert correct_bracketing(\"<\") == False",
        "num_ids": 1415,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 1:\n        return True\n    \n    direction = None\n    \n    for i in range(len(l)-1):\n        if l[i] < l[i+1]:\n            if direction is None or direction == 'increasing':\n                direction = 'increasing'\n            elif direction == 'decreasing':\n                return False\n        elif l[i] > l[i+1]:\n            if direction is None or direction == 'decreasing':\n                direction = 'decreasing'\n            elif direction == 'increasing':\n                return False\n    \n    return True",
        "test": "assert monotonic([1, 2, 4, 20]) == True",
        "num_ids": 1736,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    return sorted(set(l1) & set(l2))",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 1957,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i <= n // i:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n\n",
        "test": "assert largest_prime_factor(2048) == 2",
        "num_ids": 1741,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return (n * (n + 1)) // 2",
        "test": "assert sum_to_n(30) == 465",
        "num_ids": 1490,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for b in brackets:\n        if b == '(':\n            stack.append(b)\n        elif b == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 1373,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    n = len(xs)\n    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    else:\n        result = []\n        for i in range(1, n):\n            result.append(i*xs[i])\n        return result",
        "test": "assert derivative([1, 2, 3]) == [2, 6]",
        "num_ids": 1744,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert fibfib(0) == 0",
        "num_ids": 1799,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    if s[-1].lower() == 'y':\n        count += 1\n    return count",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 1525,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    x_str = str(x)\n    n = len(x_str)\n    if shift > n:\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]",
        "test": "assert circular_shift(12, 1) == \"21\"",
        "num_ids": 1872,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    result = 0\n    for char in s:\n        if char.isupper():\n            result += ord(char)\n    return result",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 1037,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # split the string into a list of words\n    words = s.split()\n    # find the index of the word \"apples\"\n    apple_index = words.index(\"apples\")\n    # find the index of the word \"oranges\"\n    orange_index = words.index(\"oranges\")\n    # get the number of apples and oranges from the string\n    num_apples = int(words[apple_index-1])\n    num_oranges = int(words[orange_index-1])\n    # calculate the total number of fruits in the basket\n    total_fruits = num_apples + num_oranges\n    # calculate the number of mango fruits in the basket\n    num_mangoes = n - total_fruits\n    return num_mangoes",
        "test": "assert fruit_distribution(\"0 apples and 1 oranges\",3) == 2",
        "num_ids": 3135,
        "indeed": true
    },
    {
        "number": 68,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def pluck(arr):\n    even_values = [x for x in arr if x % 2 == 0]\n    if not even_values:\n        return []\n    smallest_even = min(even_values)\n    smallest_even_indices = [i for i, x in enumerate(arr) if x == smallest_even]\n    return [smallest_even, min(smallest_even_indices)]",
        "test": "assert pluck([4,2,3]) == [2, 1]",
        "num_ids": 1580,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num > 0:\n            if num not in freq:\n                freq[num] = 1\n            else:\n                freq[num] += 1\n    for num in sorted(freq.keys(), reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1",
        "test": "assert search([4, 1, 2, 2, 3, 1]) == 2",
        "num_ids": 1819,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    min_num = min(lst)\n    max_num = max(lst)\n    if min_num == max_num:\n        return [min_num] * len(lst)\n    result = [min_num]\n    lst = [n for n in lst if n!= min_num]\n    lst.reverse()\n    result += lst\n    lst = [n for n in lst if n!= max_num]\n    lst.reverse()\n    result += lst\n    lst = [n for n in lst if n!= min_num]\n    lst.reverse()\n    result += lst\n    return result",
        "test": "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]",
        "num_ids": 2961,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter of the triangle\n        s = (a + b + c) / 2\n        # Calculate the area of the triangle\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Round the area to 2 decimal points\n        area = round(area, 2)\n        # Return the area of the triangle\n        return area\n    else:\n        # If the three sides do not form a valid triangle, return -1\n        return -1",
        "test": "assert triangle_area(3, 4, 5) == 6.00",
        "num_ids": 2631,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False",
        "test": "assert will_it_fly([1, 2], 5) == False # 1+2 is less than the maximum possible weight, but it's unbalanced.",
        "num_ids": 2025,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i]!= arr[n-1-i]:\n            count += 1\n    return count",
        "test": "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1",
        "num_ids": 2561,
        "indeed": true
    },
    {
        "number": 74,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def total_match(lst1, lst2):\n    '''\n    This function accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    If the two lists have the same number of chars, return the first list.\n    '''\n    if len(lst1) == 0:\n        return []\n    elif len(lst2) == 0:\n        return lst1\n    elif len(lst1) < len(lst2):\n        return lst1\n    elif len(lst2) < len(lst1):\n        return lst2\n    else:\n        total1 = 0\n        total2 = 0\n        for string in lst1:\n            total1 += len(string)\n        for string in lst2:\n            total2 += len(string)\n        if total1 < total2:\n            return lst1\n        elif total2 < total1:\n            return lst2\n        else:\n            return lst1",
        "test": "assert total_match([], []) == []",
        "num_ids": 2348,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    # check if a is less than 100\n    if a >= 100:\n        return False\n\n    # initialize variables to store prime numbers\n    prime1 = 0\n    prime2 = 0\n    prime3 = 0\n\n    # loop through numbers to find the prime numbers\n    for i in range(2, a):\n        if is_prime(i):\n            if prime1 == 0:\n                prime1 = i\n            elif prime2 == 0:\n                prime2 = i\n            else:\n                prime3 = i\n                break\n\n    # check if a is the multiplication of 3 prime numbers\n    if prime1!= 0 and prime2!= 0 and prime3!= 0 and a == prime1 * prime2 * prime3:\n        return True\n    else:\n        return False\n\ndef is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert is_multiply_prime(45) == False",
        "num_ids": 2882,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int(log(x, n))=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == 1 or n == 1:\n        return True\n    elif x == 0 or n == 0:\n        return False\n    else:\n        return n**int(round(math.log(x, n))) == x",
        "test": "assert is_simple_power(2, 2) == True",
        "num_ids": 2338,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a < 0:\n        return iscube(-a)\n    elif a == 0:\n        return True\n    else:\n        root = int(a**(1/3))\n        return root**3 == a",
        "test": "assert iscube(1) == True, \"iscube should return True for 1\"",
        "num_ids": 1392,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_prime(n):\n    \"\"\"Function to check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    \"\"\"Function to count the number of prime hexadecimal digits\"\"\"\n    count = 0\n    for char in num:\n        if char in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']:\n            if is_prime(int(char, 16)):\n                count += 1\n    return count",
        "test": "assert hex_key(\"1077E\") == 2",
        "num_ids": 2211,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = bin(decimal)[2:]\n    binary_str = \"db\" + binary + \"db\"\n    return binary_str",
        "test": "assert decimal_to_binary(15) == \"db1111db\"",
        "num_ids": 2077,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    seen = set()\n    for i in range(len(s)-2):\n        if s[i:i+3] in seen:\n            return False\n        seen.add(s[i:i+3])\n    return True",
        "test": "assert is_happy('a') == False",
        "num_ids": 1687,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n         > 3.3                A- \n         > 3.0                B+\n         > 2.7                B \n         > 2.3                B-\n         > 2.0                C+\n         > 1.7                C\n         > 1.3                C-\n         > 1.0                D+ \n         > 0.7                D \n         > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades",
        "test": "assert numerical_letter_grade([3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']",
        "num_ids": 6288,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_prime(n):\n    \"\"\"Function to check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Function to check if the length of a string is prime\"\"\"\n    if is_prime(len(string)):\n        return True\n    else:\n        return False",
        "test": "assert prime_length('Hello') == True",
        "num_ids": 1521,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10 ** (n - 1), 10 ** n):\n        if i % 10 == 1 or i % 10 == 0:\n            count += 1\n    return count",
        "test": "assert starts_one_ends(1) == 1",
        "num_ids": 1169,
        "indeed": true
    },
    {
        "number": 84,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binary = bin(N)[2:]  # convert decimal to binary\n    total = 0\n    for digit in binary:\n        total += int(digit)\n    return bin(total)[2:]  # convert total to binary and return as string\n",
        "test": "assert solve(0) == \"0\"",
        "num_ids": 2003,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\"\"\"\n    even_lst = [num for idx, num in enumerate(lst) if idx % 2 == 1 and num % 2 == 0]\n    return sum(even_lst)",
        "test": "assert add([2, 3, 4, 5, 6]) == 0 # Testcase 2",
        "num_ids": 1359,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n\n    # Splitting the string into words\n    words = s.split()\n\n    # Replacing each word with a new word with sorted characters\n    for i in range(len(words)):\n        # Sorting the characters of each word\n        sorted_word = ''.join(sorted(words[i]))\n        # Replacing the original word with the sorted word\n        s = s.replace(words[i], sorted_word)\n\n    return s",
        "test": "assert anti_shuffle('Hi') == 'Hi'",
        "num_ids": 2184,
        "indeed": true
    },
    {
        "number": 87,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 110,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    if not lst:\n        return []\n    \n    result = []\n    for i, row in enumerate(lst):\n        for j, element in enumerate(row):\n            if element == x:\n                result.append((i, j))\n                \n    result.sort(key=lambda t: (t[0], -t[1]))\n    return result",
        "test": "assert get_row([[1,2,3],[4,5,6]], 7) == []",
        "num_ids": 3152,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    if len(array) <= 1:\n        return array\n\n    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)",
        "test": "assert sort_array([5]) == [5]",
        "num_ids": 2986,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    encrypted_string = ''\n    for letter in s:\n        if letter.isalpha():\n            if letter.isupper():\n                encrypted_letter = chr((ord(letter) - 65 + 4) % 26 + 65)\n            else:\n                encrypted_letter = chr((ord(letter) - 97 + 4) % 26 + 97)\n        else:\n            encrypted_letter = letter\n        encrypted_string += encrypted_letter\n    return encrypted_string",
        "test": "assert encrypt('hi') == 'lm'",
        "num_ids": 2631,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    # Sort the list in ascending order\n    sorted_lst = sorted(lst)\n\n    # Check if the list has less than 2 elements\n    if len(sorted_lst) < 2:\n        return None\n\n    # Return the 2nd smallest element\n    return sorted_lst[1]",
        "test": "assert next_smallest([5, 1, 4, 3, 2]) == 2",
        "num_ids": 2264,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_bored(S):\n    boredoms = 0\n    for sentence in S.split('.'):\n        for word in sentence.split():\n            if word.lower() == 'i':\n                boredoms += 1\n    return boredoms",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 1250,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False",
        "test": "assert any_int(5, 2, 7) == True, \"Example 1\"",
        "num_ids": 1881,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = \"aeiou\"\n    encoded_message = \"\"\n    for char in message:\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            if index + 2 <= len(vowels) - 1:\n                encoded_message += vowels[index+2].upper()\n            else:\n                encoded_message += vowels[index-2].upper()\n        elif char.isalpha():\n            encoded_message += char.swapcase()\n    return encoded_message",
        "test": "assert encode('This is a message') == 'tHKS KS C MGSSCGG'",
        "num_ids": 2487,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if a number is prime, else False.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"\n    Returns the sum of digits of a number.\n    \"\"\"\n    return sum(int(i) for i in str(n))\n\ndef largest_prime(lst):\n    \"\"\"\n    Returns the largest prime value from a list of integers.\n    \"\"\"\n    primes = []\n    for num in lst:\n        if is_prime(num):\n            primes.append(num)\n    return max(primes)\n\ndef skjkasdkd(lst):\n    \"\"\"\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n    \"\"\"\n    largest = largest_prime(lst)\n    return sum_of_digits(largest)",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"Test case 1 failed\"",
        "num_ids": 3880,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not dict:\n        return False\n    lower_case_keys = [k for k in dict.keys() if isinstance(k, str) and k.islower()]\n    upper_case_keys = [k for k in dict.keys() if isinstance(k, str) and k.isupper()]\n    if len(lower_case_keys) > 0 and len(upper_case_keys) > 0:\n        return False\n    if len(lower_case_keys) == len(dict.keys()):\n        return True\n    if len(upper_case_keys) == len(dict.keys()):\n        return True\n    return False",
        "test": "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
        "num_ids": 2150,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\"\"\"\n\n    # Create a list to store the prime numbers\n    primes = []\n\n    # Loop through the numbers from 2 to n-1\n    for i in range(2, n):\n        # Assume the current number is prime\n        is_prime = True\n\n        # Loop through the numbers from 2 to the square root of the current number\n        for j in range(2, int(i ** 0.5) + 1):\n            # If the current number is divisible by any of these numbers, it's not prime\n            if i % j == 0:\n                is_prime = False\n                break\n\n        # If the current number is prime, add it to the list of primes\n        if is_prime:\n            primes.append(i)\n\n        # If the length of the list of primes is equal to n, we've found all the primes we need\n        if len(primes) == n:\n            break\n\n    # Return the list of primes\n    return primes",
        "test": "assert count_up_to(5) == [2,3]",
        "num_ids": 1979,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Extract the unit digits of a and b\n    a_unit = a % 10\n    b_unit = b % 10\n\n    # Multiply the unit digits\n    result = a_unit * b_unit\n    \n    return result",
        "test": "assert multiply(148, 412) == 16",
        "num_ids": 1850,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count",
        "test": "assert count_upper('aBCdEf') == 1",
        "num_ids": 1347,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    elif num < 0:\n        return int(num - 0.5)\n    else:\n        return 0",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 2074,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    pile = [n]  # create the first level with n stones\n    for i in range(n-1):  # loop through the remaining levels\n        if pile[i] % 2 == 0:  # if the previous level had an even number of stones\n            pile.append(pile[i] + 1)  # add an odd number to the next level\n        else:  # if the previous level had an odd number of stones\n            pile.append(pile[i] + 2)  # add an even number to the next level\n    return pile  # return the list of stones in each level",
        "test": "assert make_a_pile(3) == [3, 5, 7]",
        "num_ids": 2455,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def words_string(s):\n    \"\"\"\n    Split a string of words separated by commas or spaces into an array of words.\n    \"\"\"\n    # Replace commas with spaces\n    s = s.replace(\",\", \" \")\n    # Split the string into an array of words\n    words = s.split()\n    return words",
        "test": "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
        "num_ids": 2064,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    \n    # Check if x and y are positive integers\n    if not (isinstance(x, int) and isinstance(y, int) and x > 0 and y > 0):\n        return -1\n    \n    # Initialize the result to -1\n    result = -1\n    \n    # Iterate over all even numbers in the range [x, y] inclusive\n    for num in range(x, y+1, 2):\n        # If the current number is greater than the current result,\n        # update the result to be the current number\n        if num > result:\n            result = num\n    \n    # Return the result\n    return result",
        "test": "assert choose_num(13, 12) == -1",
        "num_ids": 1880,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = n + m\n    avg = total / 2\n    rounded = round(avg)\n    \n    binary = bin(rounded)[2:]  # remove \"0b\" prefix\n    return \"0b\" + binary",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 1852,
        "indeed": true
    },
    {
        "number": 104,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique_list = []\n    for num in x:\n        has_even_digit = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            unique_list.append(num)\n    return sorted(unique_list)",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
        "num_ids": 2309,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # create a list of the digits between 1 and 9\n    digits = list(range(1, 10))\n    # sort the array and reverse it\n    sorted_arr = sorted(filter(lambda x: x in digits, arr), reverse=True)\n    # create a list of the corresponding names\n    name_arr = [get_name(x) for x in sorted_arr]\n    # return the list of names\n    return name_arr\n\ndef get_name(digit):\n    \"\"\"\n    Given a digit, returns the corresponding name from \"One\", \"Two\", \"Three\", \"Four\",\n    \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\",\n             7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    return names[digit]",
        "test": "assert by_length([]) == []",
        "num_ids": 4873,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def factorial(n):\n    \"\"\"Function to calculate factorial of a number\"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef f(n):\n    \"\"\"Implement the function f that takes n as a parameter, and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even or the sum of numbers from 1 to i otherwise. i starts from 1. the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\"\"\"\n    lst = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            lst.append(factorial(i))\n        else:\n            lst.append(sum(range(1, i+1)))\n    return lst",
        "test": "assert f(1) == [1]",
        "num_ids": 2468,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_palindrome(num):\n    \"\"\"\n    Returns True if the given number is a palindrome, False otherwise.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    even_palindromes = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 0)\n    odd_palindromes = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2!= 0)\n    return (even_palindromes, odd_palindromes)",
        "test": "assert even_odd_palindrome(3) == (1, 2)",
        "num_ids": 3078,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        # Ignore negative numbers\n        if num < 0:\n            continue\n        # Count the number of positive numbers\n        for digit in str(abs(num)):\n            if int(digit) > 0:\n                count += 1\n                break\n    return count",
        "test": "assert count_nums([]) == 0",
        "num_ids": 2060,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N]. The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n    \n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n    \n    Note: The given list is guaranteed to have unique elements.\n    \n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                 array by performing any number of right shift operations.\n    \n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return True\n    \n    i = 0\n    while i < n - 1:\n        if arr[i] > arr[i+1]:\n            return False\n        i += 1\n    \n    return True",
        "test": "assert move_one_ball([3, 5, 4, 1, 2]) == False",
        "num_ids": 3821,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    even_lst1 = [x for x in lst1 if x % 2 == 0]\n    even_lst2 = [x for x in lst2 if x % 2 == 0]\n    \n    for x in even_lst1:\n        if x not in even_lst2:\n            return \"NO\"\n    \n    return \"YES\"",
        "test": "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"",
        "num_ids": 4219,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    \n    # Split the input string into a list of words\n    words = test.split()\n    \n    # Initialize an empty dictionary to store the histogram\n    histogram = {}\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Iterate over each letter in the word\n        for letter in word:\n            # If the letter is already in the dictionary, increment its count\n            if letter in histogram:\n                histogram[letter] += 1\n            # If the letter is not in the dictionary, add it with a count of 1\n            else:\n                histogram[letter] = 1\n    \n    # Initialize an empty list to store the letters with the highest count\n    max_letters = []\n    \n    # Iterate over each key-value pair in the histogram dictionary\n    for key, value in histogram.items():\n        # If the value is greater than or equal to the current maximum count,\n        # add the key to the list of max letters\n        if value >= max([v for k, v in histogram.items()]):\n            max_letters.append(key)\n    \n    # If there is only one letter with the highest count, return a dictionary with that letter and its count\n    if len(max_letters) == 1:\n        return {max_letters[0]: histogram[max_letters[0]]}\n    # Otherwise, return a dictionary with all the max letters and their count\n    else:\n        max_dict = {}\n        for letter in max_letters:\n            max_dict[letter] = histogram[letter]\n        return max_dict",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
        "num_ids": 3166,
        "indeed": true
    },
    {
        "number": 112,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i,\"\")\n    if s == s[::-1]:\n        return (s,True)\n    else:\n        return (s,False)",
        "test": "assert reverse_delete(\"abcde\", \"ae\") == ('bcd',False)",
        "num_ids": 2041,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for s in lst:\n        count = sum(int(digit) % 2 == 1 for digit in s)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result",
        "test": "assert odd_count(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]",
        "num_ids": 3175,
        "indeed": true
    },
    {
        "number": 114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n = len(nums)\n    if n == 1:\n        return nums[0]\n    else:\n        min_sum = float('inf')\n        curr_sum = 0\n        for i in range(n):\n            curr_sum += nums[i]\n            while curr_sum < 0:\n                curr_sum -= nums[start]\n                start += 1\n            if curr_sum < min_sum:\n                min_sum = curr_sum\n        return min_sum",
        "test": "assert minSubArraySum([-1, -2, -3]) == -6",
        "num_ids": 2430,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def max_fill(grid, capacity):\n    import math\n\n    rows = len(grid)\n    cols = len(grid[0])\n\n    # number of buckets needed\n    buckets = math.ceil(sum(map(sum, grid))/capacity)\n\n    # fill each well with a unit of water\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                grid[i][j] = capacity\n\n    # empty the wells using buckets\n    count = 0\n    while count < buckets:\n        # find the next well to fill\n        for i in range(rows):\n            for j in range(cols):\n                if grid[i][j] == capacity:\n                    bucket_count = min(capacity, sum(grid[i]))\n                    grid[i][j] = bucket_count\n                    count += 1\n                    break\n            if count == buckets:\n                break\n\n    return count",
        "test": "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6",
        "num_ids": 3657,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def sort_array(arr):\n    def bin_ones(n):\n        \"\"\"\n        Returns the number of ones in the binary representation of n.\n        \"\"\"\n        count = 0\n        while n > 0:\n            if n & 1 == 1:\n                count += 1\n            n >>= 1\n        return count\n    \n    def cmp_key(n):\n        \"\"\"\n        Returns a tuple (ones, n) to be used as the comparison key for n.\n        \"\"\"\n        return (bin_ones(n), n)\n    \n    return sorted(arr, key=cmp_key)",
        "test": "assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]",
        "num_ids": 2457,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    \"\"\"\n\n    if not s:\n        return []\n\n    # split the string into words\n    words = s.split()\n\n    result = []\n\n    # iterate over each word in the list and check if it contains exactly n consonants\n    for word in words:\n        count = 0\n        for char in word:\n            if char.isalpha() and char.lower() not in \"aeiou\":\n                count += 1\n        if count == n:\n            result.append(word)\n\n    return result",
        "test": "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
        "num_ids": 2979,
        "indeed": true
    },
    {
        "number": 118,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def get_closest_vowel(word):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    for i in range(len(word)-1, -1, -1):\n        if word[i].lower() in vowels and word[i-1].lower() not in vowels:\n            return word[i]\n    return \"\"",
        "test": "assert get_closest_vowel(\"yogurt\") == \"u\"",
        "num_ids": 1620,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    # Create a dictionary to store the count of open and close parentheses\n    count_dict = {}\n\n    # Iterate over both strings to count the parentheses\n    for string in lst:\n        for char in string:\n            if char in count_dict:\n                count_dict[char] += 1\n            else:\n                count_dict[char] = 1\n\n    # Check if both strings have the same count of open and close parentheses\n    if count_dict.get('(')!= count_dict.get(')'):\n        return 'No'\n\n    # Create a stack to keep track of open parentheses\n    stack = []\n\n    # Iterate over the first string and push all open parentheses onto the stack\n    for char in lst[0]:\n        if char == '(':\n            stack.append(char)\n\n    # Iterate over the second string and check if all close parentheses match with the open parentheses on top of the stack\n    for char in lst[1]:\n        if char == ')':\n            if stack:\n                stack.pop()\n            else:\n                return 'No'\n\n    # If all parentheses match, return 'Yes'\n    return 'Yes'",
        "test": "assert match_parens([')', ')']) == 'No'",
        "num_ids": 2276,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort() # sort the array in ascending order\n    return arr[-k:] # return the last k elements of the sorted array",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]",
        "num_ids": 2062,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 0\n    \"\"\"\n    result = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2!= 0:\n            result += lst[i]\n    return result",
        "test": "assert solution([5, 8, 7, 1]) == 12",
        "num_ids": 1521,
        "indeed": true
    },
    {
        "number": 122,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    sum = 0\n    for i in range(k):\n        if arr[i] < 100:\n            sum += arr[i]\n    return sum",
        "test": "assert add_elements([111,21,3,4000,5,6,7,8,9], 4) == 24",
        "num_ids": 2536,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n == 1:\n        return [1]\n\n    sequence = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        sequence.append(n)\n    \n    odd_sequence = [num for num in sequence if num % 2!= 0]\n    return sorted(odd_sequence)\n",
        "test": "assert get_odd_collatz(2) == [1]",
        "num_ids": 3501,
        "indeed": true
    },
    {
        "number": 124,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    try:\n        # split the date into month, day, and year\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n    except ValueError:\n        return False\n\n    # validate the month\n    if month < 1 or month > 12:\n        return False\n    \n    # validate the number of days in the month\n    if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n        return False\n    elif month in [4, 6, 9, 11] and (day < 1 or day > 30):\n        return False\n    elif month == 2 and (day < 1 or day > 29):\n        return False\n    \n    # validate the year (not needed for this problem)\n    # if year < 1 or year > 9999:\n    #     return False\n    \n    # if all the validation checks pass, the date is valid\n    return True",
        "test": "assert valid_date('15-01-2012') == False",
        "num_ids": 5090,
        "indeed": true
    },
    {
        "number": 125,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def split_words(txt):\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    \"\"\"\n    if ',' in txt:\n        return txt.split(',')\n    elif'' in txt:\n        return txt.split()\n    else:\n        return sum(1 for c in txt.lower() if ord(c) % 2!= 0)",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 1775,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples:\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n        if lst.count(lst[i]) > 1:\n            return False\n    return True",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 2570,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_prime(n):\n    \"\"\"Check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"Calculate the intersection of two intervals\"\"\"\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    intersection_length = intersection_end - intersection_start + 1\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(intersection((1, 2), (2, 3))) # Output: NO\nprint(intersection((-1, 1), (0, 4))) # Output: NO\nprint(intersection((-3, -1), (-5, 5))) # Output: YES",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\"",
        "num_ids": 3112,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def prod_signs(arr):\n    if not arr:\n        return None\n    mag_sum = sum(abs(x) for x in arr)\n    prod_sign = 1\n    for x in arr:\n        prod_sign *= 1 if x > 0 else -1 if x < 0 else 0\n    return mag_sum * prod_sign",
        "test": "assert prod_signs([1, 2, 2, -4]) == -9",
        "num_ids": 1576,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    n = len(grid)\n    paths = []\n\n    def dfs(row, col, path):\n        if len(path) == k:\n            paths.append(path)\n            return\n\n        if row > 0 and grid[row-1][col] not in path:\n            dfs(row-1, col, path+[grid[row-1][col]])\n\n        if row < n-1 and grid[row+1][col] not in path:\n            dfs(row+1, col, path+[grid[row+1][col]])\n\n        if col > 0 and grid[row][col-1] not in path:\n            dfs(row, col-1, path+[grid[row][col-1]])\n\n        if col < n-1 and grid[row][col+1] not in path:\n            dfs(row, col+1, path+[grid[row][col+1]])\n\n    for i in range(n):\n        for j in range(n):\n            dfs(i, j, [grid[i][j]])\n\n    paths.sort()\n    return paths[0]",
        "test": "assert minPath([[5,9,3], [4,1,6], [7,8,2]], 1) == [1]",
        "num_ids": 7096,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n    else:\n        tribonacci = [1, 3]\n        for i in range(2, n):\n            if i % 2 == 0:\n                tribonacci.append(1 + i // 2)\n            else:\n                tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i+1])\n        tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n        return tribonacci",
        "test": "assert tri(1) == [3]",
        "num_ids": 3139,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # Convert the integer to a string and iterate over its characters\n    product = 1\n    for digit in str(n):\n        # If the digit is odd, multiply it with the product\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n        # If all digits are even, return 0\n        elif int(digit) % 2 == 0:\n            return 0\n    return product",
        "test": "assert digits(4) == 0",
        "num_ids": 1301,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    count = 0  # Initialize count variable to zero\n    stack = []  # Initialize an empty stack\n    for i in range(len(string)):\n        if string[i] == '[':\n            count += 1  # Increment count for every '[' found\n            stack.append(i)  # Append index to stack\n        else:\n            if count == 0:\n                return False  # If count becomes zero, all brackets have been matched\n            else:\n                count -= 1  # Decrement count for every ']' found\n                stack.pop()  # Pop the top index from stack\n                if len(stack) > 0:\n                    if string[stack[-1]+1:i] == string[i+1:stack[-1]]:\n                        return True  # If nested brackets found, return True\n    return False  # If stack is not empty, return False",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False, \"Example 2\"",
        "num_ids": 1144,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    \"\"\"\n    sum = 0\n    for num in lst:\n        if num < 0:\n            num = 0\n        sum += math.ceil(num)**2\n    return sum\n",
        "test": "assert sum_squares([1,2,3]) == 14",
        "num_ids": 2176,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    \"\"\"\n    if len(txt) == 0:\n        return False\n    if txt[-1].isalpha() and not txt[-1].isspace() and not txt[-2].isalpha():\n        return True\n    return False",
        "test": "assert check_if_last_char_is_a_letter(\"apple pie\") == False",
        "num_ids": 1990,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return -1\n    \n    # create a dictionary to store the index of each element in the array\n    index_dict = {}\n    for i in range(n):\n        index_dict[arr[i]] = i\n    \n    # loop through the array and find the largest index of an element which\n    # is not greater than or equal to the element immediately preceding it\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            for j in range(i):\n                if arr[i] >= arr[j]:\n                    break\n            else:\n                return i\n    \n    # if no such element exists, return -1\n    return -1",
        "test": "assert can_arrange([1, 2, 3]) == -1",
        "num_ids": 2045,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    \n    neg_integers = []\n    pos_integers = []\n    \n    for num in lst:\n        if num < 0:\n            neg_integers.append(num)\n        elif num > 0:\n            pos_integers.append(num)\n            \n    if len(neg_integers) == 0:\n        largest_neg = None\n    else:\n        largest_neg = max(neg_integers)\n        \n    if len(pos_integers) == 0:\n        smallest_pos = None\n    else:\n        smallest_pos = min(pos_integers)\n        \n    return (largest_neg, smallest_pos)",
        "test": "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
        "num_ids": 2837,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    \n    # Check if a or b is a float\n    if isinstance(a, float) or isinstance(b, float):\n        # Check if both a and b are floats\n        if isinstance(a, float) and isinstance(b, float):\n            # Compare a and b and return the larger one\n            if a > b:\n                return a\n            elif b > a:\n                return b\n            else:\n                return None\n        # If a is a float but b is not\n        else:\n            # Convert a to float and return the larger one\n            return float(a) if a > b else float(b)\n    # If neither a nor b is a float\n    else:\n        # Check if both a and b are integers\n        if isinstance(a, int) and isinstance(b, int):\n            # Compare a and b and return the larger one\n            if a > b:\n                return a\n            elif b > a:\n                return b\n            else:\n                return None\n        # If a is an integer but b is not\n        elif isinstance(a, int):\n            # Convert a to string and return the larger one\n            return str(a) if str(a) > str(b) else str(b)\n        # If b is an integer but a is not\n        else:\n            # Convert b to string and return the larger one\n            return str(b) if str(b) > str(a) else str(a)\n",
        "test": "assert compare_one(1, 2.5) == 2.5",
        "num_ids": 2745,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    even_nums = [i for i in range(2, n, 2) if i % 2 == 0]\n    if len(even_nums)!= 4:\n        return False\n    else:\n        return sum(even_nums) == n",
        "test": "assert is_equal_to_sum_even(4) == False",
        "num_ids": 1951,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n",
        "test": "assert special_factorial(0) == 1",
        "num_ids": 1553,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n\n    # Check if the text has less than 2 consecutive spaces\n    if text.count('  ') == 0:\n        # Replace all spaces with underscores\n        text = text.replace(' ', '_')\n    else:\n        # Replace all consecutive spaces with -\n        while''in text:\n            text = text.replace('  ', '-')\n\n    return text",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 1515,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Split the file name into a list of substrings\n    substrings = file_name.split(\".\")\n    # Check if there is exactly one dot in the file name\n    if len(substrings)!= 2:\n        return \"No\"\n    # Check if the substring before the dot is empty\n    if not substrings[0]:\n        return \"No\"\n    # Check if the substring before the dot starts with a latin alphapet letter\n    if not substrings[0][0].isalpha():\n        return \"No\"\n    # Check if the substring after the dot is one of the allowed file extensions\n    if substrings[1] not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    # Check if there are more than three digits in the file name\n    if sum(c.isdigit() for c in file_name) > 3:\n        return \"No\"\n    # If all conditions are met, return \"Yes\"\n    return \"Yes\"",
        "test": "assert file_name_check(\"1example.dll\") == 'No'",
        "num_ids": 4115,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4!= 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)",
        "test": "assert sum_squares([]) == 0",
        "num_ids": 2314,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n    \"\"\"\n    words = sentence.split()\n    result = \"\"\n    for word in words:\n        if is_prime(len(word)):\n            result += word + \" \"\n    return result.strip()",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\"",
        "num_ids": 2069,
        "indeed": true
    },
    {
        "number": 144,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n\n    # Parse the input strings into integers\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    # Calculate the product of x and n\n    prod_num = x_num * n_num\n    prod_den = x_den * n_den\n\n    # Simplify the product to lowest terms\n    gcd = math.gcd(prod_num, prod_den)\n    simplified_num = prod_num // gcd\n    simplified_den = prod_den // gcd\n\n    # Check if the simplified product is a whole number\n    if simplified_den == 1:\n        return True\n    else:\n        return False",
        "test": "assert simplify(\"1/5\", \"5/1\") == True",
        "num_ids": 1979,
        "indeed": true
    },
    {
        "number": 145,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums.sort(key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))\n    return nums",
        "test": "assert order_by_points([]) == []",
        "num_ids": 1861,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def specialFilter(nums):\n    \"\"\"Returns the number of elements in the array that are greater than 10 and \n    both first and last digits of a number are odd (1, 3, 5, 7, 9).\"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and num % 2!= 0 and num // 10 % 10 in [1, 3, 5, 7, 9]:\n            count += 1\n    return count",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1 # example 1",
        "num_ids": 2257,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i*i-i+1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i]+a[j]+a[k]) % 3 == 0:\n                    count += 1\n    return count",
        "test": "assert get_max_triples(5) == 1",
        "num_ids": 2282,
        "indeed": true
    },
    {
        "number": 148,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet1_index = planets.index(planet1.capitalize())\n    planet2_index = planets.index(planet2.capitalize())\n    if planet1_index == -1 or planet2_index == -1:\n        return ()\n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n    return tuple(planets[planet1_index+1:planet2_index])",
        "test": "assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")",
        "num_ids": 3238,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # Filter out odd length strings\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the list by length and alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    \n    return sorted_lst",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 2175,
        "indeed": true
    },
    {
        "number": 150,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_prime(n):\n    \"\"\"Returns True if n is a prime number, False otherwise\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef x_or_y(n, x, y):\n    \"\"\"Returns x if n is a prime number, y otherwise\"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y",
        "test": "assert x_or_y(7, 34, 12) == 34",
        "num_ids": 1807,
        "indeed": true
    },
    {
        "number": 151,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def double_the_difference(lst):\n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 == 1:\n            result += num ** 2\n    return result",
        "test": "assert double_the_difference([-1, -2, 0]) == 0",
        "num_ids": 2242,
        "indeed": true
    },
    {
        "number": 152,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def compare(game, guess):\n    \"\"\"Compares two arrays of scores and guesses, returning an array of the same length denoting how far off each guess was.\"\"\"\n    result = []\n    for i in range(len(game)):\n        diff = abs(game[i] - guess[i])\n        result.append(diff)\n    return result",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 2184,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def Strongest_Extension(class_name, extensions):\n    strength = {}\n    for extension in extensions:\n        cap = 0\n        sm = 0\n        for letter in extension:\n            if letter.isupper():\n                cap += 1\n            elif letter.islower():\n                sm += 1\n        strength[extension] = cap - sm\n    max_strength = max(strength.values())\n    strongest_extension = [k for k, v in strength.items() if v == max_strength][0]\n    return f\"{class_name}.{strongest_extension}\"\n\nprint(Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed'])) # Output: Slices.SErviNGSliCes\nprint(Strongest_Extension(\"my_class\", ['AA', 'Be', 'CC'])) # Output: my_class.AA",
        "test": "assert Strongest_Extension(\"String\", ['StriNG', 'String','string']) == 'String.StriNG'",
        "num_ids": 3623,
        "indeed": true
    },
    {
        "number": 154,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if b in a:\n        return True\n    else:\n        return False\n",
        "test": "assert cycpattern_check(\"abcd\",\"abd\") == False",
        "num_ids": 1365,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    \n    if num < 0:\n        num = abs(num)\n    \n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)",
        "test": "assert even_odd_count(123) == (1, 2)",
        "num_ids": 1647,
        "indeed": true
    },
    {
        "number": 156,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_dict = {1000:'m', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    roman_num = ''\n    for value, numeral in roman_dict.items():\n        while number >= value:\n            roman_num += numeral\n            number -= value\n    return roman_num.lower()",
        "test": "assert int_to_mini_roman(19) == 'xix'",
        "num_ids": 3319,
        "indeed": true
    },
    {
        "number": 157,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or 90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2:\n        return True\n    else:\n        return False",
        "test": "assert right_angle_triangle(1, 2, 3) == False",
        "num_ids": 2110,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_max(words):\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_word = word\n            max_count = count\n        elif count == max_count and word < max_word:\n            max_word = word\n    return max_word",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 1667,
        "indeed": true
    },
    {
        "number": 159,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\n    # if there are not enough remaining carrots, eat all remaining carrots\n    if remaining < need:\n        return [remaining+number, 0]\n    \n    # if there are enough remaining carrots, eat the remaining carrots\n    else:\n        return [need+number, remaining-need]",
        "test": "assert eat(5, 6, 10) == [11, 4]",
        "num_ids": 4181,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # check if the operator and operand lists have the correct length\n    if len(operator)!= len(operand) - 1:\n        raise ValueError(\"Operator list and operand list must have the same length.\")\n\n    # check if all operands are non-negative integers\n    if any(not isinstance(x, int) or x < 0 for x in operand):\n        raise ValueError(\"All operands must be non-negative integers.\")\n\n    # build the algebraic expression\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            expression +='+'+ str(operand[i+1])\n        elif operator[i] == '-':\n            expression +='-'+ str(operand[i+1])\n        elif operator[i] == '*':\n            expression +='*'+ str(operand[i+1])\n        elif operator[i] == '//':\n            expression +='//'+ str(operand[i+1])\n        elif operator[i] == '**':\n            expression +='**'+ str(operand[i+1])\n        else:\n            raise ValueError(\"Invalid operator: '{}'\".format(operator[i]))\n\n    # evaluate the expression using Python's built-in eval() function\n    return eval(expression)",
        "test": "assert do_algebra(['+'], [2, 3]) == 5",
        "num_ids": 3705,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.upper() if char.islower() else char.lower()\n        else:\n            result += char\n    return result[::-1] if not any(char.isalpha() for char in s) else result",
        "test": "assert solve(\"1234\") == \"4321\"",
        "num_ids": 1898,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    True\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
        "num_ids": 1640,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    even_digits = []\n\n    for num in range(a, b+1):\n        digits = [int(digit) for digit in str(num)]\n        even_digits.extend([digit for digit in digits if digit % 2 == 0])\n\n    even_digits.sort()\n\n    return even_digits",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 2442,
        "indeed": false
    }
]