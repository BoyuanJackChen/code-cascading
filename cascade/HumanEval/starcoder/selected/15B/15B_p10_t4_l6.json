[
    {
        "number": 0,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    n = len(numbers)\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False, \"Test failed\"",
        "num_ids": 2699
    },
    {
        "number": 1,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    \"\"\"\n    # Remove all spaces in the string\n    paren_string = paren_string.replace(' ', '')\n    \n    groups = []\n    current_group = \"\"\n    num_open = 0\n    \n    for char in paren_string:\n        if char == '(':\n            num_open += 1\n            current_group += char\n        elif char == ')':\n            num_open -= 1\n            current_group += char\n            if num_open == 0:\n                groups.append(current_group)\n                current_group = \"\"\n        else:\n            continue\n    \n    return groups",
        "test": "assert separate_paren_groups('()()') == ['()', '()']",
        "num_ids": 3453
    },
    {
        "number": 2,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 2760
    },
    {
        "number": 3,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 1224
    },
    {
        "number": 4,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
        "num_ids": 3209
    },
    {
        "number": 5,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i!= len(numbers) - 1:\n            result.append(delimeter)\n    return result\n",
        "test": "assert intersperse([], 4) == []",
        "num_ids": 2053
    },
    {
        "number": 6,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    stack = []\n    max_depth = 0\n    current_depth = 0\n    \n    for char in paren_string:\n        if char == '(':\n            stack.append(current_depth)\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth = stack.pop() if stack else 0\n            \n    return [max_depth] * len(paren_string.split())",
        "test": "assert parse_nested_parens('') == []",
        "num_ids": 2904
    },
    {
        "number": 7,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    \"\"\"\n    return [s for s in strings if substring in s]\n\nif __name__ == '__main__':\n    # Test the function\n    strings = ['abc', 'bacd', 'cde', 'array']\n    substring = 'a'\n    filtered_strings = filter_by_substring(strings, substring)\n    print(filtered_strings)",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 1770
    },
    {
        "number": 8,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return sum, product\n",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 2242
    },
    {
        "number": 9,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    max_numbers = []\n    for i in range(len(numbers)):\n        if i == 0:\n            max_numbers.append(numbers[i])\n        else:\n            max_numbers.append(max(numbers[i], max_numbers[i-1]))\n    return max_numbers",
        "test": "assert rolling_max([5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "num_ids": 3109
    },
    {
        "number": 10,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    \n    # Find the longest postfix of the string that is a palindrome\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[::-1]\n    \n    # If there is no palindrome postfix, append the string to itself\n    return string + string[::-1]",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 2929
    },
    {
        "number": 11,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = \"\"\n    for i in range(max(len(a), len(b))):\n        if i < len(a) and i < len(b):\n            result += str(int(a[i]) ^ int(b[i]))\n        elif i < len(a):\n            result += a[i]\n        else:\n            result += b[i]\n    return result",
        "test": "assert string_xor('010', '110') == '100'",
        "num_ids": 2714
    },
    {
        "number": 12,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    max_len = len(strings[0])\n    max_str = strings[0]\n    for s in strings[1:]:\n        if len(s) > max_len:\n            max_len = len(s)\n            max_str = s\n    return max_str",
        "test": "assert longest([]) == None",
        "num_ids": 1838
    },
    {
        "number": 13,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if a < b:\n        a, b = b, a\n    while b!= 0:\n        temp = b\n        b = a % b\n        a = temp\n    return a",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 1626
    },
    {
        "number": 14,
        "max_answer_num": 33,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n",
        "test": "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
        "num_ids": 1598
    },
    {
        "number": 15,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return \" \".join(str(i) for i in range(n+1))",
        "test": "assert string_sequence(0) == '0'",
        "num_ids": 2085
    },
    {
        "number": 16,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of \"\"\"\n    return len(set(string.lower()))",
        "test": "assert count_distinct_characters('xyzXYZ') == 3",
        "num_ids": 1668
    },
    {
        "number": 17,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    note_dict = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_dict[note] for note in music_string.split()]",
        "test": "assert parse_music('') == []",
        "num_ids": 5348
    },
    {
        "number": 18,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 1923
    },
    {
        "number": 19,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    \"\"\"\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: ['zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine'].index(x))\n    return''.join(num_list)\n",
        "test": "assert sort_numbers('zero') == 'zero'",
        "num_ids": 2597
    },
    {
        "number": 20,
        "max_answer_num": 24,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n    closest_pair = (numbers[0], numbers[1])\n    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i]-numbers[j]) < abs(closest_pair[0]-closest_pair[1]):\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 1.1]) == (1.0, 1.1)",
        "num_ids": 4113
    },
    {
        "number": 21,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    minimum = min(numbers)\n    maximum = max(numbers)\n    return [(x - minimum) / (maximum - minimum) for x in numbers]",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 3760
    },
    {
        "number": 22,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values if isinstance(x, int)]",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 1885
    },
    {
        "number": 23,
        "max_answer_num": 37,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def strlen(string: str) -> int:\n    \"\"\"Return length of given string\n    \n    Args:\n    string (str): Input string\n    \n    Returns:\n    int: Length of the input string\n    \"\"\"\n    return len(string)",
        "test": "assert strlen('') == 0",
        "num_ids": 829
    },
    {
        "number": 24,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            n //= divisor\n        else:\n            divisor += 1\n    return divisor",
        "test": "assert largest_divisor(15) == 5",
        "num_ids": 1276
    },
    {
        "number": 25,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors",
        "test": "assert factorize(8) == [2, 2, 2]",
        "num_ids": 2347
    },
    {
        "number": 26,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result",
        "test": "assert remove_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4]",
        "num_ids": 2193
    },
    {
        "number": 27,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    new_string = ''\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string",
        "test": "assert flip_case('Hello') == 'hELLO'",
        "num_ids": 1426
    },
    {
        "number": 28,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    if not strings:\n        return ''\n    return ''.join(strings)",
        "test": "assert concatenate([]) == ''",
        "num_ids": 1158
    },
    {
        "number": 29,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 1799
    },
    {
        "number": 30,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 1760
    },
    {
        "number": 31,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert is_prime(6) == False",
        "num_ids": 1447
    },
    {
        "number": 32,
        "max_answer_num": 25,
        "max_test_num": 3,
        "total_product": 390,
        "answer": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2!= 0:\n        return None\n    max_coeff = max(abs(coeff) for coeff in xs)\n    for coeff in xs:\n        if abs(coeff) == max_coeff:\n            xs.remove(coeff)\n            return -poly(xs, 1.0) / coeff\n    return None\n\n\nprint(find_zero([1, 2])) # f(x) = 1 + 2x\nprint(find_zero([-6, 11, -6, 1])) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3",
        "test": "assert find_zero([-6, 11, -6, 1]) == 1.0",
        "num_ids": 5295
    },
    {
        "number": 33,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    l_prime = l.copy()\n    for i in range(0, len(l), 3):\n        l_prime[i:i+3] = sorted(l[i:i+3])\n    return l_prime",
        "test": "assert sort_third([]) == []",
        "num_ids": 3085
    },
    {
        "number": 34,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 1433
    },
    {
        "number": 35,
        "max_answer_num": 39,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    return max(l)",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 1417
    },
    {
        "number": 36,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count",
        "test": "assert fizz_buzz(50) == 0",
        "num_ids": 1455
    },
    {
        "number": 37,
        "max_answer_num": 28,
        "max_test_num": 1,
        "total_product": 360,
        "answer": "def sort_even(l):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    sorted_evens = sorted(l[::2])  # sort even-indexed elements of l\n    return [sorted_evens[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]",
        "test": "assert sort_even([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 2945
    },
    {
        "number": 38,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # undo cyclic elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "test": "assert decode_cyclic(encode_cyclic(\"a\")) == \"a\"",
        "num_ids": 2997
    },
    {
        "number": 39,
        "max_answer_num": 40,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def is_prime(num: int) -> bool:\n    \"\"\"\n    Returns True if the given number is prime, otherwise False.\n    \"\"\"\n    if num < 2:\n        return False\n\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n\n    return True\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    Returns the nth prime Fibonacci number.\n    \"\"\"\n    a, b = 1, 1\n    count = 0\n\n    while count < n:\n        if is_prime(a):\n            count += 1\n\n        if count == n:\n            return a\n\n        a, b = b, a + b",
        "test": "assert prime_fib(1) == 2",
        "num_ids": 2500
    },
    {
        "number": 40,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "test": "assert triples_sum_to_zero([1, 2, 3, 7]) == False",
        "num_ids": 3152
    },
    {
        "number": 41,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from typing import List\n\ndef car_race_collision(n: int) -> int:\n    cars_left = [True] * n  # initially all cars are on the left side\n    cars_right = [False] * n  # initially all cars are on the right side\n\n    collisions = 0\n\n    for i in range(n):\n        # if a car is on the left and a car is on the right, then they collided\n        if cars_left[i] and cars_right[i]:\n            collisions += 1\n\n        # move all cars on the right to the left\n        cars_left[i] = cars_right[i]\n\n    return collisions",
        "test": "assert car_race_collision(0) == 0",
        "num_ids": 3834
    },
    {
        "number": 42,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x+1 for x in l]",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 2055
    },
    {
        "number": 43,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
        "test": "assert pairs_sum_to_zero([1, 3, -2, 1]) == False",
        "num_ids": 2314
    },
    {
        "number": 44,
        "max_answer_num": 33,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # create an empty string to store the converted number\n    converted_num = ''\n    \n    # create a dictionary to map digits to their corresponding digits in other bases\n    digit_map = {str(i): str(i) for i in range(10)}\n    digit_map.update({'10': 'A', '11': 'B', '12': 'C', '13': 'D', '14': 'E', '15': 'F'})\n    \n    # convert x to base 10\n    while x > 0:\n        remainder = x % base\n        converted_num = digit_map[str(remainder)] + converted_num\n        x = x // base\n    \n    return converted_num",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 2462
    },
    {
        "number": 45,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n",
        "test": "assert triangle_area(5, 3) == 7.5",
        "num_ids": 1251
    },
    {
        "number": 46,
        "max_answer_num": 38,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    elif n == 2:\n        return c\n    elif n == 3:\n        return d\n    else:\n        for i in range(4, n+1):\n            a, b, c, d = b, c, d, (a+b+c+d)\n        return d\n",
        "test": "assert fib4(0) == 0",
        "num_ids": 2536
    },
    {
        "number": 47,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def median(l: list) -> float:\n    \"\"\"Return median of elements in the list l.\"\"\"\n    n = len(l)\n    sorted_l = sorted(l)\n    if n % 2 == 0:\n        # If n is even, take the average of the middle two elements\n        return (sorted_l[n//2-1] + sorted_l[n//2]) / 2\n    else:\n        # If n is odd, return the middle element\n        return sorted_l[n//2]",
        "test": "assert median([1]) == 1",
        "num_ids": 1936
    },
    {
        "number": 48,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n",
        "test": "assert is_palindrome('') == True",
        "num_ids": 1435
    },
    {
        "number": 49,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    result = 1\n    for i in range(n):\n        result = (result * 2) % p\n    return result",
        "test": "assert modp(0, 101) == 1",
        "num_ids": 1692
    },
    {
        "number": 50,
        "max_answer_num": 31,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hello\"",
        "num_ids": 2184
    },
    {
        "number": 51,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def remove_vowels(text):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = \"\"\n    for char in text:\n        if char.lower() not in vowels:\n            result += char\n    return result",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 1749
    },
    {
        "number": 52,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    return all(num < t for num in l)",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True, \"Failed test case 1\"",
        "num_ids": 1529
    },
    {
        "number": 53,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y",
        "test": "assert add(2, 3) == 5",
        "num_ids": 1107
    },
    {
        "number": 54,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    return set(s0) == set(s1)",
        "test": "assert same_chars('eabcd', 'dddddddabc') == False",
        "num_ids": 1921
    },
    {
        "number": 55,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)",
        "test": "assert fib(1) == 1",
        "num_ids": 1107
    },
    {
        "number": 56,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0",
        "test": "assert correct_bracketing(\"<\") == False",
        "num_ids": 1262
    },
    {
        "number": 57,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))",
        "test": "assert monotonic([1, 1, 1, 1]) == True",
        "num_ids": 2011
    },
    {
        "number": 58,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_elements = list(set(l1) & set(l2))\n    common_elements.sort()\n    return common_elements",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 2568
    },
    {
        "number": 59,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_prime(n: int) -> bool:\n    \"\"\"Return True if n is a prime number, else False.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    i = 2\n    while i <= n // i:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n",
        "test": "assert largest_prime_factor(7) == 7",
        "num_ids": 1882
    },
    {
        "number": 60,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return sum(range(1, n+1))\n",
        "test": "assert sum_to_n(30) == 465",
        "num_ids": 1560
    },
    {
        "number": 61,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 1552
    },
    {
        "number": 62,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    n = len(xs)\n    if n == 1:\n        return [0]\n    else:\n        res = [0] * (n-1)\n        for i in range(1, n):\n            res[i-1] = i * xs[i]\n        return res",
        "test": "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
        "num_ids": 2251
    },
    {
        "number": 63,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
        "test": "assert fibfib(0) == 0",
        "num_ids": 2092
    },
    {
        "number": 64,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def vowels_count(s):\n    vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    count = 0\n    for letter in s:\n        if letter.lower() in vowels:\n            count += 1\n    return count",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 1679
    },
    {
        "number": 65,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    digits = str(x)\n    num_digits = len(digits)\n    \n    if shift > num_digits:\n        shift = num_digits\n    \n    shift = shift % num_digits\n    \n    result = digits[-shift:] + digits[:-shift]\n    \n    return result",
        "test": "assert circular_shift(12, 1) == \"21\"",
        "num_ids": 2191
    },
    {
        "number": 66,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum = 0\n    for i in s:\n        if i.isupper():\n            sum += ord(i)\n    return sum",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 1611
    },
    {
        "number": 67,
        "max_answer_num": 40,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    \"\"\"\n    # split the string to get the number of apples and oranges\n    apples, oranges = s.split(\" and \")\n    # convert the string to integer\n    apples = int(apples.split()[0])\n    oranges = int(oranges.split()[0])\n    # calculate the number of mango fruits\n    mangoes = n - apples - oranges\n    # return the number of mango fruits\n    return mangoes",
        "test": "assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8",
        "num_ids": 3197
    },
    {
        "number": 68,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def pluck(arr):\n    even_list = [num for num in arr if num % 2 == 0]\n    if len(even_list) == 0:\n        return []\n    smallest_value = min(even_list)\n    smallest_index = arr.index(smallest_value)\n    return [smallest_value, smallest_index]",
        "test": "assert pluck([]) == []",
        "num_ids": 2665
    },
    {
        "number": 69,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(freq.keys(), reverse=True):\n        if num > 0 and freq[num] >= num:\n            return num\n    return -1",
        "test": "assert search([5, 5, 4, 4, 4]) == -1",
        "num_ids": 2264
    },
    {
        "number": 70,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        minimum = min(lst)\n        lst.remove(minimum)\n        maximum = max(lst)\n        lst.remove(maximum)\n        lst.insert(0, maximum)\n        lst.insert(0, minimum)\n        return lst",
        "test": "assert strange_sort_list([]) == []",
        "num_ids": 3124
    },
    {
        "number": 71,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # Check if the three sides form a valid triangle\n    if a + b > c and b + c > a and a + c > b:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area of the triangle using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        # Round the area to 2 decimal points and return it\n        return round(area, 2)\n    else:\n        # If the three sides don't form a valid triangle, return -1\n        return -1",
        "test": "assert triangle_area(3, 4, 5) == 6.00",
        "num_ids": 2976
    },
    {
        "number": 72,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def will_it_fly(q, w):\n    # check if q is a palindrome\n    if q == q[::-1]:\n        # calculate the sum of elements in q\n        total = sum(q)\n        # check if total is less than or equal to w\n        if total <= w:\n            return True\n    return False",
        "test": "assert will_it_fly([1, 2], 5) == False ",
        "num_ids": 3228
    },
    {
        "number": 73,
        "max_answer_num": 34,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    count = 0\n\n    # Find the minimum number of elements that need to be changed to make the array palindromic\n    for i in range(n // 2):\n        if arr[i]!= arr[n - i - 1]:\n            count += 1\n\n    return count",
        "test": "assert smallest_change([1, 2, 3, 2, 1]) == 0",
        "num_ids": 3373
    },
    {
        "number": 74,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def total_match(lst1, lst2):\n    # return an empty list if either list is empty\n    if not lst1 or not lst2:\n        return []\n\n    # create a list of tuples, where each tuple contains the total number of chars and the list itself\n    lst1_count = [(sum(len(s) for s in lst1), lst1)]\n    lst2_count = [(sum(len(s) for s in lst2), lst2)]\n\n    # sort the two lists by the total number of chars in the lists\n    lst1_count.sort(reverse=True)\n    lst2_count.sort(reverse=True)\n\n    # return the list that has lesser total number of chars\n    return lst1_count[0][1] if lst1_count[0][0] < lst2_count[0][0] else lst2_count[0][1]",
        "test": "assert total_match([], []) == []",
        "num_ids": 3316
    },
    {
        "number": 75,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is prime, else False\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    \"\"\"Return True if a is the multiplication of 3 prime numbers, else False\"\"\"\n    prime_count = 0\n    for i in range(2, a+1):\n        if is_prime(i) and a % i == 0:\n            prime_count += 1\n            if prime_count == 3:\n                return True\n    return False",
        "test": "assert is_multiply_prime(8) == False  # 8 = 2 * 2 * 2",
        "num_ids": 2672
    },
    {
        "number": 76,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int(log(x)/log(n))=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    import math\n    if x < 1:\n        return False\n    return n ** int(math.log(x, n)) == x",
        "test": "assert is_simple_power(3, 2) == False",
        "num_ids": 2440
    },
    {
        "number": 77,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n    # Check if a is equal to 0 or a negative number\n    if a <= 0:\n        return False\n    \n    # Check if a is a perfect cube\n    cube_root = int(a**(1/3))\n    return cube_root**3 == a",
        "test": "assert iscube(1) == True, \"Function should return True for input 1\"",
        "num_ids": 1695
    },
    {
        "number": 78,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def hex_key(num):\n    # Define the set of prime numbers\n    primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\n    # Convert the input string to uppercase\n    num = num.upper()\n\n    # Count the number of prime digits in the input string\n    count = 0\n    for c in num:\n        if int(c, 16) in primes:\n            count += 1\n\n    return count",
        "test": "assert hex_key(\"AB\") == 1",
        "num_ids": 2908
    },
    {
        "number": 79,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = bin(decimal)[2:] # convert decimal to binary without the '0b' prefix\n    binary_string = 'db' + binary + 'db' # add 'db' to start and end of string\n    return binary_string",
        "test": "assert decimal_to_binary(255) == \"db11111111db\"",
        "num_ids": 2800
    },
    {
        "number": 80,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n\n    return True",
        "test": "assert is_happy(\"a\") == False",
        "num_ids": 1858
    },
    {
        "number": 81,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n                 GPA       |    Letter grade\n                  4.0                A+\n                > 3.7                A \n                 > 3.3                A- \n                 > 3.0                B+\n                 > 2.7                B \n                 > 2.3                B-\n                 > 2.0                C+\n                 > 1.7                C\n                 > 1.3                C-\n                 > 1.0                D+ \n                 > 0.7                D \n                 > 0.0                D-\n                  0.0                E\n    \n\n    Example:\n    numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades",
        "test": "assert numerical_letter_grade([3.3, 2.3, 1.3, 1.0, 0.7]) == ['A-', 'B-', 'C-', 'D+', 'D']",
        "num_ids": 6845
    },
    {
        "number": 82,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))",
        "test": "assert prime_length('Hello') == True",
        "num_ids": 1590
    },
    {
        "number": 83,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, 10**n):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count",
        "test": "assert starts_one_ends(1) == 1",
        "num_ids": 1415
    },
    {
        "number": 84,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return bin(N)[2:]\n",
        "test": "assert solve(0) == \"0\"",
        "num_ids": 2296
    },
    {
        "number": 85,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 2!= 0 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum",
        "test": "assert add([4, 2, 6, 7]) == 2, \"add([4, 2, 6, 7]) returned an incorrect result\"",
        "num_ids": 1990
    },
    {
        "number": 86,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n    words = s.split()\n    new_words = []\n    for word in words:\n        new_word = ''\n        for letter in sorted(word):\n            new_word += letter\n        new_words.append(new_word)\n    return''.join(new_words)",
        "test": "assert anti_shuffle('Hi') == 'Hi'",
        "num_ids": 2117
    },
    {
        "number": 87,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            for j, num in enumerate(row):\n                if num == x:\n                    result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result",
        "test": "assert get_row([], 1) == []",
        "num_ids": 2730
    },
    {
        "number": 88,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n    if len(array) == 1:\n        return [array[0]]\n    \n    sum_first_last = sum([array[0], array[-1]])\n    \n    if sum_first_last % 2 == 1: # if sum of first and last index value is odd\n        array_sorted = sorted(array) # sort the array in ascending order\n    else:\n        array_sorted = sorted(array, reverse=True) # sort the array in descending order\n        \n    return array_sorted",
        "test": "assert sort_array([5]) == [5]",
        "num_ids": 4070
    },
    {
        "number": 89,
        "max_answer_num": 40,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_string = ''\n    for letter in s:\n        if letter in alphabet:\n            index = alphabet.index(letter)\n            new_index = (index + 2 * 2) % 26\n            encrypted_string += alphabet[new_index]\n        else:\n            encrypted_string += letter\n    return encrypted_string",
        "test": "assert encrypt('hi') == 'lm'",
        "num_ids": 2341
    },
    {
        "number": 90,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    \n    smallest = lst[0]\n    second_smallest = None\n    \n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num!= smallest and (second_smallest is None or num < second_smallest):\n            second_smallest = num\n    \n    return second_smallest",
        "test": "assert next_smallest([]) == None",
        "num_ids": 2278
    },
    {
        "number": 91,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    boredoms = 0\n    sentence = \"\"\n    for char in S:\n        sentence += char\n        if char in \".!?\":\n            if sentence.strip().startswith(\"I\"):\n                boredoms += 1\n            sentence = \"\"\n    if sentence.strip().startswith(\"I\"):\n        boredoms += 1\n    return boredoms",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 2225
    },
    {
        "number": 92,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) \u279e True\n\n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n\n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    \n    if x == y + z or y == x + z or z == x + y:\n        return True\n    \n    return False",
        "test": "assert any_int(3.6, -2.2, 2) == False, \"Test case 4 failed\"",
        "num_ids": 2607
    },
    {
        "number": 93,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def encode(message):\n    \"\"\"\n    Encodes a message by swapping case of all letters, and replacing vowels\n    with the letter that appears 2 places ahead of that vowel in the English alphabet.\n    \"\"\"\n    # Define the list of vowels and the list of letters in the English alphabet\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    alphabet = [chr(i) for i in range(ord('a'), ord('z')+1)]\n    \n    # Convert the message to lowercase and split it into a list of characters\n    message = message.lower()\n    message = list(message)\n    \n    # Swap the case of each letter in the message\n    for i in range(len(message)):\n        if message[i] in alphabet:\n            if message[i].isupper():\n                message[i] = message[i].lower()\n            else:\n                message[i] = message[i].upper()\n    \n    # Replace vowels with the letter that appears 2 places ahead of that vowel in the alphabet\n    for i in range(len(message)):\n        if message[i] in vowels:\n            # Find the index of the vowel in the English alphabet\n            vowel_index = vowels.index(message[i])\n            \n            # Find the index of the letter that appears 2 places ahead of the vowel in the alphabet\n            new_vowel_index = (vowel_index + 2) % 5\n            \n            # Replace the vowel with the letter that appears 2 places ahead of it in the alphabet\n            message[i] = alphabet[new_vowel_index]\n    \n    # Convert the message back to a string and return it\n    return ''.join(message)",
        "test": "assert encode('aeiou') == 'AEIOU'",
        "num_ids": 2662
    },
    {
        "number": 94,
        "max_answer_num": 40,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_digits(n):\n    return sum(int(d) for d in str(n))\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\"\"\"\n    max_prime = -1\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    return sum_digits(max_prime)",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
        "num_ids": 4151
    },
    {
        "number": 95,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    \n    first_key = next(iter(dict))\n    if isinstance(first_key, str):\n        if first_key.islower():\n            return all(isinstance(key, str) and key.islower() for key in dict)\n        elif first_key.isupper():\n            return all(isinstance(key, str) and key.isupper() for key in dict)\n        else:\n            return False\n    else:\n        return False",
        "test": "assert check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Should return False\"",
        "num_ids": 2983
    },
    {
        "number": 96,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    # Create an empty list to store the prime numbers\n    primes = []\n\n    # Loop through the integers from 2 to n\n    for i in range(2, n):\n        # Check if the current integer is a prime number\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n\n        # If the current integer is a prime number, append it to the list\n        if is_prime:\n            primes.append(i)\n\n        # If we have found n prime numbers, break out of the loop\n        if len(primes) == n:\n            break\n\n    # Return the list of prime numbers\n    return primes",
        "test": "assert count_up_to(0) == []",
        "num_ids": 2833
    },
    {
        "number": 97,
        "max_answer_num": 40,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    a_unit = a % 10\n    b_unit = b % 10\n    return a_unit * b_unit",
        "test": "assert multiply(148, 412) == 16",
        "num_ids": 2398
    },
    {
        "number": 98,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in ['A', 'E', 'I', 'O', 'U']:\n            count += 1\n    return count",
        "test": "assert count_upper('dBBE') == 0",
        "num_ids": 1699
    },
    {
        "number": 99,
        "max_answer_num": 39,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 2517
    },
    {
        "number": 100,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    pile = [n]\n    for i in range(n - 1):\n        if pile[-1] % 2 == 0:\n            pile.append(pile[-1] + 1)\n        else:\n            pile.append(pile[-1] + 2)\n    return pile",
        "test": "assert make_a_pile(1) == [1]",
        "num_ids": 3009
    },
    {
        "number": 101,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.replace(\",\", \" \").split()\n",
        "test": "assert words_string(\"Python is awesome\") == [\"Python\", \"is\", \"awesome\"]",
        "num_ids": 2437
    },
    {
        "number": 102,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    \n    # Check if x and y are positive integers\n    if type(x)!= int or type(y)!= int or x <= 0 or y <= 0:\n        return -1\n    \n    # Initialize the variable to store the result\n    result = -1\n    \n    # Iterate over all numbers in the range [x, y] inclusive\n    for i in range(x, y+1):\n        # Check if i is an even integer\n        if i % 2 == 0:\n            # If i is greater than the current result, update the result\n            if i > result:\n                result = i\n    \n    # Return the result\n    return result",
        "test": "assert choose_num(13, 12) == -1",
        "num_ids": 2289
    },
    {
        "number": 103,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    \n    avg = (n + m) // 2\n    binary = bin(avg)[2:]\n    return \"0b\" + binary",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 2303
    },
    {
        "number": 104,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique = []\n    for i in x:\n        if sum(int(digit) % 2 == 0 for digit in str(i)) == 0:\n            unique.append(i)\n    return sorted(unique)",
        "test": "assert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]",
        "num_ids": 3148
    },
    {
        "number": 105,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n      \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n      \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    if not arr:\n        return []\n    \n    # filter the numbers between 1 and 9 inclusive\n    nums = list(filter(lambda x: 1 <= x <= 9, arr))\n    # sort the filtered numbers\n    nums.sort()\n    # reverse the sorted numbers\n    nums.reverse()\n    # map each number to its corresponding name\n    names = list(map(lambda x: [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][x - 1], nums))\n    \n    return names",
        "test": "assert by_length([]) == []",
        "num_ids": 5296
    },
    {
        "number": 106,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def factorial(n):\n    \"\"\"\n    Returns the factorial of n (n!).\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef f(n):\n    \"\"\"\n    Returns a list of size n, where the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result",
        "test": "assert f(1) == [1]",
        "num_ids": 7150
    },
    {
        "number": 107,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1] and i%2 == 0:\n            count_even += 1\n        elif str(i) == str(i)[::-1] and i%2 == 1:\n            count_odd += 1\n    return (count_even, count_odd)",
        "test": "assert even_odd_palindrome(2) == (1, 1)",
        "num_ids": 3292
    },
    {
        "number": 108,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num > 0 and sum(abs(int(digit)) for digit in str(num)) > 0:\n            count += 1\n    return count",
        "test": "assert count_nums([]) == 0",
        "num_ids": 2110
    },
    {
        "number": 109,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def move_one_ball(arr):\n    n = len(arr)\n    if n == 0:\n        return True\n    \n    # Initialize a dictionary to keep track of the number of times each number\n    # appears in the array\n    count = {}\n    for num in arr:\n        if num not in count:\n            count[num] = 1\n        else:\n            count[num] += 1\n    \n    # If there are any numbers with count greater than n, it is not possible\n    # to get a sorted array by performing any number of right shift operations\n    for num in count:\n        if count[num] > n:\n            return False\n    \n    # If there are any repeated elements in the array, it is not possible to\n    # get a sorted array by performing any number of right shift operations\n    if len(count)!= n:\n        return False\n    \n    return True",
        "test": "assert move_one_ball([]) == True",
        "num_ids": 3890
    },
    {
        "number": 110,
        "max_answer_num": 29,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    even_lst1 = [num for num in lst1 if num % 2 == 0]\n    even_lst2 = [num for num in lst2 if num % 2 == 0]\n\n    if len(even_lst1) == 0 or len(even_lst2) == 0:\n        return \"NO\"\n\n    for num in even_lst1:\n        if num not in even_lst2:\n            return \"NO\"\n\n    return \"YES\"",
        "test": "assert exchange([1, 3, 5, 7], [2, 4, 6, 8]) == \"NO\"",
        "num_ids": 4051
    },
    {
        "number": 111,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\"\"\"\n\n    # split the string into individual letters and count their occurrence\n    letter_count = {}\n    for letter in test:\n        if letter.isalpha():\n            letter = letter.lower()\n            if letter in letter_count:\n                letter_count[letter] += 1\n            else:\n                letter_count[letter] = 1\n\n    # find the letter with the maximum occurrence and its count\n    max_count = 0\n    for letter in letter_count:\n        if letter_count[letter] > max_count:\n            max_count = letter_count[letter]\n            max_letter = letter\n\n    # check if there are any letters with the same occurrence as the maximum\n    result = {}\n    for letter in letter_count:\n        if letter_count[letter] == max_count:\n            result[letter] = letter_count[letter]\n\n    # return the dictionary of the letter with the most repetition and its count\n    return result",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
        "num_ids": 3469
    },
    {
        "number": 112,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def reverse_delete(s, c):\n    # Remove characters in s that are in c\n    for char in c:\n        s = s.replace(char, '')\n    \n    # Check if the result is a palindrome\n    palindrome = True\n    for i in range(len(s) // 2):\n        if s[i]!= s[-i-1]:\n            palindrome = False\n            break\n    \n    # Return the result and the palindrome check\n    return s, palindrome",
        "test": "assert reverse_delete(\"\", \"\") == ('', True)",
        "num_ids": 2276
    },
    {
        "number": 113,
        "max_answer_num": 14,
        "max_test_num": 1,
        "total_product": 230,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for s in lst:\n        count = 0\n        for c in s:\n            if int(c) % 2!= 0:\n                count += 1\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result",
        "test": "assert odd_count(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]",
        "num_ids": 3312
    },
    {
        "number": 114,
        "max_answer_num": 34,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n = len(nums)\n    if n == 1:\n        return nums[0]\n    else:\n        dp = [float('inf')] * n\n        dp[0] = nums[0]\n        for i in range(1, n):\n            dp[i] = min(dp[i-1] + nums[i], nums[i])\n        return min(dp)",
        "test": "assert minSubArraySum([0, 0, 0, 0, 0]) == 0",
        "num_ids": 2859
    },
    {
        "number": 115,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def max_fill(grid, capacity):\n    # Initialize variables\n    rows = len(grid)\n    cols = len(grid[0])\n    bucket_levels = [0] * (rows * cols)\n\n    # Compute the maximum number of full buckets that can be placed in each well\n    max_buckets = []\n    for i in range(rows):\n        row_max_buckets = 0\n        for j in range(cols):\n            if grid[i][j] == 1:\n                row_max_buckets = math.ceil(grid[i][j] / capacity)\n            max_buckets.append(row_max_buckets)\n\n    # Compute the number of full buckets that can be placed in each well using dynamic programming\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                bucket_levels[i * cols + j] = max_buckets[i * cols + j]\n            else:\n                for k in range(max_buckets[i * cols + j] - 1, -1, -1):\n                    if i > 0 and grid[i - 1][j] == 1:\n                        bucket_levels[(i - 1) * cols + j] = max(bucket_levels[(i - 1) * cols + j], k + 1)\n                    if j > 0 and grid[i][j - 1] == 1:\n                        bucket_levels[i * cols + j - 1] = max(bucket_levels[i * cols + j - 1], k + 1)\n                    if i < rows - 1 and grid[i + 1][j] == 1:\n                        bucket_levels[(i + 1) * cols + j] = max(bucket_levels[(i + 1) * cols + j], k + 1)\n                    if j < cols - 1 and grid[i][j + 1] == 1:\n                        bucket_levels[i * cols + j + 1] = max(bucket_levels[i * cols + j + 1], k + 1)\n\n    # Compute the number of times we need to lower the buckets\n    num_buckets = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                num_buckets += bucket_levels[i * cols + j]\n\n    # Return the number of times we need to lower the buckets\n    return num_buckets",
        "test": "assert max_fill([[0,0,0], [0,0,0]], 5) == 0",
        "num_ids": 5271
    },
    {
        "number": 116,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(num):\n        count = 0\n        while num > 0:\n            count += num & 1\n            num >>= 1\n        return count\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))",
        "test": "assert sort_array([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]",
        "num_ids": 3127
    },
    {
        "number": 117,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    \"\"\"\n    vowels = \"aeiou\"\n    words = s.split()\n    result = []\n\n    for word in words:\n        if len([c for c in word if c.lower() not in vowels]) == n:\n            result.append(word)\n\n    return result",
        "test": "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
        "num_ids": 3356
    },
    {
        "number": 118,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            for j in range(i+1, len(word)):\n                if word[j] not in vowels:\n                    return word[i]\n    return \"\"",
        "test": "assert get_closest_vowel(\"yogurt\") == \"u\"",
        "num_ids": 2001
    },
    {
        "number": 119,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def match_parens(lst):\n    # convert the list of strings into a single string\n    s = ''.join(lst)\n\n    # keep track of the number of open and close parentheses\n    open_count = 0\n    close_count = 0\n\n    # iterate through the string, counting the open and close parentheses\n    for c in s:\n        if c == '(':\n            open_count += 1\n        elif c == ')':\n            close_count += 1\n\n    # if the counts are equal, the string is good and we can concatenate it\n    if open_count == close_count:\n        return 'Yes'\n\n    # otherwise, we need to reorder the strings to make a good string\n    else:\n        # find all the indices where parentheses are balanced\n        balanced_indices = []\n        for i in range(len(s)):\n            if s[i] == '(':\n                open_count += 1\n            elif s[i] == ')':\n                close_count += 1\n            if open_count == close_count:\n                balanced_indices.append(i)\n\n        # if there are no balanced parentheses, there's no way to make a good string\n        if not balanced_indices:\n            return 'No'\n\n        # if there's only one balanced index, we can concatenate the strings\n        elif len(balanced_indices) == 1:\n            return 'Yes'\n\n        # otherwise, we need to reorder the strings to make a good string\n        else:\n            # check if we can reorder the strings to make a good string\n            for i in range(len(balanced_indices)):\n                # try swapping the two strings at the current indices\n                tmp = lst[i]\n                lst[i] = lst[-1]\n                lst[-1] = tmp\n                s = ''.join(lst)\n                open_count = 0\n                close_count = 0\n                for c in s:\n                    if c == '(':\n                        open_count += 1\n                    elif c == ')':\n                        close_count += 1\n                if open_count == close_count:\n                    return 'Yes'\n\n            # if we can't reorder the strings to make a good string, there's no way to do it\n            return 'No'",
        "test": "assert match_parens([')', ')']) == 'No'",
        "num_ids": 2898
    },
    {
        "number": 120,
        "max_answer_num": 33,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def maximum(arr, k):\n    arr.sort()\n    return arr[-k:]",
        "test": "assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
        "num_ids": 3010
    },
    {
        "number": 121,
        "max_answer_num": 33,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    result = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2!= 0:\n            result += lst[i]\n    return result",
        "test": "assert solution([30, 13, 24, 321]) == 0",
        "num_ids": 2031
    },
    {
        "number": 122,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(k):\n        if arr[i] < 10:\n            sum += arr[i]\n            count += 1\n        elif arr[i] < 100:\n            sum += arr[i]\n            count += 1\n    if count == 0:\n        return 0\n    else:\n        return sum",
        "test": "assert add_elements([1,2,3,4,5], 1) == 1 # single element",
        "num_ids": 3205
    },
    {
        "number": 123,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    collatz_seq = []\n    current_num = n\n    while current_num!= 1:\n        collatz_seq.append(current_num)\n        if current_num % 2 == 0:\n            current_num //= 2\n        else:\n            current_num = (current_num * 3) + 1\n    collatz_seq.append(1)\n    odd_collatz_seq = [x for x in collatz_seq if x % 2!= 0]\n    return sorted(odd_collatz_seq)",
        "test": "assert get_odd_collatz(2) == [1]",
        "num_ids": 4141
    },
    {
        "number": 124,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n\n    if not date:\n        return False\n\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n\n    if month < 1 or month > 12:\n        return False\n\n    if year < 1 or year > 9999:\n        return False\n\n    if month in [4, 6, 9, 11] and day < 1 or month in [4, 6, 9, 11] and day > 30:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n\n    if month == 2 and day < 1 or month == 2 and day > 29:\n        return False\n\n    return True",
        "test": "assert valid_date('03-11-2000') == True",
        "num_ids": 6044
    },
    {
        "number": 125,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def split_words(txt):\n    # check for whitespaces\n    words = txt.split()\n    if len(words) > 1:\n        return words\n    else:\n        # check for commas\n        words = txt.split(',')\n        if len(words) > 1:\n            return words\n        else:\n            # count lower-case letters with odd order in the alphabet\n            odd_letters = 0\n            for i in range(ord('a'), ord('z')+1):\n                if (i-ord('a')) % 2 == 1:\n                    odd_letters += txt.count(chr(i))\n            return odd_letters",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 2078
    },
    {
        "number": 126,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples:\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n\n    # If list has only one element, return True\n    if len(lst) == 1:\n        return True\n    \n    # Check if each element is greater than the previous element\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    \n    # Check if list has more than 1 duplicate of the same number\n    count = 0\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n            count += 1\n            if count > 1:\n                return False\n    \n    # If list is sorted and has no duplicates, return True\n    return True",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 3547
    },
    {
        "number": 127,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start2 > end1 or start1 > end2:\n        return \"NO\"\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    intersection_length = intersection_end - intersection_start + 1\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\"",
        "num_ids": 2861
    },
    {
        "number": 128,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    product = 1\n    total_magnitude = 0\n    for num in arr:\n        if num > 0:\n            product *= 1\n            total_magnitude += num\n        elif num < 0:\n            product *= -1\n            total_magnitude += abs(num)\n        else:\n            product *= 0\n    return total_magnitude * product",
        "test": "assert prod_signs([1, 2, 2, -4]) == -9",
        "num_ids": 2021
    },
    {
        "number": 129,
        "max_answer_num": 21,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "def minPath(grid, k):\n    n = len(grid)\n    m = len(grid[0])\n    \n    # dp[i][j][k] stores the minimum path of length k that ends at (i, j)\n    dp = [[[float('inf')] * (k+1) for _ in range(m)] for _ in range(n)]\n    \n    # base case: the minimum path of length 0 ends at (0, 0)\n    for i in range(n):\n        for j in range(m):\n            dp[i][j][0] = grid[i][j]\n    \n    # fill the rest of the dp table\n    for length in range(1, k+1):\n        for i in range(n):\n            for j in range(m):\n                for di in range(-1, 2):\n                    for dj in range(-1, 2):\n                        if 0 <= i+di < n and 0 <= j+dj < m and (di!= 0 or dj!= 0):\n                            dp[i][j][length] = min(dp[i][j][length], dp[i+di][j+dj][length-1])\n                dp[i][j][length] += grid[i][j]\n    \n    # find the cell with the minimum total sum of values on the path\n    min_sum = float('inf')\n    for i in range(n):\n        for j in range(m):\n            if dp[i][j][k] < min_sum:\n                min_sum = dp[i][j][k]\n                min_cell = (i, j)\n    \n    # backtrack to find the values on the path\n    values = [grid[min_cell[0]][min_cell[1]]]\n    for length in range(k-1, 0, -1):\n        i, j = min_cell\n        for di in range(-1, 2):\n            for dj in range(-1, 2):\n                if 0 <= i+di < n and 0 <= j+dj < m and (di!= 0 or dj!= 0):\n                    if dp[i+di][j+dj][length-1] == dp[i][j][length] - grid[i][j]:\n                        min_cell = (i+di, j+dj)\n                        values.append(grid[min_cell[0]][min_cell[1]])\n                        break\n    \n    # reverse the order of the values and return\n    values.reverse()\n    return values",
        "test": "assert minPath([ [1,2,3], [4,5,6], [7,8,9]], 1) == [1]",
        "num_ids": 7542
    },
    {
        "number": 130,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 390,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    else:\n        tri_seq = [1, 3, 2]\n        for i in range(3, n):\n            if i % 2 == 0:\n                tri_seq.append(1 + i // 2)\n            else:\n                tri_seq.append(tri_seq[i-1] + tri_seq[i-2] + tri_seq[i+1])\n        return tri_seq",
        "test": "assert tri(1) == [1, 3]",
        "num_ids": 4380
    },
    {
        "number": 131,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    product = 1\n    for digit in digits:\n        if digit % 2!= 0:\n            product *= digit\n    if product == 1:\n        return 0\n    else:\n        return product\n",
        "test": "assert digits(235) == 15",
        "num_ids": 1617
    },
    {
        "number": 132,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return bool(stack)",
        "test": "assert is_nested('[][]') == False, \"Test 3 failed\"",
        "num_ids": 1246
    },
    {
        "number": 133,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    \"\"\"\n    total = 0\n    for num in lst:\n        num = math.ceil(num)\n        total += num ** 2\n    return total",
        "test": "assert sum_squares([1,2,3]) == 14",
        "num_ids": 2338
    },
    {
        "number": 134,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    elif txt[-1].isalpha() and txt[-2].isspace():\n        return True\n    else:\n        return False\n",
        "test": "assert check_if_last_char_is_a_letter(\"\") == False",
        "num_ids": 2676
    },
    {
        "number": 135,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] >= arr[i+1]:\n            for j in range(i+1, n):\n                if arr[j] > arr[i]:\n                    return j-1\n            return -1\n    return n-1",
        "test": "assert can_arrange([5,4,3,2,1]) == -1",
        "num_ids": 2083
    },
    {
        "number": 136,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    neg = []\n    pos = []\n    for num in lst:\n        if num < 0:\n            neg.append(num)\n        elif num > 0:\n            pos.append(num)\n    \n    if not neg:\n        largest_neg = None\n    else:\n        largest_neg = max(neg)\n    \n    if not pos:\n        smallest_pos = None\n    else:\n        smallest_pos = min(pos)\n    \n    return (largest_neg, smallest_pos)",
        "test": "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
        "num_ids": 3257
    },
    {
        "number": 137,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    \n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    else:\n        if type(a) == int and type(b) == float:\n            if a > b:\n                return a\n            elif b > a:\n                return b\n            else:\n                return None\n        elif type(a) == float and type(b) == int:\n            if a > b:\n                return a\n            elif b > a:\n                return b\n            else:\n                return None\n        elif type(a) == str and type(b) == str:\n            a = a.replace(',', '.')\n            b = b.replace(',', '.')\n            if float(a) > float(b):\n                return a\n            elif float(b) > float(a):\n                return b\n            else:\n                return None",
        "test": "assert compare_one(1, 2.5) == 2.5",
        "num_ids": 3036
    },
    {
        "number": 138,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # Create a set of even numbers from 2 to n/2\n    even_numbers = set(range(2, n+1, 2))\n    # Create a set of pairs (a, b) where a + b = n and a and b are even numbers\n    pairs = set([(a, b) for a in even_numbers for b in even_numbers if a + b == n and a <= b])\n    # If there are exactly 4 pairs, then n can be written as the sum of exactly 4 positive even numbers\n    return len(pairs) == 4",
        "test": "assert is_equal_to_sum_even(4) == False",
        "num_ids": 2555
    },
    {
        "number": 139,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    factorial = 1\n\n    for i in range(1, n+1):\n        factorial *= i\n\n    return factorial",
        "test": "assert special_factorial(0) == 1",
        "num_ids": 2855
    },
    {
        "number": 140,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace consecutive spaces with -\n    i = 0\n    while i < len(text) - 1:\n        if text[i] == \"_\" and text[i+1] == \" \":\n            text = text[:i+1] + \"-\" + text[i+2:]\n            i += 1\n        i += 1\n    \n    return text",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 1884
    },
    {
        "number": 141,
        "max_answer_num": 37,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name.split('.'))!= 2:\n        return 'No'\n    before_dot, after_dot = file_name.split('.')\n    if not before_dot[0].isalpha():\n        return 'No'\n    if len([c for c in before_dot if c.isdigit()]) > 3:\n        return 'No'\n    if after_dot not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'",
        "test": "assert file_name_check(\"a.b.c.txt\") == 'No'",
        "num_ids": 4460
    },
    {
        "number": 142,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)\n",
        "test": "assert sum_squares([]) == 0",
        "num_ids": 2401
    },
    {
        "number": 143,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n    \"\"\"\n    words = sentence.split()\n    result = \"\"\n    for word in words:\n        if is_prime(len(word)):\n            result += word + \" \"\n    return result[:-1]",
        "test": "assert words_in_sentence(\"a b c\") == \"\"",
        "num_ids": 2549
    },
    {
        "number": 144,
        "max_answer_num": 36,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def simplify(x, n):\n    # convert the fractions from string to tuple of integers\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    # simplify the product of x and n\n    prod_num = x_num * n_num\n    prod_den = x_den * n_den\n    gcd = gcd_euclid(prod_num, prod_den)\n    simplified_num = prod_num // gcd\n    simplified_den = prod_den // gcd\n    \n    # check if the product is a whole number\n    if simplified_den == 1:\n        return True\n    else:\n        return False\n    \ndef gcd_euclid(a, b):\n    # implement Euclidean algorithm to find the greatest common divisor of a and b\n    while b:\n        a, b = b, a % b\n    return a",
        "test": "assert simplify(\"1/6\", \"2/1\") == False",
        "num_ids": 2081
    },
    {
        "number": 145,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    nums_with_points = [(digit_sum(num), num, index) for index, num in enumerate(nums)]\n    nums_with_points.sort()\n    return [num for point, num, index in nums_with_points]\n",
        "test": "assert order_by_points([]) == []",
        "num_ids": 3192
    },
    {
        "number": 146,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 10 % 10 in [1, 3, 5, 7, 9]:\n            count += 1\n    return count",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1",
        "num_ids": 2187
    },
    {
        "number": 147,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count",
        "test": "assert get_max_triples(5) == 1",
        "num_ids": 2691
    },
    {
        "number": 148,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\n    # Define a dictionary to store the distance of each planet from the sun\n    distances = {\"Mercury\": 0.39, \"Venus\": 0.72, \"Earth\": 1.0, \"Mars\": 1.52,\n                 \"Jupiter\": 5.20, \"Saturn\": 9.58, \"Uranus\": 19.18, \"Neptune\": 30.06}\n\n    # Check if the planet names are correct\n    if planet1 not in distances or planet2 not in distances:\n        return ()\n\n    # Find the distance of the two planets from the sun\n    dist1 = distances[planet1]\n    dist2 = distances[planet2]\n\n    # Create a list of planets sorted by their distance from the sun\n    planets = sorted(distances.keys(), key=lambda x: distances[x])\n\n    # Find the index of the two planets in the sorted list and return the planets between them\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    return tuple(planets[index1+1:index2])",
        "test": "assert bf(\"Mercury\", \"Pluto\") == ()",
        "num_ids": 4265
    },
    {
        "number": 149,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"\n    This function accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    \"\"\"\n    # Removing the words with odd lengths\n    lst = [word for word in lst if len(word) % 2 == 0]\n    # Sorting the list by length and then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    return lst",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 2983
    },
    {
        "number": 150,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def is_prime(n):\n    \"\"\"\n    A simple function to check if a number is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"\n    A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y",
        "test": "assert x_or_y(7, 34, 12) == 34",
        "num_ids": 2340
    },
    {
        "number": 151,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\n\n    If the input list is empty, return 0.\n    \"\"\"\n    if not lst:\n        return 0\n    odd_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2!= 0:\n                odd_squares += num**2\n    return odd_squares",
        "test": "assert double_the_difference([1, 3, 2, 0]) == 10",
        "num_ids": 2654
    },
    {
        "number": 152,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 2400
    },
    {
        "number": 153,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    strengths = []\n    for extension in extensions:\n        cap_count = sum(1 for c in extension if c.isupper())\n        sm_count = sum(1 for c in extension if c.islower())\n        if cap_count == 0:\n            strengths.append(float('inf'))\n        else:\n            strengths.append(cap_count - sm_count)\n    max_strength = max(strengths)\n    strongest_extensions = [extension for extension, strength in zip(extensions, strengths) if strength == max_strength]\n    return f\"{class_name}.{strongest_extensions[0]}\"\n",
        "test": "assert Strongest_Extension('ABCDEF', ['ghijKL', 'MnOpQr', 'STuFfEd', 'Xyz']) == 'ABCDEF.STuFfEd'",
        "num_ids": 4597
    },
    {
        "number": 154,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\"\"\"\n    if b in a:\n        return True\n    else:\n        for i in range(len(b)):\n            if b[i:] + b[:i] in a:\n                return True\n    return False",
        "test": "assert cycpattern_check(\"hello\",\"ell\") == True",
        "num_ids": 1922
    },
    {
        "number": 155,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n\n    if num < 0:\n        num = abs(num)\n\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        num //= 10\n\n    return (count_even, count_odd)",
        "test": "assert even_odd_count(123) == (1, 2)",
        "num_ids": 2029
    },
    {
        "number": 156,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def int_to_mini_roman(num):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n\n    roman_dict = {\n        1000: \"M\",\n        900: \"CM\",\n        500: \"D\",\n        400: \"CD\",\n        100: \"C\",\n        90: \"XC\",\n        50: \"L\",\n        40: \"XL\",\n        10: \"X\",\n        9: \"IX\",\n        5: \"V\",\n        4: \"IV\",\n        1: \"I\",\n    }\n\n    roman_num = \"\"\n\n    for value, letter in roman_dict.items():\n        while num >= value:\n            roman_num += letter\n            num -= value\n\n    return roman_num.lower()\n",
        "test": "assert int_to_mini_roman(1) == 'i'",
        "num_ids": 3264
    },
    {
        "number": 157,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2:\n        return True\n    else:\n        return False",
        "test": "assert right_angle_triangle(4, 3, 4) == False",
        "num_ids": 2605
    },
    {
        "number": 158,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def find_max(words):\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n        count = len(set(word))\n        if count > max_count or (count == max_count and word < max_word):\n            max_word = word\n            max_count = count\n    return max_word",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 2411
    },
    {
        "number": 159,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n    \n    Have fun :)\n    \"\"\"\n    if remaining < need:\n        return [number + remaining, 0]\n    else:\n        return [number + need, remaining - need]",
        "test": "assert eat(2, 11, 5) == [7, 0], \"eat(2, 11, 5) should return [7, 0]\"",
        "num_ids": 4555
    },
    {
        "number": 160,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator = ['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n\n    if len(operator)!= len(operand) - 1:\n        raise ValueError(\"Length of operator list is not equal to length of operand list minus one.\")\n\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i + 1])\n\n    return eval(expression)",
        "test": "assert do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9",
        "num_ids": 4850
    },
    {
        "number": 161,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def solve(s):\n    \"\"\"\n    You are given a string s.\n    If s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.upper() if char.islower() else char.lower()\n        else:\n            result += char\n    return result[::-1] if not any(char.isalpha() for char in s) else result",
        "test": "assert solve(\"\") == \"\"",
        "num_ids": 2317
    },
    {
        "number": 162,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    True\n    \"\"\"\n    if not text:\n        return None\n    \n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode('utf-8'))\n    return md5_hash.hexdigest()",
        "test": "assert string_to_md5('') is None",
        "num_ids": 2544
    },
    {
        "number": 163,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        a, b = b, a  # swap a and b if a is greater than b\n    \n    even_digits = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            even_digits.append(num)\n    \n    return even_digits",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 3877
    }
]