[
    {
        "number": 0,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\n\nif __name__ == '__main__':\n    numbers = [1.0, 2.0, 3.0]\n    threshold = 0.5\n    print(has_close_elements(numbers, threshold))\n\n    numbers = [1.0, 2.8, 3.0, 4.0, 5.0, 2.0]\n    threshold = 0.3\n    print(has_close_elements(numbers, threshold))",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False"
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    \"\"\"\n    groups = []\n    group = \"\"\n    stack = []\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                group += \")\"\n            else:\n                stack.pop()\n                if len(stack) == 0:\n                    groups.append(group)\n                    group = \"\"\n    if len(group) > 0:\n        groups.append(group)\n    return groups",
        "test": "assert separate_paren_groups('(   ) (  (   ) ) ( (   )   )') == ['()', '(())', '(()())']"
    },
    {
        "number": 2,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)",
        "test": "assert truncate_number(3.5) == 0.5"
    },
    {
        "number": 3,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
        "test": "assert below_zero([1, 2, 3]) == False"
    },
    {
        "number": 4,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(x - mean) for x in numbers]\n    mad = sum(absolute_differences) / len(absolute_differences)\n    return mad",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0"
    },
    {
        "number": 5,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i!= len(numbers) - 1:\n            result.append(numbers[i])\n            result.append(delimeter)\n        else:\n            result.append(numbers[i])\n    return result",
        "test": "assert intersperse([], 4) == []"
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_levels = []\n    current_level = 0\n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n        elif char == ')':\n            current_level -= 1\n            max_levels.append(current_level)\n    return max_levels",
        "test": "assert parse_nested_parens('()()') == [2]"
    },
    {
        "number": 7,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    return [s for s in strings if substring in s]\n\nprint(filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a'))",
        "test": "assert filter_by_substring([], 'a') == []"
    },
    {
        "number": 8,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), 1) if len(numbers) == 1 else (sum(numbers), numbers[0] * numbers[1] * sum_product(numbers[2:])[1])\n",
        "test": "assert sum_product([]) == (0, 1)"
    },
    {
        "number": 9,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    current_max = numbers[0]\n    result.append(current_max)\n    for num in numbers[1:]:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    return result",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]"
    },
    {
        "number": 10,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    \n    # Find longest palindromic postfix\n    i = len(string) - 1\n    while i >= 0 and not is_palindrome(string[:i+1]):\n        i -= 1\n    \n    # Append reverse of prefix before palindromic postfix\n    prefix = string[:i+1]\n    suffix = string[::-1]\n    if prefix == suffix:\n        return string + suffix\n    else:\n        return string + prefix + suffix[1:]",
        "test": "assert make_palindrome('') == ''"
    },
    {
        "number": 11,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result",
        "test": "assert string_xor('010', '110') == '100'"
    },
    {
        "number": 12,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str",
        "test": "assert longest([]) is None"
    },
    {
        "number": 13,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
        "test": "assert greatest_common_divisor(3, 5) == 1"
    },
    {
        "number": 14,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes",
        "test": "assert all_prefixes('abc') == ['a', 'ab', 'abc']"
    },
    {
        "number": 15,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    if n == 0:\n        return '0'\n    else:\n        return''.join([str(i) for i in range(n+1)])",
        "test": "assert string_sequence(0) == '0'"
    },
    {
        "number": 16,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of \"\"\"\n    # Convert the string to lowercase\n    string = string.lower()\n    # Create an empty set to store the distinct characters\n    distinct_chars = set()\n    # Iterate over each character in the string\n    for char in string:\n        # If the character is not already in the set of distinct characters, add it\n        if char not in distinct_chars:\n            distinct_chars.add(char)\n    # Return the number of distinct characters\n    return len(distinct_chars)",
        "test": "assert count_distinct_characters('xyzXYZ') == 3"
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    notes = []\n    current_note = \"\"\n    for char in music_string:\n        if char in [\"o\", \"o|\", \".|\"]:\n            current_note += char\n        elif char == \" \":\n            if current_note:\n                notes.append(len(current_note))\n                current_note = \"\"\n    if current_note:\n        notes.append(len(current_note))\n    return notes",
        "test": "assert parse_music(\"o o|.| o| o|.|.|.|.| o o\") == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"
    },
    {
        "number": 18,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    \"\"\"\n    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count",
        "test": "assert how_many_times('', 'a') == 0"
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    return''.join(sorted([str(i) for i in range(10) if str(i) in numbers.split()], key=lambda x: int(x)))",
        "test": "assert sort_numbers('nine seven six five four three two one') == 'one two three four five six seven nine'"
    },
    {
        "number": 20,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    numbers.sort()\n    closest_so_far = numbers[0]\n    second_closest_so_far = numbers[1]\n    for i in range(2, len(numbers)):\n        if abs(numbers[i] - closest_so_far) < abs(numbers[i] - second_closest_so_far):\n            second_closest_so_far = numbers[i]\n        else:\n            closest_so_far, second_closest_so_far = second_closest_so_far, closest_so_far\n    return closest_so_far, second_closest_so_far",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)"
    },
    {
        "number": 21,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]"
    },
    {
        "number": 22,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return [value for value in values if isinstance(value, int)]",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]"
    },
    {
        "number": 23,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)",
        "test": "assert strlen('') == 0"
    },
    {
        "number": 24,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n - 1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1",
        "test": "assert largest_divisor(15) == 5"
    },
    {
        "number": 25,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    d = 2\n    while d*d <= n:\n        while (n % d) == 0:\n            factors.append(d)\n            n //= d\n        d += 1\n    if n > 1:\n        factors.append(n)\n    return factors",
        "test": "assert factorize(8) == [2, 2, 2]"
    },
    {
        "number": 26,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # Create a dictionary to count the occurrences of each number\n    count_dict = {}\n    for num in numbers:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Create a new list with only the unique numbers\n    unique_numbers = []\n    for num in numbers:\n        if count_dict[num] == 1:\n            unique_numbers.append(num)\n    \n    return unique_numbers",
        "test": "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"
    },
    {
        "number": 27,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result",
        "test": "assert flip_case('Hello') == 'hELLO'"
    },
    {
        "number": 28,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    if len(strings) == 0:\n        return ''\n    else:\n        return strings[0] + concatenate(strings[1:])",
        "test": "assert concatenate([]) == ''"
    },
    {
        "number": 29,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]",
        "test": "assert filter_by_prefix([], 'a') == []"
    },
    {
        "number": 30,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]"
    },
    {
        "number": 31,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert is_prime(6) == False"
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "The `find_zero` function takes a list of coefficients `xs` and finds the zero point of the polynomial. The function uses the fact that the zero point of a polynomial is the point at which the second derivative is zero. The `poly` function is used to evaluate the second derivative at a point and then uses the quadratic formula to find the roots of the polynomial. The function returns the only zero point, even if there are many.",
        "test": "assert find_zero([-6, 11, -6, 1]) == 1.0"
    },
    {
        "number": 33,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    sorted_l = sorted(l)\n    result = []\n    for i, val in enumerate(l):\n        if i % 3 == 0:\n            result.append(sorted_l.pop(0))\n        else:\n            result.append(val)\n    return result",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3]"
    },
    {
        "number": 34,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]"
    },
    {
        "number": 35,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)",
        "test": "assert max_element([1, 2, 3]) == 3"
    },
    {
        "number": 36,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def fizz_buzz(n: int):\n    count = 0\n    for num in range(1, n):\n        if num % 11 == 0 or num % 13 == 0:\n            count += str(num).count(\"7\")\n    return count",
        "test": "assert fizz_buzz(50) == 0"
    },
    {
        "number": 37,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    # get even indices of the list\n    even_indices = [index for index in range(len(l)) if index % 2 == 0]\n\n    # get even values of the list and sort them\n    even_values = sorted([l[index] for index in even_indices])\n\n    # create a new list with the sorted even values\n    new_l = [None] * len(l)\n    for i in range(len(even_indices)):\n        new_l[even_indices[i]] = even_values[i]\n\n    return new_l",
        "test": "assert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]"
    },
    {
        "number": 38,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert decode_cyclic(encode_cyclic(\"abc\")) == \"abc\""
    },
    {
        "number": 39,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        fib = [2, 3]\n        count = 2\n        while count < n:\n            fib.append(fib[count-1] + fib[count-2])\n            if is_prime(fib[count]):\n                count += 1\n            else:\n                fib.pop()\n        return fib[n-1]\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    is_prime returns True if n is a prime number, else False.\n    \"\"\"\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True",
        "test": "assert prime_fib(1) == 2"
    },
    {
        "number": 40,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def triples_sum_to_zero(l):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False"
    },
    {
        "number": 41,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    left_cars = [i for i in range(n)]\n    right_cars = [i for i in range(n)]\n    collisions = 0\n    for i in range(n):\n        if left_cars[i] > right_cars[i]:\n            collisions += 1\n    return collisions",
        "test": "assert car_race_collision(0) == 0"
    },
    {
        "number": 42,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i + 1 for i in l]",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]"
    },
    {
        "number": 43,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
        "test": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False"
    },
    {
        "number": 44,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    Return string representation after the conversion.\n    Base numbers are less than 10.\"\"\"\n    if base < 2 or base > 10:\n        raise ValueError(\"Base numbers must be between 2 and 10.\")\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(x % base)\n        x //= base\n    digits.reverse()\n    return ''.join(str(d) for d in digits)\n\nif __name__ == '__main__':\n    print(change_base(8, 3))\n    print(change_base(8, 2))\n    print(change_base(7, 2))",
        "test": "assert change_base(8, 3) == '22'"
    },
    {
        "number": 45,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height, returns area of a triangle.\"\"\"\n    area = 0.5 * a * h\n    return area\n",
        "test": "assert triangle_area(5, 3) == 7.5"
    },
    {
        "number": 46,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        fib_prev = 0\n        fib_curr = 0\n        fib_prev_prev = 0\n        fib_prev_curr = 2\n        \n        for i in range(3, n+1):\n            fib_curr = fib_prev_prev + fib_prev_curr + fib_prev\n            fib_prev_prev = fib_prev_curr\n            fib_prev_curr = fib_prev\n            fib_prev = fib_curr\n        \n        return fib_curr",
        "test": "assert fib4(0) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]",
        "test": "assert median([3, 1, 2, 4, 5]) == 3"
    },
    {
        "number": 48,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    if text == '':\n        return True\n    elif text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    else:\n        return False",
        "test": "assert is_palindrome('') == True"
    },
    {
        "number": 49,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)",
        "test": "assert modp(3, 5) == 3"
    },
    {
        "number": 50,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hello\""
    },
    {
        "number": 51,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])",
        "test": "assert remove_vowels('') == ''"
    },
    {
        "number": 52,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    return all(num < t for num in l)\n",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True"
    },
    {
        "number": 53,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
        "test": "assert add(2, 3) == 5"
    },
    {
        "number": 54,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    set0 = set(s0)\n    set1 = set(s1)\n    return set0 == set1",
        "test": "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True"
    },
    {
        "number": 55,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def fib(n: int) -> int:\n    \"\"\"Return the n-th Fibonacci number.\"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)",
        "test": "assert fib(10) == 55"
    },
    {
        "number": 56,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\"\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0",
        "test": "assert correct_bracketing(\"<\") == False"
    },
    {
        "number": 57,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))",
        "test": "assert monotonic([1, 2, 4, 20]) == True"
    },
    {
        "number": 58,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    set1 = set(l1)\n    set2 = set(l2)\n    common_set = set1.intersection(set2)\n    common_list = sorted(list(common_set))\n    return common_list\n",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]"
    },
    {
        "number": 59,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_prime(n: int) -> bool:\n    \"\"\"Return True if n is prime, False otherwise.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
        "test": "assert largest_prime_factor(13195) == 29"
    },
    {
        "number": 60,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_to_n(n: int) -> int:\n    \"\"\"\n    This function takes an integer n and returns the sum of numbers from 1 to n.\n    \"\"\"\n    return (n * (n+1)) // 2",
        "test": "assert sum_to_n(30) == 465"
    },
    {
        "number": 61,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "test": "assert correct_bracketing(\"(\") == False"
    },
    {
        "number": 62,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def derivative(xs):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n    return [i*x for i,x in enumerate(xs[1:], start=1)]\n",
        "test": "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]"
    },
    {
        "number": 63,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert fibfib(1) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\"\"\"\n    count = 0\n    for char in s:\n        if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    if s[-1].lower() == 'y':\n        count += 1\n    return count",
        "test": "assert vowels_count(\"abcde\") == 2, \"vowels_count('abcde') should return 2\""
    },
    {
        "number": 65,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    x_str = str(x)\n    n = len(x_str)\n    if shift > n:\n        return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]",
        "test": "assert circular_shift(12, 1) == \"21\""
    },
    {
        "number": 66,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n\n    # initialize the sum variable to 0\n    total = 0\n\n    # iterate over each character in the string\n    for char in s:\n\n        # if the character is uppercase, add its ASCII code to the total\n        if char.isupper():\n            total += ord(char)\n\n    # return the total sum\n    return total",
        "test": "assert digitSum(\"\") == 0"
    },
    {
        "number": 67,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    \"\"\"\n    # split the string into apples and oranges\n    apples, oranges = s.split(' and ')\n    \n    # convert the strings to integers\n    apples = int(apples.split()[0])\n    oranges = int(oranges.split()[0])\n    \n    # calculate the number of mango fruits in the basket\n    mangoes = n - apples - oranges\n    \n    return mangoes",
        "test": "assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8"
    },
    {
        "number": 68,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pluck(arr):\n    if not arr:\n        return []\n    \n    even_values = [(v, i) for i, v in enumerate(arr) if v % 2 == 0]\n    if not even_values:\n        return []\n    \n    smallest_value, smallest_index = min(even_values)\n    return [smallest_value, smallest_index]",
        "test": "assert pluck([4,2,3]) == [2, 1]"
    },
    {
        "number": 69,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def search(lst):\n    freq = {}\n    max_freq = 0\n    max_num = -1\n    for num in lst:\n        if num > 0:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n            if freq[num] > max_freq:\n                max_freq = freq[num]\n                max_num = num\n    return max_num if max_num!= -1 else -1",
        "test": "assert search([4, 1, 2, 2, 3, 1]) == 2"
    },
    {
        "number": 70,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) <= 1:\n        return lst\n\n    min_val = min(lst)\n    max_val = max(lst)\n\n    new_lst = []\n    for i in range(len(lst)):\n        if lst[i] == min_val:\n            new_lst.append(min_val)\n            lst.remove(min_val)\n            break\n\n    for i in range(len(lst)):\n        if lst[i] == max_val:\n            new_lst.append(max_val)\n            lst.remove(max_val)\n            break\n\n    new_lst += lst\n    return new_lst",
        "test": "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]"
    },
    {
        "number": 71,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # Check if the sum of any two sides is greater than the third side\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    # Round the area to 2 decimal points\n    area = round(area, 2)\n    \n    return area",
        "test": "assert triangle_area(3, 4, 5) == 6.00"
    },
    {
        "number": 72,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def will_it_fly(q, w):\n    # Check if q is a palindrome\n    if q == q[::-1]:\n        # Check if the sum of q's elements is less than or equal to w\n        if sum(q) <= w:\n            return True\n    return False",
        "test": "assert will_it_fly([1, 2], 5) == False"
    },
    {
        "number": 73,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "test": "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1"
    },
    {
        "number": 74,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def total_match(lst1, lst2):\n    \"\"\"\n    Returns the list that has total number of chars in the all strings of the list less than the other list.\n    If the two lists have the same number of chars, returns the first list.\n    \"\"\"\n    if len(lst1) < len(lst2):\n        return lst1\n    elif len(lst1) > len(lst2):\n        return lst2\n    else:\n        total_chars = sum(len(s) for s in lst1)\n        other_total_chars = sum(len(s) for s in lst2)\n        if total_chars < other_total_chars:\n            return lst1\n        elif total_chars > other_total_chars:\n            return lst2\n        else:\n            return lst1",
        "test": "assert total_match([], []) == []"
    },
    {
        "number": 75,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    count = 0\n    for i in range(len(prime_numbers)):\n        if prime_numbers[i] > a // prime_numbers[i]:\n            break\n        if a % prime_numbers[i] == 0:\n            count += 1\n    if count == 3:\n        return True\n    else:\n        return False",
        "test": "assert is_multiply_prime(30) == True"
    },
    {
        "number": 76,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int(log(x, n))=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return n**int(x/n) == x",
        "test": "assert is_simple_power(2, 2) == True"
    },
    {
        "number": 77,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    \"\"\"\n    # Check if a is 0, if yes then it is a cube\n    if a == 0:\n        return True\n    # Calculate the cube root of a\n    cube_root = a**(1/3)\n    # Check if cube_root is an integer\n    if cube_root.is_integer():\n        return True\n    else:\n        return False",
        "test": "assert iscube(1) == True"
    },
    {
        "number": 78,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_prime(num):\n    \"\"\"Function to check whether a number is prime or not\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef hex_key(num):\n    \"\"\"Function to count the number of hexadecimal digits that are primes\"\"\"\n    count = 0\n    for digit in num:\n        if is_prime(int(digit, 16)):\n            count += 1\n    return count",
        "test": "assert hex_key(\"AB\") == 1"
    },
    {
        "number": 79,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"\n    Convert a decimal number to binary format.\n\n    Args:\n    decimal (int): A decimal number.\n\n    Returns:\n    str: A string with each character representing a binary number.\n\n    \"\"\"\n    if decimal == 0:\n        return \"db0db\"\n    binary = \"\"\n    while decimal > 0:\n        remainder = decimal % 2\n        binary = str(remainder) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"",
        "test": "assert decimal_to_binary(15) == \"db1111db\""
    },
    {
        "number": 80,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    n = len(s)\n    if n < 3:\n        return False\n    seen = set()\n    for i in range(0, n, 3):\n        if s[i:i+3] in seen:\n            return False\n        seen.add(s[i:i+3])\n    return True",
        "test": "assert is_happy(\"a\") == False"
    },
    {
        "number": 81,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n                 GPA       |    Letter grade\n                  4.0                A+\n                > 3.7                A \n                 > 3.3                A- \n                > 3.0                B+\n                 > 2.7                B \n                 > 2.3                B-\n                 > 2.0                C+\n                 > 1.7                C\n                 > 1.3                C-\n                 > 1.0                D+ \n                 > 0.7                D \n                 > 0.0                D-\n                  0.0                E\n    \"\"\"\n    letter_grades = []\n    for g in grades:\n        if g == 4.0:\n            letter_grades.append('A+')\n        elif g >= 3.7:\n            letter_grades.append('A')\n        elif g >= 3.3:\n            letter_grades.append('A-')\n        elif g >= 3.0:\n            letter_grades.append('B+')\n        elif g >= 2.7:\n            letter_grades.append('B')\n        elif g >= 2.3:\n            letter_grades.append('B-')\n        elif g >= 2.0:\n            letter_grades.append('C+')\n        elif g >= 1.7:\n            letter_grades.append('C')\n        elif g >= 1.3:\n            letter_grades.append('C-')\n        elif g >= 1.0:\n            letter_grades.append('D+')\n        elif g >= 0.7:\n            letter_grades.append('D')\n        elif g >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades",
        "test": "assert numerical_letter_grade([3.7, 3.3, 3.0, 2.7, 2.3]) == ['A', 'A-', 'B+', 'B', 'B-']"
    },
    {
        "number": 82,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\"\"\"\n    if len(string) == 1:\n        return True\n    for i in range(2, int(len(string)**0.5)+1):\n        if len(string) % i == 0:\n            return False\n    return True",
        "test": "assert prime_length('Hello') == True"
    },
    {
        "number": 83,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def starts_one_ends(n):\n    count = 0\n    for num in range(1, 10**n):\n        if num % 10 == 1 or num % 10**(n-1) == 1:\n            count += 1\n    return count",
        "test": "assert starts_one_ends(1) == 1"
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solve(N):\n    \"\"\"\n    Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binary = bin(N)[2:] # convert integer to binary string\n    return sum(int(digit) for digit in binary) # sum of binary digits\n",
        "test": "assert solve(150) == \"110\""
    },
    {
        "number": 85,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    result = 0\n    for i in range(len(lst)):\n        if i % 2!= 0 and lst[i] % 2 == 0:\n            result += lst[i]\n    return result",
        "test": "assert add([4, 2, 6, 7]) == 2"
    },
    {
        "number": 86,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n    words = s.split()\n    new_words = []\n    for word in words:\n        new_word = ''.join(sorted(word))\n        new_words.append(new_word)\n    new_s =''.join(new_words)\n    return new_s",
        "test": "assert anti_shuffle('Hi') == 'Hi'"
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coordinates = []\n\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n\n    if not coordinates:\n        return []\n\n    coordinates = sorted(coordinates)\n\n    row_coordinates = [coordinates[0]]\n\n    for coordinate in coordinates[1:]:\n        if coordinate[0] == row_coordinates[-1][0]:\n            row_coordinates.append(coordinate)\n\n    row_coordinates = sorted(row_coordinates, key=lambda x: x[1], reverse=True)\n\n    return row_coordinates",
        "test": "assert get_row(["
    },
    {
        "number": 88,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n    if len(array) == 1:\n        return array\n    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n",
        "test": "assert sort_array([]) == []"
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # create a dictionary with the alphabet rotated by two multiplied to two places\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    rotated_alphabet = alphabet[2:] + alphabet[:2]\n    alphabet_dict = dict(zip(alphabet, rotated_alphabet))\n\n    # encrypt the string using the dictionary\n    encrypted = ''\n    for char in s.lower():\n        if char.isalpha():\n            encrypted += alphabet_dict[char]\n        else:\n            encrypted += char\n    return encrypted",
        "test": "assert encrypt('asdfghjkl') == 'ewhjklnop'"
    },
    {
        "number": 90,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    return min(lst)",
        "test": "assert next_smallest([5, 1, 4, 3, 2]) == 2"
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    count = 0\n    sentences = S.split('. ')\n    for sentence in sentences:\n        words = sentence.split(' ')\n        if words[0] == 'I':\n            count += 1\n    return count\n",
        "test": "assert is_bored(\"Hello world\") == 0"
    },
    {
        "number": 92,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    \n    '''\n    \n    if type(x) == int and type(y) == int and type(z) == int:\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False",
        "test": "assert any_int(5, 2, 7) == True"
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            if letter.isupper():\n                new_message += chr((ord(letter) + 2 - 65) % 26 + 65)\n            else:\n                new_message += chr((ord(letter) + 2 - 97) % 26 + 97)\n        else:\n            if letter.islower():\n                new_message += letter.upper()\n            else:\n                new_message += letter\n    return new_message",
        "test": "assert encode('This is a message') == 'tHKS KS C MGSSCGG'"
    },
    {
        "number": 94,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    \n    # function to check whether a number is prime or not\n    def is_prime(n):\n        if n <= 1:\n            return False\n        elif n <= 3:\n            return True\n        elif n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    # finding the largest prime in the list and its digits sum\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n    digits_sum = sum(int(digit) for digit in str(largest_prime))\n    \n    # returning the digits sum\n    return digits_sum",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10"
    },
    {
        "number": 95,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not dict:\n        return False\n\n    is_lower = all(isinstance(k, str) and k.islower() for k in dict.keys())\n    is_upper = all(isinstance(k, str) and k.isupper() for k in dict.keys())\n\n    return is_lower or is_upper",
        "test": "assert check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) == False"
    },
    {
        "number": 96,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime and i < n:\n            primes.append(i)\n        if len(primes) == n:\n            break\n    return primes",
        "test": "assert count_up_to(5) == [2,3]"
    },
    {
        "number": 97,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return (a % 10) * (b % 10)",
        "test": "assert multiply(148, 412) == 16, \"Wrong output\""
    },
    {
        "number": 98,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            if s[i] in 'AEIOU':\n                count += 1\n    return count",
        "test": "assert count_upper('aBCdEf') == 1"
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)",
        "test": "assert closest_integer(\"10\") == 10"
    },
    {
        "number": 100,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    levels = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            levels.append(levels[-1] + 2)\n        else:\n            levels.append(levels[-1] + 1)\n    return levels",
        "test": "assert make_a_pile(1) == [1]"
    },
    {
        "number": 101,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n",
        "test": "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"
    },
    {
        "number": 102,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    \n    # Initialize the variable to store the maximum even number found\n    max_even = -1\n    \n    # Iterate through all even numbers in the range [x, y] inclusive\n    for i in range(x, y+1, 2):\n        if i > max_even:\n            max_even = i\n    \n    # Return the maximum even number found\n    return max_even",
        "test": "assert choose_num(13, 12) == -1"
    },
    {
        "number": 103,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    \n    binary_string = \"\"\n    while rounded_avg > 0:\n        binary_string += str(rounded_avg % 2)\n        rounded_avg //= 2\n    \n    return \"0b\" + binary_string[::-1]",
        "test": "assert rounded_avg(1, 5) == \"0b11\""
    },
    {
        "number": 104,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique_digits = []\n    for num in x:\n        digits = [int(d) for d in str(num)] # convert to list of digits\n        if not any(d % 2 == 0 for d in digits): # check if no even digits\n            unique_digits.append(num) # add to result list if not even\n    return sorted(unique_digits) # return sorted list of unique digits",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]"
    },
    {
        "number": 105,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n      \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n      \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    # remove any strange numbers\n    arr = [x for x in arr if -1 <= x <= 9]\n\n    # sort between 1 and 9\n    arr = sorted([x for x in arr if 1 <= x <= 9])\n\n    # reverse the array\n    arr = arr[::-1]\n\n    # replace digits with their names\n    result = []\n    for num in arr:\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n\n    return result",
        "test": "assert by_length([]) == []"
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def factorial(n):\n    \"\"\"Return the factorial of n.\"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef f(n):\n    \"\"\"Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(i)\n    return result",
        "test": "assert f(10) == [1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800]"
    },
    {
        "number": 107,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    # initialize even and odd palindrome count\n    even_count = 0\n    odd_count = 0\n    \n    # loop through range(1, n) and check if each number is a palindrome\n    for i in range(1, n+1):\n        # convert number to string and check if it is equal to its reverse\n        if str(i) == str(i)[::-1]:\n            # if number is even\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    # return tuple of even and odd palindrome count\n    return (even_count, odd_count)",
        "test": "assert even_odd_palindrome(3) == (1, 2)"
    },
    {
        "number": 108,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num >= 0:\n            sum_of_digits = sum(int(digit) for digit in str(abs(num)))\n            if sum_of_digits > 0:\n                count += 1\n        else:\n            sum_of_digits = sum(int(digit) for digit in str(abs(num)))\n            if sum_of_digits == 0:\n                count += 1\n    return count",
        "test": "assert count_nums([]) == 0, \"Failed\""
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def move_one_ball(arr):\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] > arr[j]:\n            return False\n        i += 1\n        j -= 1\n    return True",
        "test": "assert move_one_ball([3, 5, 4, 1, 2]) == False"
    },
    {
        "number": 110,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Checking if all the elements of lst1 are even\n    for num in lst1:\n        if num % 2!= 0:\n            return \"NO\"\n    \n    # Checking if it is possible to exchange elements between the lst1 and lst2\n    # to make all the elements of lst1 to be even\n    for i in range(len(lst1)):\n        for j in range(len(lst2)):\n            if lst1[i] % 2 == 0 and lst2[j] % 2 == 0:\n                lst1[i], lst2[j] = lst2[j], lst1[i]\n                if all(num % 2 == 0 for num in lst1):\n                    return \"YES\"\n                else:\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n    \n    return \"NO\"",
        "test": "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\""
    },
    {
        "number": 111,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Split the string into a list of lowercase letters\n    letters = test.lower().split()\n\n    # Create an empty dictionary to store the histogram\n    hist = {}\n\n    # Iterate over the letters and count the occurrences\n    for letter in letters:\n        hist[letter] = hist.get(letter, 0) + 1\n\n    # Find the letter(s) with the highest count\n    max_count = max(hist.values())\n\n    # Create a new dictionary containing only the letters with the highest count\n    result = {k: v for k, v in hist.items() if v == max_count}\n\n    return result",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}"
    },
    {
        "number": 112,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    if result == result[::-1]:\n        return (result,True)\n    else:\n        return (result,False)",
        "test": "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)"
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    odd_count_lst = []\n    for string in lst:\n        count = 0\n        for digit in string:\n            if int(digit) % 2!= 0:\n                count += 1\n        odd_count_lst.append(\"the number of odd elements {}n the string {} of the input.\".format(count, string))\n    return odd_count_lst",
        "test": "assert odd_count(['3',\"11111111\"]) == [\"the number of odd elements 1 in the string 1 of the input.\", \"the number of odd elements 8 in the string 8 of the input.\"]"
    },
    {
        "number": 114,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n = len(nums)\n    if n == 1:\n        return nums[0]\n    else:\n        min_sum = float('inf')\n        for i in range(n):\n            current_sum = sum(nums[i:])\n            if current_sum < min_sum:\n                min_sum = current_sum\n        return min_sum",
        "test": "assert minSubArraySum([-1, -2, -3]) == -6"
    },
    {
        "number": 115,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_fill(grid, capacity):\n    m, n = len(grid), len(grid[0])\n    dp = [[0] * n for _ in range(m)]\n    res = 0\n\n    for i in range(m):\n        j = 0\n        while j < n:\n            if grid[i][j] == 1:\n                res += 1\n                if j == 0:\n                    dp[i][j] = 1\n                elif dp[i][j-1] + 1 <= capacity:\n                    dp[i][j] = dp[i][j-1] + 1\n                else:\n                    dp[i][j] = capacity\n            else:\n                dp[i][j] = 0\n            j += 1\n\n    return res",
        "test": "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6"
    },
    {
        "number": 116,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def binary_ones(num):\n        count = 0\n        while num > 0:\n            count += num & 1\n            num >>= 1\n        return count\n\n    def cmp_func(x, y):\n        if binary_ones(x)!= binary_ones(y):\n            return binary_ones(x) - binary_ones(y)\n        else:\n            return x - y\n\n    return sorted(arr, key=cmp_to_key(cmp_func))",
        "test": "assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]"
    },
    {
        "number": 117,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if not s:\n        return []\n\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    consonants = [chr(i) for i in range(ord('a'), ord('z')+1) if chr(i) not in vowels]\n\n    words = s.split()\n    result = []\n\n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char in consonants:\n                consonant_count += 1\n        if consonant_count == n:\n            result.append(word)\n\n    return result",
        "test": "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]"
    },
    {
        "number": 118,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def get_closest_vowel(word):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    for i in range(len(word)-2, -1, -1):\n        if word[i] not in vowels:\n            for j in range(i+2, len(word)):\n                if word[j] in vowels:\n                    return word[j]\n    return ''",
        "test": "assert get_closest_vowel(\"yogurt\") == \"u\""
    },
    {
        "number": 119,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def match_parens(lst):\n    # Combine the two strings into one\n    s = ''.join(lst)\n\n    # Initialize a stack to keep track of open parentheses\n    stack = []\n\n    # Loop over the characters in the string\n    for c in s:\n        # If we encounter an open parenthesis, push it onto the stack\n        if c == '(':\n            stack.append(c)\n        # If we encounter a close parenthesis, pop an open parenthesis from the stack\n        elif c == ')':\n            if not stack:\n                # If the stack is empty, we don't have any matching open parenthesis\n                return 'No'\n            stack.pop()\n\n    # If we make it through the entire string without finding any unmatched parentheses,\n    # the string is good and we return 'Yes'\n    return 'Yes'",
        "test": "assert match_parens([')', ')']) == 'No'"
    },
    {
        "number": 120,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    \n    return sorted(arr, reverse=True)[:k]",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]"
    },
    {
        "number": 121,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    sum_of_odds = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2!= 0:\n            sum_of_odds += lst[i]\n    return sum_of_odds",
        "test": "assert solution([5, 8, 7, 1]) == 12"
    },
    {
        "number": 122,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add_elements(arr, k):\n    total_sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            total_sum += arr[i]\n    return total_sum",
        "test": "assert add_elements([111,21,3,4000,5,6,7,8,9], 4) == 24 # sum of 21 + 3"
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    odd_numbers = []\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2!= 0:\n            odd_numbers.append(n)\n    return sorted(odd_numbers)\n",
        "test": "assert get_odd_collatz(10) == [1, 10] # Test case 2"
    },
    {
        "number": 124,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def valid_date(date):\n    \"\"\"Validates a given date string\"\"\"\n    if not date:\n        return False\n    \n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if year < 1 or year > 9999:\n        return False\n    \n    if month in [4, 6, 9, 11] and day < 1 or day > 30:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n        return False\n    \n    if month == 2:\n        if year % 4 == 0:\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    \n    return True",
        "test": "assert valid_date('03-11-2000') == True"
    },
    {
        "number": 125,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def split_words(txt):\n    # Check if there are whitespaces in the text\n    if'' in txt:\n        # Split text on whitespace\n        words = txt.split()\n    else:\n        # Check if there are commas in the text\n        if ',' in txt:\n            # Split text on commas\n            words = txt.split(',')\n        else:\n            # Count number of lower-case letters with odd order in the alphabet\n            count = 0\n            for c in txt:\n                if c.islower() and ord(c) % 2 == 1:\n                    count += 1\n            # Split text on the count\n            words = [txt[i:i+count] for i in range(0, len(txt), count)]\n    return words",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]"
    },
    {
        "number": 126,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n    \n    if len(set(lst))!= len(lst):\n        return False\n    \n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n    \n    return True",
        "test": "assert is_sorted([5]) == True"
    },
    {
        "number": 127,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n    \"\"\"\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    # check if intervals intersect\n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n\n    # calculate intersection\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n\n    # check if intersection is a prime number\n    if is_prime(intersection_end - intersection_start + 1):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\""
    },
    {
        "number": 128,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    \n    total = 0\n    product = 1\n    \n    for num in arr:\n        total += abs(num)\n        product *= 1 if num > 0 else (-1 if num < 0 else 0)\n    \n    return total * product",
        "test": "assert prod_signs([1, 2, 2, -4]) == -9"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n    \"\"\"\n    n = len(grid)\n    if k > n**2:\n        return []\n\n    # Initialize dp table\n    dp = [[float('inf') for _ in range(n)] for _ in range(n)]\n\n    # Initialize the first row and column\n    for i in range(n):\n        dp[i][0] = dp[0][i] = grid[i][0]\n\n    # Fill the rest of the dp table\n    for i in range(1, n):\n        for j in range(1, n):\n            if i == j:\n                dp[i][j] = grid[i][j]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n\n    # Find the minimum path\n    path = []\n    i, j = n-1, n-1\n    for _ in range(k):\n        if i == 0 and j == 0:\n            break\n        if dp[i-1][j] < dp[i][j-1]:\n            path.append(dp[i-1][j])\n            i -= 1\n        else:\n            path.append(dp[i][j-1])\n            j -= 1\n\n    # Reverse the path\n    path = path[::-1]\n\n    # Check if the path is valid\n    if not valid_path(grid, path):\n        return []\n\n    return path\n\n\ndef valid_path(grid, path):\n    \"\"\"\n    Check if the given path goes through all the unique integers in the range [1, N * N]\n    \"\"\"\n    n = len(grid)\n    seen = set()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] not in seen:\n                seen.add(grid[i][j])\n            else:\n                if path[seen.index(grid[i][j])]!= grid[i][j]:\n                    return False\n    return True",
        "test": "assert minPath([[5,9,3], [4,1,6], [7,8,2]], 1) == [1]"
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def tri(n):\n    \"\"\"\n    This function returns a list of the first n + 1 numbers of the Tribonacci sequence.\n    \"\"\"\n    tri_list = [1, 3]\n    if n == 0:\n        return tri_list\n    elif n == 1:\n        return tri_list\n    elif n == 2:\n        return tri_list\n    \n    # Iterating from 3rd number to nth number\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            tri_list.append(tri_list[i-1] + tri_list[i-2])\n        else:\n            tri_list.append(tri_list[i-1] + tri_list[i-2] + tri_list[i-3])\n    \n    return tri_list",
        "test": "assert tri(7) == [1, 3, 2, 11, 13, 14, 44]"
    },
    {
        "number": 131,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n    return product if product!= 1 else 0",
        "test": "assert digits(4) == 0"
    },
    {
        "number": 132,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_nested(string):\n    stack = []\n    for c in string:\n        if c == '[':\n            stack.append(c)\n        elif c == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return bool(stack)",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False"
    },
    {
        "number": 133,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n    \"\"\"\n    sum_of_squares = 0\n    \n    for num in lst:\n        if num < 0:\n            num = int(num) + 1\n            \n        num = int(num ** 2)\n        sum_of_squares += num\n        \n    return sum_of_squares\n",
        "test": "assert sum_squares([1,2,3]) == 14"
    },
    {
        "number": 134,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    if len(txt) == 0:\n        return False\n    else:\n        if txt[-1].isalpha() and not txt[-1].isspace():\n            return True\n        else:\n            return False",
        "test": "assert check_if_last_char_is_a_letter(\"apple pi e\") == True, \"Test Case 2 failed\""
    },
    {
        "number": 135,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    \n    n = len(arr)\n    arr.sort()\n\n    for i in range(n-1, 0, -1):\n        if arr[i] >= arr[i-1]:\n            return i-1\n    \n    return -1",
        "test": "assert can_arrange([1,2,4,3,5]) == 3"
    },
    {
        "number": 136,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    negative_integers = []\n    positive_integers = []\n\n    for num in lst:\n        if num < 0:\n            negative_integers.append(num)\n        elif num > 0:\n            positive_integers.append(num)\n\n    if len(negative_integers) == 0:\n        largest_negative = None\n    else:\n        largest_negative = max(negative_integers)\n\n    if len(positive_integers) == 0:\n        smallest_positive = None\n    else:\n        smallest_positive = min(positive_integers)\n\n    return largest_negative, smallest_positive",
        "test": "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)"
    },
    {
        "number": 137,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n    \n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    else:\n        if type(a) == str and type(b) == int:\n            return a\n        elif type(a) == int and type(b) == str:\n            return b\n        else:\n            try:\n                a = float(a)\n                b = float(b)\n                if a > b:\n                    return a\n                elif b > a:\n                    return b\n                else:\n                    return None\n            except ValueError:\n                return None",
        "test": "assert compare_one(1, 2.5) == 2.5"
    },
    {
        "number": 138,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # Initialize a list to store even numbers less than n\n    even_nums = [i for i in range(2, n, 2)]\n    # Check if the sum of four even numbers from the list equals n\n    if len(even_nums) < 4:\n        return False\n    return sum(even_nums[:4]) == n",
        "test": "assert is_equal_to_sum_even(4) == False"
    },
    {
        "number": 139,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n    \n    For example:\n    >>> special_factorial(4)\n    288\n    \n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial",
        "test": "assert special_factorial(1) == 1"
    },
    {
        "number": 140,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    new_text = \"\"\n    for i in range(len(text)):\n        if text[i] == \" \":\n            if i == 0 or i == len(text) - 1:\n                new_text += \"_\"\n            elif text[i-1] == \" \" and text[i+1] == \" \":\n                new_text += \"-\"\n            else:\n                new_text += \"_\"\n        else:\n            new_text += text[i]\n    return new_text",
        "test": "assert fix_spaces(\"Example\") == \"Example\""
    },
    {
        "number": 141,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def file_name_check(file_name):\n    # Check if there are more than three digits in the file name\n    if sum(char.isdigit() for char in file_name) > 3:\n        return 'No'\n\n    # Check if there is exactly one dot in the file name\n    if file_name.count('.')!= 1:\n        return 'No'\n\n    # Check if the substring before the dot is not empty and starts with a letter\n    before_dot, after_dot = file_name.split('.')\n    if not before_dot or not before_dot[0].isalpha():\n        return 'No'\n\n    # Check if the substring after the dot is one of the allowed file types\n    allowed_file_types = ['txt', 'exe', 'dll']\n    if after_dot not in allowed_file_types:\n        return 'No'\n\n    # If all checks passed, the file name is valid\n    return 'Yes'",
        "test": "assert file_name_check(\"example.txt\") == \"Yes\""
    },
    {
        "number": 142,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            lst[i] = lst[i] ** 3\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum",
        "test": "assert sum_squares([]) == 0, \"The output should be 0 for lst = []\""
    },
    {
        "number": 143,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_prime(num):\n    \"\"\"\n    A helper function to check if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n    \"\"\"\n    words = sentence.split()\n    result = \"\"\n    for word in words:\n        if is_prime(len(word)):\n            result += word + \" \"\n    return result[:-1]",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\""
    },
    {
        "number": 144,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def simplify(x, n):\n    num_x, den_x = map(int, x.split('/'))\n    num_n, den_n = map(int, n.split('/'))\n    return (num_x * den_n) == (num_n * den_x)",
        "test": "assert simplify(\"1/6\", \"2/1\") == False"
    },
    {
        "number": 145,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), abs(nums.index(x))))",
        "test": "assert order_by_points([]) == []"
    },
    {
        "number": 146,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 10 % 10 in [1, 3, 5, 7, 9]:\n            count += 1\n    return count",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1"
    },
    {
        "number": 147,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    \n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count",
        "test": "assert get_max_triples(5) == 1 # Example output"
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planets = {\n        \"Mercury\": 0.39,\n        \"Venus\": 0.72,\n        \"Earth\": 1.00,\n        \"Mars\": 1.52,\n        \"Jupiter\": 5.20,\n        \"Saturn\": 9.58,\n        \"Uranus\": 19.20,\n        \"Neptune\": 30.07\n    }\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1 = planets[planet1]\n    index2 = planets[planet2]\n    result = []\n    \n    for planet, orbit in planets.items():\n        if orbit >= index1 and orbit <= index2:\n            result.append(planet)\n    \n    return tuple(sorted(result, key=lambda x: planets[x]))",
        "test": "assert bf(\"Earth\", \"Mercury\") == (\"Venus\")"
    },
    {
        "number": 149,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"This function accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\"\"\"\n    \n    # Create a new list containing only the strings with even lengths\n    lst_even = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the list of even lengths by length and then alphabetically\n    lst_sorted = sorted(lst_even, key=lambda word: (len(word), word))\n    \n    return lst_sorted",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]"
    },
    {
        "number": 150,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n <= 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n    return x",
        "test": "assert x_or_y(7, 34, 12) == 34"
    },
    {
        "number": 151,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\n\n    If the input list is empty, return 0.\n    \"\"\"\n    total = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 == 1:\n            total += num**2\n    return total",
        "test": "assert double_the_difference([-1, -2, 0]) == 0"
    },
    {
        "number": 152,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n    \n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    result = []\n    for i in range(len(game)):\n        if guess[i] == game[i]:\n            result.append(0)\n        else:\n            result.append(abs(guess[i] - game[i]))\n    return result",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]"
    },
    {
        "number": 153,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n\n    strongest_extension = None\n    strongest_strength = None\n\n    for extension in extensions:\n        cap_count = sum(1 for c in extension if c.isupper())\n        sm_count = sum(1 for c in extension if c.islower())\n        strength = cap_count - sm_count\n\n        if strongest_strength is None or strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n\n    return f\"{class_name}.{strongest_extension}\"",
        "test": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'"
    },
    {
        "number": 154,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    \"\"\"\n    def rotate(s):\n        return s[1:] + s[0]\n    \n    if b in a or b in rotate(a):\n        return True\n    else:\n        return False",
        "test": "assert cycpattern_check(\"abcd\",\"abd\") == False # example 1"
    },
    {
        "number": 155,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)",
        "test": "assert even_odd_count(123) == (1, 2)"
    },
    {
        "number": 156,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    roman_numerals = [\n        (1000,'m'),\n        (900, 'cm'),\n        (500, 'd'),\n        (400, 'cd'),\n        (100, 'c'),\n        (90, 'xc'),\n        (50, 'l'),\n        (40, 'xl'),\n        (10, 'x'),\n        (9, 'ix'),\n        (5, 'v'),\n        (4, 'iv'),\n        (1, 'i')\n    ]\n\n    roman = ''\n    for i in roman_numerals:\n        while number >= i[0]:\n            roman += i[1]\n            number -= i[0]\n\n    return roman.lower()",
        "test": "assert int_to_mini_roman(19) == 'xix'"
    },
    {
        "number": 157,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2:\n        return True\n    else:\n        return False",
        "test": "assert right_angle_triangle(3, 4, 5) == True"
    },
    {
        "number": 158,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_max(words):\n    \"\"\"\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    \n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    \n    return max_word",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\""
    },
    {
        "number": 159,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if need <= remaining:\n        total = number + need\n        left = remaining - need\n        return [total, left]\n    else:\n        total = number + remaining\n        left = 0\n        return [total, left]\n",
        "test": "assert eat(5, 6, 10) == [11, 4]"
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = operand[0]\n\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n\n    return result",
        "test": "assert do_algebra(['+', '*', '-', '/', '//'], [2, 3, 4, 5, 6, 7]) == 10"
    },
    {
        "number": 161,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.upper() if char.islower() else char.lower()\n        else:\n            result += char\n    return result[::-1] if not any(char.isalpha() for char in s) else result",
        "test": "assert solve(\"ab\") == \"AB\""
    },
    {
        "number": 162,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    True\n    \"\"\"\n\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'"
    },
    {
        "number": 163,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    # Create an empty list to store the even digits\n    even_digits = []\n\n    # Loop through the range of the given numbers\n    for num in range(a, b+1):\n        # Loop through the digits of each number\n        for digit in str(num):\n            # Check if the digit is even and not already in the list\n            if int(digit) % 2 == 0 and int(digit) not in even_digits:\n                # Add the even digit to the list\n                even_digits.append(int(digit))\n\n    # Sort the list in ascending order and return it\n    return sorted(even_digits)",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]"
    }
]