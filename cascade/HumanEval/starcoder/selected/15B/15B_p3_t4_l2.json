[
    {
        "number": 0,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    # sort the list in ascending order\n    numbers.sort()\n    # iterate through the list and check if there are any adjacent numbers closer than the threshold\n    for i in range(1, len(numbers)):\n        if numbers[i] - numbers[i-1] < threshold:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    # example usage\n    numbers = [1.0, 2.8, 3.0, 4.0, 5.0, 2.0]\n    threshold = 0.3\n    print(has_close_elements(numbers, threshold)) # True",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
        "num_ids": 865,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    current_group = \"\"\n    level = 0\n    for c in paren_string:\n        if c == \"(\":\n            level += 1\n            current_group += c\n        elif c == \")\":\n            level -= 1\n            current_group += c\n            if level == 0:\n                groups.append(current_group)\n                current_group = \"\"\n        else:\n            current_group += c\n    if current_group:\n        groups.append(current_group)\n    return groups",
        "test": "assert separate_paren_groups('()()') == ['()', '()']",
        "num_ids": 1014,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 523,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 264,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n\n    # Calculate mean of the input list\n    mean = sum(numbers) / len(numbers)\n    \n    # Calculate Absolute Deviations\n    abs_devs = [abs(x - mean) for x in numbers]\n    \n    # Calculate Mean Absolute Deviation\n    mad = sum(abs_devs) / len(abs_devs)\n    \n    return mad",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
        "num_ids": 906,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i!= len(numbers) - 1:\n            result.append(delimeter)\n    return result\n",
        "test": "assert intersperse([], 4) == []",
        "num_ids": 344,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_levels = []\n    level = 0\n    for char in paren_string:\n        if char == '(':\n            level += 1\n            max_levels.append(level)\n        elif char == ')':\n            level -= 1\n    return max_levels",
        "test": "assert parse_nested_parens('') == [] # Test case 2: Empty string input",
        "num_ids": 772,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    result = []\n    for s in strings:\n        if substring in s:\n            result.append(s)\n    return result\n",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 546,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    return (sum(numbers), 1) if numbers else (0, 1)",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 668,
        "indeed": false
    },
    {
        "number": 9,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    max_so_far = numbers[0]\n    result.append(max_so_far)\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n        result.append(max_so_far)\n    return result",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
        "num_ids": 1147,
        "indeed": false
    },
    {
        "number": 10,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[::-1]\n\n    # If no palindromic postfix found, append reverse of prefix to end of string\n    return string + string[::-1]\n\nprint(make_palindrome('cat'))",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 698,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Convert the strings to lists of integers\n    a_list = [int(i) for i in a]\n    b_list = [int(i) for i in b]\n    \n    # Perform XOR operation on corresponding digits and store in result list\n    result_list = [a_list[i] ^ b_list[i] for i in range(len(a_list))]\n    \n    # Convert the result list back to string and return\n    result = ''.join([str(i) for i in result_list])\n    return result",
        "test": "assert string_xor('010', '110') == '100'",
        "num_ids": 814,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str",
        "test": "assert longest(['a', 'b', 'c']) == 'a'",
        "num_ids": 552,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b \"\"\"\n    while b:\n        a, b = b, a % b\n    return a",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 375,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes",
        "test": "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
        "num_ids": 411,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    \"\"\"\n    return \" \".join(str(i) for i in range(n+1))",
        "test": "assert string_sequence(0) == '0'",
        "num_ids": 597,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \"\"\"\n    return len(set(string.lower()))\n",
        "test": "assert count_distinct_characters('xyzXYZ') == 3",
        "num_ids": 388,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    \n    # Define a dictionary to map note types to their respective durations\n    note_durations = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    # Initialize an empty list to store the note durations\n    note_lengths = []\n    \n    # Loop through each character in the input string\n    for i in range(len(music_string)):\n        # Check if the current character is a note type\n        if music_string[i] in note_durations:\n            # If so, extract the note type and its starting and ending positions\n            note_type = music_string[i]\n            start = i\n            while i+1 < len(music_string) and music_string[i+1] == note_type:\n                i += 1\n            end = i\n            \n            # Append the duration of the note to the output list\n            note_lengths.append(note_durations[note_type] * (end - start + 1))\n    \n    # Return the list of note durations\n    return note_lengths",
        "test": "assert parse_music('o o|.| o| o|.|.|.|.| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
        "num_ids": 1942,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    start = 0\n    while True:\n        index = string.find(substring, start)\n        if index == -1:\n            break\n        count += 1\n        start = index + 1\n    return count",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 607,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n    numbers_list = numbers.split()\n    numbers_list.sort()\n    return''.join(numbers_list)\n",
        "test": "assert sort_numbers('nine eight seven six five four three two one zero') == 'zero one two three four five six seven eight nine'",
        "num_ids": 719,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # First, we sort the list of numbers\n    sorted_numbers = sorted(numbers)\n    # Then, we iterate over the sorted list and find the two closest numbers\n    closest_numbers = (sorted_numbers[0], sorted_numbers[1])\n    for i in range(2, len(sorted_numbers)):\n        if abs(sorted_numbers[i] - closest_numbers[0]) < abs(sorted_numbers[i] - closest_numbers[1]):\n            closest_numbers = (closest_numbers[0], sorted_numbers[i])\n        else:\n            closest_numbers = (closest_numbers[1], sorted_numbers[i])\n    # Finally, we return the closest numbers in order\n    return closest_numbers",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)",
        "num_ids": 1176,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers\")\n\n    min_value = min(numbers)\n    max_value = max(numbers)\n\n    if max_value == min_value:\n        return [0.0] * len(numbers)\n\n    return [(x - min_value) / (max_value - min_value) for x in numbers]",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 1180,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 646,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)",
        "test": "assert strlen('') == 0",
        "num_ids": 253,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n \"\"\"\n    # Start with the assumption that the largest divisor is n itself\n    largest = n\n    \n    # Check all numbers between 2 and n-1 (inclusive)\n    for i in range(2, n):\n        # If n is divisible by i, update the largest divisor if necessary\n        if n % i == 0:\n            largest = i\n    \n    # Return the largest divisor found\n    return largest",
        "test": "assert largest_divisor(15) == 5",
        "num_ids": 529,
        "indeed": false
    },
    {
        "number": 25,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in the factorization.\n    Input number should be equal to the product of all factors.\n    \"\"\"\n    factors = []\n    factor = 2\n    while factor <= n:\n        if n % factor == 0:\n            factors.append(factor)\n            n //= factor\n        else:\n            factor += 1\n    return factors\n",
        "test": "assert factorize(25) == [5, 5]",
        "num_ids": 722,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers",
        "test": "assert remove_duplicates([1, 1, 2, 2, 3, 3]) == [1, 2, 3]",
        "num_ids": 607,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    flipped_string = ''\n    for char in string:\n        if char.isupper():\n            flipped_string += char.lower()\n        elif char.islower():\n            flipped_string += char.upper()\n        else:\n            flipped_string += char\n    return flipped_string",
        "test": "assert flip_case('Hello') == 'hELLO'",
        "num_ids": 434,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)",
        "test": "assert concatenate([]) == ''",
        "num_ids": 317,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 504,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num > 0]",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 419,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert is_prime(6) == False",
        "num_ids": 490,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    # If there are odd number of coefficients or all coefficients are zero, return None.\n    if len(xs) % 2!= 0 or all(coeff == 0 for coeff in xs):\n        return None\n    \n    # Check if largest coefficient is positive or negative.\n    if max(abs(coeff) for coeff in xs) > 1:\n        return None\n    \n    # Find the index of the largest coefficient.\n    max_index = max(enumerate(xs), key=lambda x: abs(x[1]))[0]\n    \n    # Split the list into two parts, one having coefficients less than the maximum coefficient\n    # and the other having coefficients greater than or equal to the maximum coefficient.\n    left_xs = xs[:max_index]\n    right_xs = xs[max_index:]\n    \n    # Find zero point in the left part using the lagrange method.\n    left_zero = find_zero_lagrange(left_xs)\n    \n    # Find zero point in the right part using the lagrange method.\n    right_zero = find_zero_lagrange(right_xs)\n    \n    # Combine the left and right zero points to get the overall zero point.\n    return poly(xs, left_zero) + poly(xs, right_zero)\n\ndef find_zero_lagrange(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero_lagrange finds the zero point using the lagrange method.\n    \"\"\"\n    # If there are odd number of coefficients or all coefficients are zero, return None.\n    if len(xs) % 2!= 0 or all(coeff == 0 for coeff in xs):\n        return None\n    \n    # Find the index of the largest coefficient.\n    max_index = max(enumerate(xs), key=lambda x: abs(x[1]))[0]\n    \n    # Split the list into two parts, one having coefficients less than the maximum coefficient\n    # and the other having coefficients greater than or equal to the maximum coefficient.\n    left_xs = xs[:max_index]\n    right_xs = xs[max_index:]\n    \n    # Find the zero point using the lagrange method.\n    zero_point = 0\n    \n    for i, coeff in enumerate(left_xs):\n        # Compute the denominator of the lagrange polynomial.\n        den = 1\n        for j, left_coeff in enumerate(left_xs):\n            if i!= j:\n                den *= (xs[i] - xs[j])\n        \n        # Compute the numerator of the lagrange polynomial.\n        num = 1\n        for j, left_coeff in enumerate(left_xs):\n            if i!= j:\n                num *= (x - xs[j])\n        \n        # Add the product of the numerator and denominator to the overall zero point.\n        zero_point += coeff * num / den\n    \n    return zero_point\n",
        "test": "assert find_zero([1, 0, 1]) == None",
        "num_ids": 1392,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    result = l.copy()\n    result[::3] = sorted(result[::3])\n    return result",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 1127,
        "indeed": true
    },
    {
        "number": 34,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 632,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_element(l):\n    \"\"\"Return maximum element in the list.\"\"\"\n    return max(l)",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 439,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            str_i = str(i)\n            if '7' in str_i:\n                count += str_i.count('7')\n    return count",
        "test": "assert fizz_buzz(50) == 0",
        "num_ids": 457,
        "indeed": true
    },
    {
        "number": 37,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\"\"\"\n    even_values = sorted(set(l[::2]))\n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_values.pop(0))\n        else:\n            result.append(l[i])\n    return result",
        "test": "assert sort_even([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 916,
        "indeed": true
    },
    {
        "number": 38,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1:] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "test": "assert decode_cyclic(encode_cyclic(\"Hello, World!\")) == \"Hello, World!\"",
        "num_ids": 1149,
        "indeed": true
    },
    {
        "number": 39,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def is_prime(num):\n    \"\"\"\n    is_prime function to check whether a number is prime or not\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib function to find the nth prime Fibonacci number\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    \n    # Initializing the first two Fibonacci numbers\n    prev_num = 2\n    curr_num = 3\n    \n    # Loop to find the nth prime Fibonacci number\n    for i in range(3, n+1):\n        # Checking if the current number is prime or not\n        if is_prime(curr_num):\n            # Incrementing the counter and returning the current number\n            n -= 1\n            if n == 0:\n                return curr_num\n        \n        # Updating the previous and current numbers for the next iteration\n        prev_num, curr_num = curr_num, prev_num + curr_num",
        "test": "assert prime_fib(1) == 2",
        "num_ids": 826,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 1233,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Create two lists to represent the two racing cars\n    left_cars = [i for i in range(n)]\n    right_cars = [i for i in range(n)]\n\n    # Shuffle the lists to randomize the starting positions of the cars\n    import random\n    random.shuffle(left_cars)\n    random.shuffle(right_cars)\n\n    # Initialize the count of collisions to zero\n    collision_count = 0\n\n    # Iterate through the cars and check for collisions\n    for i in range(n):\n        if left_cars[i] < right_cars[i]:\n            collision_count += 1\n\n    return collision_count",
        "test": "assert car_race_collision(0) == 0",
        "num_ids": 733,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [num + 1 for num in l]",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 605,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
        "test": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 563,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    if x < base:\n        return digits[x]\n    else:\n        return change_base(x // base, base) + digits[x % base]",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 622,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h",
        "test": "assert triangle_area(5, 3) == 7.5, \"Incorrect area for triangle with side of 5 and height of 3\"",
        "num_ids": 437,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n        d = 0\n\n        for i in range(4, n+1):\n            e = a + b + c + d\n            a = b\n            b = c\n            c = d\n            d = e\n\n        return d",
        "test": "assert fib4(0) == 0",
        "num_ids": 620,
        "indeed": true
    },
    {
        "number": 47,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\"\"\"\n    n = len(l)\n    sorted_l = sorted(l)\n    \n    # If list has even length, return the average of middle two elements\n    if n % 2 == 0:\n        return (sorted_l[n//2 - 1] + sorted_l[n//2]) / 2\n    \n    # If list has odd length, return the middle element\n    else:\n        return sorted_l[n//2]",
        "test": "assert median([3, 1, 2, 4, 5]) == 3",
        "num_ids": 720,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    # convert the string to lowercase\n    text = text.lower()\n    # remove all non-alphanumeric characters\n    text = ''.join(char for char in text if char.isalnum())\n    # check if the string is equal to its reverse\n    return text == text[::-1]\n",
        "test": "assert is_palindrome('') == True",
        "num_ids": 466,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)",
        "test": "assert modp(0, 101) == 1",
        "num_ids": 437,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert decode_shift(encode_shift(\"abcdefghijklmnopqrstuvwxyz\")) == \"abcdefghijklmnopqrstuvwxyz\"",
        "num_ids": 616,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_text = ''\n    for char in text:\n        if char.lower() not in vowels:\n            new_text += char\n    return new_text",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 425,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True",
        "num_ids": 364,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n",
        "test": "assert add(2, 3) == 5",
        "num_ids": 349,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)",
        "test": "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
        "num_ids": 688,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)",
        "test": "assert fib(10) == 55",
        "num_ids": 340,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "test": "assert correct_bracketing(\"<\") == False",
        "num_ids": 411,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    increasing = True\n    decreasing = True\n    \n    for i in range(len(l)-1):\n        if l[i] > l[i+1]:\n            increasing = False\n        elif l[i] < l[i+1]:\n            decreasing = False\n            \n    return increasing or decreasing",
        "test": "assert monotonic([1, 2, 4, 20]) == True",
        "num_ids": 673,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n\n    Args:\n        l1 (list): First list.\n        l2 (list): Second list.\n\n    Returns:\n        list: Sorted unique common elements.\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 779,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    i = 2\n    while i <= n/i:\n        if n % i == 0:\n            n /= i\n        else:\n            i += 1\n    return n\n",
        "test": "assert largest_prime_factor(13195) == 29",
        "num_ids": 436,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    \"\"\"\n    return sum(range(1, n+1))\n\nprint(sum_to_n(30)) # Output: 465\nprint(sum_to_n(100)) # Output: 5050\nprint(sum_to_n(5)) # Output: 15\nprint(sum_to_n(10)) # Output: 55\nprint(sum_to_n(1)) # Output: 1",
        "test": "assert sum_to_n(30) == 465",
        "num_ids": 425,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 339,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def derivative(xs):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    n = len(xs)\n    return [i * xs[i] for i in range(1, n)]",
        "test": "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
        "num_ids": 595,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
        "test": "assert fibfib(0) == 0",
        "num_ids": 623,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in s:\n        if i.lower() in vowels:\n            count += 1\n    if s.lower()[-1] == 'y':\n        count += 1\n    return count",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 677,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n        return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]",
        "test": "assert circular_shift(12, 1) == \"21\"",
        "num_ids": 683,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def digitSum(s):\n    \"\"\"\n    Returns the sum of the upper characters only' ASCII codes in the given string.\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 444,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # split the string into words using split() method and create a list of words\n    words = s.split()\n\n    # initialize variables to store the number of apples and oranges\n    num_apples = 0\n    num_oranges = 0\n\n    # loop through each word in the list of words\n    for word in words:\n        # check if the word starts with \"apple\" or \"apples\"\n        if word.startswith(\"apple\") or word.startswith(\"apples\"):\n            # add the number of apples to the num_apples variable\n            num_apples += int(word.split()[0])\n\n        # check if the word starts with \"orange\" or \"oranges\"\n        elif word.startswith(\"orange\") or word.startswith(\"oranges\"):\n            # add the number of oranges to the num_oranges variable\n            num_oranges += int(word.split()[0])\n\n    # calculate the number of mango fruits in the basket\n    num_mangoes = n - num_apples - num_oranges\n\n    # return the number of mango fruits in the basket\n    return num_mangoes",
        "test": "assert fruit_distribution(\"100 apples and 1 oranges\",120) == 19",
        "num_ids": 1038,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def pluck(arr):\n    if not arr:\n        return []\n    even_values = [value for value in arr if value % 2 == 0]\n    if not even_values:\n        return []\n    smallest_value = min(even_values)\n    smallest_indices = [i for i, value in enumerate(arr) if value == smallest_value]\n    return [smallest_value, min(smallest_indices)]",
        "test": "assert pluck([4,2,3]) == [2, 1]",
        "num_ids": 818,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def search(lst):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    \n    for num in sorted(freq, reverse=True):\n        if num > 0 and freq[num] >= num:\n            return num\n    \n    return -1",
        "test": "assert search([5, 5, 4, 4, 4]) == -1",
        "num_ids": 536,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    \"\"\"\n    if not lst:\n        return []\n    sorted_lst = []\n    min_val = min(lst)\n    lst.remove(min_val)\n    max_val = max(lst)\n    lst.remove(max_val)\n    sorted_lst.append(min_val)\n    sorted_lst.append(max_val)\n    lst.sort()\n    sorted_lst.extend(lst)\n    return sorted_lst",
        "test": "assert strange_sort_list([]) == []",
        "num_ids": 1028,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        # Round the area to 2 decimal points and return it\n        return round(area, 2)\n    else:\n        return -1",
        "test": "assert triangle_area(3, 4, 5) == 6.00",
        "num_ids": 852,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def will_it_fly(q, w):\n    \"\"\"\n    Returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    \"\"\"\n    # Check if the list is palindromic\n    if q == q[::-1]:\n        # Calculate the sum of the elements\n        total = sum(q)\n        # Check if the sum is less than or equal to w\n        if total <= w:\n            return True\n    # If not, or if the sum is greater than w, it will not fly\n    return False",
        "test": "assert will_it_fly([3, 2, 3], 1) == False # it's balanced, but 3+2+3 is more than the maximum possible weight.",
        "num_ids": 1049,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    count = 0\n    # Finding the middle element of the array\n    mid = n // 2\n    for i in range(mid):\n        if arr[i]!= arr[n-i-1]:\n            count += 1\n    # If the array has an even number of elements, the middle two elements can be palindromes\n    if n % 2 == 0:\n        if arr[mid]!= arr[n-mid-1]:\n            count += 1\n    return count",
        "test": "assert smallest_change([1, 1, 1, 1, 1]) == 0",
        "num_ids": 972,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n    \"\"\"\n    if not lst1 or not lst2:\n        return []\n\n    if len(lst1) == len(lst2):\n        return lst1\n\n    return lst1 if sum(len(s) for s in lst1) < sum(len(s) for s in lst2) else lst2",
        "test": "assert total_match([], []) == []",
        "num_ids": 741,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    for i in range(3, a):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime and i not in primes:\n            primes.append(i)\n        if len(primes) == 3:\n            return all(a % primes[j] == 0 for j in range(3))\n    return False",
        "test": "assert is_multiply_prime(45) == False",
        "num_ids": 1084,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Returns true if x is a simple power of n, and false otherwise.\"\"\"\n    return n ** int(x ** 0.5) == x",
        "test": "assert is_simple_power(2, 2) == True, \"Should be true\"",
        "num_ids": 664,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a == 0 or a == 1:\n        return True\n    elif a < 0:\n        return iscube(-a)\n    else:\n        cube_root = int(a**(1/3))\n        return cube_root**3 == a",
        "test": "assert iscube(1) == True",
        "num_ids": 454,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    count = 0\n    for i in num:\n        if i.upper() in ['2', '3', '5', '7', 'B', 'D']:\n            if is_prime(int(i, 16)):\n                count += 1\n    return count",
        "test": "assert hex_key(\"AB\") == 1",
        "num_ids": 853,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"Converts a decimal number to binary\"\"\"\n    binary = bin(decimal)[2:]  # convert to binary, remove \"0b\" prefix\n    binary = \"db\" + binary + \"db\"  # add extra characters at beginning and end\n    return binary",
        "test": "assert decimal_to_binary(15) == \"db1111db\"",
        "num_ids": 565,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    # Check if length is at least 3\n    if len(s) < 3:\n        return False\n    \n    # Check for distinct consecutive letters\n    for i in range(0, len(s)-2, 3):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    # If all conditions are met, the string is happy\n    return True",
        "test": "assert is_happy('a') == False",
        "num_ids": 678,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n                 GPA       |    Letter grade\n                  4.0                A+\n                > 3.7                A \n                > 3.3                A- \n                > 3.0                B+\n                > 2.7                B \n                > 2.3                B-\n                > 2.0                C+\n                > 1.7                C\n                > 1.3                C-\n                > 1.0                D+ \n                > 0.7                D \n                > 0.0                D-\n                  0.0                E\n    \"\"\"\n\n    letter_grades = []\n\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append(\"A+\")\n        elif gpa >= 3.7:\n            letter_grades.append(\"A\")\n        elif gpa >= 3.3:\n            letter_grades.append(\"A-\")\n        elif gpa >= 3.0:\n            letter_grades.append(\"B+\")\n        elif gpa >= 2.7:\n            letter_grades.append(\"B\")\n        elif gpa >= 2.3:\n            letter_grades.append(\"B-\")\n        elif gpa >= 2.0:\n            letter_grades.append(\"C+\")\n        elif gpa >= 1.7:\n            letter_grades.append(\"C\")\n        elif gpa >= 1.3:\n            letter_grades.append(\"C-\")\n        elif gpa >= 1.0:\n            letter_grades.append(\"D+\")\n        elif gpa >= 0.7:\n            letter_grades.append(\"D\")\n        elif gpa >= 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n\n    return letter_grades",
        "test": "assert numerical_letter_grade([2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']",
        "num_ids": 1824,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is prime, False otherwise\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\"\"\"\n    return is_prime(len(string))",
        "test": "assert prime_length('Hello') == True",
        "num_ids": 452,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count",
        "test": "assert starts_one_ends(1) == 1",
        "num_ids": 515,
        "indeed": true
    },
    {
        "number": 84,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binary_str = bin(N)[2:]  # convert decimal to binary\n    sum_of_digits = sum(int(digit) for digit in binary_str)  # sum of binary digits\n    return bin(sum_of_digits)[2:]  # convert sum to binary and return as string",
        "test": "assert solve(0) == \"0\"",
        "num_ids": 719,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Args:\n        lst: A non-empty list of integers.\n\n    Returns:\n        The sum of even elements at odd indices in lst.\n\n    Examples:\n        >>> add([4, 2, 6, 7])\n        2\n    \"\"\"\n    # Initialize the sum to zero\n    result = 0\n\n    # Iterate through the list, starting from the second element (index 1)\n    for i in range(1, len(lst), 2):\n        # If the current element is even and at an odd index, add it to the result\n        if lst[i] % 2 == 0:\n            result += lst[i]\n\n    return result",
        "test": "assert add([4, 2, 6, 7]) == 2 #Test case 1",
        "num_ids": 603,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n    words = s.split()\n    new_words = []\n    for word in words:\n        new_word = ''.join(sorted(word))\n        new_words.append(new_word)\n    return''.join(new_words)",
        "test": "assert anti_shuffle('Hi') == 'Hi'",
        "num_ids": 658,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coordinates.append((i, j))\n    \n    coordinates.sort()\n    for i, row in enumerate(coordinates):\n        coordinates[i] = (row[0], row[1], -row[1])\n    \n    coordinates.sort(key=lambda x: (x[0], -x[1]))\n    return [coordinate[:2] for coordinate in coordinates]",
        "test": "assert get_row([",
        "num_ids": 1149,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return array\n\n    first = array[0]\n    last = array[-1]\n    total = first + last\n    if total % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)",
        "test": "assert sort_array([]) == []",
        "num_ids": 1104,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    rotated_alpha = alpha[2:] + alpha[:2]  # rotate alphabet down by 2 places\n    encrypted_s = ''\n    for c in s:\n        if c.isalpha():\n            index = alpha.index(c.lower())\n            encrypted_s += rotated_alpha[index]\n        else:\n            encrypted_s += c\n    return encrypted_s",
        "test": "assert encrypt('et') == 'ix'",
        "num_ids": 862,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    if len(lst) < 2:\n        return None\n\n    smallest = lst[0]\n    second_smallest = None\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num!= smallest and (second_smallest is None or num < second_smallest):\n            second_smallest = num\n\n    return second_smallest",
        "test": "assert next_smallest([]) == None",
        "num_ids": 810,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_bored(S):\n    count = 0\n    sentences = S.split('.')\n    sentences += S.split('?')\n    sentences += S.split('!')\n    for sentence in sentences:\n        if sentence.startswith('I '):\n            count += 1\n    return count",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 584,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    \"\"\"\n    # Check if all numbers are integers\n    if not all(isinstance(n, int) for n in [x, y, z]):\n        return False\n    \n    # Check if one of the numbers is equal to the sum of the other two\n    if any([x == y + z, y == x + z, z == x + y]):\n        return True\n    \n    # If none of the above conditions are met, return False\n    return False",
        "test": "assert any_int(5, 2, 7) == True",
        "num_ids": 783,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def encode(message):\n    # Define a dictionary of vowels with their next letter in the alphabet\n    vowels = {'a': 'e', 'e': 'i', 'i': 'o', 'o': 'u', 'u': 'a'}\n    # Convert the message to lowercase and split it into a list of characters\n    message = message.lower()\n    message_list = list(message)\n    # Loop over the characters and encode each one as needed\n    for i in range(len(message_list)):\n        # If the character is a vowel, replace it with the next vowel in the alphabet\n        if message_list[i] in vowels:\n            message_list[i] = vowels[message_list[i]]\n        # If the character is a letter, swap its case\n        elif message_list[i].isalpha():\n            message_list[i] = message_list[i].swapcase()\n    # Convert the list of characters back to a string and return it\n    return ''.join(message_list)",
        "test": "assert encode('This is a message') == 'tHKS KS C MGSSCGG'",
        "num_ids": 725,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    return sum_digits(max_prime)\n\nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])) # output: 10\nprint(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])) # output: 25\nprint(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])) # output: 13\nprint(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])) # output: 11\nprint(skjkasdkd([0,81,12,3,1,21])) # output: 3\nprint(skjkasdkd([0,8,1,2,1,7])) # output: 7",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
        "num_ids": 1467,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    \n    first_key = next(iter(dict))\n    return all(isinstance(k, str) and k.islower() for k in dict) or all(isinstance(k, str) and k.isupper() for k in dict)",
        "test": "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
        "num_ids": 1060,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_prime(n):\n    \"\"\"Check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\"\"\"\n    result = []\n    for i in range(2, n):\n        if is_prime(i):\n            result.append(i)\n            if len(result) == n:\n                break\n    return result",
        "test": "assert count_up_to(5) == [2,3]",
        "num_ids": 713,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def multiply(a, b):\n    \"\"\"\n    Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Get the unit digits of a and b\n    a_unit = a % 10\n    b_unit = b % 10\n\n    # Calculate the product of the unit digits and return it\n    return a_unit * b_unit",
        "test": "assert multiply(148, 412) == 16",
        "num_ids": 665,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count",
        "test": "assert count_upper('aBCdEf') == 1",
        "num_ids": 517,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    num = float(value)\n    if num == 0:\n        return 0\n    elif num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 789,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = []\n    for i in range(n):\n        if i == 0:\n            pile.append(n)\n        else:\n            if n % 2 == 0:\n                pile.append(pile[-1] + n)\n            else:\n                pile.append(pile[-1] + n - 1)\n    return pile",
        "test": "assert make_a_pile(1) == [1] # Expected Output",
        "num_ids": 888,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # split the string into words using either commas or spaces as a separator\n    words = s.split(\", \")\n    if len(words) == 1:\n        # try splitting with only spaces as a separator\n        words = s.split(\" \")\n        # remove any empty strings that may have been created\n        words = [word for word in words if word!= \"\"]\n    return words",
        "test": "assert words_string(\"\") == []",
        "num_ids": 664,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 1:\n        x += 1\n    if y % 2 == 1:\n        y -= 1\n    if y < x:\n        return -1\n    for i in range(y, x-1, -2):\n        if i >= x:\n            return i\n    return -1",
        "test": "assert choose_num(12, 15) == 14",
        "num_ids": 678,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        sum_ = sum(range(n, m+1))\n        avg = sum_ / (m - n + 1)\n        rounded_avg_int = round(avg)\n        binary = bin(rounded_avg_int)[2:] # convert to binary string\n        return f\"0b{binary}\"",
        "test": "assert rounded_avg(1, 5) == \"0b11\"",
        "num_ids": 726,
        "indeed": true
    },
    {
        "number": 104,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique = []\n    for i in x:\n        digits = set(str(i))\n        if not any(int(digit) % 2 == 0 for digit in digits):\n            unique.append(i)\n    return sorted(unique)\n",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
        "num_ids": 940,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n      \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n      \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    # filter the array for elements between 1 and 9\n    filtered_arr = list(filter(lambda x: 1 <= x <= 9, arr))\n\n    # sort the filtered array in ascending order\n    sorted_arr = sorted(filtered_arr)\n\n    # reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n\n    # replace each element of the reversed array with its corresponding name\n    final_arr = [f\"One\", f\"Two\", f\"Three\", f\"Four\", f\"Five\", f\"Six\", f\"Seven\", f\"Eight\", f\"Nine\"]\n    result_arr = [final_arr[int(elem)-1] for elem in reversed_arr]\n\n    return result_arr",
        "test": "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]",
        "num_ids": 1605,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(i*(i+1)//2)\n    return result",
        "test": "assert f(5) == [1, 2, 6, 24, 15]",
        "num_ids": 1769,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_palindrome(n):\n    \"\"\"\n    Helper function to check if a number is a palindrome.\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return count_even, count_odd",
        "test": "assert even_odd_palindrome(3) == (1, 2)",
        "num_ids": 722,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num > 0:\n            signed_digits = [int(digit) for digit in str(abs(num))]\n            if sum(signed_digits) > 0:\n                count += 1\n    return count",
        "test": "assert count_nums([]) == 0",
        "num_ids": 653,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def move_one_ball(arr):\n    n = len(arr)\n    for i in range(n):\n        j = i\n        while j > 0 and arr[j] < arr[j-1]:\n            arr[j], arr[j-1] = arr[j-1], arr[j]\n            j -= 1\n    return arr == sorted(arr)",
        "test": "assert move_one_ball([])==True",
        "num_ids": 1321,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    even_lst1 = [num for num in lst1 if num % 2 == 0]\n    if len(even_lst1) == len(lst1):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"",
        "num_ids": 1191,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \n    \"\"\"\n    test_list = test.split()\n    letter_dict = {}\n    for letter in test_list:\n        if letter in letter_dict:\n            letter_dict[letter] += 1\n        else:\n            letter_dict[letter] = 1\n    max_count = max(letter_dict.values())\n    max_letter_dict = {}\n    for letter, count in letter_dict.items():\n        if count == max_count:\n            max_letter_dict[letter] = count\n    return max_letter_dict",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
        "num_ids": 808,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def reverse_delete(s,c):\n    \"\"\"\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    \"\"\"\n    \n    # create a string with all the characters in s that are not in c\n    result = \"\".join([char for char in s if char not in c])\n    \n    # check if the result string is palindrome\n    is_palindrome = result == result[::-1]\n    \n    return (result, is_palindrome)",
        "test": "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)",
        "num_ids": 552,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    output = []\n    for s in lst:\n        count = 0\n        for char in s:\n            if int(char) % 2!= 0:\n                count += 1\n        output.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, count, count, count))\n    return output",
        "test": "assert odd_count(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]",
        "num_ids": 1101,
        "indeed": true
    },
    {
        "number": 114,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    # Initialize variables\n    min_sum = float('inf')\n    current_sum = 0\n\n    # Loop through the array\n    for num in nums:\n        # Add the current number to the current sum\n        current_sum += num\n\n        # If the current sum is smaller than the previous minimum sum, update the minimum sum\n        if current_sum < min_sum:\n            min_sum = current_sum\n\n        # If the current sum becomes negative, reset it to 0\n        if current_sum < 0:\n            current_sum = 0\n\n    return min_sum",
        "test": "assert minSubArraySum([1, 2, 3]) == 1",
        "num_ids": 798,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def max_fill(grid, capacity):\n    num_buckets = math.ceil(sum(1 for row in grid for cell in row if cell == 1) / capacity)\n    if num_buckets == 0:\n        return 0\n\n    filled_wells = set()\n    bucket_count = num_buckets\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1 and (i,j) not in filled_wells:\n                bucket_count -= 1\n                filled_wells.add((i,j))\n                if bucket_count == 0:\n                    return len(filled_wells)\n\n    return len(filled_wells)",
        "test": "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6",
        "num_ids": 723,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",
        "test": "assert sort_array([2, 2, 2, 2, 2]) == [2, 2, 2, 2, 2]",
        "num_ids": 1063,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if not s:  # check if string is empty\n        return []\n    \n    words = s.split()  # split string into words\n    \n    result = []  # create empty list to store result\n    \n    for word in words:\n        count = 0  # create counter to count consonants in word\n        \n        for char in word:\n            if char.isalpha() and char.lower() not in 'aeiou':  # check if character is a consonant\n                count += 1\n                \n        if count == n:  # check if word has exactly n consonants\n            result.append(word)\n    \n    return result",
        "test": "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
        "num_ids": 1135,
        "indeed": true
    },
    {
        "number": 118,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def get_closest_vowel(word):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels and (i == 0 or word[i-1] not in vowels) and \\\n           (i == len(word)-1 or word[i+1] not in vowels):\n            return word[i]\n    return \"\"",
        "test": "assert get_closest_vowel(\"yogurt\") == \"u\"",
        "num_ids": 617,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    \n    # convert the list of strings to a single string\n    s = \"\".join(lst)\n    \n    # check if all parentheses are balanced\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) == 0:\n                return \"No\"\n            stack.pop()\n            \n    # if all parentheses are balanced, return 'Yes'\n    if len(stack) == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "test": "assert match_parens(['()(', ')']) == 'Yes'",
        "num_ids": 861,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    arr.sort()\n    return arr[-k:]",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]",
        "num_ids": 637,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\"\"\"\n    sum_of_odds = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2!= 0:\n            sum_of_odds += lst[i]\n    return sum_of_odds",
        "test": "assert solution([5, 8, 7, 1]) == 12",
        "num_ids": 624,
        "indeed": true
    },
    {
        "number": 122,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    sum = 0\n    for i in range(k):\n        if arr[i] <= 99:\n            sum += arr[i]\n    return sum",
        "test": "assert add_elements([10,20,30,40,50], 4) == 100",
        "num_ids": 878,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    # Initialize a list to store the collatz sequence\n    collatz_seq = [n]\n\n    # Iterate until the sequence reaches 1\n    while collatz_seq[-1]!= 1:\n        # If the last term is even, divide it by 2\n        if collatz_seq[-1] % 2 == 0:\n            collatz_seq.append(collatz_seq[-1] // 2)\n        # If the last term is odd, multiply it by 3 and add 1\n        else:\n            collatz_seq.append((collatz_seq[-1] * 3) + 1)\n\n    # Get the odd numbers in the collatz sequence\n    odd_collatz_seq = [num for num in collatz_seq if num % 2!= 0]\n\n    # Sort the list in increasing order\n    odd_collatz_seq.sort()\n\n    return odd_collatz_seq",
        "test": "assert get_odd_collatz(1) == [1] # Base case",
        "num_ids": 1497,
        "indeed": true
    },
    {
        "number": 124,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def valid_date(date):\n    \"\"\"\n    This function validates a given date string and returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. \n       And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. \n       And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n    \"\"\"\n    try:\n        # Splitting the date string into month, day, and year\n        month, day, year = map(int, date.split(\"-\"))\n        # Checking the month and year ranges\n        if month < 1 or month > 12 or year < 1:\n            return False\n        # Checking the number of days in the month and year\n        if month in [4, 6, 9, 11] and day < 1 or day > 30:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n        return True\n    except:\n        return False",
        "test": "assert valid_date('03-11-2000') == True",
        "num_ids": 1658,
        "indeed": true
    },
    {
        "number": 125,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def split_words(txt):\n    if ',' in txt:\n        words = txt.split(',')\n    else:\n        words = txt.split()\n    if len(words) > 1:\n        return words\n    else:\n        count = 0\n        for char in txt:\n            if char.isalpha():\n                if ord(char) % 2!= 0:\n                    count += 1\n        return count",
        "test": "assert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 450,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    if len(set(lst))!= len(lst):\n        return False\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True",
        "test": "assert is_sorted([5]) == True, \"Failed test 1\"",
        "num_ids": 916,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is a prime number, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n    \"\"\"\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end1 or start2 > end2:\n        return \"NO\"\n    if start1 > start2:\n        start1, end1, start2, end2 = start2, end2, start1, end1\n    if start2 > end1:\n        return \"NO\"\n    return \"YES\" if is_prime(end2 - start1 + 1) else \"NO\"\n",
        "test": "assert intersection((-3, -1), (-5, 5)) == \"YES\"",
        "num_ids": 1119,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    else:\n        magnitude_sum = sum(abs(num) for num in arr)\n        product_of_signs = 1\n        for num in arr:\n            if num > 0:\n                product_of_signs *= 1\n            elif num < 0:\n                product_of_signs *= -1\n            else:\n                product_of_signs *= 0\n        return magnitude_sum * product_of_signs",
        "test": "assert prod_signs([]) == None",
        "num_ids": 606,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def minPath(grid, k):\n    n = len(grid)\n    dp = [[[float('inf')] * n for _ in range(n)] for _ in range(k+1)]\n    for i in range(n):\n        for j in range(n):\n            dp[1][i][j] = grid[i][j]\n    for length in range(2, k+1):\n        for i in range(n):\n            for j in range(n):\n                for di in range(-1, 2):\n                    for dj in range(-1, 2):\n                        if 0 <= i+di < n and 0 <= j+dj < n and di!= dj:\n                            dp[length][i][j] = min(dp[length][i][j], dp[length-1][i+di][j+dj])\n                dp[length][i][j] += grid[i][j]\n    return [dp[k][i][j] for i in range(n) for j in range(n)]",
        "test": "assert minPath([ [5,9,3], [4,1,6], [7,8,2]], 1) == [1]",
        "num_ids": 1409,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    tri_list = [0, 1, 1]\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            tri_list.append(tri_list[i-1] + tri_list[i-2])\n        else:\n            tri_list.append(tri_list[i-1] + tri_list[i-2] + tri_list[i+1])\n    return tri_list",
        "test": "assert tri(0) == [1] # base case",
        "num_ids": 1411,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n    return product",
        "test": "assert digits(235) == 15",
        "num_ids": 455,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return bool(stack)",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False",
        "num_ids": 472,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    \"\"\"\n    sum = 0\n    for num in lst:\n        sum += math.ceil(num)**2\n    return sum\n",
        "test": "assert sum_squares([1,2,3]) == 14",
        "num_ids": 717,
        "indeed": true
    },
    {
        "number": 134,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    if txt == '':\n        return False\n    if txt[-1].isalpha() and txt[-2].isspace():\n        return True\n    else:\n        return False",
        "test": "assert check_if_last_char_is_a_letter(\"apple pie\") == False",
        "num_ids": 783,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return -1\n    # initialize the dp array\n    dp = [0] * n\n    # initialize the first element of dp array\n    dp[0] = 0\n    # iterate through the array\n    for i in range(1, n):\n        # initialize the maximum value of the previous element to -1\n        max_prev = -1\n        # iterate through the previous elements of the current element\n        for j in range(i):\n            # if the previous element is less than or equal to the current element,\n            # then update the maximum value of the previous element\n            if arr[j] <= arr[i]:\n                if dp[j] > max_prev:\n                    max_prev = dp[j]\n        # update the value of the current element in the dp array\n        dp[i] = max_prev + 1\n    # iterate through the dp array to find the maximum value\n    max_val = -1\n    for i in range(n):\n        if dp[i] > max_val:\n            max_val = dp[i]\n    return max_val",
        "test": "assert can_arrange([1,2,4,3,5]) == 3",
        "num_ids": 785,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def largest_smallest_integers(lst):\n    neg = []\n    pos = []\n    for num in lst:\n        if num < 0:\n            neg.append(num)\n        elif num > 0:\n            pos.append(num)\n    if not neg:\n        return (None, min(pos) if pos else None)\n    else:\n        return (max(neg), min(pos) if pos else None)",
        "test": "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
        "num_ids": 712,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    else:\n        if str(a) > str(b):\n            return a\n        elif str(b) > str(a):\n            return b\n        else:\n            return None",
        "test": "assert compare_one(1, 2.5) == 2.5",
        "num_ids": 867,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    even_numbers = [2 * i for i in range(2, int(n / 2) + 1)]\n    if len(even_numbers) < 4:\n        return False\n    for i in range(len(even_numbers) - 3):\n        if sum(even_numbers[i:i+4]) == n:\n            return True\n    return False",
        "test": "assert is_equal_to_sum_even(4) == False # Example 1",
        "num_ids": 737,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result",
        "test": "assert special_factorial(1) == 1",
        "num_ids": 580,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    # replace all spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # replace all consecutive spaces with -\n    result = ''\n    previous_char = ''\n    for char in text:\n        if char =='' and previous_char =='':\n            result += '-'\n        else:\n            result += char\n        previous_char = char\n    \n    return result",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 531,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n    # Check if the file name contains more than three digits\n    if any(char.isdigit() for char in file_name):\n        return 'No'\n\n    # Check if the file name contains exactly one dot\n    if file_name.count('.')!= 1:\n        return 'No'\n\n    # Split the file name into before and after the dot\n    before_dot, after_dot = file_name.split('.')\n\n    # Check if the substring before the dot is empty\n    if not before_dot:\n        return 'No'\n\n    # Check if the substring before the dot starts with a latin alphapet letter\n    if not (before_dot[0].isalpha() and before_dot[0].islower()):\n        return 'No'\n\n    # Check if the substring after the dot is one of the allowed extensions\n    allowed_extensions = ['txt', 'exe', 'dll']\n    if after_dot not in allowed_extensions:\n        return 'No'\n\n    # If all the conditions are met, return 'Yes'\n    return 'Yes'",
        "test": "assert file_name_check(\"example.txt\") == \"Yes\"",
        "num_ids": 1414,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            lst[i] = lst[i] ** 3\n        result += lst[i]\n    return result",
        "test": "assert sum_squares([]) == 0",
        "num_ids": 762,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return \" \".join(result)",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\"",
        "num_ids": 643,
        "indeed": true
    },
    {
        "number": 144,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from fractions import Fraction\n\ndef simplify(x, n):\n    x_frac = Fraction(x)\n    n_frac = Fraction(n)\n    product = x_frac * n_frac\n    return product.denominator == 1",
        "test": "assert simplify(\"1/6\", \"2/1\") == False",
        "num_ids": 517,
        "indeed": true
    },
    {
        "number": 145,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(num):\n        \"\"\"\n        Returns the sum of digits of the given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (-sum_of_digits(x), nums.index(x)))\n",
        "test": "assert order_by_points([]) == []",
        "num_ids": 764,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2!= 0 and (num // 10) % 2!= 0:\n            count += 1\n    return count",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1",
        "num_ids": 871,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def get_max_triples(n):\n    a = [i*i-i+1 for i in range(1, n+1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count",
        "test": "assert get_max_triples(5) == 1",
        "num_ids": 694,
        "indeed": true
    },
    {
        "number": 148,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n    # Check if planet1 and planet2 are valid planet names\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    # Get the indices of planet1 and planet2 in the planets list\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n\n    # Return the tuple of planets between index1 and index2 (inclusive)\n    return tuple(planets[index1:(index2+1)])",
        "test": "assert bf(\"Pluto\", \"Neptune\") == ()",
        "num_ids": 1044,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\"\"\"\n    \n    # filter out odd-length strings\n    lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # sort the list by length and then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    \n    return lst",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 876,
        "indeed": true
    },
    {
        "number": 150,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def is_prime(n):\n    \"\"\"A simple function to check if a number is prime\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y",
        "test": "assert x_or_y(7, 34, 12) == 34",
        "num_ids": 650,
        "indeed": true
    },
    {
        "number": 151,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def double_the_difference(lst):\n    if not lst:  # Check if the list is empty\n        return 0\n    else:\n        sum_of_squares = 0\n        for num in lst:\n            if type(num)!= int or num < 0:  # Check if the number is negative or not an integer\n                continue\n            if num % 2!= 0:  # Check if the number is odd\n                sum_of_squares += num**2  # Add the square of the number to the sum\n        return sum_of_squares",
        "test": "assert double_the_difference([1, 3, 2, 0]) == 10",
        "num_ids": 717,
        "indeed": true
    },
    {
        "number": 152,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def compare(game, guess):\n    \"\"\"\n    Compare two arrays of game scores and guesses, and return an array of\n    the same length denoting how far off each guess was.\n    \"\"\"\n    result = []\n    for i in range(len(game)):\n        if guess[i] == game[i]:\n            result.append(0)\n        else:\n            result.append(abs(guess[i] - game[i]))\n    return result",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 955,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    strength_dict = {}\n    for extension in extensions:\n        cap_count = 0\n        lower_count = 0\n        for letter in extension:\n            if letter.isupper():\n                cap_count += 1\n            elif letter.islower():\n                lower_count += 1\n        strength = cap_count - lower_count\n        strength_dict[extension] = strength\n    \n    max_strength = max(strength_dict.values())\n    strongest_extensions = [extension for extension, strength in strength_dict.items() if strength == max_strength]\n    return f\"{class_name}.{strongest_extensions[0]}\"",
        "test": "assert Strongest_Extension('Pi', ['pI', 'i']) == 'Pi.pI'",
        "num_ids": 1401,
        "indeed": true
    },
    {
        "number": 154,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n\n    cycpattern_check(\"abcd\", \"abd\") => False\n    cycpattern_check(\"hello\", \"ell\") => True\n    cycpattern_check(\"whassup\", \"psus\") => False\n    cycpattern_check(\"abab\", \"baa\") => True\n    cycpattern_check(\"efef\", \"eeff\") => False\n    cycpattern_check(\"himenss\", \"simen\") => True\n\n    \"\"\"\n    if b in a:\n        return True\n    elif b in a[1:]:\n        return True\n    else:\n        for i in range(len(b)):\n            if b[i:] + b[:i] in a:\n                return True\n    return False",
        "test": "assert cycpattern_check(\"abcd\",\"abd\") == False",
        "num_ids": 511,
        "indeed": true
    },
    {
        "number": 155,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\"\"\"\n    count_even = 0\n    count_odd = 0\n    while num!= 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        num //= 10\n    return (count_even, count_odd)",
        "test": "assert even_odd_count(123) == (1, 2)",
        "num_ids": 541,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def int_to_mini_roman(num):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    roman_dict = {1000:'m', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc',\n                  50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    for key in sorted(roman_dict.keys(), reverse=True):\n        while num >= key:\n            result += roman_dict[key]\n            num -= key\n    return result.lower()\n",
        "test": "assert int_to_mini_roman(19) == 'xix'",
        "num_ids": 952,
        "indeed": true
    },
    {
        "number": 157,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef right_angle_triangle(a, b, c):\n    # Check if the input lengths form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    \n    # Compute the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Compute the area of the triangle using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    # Check if the area is a rational number (i.e., if it is a right angled triangle)\n    return area == int(area)",
        "test": "assert right_angle_triangle(4, 5, 7) == False",
        "num_ids": 852,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_max(words):\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n        len_word = len(set(word))\n        if len_word > max_len or (len_word == max_len and word < max_word):\n            max_word = word\n            max_len = len_word\n    return max_word",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 507,
        "indeed": true
    },
    {
        "number": 159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if number >= need:\n        return [number, remaining - number]\n    else:\n        if remaining >= need:\n            return [need, remaining - need]\n        else:\n            return [remaining, 0]",
        "test": "assert eat(2, 11, 5) == [7, 0]",
        "num_ids": 1263,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator = ['+', '*', '-']\n    operand = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n    if len(operator)!= len(operand) - 1:\n        raise ValueError(\"Length of operator list should be equal to the length of operand list minus one.\")\n\n    expression = operand[0]\n    for i in range(len(operator)):\n        expression = str(expression) + operator[i] + str(operand[i+1])\n\n    result = eval(expression)\n\n    return result",
        "test": "assert do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9",
        "num_ids": 1231,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solve(s):\n    # If s contains no letters, reverse the string\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    \n    # Reverse the case of letters in the string\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n            \n    return result",
        "test": "assert solve(\"ab\") == \"AB\"",
        "num_ids": 664,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
        "num_ids": 718,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    even_digits = []\n    for num in range(a, b+1):\n        digits = [int(digit) for digit in str(num)]\n        even_digits += [digit for digit in digits if digit % 2 == 0]\n    return sorted(even_digits)",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 1224,
        "indeed": false
    }
]