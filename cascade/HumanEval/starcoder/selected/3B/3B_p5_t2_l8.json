[
    {
        "number": 0,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n\n    return False\n",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False"
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Convert the input string to a list of characters\n    char_list = list(paren_string)\n\n    # Initialize an empty list to store the result\n    result = []\n\n    # Initialize a variable to keep track of the current group being parsed\n    current_group = []\n\n    # Loop through the list of characters\n    for char in char_list:\n\n        # If the character is an open parenthesis, add it to the current group\n        if char == \"(\":\n            current_group.append(char)\n\n        # If the character is a close parenthesis, check if it matches the last character in the current group\n        elif char == \")\":\n            if len(current_group) == 0:\n                # If the current group is empty, ignore it\n                continue\n            last_char = current_group[-1]\n            if last_char == \"(\":\n                current_group.pop()\n                current_group.append(char)\n            else:\n                # If the current group is not empty, add it to the result list and start a new group\n                result.append(\"\".join(current_group))\n                current_group = [char]\n\n        # If the character is a space, ignore it\n        elif char == \" \":\n            pass\n\n    # Add the last group to the result list\n    result.append(\"\".join(current_group))\n\n    return result",
        "test": "assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']"
    },
    {
        "number": 2,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)",
        "test": "assert truncate_number(3.5) == 0.5"
    },
    {
        "number": 3,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
        "test": "assert below_zero([1, 2, -4, 5]) == True"
    },
    {
        "number": 4,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 25,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n\n    # Calculate the mean of the input numbers\n    mean = sum(numbers) / len(numbers)\n\n    # Calculate the sum of absolute differences between each element and the mean\n    sum_of_absolute_differences = 0\n    for number in numbers:\n        sum_of_absolute_differences += abs(number - mean)\n\n    # Calculate the mean absolute deviation\n    mean_absolute_deviation = sum_of_absolute_differences / len(numbers)\n\n    return mean_absolute_deviation",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0, \"Test Failed: Incorrect output for mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\""
    },
    {
        "number": 5,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    # if the list is empty or has one or two elements, no need to insert delimeter\n    if len(numbers) < 3:\n        return numbers\n    \n    result = [numbers[0]]  # first element is kept in the result list\n    \n    # iterate over the list and add the delimeter between every two consecutive elements\n    for i in range(1, len(numbers)):\n        result.append(delimeter)\n        result.append(numbers[i])\n    \n    # add the last element to the result list\n    result.append(numbers[-1])\n    \n    return result",
        "test": "assert intersperse([], 4) == []"
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    # Initialize an empty stack for storing the deepest level of nesting of parentheses\n    level_stack = []\n\n    # Loop through each character in the input string\n    for char in paren_string:\n        # If the character is a left parenthesis, push it onto the stack\n        if char == '(':\n            level_stack.append(1)\n        # If the character is a right parenthesis, pop the top element from the stack and check if it's a nested pair\n        else:\n            if len(level_stack) == 0:\n                raise ValueError(\"Mismatched parentheses\")\n            level = level_stack.pop()\n            if char == ')':\n                level_stack[-1] += 1\n            else:\n                level_stack[-1] -= 1\n\n    # If there are any remaining elements in the stack, they're not nested properly\n    if len(level_stack) > 0:\n        raise ValueError(\"Mismatched parentheses\")\n\n    # Convert the stack to a list of deepest levels of nesting and return it\n    return list(reversed(level_stack))",
        "test": "assert parse_nested_parens('(())') == [1]"
    },
    {
        "number": 7,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]",
        "test": "assert filter_by_substring([], 'a') == []"
    },
    {
        "number": 8,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)",
        "test": "assert sum_product([]) == (0, 1)"
    },
    {
        "number": 9,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 25,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list = []\n    for i in range(len(numbers)):\n        if i == 0:\n            rolling_max_list.append(numbers[i])\n        else:\n            max_rolling = max(rolling_max_list[-1], numbers[i])\n            rolling_max_list.append(max_rolling)\n    return rolling_max_list",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]"
    },
    {
        "number": 10,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    # Remove non-alphanumeric characters and convert to lowercase\n    cleaned_string = ''.join(c for c in string if c.isalnum()).lower()\n\n    # Find the longest postfix that is a palindrome\n    longest_palindrome = cleaned_string\n    for i in range(len(cleaned_string)):\n        for j in range(i + 2, len(cleaned_string) + 1):\n            substring = cleaned_string[i:j]\n            if is_palindrome(substring):\n                longest_palindrome = substring\n                break\n\n    # If no palindrome was found, return the original string\n    if not longest_palindrome:\n        return string\n\n    # Find the prefix that comes before the longest palindrome\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            substring = string[i:j]\n            if substring == longest_palindrome:\n                prefix = string[:i]\n                break\n\n    # Reverse the prefix and append it to the end of the longest palindrome\n    reversed_prefix = prefix[::-1]\n    return prefix + reversed_prefix",
        "test": "assert make_palindrome('') == ''"
    },
    {
        "number": 11,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    \n    # Convert inputs to lists of digits\n    a_list = [int(x) for x in a]\n    b_list = [int(x) for x in b]\n    \n    # Perform XOR operation\n    xor_result = []\n    for i in range(max(len(a_list), len(b_list))):\n        xor_result.append(a_list[i] ^ b_list[i])\n    \n    # Convert the resulting list of digits back to a string\n    xor_result_str = \"\".join(str(x) for x in xor_result)\n    \n    return xor_result_str",
        "test": "assert string_xor('010', '110') == '100'"
    },
    {
        "number": 12,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\n    if not strings:\n        return None\n\n    longest_string = None\n    longest_length = 0\n\n    for string in strings:\n        if len(string) > longest_length:\n            longest_string = string\n            longest_length = len(string)\n\n    return longest_string",
        "test": "assert longest([]) is None"
    },
    {
        "number": 13,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    # If a or b is equal to 0, return the other one\n    if a == 0 or b == 0:\n        return a if a!= 0 else b\n\n    # Check if a is less than b\n    if a < b:\n        a, b = b, a\n\n    # Divide the two numbers until the remainder is 0\n    while b!= 0:\n        a, b = b, a % b\n\n    return a",
        "test": "assert greatest_common_divisor(3, 5) == 1"
    },
    {
        "number": 14,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result",
        "test": "assert all_prefixes('abc') == ['a', 'ab', 'abc']"
    },
    {
        "number": 15,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\"\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return \" \".join(str(i) for i in range(n+1))",
        "test": "assert string_sequence(0) == '0'"
    },
    {
        "number": 16,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    distinct_chars = set()\n    for char in string:\n        distinct_chars.add(char.lower())\n    return len(distinct_chars)",
        "test": "assert count_distinct_characters('xyzXYZ') == 3"
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    notes = ['o', 'o|', '.', '|']\n    result = []\n    for note in music_string:\n        if note in notes:\n            if note == 'o':\n                result.append(4)\n            elif note == 'o|':\n                result.append(2)\n            elif note == '.|':\n                result.append(1)\n    return result",
        "test": "assert parse_music('o o o') == [4, 4, 4]"
    },
    {
        "number": 18,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count",
        "test": "assert how_many_times('', 'a') == 0"
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    \"\"\"\n    # Convert the input string to a list of integers\n    numbers_list = [int(num) for num in numbers.split()]\n\n    # Sort the list of integers in ascending order\n    sorted_numbers = sorted(numbers_list)\n\n    # Convert the sorted list back to a string and return it\n    return''.join(str(num) for num in sorted_numbers)",
        "test": "assert sort_numbers('seven three two six two three five') == 'two three two six seven five'"
    },
    {
        "number": 20,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements\")\n\n    min_number = min(numbers)\n    max_number = max(numbers)\n\n    diff_min_max = abs(min_number - max_number)\n    diff_max_min = abs(max_number - min_number)\n\n    if diff_min_max <= diff_max_min:\n        return (max_number, min_number)\n    else:\n        return (min_number, max_number)",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)"
    },
    {
        "number": 21,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if max_num == min_num:\n        return [0.0] * len(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]"
    },
    {
        "number": 22,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n\n    return [x for x in values if isinstance(x, int)]",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]"
    },
    {
        "number": 23,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)",
        "test": "assert strlen('') == 0"
    },
    {
        "number": 24,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 25,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    divisor = 2\n    largest_divisor = 1\n    while divisor < n:\n        if n % divisor == 0:\n            largest_divisor = divisor\n        divisor += 1\n    return largest_divisor",
        "test": "assert largest_divisor(15) == 5"
    },
    {
        "number": 25,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors",
        "test": "assert factorize(8) == [2, 2, 2]"
    },
    {
        "number": 26,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers",
        "test": "assert remove_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4]"
    },
    {
        "number": 27,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string",
        "test": "assert flip_case('Hello') == 'hELLO'"
    },
    {
        "number": 28,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)",
        "test": "assert concatenate([]) == ''"
    },
    {
        "number": 29,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n\n    return [s for s in strings if s.startswith(prefix)]",
        "test": "assert filter_by_prefix([], 'a') == []"
    },
    {
        "number": 30,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]"
    },
    {
        "number": 31,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert is_prime(6) is False"
    },
    {
        "number": 32,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x**2 +.... xs[n] * x**n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    assert len(xs) % 2 == 0, \"list xs should have even number of coefficients\"\n    max_coeff = max(abs(coeff) for coeff in xs)\n    for x in range(-max_coeff, max_coeff + 1):\n        if poly(xs, x) == 0:\n            return x",
        "test": "assert find_zero([-6, 11, -6, 1]) == 1.0"
    },
    {
        "number": 33,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    # initialize the list to store the sorted and modified values\n    result = []\n\n    # loop through each element of the original list\n    for i, element in enumerate(l):\n        # check if the index is not divisible by three\n        if i % 3!= 0:\n            # if not, add the element to the result list\n            result.append(element)\n        else:\n            # if it is, compare the element to the corresponding element in the original list\n            if element > l[i-3]:\n                # if the element is greater, add it to the result list\n                result.append(element)\n            else:\n                # if the element is not greater, add the element from the original list to the result list in the correct position\n                j = i-3\n                while j >= 0 and l[j] > element:\n                    j -= 1\n                result.insert(j+1, element)\n\n    # return the sorted and modified list\n    return result",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3]"
    },
    {
        "number": 34,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 25,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]"
    },
    {
        "number": 35,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    max_num = l[0]\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num",
        "test": "assert max_element([1, 2, 3]) == 3"
    },
    {
        "number": 36,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i)[-1] == '7':\n                count += 1\n    return count",
        "test": "assert fizz_buzz(50) == 0"
    },
    {
        "number": 37,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    odd_indices = [i for i in range(len(l)) if i % 2 == 1]\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    odd_values = [l[i] for i in odd_indices]\n    even_values = [l[i] for i in even_indices]\n    sorted_even_values = sorted(even_values)\n    \n    # zip the sorted_even_values with odd_values and return the result as a list\n    result = []\n    for i in range(len(odd_values)):\n        result.append(sorted_even_values[i])\n        result.append(odd_values[i])\n    \n    return result",
        "test": "assert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]"
    },
    {
        "number": 38,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # pad shorter groups with a single character.\n    groups = [group + \"a\" if len(group) < 3 else group for group in groups]\n    # join groups into a single string.\n    return \"\".join(groups)",
        "test": "assert decode_cyclic(\"\") == \"\""
    },
    {
        "number": 39,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    fib_nums = [1, 1]\n    fib_num = 1\n\n    while len(fib_nums) < n:\n        next_fib_num = fib_nums[-1] + fib_nums[-2]\n        fib_nums.append(next_fib_num)\n        fib_num = next_fib_num\n\n    if fib_num % 2 == 0:\n        fib_num += 1\n\n    for num in fib_nums:\n        if num % 2 == 0:\n            fib_num += 1\n        else:\n            break\n\n    return fib_num",
        "test": "assert prime_fib(2) == 3"
    },
    {
        "number": 40,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    # sorting the input list to make it easier to check for triples\n    l = sorted(l)\n    \n    # checking if the list has at least 3 distinct elements\n    if len(set(l)) < 3:\n        return False\n    \n    # checking if there are any triples in the sorted list that sum to zero\n    for i in range(len(l) - 2):\n        if l[i] + l[i+1] + l[i+2] == 0:\n            return True\n    \n    return False",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False"
    },
    {
        "number": 41,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    left_cars = [0] * n\n    right_cars = [0] * n\n\n    for i in range(2 * n):\n        left_cars[i % n] += 1\n        right_cars[(i + n) % n] += 1\n\n        left_sum = sum(left_cars)\n        right_sum = sum(right_cars)\n\n        if left_sum > right_sum:\n            return i // n + 1\n\n    return 0",
        "test": "assert car_race_collision(0) == 0"
    },
    {
        "number": 42,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i + 1 for i in l]",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]"
    },
    {
        "number": 43,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n\n    # Check if there are at least 2 elements in the list\n    if len(l) < 2:\n        return False\n\n    # Create a set of distinct elements in the list\n    distinct_set = set(l)\n\n    # Check if there are 2 elements in the set that sum to zero\n    if len(distinct_set) == 2:\n        if -l[0] in distinct_set:\n            return True\n        if l[0] in distinct_set:\n            return True\n\n    # If no 2 element sets sum to zero, return False\n    return False",
        "test": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False"
    },
    {
        "number": 44,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    if base < 2 or base > 16:\n        raise ValueError(\"Base must be between 2 and 16 (inclusive).\")\n    if x == 0:\n        return \"0\"\n    num = \"\"\n    while x > 0:\n        num = str(x % base) + num\n        x //= base\n    return num",
        "test": "assert change_base(8, 3) == '22'"
    },
    {
        "number": 45,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 25,
        "answer": "import math\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    area = 0.5 * a * h\n    return area\n",
        "test": "assert triangle_area(5, 3) == 7.5, \"The area of the triangle should be 7.5.\""
    },
    {
        "number": 46,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n\n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n\n    # Initialize variables\n    a, b, c = 0, 2, 0\n\n    # Compute the nth element\n    for _ in range(n - 2):\n        a, b, c = b, c, a + b + c\n\n    return c",
        "test": "assert fib4(0) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def median(l: list) -> float:\n    \"\"\"Return median of elements in the list l.\"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]",
        "test": "assert median([3, 1, 2, 4, 5]) == 3"
    },
    {
        "number": 48,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]",
        "test": "assert is_palindrome('') == True"
    },
    {
        "number": 49,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    result = 1\n    for _ in range(n):\n        result = (result * 2) % p\n    return result",
        "test": "assert modp(3, 5) == 3"
    },
    {
        "number": 50,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hello\""
    },
    {
        "number": 51,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    no_vowels = \"\"\n    for char in text:\n        if char not in vowels:\n            no_vowels += char\n    return no_vowels",
        "test": "assert remove_vowels('') == '', \"Test failed for remove_vowels('')\""
    },
    {
        "number": 52,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True"
    },
    {
        "number": 53,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y",
        "test": "assert add(2, 3) == 5"
    },
    {
        "number": 54,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    return sorted(set(s0)) == sorted(set(s1))",
        "test": "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True"
    },
    {
        "number": 55,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
        "test": "assert fib(10) == 55"
    },
    {
        "number": 56,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0",
        "test": "assert correct_bracketing(\"<\") == False, \"False\""
    },
    {
        "number": 57,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def monotonic(l: list) -> bool:\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1))",
        "test": "assert monotonic([1, 2, 4, 20]) == True, \"Expected True, got False\""
    },
    {
        "number": 58,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    # convert both lists to sets to remove duplicates\n    s1 = set(l1)\n    s2 = set(l2)\n    # find intersection of sets\n    inter = s1.intersection(s2)\n    # convert intersection to list and sort\n    common = sorted(list(inter))\n    return common",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]"
    },
    {
        "number": 59,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n\n    return n",
        "test": "assert largest_prime_factor(2048) == 2"
    },
    {
        "number": 60,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total",
        "test": "assert sum_to_n(30) == 465"
    },
    {
        "number": 61,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            if stack[-1] == \"(\":\n                stack.pop()\n            else:\n                return False\n    return not stack",
        "test": "assert correct_bracketing(\"(\") == False"
    },
    {
        "number": 62,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def derivative(xs):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    n = len(xs)\n    deriv = []\n    for i in range(1, n):\n        deriv.append(xs[i] * i)\n    return deriv",
        "test": "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]"
    },
    {
        "number": 63,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
        "test": "assert fibfib(0) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'y'])\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            if i == len(s) - 1 or s[i+1] not in vowels:\n                count += 1\n    return count\n\nprint(vowels_count(\"abcde\"))  # Output: 2\nprint(vowels_count(\"ACEDY\"))   # Output: 3",
        "test": "assert vowels_count(\"abcde\") == 2, \"Incorrect count of vowels for 'abcde'\""
    },
    {
        "number": 65,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n\n    # Reverse the digits of the integer if shift is greater than the number of digits\n    if shift > len(str(x)):\n        reverse_x = str(x)[::-1]\n        x = int(reverse_x)\n        shift = shift - len(str(x))\n\n    # Convert integer x to a list of digits\n    x_list = list(str(x))\n\n    # Circular shift the digits\n    for i in range(shift):\n        x_list.append(x_list.pop(0))\n\n    # Convert the list of digits back to an integer\n    x = int(\"\".join(x_list))\n\n    # Reverse the digits of the integer if it was reversed\n    if shift > len(str(x)):\n        reverse_x = str(x)[::-1]\n        x = int(reverse_x)\n\n    return str(x)",
        "test": "assert circular_shift(12, 2) == \"12\""
    },
    {
        "number": 66,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())",
        "test": "assert digitSum(\"\") == 0"
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    \"\"\"\n    apples, oranges, mangoes = s.split()\n    return int(mangoes)",
        "test": "assert fruit_distribution(\"0 apples and 1 oranges\", 3) == 3 - 0 - 1 == 2"
    },
    {
        "number": 68,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    min_val = None\n    min_index = None\n    even_values = []\n\n    for i, value in enumerate(arr):\n        if value % 2 == 0:\n            if min_val is None or value < min_val:\n                min_val = value\n                min_index = i\n            elif value == min_val and i < min_index:\n                min_index = i\n            even_values.append([value, i])\n\n    if len(even_values) > 0:\n        return [min_val, min_index]\n    else:\n        return []",
        "test": "assert pluck([4,2,3]) == [2, 1]"
    },
    {
        "number": 69,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    \n    # Initialize variables\n    max_freq = 0\n    max_num = 0\n    \n    # Loop through the list and update the max_freq and max_num variables\n    for num in lst:\n        if num > 0 and lst.count(num) >= num:\n            if lst.count(num) > max_freq:\n                max_freq = lst.count(num)\n                max_num = num\n    \n    # Check if max_num is greater than zero\n    if max_num > 0:\n        return max_num\n    else:\n        return -1",
        "test": "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3"
    },
    {
        "number": 70,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if not lst:\n        return lst\n\n    min_val = lst[0]\n    max_val = lst[0]\n\n    for num in lst:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n\n    strange_list = []\n    count = 0\n\n    for num in lst:\n        if num < min_val:\n            strange_list.append(max_val)\n            max_val -= 1\n        elif num > max_val:\n            strange_list.append(min_val)\n            min_val += 1\n        else:\n            strange_list.append(num)\n            count += 1\n\n    if count == len(lst):\n        return strange_list\n    else:\n        return strange_sort_list(strange_list)",
        "test": "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]"
    },
    {
        "number": 71,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1",
        "test": "assert triangle_area(3, 4, 5) == 6.00, \"triangle_area(3, 4, 5) == 6.00\""
    },
    {
        "number": 72,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    if q == q[::-1]:\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False",
        "test": "assert will_it_fly([1, 2], 5) == False"
    },
    {
        "number": 73,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 0\n\n    for len_ in range(2, n + 1):\n        for i in range(n - len_ + 1):\n            j = i + len_ - 1\n            dp[i][j] = float('inf')\n            for k in range(len_):\n                if arr[i + k]!= arr[j - k]:\n                    dp[i][j] = min(dp[i][j], dp[i + k][j - k] + 1)\n\n    return dp[0][n - 1]\n",
        "test": "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1"
    },
    {
        "number": 74,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n    \n    # get the total number of chars in all strings of the two lists\n    total_chars1 = sum(len(x) for x in lst1)\n    total_chars2 = sum(len(x) for x in lst2)\n\n    # check if the two lists have the same number of chars\n    if total_chars1 == total_chars2:\n        # if they have the same number of chars, return the first list\n        return lst1\n\n    # if they don't have the same number of chars, return the list that has total number of chars less than the other list\n    else:\n        # get the list that has the total number of chars less than the other list\n        if total_chars1 < total_chars2:\n            return lst1\n        else:\n            return lst2\n",
        "test": "assert total_match([], []) == []"
    },
    {
        "number": 75,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def multiply_of_primes(n):\n        return 3 * (is_prime(n) * is_prime(n - 2) * is_prime(n - 4))\n\n    return multiply_of_primes(a) == a",
        "test": "assert is_multiply_prime(47) == False, \"is_multiply_prime(47) should return False\""
    },
    {
        "number": 76,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n\n    # Check if n is a power of 2\n    if n & (n - 1)!= 0:\n        return False\n\n    # Check if x is a simple power of n\n    for i in range(1, x):\n        if x % i!= 0:\n            return False\n\n    return True",
        "test": "assert is_simple_power(2, 2) == True"
    },
    {
        "number": 77,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    \n    # Define some constants\n    limit = 10**3 # Limit of the cube root of the input integer\n    \n    # Find the cube root of the input integer\n    cube_root = int(a ** 0.5)\n    \n    # Check if the input integer is a cube of the cube root\n    if cube_root ** 3 == a:\n        return True\n    else:\n        return False",
        "test": "assert iscube(2) == False"
    },
    {
        "number": 78,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    \"\"\"\n    You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes.\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = num.upper()\n    hex_digits = set(\"0123456789ABCDEF\")\n    prime_count = 0\n    \n    for digit in num:\n        if digit in hex_digits and is_prime(int(digit, 16)):\n            prime_count += 1\n    \n    return prime_count",
        "test": "assert hex_key(\"AB\") == 1"
    },
    {
        "number": 79,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"\"\n    while decimal > 0:\n        binary_string = str(decimal % 2) + binary_string\n        decimal //= 2\n    binary_string = \"db\" + binary_string + \"db\"\n    return binary_string",
        "test": "assert decimal_to_binary(15) == \"db1111db\""
    },
    {
        "number": 80,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    \n    # check if length of the string is at least 3\n    if len(s) < 3:\n        return False\n    \n    # create a dictionary to store the previous happy numbers\n    happy_dict = {}\n    \n    # iterate over the string and check if the number is happy\n    for i in range(len(s)):\n        num = int(s[i])\n        if num == 1:\n            return False\n        # check if the number is in the dictionary\n        if str(num) in happy_dict:\n            # if it is, check if the number is the previous number\n            if num == happy_dict[str(num)]:\n                return False\n            else:\n                return False\n        # if the number is not in the dictionary, add it to the dictionary\n        else:\n            happy_dict[str(num)] = num\n        \n        # check if the length of the string is at least 6\n        if i == len(s)-1:\n            if len(happy_dict) < 6:\n                return False\n    \n    return True",
        "test": "assert is_happy(\"a\") == False"
    },
    {
        "number": 81,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n             4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n             0.0                E\n    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n    def letter_grade(gpa):\n        \"\"\"Returns a letter grade based on a numerical GPA.\"\"\"\n        if gpa >= 4.0:\n            return \"A+\"\n        elif gpa > 3.7:\n            return \"A\"\n        elif gpa > 3.3:\n            return \"A-\"\n        elif gpa > 3.0:\n            return \"B+\"\n        elif gpa > 2.7:\n            return \"B\"\n        elif gpa > 2.3:\n            return \"B-\"\n        elif gpa > 2.0:\n            return \"C+\"\n        elif gpa > 1.7:\n            return \"C\"\n        elif gpa > 1.3:\n            return \"C-\"\n        elif gpa > 1.0:\n            return \"D+\"\n        elif gpa > 0.7:\n            return \"D\"\n        else:\n            return \"D-\"\n\n    grades_list = []\n    for gpa in grades:\n        grade_letter = letter_grade(gpa)\n        grades_list.append(grade_letter)\n\n    return grades_list",
        "test": "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']"
    },
    {
        "number": 82,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_prime(num):\n    \"\"\"Return True if a number is prime, False otherwise.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Return True if the length of a string is a prime number, False otherwise.\"\"\"\n    length = len(string)\n    if is_prime(length):\n        return True\n    else:\n        return False",
        "test": "assert prime_length('Hello') == True"
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, 10 ** n):\n        if i % 10 == 1:\n            if str(i)[0] == '1':\n                count += 1\n        else:\n            if str(i)[-1] == '1':\n                count += 1\n    return count",
        "test": "assert starts_one_ends(1) == 1"
    },
    {
        "number": 84,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n             a string of binary number\n    \"\"\"\n    total_sum = 0\n    while N > 0:\n        total_sum += N % 10\n        N //= 10\n    return bin(total_sum)[2:]",
        "test": "assert solve(1000) == \"1\""
    },
    {
        "number": 85,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i] % 2 == 0:\n            result += lst[i]\n    return result",
        "test": "assert add([4, 2, 6, 7]) == 2"
    },
    {
        "number": 86,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n    words = s.split()\n    new_words = []\n    for word in words:\n        # Convert the word to a list of characters\n        char_list = list(word)\n        # Sort the characters in ascending order based on ascii value\n        sorted_char_list = sorted(char_list)\n        # Convert the sorted list back to a string\n        sorted_word = ''.join(sorted_char_list)\n        # Add the sorted word to the new list\n        new_words.append(sorted_word)\n    # Join the new words with a space\n    result =''.join(new_words)\n    return result",
        "test": "assert anti_shuffle('Hi') == 'Hi'"
    },
    {
        "number": 87,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    # Initialize empty list to store the result\n    result = []\n    # Loop through each row in the list\n    for i in range(len(lst)):\n        # Loop through each column in the row\n        for j in range(len(lst[i])):\n            # Check if the current element is equal to the target value\n            if lst[i][j] == x:\n                # Add the current coordinate to the result list\n                result.append((i, j))\n    # Sort the result list by rows in ascending order and columns in descending order\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result",
        "test": "assert get_row([], 1) == []"
    },
    {
        "number": 88,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    # Create a copy of the original array to avoid changing the original array\n    sorted_array = array.copy()\n\n    # Sort the copy of the array based on the specified criteria\n    for i in range(len(sorted_array)-1):\n        if i == 0:\n            if sorted_array[i] % 2 == 0:\n                sorted_array[i], sorted_array[0] = sorted_array[0], sorted_array[i]\n        elif i == len(sorted_array)-2:\n            if sorted_array[i] % 2 == 1:\n                sorted_array[i], sorted_array[-1] = sorted_array[-1], sorted_array[i]\n        else:\n            if sorted_array[i] % 2 == 0:\n                if sorted_array[i] % 2 == 0:\n                    if sorted_array[i-1] + sorted_array[i+1] < sorted_array[i] + sorted_array[i+2]:\n                        sorted_array[i], sorted_array[i-1] = sorted_array[i-1], sorted_array[i]\n            else:\n                if sorted_array[i] % 2 == 1:\n                    if sorted_array[i+1] + sorted_array[i-1] > sorted_array[i] + sorted_array[i+2]:\n                        sorted_array[i], sorted_array[i+1] = sorted_array[i+1], sorted_array[i]\n\n    return sorted_array",
        "test": "assert sort_array([5]) == [5]"
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    encrypted_str = ''\n    for char in s:\n        index = alphabet.index(char.lower())\n        encrypted_index = (index - (index % 2)) % 26\n        encrypted_char = alphabet[encrypted_index]\n        encrypted_str += encrypted_char\n    return encrypted_str",
        "test": "assert encrypt('asdfghjkl') == 'ewhjklnop'"
    },
    {
        "number": 90,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    \n    # initialize smallest and second smallest variables\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    # loop through the list and update smallest and second smallest variables\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest:\n            second_smallest = num\n    \n    # return None if there is no such element\n    if second_smallest == float('inf'):\n        return None\n    \n    # return second smallest element\n    return second_smallest",
        "test": "assert next_smallest([1, 2, 3, 4, 5]) == 2"
    },
    {
        "number": 91,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    count = 0\n    words = S.split()\n    for word in words:\n        if word.startswith('I'):\n            count += 1\n    return count",
        "test": "assert is_bored(\"Hello world\") == 0"
    },
    {
        "number": 92,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    if x % 1!= 0 or y % 1!= 0 or z % 1!= 0:\n        return False\n    \n    if x + y == z or x + z == y or y + z == x:\n        return True\n    else:\n        return False",
        "test": "assert any_int(3, 2, 2) == False"
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def encode(message):\n    vowels = 'AEIOUaeiou'\n    encoded = []\n\n    for letter in message:\n        if letter.isalpha():\n            if letter.upper() in vowels:\n                encoded.append(vowels[(vowels.index(letter.upper()) + 2) % 26])\n            else:\n                encoded.append(letter.lower())\n        else:\n            encoded.append(letter)\n\n    return ''.join(encoded)",
        "test": "assert encode('This is a message') == 'thks ks c mgsscgg'"
    },
    {
        "number": 94,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef largest_prime(lst):\n    largest = 0\n    for num in lst:\n        if is_prime(num) and num > largest:\n            largest = num\n    return largest\n\ndef sum_of_digits(num):\n    return sum(int(digit) for digit in str(num))\n\ndef skjkasdkd(lst):\n    largest_prime_value = largest_prime(lst)\n    return sum_of_digits(largest_prime_value)",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10"
    },
    {
        "number": 95,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\n    if not dict:\n        return False\n\n    keys = list(dict.keys())\n\n    if len(keys)!= len(set(keys)):\n        return False\n\n    for key in keys:\n        if not isinstance(key, str):\n            return False\n\n        if key.islower():\n            continue\n\n        if key.isupper():\n            return False\n\n    return True",
        "test": "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True, \"Incorrect output for check_dict_case({'a': 'apple', 'b': 'banana'})\""
    },
    {
        "number": 96,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is a prime number, False otherwise\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\"\"\"\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n        if len(primes) == n:\n            break\n    return primes",
        "test": "assert count_up_to(5) == [2, 3]"
    },
    {
        "number": 97,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def multiply(a, b):\n    \"\"\"\n    This function takes two integers `a` and `b` and returns the product of their unit digits.\n    Assumes that the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Helper function to get the unit digits of a number\n    def get_unit_digits(num):\n        if num == 0:\n            return 0\n        else:\n            return num % 10\n    \n    # Get the unit digits of both numbers\n    a_unit_digits = get_unit_digits(a)\n    b_unit_digits = get_unit_digits(b)\n    \n    # Multiply the unit digits and return the result\n    return a_unit_digits * b_unit_digits",
        "test": "assert multiply(148, 412) == 16"
    },
    {
        "number": 98,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count",
        "test": "assert count_upper('abcdefg') == 0"
    },
    {
        "number": 99,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    value = float(value)\n    if value.is_integer():\n        return int(value)\n    else:\n        return round(value)",
        "test": "assert closest_integer(\"10\") == 10"
    },
    {
        "number": 100,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    if n == 1:\n        return [n]\n\n    stones = [n]\n    for i in range(n - 1):\n        if n % 2 == 1:\n            stones.append(stones[i] + 2)\n        else:\n            stones.append(stones[i] + 1)\n\n    return stones",
        "test": "assert make_a_pile(3) == [3, 5, 7]"
    },
    {
        "number": 101,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    \n    # Split the string into words using the comma as a separator\n    words = s.split(\",\")\n    \n    # Remove whitespace from beginning and end of each word\n    words = [word.strip() for word in words]\n    \n    # Return the array of words\n    return words",
        "test": "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"
    },
    {
        "number": 102,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(x, y+1, 2):\n        if i > x:\n            return i\n    return -1",
        "test": "assert choose_num(13, 12) == -1"
    },
    {
        "number": 103,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    \n    if n > m:\n        return -1\n    \n    avg = (n+m)//2\n    return bin(avg)",
        "test": "assert rounded_avg(7, 5) == -1"
    },
    {
        "number": 104,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x, return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Remove even digits from the list\n    x = [digit for digit in x if digit % 2!= 0]\n    # Sort the list in increasing order\n    x.sort()\n    return x",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]"
    },
    {
        "number": 105,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n             -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n             -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n      \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n      \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n             -> sort arr -> [-1, 1, 55]\n             -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # Sort the array based on the length of the number\n    arr = sorted(arr, key=len)\n    # Reverse the array\n    arr = arr[::-1]\n    # Create an empty array to store the sorted numbers\n    sorted_numbers = []\n    # Loop through the sorted array and replace digits with their names\n    for num in arr:\n        if 1 <= num <= 9:\n            sorted_numbers.append(digit_names[num])\n        else:\n            sorted_numbers.append(str(num))\n    # Return the sorted and reversed array\n    return sorted_numbers\n",
        "test": "assert by_length([]) == []"
    },
    {
        "number": 106,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def f(n):\n    \"\"\"\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\ndef factorial(n):\n    \"\"\"\n    Returns the factorial of n, which is the multiplication of the numbers from 1 to n.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n",
        "test": "assert f(1) == [1]"
    },
    {
        "number": 107,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return even_count, odd_count\n",
        "test": "assert even_odd_palindrome(3) == (1, 2)"
    },
    {
        "number": 108,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num >= 0:\n            num_str = str(abs(num))\n            if sum(int(d) for d in num_str) > 0:\n                count += 1\n    return count",
        "test": "assert count_nums([]) == 0"
    },
    {
        "number": 109,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def move_one_ball(arr):\n    \"\"\"\n    We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].\n    The numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n\n    n = len(arr)\n    for i in range(n - 2):\n        if arr[i] > arr[i + 1]:\n            return False\n\n    return True",
        "test": "assert move_one_ball([3, 5, 4, 1, 2]) == False"
    },
    {
        "number": 110,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    count = 0\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 1 and lst2[i] % 2 == 0:\n            lst2[i], lst1[i] = lst1[i], lst2[i]\n            count += 1\n            if count == len(lst1) // 2:\n                return \"YES\"\n    return \"NO\"",
        "test": "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\""
    },
    {
        "number": 111,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \"\"\"\n\n    if not test:\n        return {}\n\n    counts = {}\n    for letter in test.split():\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n\n    max_count = max(counts.values())\n    max_letters = [letter for letter, count in counts.items() if count == max_count]\n\n    return {letter: max_count for letter in max_letters}",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}"
    },
    {
        "number": 112,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def reverse_delete(s, c):\n    \"\"\"\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Initialize empty string to store result string\n    result = \"\"\n    # Iterate through s\n    for char in s:\n        # If char is not equal to any character in c\n        if char not in c:\n            # Append char to result string\n            result += char\n    # Check if the result string is palindrome\n    is_palindrome = True\n    left = 0\n    right = len(result) - 1\n    while left < right:\n        if result[left]!= result[right]:\n            is_palindrome = False\n            break\n        left += 1\n        right -= 1\n    # Return result string and is_palindrome\n    return (result, is_palindrome)",
        "test": "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)"
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    output = []\n    for i, string in enumerate(lst):\n        count = sum(1 for digit in string if int(digit) % 2!= 0)\n        output.append(f\"the number of odd elements {count}n the str{i}ng {i} of the {i}nput.\")\n    return output",
        "test": "assert odd_count(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]"
    },
    {
        "number": 114,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    current_sum = 0\n    minimum_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum += nums[i]\n        if current_sum < minimum_sum:\n            minimum_sum = current_sum\n        if current_sum > 0:\n            current_sum -= nums[i - 1]\n    return minimum_sum",
        "test": "assert minSubArraySum([-1, -2, -3]) == -6, \"minSubArraySum([-1, -2, -3]) should be -6\""
    },
    {
        "number": 115,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n    n = len(grid)\n    m = len(grid[0])\n\n    # Iterate through each well in the grid\n    total_water = 0\n    for row in grid:\n        # Calculate the total water in the well\n        for col in row:\n            if col == 1:\n                total_water += 1\n\n    # Calculate the maximum number of times to lower the buckets\n    max_lower = math.ceil(total_water / capacity)\n\n    return max_lower",
        "test": "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6"
    },
    {
        "number": 116,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Create a dictionary to store the count of ones in binary representation\n    count_dict = {}\n    for num in arr:\n        binary = bin(num)[2:]\n        if binary not in count_dict:\n            count_dict[binary] = 1\n        else:\n            count_dict[binary] += 1\n\n    # Sort the array based on the count of ones\n    sorted_arr = sorted(arr, key=lambda x: (count_dict[bin(x)[2:]], x))\n\n    return sorted_arr",
        "test": "assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]"
    },
    {
        "number": 117,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    \n    # Split the string into words\n    words = s.split()\n    \n    # Initialize an empty list to store the selected words\n    selected_words = []\n    \n    # Loop through each word in the list\n    for word in words:\n        # Check if the word contains n consonants\n        if sum(1 for c in word if c.lower() in 'bcdfghjklmnpqrstvwxyz') == n:\n            selected_words.append(word)\n            \n    # Sort the selected words alphabetically\n    selected_words.sort()\n    \n    return selected_words",
        "test": "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]"
    },
    {
        "number": 118,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = \"AEIOUaeiou\"\n    start_index = len(word) - 1\n    end_index = 0\n    closest_vowel = \"\"\n    while start_index >= end_index and len(closest_vowel) == 0:\n        if word[start_index] in vowels:\n            closest_vowel = word[start_index]\n            if closest_vowel == word[-1]:\n                break\n            start_index -= 1\n        else:\n            start_index -= 1\n    start_index = len(word) - 1\n    end_index = 0\n    while end_index < len(word) - 1 and len(closest_vowel) == 0:\n        if word[end_index] in vowels:\n            closest_vowel = word[end_index]\n            if closest_vowel == word[0]:\n                break\n            end_index += 1\n        else:\n            end_index += 1\n    return closest_vowel",
        "test": "assert get_closest_vowel(\"yogurt\") == \"u\""
    },
    {
        "number": 119,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parenthesis '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    \n    # helper function to check if a string has balanced parentheses\n    def check_balanced(s):\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n\n    # check if the strings are balanced\n    if not check_balanced(lst[0]) or not check_balanced(lst[1]):\n        return 'No'\n\n    # check if the strings can be concatenated\n    if len(lst[0]) + len(lst[1]) == 2:\n        return 'Yes'\n\n    # check if there's a way to make a string that will be good\n    for i in range(len(lst[0])):\n        for j in range(len(lst[1])):\n            if check_balanced(lst[0][:i] + lst[1][:j] + lst[0][i:] + lst[1][j:]):\n                return 'Yes'\n\n    return 'No'",
        "test": "assert match_parens([')', ')']) == 'No'"
    },
    {
        "number": 120,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    \n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Return the first k elements of the sorted array\n    return arr[:k]",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]"
    },
    {
        "number": 121,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 0\n    \"\"\"\n    odd_sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2!= 0:\n            odd_sum += lst[i]\n    return odd_sum",
        "test": "assert solution([5, 8, 7, 1]) == 12"
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return 0\n\n    arr = arr[:k]\n    arr.sort(reverse=True)\n\n    return sum(map(int, arr))",
        "test": "assert add_elements([1, 2, 3, 4, 5], 2) == 15, \"Test case failed\""
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    # Collatz sequence for 1\n    collatz_sequence = [1]\n\n    # Keep track of the previous number and the number of steps taken to reach 1\n    prev_num = 1\n    steps = 0\n\n    # Continue generating collatz sequence until it reaches 1\n    while prev_num!= 1:\n        # Calculate next number in collatz sequence\n        next_num = 3 * prev_num + 1 if prev_num % 2 == 0 else prev_num // 2\n\n        # Add next number to collatz sequence\n        collatz_sequence.append(next_num)\n\n        # Update previous number\n        prev_num = next_num\n\n        # Increment step counter\n        steps += 1\n\n    # Return sorted list of odd numbers in collatz sequence\n    return sorted([num for num in collatz_sequence if num % 2!= 0])",
        "test": "assert get_odd_collatz(10) == [1, 3, 7, 10]"
    },
    {
        "number": 124,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n\n    # Define the valid months and days\n    valid_months = [1, 3, 5, 7, 8, 10, 12, 4, 6, 9, 11]\n    valid_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    # Split the date string into parts\n    parts = date.split('-')\n    if len(parts)!= 3:\n        return False\n\n    # Validate the month\n    month = int(parts[0])\n    if month < 1 or month > 12:\n        return False\n\n    # Validate the day\n    day = int(parts[1])\n    if day < 1 or day > valid_days[month - 1]:\n        return False\n\n    # Validate the year\n    year = int(parts[2])\n    if year < 1000 or year > 9999:\n        return False\n\n    # If the year is a leap year, check if February has 29 days\n    if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n        valid_days[1] = 29\n\n    # Check if the date is valid\n    if day > valid_days[month - 1]:\n        return False\n\n    return True",
        "test": "assert valid_date('03-11-2000') == True"
    },
    {
        "number": 125,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    \n    # split the string on whitespace\n    words = txt.split()\n    \n    # if no whitespace exists, split on commas\n    if len(words) == 1:\n        words = txt.split(',')\n    \n    # count the number of words\n    num_words = len(words)\n    \n    # initialize the result list\n    result = []\n    \n    # iterate over the words and add them to the result list\n    for word in words:\n        # remove any leading or trailing whitespace\n        word = word.strip()\n        \n        # if the word is empty, skip it\n        if not word:\n            continue\n        \n        # count the number of lower-case letters with odd order in the alphabet\n        count = sum(1 for letter in word if letter.islower() and ord(letter) % 2!= 0)\n        \n        # add the word and its count to the result list\n        result.append((word, count))\n    \n    # sort the result list based on the count of lower-case letters with odd order in the alphabet\n    result.sort(key=lambda x: (-x[1], x[0]))\n    \n    # return the result list\n    return [word for word, count in result]",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]"
    },
    {
        "number": 126,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    \n    # Sort the list in ascending order\n    lst = sorted(lst)\n    \n    # Check if the list contains any duplicates\n    duplicates = []\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n            duplicates.append(lst[i])\n    \n    if len(duplicates) > 1:\n        return False\n    \n    return True",
        "test": "assert is_sorted([5]) == True, \"Test case 1\""
    },
    {
        "number": 127,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(n):\n    \"\"\"Returns True if n is a prime number, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n    \"\"\"\n\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    # Check if the intervals don't intersect\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n\n    # Calculate the length of the intersection\n    length = end1 - start2\n\n    # Check if the length of the intersection is a prime number\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\""
    },
    {
        "number": 128,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    \n    sign_product = 1\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n    \n    magnitude_sum = sum(abs(num) for num in arr)\n    \n    return magnitude_sum * sign_product",
        "test": "assert prod_signs([1, 2, 2, -4]) == -9"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    \n    n = len(grid)\n    dp = [[0] * n for _ in range(n)]\n    \n    # Initialize the first row and column\n    dp[0][0] = grid[0][0]\n    \n    # Fill in the rest of the matrix\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + grid[i][0]\n        \n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + grid[0][j]\n        \n    # Fill in the rest of the matrix\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n            \n    # Make sure the minimum path goes through the last k cells\n    k_idx = 0\n    min_path = []\n    for i in range(n-1, -1, -1):\n        for j in range(n-1, -1, -1):\n            if k_idx == k:\n                min_path.append(dp[i][j])\n                k_idx -= 1\n            else:\n                k_idx += 1\n    return min_path",
        "test": "assert minPath([[5,9,3], [4,1,6], [7,8,2]], 1) == [1]"
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    seq = [1, 3, 1, 8]\n    for i in range(4, n + 1):\n        seq.append(seq[i - 1] + seq[i - 2] + seq[i - 3])\n    return seq[1:]",
        "test": "assert tri(2) == 1"
    },
    {
        "number": 131,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    digits_list = [int(digit) for digit in str(n)]\n    odd_digits = [digit for digit in digits_list if digit % 2!= 0]\n    odd_product = 1\n    for digit in odd_digits:\n        odd_product *= digit\n    return odd_product if odd_digits else 0",
        "test": "assert digits(1) == 1"
    },
    {
        "number": 132,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_nested(string):\n    stack = []\n    for c in string:\n        if c == '[':\n            stack.append(c)\n        elif c == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False"
    },
    {
        "number": 133,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Round each element in the list to the upper int(Ceiling)\n    lst = [round(x) for x in lst]\n    \n    # Initialize the sum of squared numbers\n    total = 0\n    \n    # Iterate over the list of numbers\n    for x in lst:\n        # Calculate the sum of squared numbers\n        total += x ** 2\n        \n    # Return the sum of squared numbers\n    return total",
        "test": "assert sum_squares([1,2,3]) == 14"
    },
    {
        "number": 134,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n\n    # Remove spaces and punctuation from the input string\n    txt = ''.join(c for c in txt if c.isalpha())\n\n    # Check if the last character is a letter and not part of a word\n    if txt[-1].isalpha() and not txt.split(' '):\n        return True\n    else:\n        return False",
        "test": "assert check_if_last_char_is_a_letter(\"apple pie\") == False"
    },
    {
        "number": 135,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    max_index = -1\n    for i in range(len(arr)):\n        if arr[i] == max_index + 1:\n            return -1\n        if arr[i] > max_index:\n            max_index = arr[i]\n    return max_index",
        "test": "assert can_arrange([1,2,3]) == -1, \"Incorrect output\""
    },
    {
        "number": 136,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    neg_integers = [x for x in lst if x < 0]\n    pos_integers = [x for x in lst if x > 0]\n\n    if neg_integers:\n        a = max(neg_integers)\n    else:\n        a = None\n\n    if pos_integers:\n        b = min(pos_integers)\n    else:\n        b = None\n\n    return a, b",
        "test": "assert largest_smallest_integers([]) == (None, None)"
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n    if type(a) == type(b):\n        return None\n\n    if type(a) == int:\n        return a if a > b else b\n    elif type(a) == float:\n        return a if a > b else b\n    elif type(a) == str:\n        return a if float(a) > float(b) else b",
        "test": "assert compare_one(1, 2.5) == 2.5"
    },
    {
        "number": 138,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # Define a set of positive even numbers\n    even_set = {2, 4, 6, 8}\n    # Check if the given number n can be written as the sum of 4 positive even numbers\n    if sum(even_set) == n:\n        return True\n    else:\n        return False",
        "test": "assert is_equal_to_sum_even(4) == False"
    },
    {
        "number": 139,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n    \n    For example:\n    >>> special_factorial(4)\n    288\n    \n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            result *= i\n        return result",
        "test": "assert special_factorial(5) == 120"
    },
    {
        "number": 140,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    # Replace spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace consecutive spaces with -\n    new_text = \"\"\n    count = 0\n    for i in range(len(text)):\n        if text[i] == \" \":\n            count += 1\n        else:\n            if count > 2:\n                new_text += \"-\" * (count - 2) + \"_\" + text[i] + \" \"\n            else:\n                new_text += text[i]\n            count = 0\n    if count > 2:\n        new_text += \"-\" * (count - 2) + \"_\" + \" \"\n    \n    return new_text",
        "test": "assert fix_spaces(\"Example\") == \"Example\""
    },
    {
        "number": 141,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    \n    # Check if the name contains more than three digits\n    if any(c.isdigit() for c in file_name) and len(file_name) > 3:\n        return 'No'\n    \n    # Check if the name contains exactly one dot\n    if '.' not in file_name:\n        return 'No'\n    \n    # Check if the substring before the dot is empty or starts with a letter\n    before_dot = file_name.split('.')[0]\n    if not before_dot or before_dot[0].isalpha():\n        return 'No'\n    \n    # Check if the substring after the dot is one of the allowed values\n    after_dot = file_name.split('.')[1]\n    if after_dot not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Name is valid\n    return 'Yes'",
        "test": "assert file_name_check(\"1example.dll\") == \"No\""
    },
    {
        "number": 142,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4!= 0:\n            lst[i] **= 2\n        elif i % 4 == 0 and i % 3!= 0:\n            lst[i] **= 3\n    for num in lst:\n        result += num\n    return result",
        "test": "assert sum_squares([]) == 0"
    },
    {
        "number": 143,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    new_sentence = \"\"\n    for word in words:\n        if is_prime(len(word)):\n            new_sentence += word + \" \"\n    return new_sentence[:-1]",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\""
    },
    {
        "number": 144,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n\n    num_x = int(x.split('/')[0])\n    denom_x = int(x.split('/')[1])\n    num_n = int(n.split('/')[0])\n    denom_n = int(n.split('/')[1])\n\n    result = (num_x * num_n) / (denom_x * denom_n)\n\n    if result.is_integer():\n        return True\n    else:\n        return False",
        "test": "assert simplify(\"1/5\", \"5/1\") == True"
    },
    {
        "number": 145,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # Helper function to sum the digits of a number\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    # Sort the list of numbers based on the sum of their digits\n    sorted_nums = sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n\n    return sorted_nums",
        "test": "assert order_by_points([]) == []"
    },
    {
        "number": 146,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = int(str(num)[0])\n            last_digit = int(str(num)[-1])\n            if first_digit % 2 == 1 and last_digit % 2 == 1:\n                count += 1\n    return count",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1"
    },
    {
        "number": 147,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n\n    # Initialize the array a with the required values\n    a = [i * i - i + 1 for i in range(1, n+1)]\n\n    # Initialize the count of triples\n    count = 0\n\n    # Iterate through all possible triples of elements from the array a\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                # Check if the sum of the elements in the triple is a multiple of 3\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n\n    return count",
        "test": "assert get_max_triples(6) == 0"
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    # Define a list of planets and their orbits\n    planets = [\n        (\"Mercury\", 0.387098571),\n        (\"Venus\", 0.723330154),\n        (\"Earth\", 1.0),\n        (\"Mars\", 1.523727957),\n        (\"Jupiter\", 5.202585163),\n        (\"Saturn\", 9.554955297),\n        (\"Uranus\", 19.181096292),\n        (\"Neptune\", 30.084363438),\n    ]\n\n    # Filter the planets based on the given planet1 and planet2 orbits\n    filtered_planets = [planet for planet in planets if planet[1] > planet1 and planet[1] < planet2]\n\n    # Sort the filtered planets based on the proximity to the sun\n    sorted_planets = sorted(filtered_planets, key=lambda x: abs(x[1]))\n\n    # Return the sorted list of planets\n    return tuple(sorted_planets)",
        "test": "assert bf(\"Earth\", \"Mercury\") == (\"Venus\")"
    },
    {
        "number": 149,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # Remove strings with odd lengths\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n\n    # Sort the filtered list by length and then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n\n    return sorted_lst",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]"
    },
    {
        "number": 150,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x\n    else:\n        return x",
        "test": "assert x_or_y(7, 34, 12) == 34"
    },
    {
        "number": 151,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    \n    total = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2!= 0:\n            total += num**2\n            \n    return total",
        "test": "assert double_the_difference([-1, -2, 0]) == 0"
    },
    {
        "number": 152,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def compare(game, guess):\n    \"\"\"\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    example:\n    \n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(guess[i] - game[i]))\n    return result",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]"
    },
    {
        "number": 153,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StUFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    # Calculate the strength of each extension\n    strengths = {}\n    for ext in extensions:\n        ext_name = ext.upper()\n        cap_count = sum(1 for c in ext_name if c.isupper())\n        sm_count = sum(1 for c in ext_name if c.islower())\n        strength = cap_count - sm_count\n        strengths[ext] = strength\n\n    # Find the strongest extension\n    max_strength = max(strengths.values())\n    max_ext = next(ext for ext, strength in strengths.items() if strength == max_strength)\n\n    # Return the class name and the strongest extension name\n    return f\"{class_name}.{max_ext}\"",
        "test": "assert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StUFfed']) == 'Slices.SErviNGSliCes'"
    },
    {
        "number": 154,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n\n    # function to find rotations of a word\n    def rotations(word):\n        rotations = []\n        for i in range(len(word)):\n            rotations.append(word[i:] + word[:i])\n        return rotations\n\n    # check if second word is a substring of first word or any of its rotations\n    if b in a or b in rotations(a):\n        return True\n    else:\n        return False",
        "test": "assert cycpattern_check(\"abcd\",\"abd\") == False"
    },
    {
        "number": 155,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    # convert the number to string\n    num_str = str(num)\n\n    # count the number of even and odd digits\n    count_even = 0\n    count_odd = 0\n    for digit in num_str:\n        if digit.isdigit() and int(digit) % 2 == 0:\n            count_even += 1\n        elif digit.isdigit() and int(digit) % 2!= 0:\n            count_odd += 1\n\n    return (count_even, count_odd)",
        "test": "assert even_odd_count(123) == (1, 2)"
    },
    {
        "number": 156,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    # Define a mapping of integers to their Roman numerals\n    mapping = {\n        1000:'m',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i',\n    }\n\n    # Initialize an empty string to store the Roman numeral\n    roman_numeral = ''\n\n    # Iterate through the mapping and add the Roman numeral for each integer\n    for num, roman in mapping.items():\n        # If the integer is less than or equal to the current integer, add the Roman numeral to the string\n        while number >= num:\n            roman_numeral += roman\n            number -= num\n\n    # Return the lowercase Roman numeral string\n    return roman_numeral.lower()",
        "test": "assert int_to_mini_roman(19) == 'xix'"
    },
    {
        "number": 157,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2:\n        return True\n    else:\n        return False",
        "test": "assert right_angle_triangle(3, 4, 5) == True"
    },
    {
        "number": 158,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    word_set = set()\n    max_length = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_length:\n            max_length = unique_chars\n            max_word = word\n        elif unique_chars == max_length:\n            if word < max_word:\n                max_word = word\n\n    return max_word",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\""
    },
    {
        "number": 159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                 the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n    \n    Have fun :)\n    \"\"\"\n    if number > need:\n        return [need + number, remaining]\n    else:\n        return [number + need, need - number]",
        "test": "assert eat(4, 8, 9) == [12, 1]"
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Check if the length of operator list is equal to the length of operand list minus one\n    if len(operator)!= len(operand) - 1:\n        raise ValueError(\"The length of operator list should be equal to the length of operand list minus one.\")\n\n    # Check if the operand list has at least two elements\n    if len(operand) < 2:\n        raise ValueError(\"Operand list should have at least two elements.\")\n\n    # Initialize the result variable\n    result = 0\n\n    # Iterate through the operator list and operand list and perform the operations\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '//':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n        else:\n            raise ValueError(\"Invalid operator found in operator list.\")\n\n    return result",
        "test": "assert do_algebra(['+', '*', '/', '-', '**'], [2, 3, 4, 5]) == 0.25, \"Incorrect output for operator +, *, /, -, **\""
    },
    {
        "number": 161,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    \n    # Check if the string contains any letters\n    has_letters = False\n    for char in s:\n        if char.isalpha():\n            has_letters = True\n            break\n    \n    # If the string contains no letters, reverse it\n    if not has_letters:\n        return s[::-1]\n    \n    # Create an empty list to store the resulted string\n    result = []\n    \n    # Iterate over the characters in the string\n    for i, char in enumerate(s):\n        # Check if the character is a letter\n        if char.isalpha():\n            # If it is a letter, reverse its case\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        # If the character is not a letter, add it to the result list as it is\n        else:\n            result.append(char)\n    \n    # Return the resulted string\n    return ''.join(result)",
        "test": "assert solve(\"ab\") == \"AB\""
    },
    {
        "number": 162,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 25,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\n    if not text:\n        return None\n\n    md5_hash = hashlib.md5(text.encode('utf-8')).hexdigest()\n    return md5_hash",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'"
    },
    {
        "number": 163,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    digits = []\n    while a <= b:\n        if a % 2 == 0:\n            digits.append(a)\n        a += 1\n    return digits",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]"
    }
]