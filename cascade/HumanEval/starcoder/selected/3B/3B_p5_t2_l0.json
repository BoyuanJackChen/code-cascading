[
    {
        "number": 0,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False",
        "test": "assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) is True",
        "num_ids": 1318,
        "indeed": false
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    \"\"\"\n    def balanced_paren_count(paren_string: str, open_paren: str, close_paren: str) -> int:\n        count = 0\n        for c in paren_string:\n            if c == open_paren:\n                count += 1\n            elif c == close_paren:\n                count -= 1\n                if count < 0:\n                    raise ValueError(\"Invalid parentheses\")\n        return count\n\n    # Find all the groups of balanced parentheses\n    paren_groups = []\n    paren_group = []\n    open_braces = 0\n    for c in paren_string:\n        if c == \"(\":\n            paren_group.append(c)\n            open_braces += 1\n        elif c == \")\":\n            paren_group.append(c)\n            open_braces -= 1\n            if open_braces < 0:\n                raise ValueError(\"Invalid parentheses\")\n            if balanced_paren_count(paren_group, \"(\", \")\") == 0:\n                paren_groups.append(\"\".join(paren_group))\n                paren_group = []\n    if balanced_paren_count(paren_group, \"(\", \")\")!= 0:\n        raise ValueError(\"Invalid parentheses\")\n    else:\n        paren_groups.append(\"\".join(paren_group))\n\n    return paren_groups",
        "test": "assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']",
        "num_ids": 2207,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 755,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 933,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    if len(numbers) == 0:\n        return 0\n\n    mean = sum(numbers) / len(numbers)\n    absolute_diffs = [abs(num - mean) for num in numbers]\n    return sum(absolute_diffs) / len(absolute_diffs)",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
        "num_ids": 1110,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n\n    if not numbers:\n        return []\n\n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result",
        "test": "assert intersperse([], 4) == []",
        "num_ids": 936,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # Split the input string into a list of strings representing each group of parentheses\n    groups = paren_string.split()\n\n    # Initialize an empty list to store the maximum depth of nesting for each group\n    max_depths = []\n\n    # Loop through each group and calculate the maximum depth of nesting for that group\n    for group in groups:\n        # Initialize a counter variable to keep track of the current depth of nesting\n        depth = 0\n\n        # Loop through each character in the group and count the number of opening parentheses\n        for char in group:\n            if char == '(':\n                depth += 1\n            elif char == ')':\n                depth -= 1\n\n        # Update the maximum depth of nesting for this group if necessary\n        if depth > max_depths[-1] if max_depths else 0:\n            max_depths.append(depth)\n\n    # Return the list of maximum depths of nesting\n    return max_depths",
        "test": "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
        "num_ids": 1689,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    result = []\n    for s in strings:\n        if substring in s:\n            result.append(s)\n    return result",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 778,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\n    if not numbers:\n        return (0, 1)\n\n    sum_val = 0\n    product_val = 1\n\n    for num in numbers:\n        sum_val += num\n        product_val *= num\n\n    return (sum_val, product_val)",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 1011,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list = []\n    max_so_far = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n        else:\n            rolling_max_list.append(max_so_far)\n            max_so_far = numbers[i]\n    rolling_max_list.append(max_so_far)\n    return rolling_max_list",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
        "num_ids": 1272,
        "indeed": false
    },
    {
        "number": 10,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    # Check if the given string is a palindrome\n    if is_palindrome(string):\n        return string\n\n    # Find the longest palindrome that begins with the given string\n    longest_palindrome = \"\"\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            substring = string[i:j]\n            if is_palindrome(substring):\n                if len(substring) > len(longest_palindrome):\n                    longest_palindrome = substring\n\n    # Reverse the longest palindrome\n    if longest_palindrome:\n        return longest_palindrome[::-1]\n\n    # If no palindrome is found, append the given string to itself\n    return string + string",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 1300,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    # Convert input strings to binary lists\n    a_binary = [int(x) for x in a]\n    b_binary = [int(x) for x in b]\n\n    # Perform XOR operation on the binary lists\n    result_binary = [x ^ y for x, y in zip(a_binary, b_binary)]\n\n    # Convert binary list back to binary string\n    result = ''.join([str(x) for x in result_binary])\n\n    return result",
        "test": "assert string_xor('010', '110') == '100'",
        "num_ids": 1075,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\n    if not strings:\n        return None\n\n    max_length = len(strings[0])\n    longest_string = strings[0]\n\n    for string in strings[1:]:\n        if len(string) > max_length:\n            max_length = len(string)\n            longest_string = string\n\n    return longest_string",
        "test": "assert longest([]) is None",
        "num_ids": 933,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n    while b:\n        a, b = b, a % b\n\n    return a",
        "test": "assert greatest_common_divisor(25, 15) == 5",
        "num_ids": 662,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    # Initialize an empty list to store the prefixes\n    prefixes = []\n    \n    # Iterate through each character of the input string\n    for i in range(len(string)):\n        # Concatenate the first i characters of the input string to get a prefix\n        prefix = string[:i+1]\n        # Add the prefix to the list of prefixes\n        prefixes.append(prefix)\n    \n    return prefixes",
        "test": "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
        "num_ids": 722,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive. \"\"\"\n    return \" \".join([str(i) for i in range(n+1)])",
        "test": "assert string_sequence(0) == '0'",
        "num_ids": 551,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert the string to lowercase\n    string = string.lower()\n    # Create a set to store the distinct characters\n    distinct_chars = set()\n    # Loop through each character in the string\n    for char in string:\n        # Add the character to the set only if it is not already there\n        if char not in distinct_chars:\n            distinct_chars.add(char)\n    # Return the number of distinct characters\n    return len(distinct_chars)",
        "test": "assert count_distinct_characters('xyzXYZ') == 3",
        "num_ids": 747,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    beats_per_note = {'o': 4, 'o|': 2, '.|': 1}\n\n    notes = music_string.split(' ')\n    note_lengths = [beats_per_note[note] for note in notes]\n\n    return note_lengths",
        "test": "assert parse_music('o o o o o o o o') == [4] * 8",
        "num_ids": 1346,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 823,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    # Convert input string to list of numbers\n    numbers_list = [int(num) for num in numbers.split()]\n    \n    # Sort list of numbers in ascending order\n    numbers_list.sort()\n    \n    # Convert sorted list back to a space-delimited string\n    return''.join([str(num) for num in numbers_list])",
        "test": "assert sort_numbers('two four six one eight') == 'one four six eight two'",
        "num_ids": 1093,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if abs(min_num - max_num) < abs(min_num - numbers[1]):\n        return (min_num, numbers[1])\n    else:\n        return (numbers[1], max_num)",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)",
        "num_ids": 1638,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 25,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # Get the minimum and maximum values of the list\n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    # Create a new list with the same length as the original list, where each element is a rescaled value\n    rescaled_list = [0.0] * len(numbers)\n    for i in range(len(numbers)):\n        rescaled_list[i] = (numbers[i] - min_val) / (max_val - min_val)\n        \n    return rescaled_list",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 1383,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result\n",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 655,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)",
        "test": "assert strlen('') == 0",
        "num_ids": 282,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n    return max(divisors)\n",
        "test": "assert largest_divisor(15) == 5, \"Test failed: largest_divisor(15) should return 5.\"",
        "num_ids": 661,
        "indeed": true
    },
    {
        "number": 25,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    factors.sort()\n    return factors",
        "test": "assert factorize(8) == [2, 2, 2]",
        "num_ids": 1089,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    unique_numbers = []\n    for num in numbers:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    return unique_numbers",
        "test": "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 787,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result",
        "test": "assert flip_case('Hello') == 'hELLO'",
        "num_ids": 586,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n\n    return ''.join(strings)\n",
        "test": "assert concatenate([]) == ''",
        "num_ids": 428,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 765,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 761,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert is_prime(6) == False",
        "num_ids": 887,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x**2 +.... xs[n] * x**n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n\n    # check if xs is a list of even length\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs should have even number of coefficients\")\n\n    # find largest non zero coefficient\n    max_coeff = max(abs(x) for x in xs)\n\n    # iterate over all x values\n    for x in range(-max_coeff, max_coeff + 1):\n        if poly(xs, x) == 0:\n            return x",
        "test": "assert find_zero([-6, 11, -6, 1]) == 1.0",
        "num_ids": 1894,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def sort_third(l: list) -> list:\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    for i in range(len(l)):\n        if i % 3!= 0:\n            if l[i] < l[i-1]:\n                l[i], l[i-1] = l[i-1], l[i]\n    return l",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 1788,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 25,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    unique_list = []\n    for i in l:\n        if i not in unique_list:\n            unique_list.append(i)\n    unique_list.sort()\n    return unique_list",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 720,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    return max(l)",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 512,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i)[-1] == \"7\":\n                count += 1\n    return count",
        "test": "assert fizz_buzz(50) == 0",
        "num_ids": 720,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    # Get the length of the list\n    length = len(l)\n\n    # Create a new list of length length\n    new_list = [0] * length\n\n    # Copy the values of l into new_list\n    for i in range(length):\n        new_list[i] = l[i]\n\n    # Sort the even indicies of new_list\n    for i in range(0, length, 2):\n        for j in range(i+1, length, 2):\n            if new_list[i] > new_list[j]:\n                new_list[i], new_list[j] = new_list[j], new_list[i]\n\n    # Return new_list\n    return new_list",
        "test": "assert sort_even([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 1422,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # remove leading zeros from each group.\n    groups = [group.lstrip(\"0\") for group in groups]\n    # convert groups back to string.\n    return \"\".join(groups)\n",
        "test": "assert decode_cyclic(encode_cyclic(\"12345\")) == \"12345\"",
        "num_ids": 1380,
        "indeed": false
    },
    {
        "number": 39,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_prime(n: int) -> bool:\n    \"\"\"\n    Checks whether a given number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef fibonacci(n: int) -> int:\n    \"\"\"\n    Computes the nth Fibonacci number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        for i in range(3, n + 1):\n            if fibonacci(i) == i:\n                if is_prime(i):\n                    return i\n        return 0",
        "test": "assert prime_fib(1) == 2, \"Failed: prime_fib(1) should return 2\"",
        "num_ids": 1289,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    seen = set()\n    for num in l:\n        diff = -num\n        if diff in seen and num not in seen:\n            return True\n        seen.add(num)\n    return False\n",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 1777,
        "indeed": false
    },
    {
        "number": 41,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    left_cars = n\n    right_cars = n\n    \n    while left_cars > 0 and right_cars > 0:\n        left_cars -= 1\n        right_cars -= 1\n        \n        if left_cars > 0 and right_cars > 0:\n            left_cars -= 1\n            right_cars -= 1\n    \n    return left_cars + right_cars",
        "test": "assert car_race_collision(2) == 0, \"Test case 1: No collisions\"",
        "num_ids": 1443,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def incr_list(l: list) -> list:\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x + 1 for x in l]",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 894,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for num in l:\n        complement = -num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False",
        "test": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 1094,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10.\")\n    if base == 10:\n        return str(x)\n    elif base == 2:\n        result = \"\"\n        while x > 0:\n            result = str(x % 2) + result\n            x //= 2\n        return result\n    else:\n        result = \"\"\n        while x > 0:\n            result = str(x % base) + result\n            x //= base\n        return result",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 1056,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h",
        "test": "assert triangle_area(5, 3) == 7.5, \"The function should return 7.5\"",
        "num_ids": 442,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    # initialize the first three elements of the sequence\n    a, b, c = 0, 0, 2\n    \n    # compute the next elements of the sequence\n    for i in range(n-3):\n        a, b, c = b, c, a+b+c\n        \n    return c",
        "test": "assert fib4(5) == 4",
        "num_ids": 1248,
        "indeed": false
    },
    {
        "number": 47,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def median(l: list) -> float:\n    \"\"\"Return median of elements in the list l.\"\"\"\n    sorted_l = sorted(l)\n    n = len(l)\n    if n % 2 == 0:\n        # average of middle two elements\n        mid1 = sorted_l[n // 2 - 1]\n        mid2 = sorted_l[n // 2]\n        return (mid1 + mid2) / 2\n    else:\n        # middle element\n        return sorted_l[n // 2]\n",
        "test": "assert median([3, 1, 2, 4, 5]) == 3",
        "num_ids": 893,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    # Convert the text to lowercase and remove non-alphanumeric characters\n    text = ''.join(c.lower() for c in text if c.isalnum()).replace(' ', '')\n    # Check if the text is the same forwards and backwards\n    return text == text[::-1]",
        "test": "assert is_palindrome('') == True",
        "num_ids": 719,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    result = 1\n    for _ in range(n):\n        result = (result * 2) % p\n    return result",
        "test": "assert modp(3, 5) == 3",
        "num_ids": 1619,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    shift = 5\n    encoded_str = \"\"\n    for char in s:\n        encoded_str += chr(((ord(char) + shift - ord(\"a\")) % 26) + ord(\"a\"))\n    return encoded_str\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    shift = 5\n    decoded_str = \"\"\n    for char in s:\n        decoded_str += chr(((ord(char) - ord(\"a\") + 26 - shift) % 26) + ord(\"a\"))\n    return decoded_str\n\nif __name__ == \"__main__\":\n    encoded_string = input(\"Enter a string to encode: \")\n    encoded_string_shifted = encode_shift(encoded_string)\n    print(\"Encoded string:\", encoded_string_shifted)\n\n    decoded_string = input(\"Enter the encoded string to decode: \")\n    decoded_string_shifted = decode_shift(decoded_string)\n    print(\"Decoded string:\", decoded_string_shifted)",
        "test": "assert decode_shift(\"yzaab\") == \"bye\"",
        "num_ids": 1040,
        "indeed": false
    },
    {
        "number": 51,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_vowels(text):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return ''.join(char for char in text if char not in vowels)",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 490,
        "indeed": false
    },
    {
        "number": 52,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True",
        "num_ids": 741,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y",
        "test": "assert add(2, 3) == 5",
        "num_ids": 389,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    # Convert both strings to sets to remove duplicates\n    set0 = set(s0)\n    set1 = set(s1)\n    # Check if the two sets have the same elements\n    return len(set0) == len(set1) and set0 == set1",
        "test": "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
        "num_ids": 914,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)",
        "test": "assert fib(10) == 55",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "test": "assert correct_bracketing(\"<\") == False",
        "num_ids": 890,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def monotonic(l: list) -> bool:\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\"\"\"\n    if not l:\n        return True\n    first = l[0]\n    for elem in l[1:]:\n        if elem <= first:\n            return False\n        elif elem > first:\n            first = elem\n    return True",
        "test": "assert monotonic([1, 2, 4, 20]) == True",
        "num_ids": 897,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def common(l1, l2):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    # create a set for l1 and l2\n    set1 = set(l1)\n    set2 = set(l2)\n    # find the intersection of set1 and set2\n    common_set = set1.intersection(set2)\n    # convert the intersection set back to a list and sort it\n    common_list = sorted(list(common_set))\n    return common_list",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 1166,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_prime(num: int) -> bool:\n    \"\"\"Return True if num is a prime number, False otherwise.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 2:\n        return 2\n    \n    if n % 2 == 0:\n        if is_prime(2):\n            return 2\n        else:\n            return largest_prime_factor(n // 2)\n    \n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            if is_prime(i):\n                return i\n            n //= i\n    \n    if is_prime(n):\n        return n\n    else:\n        return largest_prime_factor(n)",
        "test": "assert largest_prime_factor(2048) == 2",
        "num_ids": 1185,
        "indeed": false
    },
    {
        "number": 60,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_to_n(n: int) -> int:\n    \"\"\"Sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2",
        "test": "assert sum_to_n(30) == 465",
        "num_ids": 474,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 723,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def derivative(xs: list) -> list:\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    n = len(xs)\n    result = [0] * (n - 1)\n    for i in range(1, n):\n        result[i - 1] = xs[i] * i\n    return result",
        "test": "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
        "num_ids": 1154,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
        "test": "assert fibfib(1) == 0, \"fibfib(1) should be 0\"",
        "num_ids": 1237,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 1104,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    \n    # get the number of digits in x\n    digits = len(str(x))\n    \n    # if shift is greater than the number of digits, reverse the digits\n    if shift > digits:\n        return str(x)[::-1]\n    \n    # create an empty string to hold the shifted digits\n    result = \"\"\n    \n    # loop through each digit in x\n    for i in range(digits):\n        \n        # calculate the index of the digit to be shifted\n        index = (i + shift) % digits\n        \n        # append the shifted digit to the result string\n        result += str(x)[index]\n    \n    return result",
        "test": "assert circular_shift(12, 1) == \"21\"",
        "num_ids": 1368,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum",
        "test": "assert digitSum(\"\") == 0, \"Test failed. digitSum('') returns {}, but expected 0.\"",
        "num_ids": 1048,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def fruit_distribution(s, n):\n    apples, oranges, mangoes = s.split()\n    total_apples = int(apples)\n    total_oranges = int(oranges)\n    total_mangoes = n - total_apples - total_oranges\n    return total_mangoes",
        "test": "assert fruit_distribution(\"0 apples and 1 oranges\", 3) == 2",
        "num_ids": 1339,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n    # Helper function to find the smallest even value and its index\n    def find_min(arr):\n        min_value = None\n        min_index = None\n        for i, value in enumerate(arr):\n            if value % 2 == 0 and (min_value is None or value < min_value):\n                min_value = value\n                min_index = i\n        return min_value, min_index\n\n    # Find the smallest even value and its index\n    min_value, min_index = find_min(arr)\n\n    # If no even values are found, return an empty list\n    if min_value is None:\n        return []\n\n    # Otherwise, return the plucked node\n    return [min_value, min_index]",
        "test": "assert pluck([1,2,3]) == [2, 1]",
        "num_ids": 2415,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    max_freq = 0\n    max_num = 0\n    for num in lst:\n        if num > 0 and lst.count(num) >= num:\n            if lst.count(num) > max_freq:\n                max_freq = lst.count(num)\n                max_num = num\n    if max_num == 0:\n        return -1\n    else:\n        return max_num",
        "test": "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3",
        "num_ids": 1431,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # Initialize the result list and the remaining integers list\n    result = []\n    remaining = lst.copy()\n\n    # Loop until all integers have been added to the result list\n    while remaining:\n        # Find the minimum value in the remaining integers\n        min_val = min(remaining)\n\n        # Add the minimum value to the result list and remove it from the remaining list\n        result.append(min_val)\n        remaining.remove(min_val)\n\n        # Find the maximum value in the remaining integers\n        max_val = max(remaining)\n\n        # Add the maximum value to the result list and remove it from the remaining list\n        result.append(max_val)\n        remaining.remove(max_val)\n\n        # If there are still remaining integers, repeat the process with the remaining integers\n        if remaining:\n            min_val = min(remaining)\n            max_val = max(remaining)\n            result.append(min_val)\n            result.append(max_val)\n            remaining.remove(min_val)\n            remaining.remove(max_val)\n\n    return result",
        "test": "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]",
        "num_ids": 1659,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1.\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n\n    # Check if the three sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\n    # Calculate the semi-perimeter and area\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n\n    # Round the area to 2 decimal points\n    area = round(area, 2)\n\n    return area",
        "test": "assert triangle_area(1, 2, 10) == -1",
        "num_ids": 1170,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_balanced(lst):\n    return lst == lst[::-1]\n\ndef sum_elements(lst):\n    return sum(lst)\n\ndef will_it_fly(lst, w):\n    if len(lst) % 2 == 0:\n        return False\n\n    if not is_balanced(lst):\n        return False\n\n    return sum_elements(lst) <= w",
        "test": "assert will_it_fly([3, 2, 3], 1) == False",
        "num_ids": 1324,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the result to the number of changes\n    result = 0\n\n    # Loop through the array and check if the current element is the middle element\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[-i - 1]:\n            result += 1\n\n    return result",
        "test": "assert smallest_change([1,2,3,5,4,7,9,6]) == 4",
        "num_ids": 1651,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    \n    count1 = 0\n    count2 = 0\n    result = []\n    \n    for string1 in lst1:\n        count1 += len(string1)\n    \n    for string2 in lst2:\n        count2 += len(string2)\n    \n    if count1 == count2:\n        return lst1\n    \n    for string1 in lst1:\n        for string2 in lst2:\n            if len(string1) < len(string2):\n                if string1 in string2:\n                    result.append(string1)\n                    break\n            elif len(string1) > len(string2):\n                if string2 in string1:\n                    result.append(string2)\n                    break\n                \n    return result",
        "test": "assert total_match([], []) == []",
        "num_ids": 1893,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\"\"\"\n\n    # Define a function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Define a list of prime numbers\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n\n    # Check if the multiplication of the first three prime numbers is equal to the given number\n    if a == primes[0] * primes[1] * primes[2]:\n        return True\n    elif a == primes[0] * primes[1] * primes[3]:\n        return True\n    elif a == primes[0] * primes[1] * primes[4]:\n        return True\n    elif a == primes[0] * primes[2] * primes[3]:\n        return True\n    elif a == primes[0] * primes[2] * primes[4]:\n        return True\n    elif a == primes[0] * primes[3] * primes[4]:\n        return True\n    elif a == primes[1] * primes[2] * primes[3]:\n        return True\n    elif a == primes[1] * primes[2] * primes[4]:\n        return True\n    elif a == primes[1] * primes[3] * primes[4]:\n        return True\n    elif a == primes[2] * primes[3] * primes[4]:\n        return True\n    else:\n        return False",
        "test": "assert is_multiply_prime(97) == False, \"is_multiply_prime(97) should return False\"",
        "num_ids": 1677,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    # Check if n is a simple number\n    if n == 1:\n        return x == 1\n    elif n == 0:\n        return False\n\n    # Check if n is a simple power of 2\n    if n == 2 and x % 2 == 0:\n        return True\n\n    # Check if n is a simple power of 3\n    if n == 3 and x % 3 == 0:\n        return True\n\n    # Check if n is a simple power of 5\n    if n == 5 and x % 5 == 0:\n        return True\n\n    # Check if n is a simple power of 7\n    if n == 7 and x % 7 == 0:\n        return True\n\n    # Check if n is a simple power of 11\n    if n == 11 and x % 11 == 0:\n        return True\n\n    # Check if n is a simple power of 13\n    if n == 13 and x % 13 == 0:\n        return True\n\n    # Check if n is a simple power of 17\n    if n == 17 and x % 17 == 0:\n        return True\n\n    # Check if n is a simple power of 19\n    if n == 19 and x % 19 == 0:\n        return True\n\n    # If none of the above conditions are true, it's not a simple power\n    return False",
        "test": "assert is_simple_power(2, 2) == True",
        "num_ids": 1296,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n\n    # check if a is a positive integer\n    if not isinstance(a, int) or a < 0:\n        return False\n\n    # find the cube of the input integer\n    cube = a ** 3\n\n    # check if the input integer is a cube\n    if cube == a:\n        return True\n    else:\n        return False",
        "test": "assert iscube(2) == False",
        "num_ids": 910,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    \n    # Initialize count variable to zero\n    count = 0\n    \n    # Iterate through each character in the input string\n    for char in num:\n        \n        # Convert the current character to its corresponding integer\n        num_int = int(char, 16)\n        \n        # Check if the current integer is a prime number\n        if num_int in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]:\n            # If it is, increment the count variable\n            count += 1\n            \n    # Return the count of primes\n    return count",
        "test": "assert hex_key(\"AB\") == 1",
        "num_ids": 2393,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\n    # initialize empty string and temp variable\n    binary_str = \"\"\n    temp = decimal\n    \n    # while temp is not equal to 0, convert each digit to binary and append to binary_str\n    while temp > 0:\n        binary_str = str(temp % 2) + binary_str\n        temp //= 2\n    \n    # add extra 'db' characters to the beginning and end of the string\n    binary_str = \"db\" + binary_str + \"db\"\n    \n    return binary_str",
        "test": "assert decimal_to_binary(15) == \"db1111db\"",
        "num_ids": 1369,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_happy(s):\n    \"\"\"\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1]:\n            return False\n    return is_happy(sum_consecutive_three_letters(s))\n\ndef sum_consecutive_three_letters(s):\n    \"\"\"\n    Given a string s, return a new string where every 3 consecutive letters are added together\n    For example:\n    sum_consecutive_three_letters(\"abcd\") => \"c\"\n    sum_consecutive_three_letters(\"aabb\") => \"bb\"\n    \"\"\"\n    new_s = \"\"\n    for i in range(len(s)-2):\n        new_s += s[i] + s[i+1] + s[i+2]\n    return new_s",
        "test": "assert is_happy(\"a\") == False",
        "num_ids": 1510,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA        |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades",
        "test": "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']",
        "num_ids": 2677,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    length = len(string)\n    if is_prime(length):\n        return True\n    else:\n        return False",
        "test": "assert prime_length('Hello') == True",
        "num_ids": 733,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10**n-1, -1, -1):\n        if i // 10**n == 1:\n            count += 1\n    return count",
        "test": "assert starts_one_ends(1) == 0",
        "num_ids": 689,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n                 Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n             a string of binary number\n    \"\"\"\n    # Initialize the sum of digits to 0\n    digit_sum = 0\n    \n    # Loop through each digit of N and add it to the sum\n    while N > 0:\n        digit_sum += N % 10\n        N //= 10\n        \n    # Convert the sum of digits to binary and return it as a string\n    return bin(digit_sum)[2:]",
        "test": "assert solve(1000) == \"1\"",
        "num_ids": 1215,
        "indeed": true
    },
    {
        "number": 85,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\"\"\"\n    even_odds = [num for i, num in enumerate(lst) if i % 2 == 1 and num % 2 == 0]\n    return sum(even_odds)",
        "test": "assert add([4, 2, 6, 7]) == 2",
        "num_ids": 560,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n    # Initialize an empty list to store the new words\n    new_words = []\n    # Iterate through each word in the list\n    for word in words:\n        # Convert the word to a string\n        w = str(word)\n        # Sort the characters in the string in ascending order based on ascii value\n        w = ''.join(sorted(w))\n        # Append the sorted word to the new_words list\n        new_words.append(w)\n    # Join the new_words list into a string and return it\n    return''.join(new_words)",
        "test": "assert anti_shuffle('hello') == 'ehllo'",
        "num_ids": 1229,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    # Helper function to swap two elements\n    def swap(lst, i, j):\n        lst[i], lst[j] = lst[j], lst[i]\n    \n    # Helper function to sort coordinates by rows and columns\n    def sort_coords(coords):\n        return sorted(coords, key=lambda x: (x[0], -x[1]))\n    \n    # Initialize an empty list to store coordinates\n    coords = []\n    \n    # Iterate through the rows of the matrix\n    for i, row in enumerate(lst):\n        # Iterate through the columns of the current row\n        for j, col in enumerate(row):\n            # If the current element is equal to x, append the coordinate to the list\n            if col == x:\n                coords.append((i, j))\n    \n    # Sort the coordinates by rows and columns\n    sorted_coords = sort_coords(coords)\n    \n    # Return the sorted list of coordinates\n    return sorted_coords",
        "test": "assert get_row([], 1) == []",
        "num_ids": 2210,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    # create a copy of the original array\n    arr = array.copy()\n\n    # sort the array in ascending or descending order based on the condition\n    if sum(arr[:len(arr) // 2]) % 2 == 1:\n        arr.sort()\n    else:\n        arr.sort(reverse=True)\n\n    # return the sorted array\n    return arr",
        "test": "assert sort_array([]) == []",
        "num_ids": 1801,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    rotated_alphabet = alphabet[2:] + alphabet[:2]\n    encrypted_s = ''\n    for letter in s:\n        if letter.isalpha():\n            index = alphabet.index(letter)\n            encrypted_index = (index + 2) % 26\n            encrypted_s += rotated_alphabet[encrypted_index]\n        else:\n            encrypted_s += letter\n    return encrypted_s",
        "test": "assert encrypt('hi') == 'lm'",
        "num_ids": 1422,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    lst.sort()\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1]",
        "test": "assert next_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 1343,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\n    boredom_count = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            boredom_count += 1\n    return boredom_count",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 981,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    \n    if type(x) == int and type(y) == int and type(z) == int:\n        if x + y == z or x + z == y or y + z == x:\n            return True\n    return False",
        "test": "assert any_int(5, 2, 7) == True",
        "num_ids": 990,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'THKS KS C MGSSCGG'\n    \"\"\"\n    \n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    vowel_letters = {'a': 'B', 'e': 'F', 'i': 'J', 'o': 'N', 'u': 'V'}\n    \n    result = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        elif char in vowels:\n            result += vowel_letters[char]\n        else:\n            result += char\n    \n    return result",
        "test": "assert encode('This is a message') == 'tHKS KS c MGSSCGG'",
        "num_ids": 982,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef largest_prime(lst):\n    largest = 0\n    for num in lst:\n        if is_prime(num) and num > largest:\n            largest = num\n    return largest\n\n\ndef sum_of_digits(num):\n    return sum(int(digit) for digit in str(num))\n\n\ndef skjkasdkd(lst):\n    largest_prime_value = largest_prime(lst)\n    return sum_of_digits(largest_prime_value)\n",
        "test": "assert skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10",
        "num_ids": 2765,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    \n    keys = dict.keys()\n    for key in keys:\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            continue\n        if key.isupper():\n            return False\n    \n    return True",
        "test": "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
        "num_ids": 1515,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_prime(n):\n    \"\"\"Returns True if n is a prime number, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes[:n]\n\nprint(count_up_to(5))  # Output: [2, 3]\nprint(count_up_to(11))  # Output: [2, 3, 5, 7]\nprint(count_up_to(0))  # Output: []\nprint(count_up_to(20))  # Output: [2, 3, 5, 7, 11, 13, 17, 19]\nprint(count_up_to(1))  # Output: []\nprint(count_up_to(18))  # Output: [2, 3, 5, 7, 11, 13, 17]",
        "test": "assert count_up_to(5) == [2, 3]",
        "num_ids": 2050,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def multiply(a, b):\n    \"\"\"\n    Complete the function that takes two integers and returns the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    \n    def get_unit_digits(num):\n        \"\"\"\n        Returns a list of the unit digits of a given number.\n        \"\"\"\n        return [int(d) for d in str(num) if int(d)]\n    \n    a_unit_digits = get_unit_digits(a)\n    b_unit_digits = get_unit_digits(b)\n    \n    product = 0\n    for a_digit, b_digit in zip(a_unit_digits, b_unit_digits):\n        product = product * 10 + a_digit * b_digit\n        \n    return product",
        "test": "assert multiply(19, 28) == 72",
        "num_ids": 1429,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    return count",
        "test": "assert count_upper('abcdefg') == 0",
        "num_ids": 694,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    # Remove any non-numeric characters from the value\n    value = ''.join(filter(str.isdigit, value))\n\n    # Convert the string to an integer\n    num = int(value)\n\n    # Calculate the absolute difference between the number and its closest integer\n    abs_diff = abs(num - int(num))\n\n    # Check if the absolute difference is greater than 0.5\n    if abs_diff > 0.5:\n        # Round the number away from zero\n        num = num + 1 if num >= 0 else num - 1\n\n    return num",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 1612,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    level_stones = [n]\n    next_level_stones = []\n    while len(next_level_stones) < n:\n        if n % 2 == 0:\n            next_level_stones.append(level_stones[-1] * 2)\n        else:\n            next_level_stones.append(level_stones[-1] * 2 + 1)\n        level_stones = next_level_stones\n        next_level_stones = []\n    return level_stones",
        "test": "assert make_a_pile(5) == [5, 9, 13, 17, 21]",
        "num_ids": 1312,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    words = s.split(\",\")\n    words = [word.strip() for word in words if word.strip()]\n    return words",
        "test": "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
        "num_ids": 993,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(x, y+1, 2):\n        if i > x:\n            return i\n    return -1",
        "test": "assert choose_num(13, 12) == -1",
        "num_ids": 829,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    if n > m:\n        return -1\n    \n    total = 0\n    for i in range(n, m+1):\n        total += i\n        \n    rounded_total = int(total / (m - n + 1))\n    \n    return bin(rounded_total)[2:]",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 1365,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    def has_even_digit(num):\n        \"\"\"Check if a given number has even digit\"\"\"\n        return any(num % 2 == 0 for _ in range(10))\n\n    unique_x = []\n    for num in x:\n        if not has_even_digit(num):\n            unique_x.append(num)\n\n    return sorted(unique_x)\n",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
        "num_ids": 1343,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n             -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n             -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n      \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n      \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n             -> sort arr -> [-1, 1, 55]\n             -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    def name_dict():\n        return {\n            1: \"One\",\n            2: \"Two\",\n            3: \"Three\",\n            4: \"Four\",\n            5: \"Five\",\n            6: \"Six\",\n            7: \"Seven\",\n            8: \"Eight\",\n            9: \"Nine\"\n        }\n\n    def process_array(arr):\n        name_dict_temp = name_dict()\n        new_arr = []\n\n        for num in arr:\n            if 1 <= num <= 9:\n                new_arr.append(name_dict_temp[num])\n            else:\n                new_arr.append(num)\n\n        return new_arr\n\n    if len(arr) == 0:\n        return []\n    else:\n        sorted_arr = sorted(arr)\n        reversed_arr = sorted_arr[::-1]\n        processed_arr = process_array(reversed_arr)\n        return processed_arr\n",
        "test": "assert by_length([]) == []",
        "num_ids": 2791,
        "indeed": false
    },
    {
        "number": 106,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate over the range from 1 to n (inclusive)\n    for i in range(1, n+1):\n        # If the current number is even, add the factorial of the number to the result list\n        if i % 2 == 0:\n            result.append(factorial(i))\n        # Otherwise, add the sum of numbers from 1 to i to the result list\n        else:\n            result.append(sum(range(1, i+1)))\n\n    return result\n\ndef factorial(n):\n    \"\"\" Helper function to calculate the factorial of a number \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)",
        "test": "assert f(5) == [1, 2, 6, 24, 15]",
        "num_ids": 1380,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    even_count = 0\n    odd_count = 0\n\n    # loop through all numbers in the range(1, n)\n    for i in range(1, n+1):\n        # check if the number is a palindrome\n        if str(i) == str(i)[::-1]:\n            # count even and odd palindromes\n            if int(i) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)",
        "test": "assert even_odd_palindrome(3) == (1, 2)",
        "num_ids": 1759,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num < 0:\n            if num // 10 == num % 10:\n                count += 1\n        else:\n            if num % 10 == num // 10:\n                count += 1\n    return count\n",
        "test": "assert count_nums([]) == 0",
        "num_ids": 1069,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    \n    if not arr:\n        return True\n\n    n = len(arr)\n    last_element = arr[-1]\n\n    for i in range(n-1):\n        if arr[i] > last_element:\n            return False\n\n    return True",
        "test": "assert move_one_ball([3, 5, 4, 1, 2]) == False",
        "num_ids": 2628,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\"\"\"\n    \n    # Check if the two lists have the same length\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n    \n    # Check if the sum of the two lists is odd\n    if sum(lst1) % 2 == 1 or sum(lst2) % 2 == 1:\n        return \"NO\"\n    \n    # Check if it is possible to exchange even elements between the two lists\n    even_count = 0\n    for num in lst1:\n        if num % 2 == 0:\n            even_count += 1\n            if even_count > len(lst2) // 2:\n                return \"NO\"\n    \n    # If we have reached here, it is possible to exchange even elements\n    return \"YES\"",
        "test": "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"",
        "num_ids": 2903,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \"\"\"\n\n    # Split the string into a list of letters\n    letters = test.split()\n\n    # Initialize a dictionary to store the counts of each letter\n    counts = {}\n\n    # Loop through each letter in the list and increment its count in the dictionary\n    for letter in letters:\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n\n    # Find the letter with the highest count\n    max_count = max(counts.values())\n\n    # Find all the letters with the same highest count and return them as a list\n    result = []\n    for letter in counts:\n        if counts[letter] == max_count:\n            result.append(letter)\n\n    # Create a dictionary to store the final result\n    final_result = {}\n\n    # Loop through the list of letters with the same highest count and add them to the final dictionary\n    for letter in result:\n        final_result[letter] = counts[letter]\n\n    # Return the final dictionary\n    return final_result",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
        "num_ids": 1866,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def reverse_delete(s, c):\n    \"\"\"\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\",  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Remove characters in c from s\n    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    # Check if the result is palindrome\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)",
        "test": "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)",
        "num_ids": 1239,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for i, s in enumerate(lst):\n        count = 0\n        for j in s:\n            if int(j) % 2!= 0:\n                count += 1\n        result.append(f\"the number of odd elements {count}n the str{i}ng {count} of the {i}nput.\")\n    return result",
        "test": "assert odd_count(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]",
        "num_ids": 1746,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n\n    if len(nums) == 0:\n        return 0\n\n    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        elif current_sum > 0:\n            current_sum -= nums[nums.index(num)]\n\n    return min_sum",
        "test": "assert minSubArraySum([-1, -2, -3]) == -6",
        "num_ids": 1215,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def max_fill(grid, capacity):\n    row_length = len(grid[0])\n    bucket_count = 0\n    bucket_capacity = capacity\n\n    # Iterate over each row in the grid\n    for row in grid:\n        bucket_count = 0\n\n        # Iterate over each bucket in the row\n        for bucket in row:\n            # If the bucket is full, add a bucket\n            if bucket_count == bucket_capacity:\n                bucket_count = 0\n                bucket_count += 1\n            # If the bucket is empty, remove a bucket\n            elif bucket_count > 0:\n                bucket_count -= 1\n\n        # Increment the count of buckets in the row\n        bucket_count += 1\n\n    # Calculate the number of times to lower the buckets\n    return math.ceil(bucket_count / bucket_capacity)",
        "test": "assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5",
        "num_ids": 2110,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Helper function to count the number of ones in a binary number\n    def count_ones(n):\n        count = 0\n        while n > 0:\n            count += n & 1\n            n >>= 1\n        return count\n\n    # Sort the array using the above helper function\n    arr.sort(key=lambda x: (-count_ones(bin(x)[2:]), x))\n\n    return arr",
        "test": "assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]",
        "num_ids": 1728,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    \n    # Define a function to check if a character is consonant\n    def is_consonant(char):\n        vowels = {'a', 'e', 'i', 'o', 'u'}\n        return char.lower() not in vowels\n    \n    # Initialize an empty list to store the selected words\n    selected_words = []\n    \n    # Split the string into words\n    words = s.split()\n    \n    # Iterate through the words\n    for word in words:\n        # Count the number of consonants in the word\n        consonant_count = sum(1 for char in word if is_consonant(char))\n        \n        # If the word contains exactly n consonants, add it to the selected_words list\n        if consonant_count == n:\n            selected_words.append(word)\n    \n    # Return the selected_words list\n    return selected_words",
        "test": "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]",
        "num_ids": 1722,
        "indeed": true
    },
    {
        "number": 118,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def get_closest_vowel(word):\n    \"\"\"\n    You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    # Define a list of vowels\n    vowels = ['a', 'e', 'i', 'o', 'u']\n\n    # Find the length of the word\n    word_length = len(word)\n\n    # Define the starting index of the right side of the word\n    start_index = word_length - 1\n\n    # Initialize the closest vowel index to -1\n    closest_vowel_index = -1\n\n    # Initialize the closest vowel distance to infinity\n    closest_vowel_distance = float('inf')\n\n    # Loop through the right side of the word\n    while start_index >= 0:\n        # Check if the current character is a vowel\n        if word[start_index].lower() in vowels:\n            # Get the index of the current vowel\n            current_vowel_index = vowels.index(word[start_index].lower())\n\n            # Calculate the distance between the current vowel and the closest vowel\n            distance = abs(current_vowel_index - closest_vowel_index)\n\n            # Check if the current distance is smaller than the closest vowel distance\n            if distance < closest_vowel_distance:\n                # Update the closest vowel index and distance\n                closest_vowel_index = current_vowel_index\n                closest_vowel_distance = distance\n\n        # Decrement the starting index\n        start_index -= 1\n\n    # Check if the closest vowel index is -1, which means no vowel was found\n    if closest_vowel_index == -1:\n        return \"\"\n\n    # Calculate the index of the closest consonant\n    closest_consonant_index = (closest_vowel_index + 1) % 5\n\n    # Return the corresponding vowel\n    return vowels[closest_consonant_index]",
        "test": "assert get_closest_vowel(\"yogurt\") == \"u\"",
        "num_ids": 1934,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def match_parens(lst):\n    def balanced(s):\n        count = 0\n        for c in s:\n            if c == '(':\n                count += 1\n            elif c == ')':\n                count -= 1\n                if count < 0:\n                    return False\n        return count == 0\n\n    s1, s2 = lst\n    return 'Yes' if balanced(s1 + s2) else 'No'",
        "test": "assert match_parens([')', ')']) == 'No'",
        "num_ids": 1940,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Return the k largest elements\n    return arr[-k:]",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]",
        "num_ids": 1600,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 0\n    \"\"\"\n\n    sum = 0\n    even_index = 0\n\n    while even_index < len(lst):\n        if lst[even_index] % 2!= 0:\n            sum += lst[even_index]\n        even_index += 2\n\n    return sum",
        "test": "assert solution([5, 8, 7, 1]) == 12",
        "num_ids": 944,
        "indeed": true
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    arr.sort() # sort the array in ascending order\n    sum = 0\n    i = 0\n    while i < len(arr) and i < k: # while there are elements left in the array and we haven't reached the limit\n        sum += arr[i] // 10 # add the first two digits of the current element to the sum\n        i += 1\n    return sum",
        "test": "assert add_elements([1,2,3,4,5,6,7,8,9,10], 4) == 6",
        "num_ids": 1590,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    def collatz(n):\n        if n == 1:\n            return [1]\n        elif n % 2 == 0:\n            return collatz(n // 2) + [n]\n        else:\n            return collatz(3 * n + 1) + [n]\n\n    collatz_sequence = collatz(n)\n    odd_numbers = [num for num in collatz_sequence if num % 2!= 0]\n    return sorted(odd_numbers)",
        "test": "assert get_odd_collatz(5) == [1, 5]",
        "num_ids": 1908,
        "indeed": true
    },
    {
        "number": 124,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    \n    # Check if the date string is empty\n    if not date:\n        return False\n    \n    # Split the date string into month, day, and year\n    parts = date.split('-')\n    \n    # Check if the parts are in the correct format\n    if len(parts)!= 3 or not parts[0].isdigit() or not parts[1].isdigit() or not parts[2].isdigit():\n        return False\n    \n    # Convert the parts to integers\n    month = int(parts[0])\n    day = int(parts[1])\n    year = int(parts[2])\n    \n    # Check if the year is a leap year\n    is_leap_year = (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0))\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid for the month\n    if month == 2:\n        if day < 1 or day > 29:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    else:\n        if day < 1 or day > 31:\n            return False\n    \n    # Check if the year is valid\n    if year < 100:\n        year += 2000\n    elif year < 1000:\n        year += 1900\n    \n    # Check if the date is a valid date in the given format\n    if day > 29 or (is_leap_year and day > 28) or (not is_leap_year and day > 27):\n        return False\n    \n    return True",
        "test": "assert valid_date('15-01-2012') == False",
        "num_ids": 3089,
        "indeed": true
    },
    {
        "number": 125,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    words = []\n    num_words = 0\n    for word in txt.split(','):\n        words.extend(word.split())\n        num_words += 1\n    if num_words == 0:\n        return len([word for word in txt.lower() if word.islower() and ord(word[0]) % 2!= 0])\n    else:\n        return words",
        "test": "assert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 1630,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    if len(lst) < 2:\n        return True\n    if lst[0] > lst[1]:\n        return False\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n        if lst[i] == lst[i - 1]:\n            return False\n    return True",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 1937,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n    \"\"\"\n\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    # check if the intervals intersect\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n\n    # calculate the length of the intersection\n    length = end1 - start2\n\n    # check if the length is a prime number\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\"",
        "num_ids": 1791,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n\n    # Calculate sum of magnitudes\n    total_mag = sum(abs(x) for x in arr)\n\n    # Calculate product of all signs\n    sign_prod = 1\n    for num in arr:\n        if num > 0:\n            sign_prod *= 1\n        elif num < 0:\n            sign_prod *= -1\n        else:\n            sign_prod *= 0\n\n    # Multiply sum of magnitudes by sign product and return result\n    return total_mag * sign_prod",
        "test": "assert prod_signs([1, 2, 2, -4]) == -9",
        "num_ids": 1307,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necesseraly distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n    def helper(grid, k, i, j, curr_path):\n        if i == len(grid) - 1 and j == len(grid[0]) - 1:\n            return curr_path\n\n        if i == len(grid) - 1:\n            return helper(grid, k, i, j + 1, curr_path + [grid[i][j]])\n\n        if j == len(grid[0]) - 1:\n            return helper(grid, k, i + 1, j, curr_path + [grid[i][j]])\n\n        if abs(i - j) <= k:\n            if grid[i][j] < grid[i + 1][j]:\n                return helper(grid, k, i + 1, j, curr_path + [grid[i][j]])\n            else:\n                return helper(grid, k, i, j + 1, curr_path + [grid[i][j]])\n        else:\n            if grid[i][j] < grid[i][j + 1]:\n                return helper(grid, k, i, j + 1, curr_path + [grid[i][j]])\n            else:\n                return helper(grid, k, i + 1, j, curr_path + [grid[i][j]])\n\n    path = helper(grid, k, 0, 0, [])\n    return path",
        "test": "assert minPath([[5,9,3], [4,1,6], [7,8,2]], 1) == [1]",
        "num_ids": 3640,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n <= 1:\n        return [3] * (n + 1)\n    else:\n        if n % 2 == 0:\n            return [1, 3, 2, 8] * (n // 2 + 1)\n        else:\n            return [1, 3, 2, 8] + tri(n - 1) + tri(n - 2) + tri(n + 1)",
        "test": "assert tri(3) == [1, 3, 2, 8]",
        "num_ids": 1994,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    \n    # Remove leading zeroes\n    n = str(n)\n    while n[0] == '0':\n        n = n[1:]\n    \n    # Count the odd digits\n    odd_count = 0\n    for digit in n:\n        if int(digit) % 2!= 0:\n            odd_count += 1\n    \n    # If all digits are even, return 0\n    if odd_count == 0:\n        return 0\n    \n    # Calculate the product of odd digits\n    product = 1\n    for digit in n:\n        if int(digit) % 2!= 0:\n            product *= int(digit)\n    \n    return product",
        "test": "assert digits(1) == 1",
        "num_ids": 828,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "test": "assert is_nested('[[]]') == True",
        "num_ids": 729,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    \n    # Round each element in the list to the upper int(Ceiling)\n    lst = [int(round(x)) for x in lst]\n    \n    # Calculate the sum of squared numbers in the given list\n    sum_of_squares = sum([x**2 for x in lst])\n    \n    return sum_of_squares",
        "test": "assert sum_squares([1,2,3]) == 14",
        "num_ids": 1180,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n\n    # remove trailing spaces and split the string into words\n    words = txt.strip().split()\n\n    # check if the last word contains only letters\n    last_word = words[-1]\n    if last_word.isalpha():\n        return True\n    else:\n        return False",
        "test": "assert check_if_last_char_is_a_letter(\"apple pi e\") == True",
        "num_ids": 1111,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] >= arr[i+1]:\n            return i\n    return -1",
        "test": "assert can_arrange([1, 2, 3]) == -1",
        "num_ids": 1130,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    negative = None\n    positive = None\n    for num in lst:\n        if num < 0:\n            if negative is None or num > negative:\n                negative = num\n        elif num > 0:\n            if positive is None or num < positive:\n                positive = num\n    return (negative, positive)",
        "test": "assert largest_smallest_integers([]) == (None, None)",
        "num_ids": 1544,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n    \n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n    # Convert a and b to float\n    a = float(a)\n    b = float(b)\n\n    # Check if a is greater than b\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None",
        "test": "assert compare_one(1, 2.5) == 2.5, \"Test 1 Failed\"",
        "num_ids": 1508,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers.\n\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n\n    # Check if the given number is even or not\n    if n % 2!= 0:\n        return False\n\n    # Initialize the sum to 0\n    sum_even = 0\n\n    # Loop through the numbers from 2 to n-1\n    for i in range(2, n):\n        # Check if i is even and is a positive number\n        if i % 2 == 0 and i > 0:\n            # Add i to the sum if it's greater than the current sum\n            if i > sum_even:\n                sum_even = i\n\n    # Check if the sum of even numbers is equal to the given number\n    if sum_even == n:\n        return True\n    else:\n        return False",
        "test": "assert is_equal_to_sum_even(6) == False",
        "num_ids": 962,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result",
        "test": "assert special_factorial(0) == 1",
        "num_ids": 852,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n\n    # Replace all consecutive spaces with -\n    while \"  \" in text:\n        text = text.replace(\"  \", \"-\")\n\n    return text",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 828,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Check if the file name contains more than three digits\n    if any(char.isdigit() for char in file_name) and len(file_name) > 3:\n        return 'No'\n\n    # Check if the file name contains exactly one dot\n    if '.' not in file_name:\n        return 'No'\n\n    # Check if the substring before the dot is not empty and starts with a latin alphapet letter\n    before_dot = file_name.split('.')[0]\n    if not before_dot or before_dot[0].lower() not in 'abcdefghijklmnopqrstuvwxyz':\n        return 'No'\n\n    # Check if the substring after the dot is one of these: ['txt', 'exe', 'dll']\n    after_dot = file_name.split('.')[1]\n    if after_dot not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'",
        "test": "assert file_name_check(\"1example.dll\") == \"No\"",
        "num_ids": 2161,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total_sum = 0\n    \n    for i, entry in enumerate(lst):\n        if i % 3 == 0 and i % 4!= 0:\n            entry *= entry\n        elif i % 4 == 0 and i % 3!= 0:\n            entry *= entry * entry\n        \n        total_sum += entry\n    \n    return total_sum",
        "test": "assert sum_squares([]) == 0",
        "num_ids": 1569,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    new_sentence = \"\"\n    for word in words:\n        if is_prime(len(word)):\n            new_sentence += word + \" \"\n    return new_sentence[:-1]",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\"",
        "num_ids": 732,
        "indeed": true
    },
    {
        "number": 144,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def simplify(x, n):\n    \"\"\"\n    Simplify the expression x * n and return True if the result is a whole number, False otherwise.\n    \"\"\"\n    numerator = int(x.split('/')[0])\n    denominator = int(x.split('/')[1])\n    numerator_times_n = numerator * int(n.split('/')[0])\n    denominator_times_n = denominator * int(n.split('/')[1])\n    if numerator_times_n == denominator_times_n and denominator_times_n!= 0:\n        return True\n    else:\n        return False",
        "test": "assert simplify(\"1/5\", \"5/1\") == True",
        "num_ids": 1527,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    \n    # Create a dictionary to store the sum of the digits of each number\n    digit_sum = {}\n    \n    # Loop through the given list of integers\n    for i, num in enumerate(nums):\n        # Calculate the sum of the digits of each number\n        sum_of_digits = sum(int(digit) for digit in str(abs(num)))\n        \n        # Add the sum of digits to the dictionary\n        digit_sum[i] = sum_of_digits\n    \n    # Sort the dictionary by the sum of digits in ascending order\n    sorted_dict = sorted(digit_sum.items(), key=lambda x: x[1])\n    \n    # Create a new list with the sorted indices\n    sorted_indices = [i for i, _ in sorted_dict]\n    \n    # Sort the original list of integers based on the sorted indices\n    sorted_nums = [nums[i] for i in sorted_indices]\n    \n    return sorted_nums",
        "test": "assert order_by_points([]) == []",
        "num_ids": 1491,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 in [1, 3, 5, 7, 9] and num % 100 not in [11, 33, 55, 77, 99]:\n            count += 1\n    return count",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1",
        "num_ids": 1165,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n\n    # Initialize the array a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n\n    # Initialize the count of valid triples\n    count = 0\n\n    # Iterate through all possible triples (i, j, k)\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                # Check if the sum of a[i], a[j], a[k] is a multiple of 3\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count",
        "test": "assert get_max_triples(3) == 0",
        "num_ids": 1691,
        "indeed": true
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\n    def distance(planet1, planet2):\n        '''\n        Calculate the distance between two planets based on their names.\n        '''\n        if planet1 == \"Mercury\" and planet2 == \"Venus\":\n            return 7.7843\n        elif planet1 == \"Venus\" and planet2 == \"Earth\":\n            return 10.8211\n        elif planet1 == \"Earth\" and planet2 == \"Mars\":\n            return 1.3961\n        elif planet1 == \"Mars\" and planet2 == \"Jupiter\":\n            return 2.4397\n        elif planet1 == \"Jupiter\" and planet2 == \"Saturn\":\n            return 0.9054\n        elif planet1 == \"Saturn\" and planet2 == \"Uranus\":\n            return 0.5235\n        elif planet1 == \"Uranus\" and planet2 == \"Neptune\":\n            return 0.4096\n        else:\n            return None\n\n    def get_planets(planet1, planet2, distance1, distance2):\n        '''\n        Get all planets between planet1 and planet2 that are within the \n        given distance from the sun.\n        '''\n        planets = []\n        for planet in planets:\n            if abs(distance(planet, planet1) - distance1) <= distance2 and abs(distance(planet, planet2) - distance2) <= distance2:\n                planets.append(planet)\n        return planets\n\n    # Get the distance between planet1 and planet2\n    distance1 = distance(planet1, planet2)\n    if distance1 is None:\n        return ()\n\n    # Get all planets between planet1 and planet2 that are within the given distance from the sun\n    planets1 = get_planets(planet1, planet2, distance1, 1.5)\n    planets2 = get_planets(planet2, planet1, distance1, 1.5)\n\n    # Sort the planets by the proximity to the sun\n    planets = sorted(planets1 + planets2, key=lambda x: distance(x, \"Sun\"))\n\n    return planets",
        "test": "assert bf(\"Earth\", \"Mercury\") == (\"Venus\")",
        "num_ids": 2777,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # Delete odd-length words from the list\n    lst = [word for word in lst if len(word) % 2 == 0]\n    # Sort the list by length of each word and then alphabetically by the word itself\n    lst.sort(key=lambda x: (len(x), x))\n    return lst",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 1990,
        "indeed": true
    },
    {
        "number": 150,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y",
        "test": "assert x_or_y(7, 34, 12) == 34",
        "num_ids": 936,
        "indeed": true
    },
    {
        "number": 151,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    '''\n    \n    if not lst:\n        return 0\n\n    odd_squares_sum = 0\n    for num in lst:\n        if not isinstance(num, int) or num < 0:\n            continue\n        odd_squares_sum += num ** 2\n\n    return odd_squares_sum",
        "test": "assert double_the_difference([-1, -2, 0]) == 0",
        "num_ids": 1214,
        "indeed": false
    },
    {
        "number": 152,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    # Create an empty list to store the differences between guesses and scores\n    diff_list = []\n\n    # Loop through the guesses and scores and calculate the differences\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            diff_list.append(0)\n        else:\n            diff_list.append(abs(guess[i] - game[i]))\n\n    return diff_list",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 1980,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    \"\"\"\n    strongest_ext = max(extensions, key=lambda x: sum(1 for c in x if c.isupper()) - sum(1 for c in x if c.islower()))\n    return f\"{class_name}.{strongest_ext}\"",
        "test": "assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"",
        "num_ids": 2294,
        "indeed": true
    },
    {
        "number": 154,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n\n    # Check if the second word or any of its rotations is a substring in the first word\n    for i in range(len(a)):\n        for j in range(i+1, len(a)+1):\n            if b in a[i:j]:\n                return True\n\n    return False\n",
        "test": "assert cycpattern_check(\"hello\",\"ell\") == True",
        "num_ids": 1334,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n\n    # loop through each digit of the number\n    for digit in str(abs(num)):\n        # if the digit is even\n        if int(digit) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n\n    return (count_even, count_odd)",
        "test": "assert even_odd_count(123) == (1, 2)",
        "num_ids": 1038,
        "indeed": true
    },
    {
        "number": 156,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    roman_numerals = [\n        (\"M\", 1000),\n        (\"CM\", 900),\n        (\"D\", 500),\n        (\"CD\", 400),\n        (\"C\", 100),\n        (\"XC\", 90),\n        (\"L\", 50),\n        (\"XL\", 40),\n        (\"X\", 10),\n        (\"IX\", 9),\n        (\"V\", 5),\n        (\"IV\", 4),\n        (\"I\", 1)\n    ]\n\n    result = \"\"\n    for (roman, value) in roman_numerals:\n        while number >= value:\n            result += roman\n            number -= value\n\n    return result.lower()",
        "test": "assert int_to_mini_roman(19) == 'xix'",
        "num_ids": 1686,
        "indeed": true
    },
    {
        "number": 157,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\n    # Check if the three sides form a right-angled triangle\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False",
        "test": "assert right_angle_triangle(1, 2, 3) == False",
        "num_ids": 1124,
        "indeed": false
    },
    {
        "number": 158,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    \n    max_length = 0\n    max_word = \"\"\n    \n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_length or (unique_chars == max_length and word < max_word):\n            max_length = unique_chars\n            max_word = word\n    \n    return max_word",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 1306,
        "indeed": true
    },
    {
        "number": 159,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                 the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n    \n    Have fun :)\n    \"\"\"\n    if number >= need:\n        return [number + remaining, remaining]\n    else:\n        return [number + need, remaining - need]",
        "test": "assert eat(5, 6, 10) == [11, 4]",
        "num_ids": 2125,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n    \n    # Initialize variables\n    result = 0\n\n    # Iterate through the operator list\n    for i in range(len(operator)):\n        # Check if the operator is an addition (+)\n        if operator[i] == '+':\n            # Add the operands\n            result += operand[i]\n        # Check if the operator is a subtraction (-)\n        elif operator[i] == '-':\n            # Subtract the operands\n            result -= operand[i]\n        # Check if the operator is a multiplication (*)\n        elif operator[i] == '*':\n            # Multiply the operands\n            result *= operand[i]\n        # Check if the operator is a floor division (//)\n        elif operator[i] == '//':\n            # Divide the operands and take the floor\n            result //= operand[i]\n        # Check if the operator is an exponentiation (**)\n        elif operator[i] == '**':\n            # Raise the first operand to the power of the second operand\n            result **= operand[i]\n\n    # Return the result\n    return result",
        "test": "assert do_algebra(['*', '/', '-', '+'], [2, 4, 6, 8]) == 2",
        "num_ids": 2651,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    result = []\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                result.append(s[i].upper())\n            else:\n                result.append(s[i].lower())\n        else:\n            result.append(s[i])\n    if not any(s[i].isalpha() for i in range(len(s))):\n        result = result[::-1]\n    return ''.join(result)\n\nprint(solve(\"1234\"))   # Output: \"4321\"\nprint(solve(\"ab\"))     # Output: \"AB\"\nprint(solve(\"#a@C\"))   # Output: \"#A@c\"",
        "test": "assert solve(\"ab\") == \"AB\"",
        "num_ids": 1066,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    \n    md5 = hashlib.md5(text.encode())\n    return md5.hexdigest()",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
        "num_ids": 830,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        a, b = b, a\n\n    even_digits = []\n    for num in range(a, b + 1):\n        digit = num % 10\n        if digit % 2 == 0:\n            even_digits.append(digit)\n\n    return even_digits\n",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 1290,
        "indeed": false
    }
]