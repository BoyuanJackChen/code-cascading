[
    {
        "number": 0,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False"
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    current_group = []\n    groups = []\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(current_group)\n            current_group = []\n        elif char == ')':\n            groups.append(''.join(current_group))\n            current_group = stack.pop()\n        else:\n            current_group.append(char)\n\n    if current_group:\n        groups.append(''.join(current_group))\n\n    return groups",
        "test": "assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']"
    },
    {
        "number": 2,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part",
        "test": "assert truncate_number(3.5) == 0.5"
    },
    {
        "number": 3,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False",
        "test": "assert below_zero([1, 2, -4, 5]) == True"
    },
    {
        "number": 4,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements\")\n\n    # Calculate the mean of the numbers\n    mean = sum(numbers) / len(numbers)\n\n    # Calculate the MAD for each number in the list\n    mad_list = []\n    for num in numbers:\n        mad_list.append(abs(num - mean))\n\n    # Calculate the average MAD\n    mad = sum(mad_list) / len(mad_list)\n\n    return mad",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0, \"Test failed for mean_absolute_deviation.\""
    },
    {
        "number": 5,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers' \"\"\"\n    # Check if the list is empty\n    if not numbers:\n        return []\n    # Create an empty list to store the result\n    result = []\n    # Iterate over the list and add the first element to the result list\n    result.append(numbers[0])\n    # Iterate over the list from the second element and add the first element to the result list\n    for i in range(1, len(numbers)):\n        result.append(delimeter)\n        result.append(numbers[i])\n    # Return the result list\n    return result",
        "test": "assert intersperse([], 4) == []"
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    def count_levels(level: int, index: int, open_count: int) -> int:\n        if index == len(paren_string):\n            return level\n        if paren_string[index] == '(':\n            open_count += 1\n        elif paren_string[index] == ')':\n            open_count -= 1\n        return count_levels(level + 1, index + 1, open_count)\n\n    levels = []\n    level = count_levels(0, 0, 0)\n    while open_count!= 0:\n        level = count_levels(level + 1, 0, 0)\n        open_count = count_levels(0, 0, open_count + 1)\n    levels.append(level)\n    return levels",
        "test": "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]"
    },
    {
        "number": 7,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]",
        "test": "assert filter_by_substring([], 'a') == []"
    },
    {
        "number": 8,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    \n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    \n    for num in numbers:\n        product_of_numbers *= num\n        \n    return (sum_of_numbers, product_of_numbers)",
        "test": "assert sum_product([]) == (0, 1)"
    },
    {
        "number": 9,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        if numbers[i] > result[-1]:\n            result.append(numbers[i])\n        else:\n            result.append(result[-1])\n    return result",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]"
    },
    {
        "number": 10,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if string == \"\":\n        return \"\"\n    \n    # find longest palindrome suffix\n    max_suffix = \"\"\n    for i in range(len(string)):\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            max_suffix = suffix\n            break\n    \n    # construct the palindrome\n    palindrome = max_suffix + string[string.index(max_suffix):]\n    \n    return palindrome",
        "test": "assert make_palindrome('') == ''"
    },
    {
        "number": 11,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    a_list = list(a)\n    b_list = list(b)\n    xor_list = []\n    for i in range(len(a_list)):\n        xor_list.append(str(int(a_list[i]) ^ int(b_list[i])))\n    return ''.join(xor_list)",
        "test": "assert string_xor('010', '110') == '100'"
    },
    {
        "number": 12,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str",
        "test": "assert longest([]) is None"
    },
    {
        "number": 13,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)",
        "test": "assert greatest_common_divisor(3, 5) == 1"
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string \"\"\"\n    prefixes = []\n    for i in range(len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes",
        "test": "assert all_prefixes('abc') == ['a', 'ab', 'abc']"
    },
    {
        "number": 15,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive. \"\"\"\n    sequence = \"\"\n    for i in range(n+1):\n        sequence += str(i) + \" \"\n    return sequence[:-1]  # Remove trailing space",
        "test": "assert string_sequence(0) == '0'"
    },
    {
        "number": 16,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    distinct_chars = set()\n    for char in string.lower():\n        distinct_chars.add(char)\n    return len(distinct_chars)",
        "test": "assert count_distinct_characters('xyzXYZ') == 3"
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats",
        "test": "assert parse_music('o o|.|.| o|.| o') == [4, 2, 1, 1, 1, 4, 4]"
    },
    {
        "number": 18,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases. \"\"\"\n\n    if substring in string:\n        return string.count(substring)\n    else:\n        return 0",
        "test": "assert how_many_times('', 'a') == 0"
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n    numbers = list(numbers.split())\n    numbers = [n.replace(\",\", \"\") for n in numbers]\n    numbers = [int(n) for n in numbers]\n\n    numbers.sort()\n\n    return \" \".join(str(n) for n in numbers)",
        "test": "assert sort_numbers('zero six two eight four seven nine') == 'zero two four seven eight nine six'"
    },
    {
        "number": 20,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two elements.\")\n\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # Get the middle two numbers\n    mid_num1 = numbers[len(numbers)//2]\n    mid_num2 = numbers[-(len(numbers)//2)+1]\n\n    # Calculate the difference between the two closest numbers\n    diff1 = abs(mid_num1 - numbers[0])\n    diff2 = abs(mid_num2 - numbers[-1])\n\n    # Choose the closer number\n    if diff1 < diff2:\n        return numbers[0], numbers[1]\n    else:\n        return numbers[-1], numbers[-2]",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)"
    },
    {
        "number": 21,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_value = min(numbers)\n    max_value = max(numbers)\n    scaled_numbers = [(number - min_value) / (max_value - min_value) for number in numbers]\n    return scaled_numbers",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]"
    },
    {
        "number": 22,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n\n    return [x for x in values if isinstance(x, int)]",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]"
    },
    {
        "number": 23,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)",
        "test": "assert strlen('') == 0"
    },
    {
        "number": 24,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n    return max(divisors)",
        "test": "assert largest_divisor(15) == 5"
    },
    {
        "number": 25,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    factors = []\n    while n > 1:\n        for i in range(2, n+1):\n            if n % i == 0:\n                factors.append(i)\n                n //= i\n                break\n\n    return factors",
        "test": "assert factorize(8) == [2, 2, 2]"
    },
    {
        "number": 26,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    unique_numbers = []\n    for num in numbers:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    return unique_numbers",
        "test": "assert remove_duplicates([1, 2, 2, 3, 4]) == [1, 2, 3, 4]"
    },
    {
        "number": 27,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()",
        "test": "assert flip_case('Hello') == 'hELLO'"
    },
    {
        "number": 28,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)",
        "test": "assert concatenate([]) == ''"
    },
    {
        "number": 29,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix. \"\"\"\n    return [s for s in strings if s.startswith(prefix)]",
        "test": "assert filter_by_prefix([], 'a') == []"
    },
    {
        "number": 30,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]"
    },
    {
        "number": 31,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert is_prime(6) == False"
    },
    {
        "number": 32,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x**2 +.... xs[n] * x**n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    xs = sorted(xs, reverse=True)  # sort in descending order\n    if len(xs) % 2 == 1:\n        return None  # list xs has odd number of coefficients\n    if xs[0] == 0:\n        return None  # list xs has a non zero coefficient\n    for i in range(len(xs)):\n        x = i / (len(xs) - 1)  # find x such that coeffs[i] * x^i = 0\n        if poly(xs, x) == 0:\n            return x\n    return None  # no zero point found",
        "test": "assert find_zero([-6, 11, -6, 1]) == 1.0"
    },
    {
        "number": 33,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    sorted_l = sorted(l)\n    result = []\n    for i in range(len(l)):\n        if i % 3!= 0:\n            result.append(sorted_l[i])\n        else:\n            result.append(l[i])\n    return result",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3]"
    },
    {
        "number": 34,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def unique(l: list) -> list:\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(list(set(l)))",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]"
    },
    {
        "number": 35,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    return max(l)",
        "test": "assert max_element([1, 2, 3]) == 3"
    },
    {
        "number": 36,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i)[-1] == '7':\n                count += 1\n    return count",
        "test": "assert fizz_buzz(50) == 0"
    },
    {
        "number": 37,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    # Create a new list l' with the same length as l\n    l_prime = [0] * len(l)\n\n    # Copy the values from l to l' in the odd indicies\n    for i in range(0, len(l), 2):\n        l_prime[i] = l[i]\n\n    # Copy the values from l to l' in the even indicies\n    for i in range(1, len(l), 2):\n        l_prime[i] = l[i]\n\n    # Sort the values in the even indicies\n    for i in range(0, len(l), 2):\n        for j in range(i + 2, len(l), 2):\n            if l_prime[i] < l_prime[j]:\n                l_prime[i], l_prime[j] = l_prime[j], l_prime[i]\n\n    return l_prime",
        "test": "assert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]"
    },
    {
        "number": 38,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # join the groups into a single string.\n    return \"\".join(groups)\n",
        "test": "assert decode_cyclic(\"\") == \"\""
    },
    {
        "number": 39,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_prime(n: int) -> bool:\n    \"\"\"\n    Checks if a number is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        a, b = 2, 3\n        count = 3\n        while count < n:\n            a, b = b, a + b\n            count += 1\n        if is_prime(b):\n            return b\n        else:\n            return prime_fib(n - 1) + 1\n",
        "test": "assert prime_fib(1) == 2"
    },
    {
        "number": 40,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    # create a set to store unique elements of the list\n    unique_elements = set(l)\n\n    # check if there are three elements in the set that sum to zero\n    if len(unique_elements) == 3:\n        if unique_elements.issubset({0}):\n            return True\n        else:\n            return False\n    else:\n        return False",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False"
    },
    {
        "number": 41,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    left_cars = [0] * n\n    right_cars = [0] * n\n\n    for i in range(n):\n        left_cars[i] = (i + 1) * 1000\n        right_cars[i] = (n - i) * 1000\n\n    left_cars.sort()\n    right_cars.sort(reverse=True)\n\n    collisions = 0\n    left_index = 0\n    right_index = n - 1\n\n    while left_index < n and right_index >= 0:\n        if left_cars[left_index] < right_cars[right_index]:\n            left_index += 1\n        elif left_cars[left_index] > right_cars[right_index]:\n            right_index -= 1\n            collisions += 1\n        else:\n            left_index += 1\n            right_index -= 1\n\n    return collisions\n",
        "test": "assert car_race_collision(1) == 0, \"car_race_collision(1) should return 0\""
    },
    {
        "number": 42,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x + 1 for x in l]",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]"
    },
    {
        "number": 43,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for num in l:\n        complement = -num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False",
        "test": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False"
    },
    {
        "number": 44,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    if base < 2 or base > 16:\n        raise ValueError(\"Base should be between 2 and 16\")\n\n    if base == 10:\n        return str(x)\n\n    result = []\n    while x:\n        remainder = x % base\n        result.append(str(remainder))\n        x = x // base\n\n    result.reverse()\n    return ''.join(result)\n",
        "test": "assert change_base(8, 3) == '22'"
    },
    {
        "number": 45,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n",
        "test": "assert triangle_area(5, 3) == 7.5, \"The area of a triangle with base of 5 and height of 3 should be 7.5\""
    },
    {
        "number": 46,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        fib_n_2 = fib4(n-1)\n        fib_n_3 = fib4(n-2)\n        fib_n_4 = fib4(n-3)\n        fib_n_5 = fib4(n-4)\n        return fib_n_2 + fib_n_3 + fib_n_4 + fib_n_5",
        "test": "assert fib4(0) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]",
        "test": "assert median([3, 1, 2, 4, 5]) == 3"
    },
    {
        "number": 48,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    # Remove whitespace and convert to lowercase\n    text = text.replace(\" \", \"\").lower()\n\n    # Check if the string is equal to its reverse\n    return text == text[::-1]",
        "test": "assert is_palindrome('') == True"
    },
    {
        "number": 49,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return (2 ** n) % p",
        "test": "assert modp(3, 5) == 3"
    },
    {
        "number": 50,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) - 5) % 26 + ord(\"a\")) for ch in s])",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hello\""
    },
    {
        "number": 51,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_vowels(text):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    new_text = ''\n    for char in text:\n        if char not in vowels:\n            new_text += char\n    return new_text",
        "test": "assert remove_vowels('') == ''"
    },
    {
        "number": 52,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"\n    Returns True if all numbers in the list l are below threshold t.\n    \"\"\"\n    return all(num < t for num in l)",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True"
    },
    {
        "number": 53,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y",
        "test": "assert add(2, 3) == 5, \"Test 1 failed: Expected 5, got {}\".format(add(2, 3))"
    },
    {
        "number": 54,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    \n    if len(s0)!= len(s1):\n        return False\n    \n    for char in s0:\n        if char not in s1:\n            return False\n    \n    return True\n",
        "test": "assert same_chars('abcd', 'dddddddabc') == True"
    },
    {
        "number": 55,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "test": "assert fib(10) == 55"
    },
    {
        "number": 56,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "test": "assert correct_bracketing(\"<\") == False"
    },
    {
        "number": 57,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # Check if all elements in the list are unique\n    if len(set(l))!= len(l):\n        return False\n\n    # If the list contains an element that is not the minimum or maximum, it is not a monotonic sequence\n    if min(l)!= l[0] or max(l)!= l[-1]:\n        return False\n\n    # Check if all adjacent elements are in the correct order\n    for i in range(len(l) - 1):\n        if l[i] >= l[i + 1]:\n            return False\n        if l[i] < l[i + 1]:\n            return True\n\n    # If we have made it through the loop without returning True, the list is a monotonic sequence\n    return True",
        "test": "assert monotonic([1, 2, 4, 20]) == True, \"Test failed: [1, 2, 4, 20] should be True.\""
    },
    {
        "number": 58,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    l1.sort()\n    l2.sort()\n    i, j = 0, 0\n    common_elements = []\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            common_elements.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n    return common_elements",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]"
    },
    {
        "number": 59,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_prime(num: int) -> bool:\n    \"\"\"Return True if the number is prime, False otherwise.\"\"\"\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    max_prime_factor = 1\n    for i in range(2, n + 1):\n        if is_prime(i) and n % i == 0:\n            max_prime_factor = i\n            n //= i\n    return max_prime_factor",
        "test": "assert largest_prime_factor(13195) == 29"
    },
    {
        "number": 60,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    sum_ = 0\n    for i in range(1, n+1):\n        sum_ += i\n    return sum_",
        "test": "assert sum_to_n(30) == 465"
    },
    {
        "number": 61,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(\")\")\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "test": "assert correct_bracketing(\"(\") == False, \"Test 1 failed\""
    },
    {
        "number": 62,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    n = len(xs)\n    if n == 1:\n        return [0]\n    else:\n        res = []\n        for i in range(1, n):\n            res.append(xs[i] * i)\n        return res",
        "test": "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]"
    },
    {
        "number": 63,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib_n_minus_1 = fibfib(n-1)\n        fib_n_minus_2 = fibfib(n-2)\n        fib_n_minus_3 = fibfib(n-3)\n        return fib_n_minus_1 + fib_n_minus_2 + fib_n_minus_3",
        "test": "assert fibfib(0) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    vowels = \"aeiouAEIOU\"\n    count = 0\n\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n\n            if i == len(s) - 1 and s[i] in \"yAEIOU\":\n                count -= 1\n\n    return count\n",
        "test": "assert vowels_count(\"abcde\") == 2"
    },
    {
        "number": 65,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    # Convert x to string\n    x_str = str(x)\n    \n    # Get the number of digits in x\n    num_digits = len(x_str)\n    \n    # Check if shift > number of digits\n    if shift > num_digits:\n        # If shift > number of digits, reverse the digits and shift by num_digits - shift\n        x_str = x_str[::-1]\n        shift -= num_digits\n    \n    # Shift the digits right by shift\n    for i in range(shift):\n        x_str = x_str[1:] + x_str[0]\n    \n    # If shift < 0, shift the digits left by absolute value of shift\n    if shift < 0:\n        for i in range(abs(shift)):\n            x_str = x_str[1:] + x_str[0]\n    \n    # Convert x_str to integer\n    x_new = int(x_str)\n    \n    # Return x_new as string\n    return str(x_new)",
        "test": "assert circular_shift(12, 2) == \"12\""
    },
    {
        "number": 66,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum",
        "test": "assert digitSum(\"\") == 0"
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    s = s.split()\n    oranges = int(s[1])\n    apples = int(s[0])\n    mangoes = n - oranges - apples\n    return mangoes",
        "test": "assert fruit_distribution(\"0 apples and 1 oranges\",3) == 2"
    },
    {
        "number": 68,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    \n    # Initialize variables\n    smallest_value = float('inf')\n    smallest_index = -1\n    even_values = []\n\n    # Iterate through the array\n    for index, value in enumerate(arr):\n        # Check if the value is even\n        if value % 2 == 0:\n            # Check if the value is smaller than the current smallest value\n            if value < smallest_value:\n                # Update the smallest value and its index\n                smallest_value = value\n                smallest_index = index\n            # Check if the value is already in the list\n            if value not in even_values:\n                # Add the value to the list\n                even_values.append(value)\n\n    # Return the plucked value and its index\n    if smallest_index == -1:\n        return []\n    else:\n        return [smallest_value, smallest_index]",
        "test": "assert pluck([4,2,3]) == [2, 1]"
    },
    {
        "number": 69,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\n    # Initialize variables\n    max_num = 0\n    max_freq = 0\n\n    # Iterate through the list\n    for num in lst:\n        # Check if the number is greater than zero\n        if num > 0:\n            # Check if the number is greater than the current max number and has a frequency greater than or equal to the number itself\n            if lst.count(num) >= num:\n                if num > max_num:\n                    max_num = num\n                    max_freq = lst.count(num)\n\n    # Check if max_num is still 0, which means no such number exists\n    if max_num == 0:\n        return -1\n    else:\n        return max_num",
        "test": "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3"
    },
    {
        "number": 70,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if not lst:\n        return []\n\n    smallest = min(lst)\n    largest = max(lst)\n    return [largest, smallest] + strange_sort_list(filter(lambda x: x!= smallest and x!= largest, lst))",
        "test": "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]"
    },
    {
        "number": 71,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    \n    # Check if the given sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter of the triangle\n        s = (a + b + c) / 2\n        # Calculate the area of the triangle\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Round the area to 2 decimal points\n        area = round(area, 2)\n        return area\n    else:\n        return -1",
        "test": "assert triangle_area(1, 2, 10) == -1"
    },
    {
        "number": 72,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n\n    def is_palindrome(lst):\n        return str(lst) == str(lst)[::-1]\n\n    total = sum(q)\n    if is_palindrome(q) and total <= w:\n        return True\n    else:\n        return False",
        "test": "assert will_it_fly([1, 2], 5) == False # 1+2 is less than the maximum possible weight, but it's unbalanced."
    },
    {
        "number": 73,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    # initialize a dictionary to store the number of changes needed for each element\n    counts = {}\n\n    # count the number of changes needed for each element\n    for i in range(len(arr)):\n        if arr[i] not in counts:\n            counts[arr[i]] = 0\n        counts[arr[i]] += 1\n\n    # find the smallest number of changes needed to make the array palindromic\n    min_changes = float('inf')\n    for i in range(max(arr) + 1):\n        for j in range(max(arr) + 1):\n            # check if the number of changes needed to make the array palindromic is smaller than the current minimum\n            if counts[i] + counts[j] <= min_changes:\n                min_changes = counts[i] + counts[j]\n\n    return min_changes",
        "test": "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1, \"Incorrect output for smallest_change([1, 2, 3, 4, 3, 2, 2])\""
    },
    {
        "number": 74,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    total_count = 0\n    for i in range(len(lst1)):\n        if len(lst1[i]) < len(lst2[i]):\n            total_count += len(lst1[i])\n        else:\n            total_count += len(lst2[i])\n\n    if total_count < total_count//2:\n        return lst1\n    else:\n        return lst2",
        "test": "assert total_match([], []) == []"
    },
    {
        "number": 75,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        if a % 2 == 0:\n            return False\n        elif a % 3 == 0:\n            return True\n        else:\n            for i in range(5, int(a**0.5)+1, 6):\n                if a % i == 0:\n                    return False\n            return True\n    else:\n        return False",
        "test": "assert is_multiply_prime(20) == False, \"is_multiply_prime(20) should return False\""
    },
    {
        "number": 76,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_simple_power(x, n):\n    \"\"\"\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    \n    if n == 1:\n        return True\n    else:\n        if x == 1:\n            return False\n        elif n % x == 0:\n            return is_simple_power(x, n // x)\n        else:\n            return False",
        "test": "assert is_simple_power(2, 2) == True"
    },
    {
        "number": 77,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a < 0:\n        return False\n    else:\n        for i in range(1, int(a**0.5)+1):\n            if a % i == 0:\n                return False\n        return True",
        "test": "assert iscube(2) == False"
    },
    {
        "number": 78,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for digit in num:\n        if is_prime(int(digit, 16)):\n            count += 1\n\n    return count",
        "test": "assert hex_key(\"AB\") == 1"
    },
    {
        "number": 79,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n\n    return \"db\" + binary + \"db\"\n",
        "test": "assert decimal_to_binary(15) == \"db1111db\""
    },
    {
        "number": 80,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    # Remove non-numeric characters from the string\n    s = ''.join(filter(str.isdigit, s))\n    \n    # Check if the length of the string is at least 3\n    if len(s) < 3:\n        return False\n    \n    # Initialize variables\n    slow = s\n    fast = s\n    while fast!= '1':\n        # Move the slow pointer to the next digit\n        slow = str(int(slow) // 10)\n        \n        # Move the fast pointer to the next digit\n        if len(fast) < 3:\n            return False\n        fast = str(int(fast) // 10)\n        \n        # Calculate the sum of the digits at the slow and fast pointers\n        sum_of_digits = int(slow) + int(fast)\n        \n        # Convert the sum of digits to a string\n        sum_of_digits_str = str(sum_of_digits)\n        \n        # Move the slow pointer to the next digit again\n        slow = str(int(slow) * 10)\n        \n        # Append the sum of digits to the fast pointer\n        fast += sum_of_digits_str\n        \n    # If the fast pointer reaches 1, the string is happy\n    return True",
        "test": "assert is_happy(\"a\") == False"
    },
    {
        "number": 81,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n             4.0                A+\n           > 3.7                A \n           > 3.3                A- \n           > 3.0                B+\n           > 2.7                B \n           > 2.3                B-\n           > 2.0                C+\n           > 1.7                C\n           > 1.3                C-\n           > 1.0                D+ \n           > 0.7                D \n           > 0.0                D-\n             0.0                E\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append(\"A+\")\n        elif grade > 3.7:\n            letter_grades.append(\"A\")\n        elif grade > 3.3:\n            letter_grades.append(\"A-\")\n        elif grade > 3.0:\n            letter_grades.append(\"B+\")\n        elif grade > 2.7:\n            letter_grades.append(\"B\")\n        elif grade > 2.3:\n            letter_grades.append(\"B-\")\n        elif grade > 2.0:\n            letter_grades.append(\"C+\")\n        elif grade > 1.7:\n            letter_grades.append(\"C\")\n        elif grade > 1.3:\n            letter_grades.append(\"C-\")\n        elif grade > 1.0:\n            letter_grades.append(\"D+\")\n        elif grade > 0.7:\n            letter_grades.append(\"D\")\n        else:\n            letter_grades.append(\"D-\")\n        if grade == 0.0:\n            letter_grades.append(\"E\")\n\n    return letter_grades",
        "test": "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']"
    },
    {
        "number": 82,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    length = len(string)\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True",
        "test": "assert prime_length('abcdcba') == True"
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1':\n            count += 1\n        else:\n            break\n    return count",
        "test": "assert starts_one_ends(1) == 1"
    },
    {
        "number": 84,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n                 Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    total = 0\n    while N > 0:\n        total += N % 10\n        N //= 10\n    return str(total)",
        "test": "assert solve(1000) == \"1\""
    },
    {
        "number": 85,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0 and i % 2 == 1:\n            count += lst[i]\n    return count",
        "test": "assert add([4, 2, 6, 7]) == 2"
    },
    {
        "number": 86,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n\n    # Split the string into words\n    words = s.split()\n\n    # Iterate through each word in the list\n    for i in range(len(words)):\n        # Get the characters in the current word\n        word = words[i]\n\n        # Create a new word with arranged characters\n        new_word = ''.join(sorted(word))\n\n        # Replace the original word with the new word\n        words[i] = new_word\n\n    # Join the words back into a string and return it\n    return''.join(words)",
        "test": "assert anti_shuffle('hello') == 'ehllo'"
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            result.append((i, row.index(x)))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n",
        "test": "assert get_row(["
    },
    {
        "number": 88,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n\n        mid = len(arr) // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n\n        return merge(left, right)\n\n    def merge(left, right):\n        result = []\n        i = j = 0\n\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n\n        result += left[i:]\n        result += right[j:]\n\n        return result\n\n    sorted_array = merge_sort(array)\n    return sorted_array",
        "test": "assert sort_array([]) == []"
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    encrypted_string = \"\"\n    for char in s:\n        if char.isupper():\n            rotated_char = chr(((ord(char) - 65) // 2) * 2 + 65)\n        else:\n            rotated_char = chr(((ord(char) - 97) // 2) * 2 + 97)\n        encrypted_string += rotated_char\n    return encrypted_string",
        "test": "assert encrypt('asdfghjkl') == 'ewhjklnop', \"The function should return 'ewhjklnop' for 'asdfghjkl'\""
    },
    {
        "number": 90,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \"\"\"\n    if not lst:\n        return None\n    else:\n        for i in range(len(lst)):\n            for j in range(i+1, len(lst)):\n                if lst[i] > lst[j]:\n                    lst[i], lst[j] = lst[j], lst[i]\n        return lst[1]",
        "test": "assert next_smallest([1, 2, 3, 4, 5]) == 2"
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    boredom_count = 0\n    for sentence in S.split('. '):\n        if sentence.startswith(\"I\"):\n            boredom_count += 1\n    return boredom_count",
        "test": "assert is_bored(\"Hello world\") == 0"
    },
    {
        "number": 92,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n\n    return any(isinstance(num, int) for num in [x, y, z]) and (x + y == z or x + z == y or y + z == x)",
        "test": "assert any_int(3, 2, 2) == False"
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'Ths kys a msg'\n    \"\"\"\n\n    vowels = 'aeiouAEIOU'\n    vowel_mapping = {\n        'a': 'b', 'e': 'f', 'i': 'j', 'o': 'p', 'u': 'v',\n        'A': 'B', 'E': 'F', 'I': 'J', 'O': 'P', 'U': 'V'\n    }\n\n    encoded = ''\n    for letter in message:\n        if letter.isalpha():\n            if letter in vowels:\n                index = vowels.index(letter)\n                index_ahead = (index + 2) % len(vowels)\n                encoded += vowel_mapping[vowels[index_ahead]]\n            else:\n                encoded += letter.swapcase()\n\n    return encoded",
        "test": "assert encode('This is a message') == 'thks ks c mgsscgg'"
    },
    {
        "number": 94,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef largest_prime(lst):\n    largest = float('-inf')\n    for num in lst:\n        if is_prime(num):\n            largest = max(largest, num)\n    return largest\n\ndef sum_of_digits(num):\n    return sum(int(d) for d in str(num))\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    largest = largest_prime(lst)\n    return sum_of_digits(largest)",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10"
    },
    {
        "number": 95,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    \n    # check if dictionary is empty\n    if len(dict) == 0:\n        return False\n    \n    # iterate over dictionary\n    for key in dict:\n        # check if key is string in lower case\n        if type(key)!= str:\n            return False\n        elif key.islower():\n            continue\n        # check if key is string in upper case\n        elif key.isupper():\n            return False\n    \n    # if no errors found, return True\n    return True",
        "test": "assert check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) == False"
    },
    {
        "number": 96,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is a prime number, otherwise return False.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    if n < 0:\n        return []\n    prime_numbers = []\n    for i in range(2, n + 1):\n        if is_prime(i) and i < n:\n            prime_numbers.append(i)\n    return prime_numbers",
        "test": "assert count_up_to(5) == [2,3]"
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Convert the input numbers to lists of digits\n    a_digits = [int(digit) for digit in str(a)]\n    b_digits = [int(digit) for digit in str(b)]\n    # Calculate the product of the two lists of digits\n    product = 0\n    for i in range(len(a_digits)):\n        product += a_digits[i] * b_digits[i]\n    # Return the product\n    return product",
        "test": "assert multiply(19, 28) == 72"
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    \n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and i % 2 == 0:\n            count += 1\n    \n    return count",
        "test": "assert count_upper('abcdefg') == 0"
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    num = float(value)\n    if abs(num - int(num)) <= 0.5:\n        return int(num)\n    else:\n        return int(num) + 1 if num > 0 else int(num) - 1",
        "test": "assert closest_integer(\"10\") == 10"
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    def next_odd_number(n):\n        return (n + 1) * 2\n    \n    def next_even_number(n):\n        return (n + 2) * 2\n    \n    pile = [n]\n    for i in range(1, n):\n        pile.append(next_odd_number(i) if (i + 1) % 2!= 0 else next_even_number(i))\n        \n    return pile",
        "test": "assert make_a_pile(4) == [3, 5, 7, 9]"
    },
    {
        "number": 101,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # convert string to list of words\n    words = s.split(\", \")\n    # remove extra whitespace and convert to list of words\n    words = [word.strip() for word in words]\n    return words",
        "test": "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"], \"Test 2 failed\""
    },
    {
        "number": 102,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # initialize variables\n    max_even = 0\n    max_num = -1\n    \n    # loop through range [x, y]\n    for i in range(x, y+1):\n        # if the number is even and greater than max_even, update max_even and max_num\n        if i%2 == 0 and i > max_even:\n            max_even = i\n            max_num = i\n            \n    # return max_num\n    return max_num",
        "test": "assert choose_num(12, 15) == 14, \"choose_num(12, 15) == 14\""
    },
    {
        "number": 103,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    # check if n is greater than m\n    if n > m:\n        return -1\n    # initialize variables\n    sum_range = 0\n    count = 0\n    # iterate through range from n to m\n    for i in range(n, m+1):\n        # add to sum and increment count\n        sum_range += i\n        count += 1\n    # compute average and round to nearest integer\n    avg = round(sum_range / count)\n    # convert to binary and return as string\n    return \"0b{:b}\".format(avg)",
        "test": "assert rounded_avg(7, 5) == -1"
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    def get_unique_digits(x):\n        \"\"\"Return a list of unique digits from the given integer.\"\"\"\n        digits = [int(digit) for digit in str(x)]\n        return list(set(digits))\n\n    def has_even_digit(digits):\n        \"\"\"Return True if any of the digits in the list has an even digit.\"\"\"\n        for digit in digits:\n            if digit % 2 == 0:\n                return True\n        return False\n\n    unique_digits_list = []\n    for num in x:\n        unique_digits_list += get_unique_digits(num)\n\n    unique_digits_list = sorted(list(set(unique_digits_list)))\n    return unique_digits_list",
        "test": "assert unique_digits([152, 323, 1422, 10]) == []"
    },
    {
        "number": 105,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n             -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n             -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n             -> sort arr -> [-1, 1, 55]\n             -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    # Define the mapping for the digits\n    mapping = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n\n    # Define a function to check if a number is between 1 and 9\n    def is_valid_number(num):\n        if num >= 1 and num <= 9:\n            return True\n        return False\n\n    # Filter the array to get only valid numbers\n    valid_numbers = list(filter(is_valid_number, arr))\n\n    # Sort the valid numbers in ascending order\n    sorted_numbers = sorted(valid_numbers)\n\n    # Reverse the sorted numbers\n    reversed_numbers = sorted_numbers[::-1]\n\n    # Map the reversed numbers to their corresponding names\n    mapped_numbers = [mapping[num] for num in reversed_numbers]\n\n    # Return the mapped numbers\n    return mapped_numbers",
        "test": "assert by_length([]) == []"
    },
    {
        "number": 106,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    factorial_list = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial_list.append(factorial(i))\n        else:\n            factorial_list.append(sum(range(1, i+1)))\n    return factorial_list\n\ndef factorial(n):\n    \"\"\" Implement the function factorial that takes an integer n as a parameter,\n    and returns the factorial of n (n * (n-1) *... * 1).\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)",
        "test": "assert f(5) == [1, 2, 6, 24, 15]"
    },
    {
        "number": 107,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    # Initialize variables to count even and odd palindromes\n    even_count = 0\n    odd_count = 0\n\n    # Loop through integers from 1 to n\n    for i in range(1, n+1):\n        # Convert integer to string and reverse it\n        reversed_string = str(i)[::-1]\n\n        # Check if the reversed string is equal to the original string\n        if i == int(reversed_string):\n            # If both strings are equal, it's an even palindrome\n            if int(reversed_string) % 2 == 0:\n                even_count += 1\n            # If only one string is equal, it's an odd palindrome\n            else:\n                odd_count += 1\n\n    # Return the tuple with the count of even and odd palindromes\n    return (even_count, odd_count)",
        "test": "assert even_odd_palindrome(12) == (4, 6)"
    },
    {
        "number": 108,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    def sum_of_digits(num):\n        \"\"\"\n        Return the sum of digits in the given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n    \n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count",
        "test": "assert count_nums([]) == 0"
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    \n    if len(arr) == 0:\n        return True\n    \n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    \n    if arr[len(arr)-1] > arr[len(arr)-2]:\n        return True\n    \n    return move_one_ball(arr[0:len(arr)-1])",
        "test": "assert move_one_ball([3, 5, 4, 1, 2]) == False"
    },
    {
        "number": 110,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\n    # Check if both lists are of equal length\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n\n    # Check if both lists contain only integers\n    if not all(isinstance(num, int) for num in lst1) or not all(isinstance(num, int) for num in lst2):\n        return \"NO\"\n\n    # Check if all elements of lst1 are even\n    if not all(num % 2 == 0 for num in lst1):\n        return \"NO\"\n\n    # Check if there is only one element in lst2 that is even\n    if len(set(lst2) - set([num for num in lst1 if num % 2 == 0])) > 1:\n        return \"NO\"\n\n    # Check if the elements of lst1 are in the correct order\n    if sorted(lst1)!= lst1:\n        return \"NO\"\n\n    # Check if there are more than one element in lst1 that is even and the rest are odd\n    if len(set(lst1) - set([num for num in lst1 if num % 2 == 0])) > 1 and any(num % 2!= 0 for num in lst1):\n        return \"NO\"\n\n    # If all conditions are met, return \"YES\"\n    return \"YES\"",
        "test": "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\""
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \"\"\"\n    freq = {}\n    for letter in test.split():\n        if letter in freq:\n            freq[letter] += 1\n        else:\n            freq[letter] = 1\n    max_freq = 0\n    max_key = None\n    for key in freq:\n        if freq[key] > max_freq:\n            max_freq = freq[key]\n            max_key = key\n    result = {max_key: max_freq}\n    for key in freq:\n        if freq[key]!= max_freq:\n            result[key] = freq[key]\n    return result",
        "test": "assert histogram('a b b a') == {'a': 2, 'b': 2}"
    },
    {
        "number": 112,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # convert c to a set so that we can check for membership in O(1) time complexity\n    char_set = set(c)\n\n    # create an empty string to store the characters that we want to keep\n    result = \"\"\n\n    # iterate through s and append the characters that are not in c to the result string\n    for char in s:\n        if char not in char_set:\n            result += char\n\n    # check if the result string is a palindrome\n    is_palindrome = True\n    for i in range(len(result)//2):\n        if result[i]!= result[-i-1]:\n            is_palindrome = False\n            break\n\n    # return the result string and the result of the palindrome check\n    return (result, is_palindrome)\n",
        "test": "assert reverse_delete(\"abcde\", \"ae\") == (\"bcd\", False)"
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\n    # Initialize an empty list to hold the output\n    result = []\n\n    # Loop through each string in the input list\n    for i, s in enumerate(lst):\n\n        # Initialize a counter variable to keep track of the number of odd elements\n        count = 0\n\n        # Loop through each character in the string\n        for c in s:\n\n            # If the character is an odd digit (i.e., a number from 1 to 9), increment the counter\n            if int(c) % 2!= 0:\n                count += 1\n\n        # Append the output to the result list, formatted as specified\n        result.append(f\"the number of odd elements {count}n the str{i}ng {i} of the {i}nput.\")\n\n    # Return the final result list\n    return result",
        "test": "assert odd_count(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]"
    },
    {
        "number": 114,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    # Initialize the minimum sum to infinity\n    min_sum = float('inf')\n\n    # Initialize the current sum to 0\n    current_sum = 0\n\n    # Iterate through each element of the array\n    for num in nums:\n\n        # Add the current element to the current sum\n        current_sum += num\n\n        # If the current sum is less than the minimum sum, update the minimum sum\n        if current_sum < min_sum:\n            min_sum = current_sum\n\n        # If the current sum is zero, reset the current sum to the current element\n        if current_sum == 0:\n            current_sum = num\n\n    # Return the minimum sum found\n    return min_sum",
        "test": "assert minSubArraySum([-1, -2, -3]) == -6"
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_fill(grid, capacity):\n    import math\n\n    def dfs(grid, row, col, bucket_capacity):\n        if col == len(grid[row]):\n            return 0\n        if grid[row][col] == 1:\n            bucket_capacity -= 1\n            filled_cells = dfs(grid, row, col + 1, bucket_capacity)\n            bucket_capacity += 1\n            return filled_cells + 1\n        else:\n            return dfs(grid, row, col + 1, bucket_capacity)\n\n    filled_cells = 0\n    for row in grid:\n        filled_cells = max(filled_cells, dfs(grid, 0, 0, capacity))\n\n    return filled_cells",
        "test": "assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5"
    },
    {
        "number": 116,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def count_ones(n):\n        count = 0\n        while n > 0:\n            count += n & 1\n            n >>= 1\n        return count\n\n    arr.sort(key=lambda x: (count_ones(x), x))\n    return arr",
        "test": "assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]"
    },
    {
        "number": 117,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    \n    # Check if the string is empty\n    if len(s) == 0:\n        return []\n    \n    # Split the string into words\n    words = s.split()\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate through each word in the list\n    for word in words:\n        # Check if the word has exactly n consonants\n        if sum(1 for c in word if c.isalpha() and c.lower() not in \"aeiou\") == n:\n            # If the word is not already in the result, add it to the result list\n            if word not in result:\n                result.append(word)\n    \n    # Sort the result list in ascending order based on the original order of the words\n    result.sort()\n    \n    return result",
        "test": "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]"
    },
    {
        "number": 118,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n    \n    You may assume that the given string contains English letter only.\n    \n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = \"AEIOUaeiou\"\n    vowel_set = set(vowels)\n    vowel_list = list(vowel_set)\n    \n    # Find the first vowel in the word\n    first_vowel = None\n    for i, char in enumerate(word):\n        if char.lower() in vowels:\n            first_vowel = char.lower()\n            break\n    \n    # Check if there's any vowel in the word after the first vowel\n    if first_vowel:\n        for i, char in enumerate(word[::-1]):\n            if char.lower() in vowels:\n                if char.lower() == first_vowel:\n                    break\n                else:\n                    first_vowel = char.lower()\n                    break\n    \n    # Check if there's any vowel in the word before the first vowel\n    if first_vowel:\n        for i, char in enumerate(word):\n            if char.lower() in vowels:\n                if char.lower() == first_vowel:\n                    break\n                else:\n                    first_vowel = char.lower()\n                    break\n    \n    # Check if there's any vowel in the word between the first and second vowels\n    if first_vowel:\n        for i, char in enumerate(word[vowel_list.index(first_vowel):]):\n            if char.lower() in vowels:\n                break\n        second_vowel = char.lower()\n    else:\n        second_vowel = \"\"\n    \n    if first_vowel and second_vowel:\n        return second_vowel\n    else:\n        return \"\"",
        "test": "assert get_closest_vowel(\"yogurt\") == \"u\""
    },
    {
        "number": 119,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    # helper function to check if a given string is balanced\n    def is_balanced(s):\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n\n    # create a list of tuples (string, is_good)\n    pairs = [(s1 + s2, is_balanced(s1 + s2)) for s1 in lst for s2 in lst if s1!= s2]\n\n    # sort the pairs by the length of the strings\n    pairs.sort(key=lambda x: len(x[0]))\n\n    # iterate over the pairs and return the first one that is good\n    for pair in pairs:\n        if pair[1]:\n            return 'Yes'\n\n    return 'No'",
        "test": "assert match_parens([')', ')']) == 'No'"
    },
    {
        "number": 120,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # sort the array in descending order\n    arr.sort(reverse=True)\n\n    # return the maximum k elements\n    return arr[:k]\n",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]"
    },
    {
        "number": 121,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 0\n    \"\"\"\n    sum_even_odds = 0\n    for i in range(0, len(lst), 2):\n        sum_even_odds += lst[i]\n    return sum_even_odds",
        "test": "assert solution([5, 8, 7, 1]) == 12"
    },
    {
        "number": 122,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n    def sum_with_two_digits(arr, k):\n        \"\"\"\n        Helper function to sum the elements with at most two digits from the first k elements of arr.\n        \"\"\"\n        sum = 0\n        for i in range(k):\n            sum += arr[i] // 10 * 10 + arr[i] % 10\n        return sum\n\n    if len(arr) < k:\n        raise ValueError(\"k must be less than or equal to the length of arr\")\n\n    return sum_with_two_digits(arr, k)\n",
        "test": "assert add_elements([1,2,3,4], 4) == 10"
    },
    {
        "number": 123,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    def collatz(n):\n        if n == 1:\n            return [1]\n        elif n % 2 == 0:\n            return [n] + collatz(n // 2)\n        else:\n            return [n] + collatz(3 * n + 1)\n\n    odd_collatz_list = []\n    for num in collatz(n):\n        if num % 2 == 1:\n            odd_collatz_list.append(num)\n\n    odd_collatz_list.sort()\n    return odd_collatz_list",
        "test": "assert get_odd_collatz(5) == [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5."
    },
    {
        "number": 124,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def valid_date(date):\n    \"\"\"\n    This function takes a date string as input and returns True if the date is valid, otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n\n    # Split the date string into month, day and year\n    date_list = date.split('-')\n\n    # Check if the length of the date string is greater than 0\n    if len(date_list)!= 3:\n        return False\n\n    # Convert the date string to integers\n    month = int(date_list[0])\n    day = int(date_list[1])\n    year = int(date_list[2])\n\n    # Check if the month is between 1 and 12\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the day is between 1 and 31 or 1 and 30 or 1 and 29 for the month of February\n    if month == 2:\n        if day < 1 or day > 29:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    else:\n        if day < 1 or day > 31:\n            return False\n\n    # Check if the year is between 1000 and 2020\n    if year < 1000 or year > 2020:\n        return False\n\n    # If all the rules are satisfied, return True\n    return True",
        "test": "assert valid_date('03-11-2000') == True"
    },
    {
        "number": 125,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def split_words(txt):\n    # split on whitespace, if no whitespaces exists in the text, split on commas\n    words = txt.split()\n    if len(words) > 1:\n        return words\n    else:\n        # split on commas, if no commas exists, split on lowercase letters with odd order in the alphabet\n        words = txt.split(\",\")\n        if len(words) > 1:\n            return words\n        else:\n            # split on lowercase letters with odd order in the alphabet\n            words = [word for word in txt if word.islower()]\n            if len(words) > 1:\n                return words\n            else:\n                # return the number of lower-case letters with odd order in the alphabet\n                return len(txt)",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]"
    },
    {
        "number": 126,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    if not lst:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True",
        "test": "assert is_sorted([5]) == True"
    },
    {
        "number": 127,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n    \"\"\"\n\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n\n    if start1 >= start2 <= end1:\n        length = end1 - start1\n    else:\n        length = end2 - start2\n\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\""
    },
    {
        "number": 128,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n\n    prod = 1\n    sign_sum = 0\n\n    for num in arr:\n        sign = 1 if num > 0 else -1 if num < 0 else 0\n        prod *= sign\n        sign_sum += abs(num)\n\n    return sign_sum * prod",
        "test": "assert prod_signs([1, 2, 2, -4]) == -9"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n    def dfs(i, j, k, visited):\n        if k == 1:\n            return i, j\n\n        visited[(i, j)] = True\n\n        if i > 0 and not visited[(i - 1, j)]:\n            if grid[i - 1][j] < grid[i][j]:\n                x, y = dfs(i - 1, j, k - 1, visited)\n                return x, y\n            else:\n                return dfs(i, j, k, visited)\n\n        if j > 0 and not visited[(i, j - 1)]:\n            if grid[i][j - 1] < grid[i][j]:\n                x, y = dfs(i, j - 1, k - 1, visited)\n                return x, y\n            else:\n                return dfs(i, j, k, visited)\n\n        return None, None\n\n    x, y = dfs(0, 0, k, {})\n    result = []\n\n    while x is not None:\n        result.append(grid[x][y])\n        x, y = dfs(x, y, k, {})\n\n    return result",
        "test": "assert minPath([[5,9,3], [4,1,6], [7,8,2]], 1) == [1]"
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def tri(n):\n    \"\"\"\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n\n    tribonacci = [3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(tribonacci[-1] + tribonacci[-2])\n        else:\n            tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n\n    return tribonacci\n",
        "test": "assert tri(4) == [1, 2, 6, 8, 3]"
    },
    {
        "number": 131,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # Initialize a variable to hold the product of odd digits\n    product = 1\n    # Loop through each digit in the number\n    for digit in str(n):\n        # If the digit is odd, multiply it by the product\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n    # If all digits are even, return 0\n    if all(int(digit) % 2 == 0 for digit in str(n)):\n        return 0\n    # Otherwise, return the product of odd digits\n    else:\n        return product",
        "test": "assert digits(1) == 1"
    },
    {
        "number": 132,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_nested(string):\n    stack = []\n    count = 0\n\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            if stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n\n    return True if not stack else False",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False"
    },
    {
        "number": 133,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    \n    # Round each element in the list to the upper int(Ceiling)\n    lst = [int(round(x)) for x in lst]\n    \n    # Calculate the sum of squared numbers\n    result = sum([x**2 for x in lst])\n    \n    return result",
        "test": "assert sum_squares([1,2,3]) == 14"
    },
    {
        "number": 134,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    # Remove spaces from the string\n    txt = txt.replace(\" \", \"\")\n    # Check if the last character is an alphabetical letter\n    if txt[-1].isalpha():\n        # Check if the last character is a part of a word\n        if txt[-1].isupper() or txt[-1].islower():\n            return True\n    return False",
        "test": "assert check_if_last_char_is_a_letter(\"apple pi e\") == True"
    },
    {
        "number": 135,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    arr = list(set(arr))\n    arr.sort()\n    for i in range(len(arr) - 1):\n        if arr[i + 1] - arr[i] < 2:\n            return -1\n    return len(arr) - 1",
        "test": "assert can_arrange([1,2,3]) == -1"
    },
    {
        "number": 136,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (0, None)\n    '''\n    neg = []\n    pos = []\n    for num in lst:\n        if num < 0:\n            neg.append(num)\n        else:\n            pos.append(num)\n    if neg:\n        a = max(neg)\n    else:\n        a = None\n    if pos:\n        b = min(pos)\n    else:\n        b = None\n    return (a, b)",
        "test": "assert largest_smallest_integers([]) == (None, None)"
    },
    {
        "number": 137,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n    def is_string(x):\n        return isinstance(x, str)\n\n    if is_string(a) and is_string(b):\n        if a.replace(\".\", \"\").replace(\",\", \"\") == b.replace(\".\", \"\").replace(\",\", \"\"):\n            return None\n        else:\n            return max(float(a.replace(\".\", \"\").replace(\",\", \"\")), float(b.replace(\".\", \"\").replace(\",\", \"\")))\n    elif isinstance(a, str) and not is_string(b):\n        return float(max(a, b))\n    elif not is_string(a) and isinstance(b, str):\n        return float(max(a, b))\n    else:\n        return float(max(a, b))",
        "test": "assert compare_one(1, 2.5) == 2.5"
    },
    {
        "number": 138,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers.\"\"\"\n    # Check if n is divisible by 8\n    if n % 8!= 0:\n        return False\n    # Convert n to a list of digits\n    digits = [int(d) for d in str(n)]\n    # Create a list of even digits and sort it\n    even_digits = sorted([d for d in digits if d % 2 == 0])\n    # Check if the list of even digits contains exactly 4 elements\n    if len(even_digits)!= 4:\n        return False\n    # Create a list of the remaining digits\n    remaining_digits = [d for d in digits if d not in even_digits]\n    # Check if the sum of the remaining digits is divisible by 16\n    if sum(remaining_digits) % 16!= 0:\n        return False\n    # Check if the sum of the even digits plus the sum of the remaining digits is divisible by 16\n    return (sum(even_digits) + sum(remaining_digits)) % 16 == 0",
        "test": "assert is_equal_to_sum_even(4) == False"
    },
    {
        "number": 139,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    \n    return result",
        "test": "assert special_factorial(1) == 1"
    },
    {
        "number": 140,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace all consecutive spaces with -\n    for i in range(len(text)):\n        if text[i] == \" \" and text[i+1] == \" \":\n            text = text[:i] + \"-\" + text[i+1:]\n    \n    return text",
        "test": "assert fix_spaces(\"Example\") == \"Example\""
    },
    {
        "number": 141,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Check if there are more than three digits in the file's name\n    if any(char.isdigit() for char in file_name):\n        return 'No'\n    \n    # Check if the file's name contains exactly one dot\n    if '.' not in file_name:\n        return 'No'\n    \n    # Check if the substring before the dot is empty and starts with a latin alphapet letter\n    before_dot = file_name.split('.')[0]\n    if not before_dot or not before_dot[0].isalpha():\n        return 'No'\n    \n    # Check if the substring after the dot is one of these\n    after_dot = file_name.split('.')[1]\n    if after_dot not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'",
        "test": "assert file_name_check(\"1example.dll\") == \"No\""
    },
    {
        "number": 142,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0 and i % 4 == 0:\n            pass\n        elif i % 3 == 0:\n            num *= num\n        elif i % 4 == 0:\n            num *= num * num\n        total += num\n    return total",
        "test": "assert sum_squares([]) == 0"
    },
    {
        "number": 143,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    result = \"\"\n    for word in words:\n        if is_prime(len(word)):\n            result += word + \" \"\n    return result.strip()",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\""
    },
    {
        "number": 144,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def simplify(x, n):\n    \"\"\"\n    Simplifies the expression x * n and returns True if the result is a whole number and False otherwise.\n    \"\"\"\n    numerator, denominator = map(int, x.split('/'))\n    new_numerator, new_denominator = map(int, n.split('/'))\n    \n    if new_denominator == 0:\n        return False\n    \n    numerator = new_numerator * numerator\n    denominator = new_denominator * denominator\n    \n    while numerator % denominator == 0:\n        numerator //= denominator\n        \n    if numerator == 0:\n        return True\n    else:\n        return False",
        "test": "assert simplify(\"1/6\", \"2/1\") == False"
    },
    {
        "number": 145,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    \n    # Create a dictionary to store the sum of digits for each number\n    digit_sums = {}\n    for i, num in enumerate(nums):\n        digit_sum = sum(int(digit) for digit in str(abs(num)))\n        digit_sums[num] = digit_sum\n    \n    # Sort the dictionary by value (sum of digits) and key (index)\n    sorted_nums = sorted(digit_sums.items(), key=lambda x: (-x[1], nums.index(x[0])))\n    \n    # Extract the sorted numbers and return them as a list\n    return [x[0] for x in sorted_nums]",
        "test": "assert order_by_points([]) == []"
    },
    {
        "number": 146,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = num // 10\n            last_digit = num % 10\n            if first_digit % 2 == 1 and last_digit % 2 == 1:\n                count += 1\n    return count",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1, \"specialFilter([15, -73, 14, -15]) should return 1\""
    },
    {
        "number": 147,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n\n    return count",
        "test": "assert get_max_triples(7) == 0"
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\n    def is_planet_valid(planet):\n        return planet in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n    if not (is_planet_valid(planet1) and is_planet_valid(planet2)):\n        return ()\n\n    planet1_orbit = get_planet_orbit(planet1)\n    planet2_orbit = get_planet_orbit(planet2)\n\n    planet1_distance_to_sun = distance_to_sun(planet1_orbit)\n    planet2_distance_to_sun = distance_to_sun(planet2_orbit)\n\n    intersection_points = get_intersection_points(planet1_orbit, planet2_orbit)\n    intersections_sorted = sorted(intersection_points, key=lambda x: distance_to_sun(x))\n\n    result = []\n    for point in intersections_sorted:\n        if planet_distance_to_sun(point, planet1_distance_to_sun) < planet_distance_to_sun(point, planet2_distance_to_sun):\n            result.append(point)\n\n    return tuple(result)\n\n\ndef get_planet_orbit(planet):\n    if planet == \"Mercury\":\n        return ((0, 0), (0.5, -0.5), (1, 0))\n    elif planet == \"Venus\":\n        return ((0, 0), (0.5, -0.5), (1, 0), (0.5, 0.5), (0, 1))\n    elif planet == \"Earth\":\n        return ((0, 0), (1, 0), (1, 1), (0, 1))\n    elif planet == \"Mars\":\n        return ((0, 0), (1, 0), (1, 1), (0, 1), (0.5, 0.5), (0.5, 0))\n    elif planet == \"Jupiter\":\n        return ((0, 0), (0.25, -0.25), (0.5, 0), (0.75, 0.25), (1, 0), (1, 1), (0.75, 0.75), (0.5, 1), (0.25, 0.75))\n    elif planet == \"Saturn\":\n        return ((0, 0), (0.5, -0.5), (1, 0), (1, 1), (0.5, 0.5), (0, 1))\n    elif planet == \"Uranus\":\n        return ((0, 0), (0.5, -0.5), (1, 0), (0.5, 0.5), (0, 1), (0.25, 0.25), (0.75, 0.75))\n    elif planet == \"Neptune\":\n        return ((0, 0), (0.25, -0.25), (0.5, 0), (0.75, 0.25), (1, 0), (1, 1), (0.75, 0.75), (0.5, 1), (0.25, 0.75), (0, 0.5))\n\n\ndef distance_to_sun(orbit):\n    x, y = orbit[-1]\n    return sqrt(x ** 2 + y ** 2)\n\n\ndef get_intersection_points(orbit1",
        "test": "assert bf(\"Earth\", \"Mercury\") == (\"Venus\")"
    },
    {
        "number": 149,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\n    # Remove odd-length words from the list\n    lst = [word for word in lst if len(word) % 2 == 0]\n\n    # Sort the list by length of each word\n    lst.sort(key=lambda x: (-len(x), x))\n\n    return lst",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]"
    },
    {
        "number": 150,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n\n    # Check if the number is prime or not\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Check if n is a prime number or not\n    if is_prime(n):\n        return x\n    else:\n        return y",
        "test": "assert x_or_y(7, 34, 12) == 34"
    },
    {
        "number": 151,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    '''\n\n    # Initialize the sum variable\n    result = 0\n\n    # Loop through each number in the list\n    for num in lst:\n\n        # Check if the number is positive and an integer\n        if num > 0 and num.is_integer():\n\n            # Check if the number is odd\n            if num % 2!= 0:\n\n                # Calculate the square of the number and add to the result\n                result += num ** 2\n\n    # Return the result\n    return result",
        "test": "assert double_the_difference([-1, -2, 0]) == 0"
    },
    {
        "number": 152,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    example:\n    \n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    diff = []\n    for i in range(len(game)):\n        diff.append(abs(game[i]-guess[i]))\n    return diff",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]"
    },
    {
        "number": 153,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StUFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    max_strength = -1\n    strongest_extension = \"\"\n\n    for extension in extensions:\n        if \".\" in extension:\n            extension_name = extension.split(\".\")[1]\n        else:\n            extension_name = extension\n        capitalized_letters = sum(1 for letter in extension_name if letter.isupper())\n        lowercase_letters = sum(1 for letter in extension_name if letter.islower())\n        strength = (capitalized_letters - lowercase_letters) / (len(extension_name) - lowercase_letters)\n\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n\n    return class_name + \".\" + strongest_extension",
        "test": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'"
    },
    {
        "number": 154,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\"\"\"\n    rotations = [a[::-1]]\n    for i in range(len(a)):\n        rotations.append(a[i:]+a[:i])\n    for r in rotations:\n        if b in r:\n            return True\n    return False",
        "test": "assert cycpattern_check(\"hello\",\"ell\") == True, \"Incorrect result for test case 2\""
    },
    {
        "number": 155,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Initialize two variables to store the count of even and odd digits, respectively\n    even_count = 0\n    odd_count = 0\n\n    # Convert the integer to a string\n    str_num = str(num)\n\n    # Iterate through each character in the string and count the number of even and odd digits\n    for char in str_num:\n        if int(char) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    # Return the tuple with the count of even and odd digits\n    return (even_count, odd_count)",
        "test": "assert even_odd_count(123) == (1, 2)"
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Roman numerals\n    roman_numerals = {\n        1000:'m',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    # Initialize variables\n    current_value = 0\n    result = ''\n\n    # Iterate through the numbers in reverse order\n    for i in range(number):\n        if i in roman_numerals.keys():\n            while number >= current_value + roman_numerals[i]:\n                result += roman_numerals[i]\n                number -= current_value + roman_numerals[i]\n                current_value = roman_numerals[i]\n\n    # If there are any remaining values, add them to the result\n    if current_value:\n        result += current_value * 'i'\n\n    return result.lower()",
        "test": "assert int_to_mini_roman(152) == 'clii'"
    },
    {
        "number": 157,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    \n    # Check if the sides form a triangle\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False",
        "test": "assert right_angle_triangle(1, 2, 3) == False"
    },
    {
        "number": 158,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_chars = 0\n    max_word = \"\"\n\n    # iterate over the words in the list\n    for word in words:\n        # count the number of unique characters in the word\n        unique_chars = len(set(word))\n\n        # update the maximum number of unique characters and the corresponding word\n        if unique_chars > max_chars:\n            max_chars = unique_chars\n            max_word = word\n\n    # return the maximum word with maximum unique characters\n    return max_word",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\""
    },
    {
        "number": 159,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                 the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # check if the remaining carrots are enough\n    if remaining < need:\n        # if not, eat all remaining carrots\n        return [need, 0]\n    else:\n        # if remaining carrots are enough, eat as many as needed and the remaining carrots\n        return [number+need, remaining-need]",
        "test": "assert eat(5, 6, 10) == [11, 4]"
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n\n    # Check if operator list has at least one operator\n    if len(operator) == 0:\n        raise ValueError(\"Operator list has no operators\")\n\n    # Check if operand list has at least two operands\n    if len(operand) < 2:\n        raise ValueError(\"Operand list has less than two operands\")\n\n    # Check if operand list is all integers\n    for i in operand:\n        if not isinstance(i, int):\n            raise ValueError(\"Operand list contains non-integer values\")\n\n    # Build the algebric expression using the given operator and operand lists\n    expression = \"\"\n    for i in range(len(operator)):\n        if i == 0:\n            expression += str(operand[i]) + \" \" + operator[i]\n        else:\n            expression += operator[i] + \" \" + str(operand[i])\n\n    # Evaluate the algebric expression\n    result = eval(expression)\n\n    # Check if the result is an integer\n    if not isinstance(result, int):\n        raise ValueError(\"Result is not an integer\")\n\n    return result",
        "test": "assert do_algebra(['+', '*', '-'], [2, 3, 4]) == 9"
    },
    {
        "number": 161,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.upper() if char.islower() else char.lower()\n        else:\n            result += char\n    return result[::-1]",
        "test": "assert solve(\"1234\") == \"4321\""
    },
    {
        "number": 162,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    \n    md5 = hashlib.md5()\n    md5.update(text.encode('utf-8'))\n    return md5.hexdigest()",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'"
    },
    {
        "number": 163,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    digits = []\n    for num in range(a, b + 1):\n        if num % 2 == 0:\n            digits.append(num)\n    return sorted(digits)\n",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]"
    }
]