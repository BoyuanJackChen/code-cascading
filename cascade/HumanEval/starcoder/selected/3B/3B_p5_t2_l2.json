[
    {
        "number": 0,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n    # Create a dictionary to store the indices of the numbers\n    num_to_idx = {}\n    for i, num in enumerate(numbers):\n        num_to_idx[num] = i\n\n    # Traverse through the list and check for pairs of numbers that are closer than the threshold\n    for i, num1 in enumerate(numbers):\n        for j in range(i+1, len(numbers)):\n            if abs(num1 - numbers[j]) <= threshold:\n                return True\n\n    return False",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
        "num_ids": 1371,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Define a stack to keep track of open parentheses\n    open_stack = []\n    \n    # Initialize an empty list to store the output strings\n    output = []\n    \n    # Loop through each character in the input string\n    for char in paren_string:\n        # If the character is an opening parenthesis, push it onto the stack\n        if char == '(':\n            open_stack.append(char)\n        # If the character is a closing parenthesis, pop from the stack and add the parenthesis substring to the output list\n        elif char == ')':\n            if len(open_stack) == 0:\n                output.append(char)\n            else:\n                open_stack.pop()\n                \n    # Return the list of output strings\n    return output",
        "test": "assert separate_paren_groups('( ( )) ( )') == ['(())', '( )']",
        "num_ids": 1633,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number % 1",
        "test": "assert truncate_number(3.5) == 0.5, \"Test case failed for truncate_number(3.5)\"",
        "num_ids": 713,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0  # initialize balance to zero\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True  # balance falls below zero\n    return False  # no negative balance found",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 872,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # Calculate the mean of the dataset\n    mean = sum(numbers) / len(numbers)\n    \n    # Calculate the sum of absolute differences\n    mad_sum = sum(abs(x - mean) for x in numbers)\n    \n    # Calculate the average absolute difference\n    mad = mad_sum / len(numbers)\n    \n    return mad",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
        "num_ids": 1202,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers' \"\"\"\n    if len(numbers) == 0:\n        return []\n    elif len(numbers) == 1:\n        return [numbers[0]]\n    else:\n        result = []\n        for i in range(0, len(numbers)-1):\n            result.append(numbers[i])\n            result.append(delimeter)\n        result.append(numbers[-1])\n        return result",
        "test": "assert intersperse([], 4) == []",
        "num_ids": 855,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    stack = []\n    max_level = 0\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                top = stack.pop()\n                if top == '(':\n                    max_level += 1\n                elif top == ')':\n                    max_level = max(max_level, 1)\n\n    return max_level",
        "test": "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
        "num_ids": 1279,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 683,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\n    if not numbers:\n        return (0, 1)\n\n    total_sum = sum(numbers)\n    product = 1\n\n    for num in numbers:\n        product *= num\n\n    return (total_sum, product)",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 923,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n        return []\n    max_numbers = [numbers[0]]\n    for i in range(1, len(numbers)):\n        max_numbers.append(max(max_numbers[-1], numbers[i]))\n    return max_numbers",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
        "num_ids": 1143,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    longest_palindrome = \"\"\n    for i in range(1, len(string)+1):\n        suffix = string[-i:]\n        if is_palindrome(suffix):\n            if not longest_palindrome or len(suffix) < len(longest_palindrome):\n                longest_palindrome = suffix\n    return string + longest_palindrome",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 1146,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Convert input strings to lists of integers\n    a_list = list(map(int, list(a)))\n    b_list = list(map(int, list(b)))\n\n    # Perform XOR operation on the two lists\n    xor_list = [a ^ b for a, b in zip(a_list, b_list)]\n\n    # Convert the resulting list back to a string\n    result = ''.join(map(str, xor_list))\n\n    return result",
        "test": "assert string_xor('010', '110') == '100'",
        "num_ids": 788,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    \n    if not strings:\n        return None\n    \n    longest_str = \"\"\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n            \n    return longest_str",
        "test": "assert longest([]) is None",
        "num_ids": 732,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n    # Check if a is zero\n    if a == 0:\n        return b\n\n    # Check if b is zero\n    if b == 0:\n        return a\n\n    # Check if a and b have the same sign\n    if (a > 0) ^ (b > 0):\n        # Swap a and b to find their GCD\n        temp = a\n        a = b\n        b = temp\n\n    # Calculate the remainder and divide a by b\n    while b!= 0:\n        temp = a % b\n        a = b\n        b = temp\n\n    return a",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 682,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    for i in range(len(string) + 1):\n        result.append(string[:i])\n    return result\n",
        "test": "assert all_prefixes('xyz') == ['', 'x', 'xy', 'xyz']",
        "num_ids": 577,
        "indeed": false
    },
    {
        "number": 15,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive. \"\"\"\n    return \" \".join(str(i) for i in range(n+1))",
        "test": "assert string_sequence(0) == '0'",
        "num_ids": 471,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of \"\"\"\n    # Convert the string to lowercase\n    string = string.lower()\n    # Use a set to store the distinct characters\n    distinct_characters = set(string)\n    # Return the length of the set\n    return len(distinct_characters)",
        "test": "assert count_distinct_characters('xyzXYZ') == 3",
        "num_ids": 662,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    notes = music_string.split()\n    beats_count = []\n\n    for note in notes:\n        if note == 'o':\n            beats_count.append(4)\n        elif note == 'o|':\n            beats_count.append(2)\n        elif note == '.|':\n            beats_count.append(1)\n        else:\n            raise ValueError(f\"Invalid note {note}\")\n\n    return beats_count",
        "test": "assert parse_music('o o|.| o| o|.|.|.|.| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
        "num_ids": 1777,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 908,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    sorted_numbers = sorted(numbers)\n    return''.join(sorted_numbers)",
        "test": "assert sort_numbers('three one five') == 'one three five'",
        "num_ids": 1295,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Supplied list must have at least two elements\")\n\n    # Sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n\n    # Calculate the distance between the two closest numbers\n    closest_distance = abs(sorted_numbers[0] - sorted_numbers[1])\n\n    # Calculate the distance between the two farthest numbers\n    farthest_distance = abs(sorted_numbers[-1] - sorted_numbers[-2])\n\n    # If the closest number is closer to the middle, swap them\n    if closest_distance < farthest_distance:\n        return (sorted_numbers[0], sorted_numbers[-1])\n    else:\n        return (sorted_numbers[-1], sorted_numbers[0])",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)",
        "num_ids": 1748,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 25,
        "answer": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n\n    if max_val - min_val == 0:\n        raise ValueError(\"There is only one value in the list.\")\n\n    return [(num - min_val) / (max_val - min_val) for num in numbers]",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 1325,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values if isinstance(x, int)]",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 805,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)",
        "test": "assert strlen('') == 0",
        "num_ids": 250,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            return i\n    return n",
        "test": "assert largest_divisor(15) == 5, \"Largest divisor of 15 is not 5.\"",
        "num_ids": 537,
        "indeed": false
    },
    {
        "number": 25,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors",
        "test": "assert factorize(8) == [2, 2, 2]",
        "num_ids": 1109,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    unique_numbers = []\n    for num in numbers:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    return unique_numbers",
        "test": "assert remove_duplicates([1, 2, 2, 3, 3, 4, 4, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 811,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 25,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    # Initialize an empty string to store the flipped string\n    flipped_string = \"\"\n    \n    # Loop through each character in the input string\n    for char in string:\n        # If the character is an uppercase letter, flip it to lowercase and append it to the flipped string\n        if char.isupper():\n            flipped_string += char.lower()\n        # If the character is a lowercase letter, flip it to uppercase and append it to the flipped string\n        elif char.islower():\n            flipped_string += char.upper()\n        # If the character is neither uppercase nor lowercase, append it to the flipped string as is\n        else:\n            flipped_string += char\n    \n    # Return the flipped string\n    return flipped_string",
        "test": "assert flip_case('Hello') == 'hELLO'",
        "num_ids": 602,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)",
        "test": "assert concatenate([]) == ''",
        "num_ids": 408,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 759,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 761,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert is_prime(6) == False, \"is_prime(6) should be False\"",
        "num_ids": 708,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2!= 0:\n        raise ValueError(\"List xs should have even number of coefficients.\")\n    largest_coeff = max(abs(coeff) for coeff in xs)\n    roots = []\n    for i in range(len(xs)):\n        if abs(xs[i]) > largest_coeff:\n            roots.append(float('inf'))\n        else:\n            roots.append((-xs[i]) / xs[i])\n    return roots",
        "test": "assert find_zero([-6, 11, -6, 1]) == 1.0, \"(x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\"",
        "num_ids": 2013,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    # create a new list to hold the sorted values\n    l_sorted = []\n\n    # loop through the original list\n    for i in range(len(l)):\n        # if the index is not divisible by 3, add the value to the new list\n        if i % 3!= 0:\n            l_sorted.append(l[i])\n        # if the index is divisible by 3, add the value to the new list and add a sorted copy of the corresponding value from the original list\n        else:\n            # add the value to the new list\n            l_sorted.append(l[i])\n            # create a new list to hold the sorted values of the corresponding value from the original list\n            sorted_values = sorted(l[i])\n            # add the sorted values to the new list\n            l_sorted.extend(sorted_values)\n\n    # return the new sorted list\n    return l_sorted",
        "test": "assert sort_third([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5]",
        "num_ids": 2079,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 509,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def max_element(l: list) -> int:\n    \"\"\"Return maximum element in the list.\"\"\"\n    return max(l)",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 562,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \n    Args:\n        n: The upper limit of the range for which to count the number of times the digit 7 appears.\n    \n    Returns:\n        The number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i)[-1] == '7':\n                count += 1\n    return count",
        "test": "assert fizz_buzz(50) == 0, \"Test failed: fizz_buzz(50) should be 0.\"",
        "num_ids": 764,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def sort_even(l: list) -> list:\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n\n    # create a new list with the same length as l\n    new_l = [None] * len(l)\n\n    # copy the values from l to new_l\n    for i in range(len(l)):\n        new_l[i] = l[i]\n\n    # sort the even indicies of new_l\n    even_indices = [i for i, x in enumerate(l) if x % 2 == 0]\n    even_values = [new_l[i] for i in even_indices]\n    sorted_even_values = sorted(even_values)\n\n    # copy the odd indices of new_l to new_l\n    for i in range(len(l)):\n        if i % 2 == 1:\n            new_l[i] = l[i]\n\n    # copy the sorted even values back to new_l\n    for i in range(len(l)):\n        if i % 2 == 0:\n            new_l[i] = sorted_even_values[i // 2]\n\n    return new_l",
        "test": "assert sort_even([5, 6, 3, 4]) == [3, 5, 6, 4]",
        "num_ids": 1511,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    groups = [\"\".join(group) for group in groups]\n    return \"\".join(groups)",
        "test": "assert decode_cyclic(encode_cyclic(\"abcd\")) == \"abcd\"",
        "num_ids": 1426,
        "indeed": false
    },
    {
        "number": 39,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_prime(num: int) -> bool:\n    \"\"\"\n    Returns True if num is prime, False otherwise.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef fibonacci_prime(n: int) -> int:\n    \"\"\"\n    Returns n-th Fibonacci number that is also prime.\n    \"\"\"\n    if n < 1:\n        return 0\n    if n == 1:\n        return 2\n    a, b = 2, 3\n    while True:\n        if is_prime(b) and b <= n:\n            return b\n        a, b = b, a + b\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    fib_num = fibonacci_prime(n)\n    return fib_num",
        "test": "assert prime_fib(1) == 2",
        "num_ids": 1327,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    # create a dictionary to store the count of each element in the list\n    count = {}\n\n    # loop through the list and increment the count for each element\n    for num in l:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    # loop through the list again and check if there are at least three distinct elements that sum to zero\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0 and count[l[i]] > 0 and count[l[j]] > 0 and count[l[k]] > 0:\n                    return True\n\n    return False",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 1684,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    left_cars = 0\n    right_cars = n\n    left_speed = 0\n    right_speed = 100\n\n    while left_cars > 0 or right_cars > 0:\n        if left_cars > 0 and right_cars > 0:\n            if left_speed < right_speed:\n                left_cars -= 1\n                left_speed += 1\n            else:\n                right_cars -= 1\n                right_speed -= 1\n        elif left_cars > 0:\n            left_cars -= 1\n            left_speed += 1\n        else:\n            right_cars -= 1\n            right_speed -= 1\n\n    return left_cars + right_cars",
        "test": "assert car_race_collision(1) == 0",
        "num_ids": 2011,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x + 1 for x in l]",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 803,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n\n    # Check if there is at least one pair of elements in the list that sums to 0\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n\n    # If no pair of elements sum to 0, return False\n    return False",
        "test": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 1537,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    if base < 2 or base > 36:\n        raise ValueError(\"Base must be between 2 and 36 (inclusive)\")\n    if x == 0:\n        return \"0\"\n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = digits[remainder] + result\n        x //= base\n    return result",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 1242,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 25,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n",
        "test": "assert triangle_area(5, 3) == 7.5",
        "num_ids": 351,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c = 0, 0, 2\n        for _ in range(4, n + 1):\n            a, b, c = b, c, a + b + c\n        return c",
        "test": "assert fib4(0) == 0",
        "num_ids": 1275,
        "indeed": false
    },
    {
        "number": 47,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]",
        "test": "assert median([3, 1, 2, 4, 5]) == 3",
        "num_ids": 941,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n\n    # Remove spaces and convert to lowercase\n    text = text.replace(\" \", \"\").lower()\n\n    # Compare the text with its reverse\n    return text == text[::-1]",
        "test": "assert is_palindrome('') == True, \"Test case failed for is_palindrome('')\"",
        "num_ids": 629,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    result = 1\n    for _ in range(n):\n        result = (result * 2) % p\n    return result",
        "test": "assert modp(3, 5) == 3",
        "num_ids": 801,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) - 5) % 26 + ord(\"a\")) for ch in s])\n",
        "test": "assert decode_shift(\"z\") == \"f\"",
        "num_ids": 1049,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 614,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True",
        "num_ids": 663,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"\n    Add two numbers x and y.\n\n    :param x: An integer.\n    :param y: An integer.\n    :return: An integer.\n    \"\"\"\n    return x + y",
        "test": "assert add(2, 3) == 5",
        "num_ids": 447,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    if len(s0)!= len(s1):\n        return False\n    char_set = set(s0)\n    for c in s1:\n        if c not in char_set:\n            return False\n    return True",
        "test": "assert same_chars('abcd', 'dddddddabc') == True, 'Test 2'",
        "num_ids": 1034,
        "indeed": false
    },
    {
        "number": 55,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)",
        "test": "assert fib(10) == 55",
        "num_ids": 431,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack",
        "test": "assert correct_bracketing(\"<\") == False",
        "num_ids": 1022,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def monotonic(l: list) -> bool:\n    \"\"\"\n    Returns True if list elements are monotonically increasing or decreasing,\n    and False otherwise.\n\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1))",
        "test": "assert monotonic([1, 20, 4, 10]) == False",
        "num_ids": 984,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    l1 = list(set(l1))\n    l2 = list(set(l2))\n    common = []\n    for i in l1:\n        if i in l2:\n            common.append(i)\n    common = sorted(list(set(common)))\n    return common",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 898,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n",
        "test": "assert largest_prime_factor(2048) == 2",
        "num_ids": 1191,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n\n    if n < 1:\n        return 0\n    else:\n        return n + sum_to_n(n-1)",
        "test": "assert sum_to_n(30) == 465",
        "num_ids": 739,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack",
        "test": "assert correct_bracketing(\"()\") == True",
        "num_ids": 763,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    n = len(xs)\n    result = []\n    for i in range(1, n):\n        result.append(i * xs[i])\n    return result",
        "test": "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
        "num_ids": 1048,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
        "test": "assert fibfib(1) == 0",
        "num_ids": 1162,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            if i == len(s) - 1 or s[i + 1]!= 'y':\n                count += 1\n    return count",
        "test": "assert vowels_count(\"abcde\") == 2, \"Test case 1 failed.\"",
        "num_ids": 1132,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    # Convert the integer to a list of digits\n    digits = [int(d) for d in str(x)]\n\n    # Calculate the number of digits in the original number\n    n_digits = len(digits)\n\n    # Check if shift is greater than number of digits\n    if shift > n_digits:\n        # Shift digits by n_digits minus shift\n        shifted_digits = digits[-shift:] + digits[:-shift]\n    else:\n        # Shift digits by shift\n        shifted_digits = digits[-shift:] + digits[:-shift]\n\n    # Convert the shifted digits back to a string\n    result = ''.join([str(d) for d in shifted_digits])\n\n    return result",
        "test": "assert circular_shift(12, 2) == \"12\"",
        "num_ids": 1372,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    upper_chars = 0\n    for char in s:\n        if ord(char) > 64 and ord(char) < 91:\n            upper_chars += ord(char)\n    return upper_chars",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 921,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\n    total_apples = s.split()[0]\n    total_oranges = s.split()[1]\n    total_fruits = int(total_apples) + int(total_oranges)\n\n    if total_fruits >= n:\n        return n\n    else:\n        return n - total_fruits",
        "test": "assert fruit_distribution(\"0 apples and 1 oranges\",3) == 2",
        "num_ids": 1737,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    def has_even_value(arr):\n        for num in arr:\n            if num % 2 == 0:\n                return True\n        return False\n\n    def smallest_even_value(arr):\n        min_even = float('inf')\n        min_even_index = -1\n        for index, num in enumerate(arr):\n            if num % 2 == 0 and num < min_even:\n                min_even = num\n                min_even_index = index\n        return [min_even, min_even_index]\n\n    result = smallest_even_value(arr)\n    if not result:\n        return []\n    return [result[0], arr.index(result[0])]",
        "test": "assert pluck([1,2,3]) == [2, 1]",
        "num_ids": 2268,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def search(lst):\n    # Initialize variables\n    max_val = 0\n    freq = 0\n    \n    # Loop through the list\n    for num in lst:\n        # Check if the current number is greater than zero and has a frequency greater than or equal to the current number\n        if num > 0 and lst.count(num) >= num:\n            # Update the maximum value and its frequency if necessary\n            if num > max_val:\n                max_val = num\n                freq = lst.count(num)\n            # If the current number has a frequency greater than the current maximum value, update both values\n            elif lst.count(num) > freq:\n                max_val = num\n                freq = lst.count(num)\n    \n    # Return -1 if no such value exists\n    if freq == 0:\n        return -1\n    \n    # Return the maximum value with the required frequency\n    return max_val",
        "test": "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3",
        "num_ids": 1648,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if lst == []:\n        return []\n    else:\n        min_val = min(lst)\n        max_val = max(lst)\n        sorted_list = []\n\n        if min_val == max_val:\n            return [min_val, min_val, min_val, min_val]\n        elif min_val < max_val:\n            sorted_list.append(min_val)\n            sorted_list.append(max_val)\n            for i in range(len(lst)):\n                if lst[i]!= min_val and lst[i]!= max_val:\n                    sorted_list.append(lst[i])\n            return sorted_list\n        elif min_val > max_val:\n            sorted_list.append(max_val)\n            sorted_list.append(min_val)\n            for i in range(len(lst)):\n                if lst[i]!= min_val and lst[i]!= max_val:\n                    sorted_list.append(lst[i])\n            return sorted_list",
        "test": "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]",
        "num_ids": 1761,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def triangle_area(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle, return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1.\n    Three sides make a valid triangle when the sum of any two sides is greater than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n\n    # Check if the triangle is valid\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1",
        "test": "assert triangle_area(3, 4, 5) == 6.00",
        "num_ids": 1185,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    def is_palindromic(lst):\n        return str(lst) == str(lst)[::-1]\n\n    def sum_elements(lst):\n        return sum(lst)\n\n    if is_palindromic(q) and sum_elements(q) <= w:\n        return True\n    else:\n        return False",
        "test": "assert will_it_fly([1, 2], 5) == False, \"1+2 is less than the maximum possible weight, but it's unbalanced.\"",
        "num_ids": 1223,
        "indeed": false
    },
    {
        "number": 73,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    arr.sort()\n\n    # Find the minimum number of changes required to make the array palindromic\n    min_changes = 0\n    for i in range(n//2):\n        if arr[i]!= arr[-(i+1)]:\n            min_changes += 1\n            break\n\n    return min_changes",
        "test": "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1",
        "num_ids": 1717,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    \n    def count_chars(lst):\n        return sum(len(x) for x in lst)\n\n    lst1_count = count_chars(lst1)\n    lst2_count = count_chars(lst2)\n    \n    if lst1_count < lst2_count:\n        return lst1\n    elif lst1_count > lst2_count:\n        return lst2\n    else:\n        return lst1",
        "test": "assert total_match([], []) == []",
        "num_ids": 1625,
        "indeed": true
    },
    {
        "number": 75,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    \n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def count_primes(n):\n        count = 0\n        for i in range(2, n + 1):\n            if is_prime(i):\n                count += 1\n        return count\n    \n    def get_primes(n):\n        primes = []\n        for i in range(2, n + 1):\n            if is_prime(i):\n                primes.append(i)\n        return primes\n    \n    primes = get_primes(100)\n    if a % 3 == 0 and (a // 3) % 2 == 0:\n        if a == 2 * 3 * 5:\n            return True\n    if a % 3 == 0 and (a // 3) % 2!= 0:\n        if a == 2 * 5 * 3:\n            return True\n    if a % 5 == 0 and (a // 5) % 3 == 0:\n        if a == 5 * 5 * 3:\n            return True\n    if a % 7 == 0 and (a // 7) % 3 == 0:\n        if a == 7 * 7 * 3:\n            return True\n    if a % 11 == 0 and (a // 11) % 5 == 0:\n        if a == 11 * 11 * 11:\n            return True\n    return False\n\nprint(is_multiply_prime(30))  # Output: True",
        "test": "assert is_multiply_prime(40) == False, \"Test case 2 failed\"",
        "num_ids": 1429,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def is_simple_power(x, n):\n    \"\"\"\n    This function returns true if a number x is a simple power of n and false\n    in other cases. A number x is a simple power of n if n**int(log10(x))=x.\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    import math\n\n    # Check if x is a simple power of n\n    if n**int(math.log10(x)) == x:\n        return True\n    else:\n        return False",
        "test": "assert is_simple_power(1, 4) == True",
        "num_ids": 1071,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    \n    # Check if a is a positive integer\n    if a < 1:\n        return False\n    \n    # Find the cube of the input number\n    cube = a**3\n    \n    # Check if the cube is equal to the input number\n    if cube == a:\n        return True\n    else:\n        return False",
        "test": "assert iscube(2) == False",
        "num_ids": 950,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    count = 0\n    for digit in num:\n        if digit in '0123456789ABCDEF':\n            if is_prime(int(digit, 16)):\n                count += 1\n    return count",
        "test": "assert hex_key(\"1077E\") == 2, \"For num = '1077E' the output should be 2.\"",
        "num_ids": 1785,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n\n    return \"db\" + binary + \"db\"\n",
        "test": "assert decimal_to_binary(15) == \"db1111db\"",
        "num_ids": 1226,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    n = len(s)\n    if n < 3:\n        return False\n    \n    # First, check if the string is a palindrome\n    s = s[::-1]\n    i = 0\n    while i < n // 2:\n        if s[i]!= s[n - i - 1]:\n            return False\n        i += 1\n    \n    # Now, check if the string is happy\n    while n > 1:\n        s = ''\n        i = 0\n        while i < n - 1:\n            s += str(int(s[i]) + int(s[i+1]))\n            i += 2\n        n = len(s)\n        if n < 3:\n            return False\n    \n    return True",
        "test": "assert is_happy('a') == False",
        "num_ids": 1556,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n             > 3.7                A \n             > 3.3                A- \n             > 3.0                B+\n             > 2.7                B \n             > 2.3                B-\n             > 2.0                C+\n             > 1.7                C\n             > 1.3                C-\n             > 1.0                D+ \n             > 0.7                D \n             > 0.0                D-\n              0.0                E\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n    letter_grades = []\n\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n\n    return letter_grades",
        "test": "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']",
        "num_ids": 2735,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    return is_prime(len(string))",
        "test": "assert prime_length('Hello') == True",
        "num_ids": 821,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, 10**(n-1)+1):\n        if i < 10**n:\n            if i == 1:\n                count += 1\n        else:\n            if i == 10**(n-1):\n                count += 1\n    return count",
        "test": "assert starts_one_ends(2) == 1",
        "num_ids": 632,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n             a string of binary number\n    \"\"\"\n    # Convert integer to binary\n    binary = bin(N)[2:]\n    # Convert binary to integer and calculate sum of digits\n    sum_digits = sum(int(digit) for digit in binary)\n    # Convert sum_digits to binary and return as a string\n    return bin(sum_digits)[2:]",
        "test": "assert solve(150) == \"110\"",
        "num_ids": 1237,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    even_sum = 0\n    for i in range(1, len(lst), 2):\n        even_sum += lst[i]\n    return even_sum",
        "test": "assert add([4, 2, 6, 7]) == 2, \"Test failed: add([4, 2, 6, 7]) should return 2\"",
        "num_ids": 557,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n    words = s.split()\n    new_words = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        new_words.append(sorted_word)\n\n    result =''.join(new_words)\n    return result\n",
        "test": "assert anti_shuffle('Hi') == 'Hi'",
        "num_ids": 1160,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    \n    def get_coordinates(lst):\n        return [(r, c) for r in range(len(lst)) for c in range(len(lst[0])) if lst[r][c] == x]\n    \n    def sort_coordinates(coordinates):\n        return sorted(coordinates, key=lambda c: (c[0], -c[1]))\n    \n    coordinates = get_coordinates(lst)\n    sorted_coordinates = sort_coordinates(coordinates)\n    \n    return sorted_coordinates",
        "test": "assert get_row([",
        "num_ids": 2027,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n\n    # Sort the array in ascending order\n    for i in range(len(array) - 1):\n        for j in range(len(array) - i - 1):\n            if (array[j] + array[j + 1]) % 2 == 0:\n                array[j], array[j + 1] = array[j + 1], array[j]\n\n    return array\n",
        "test": "assert sort_array([]) == []",
        "num_ids": 1654,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n\n    # Create a dictionary to map each letter to its new position\n    position_map = {\n        'a': 'b', 'b': 'c', 'c': 'd', 'd': 'e', 'e': 'f', 'f': 'g', 'g': 'h', 'h': 'i',\n        'i': 'j', 'j': 'k', 'k': 'l', 'l':'m','m': 'n', 'n': 'o', 'o': 'p', 'p': 'q',\n        'q': 'r', 'r':'s','s': 't', 't': 'u', 'u': 'v', 'v': 'w', 'w': 'x', 'x': 'y',\n        'y': 'z', 'z': 'a', 'A': 'B', 'B': 'C', 'C': 'D', 'D': 'E', 'E': 'F', 'F': 'G',\n        'G': 'H', 'H': 'I', 'I': 'J', 'J': 'K', 'K': 'L', 'L': 'M', 'M': 'N', 'N': 'O',\n        'O': 'P', 'P': 'Q', 'Q': 'R', 'R': 'S', 'S': 'T', 'T': 'U', 'U': 'V', 'V': 'W',\n        'W': 'X', 'X': 'Y', 'Y': 'Z'\n    }\n\n    # Create an empty string to store the encrypted message\n    encrypted_message = ''\n\n    # Iterate over each character in the input string\n    for char in s:\n\n        # If the character is a letter, use its position in the map to get the new position\n        if char.isalpha():\n            new_position = (position_map[char] - 2) % 26\n            encrypted_message += chr(ord(char) + new_position)\n        else:\n            encrypted_message += char\n\n    return encrypted_message",
        "test": "assert encrypt('asdfghjkl') == 'ewhjklnop'",
        "num_ids": 1717,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if not lst:\n        return None\n    smallest = lst[0]\n    second_smallest = None\n    for num in lst[1:]:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif second_smallest is None or num < second_smallest:\n            second_smallest = num\n    return second_smallest",
        "test": "assert next_smallest([5, 1, 4, 3, 2]) == 2",
        "num_ids": 1176,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    count = 0\n    for sentence in S.split(\". \"):\n        if sentence.startswith(\"I\"):\n            count += 1\n    return count",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 928,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    '''\n\n    if type(x)!= int or type(y)!= int or type(z)!= int:\n        return False\n\n    if x + y == z or x + z == y or z + y == x:\n        return True\n    else:\n        return False",
        "test": "assert any_int(5, 2, 7) == True",
        "num_ids": 1009,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'THKS KS C MGSSCGG'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                # find the letter that appears 2 places ahead of the vowel\n                index = vowels.index(char)\n                if index + 2 < len(vowels):\n                    result += vowels[index + 2]\n                else:\n                    result += 'X'\n            else:\n                # swap case\n                result += char.swapcase()\n        else:\n            result += char\n    return result",
        "test": "assert encode('This is a message') == 'thks ks cg mgsscgg'",
        "num_ids": 1157,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef largest_prime_value(lst):\n    max_prime = -1\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    return max_prime\n\n\ndef sum_of_digits(num):\n    return sum(int(digit) for digit in str(num))\n\n\ndef skjkasdkd(lst):\n    max_prime = largest_prime_value(lst)\n    return sum_of_digits(max_prime)\n",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
        "num_ids": 2537,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\n    # Check if the dictionary is empty\n    if not dict:\n        return False\n\n    # Iterate through the keys in the dictionary\n    for key in dict:\n        # Check if the key is a string\n        if not isinstance(key, str):\n            return False\n\n        # Check if the key is in lower case\n        if key.islower():\n            continue\n\n        # Check if the key is in upper case\n        if key.isupper():\n            return False\n\n        # If all keys are not in lower or upper case, return False\n        return False\n\n    # If all keys are in lower or upper case, return True\n    return True",
        "test": "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
        "num_ids": 1646,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    prime_numbers = []\n    for i in range(2, n):\n        if is_prime(i):\n            prime_numbers.append(i)\n    return prime_numbers",
        "test": "assert count_up_to(5) == [2, 3]",
        "num_ids": 1181,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Extract the unit digits of the two numbers\n    unit_a, unit_b = a % 10, b % 10\n    \n    # Multiply the unit digits and return the result\n    return unit_a * unit_b",
        "test": "assert multiply(148, 412) == 16",
        "num_ids": 1284,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] in vowels:\n                count += 1\n    return count",
        "test": "assert count_upper('abcdefg') == 0, 'count_upper(\"abcdefg\") should return 0'",
        "num_ids": 725,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    value = float(value)\n    if value.is_integer():\n        return int(value)\n    else:\n        return int(value) if value >= 0 else int(-value - 1)",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 1499,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    # initialize a list to store the number of stones in each level\n    pile_sizes = []\n    \n    # loop through each level and calculate the number of stones\n    for level in range(n):\n        # if the level is odd, add the next odd number of stones\n        if level % 2 == 1:\n            pile_sizes.append(2 * level + 1)\n        # if the level is even, add the next even number of stones\n        else:\n            pile_sizes.append(2 * level)\n            \n    return pile_sizes",
        "test": "assert make_a_pile(4) == [4, 7, 9]",
        "num_ids": 1370,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    words = s.split(\", \")\n    return words",
        "test": "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
        "num_ids": 1017,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\n    biggest_even = -1\n\n    for i in range(x, y+1, 2):\n        if i > biggest_even:\n            biggest_even = i\n\n    return biggest_even",
        "test": "assert choose_num(12, 15) == 14",
        "num_ids": 1081,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    # Check if n is greater than m\n    if n > m:\n        return -1\n\n    # Compute the average\n    avg = (n + m) / 2\n\n    # Round the average to the nearest integer\n    rounded_avg = round(avg)\n\n    # Convert the rounded average to binary and return the result\n    return f\"0b{rounded_avg:04b}\"",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 1279,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x, return a sorted list of all elements\n    that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    # Convert the list to a set to remove duplicates\n    x = set(x)\n\n    # Initialize an empty list to store the unique digits\n    unique_digits = []\n\n    # Iterate through the set of digits\n    for digit in x:\n\n        # If the digit is odd, add it to the list of unique digits\n        if digit % 2!= 0:\n            unique_digits.append(digit)\n\n    # Sort the list in increasing order\n    unique_digits.sort()\n\n    return unique_digits",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
        "num_ids": 1312,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n             -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n             -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n      \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n      \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n             -> sort arr -> [-1, 1, 55]\n             -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    # Check for empty array\n    if not arr:\n        return []\n\n    # Check for strange numbers\n    arr = [num for num in arr if 1 <= num <= 9]\n\n    # Sort array\n    arr.sort()\n\n    # Reverse array\n    arr.reverse()\n\n    # Replace digits with corresponding names\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(names[num-1])\n        else:\n            result.append(\"None\")\n\n    return result",
        "test": "assert by_length([]) == []",
        "num_ids": 2342,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result",
        "test": "assert f(5) == [1, 2, 6, 24, 15], \"The output of f(5) is incorrect.\"",
        "num_ids": 1463,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    # Initialize variables to keep track of even and odd palindromes\n    even_count = 0\n    odd_count = 0\n\n    # Loop through numbers from 1 to n\n    for num in range(1, n+1):\n        # Convert number to a string and reverse it\n        num_str = str(num)\n        reverse_str = num_str[::-1]\n\n        # Check if reversed number is equal to original number\n        if num_str == reverse_str:\n            # Check if number is even\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    # Return a tuple with even and odd palindrome counts\n    return (even_count, odd_count)",
        "test": "assert even_odd_palindrome(12) == (4, 6)",
        "num_ids": 1750,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    \n    # Initialize count variable to 0\n    count = 0\n    \n    # Loop through the array\n    for num in arr:\n        \n        # Check if the number is negative\n        if num < 0:\n            \n            # Initialize the sum of digits to 0\n            sum_of_digits = 0\n            \n            # Convert the number to a string and loop through each digit\n            for digit in str(abs(num)):\n                \n                # Convert the digit to an integer and add it to the sum of digits\n                sum_of_digits += int(digit)\n            \n            # Check if the sum of digits is > 0\n            if sum_of_digits > 0:\n                \n                # Increment the count variable\n                count += 1\n    \n    # Return the count variable\n    return count",
        "test": "assert count_nums([]) == 0",
        "num_ids": 1412,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n    \n    \"\"\"\n    if len(arr) == 0:\n        return True\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            return False\n    return True",
        "test": "assert move_one_ball([3, 5, 4, 1, 2]) == False, \"move_one_ball([3, 5, 4, 1, 2]) expected False, got True\"",
        "num_ids": 2150,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    \n    # set variables to check if lst1 has at least one even number\n    has_even = False\n    for num in lst1:\n        if num % 2 == 0:\n            has_even = True\n            break\n    \n    # if lst1 has at least one even number, return \"NO\"\n    if has_even:\n        return \"NO\"\n    \n    # initialize variables to keep track of which elements to exchange\n    exchanged = set()\n    temp_lst1 = []\n    \n    # loop through the list of numbers in lst1, and for each even number,\n    # add it to the temp_lst1, and remove it from lst1 and lst2\n    for num in lst1:\n        if num % 2 == 0:\n            temp_lst1.append(num)\n            lst1.remove(num)\n            lst2.remove(num)\n            exchanged.add(num)\n    \n    # loop through the list of numbers in temp_lst1, and add it to lst1 if it is not already there\n    for num in temp_lst1:\n        if num not in lst1:\n            lst1.append(num)\n    \n    # check if there are any elements left in lst2 that have not been exchanged\n    for num in lst2:\n        if num not in exchanged:\n            return \"NO\"\n    \n    # if all elements have been exchanged and there are no elements left in lst2,\n    # return \"YES\"\n    return \"YES\"",
        "test": "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"",
        "num_ids": 2509,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Convert the input string to a list of lowercase letters\n    letters = [char.lower() for char in test]\n\n    # Create a dictionary to store the occurrences of each letter\n    letter_count = {}\n\n    # Iterate over the letters and update the letter_count dictionary\n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n\n    # Create a list of tuples with the letter and count as a tuple\n    letter_count_list = [(letter, count) for letter, count in letter_count.items()]\n\n    # Sort the list of tuples by the count in descending order\n    letter_count_list.sort(key=lambda x: x[1], reverse=True)\n\n    # Find the letter with the most repetition\n    most_repeated_letter = letter_count_list[0][0]\n\n    # Create a dictionary with the most repeated letter as a key and the count of that letter as a value\n    most_repeated_letter_dict = {most_repeated_letter: letter_count[most_repeated_letter]}\n\n    # If there are more than one letter with the most repetition, add them to the dictionary\n    if len(letter_count_list) > 1:\n        for letter, count in letter_count_list[1:]:\n            most_repeated_letter_dict[letter] = count\n\n    # Return the dictionary with the most repeated letter and its count\n    return most_repeated_letter_dict",
        "test": "assert histogram('a b b a') == {'a': 2, 'b': 2}",
        "num_ids": 1967,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in range(len(s)-1, -1, -1):\n        if s[i] in c:\n            s = s[:i] + s[i+1:]\n    if s == s[::-1]:\n        return (s, True)\n    else:\n        return (s, False)",
        "test": "assert reverse_delete(\"abcde\",\"ae\") == ('bcd', False)",
        "num_ids": 1287,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    output = []\n    for i, s in enumerate(lst):\n        count = 0\n        for c in s:\n            if c.isdigit():\n                count += 1\n        output.append(f\"the number of odd elements {count}n the str{i}ng {count} of the {i}nput.\")\n    return output",
        "test": "assert odd_count(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",",
        "num_ids": 1689,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        elif current_sum > 0:\n            current_sum -= nums.pop()\n    return min_sum",
        "test": "assert minSubArraySum([-1, -2, -3]) == -6",
        "num_ids": 1238,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def max_fill(grid, capacity):\n    # Initialize variables\n    bucket_count = 0\n    bucket_size = capacity\n    max_time = 0\n\n    # Check if all buckets are full\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                bucket_count += 1\n                if bucket_count == bucket_size:\n                    bucket_count = 0\n                    max_time += 1\n\n    # Check if some buckets are empty\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 0:\n                bucket_count -= 1\n                if bucket_count < 0:\n                    bucket_count = 0\n\n    return max_time",
        "test": "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6",
        "num_ids": 2855,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(num):\n        return sum(1 for bit in bin(num)[2:] if bit == '1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))",
        "test": "assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]",
        "num_ids": 2066,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    # Convert all the words in the string s to lowercase and remove any spaces\n    words = s.lower().split()\n\n    # Initialize an empty list to store the words with exactly n consonants\n    result = []\n\n    # Loop through each word in the list of words\n    for word in words:\n\n        # Initialize a counter variable to keep track of the number of consonants in the word\n        count = 0\n\n        # Loop through each character in the word and increment the counter if it is a consonant\n        for char in word:\n            if char.lower() in ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z']:\n                count += 1\n\n        # If the count is equal to n, add the word to the result list\n        if count == n:\n            result.append(word)\n\n    # Return the list of words that contain exactly n consonants\n    return result",
        "test": "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
        "num_ids": 1641,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def get_closest_vowel(word):\n    vowels = 'AEIOUaeiou'\n    consonants = 'BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz'\n    closest_vowel = ''\n\n    for i in range(len(word)):\n        if word[i].lower() in vowels:\n            if closest_vowel:\n                closest_vowel = word[i]\n            else:\n                closest_vowel = word[i]\n        elif word[i].lower() in consonants and closest_vowel:\n            break\n\n    return closest_vowel",
        "test": "assert get_closest_vowel(\"FULL\") == \"U\"",
        "num_ids": 1608,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    \n    def is_balanced(s):\n        open_count = 0\n        for c in s:\n            if c == '(':\n                open_count += 1\n            elif c == ')':\n                if open_count == 0:\n                    return False\n                open_count -= 1\n        return open_count == 0\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            for k in range(j+1, len(lst)):\n                s1 = lst[i]\n                s2 = lst[j]\n                s3 = lst[k]\n                if is_balanced(s1+s2) and is_balanced(s1+s3) and is_balanced(s2+s3):\n                    return 'Yes'\n    return 'No'",
        "test": "assert match_parens([')', ')']) == 'No'",
        "num_ids": 1859,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Return the first k elements of the sorted array\n    return arr[:k]",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]",
        "num_ids": 1438,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    \n    # Initialize the sum variable\n    sum_odd_even = 0\n    \n    # Iterate over the list\n    for i in range(len(lst)):\n        # Check if the current element is odd and in even position\n        if lst[i] % 2 == 1 and i % 2 == 0:\n            # If yes, add the element to the sum variable\n            sum_odd_even += lst[i]\n            \n    # Return the sum of the odd elements in even positions\n    return sum_odd_even",
        "test": "assert solution([5, 8, 7, 1]) == 12",
        "num_ids": 974,
        "indeed": true
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n    # Initialize the sum variable\n    total = 0\n\n    # Iterate through the first k elements of the array\n    for i in range(k):\n        # Extract the last two digits from the current element\n        current_digit = arr[i] % 100\n\n        # Add the current digit to the total\n        total += current_digit\n\n        # Remove the last two digits from the current element\n        arr[i] //= 100\n\n    # Return the sum of the elements with at most two digits\n    return total",
        "test": "assert add_elements([111,21,3,4000,5,6,7,8,9], 4) == 24, \"Test failed.\"",
        "num_ids": 1379,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    collatz_sequence = []\n    current_number = n\n    collatz_sequence.append(current_number)\n    while current_number!= 1:\n        if current_number % 2 == 0:\n            current_number //= 2\n        else:\n            current_number = 3 * current_number + 1\n        collatz_sequence.append(current_number)\n\n    odd_numbers = sorted([num for num in collatz_sequence if num % 2!= 0])\n    return odd_numbers",
        "test": "assert get_odd_collatz(5) == [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.",
        "num_ids": 2321,
        "indeed": true
    },
    {
        "number": 124,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def valid_date(date):\n    # Check if the date string is empty\n    if not date:\n        return False\n    \n    # Extract the month, day, and year from the date string\n    month, day, year = map(int, date.split('-'))\n    \n    # Check if the month is within the valid range\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is within the valid range for the month\n    if month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month in [2]:\n        if day < 1 or day > 29:\n            return False\n    elif day < 1 or day > 31:\n        return False\n    \n    # Check if the year is within the valid range\n    if year < 1000 or year > 9999:\n        return False\n    \n    # If the date is valid, return True\n    return True",
        "test": "assert valid_date('03-11-2000') == True",
        "num_ids": 2262,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def split_words(txt):\n    words = txt.split()\n    if not words:\n        if ',' in txt:\n            words = txt.split(',')\n        else:\n            letters = ''.join([chr(i) for i in range(97, 123) if i % 2 == 1])\n            words = [letters[i % len(letters)] for i in range(len(letters))]\n    return words",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 1554,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n\n    # Check for duplicates\n    if len(lst)!= len(set(lst)):\n        return False\n\n    # Check for ascending order\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n\n    return True",
        "test": "assert is_sorted([5]) == True, \"Test 1 failed\"",
        "num_ids": 1908,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n\n    length = max(end1, end2) - min(start1, start2)\n\n    if length == 1:\n        return \"NO\"\n\n    if all(x > 2 for x in range(2, length + 1, 2)):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert intersection((-1, 1), (0, 4)) == \"NO\"",
        "num_ids": 2075,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n\n    sign_product = 1\n    sum_mag = 0\n    for num in arr:\n        mag = abs(num)\n        sign = 1 if num > 0 else -1\n        sign_product *= sign\n        sum_mag += mag\n\n    return sum_mag * sign_product",
        "test": "assert prod_signs([1, 2, 2, -4]) == -9",
        "num_ids": 1068,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n    def dfs(grid, k, i, j, path, min_path):\n        if k == 0:\n            return [i, j]\n        min_path.append(min(grid[i][j], min_path[-1]))\n        for neighbor in get_neighbors(grid, i, j):\n            if neighbor[0] < 0 or neighbor[1] < 0 or neighbor[0] >= len(grid) or neighbor[1] >= len(grid[0]):\n                continue\n            new_path = dfs(grid, k - 1, neighbor[0], neighbor[1], path + [neighbor], min_path)\n            if len(new_path) > 0:\n                return new_path\n        return []\n\n    def get_neighbors(grid, i, j):\n        return [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]\n\n    min_path = []\n    path = dfs(grid, k, 0, 0, [], min_path)\n    return path[::-1]\n",
        "test": "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]",
        "num_ids": 3891,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n\n    if n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n    else:\n        tri_list = [1, 3]\n        for i in range(2, n):\n            tri_list.append(1 + tri_list[i-1] + tri_list[i-2] + tri_list[i])\n        return tri_list",
        "test": "assert tri(4) == [1, 3, 10, 4, 16], \"tri(4) should be [1, 3, 10, 4, 16]\"",
        "num_ids": 1903,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    digits_list = [int(digit) for digit in str(n)]\n    even_count = sum([1 for digit in digits_list if digit % 2 == 0])\n    odd_product = 1\n    for digit in digits_list:\n        if digit % 2!= 0:\n            odd_product *= digit\n    if even_count == len(digits_list):\n        return 0\n    else:\n        return odd_product",
        "test": "assert digits(1) == 1",
        "num_ids": 838,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_nested(string):\n    def helper(start, end, char, stack):\n        if start > end:\n            return False\n\n        if stack and stack[-1] == char:\n            stack.pop()\n        else:\n            stack.append(char)\n\n        if char in ('[', '(', '{'):\n            if not helper(start + 1, end, char, stack):\n                return False\n\n        if char in (']', ')', '}'):\n            if stack and char == stack.pop():\n                return False\n\n        return stack\n\n    stack = []\n    for i in range(len(string)):\n        if string[i] in ('[', '(', '{'):\n            stack.append(string[i])\n        elif string[i] in (']', ')', '}'):\n            if stack:\n                stack.pop()\n            else:\n                return False\n\n    return not stack",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False",
        "num_ids": 624,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    # Calculate the sum of squared numbers\n    sum_squares = sum([int(round(num))**2 for num in lst])\n    return sum_squares",
        "test": "assert sum_squares([1, 2, 3]) == 14",
        "num_ids": 1193,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    # split the input string into words\n    words = txt.split()\n\n    # loop through each word and check if the last character is an alphabetical character\n    for word in words:\n        # check if the last character is an alphabetical character\n        if not word[-1].isalpha():\n            return False\n\n    return True",
        "test": "assert check_if_last_char_is_a_letter(\"apple pi e\") == True",
        "num_ids": 1387,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\n    # Initialize variables for keeping track of the largest index and the\n    # current index\n    max_index = -1\n    current_index = 0\n\n    # Iterate through the array\n    while current_index < len(arr):\n        # Check if the current element is greater than or equal to the\n        # element at the current index\n        if arr[current_index] < arr[current_index - 1]:\n            # Update the max index if necessary\n            if max_index < current_index - 1:\n                max_index = current_index - 1\n            # Increment the current index\n            current_index += 1\n        else:\n            # If the current element is not greater than or equal to the\n            # element at the current index, increment the current index\n            current_index += 1\n\n    # Return the max index\n    return max_index",
        "test": "assert can_arrange([1, 2, 3]) == -1",
        "num_ids": 1312,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    neg_integers = []\n    pos_integers = []\n\n    for num in lst:\n        if num < 0:\n            neg_integers.append(num)\n        else:\n            pos_integers.append(num)\n\n    if neg_integers:\n        a = max(neg_integers)\n    else:\n        a = None\n\n    if pos_integers:\n        b = min(pos_integers)\n    else:\n        b = None\n\n    return (a, b)",
        "test": "assert largest_smallest_integers([]) == (None, None)",
        "num_ids": 1467,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    :param a: A variable that can be a string, integer, or float\n    :param b: A variable that can be a string, integer, or float\n    :return: The larger variable of its given type, or None if the values are equal.\n    \"\"\"\n\n    if isinstance(a, str) or isinstance(b, str):\n        # If either a or b is a string, check if the string contains a comma or dot\n        if \",\" in a or \",\" in b:\n            return b\n        else:\n            return a\n    elif isinstance(a, int) and isinstance(b, int):\n        return max(a, b)\n    elif isinstance(a, float) or isinstance(b, float):\n        return max(a, b)\n    else:\n        return None",
        "test": "assert compare_one(1, 2.5) == 2.5",
        "num_ids": 1336,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n\n    # Check if n is a positive even number\n    if n % 2 == 0:\n        return False\n\n    # Check if n can be written as the sum of exactly 4 positive even numbers\n    for i in range(4):\n        if n - i >= 0 and n - i % 2 == 0:\n            return True\n\n    # If no valid combination can be found, return False\n    return False\n",
        "test": "assert is_equal_to_sum_even(4) == False",
        "num_ids": 999,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n\n    return result",
        "test": "assert special_factorial(5) == 120",
        "num_ids": 842,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    # replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # replace all consecutive spaces with -\n    while \"  \" in text:\n        text = text.replace(\"  \", \"_\")\n    \n    return text",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 1255,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n    # Check if the file name contains more than three digits\n    digits_count = sum(1 for char in file_name if char.isdigit())\n    if digits_count > 3:\n        return \"No\"\n\n    # Check if the file name contains exactly one dot\n    if \".\" not in file_name:\n        return \"No\"\n\n    # Check if the substring before the dot is empty or not a latin alphapet letter\n    dot_index = file_name.index(\".\")\n    before_dot = file_name[:dot_index]\n    if not before_dot.isalpha():\n        return \"No\"\n\n    # Check if the substring after the dot is one of these: ['txt', 'exe', 'dll']\n    after_dot = file_name[dot_index + 1:]\n    if after_dot not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n\n    return \"Yes\"",
        "test": "assert file_name_check(\"example.txt\") == \"Yes\"",
        "num_ids": 2095,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    # Initialize sum variable to 0\n    total = 0\n    \n    # Loop through the list\n    for i in range(len(lst)):\n        \n        # If the index is a multiple of 3, square the value\n        if i % 3 == 0:\n            lst[i] *= lst[i]\n            \n        # If the index is a multiple of 4 but not a multiple of 3, cube the value\n        elif i % 4 == 0 and i % 3!= 0:\n            lst[i] *= lst[i]\n            \n        # If the index is not a multiple of 3 or 4, do nothing\n        \n    # Loop through the list again and add up the values\n    for i in range(len(lst)):\n        total += lst[i]\n        \n    return total",
        "test": "assert sum_squares([]) == 0",
        "num_ids": 1553,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_lengths = [len(word) for word in words if is_prime(len(word))]\n    prime_words = [word for word in words if is_prime(len(word))]\n    new_sentence = \" \".join(prime_words)\n    return new_sentence",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\"",
        "num_ids": 733,
        "indeed": true
    },
    {
        "number": 144,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def simplify(x, n):\n    \"\"\"\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    num_x = int(x.split('/')[0])\n    denom_x = int(x.split('/')[1])\n    num_n = int(n.split('/')[0])\n    denom_n = int(n.split('/')[1])\n    \n    if num_x * num_n == denom_x * denom_n:\n        return True\n    else:\n        return False",
        "test": "assert simplify(\"1/5\", \"5/1\") == True",
        "num_ids": 1453,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums.sort(key=lambda x: (sum(int(digit) for digit in str(abs(x))), x.index(x)))\n    return nums",
        "test": "assert order_by_points([]) == []",
        "num_ids": 1318,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num // 10) % 2!= 0 and num % 10 % 2!= 0:\n            count += 1\n    return count",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1",
        "num_ids": 1223,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count",
        "test": "assert get_max_triples(5) == 1, \"get_max_triples(5) should return 1\"",
        "num_ids": 1580,
        "indeed": true
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    \n    # Check if planet1 and planet2 are correct planet names\n    if planet1 not in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"] or planet2 not in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n        return ()\n    \n    # Initialize a dictionary to store the distances between planets and their orbits\n    distances = {\n        \"Mercury\": {\"Venus\": 13.9, \"Earth\": 12.8, \"Mars\": 8.3, \"Jupiter\": 6.6, \"Saturn\": 4.2, \"Uranus\": 3.1, \"Neptune\": 2.5},\n        \"Venus\": {\"Mercury\": 13.9, \"Earth\": 6.0, \"Mars\": 3.5, \"Jupiter\": 1.6, \"Saturn\": 0.7, \"Uranus\": 0.5, \"Neptune\": 0.3},\n        \"Earth\": {\"Mercury\": 12.8, \"Venus\": 6.0, \"Mars\": 3.3, \"Jupiter\": 1.3, \"Saturn\": 0.4, \"Uranus\": 0.3, \"Neptune\": 0.2},\n        \"Mars\": {\"Mercury\": 8.3, \"Venus\": 3.5, \"Earth\": 3.3, \"Jupiter\": 0.5, \"Saturn\": 0.2, \"Uranus\": 0.1, \"Neptune\": 0.1},\n        \"Jupiter\": {\"Mercury\": 6.6, \"Venus\": 1.6, \"Earth\": 1.3, \"Mars\": 0.5, \"Saturn\": 0.1, \"Uranus\": 0.0, \"Neptune\": 0.0},\n        \"Saturn\": {\"Mercury\": 4.2, \"Venus\": 0.7, \"Earth\": 0.4, \"Mars\": 0.2, \"Jupiter\": 0.1, \"Uranus\": 0.0, \"Neptune\": 0.0},\n        \"Uranus\": {\"Mercury\": 3.1, \"Venus\": 0.5, \"Earth\": 0.3, \"Mars\": 0.1, \"Jupiter\": 0.0, \"Saturn\": 0.0, \"Neptune\": 0.0},\n        \"Neptune\": {\"Mercury\": 2.5, \"Venus\": 0.3, \"Earth\": 0.2, \"Mars\": 0.1, \"Jupiter\": 0.0, \"Saturn\": 0.0, \"Uranus\": 0.0}\n    }\n    \n    # Find the shortest distance between the two planets\n    shortest_distance = min([distances[planet1][planet2], distances[planet2][planet1]])\n    \n    # Initialize a list to store the planets that are between the two planets and have shortest distance\n    planets_between = []\n    \n    # Iterate through the distances dictionary to find the planets that are between the two planets and have shortest distance\n    for planet, orbit in distances.items():\n        if planet not in [planet1, planet2] and distances[planet1][planet] + shortest_distance <= distances[planet2][planet]",
        "test": "assert bf(\"Earth\", \"Mercury\") == (\"Venus\")",
        "num_ids": 3246,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # Remove odd-length strings from the list\n    lst = [word for word in lst if len(word) % 2 == 0]\n\n    # Sort the list by length of each word in ascending order\n    lst = sorted(lst, key=lambda word: len(word), reverse=False)\n\n    # Sort the list by length of each word in descending order (to keep the order of equal lengths)\n    lst = sorted(lst, key=lambda word: len(word), reverse=True)\n\n    # Sort the list alphabetically for words of the same length\n    lst = sorted(lst, key=lambda word: word)\n\n    # Return the sorted list\n    return lst",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 2029,
        "indeed": false
    },
    {
        "number": 150,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(num):\n    \"\"\"Checks if a number is prime\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y",
        "test": "assert x_or_y(7, 34, 12) == 34, \"For 7, 34, 12, it should return 34.\"",
        "num_ids": 1005,
        "indeed": true
    },
    {
        "number": 151,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    '''\n    \n    # initialize variables\n    total = 0\n    squares = []\n    \n    # loop through the list\n    for num in lst:\n        \n        # if the number is negative or not an integer, ignore it\n        if not isinstance(num, int) or num < 0:\n            continue\n        \n        # if the number is odd, square it and add it to the total\n        if num % 2!= 0:\n            total += num ** 2\n    \n    # return the total sum of squares\n    return total\n",
        "test": "assert double_the_difference([-1, -2, 0]) == 0",
        "num_ids": 1197,
        "indeed": true
    },
    {
        "number": 152,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    score = len(game)\n    guess_length = len(guess)\n    result = [0] * score\n    for i in range(score):\n        if game[i] == guess[i]:\n            result[i] = 0\n        else:\n            result[i] = abs(guess[i] - game[i])\n    return result",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 1872,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StUFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    \n    # Calculate the strength of each extension\n    strengths = []\n    for ext in extensions:\n        capital_letters = sum(1 for c in ext if c.isupper())\n        lowercase_letters = sum(1 for c in ext if c.islower())\n        strengths.append(capital_letters - lowercase_letters)\n    \n    # Find the strongest extension\n    max_strength = max(strengths)\n    strongest_ext = None\n    for i, ext in enumerate(extensions):\n        if strengths[i] == max_strength:\n            strongest_ext = ext\n            break\n    \n    # Return the class name and the strongest extension name\n    return class_name + '.' + strongest_ext",
        "test": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'",
        "num_ids": 2402,
        "indeed": true
    },
    {
        "number": 154,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    # Convert the second word to lowercase and check for substrings\n    if b.lower() in a.lower() or b.lower() in a[::-1].lower():\n        return True\n    # Check for rotations of the second word\n    for i in range(len(a) - len(b) + 1):\n        if a[i:i + len(b)].lower() == b.lower():\n            return True\n    return False",
        "test": "assert cycpattern_check(\"hello\", \"ell\") == True",
        "num_ids": 1173,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # convert the integer to a string and count the number of even and odd digits\n    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)",
        "test": "assert even_odd_count(123) == (1, 2)",
        "num_ids": 975,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    # define the mapping of integers to their corresponding roman numerals\n    roman_map = {\n        1000:'m',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    # initialize variables to store the roman numeral equivalent of the input number\n    result = ''\n    num = number\n\n    # iterate over the roman_map and add the corresponding roman numeral to the result\n    for value, letter in roman_map.items():\n        while num >= value:\n            result += letter\n            num -= value\n\n    # convert the result to lowercase\n    return result.lower()",
        "test": "assert int_to_mini_roman(19) == 'xix'",
        "num_ids": 2010,
        "indeed": true
    },
    {
        "number": 157,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\n    # Check if the lengths are valid\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    \n    # Check if the lengths form a right-angled triangle\n    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2:\n        return True\n    else:\n        return False",
        "test": "assert right_angle_triangle(1, 2, 3) == False, \"Expected False, got True\"",
        "num_ids": 1077,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in sorted(words):\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word",
        "test": "assert find_max([\"name\", \"enam\", \"game\"]) == \"enam\"",
        "num_ids": 1339,
        "indeed": true
    },
    {
        "number": 159,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                 the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    eaten = number + need\n    left = remaining - need\n    return [eaten, left]",
        "test": "assert eat(5, 6, 10) == [11, 4]",
        "num_ids": 1982,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # Initialize the result variable\n    result = 0\n\n    # Loop through the operator list\n    for i in range(len(operator)):\n        # Get the current operator and operand\n        current_op = operator[i]\n        current_op_operand = operand[i]\n\n        # Check if the current operator is addition (+) or subtraction (-)\n        if current_op == '+':\n            result += current_op_operand\n\n        elif current_op == '-':\n            result -= current_op_operand\n\n        # Check if the current operator is multiplication (*) or floor division (//)\n        elif current_op == '*':\n            result *= current_op_operand\n\n        elif current_op == '//':\n            result //= current_op_operand\n\n        # Check if the current operator is exponentiation (**)\n        elif current_op == '**':\n            result = result ** current_op_operand\n\n    # Return the final result\n    return result",
        "test": "assert do_algebra(['*', '+', '-'], [2, 3, 4, 5]) == -1",
        "num_ids": 2422,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\n    # Initialize variables\n    result = \"\"\n    is_letter = False\n\n    # Loop through each character in the string\n    for i in range(len(s)):\n        # If the current character is a letter, reverse its case\n        if s[i].isalpha():\n            result += s[i].upper() if s[i].islower() else s[i].lower()\n            is_letter = True\n        # If the current character is not a letter, keep it as it is\n        else:\n            result += s[i]\n\n    # If there are no letters in the string, reverse the string\n    if not is_letter:\n        result = s[::-1]\n\n    return result",
        "test": "assert solve(\"ab\") == \"AB\"",
        "num_ids": 1223,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    \n    if not text:\n        return None\n\n    md5_hash = hashlib.md5(text.encode('utf-8')).hexdigest()\n    return md5_hash",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
        "num_ids": 855,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    # Check if a is less than b\n    if a > b:\n        a, b = b, a\n\n    # Initialize an empty list to store the even digits\n    even_digits = []\n\n    # Loop through all the digits in the range from a to b (inclusive)\n    for digit in range(a, b+1):\n\n        # Check if the digit is even\n        if digit % 2 == 0:\n\n            # If the digit is even, add it to the list of even digits\n            even_digits.append(digit)\n\n    # Return the list of even digits in ascending order\n    return sorted(even_digits)",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 1216,
        "indeed": false
    }
]