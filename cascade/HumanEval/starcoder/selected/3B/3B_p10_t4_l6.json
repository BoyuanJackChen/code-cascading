[
    {
        "number": 0,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) is False"
    },
    {
        "number": 1,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    \"\"\"\n    # Remove spaces and convert to a list of characters\n    paren_string = paren_string.replace(\" \", \"\")\n    paren_list = list(paren_string)\n\n    # Initialize empty list to store the groups\n    groups = []\n\n    # Initialize variables to keep track of the current group and its state\n    group = \"\"\n    is_open = True\n\n    # Loop through the list of characters\n    for char in paren_list:\n        # If the character is an opening parenthesis, add it to the current group\n        if char == \"(\":\n            is_open = True\n            group += char\n        # If the character is a closing parenthesis, add it to the current group\n        elif char == \")\":\n            is_open = False\n            group += char\n        # If the character is a closing parenthesis but the current group is open, close the group and start a new one\n        elif is_open:\n            groups.append(group)\n            group = \"\"\n        # If the character is an opening parenthesis but the current group is not open, do nothing\n        else:\n            continue\n\n    # If there is any remaining characters in the current group, close it and add it to the groups list\n    if group:\n        groups.append(group)\n\n    # Return the groups list\n    return groups",
        "test": "assert separate_paren_groups('( ( ) )') == ['(())']"
    },
    {
        "number": 2,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    int_part = int(number)\n    decimal_part = number - int_part\n    \n    return decimal_part",
        "test": "assert truncate_number(3.5) == 0.5"
    },
    {
        "number": 3,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0  # initial balance is zero\n    \n    for operation in operations:\n        balance += operation\n        \n        # check if balance falls below zero\n        if balance < 0:\n            return True\n        \n    return False",
        "test": "assert below_zero([1, 2, 3]) == False"
    },
    {
        "number": 4,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "import statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = statistics.mean(numbers)\n    mad = statistics.mean(abs(x - mean) for x in numbers)\n    return mad",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0, \"Test case failed: mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) should return 1.0.\""
    },
    {
        "number": 5,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n\n    result = []\n    for i in range(len(numbers)):\n        if i == len(numbers) - 1:\n            result.append(numbers[i])\n        else:\n            result.append(numbers[i])\n            result.append(delimeter)\n    return result",
        "test": "assert intersperse([], 4) == []"
    },
    {
        "number": 6,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_levels = []\n    for paren_group in paren_string.split():\n        paren_level = 0\n        current_level = 0\n        for char in paren_group:\n            if char == '(':\n                current_level += 1\n            elif char == ')':\n                current_level -= 1\n            if current_level > paren_level:\n                paren_level = current_level\n        paren_levels.append(paren_level)\n    return paren_levels",
        "test": "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]"
    },
    {
        "number": 7,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    return [s for s in strings if substring in s]",
        "test": "assert filter_by_substring([], 'a') == []"
    },
    {
        "number": 8,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\n    # Calculate the sum and product of the list\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for num in numbers:\n        sum_of_numbers += num\n        product_of_numbers *= num\n\n    # Return a tuple of the sum and product\n    return (sum_of_numbers, product_of_numbers)",
        "test": "assert sum_product([]) == (0, 1)"
    },
    {
        "number": 9,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    \n    # Initialize list of rolling maximums\n    rolling_maxes = []\n\n    # Iterate through the input list\n    for i in range(len(numbers)):\n        \n        # Initialize current rolling maximum to current number\n        current_max = numbers[i]\n        \n        # Iterate through the window of previous numbers\n        for j in range(max(0, i-3), i):\n            \n            # Update current rolling maximum if it's greater than the previous maximum\n            if numbers[j] > current_max:\n                current_max = numbers[j]\n                \n        # Append the current rolling maximum to the output list\n        rolling_maxes.append(current_max)\n\n    return rolling_maxes\n",
        "test": "assert rolling_max([1]) == [1]"
    },
    {
        "number": 10,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    def longest_palindrome_suffix(s: str) -> str:\n        \"\"\" Find the longest palindrome suffix of a given string \"\"\"\n        for i in range(len(s)):\n            for j in range(i + 1, len(s) + 1):\n                if s[i:j] == s[i:j][::-1]:\n                    return s[i:j]\n\n    def reverse_substring(s: str, start: int, end: int) -> str:\n        \"\"\" Reverse a substring of a given string \"\"\"\n        return s[start:end][::-1]\n\n    def is_palindrome_suffix(s: str) -> bool:\n        \"\"\" Test if a given string is a palindrome \"\"\"\n        return s == s[::-1]\n\n    longest_suffix = longest_palindrome_suffix(string)\n    if longest_suffix is None:\n        return ''\n\n    prefix_suffix = longest_suffix[::-1]\n    suffix_length = len(prefix_suffix)\n\n    reverse_start = len(string) - suffix_length\n    reverse_end = len(string)\n    palindrome = string[:reverse_start] + reverse_substring(string, reverse_start, reverse_end) + prefix_suffix\n\n    return palindrome",
        "test": "assert make_palindrome('') == '','make_palindrome('') should return an empty string'"
    },
    {
        "number": 11,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(max(len(a), len(b))):\n        if i < len(a):\n            result += str(int(a[i]) ^ int(b[i]))\n        elif i < len(b):\n            result += str(int(b[i]))\n    return result",
        "test": "assert string_xor('0101010101010101', '1010101010101010') == '1111111111111111'"
    },
    {
        "number": 12,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n\n    longest_length = len(strings[0])\n    longest_string = strings[0]\n\n    for string in strings:\n        if len(string) > longest_length:\n            longest_length = len(string)\n            longest_string = string\n\n    return longest_string",
        "test": "assert longest([]) is None"
    },
    {
        "number": 13,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n    # Base case: if b is 0, then a is the greatest common divisor\n    if b == 0:\n        return a\n\n    # Recursive case: find the greatest common divisor of a and b\n    return greatest_common_divisor(b, a % b)",
        "test": "assert greatest_common_divisor(3, 5) == 1"
    },
    {
        "number": 14,
        "max_answer_num": 23,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes",
        "test": "assert all_prefixes('a') == ['a']"
    },
    {
        "number": 15,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return \" \".join(map(str, range(n+1)))",
        "test": "assert string_sequence(0) == '0'"
    },
    {
        "number": 16,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of \"\"\"\n    # Remove all spaces and convert to lowercase\n    string = string.replace(\" \", \"\").lower()\n    \n    # Initialize a set to store distinct characters\n    distinct_chars = set()\n    \n    # Iterate through each character in the string and add it to the set if it's not already there\n    for char in string:\n        if char not in distinct_chars:\n            distinct_chars.add(char)\n    \n    # Return the number of distinct characters found\n    return len(distinct_chars)",
        "test": "assert count_distinct_characters('xyzXYZ') == 3"
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    music_list = []\n    for i in range(len(music_string)):\n        if music_string[i] == 'o':\n            music_list.append(4)\n        elif music_string[i] == 'o|':\n            music_list.append(2)\n        elif music_string[i] == '.|':\n            music_list.append(1)\n    return music_list",
        "test": "assert parse_music('o o|.| o| o|.|.|.|.| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"
    },
    {
        "number": 18,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    counter = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            counter += 1\n    return counter",
        "test": "assert how_many_times('', 'a') == 0"
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 250,
        "answer": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n    # convert the string to a list of digits\n    digits = [int(digit) for digit in numbers.split()]\n\n    # sort the list in ascending order\n    digits.sort()\n\n    # convert the sorted list back to a string\n    sorted_numbers =''.join([str(digit) for digit in digits])\n\n    return sorted_numbers",
        "test": "assert sort_numbers('zero one two three four five six seven eight nine') == 'zero one two three four five six seven eight nine'"
    },
    {
        "number": 20,
        "max_answer_num": 20,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    if len(numbers) < 2:\n        raise ValueError(\"The input list should have at least two elements\")\n\n    numbers.sort()\n\n    if numbers[1] - numbers[0] < numbers[2] - numbers[1]:\n        return numbers[0], numbers[1]\n    else:\n        return numbers[1], numbers[2]",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)"
    },
    {
        "number": 21,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 100,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_value = min(numbers)\n    max_value = max(numbers)\n    if max_value == min_value:\n        return [0.0] * len(numbers)\n    return [(x - min_value) / (max_value - min_value) for x in numbers]",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]"
    },
    {
        "number": 22,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return list(filter(lambda x: isinstance(x, int), values))",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]"
    },
    {
        "number": 23,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)",
        "test": "assert strlen('') == 0"
    },
    {
        "number": 24,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    max_divisor = 1\n    \n    # Check if the number is divisible by 2\n    while n % 2 == 0:\n        max_divisor = 2\n        n //= 2\n        \n    # Check odd divisors\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            max_divisor = i\n            n //= i\n            \n    if n > 1:\n        max_divisor = n\n        \n    return max_divisor",
        "test": "assert largest_divisor(15) == 5"
    },
    {
        "number": 25,
        "max_answer_num": 30,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    def is_prime(num: int) -> bool:\n        \"\"\" Check if a given number is prime or not. \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def prime_factors(num: int) -> List[int]:\n        \"\"\" Find prime factors of a given number. \"\"\"\n        factors = []\n        for i in range(2, num + 1):\n            while num % i == 0 and is_prime(i):\n                num //= i\n                factors.append(i)\n        return factors\n\n    def product_of_factors(factors: List[int]) -> int:\n        \"\"\" Calculate the product of a list of prime factors. \"\"\"\n        product = 1\n        for factor in factors:\n            product *= factor\n        return product\n\n    def count_factors(num: int) -> List[int]:\n        \"\"\" Count the number of factors of a given number. \"\"\"\n        factors = prime_factors(num)\n        count = [factors.count(factor) for factor in factors]\n        return count\n\n    def factor_combinations(factors: List[int]) -> List[List[int]]:\n        \"\"\" Generate all possible combinations of factors. \"\"\"\n        combinations = []\n        for i in range(len(factors)):\n            for j in range(i+1, len(factors)):\n                combinations.append([factors[i], factors[j]])\n        return combinations\n\n    def factor_combinations_and_counts(factors: List[int]) -> List[List[int]]:\n        \"\"\" Combine all factor combinations with their counts. \"\"\"\n        combinations = factor_combinations(factors)\n        counts = count_factors(product_of_factors(factors))\n        for i in range(len(combinations)):\n            combinations[i].append(counts[i])\n        return combinations\n\n    factors = prime_factors(n)\n    factor_combinations_and_counts(factors)\n    return factors",
        "test": "assert factorize(70) == [2, 5, 7]"
    },
    {
        "number": 26,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # Create a dictionary to keep track of the frequency of each number in the list\n    freq = {}\n    \n    # Iterate over the numbers in the list\n    for num in numbers:\n        # If the number is already in the dictionary, increment its frequency\n        if num in freq:\n            freq[num] += 1\n        # Otherwise, add the number to the dictionary with a frequency of 1\n        else:\n            freq[num] = 1\n    \n    # Create a new list to store the unique numbers\n    unique_numbers = []\n    \n    # Iterate over the dictionary and add each unique number to the new list\n    for num in freq:\n        if freq[num] == 1:\n            unique_numbers.append(num)\n    \n    # Return the new list with unique numbers\n    return unique_numbers",
        "test": "assert remove_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4]"
    },
    {
        "number": 27,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()",
        "test": "assert flip_case('goodbye') == 'GOODBYE'"
    },
    {
        "number": 28,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)",
        "test": "assert concatenate([]) == ''"
    },
    {
        "number": 29,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]",
        "test": "assert filter_by_prefix([], 'a') == []"
    },
    {
        "number": 30,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]"
    },
    {
        "number": 31,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert is_prime(6) == False"
    },
    {
        "number": 32,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 220,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2!= 0:\n        raise ValueError(\"List xs must have even number of coefficients\")\n    max_coeff = max(abs(coeff) for coeff in xs)\n    for x in range(-max_coeff, max_coeff + 1):\n        if poly(xs, x) == 0:\n            return x\n    raise ValueError(\"No solution found for the given list xs\")",
        "test": "assert poly([1, 2], -0.5) == 1 + 2 * (-0.5)"
    },
    {
        "number": 33,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 220,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n\n    sorted_l = []\n    odd_indices = [i for i in range(len(l)) if i % 2!= 0]\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n\n    for index in odd_indices:\n        sorted_l.append(l[index])\n\n    for index in even_indices:\n        sorted_l.append(l[index])\n\n    sorted_l.sort()\n\n    for i in range(len(sorted_l)):\n        if i % 2!= 0:\n            sorted_l[i] = l[i]\n\n    return sorted_l",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3]"
    },
    {
        "number": 34,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 100,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    unique_l = []\n    for num in l:\n        if num not in unique_l:\n            unique_l.append(num)\n    return sorted(unique_l)",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]"
    },
    {
        "number": 35,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    return max(l)",
        "test": "assert max_element([1, 2, 3]) == 3"
    },
    {
        "number": 36,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i)[-1] == '7':\n                count += 1\n    return count",
        "test": "assert fizz_buzz(50) == 0"
    },
    {
        "number": 37,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 220,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    # Separate odd and even indices\n    odd_indices = [i for i, x in enumerate(l) if i % 2!= 0]\n    even_indices = [i for i, x in enumerate(l) if i % 2 == 0]\n\n    # Sort even indicies\n    even_indices.sort()\n\n    # Create a new list with the even indicies\n    sorted_list = [l[i] for i in even_indices]\n\n    # Concatenate odd and even indices to form a new list\n    new_list = [l[i] for i in odd_indices] + sorted_list\n\n    return new_list",
        "test": "assert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]"
    },
    {
        "number": 38,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def encode_cyclic(s: str) -> str:\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decode each group cycling back to its original order.\n    groups = [\"\".join(sorted(group)) for group in groups]\n    return \"\".join(groups)",
        "test": "assert decode_cyclic(\"\") == \"\""
    },
    {
        "number": 39,
        "max_answer_num": 30,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def is_prime(n: int) -> bool:\n    \"\"\"\n    Checks if a given number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef nth_prime_fibonacci(n: int) -> int:\n    \"\"\"\n    nth_prime_fibonacci returns the nth Fibonacci number that is also prime.\n    \"\"\"\n    if n <= 1:\n        return 2\n    a, b = 2, 3\n    for i in range(n - 1):\n        a, b = b, a + b\n    if is_prime(b):\n        return b\n    else:\n        return nth_prime_fibonacci(n - 1)\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    if n <= 1:\n        return 2\n    fib_n = nth_prime_fibonacci(n)\n    return fib_n - 1 if fib_n % 2 == 0 else fib_n",
        "test": "assert prime_fib(1) == 2"
    },
    {
        "number": 40,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    # Check if list has at least 3 elements\n    if len(l) < 3:\n        return False\n\n    # Sort the list in ascending order\n    l.sort()\n\n    # Iterate through the list\n    for i in range(len(l)-2):\n        # Check if there are at least 3 distinct elements between i and j\n        for j in range(i+1, len(l)-1):\n            if j!= i:\n                for k in range(j+1, len(l)):\n                    if k!= i and k!= j:\n                        if l[i] + l[j] + l[k] == 0:\n                            return True\n\n    return False",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False"
    },
    {
        "number": 41,
        "max_answer_num": 25,
        "max_test_num": 3,
        "total_product": 380,
        "answer": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\n    # Initialize the number of collisions to zero\n    num_collisions = 0\n\n    # Generate a random starting position for each car\n    left_cars = [0] * n\n    right_cars = [0] * n\n    for i in range(n):\n        # Generate a random starting position for each car\n        left_cars[i] = (i + 1) * 100\n        right_cars[i] = (n - i) * 100\n\n    # Initialize the car index variables\n    left_car_index = 0\n    right_car_index = n - 1\n\n    # Loop until no more collisions are detected\n    while left_car_index < right_car_index:\n        # Check if the current left car is colliding with the current right car\n        if left_cars[left_car_index] < right_cars[right_car_index]:\n            num_collisions += 1\n            # If the current left car is colliding, update the starting position of the left car\n            left_cars[left_car_index] += 2000\n            # If the current right car is colliding, update the starting position of the right car\n            right_cars[right_car_index] -= 2000\n        else:\n            # If the current left car is not colliding, simply move both cars one position to the right\n            left_cars[left_car_index] += 100\n            right_cars[right_car_index] -= 100\n\n        # Move the car index variables one position to the right\n        left_car_index += 1\n        right_car_index -= 1\n\n    # Return the number of collisions detected\n    return num_collisions",
        "test": "assert car_race_collision(1) == 0"
    },
    {
        "number": 42,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x + 1 for x in l]",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]"
    },
    {
        "number": 43,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
        "test": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False"
    },
    {
        "number": 44,
        "max_answer_num": 30,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base >= 10:\n        raise ValueError(\"base must be less than 10\")\n    num = \"\"\n    while x > 0:\n        num = str(x % base) + num\n        x //= base\n    return num",
        "test": "assert change_base(8, 3) == '22'"
    },
    {
        "number": 45,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h",
        "test": "assert triangle_area(5, 3) == 7.5"
    },
    {
        "number": 46,
        "max_answer_num": 30,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)",
        "test": "assert fib4(5) == 4"
    },
    {
        "number": 47,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\"\"\"\n    l.sort()  # sort the list in ascending order\n    n = len(l)  # get the length of the list\n    if n % 2 == 0:  # check if the length of the list is even\n        mid = n // 2\n        return (l[mid - 1] + l[mid]) / 2  # calculate median as average of two middle elements\n    else:  # if the length of the list is odd\n        mid = n // 2\n        return l[mid]  # return the middle element",
        "test": "assert median([3, 1, 2, 4, 5]) == 3"
    },
    {
        "number": 48,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n\n    # Remove spaces and convert to lowercase\n    text = text.replace(\" \", \"\").lower()\n\n    # Check if the string is empty\n    if not text:\n        return True\n\n    # Check if the first and last characters are the same\n    if text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    else:\n        return False",
        "test": "assert is_palindrome('zbcd') == False"
    },
    {
        "number": 49,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return modp(n // 2, p) * modp(n // 2, p) % p\n    else:\n        return (modp(n - 1, p) * 2) % p\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
        "test": "assert modp(0, 101) == 1"
    },
    {
        "number": 50,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    shift_dict = {\n        \"a\": \"a\",\n        \"b\": \"b\",\n        \"c\": \"c\",\n        \"d\": \"d\",\n        \"e\": \"e\",\n        \"f\": \"f\",\n        \"g\": \"g\",\n        \"h\": \"h\",\n        \"i\": \"i\",\n        \"j\": \"j\",\n        \"k\": \"k\",\n        \"l\": \"l\",\n        \"m\": \"m\",\n        \"n\": \"n\",\n        \"o\": \"o\",\n        \"p\": \"p\",\n        \"q\": \"q\",\n        \"r\": \"r\",\n        \"s\": \"s\",\n        \"t\": \"t\",\n        \"u\": \"u\",\n        \"v\": \"v\",\n        \"w\": \"w\",\n        \"x\": \"x\",\n        \"y\": \"y\",\n        \"z\": \"z\"\n    }\n    return \"\".join([shift_dict.get(ch, ch) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    shift_dict = {\n        \"a\": \"a\",\n        \"b\": \"b\",\n        \"c\": \"c\",\n        \"d\": \"d\",\n        \"e\": \"e\",\n        \"f\": \"f\",\n        \"g\": \"g\",\n        \"h\": \"h\",\n        \"i\": \"i\",\n        \"j\": \"j\",\n        \"k\": \"k\",\n        \"l\": \"l\",\n        \"m\": \"m\",\n        \"n\": \"n\",\n        \"o\": \"o\",\n        \"p\": \"p\",\n        \"q\": \"q\",\n        \"r\": \"r\",\n        \"s\": \"s\",\n        \"t\": \"t\",\n        \"u\": \"u\",\n        \"v\": \"v\",\n        \"w\": \"w\",\n        \"x\": \"x\",\n        \"y\": \"y\",\n        \"z\": \"z\"\n    }\n    return \"\".join([shift_dict.get(chr(((ord(ch) - ord(\"a\") + 26) % 26) + ord(\"a\")), ch) for ch in s])",
        "test": "assert decode_shift(\"z\") == \"z\""
    },
    {
        "number": 51,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    no_vowels = \"\"\n    for char in text:\n        if char not in vowels:\n            no_vowels += char\n    return no_vowels",
        "test": "assert remove_vowels('') == ''"
    },
    {
        "number": 52,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True"
    },
    {
        "number": 53,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y",
        "test": "assert add(2, 3) == 5"
    },
    {
        "number": 54,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\n    s0_set = set(s0)\n    s1_set = set(s1)\n\n    if len(s0_set)!= len(s1_set):\n        return False\n\n    return s0_set == s1_set",
        "test": "assert same_chars('eabcd', 'dddddddabc') == False"
    },
    {
        "number": 55,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)",
        "test": "assert fib(10) == 55"
    },
    {
        "number": 56,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "test": "assert correct_bracketing(\"<\") == False"
    },
    {
        "number": 57,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def monotonic(l: list) -> bool:\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n\n    Args:\n        l: List of integers.\n\n    Returns:\n        bool: True if list elements are monotonically increasing or decreasing.\n\n    Examples:\n        >>> monotonic([1, 2, 4, 20])\n        True\n        >>> monotonic([1, 20, 4, 10])\n        False\n        >>> monotonic([4, 1, 0, -10])\n        True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0] < l[1]:\n        for i in range(1, len(l)):\n            if l[i] <= l[i-1]:\n                return False\n        return True\n    elif l[0] > l[1]:\n        for i in range(1, len(l)):\n            if l[i] >= l[i-1]:\n                return False\n        return True\n    else:\n        return True",
        "test": "assert monotonic([1, 20, 4, 10]) == False"
    },
    {
        "number": 58,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # create a set to store unique elements from both lists\n    unique = set(l1 + l2)\n    # create a set to store common elements\n    common_set = set()\n    # iterate over the unique elements and check if they are present in both lists\n    for element in unique:\n        if element in l1 and element in l2:\n            common_set.add(element)\n    # convert the set to a list and sort it in ascending order\n    common_list = sorted(list(common_set))\n    return common_list\n",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]"
    },
    {
        "number": 59,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def is_prime(n: int) -> bool:\n    \"\"\"Return True if n is a prime number, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        raise ValueError(\"n must be greater than or equal to 2\")\n    if is_prime(n):\n        raise ValueError(\"n must be greater than 1 and not a prime\")\n\n    max_factor = 1\n    for i in range(2, n + 1):\n        if n % i == 0 and is_prime(i):\n            max_factor = i\n\n    return max_factor",
        "test": "assert largest_prime_factor(2048) == 2"
    },
    {
        "number": 60,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_to_n(n: int) -> int:\n    \"\"\"\n    This function returns the sum of numbers from 1 to n.\n    \n    Args:\n        n (int): The number to calculate the sum of.\n        \n    Returns:\n        int: The sum of numbers from 1 to n.\n    \"\"\"\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)",
        "test": "assert sum_to_n(30) == 465"
    },
    {
        "number": 61,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\"\n    brackets is a string of \"(\" and \")\".\n    Returns True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\n    stack = []\n\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n\n    return not stack",
        "test": "assert correct_bracketing(\"(\") == False"
    },
    {
        "number": 62,
        "max_answer_num": 20,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def derivative(xs: list) -> list:\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    n = len(xs)\n    derivative_list = []\n    for i in range(1, n):\n        derivative_list.append(xs[i] * i)\n    return derivative_list",
        "test": "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]"
    },
    {
        "number": 63,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
        "test": "assert fibfib(1) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n            if char.islower() and s[-1] == 'y':\n                count += 1\n    return count\n",
        "test": "assert vowels_count(\"abcde\") == 2"
    },
    {
        "number": 65,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    # Find the number of digits in the integer x\n    num_digits = len(str(x))\n    # If shift is greater than the number of digits, reverse the digits\n    if shift > num_digits:\n        reversed_x = str(x)[::-1]\n        return circular_shift(int(reversed_x), shift - num_digits)\n    else:\n        # Shift the digits right by shift\n        shifted_x = str(x)[shift:] + str(x)[:shift]\n        return shifted_x",
        "test": "assert circular_shift(12, 1) == \"21\""
    },
    {
        "number": 66,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def digitSum(s):\n    \"\"\"\n    Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    upper_chars = [ord(c) for c in s if c.isupper()]\n    return sum(upper_chars)",
        "test": "assert digitSum(\"\") == 0"
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\n    # Split the string into apple and orange counts\n    apples_str, oranges_str = s.split()\n    apples, oranges = int(apples_str), int(oranges_str)\n\n    # Calculate the difference between the total number of fruits and the apple and orange counts\n    total_fruits = n - apples - oranges\n\n    # Calculate the number of mango fruits\n    mango_count = total_fruits // 3\n    if total_fruits % 3 == 0:\n        mango_count -= 1\n\n    return mango_count",
        "test": "assert fruit_distribution(\"100 apples and 1 oranges\",120) == 19"
    },
    {
        "number": 68,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n    if not arr:\n        return []\n\n    even_nodes = [node for node in arr if node % 2 == 0]\n\n    if not even_nodes:\n        return []\n\n    even_nodes.sort(key=lambda x: (x, arr.index(x)))\n\n    return [even_nodes[0], arr.index(even_nodes[0])]",
        "test": "assert pluck([]) == []"
    },
    {
        "number": 69,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    max_val = -1\n    max_count = 0\n    for num in lst:\n        if num > 0 and lst.count(num) >= num:\n            if lst.count(num) > max_count:\n                max_count = lst.count(num)\n                max_val = num\n    return max_val",
        "test": "assert search([5, 5, 4, 4, 4]) == -1"
    },
    {
        "number": 70,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sorted_lst = []\n    while lst:\n        # find minimum value in list\n        min_val = min(lst)\n        # remove the minimum value from the list\n        lst.remove(min_val)\n        # add the minimum value to the sorted list\n        sorted_lst.append(min_val)\n        # if there is any value left, sort it in the strange way\n        if lst:\n            max_val = max(lst)\n            lst.remove(max_val)\n            sorted_lst.append(max_val)\n    return sorted_lst",
        "test": "assert strange_sort_list([]) == []"
    },
    {
        "number": 71,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    return round(area, 2)",
        "test": "assert triangle_area(3, 4, 5) == 6.00, \"Expected 6.00, got {}\".format(triangle_area(3, 4, 5))"
    },
    {
        "number": 72,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def will_it_fly(q, w):\n    def is_palindrome(lst):\n        return lst == lst[::-1]\n\n    def sum_of_elements(lst):\n        return sum(lst)\n\n    if is_palindrome(q) and sum_of_elements(q) <= w:\n        return True\n    else:\n        return False",
        "test": "assert will_it_fly([3, 2, 3], 1) == False"
    },
    {
        "number": 73,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    # Initialize the minimum number of changes\n    min_changes = float('inf')\n\n    # Iterate through all possible combinations of elements in the array\n    for i in range(1, len(arr)):\n        for j in range(i, len(arr)):\n            # Calculate the sum of the elements in the range\n            sum_range = sum(arr[i:j+1])\n\n            # If the sum is odd, the array is not palindromic\n            if sum_range % 2!= 0:\n                continue\n\n            # Calculate the number of changes to make the array palindromic\n            num_changes = sum_range // 2\n\n            # Update the minimum number of changes if the current combination is smaller\n            min_changes = min(min_changes, num_changes)\n\n    # Return the minimum number of changes required\n    return min_changes",
        "test": "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1"
    },
    {
        "number": 74,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\n    lst1_total_chars = sum([len(s) for s in lst1])\n    lst2_total_chars = sum([len(s) for s in lst2])\n\n    if lst1_total_chars < lst2_total_chars:\n        return lst1\n    else:\n        return lst2",
        "test": "assert total_match([], []) == []"
    },
    {
        "number": 75,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    primes = [2, 3, 5]\n    if a < 100:\n        for prime in primes:\n            if a % prime == 0:\n                return True\n        return False\n    else:\n        return False",
        "test": "assert is_multiply_prime(200) == False, \"200 is a multiplication of 3 prime numbers.\""
    },
    {
        "number": 76,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if n == 1:\n        return x == 1\n    else:\n        result = n ** int(x / n)\n        if result == x:\n            return True\n        else:\n            return False",
        "test": "assert is_simple_power(3, 2) == False, \"is_simple_power(3, 2) => False\""
    },
    {
        "number": 77,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    \n    # Using trial division method to check if a is a cube\n    for i in range(1, a):\n        if a % i == 0:\n            return False\n    return True",
        "test": "assert iscube(2) == False"
    },
    {
        "number": 78,
        "max_answer_num": 40,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is a prime number, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    count = 0\n    for char in num:\n        if char in '0123456789ABCDEF':\n            if is_prime(int(char, 16)):\n                count += 1\n    return count",
        "test": "assert hex_key(\"AB\") == 1"
    },
    {
        "number": 79,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return \"db\" + binary + \"db\"",
        "test": "assert decimal_to_binary(15) == \"db1111db\""
    },
    {
        "number": 80,
        "max_answer_num": 40,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    \n    # Convert the string to a list\n    s_list = list(s)\n    \n    # Loop through the list and check if the length is at least 3\n    if len(s_list) < 3:\n        return False\n    \n    # Loop through the list and check if the 3 consecutive letters are distinct\n    for i in range(len(s_list)-2):\n        if s_list[i] == s_list[i+1]:\n            return False\n    \n    # If all the conditions are true, return True\n    return True",
        "test": "assert is_happy(\"aa\") == False"
    },
    {
        "number": 81,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n             4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades\n",
        "test": "assert numerical_letter_grade([0.0, 0.0, 0.0, 0.0, 0.0]) == ['D-', 'D-', 'D-', 'D-', 'D-']"
    },
    {
        "number": 82,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    if len(string) == 1:\n        return True\n    else:\n        for i in range(2, int(len(string)**0.5)+1):\n            if len(string) % i == 0:\n                return False\n        return True",
        "test": "assert prime_length('Hello') == True"
    },
    {
        "number": 83,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 390,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, 10**n+1):\n        # check if the number starts with 1\n        if i//10**(n-1) == 1:\n            # check if the number ends with 1\n            if i%10**(n-1) == 1:\n                count += 1\n    return count",
        "test": "assert starts_one_ends(2) == 1, \"starts_one_ends(2) should return 1\""
    },
    {
        "number": 84,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 300,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n                 Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n             a string of binary number\n    \"\"\"\n    \n    total_sum = 0\n    while N > 0:\n        total_sum += N % 10\n        N = N // 10\n        \n    return str(total_sum)",
        "test": "assert solve(1000) == \"1\""
    },
    {
        "number": 85,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    # initialize the sum variable to 0\n    sum = 0\n    \n    # loop through each element in the list\n    for i in range(len(lst)):\n        # check if the element is even and the index is odd\n        if lst[i] % 2 == 0 and i % 2!= 0:\n            # add the element to the sum\n            sum += lst[i]\n    \n    # return the sum of even elements at odd indices\n    return sum",
        "test": "assert add([2, 4, 6, 8]) == 12"
    },
    {
        "number": 86,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n    words = s.split()\n    new_words = []\n\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        new_words.append(sorted_word)\n\n    new_s =''.join(new_words)\n    return new_s",
        "test": "assert anti_shuffle('') == ''"
    },
    {
        "number": 87,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 120,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    \n    rows = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                rows.append((i, j))\n    \n    rows.sort(key=lambda x: (x[0], -x[1]))\n    return rows",
        "test": "assert get_row([], 1) == []"
    },
    {
        "number": 88,
        "max_answer_num": 30,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Copy the original array\n    arr = array.copy()\n    # Sort the array in ascending order\n    arr.sort()\n    # Determine the sorting order\n    if arr[0] + arr[-1] % 2 == 0:\n        # Sort the array in descending order\n        arr.reverse()\n    return arr",
        "test": "assert sort_array([5]) == [5]"
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    result = ''\n    for char in s:\n        if char.isalpha():\n            index = alphabet.index(char.lower())\n            shifted_index = (index - 2) % 26\n            result += alphabet[shifted_index]\n        else:\n            result += char\n    return result",
        "test": "assert encrypt('et') == 'ix'"
    },
    {
        "number": 90,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    \n    if not lst:\n        return None\n    \n    smallest = lst[0]\n    second_smallest = float('inf')\n    \n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    if second_smallest == float('inf'):\n        return None\n    \n    return second_smallest",
        "test": "assert next_smallest([]) == None"
    },
    {
        "number": 91,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\n    boredom_count = 0\n\n    # Split the input string into sentences\n    sentences = S.split('.')\n    sentences.extend(S.split('?'))\n    sentences.extend(S.split('!'))\n\n    # Iterate through each sentence\n    for sentence in sentences:\n        # Split the sentence into words\n        words = sentence.split()\n\n        # Check if the first word is \"I\"\n        if words[0] == 'I':\n            boredom_count += 1\n\n    return boredom_count",
        "test": "assert is_bored(\"Hello world\") == 0"
    },
    {
        "number": 92,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n\n    if not all(isinstance(num, int) for num in [x, y, z]):\n        return False\n\n    if any(num == x + y or num == x + z or num == y + z for num in [x, y, z]):\n        return True\n    else:\n        return False",
        "test": "assert any_int(3.6, -2.2, 2) == False"
    },
    {
        "number": 93,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    \n    encoded_message = ''\n    for letter in message:\n        if letter.isalpha():\n            if letter in vowels:\n                letter_ahead = alphabet[alphabet.index(letter) + 2]\n                encoded_message += letter_ahead.upper()\n            else:\n                encoded_message += letter.swapcase()\n                \n    return encoded_message",
        "test": "assert encode('test') == 'TGST'"
    },
    {
        "number": 94,
        "max_answer_num": 40,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def is_prime(n):\n    \"\"\"Returns True if n is a prime number, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef largest_prime(lst):\n    \"\"\"Returns the largest prime value in the list.\"\"\"\n    largest = None\n    for num in lst:\n        if is_prime(num):\n            if largest is None or num > largest:\n                largest = num\n    return largest\n\n\ndef sum_digits(n):\n    \"\"\"Returns the sum of the digits of n.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    largest_prime_value = largest_prime(lst)\n    return sum_digits(largest_prime_value)\n",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10"
    },
    {
        "number": 95,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\n    # Check if the given dictionary is empty\n    if not dict:\n        return False\n\n    # Convert all keys to strings\n    converted_dict = {str(key): value for key, value in dict.items()}\n\n    # Check if all keys are strings in lower case\n    lower_case_keys = all(key.islower() for key in converted_dict)\n\n    # Check if all keys are strings in upper case\n    upper_case_keys = all(key.isupper() for key in converted_dict)\n\n    # Return the result\n    return lower_case_keys and upper_case_keys",
        "test": "assert check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) == False"
    },
    {
        "number": 96,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    if n == 0:\n        return []\n    prime_numbers = []\n    for i in range(2, n):\n        if is_prime(i) and i < n:\n            prime_numbers.append(i)\n    return prime_numbers\n",
        "test": "assert count_up_to(0) == []"
    },
    {
        "number": 97,
        "max_answer_num": 40,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Get the unit digits of both input numbers\n    a_unit = a % 10\n    b_unit = b % 10\n    # Calculate the product of unit digits\n    product = a_unit * b_unit\n    return product",
        "test": "assert multiply(2020, 1851) == 0"
    },
    {
        "number": 98,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(1, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    return count",
        "test": "assert count_upper('abcdefg') == 0"
    },
    {
        "number": 99,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    # remove non-numeric characters and convert to float\n    value = float(value.replace(',', ''))\n\n    # check for equidistant integers\n    if abs(value - int(value)) < abs(value - int(value) - 1):\n        return int(value)\n    else:\n        return int(value) + 1",
        "test": "assert closest_integer(\"10\") == 10"
    },
    {
        "number": 100,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    stones_in_level = []\n    for i in range(n):\n        if i == 0:\n            stones_in_level.append(n)\n        else:\n            next_odd_number = 2 * i + 1 if i % 2 == 1 else 2 * i\n            next_even_number = 2 * i + 2 if i % 2 == 0 else 2 * i\n            stones_in_level.append(min(next_odd_number, next_even_number))\n    return stones_in_level",
        "test": "assert make_a_pile(0) == []"
    },
    {
        "number": 101,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    words = s.split(', ')\n    return words",
        "test": "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"
    },
    {
        "number": 102,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Initialize variables\n    max_even = -1\n    \n    # Iterate over the range of numbers in the range [x, y]\n    for num in range(x, y+1, 2):\n        if num > max_even:\n            max_even = num\n            \n    # Return the biggest even number in the range [x, y]\n    return max_even",
        "test": "assert choose_num(13, 12) == -1"
    },
    {
        "number": 103,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    \n    if n > m:\n        return -1\n    \n    # Calculate the average\n    avg = (n + m) / 2\n    \n    # Round the average to the nearest integer\n    avg = round(avg)\n    \n    # Convert the rounded average to binary\n    binary_avg = bin(avg)\n    \n    return binary_avg",
        "test": "assert rounded_avg(7, 5) == -1"
    },
    {
        "number": 104,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    \n    # Helper function to check if a number has even digits\n    def has_even_digit(num):\n        return any(int(d) % 2 == 0 for d in str(num))\n    \n    # Filter out numbers that have even digits and sort them in increasing order\n    result = sorted([num for num in x if not has_even_digit(num)])\n    \n    return result",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]"
    },
    {
        "number": 105,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n             -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n             -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n      \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n      \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n             -> sort arr -> [-1, 1, 55]\n             -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # Create a dictionary to map each number to its name\n    digits = {'1': 'One', '2': 'Two', '3': 'Three', '4': 'Four', '5': 'Five', '6': 'Six', '7': 'Seven', '8': 'Eight', '9': 'Nine'}\n\n    # Filter the array to only include numbers between 1 and 9\n    arr = [x for x in arr if 1 <= x <= 9]\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Reverse the array\n    arr.reverse()\n\n    # Replace each digit with its corresponding name\n    result = [digits.get(str(x), 'Strange number') for x in arr]\n\n    # Return the sorted and reversed array\n    return result",
        "test": "assert by_length([]) == []"
    },
    {
        "number": 106,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = [1] * n\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            result[i-1] = i * result[i-2]\n        else:\n            result[i-1] = sum(range(1, i+1))\n    return result\n\nprint(f(5))",
        "test": "assert f(0) == []"
    },
    {
        "number": 107,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 220,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    # Initialize the count of even and odd palindromes\n    even_count = 0\n    odd_count = 0\n    \n    # Iterate from 1 to n\n    for num in range(1, n+1):\n        # Check if the number is a palindrome\n        num_str = str(num)\n        if num_str == num_str[::-1]:\n            # Check if the number is even or odd\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)",
        "test": "assert even_odd_palindrome(3) == (1, 2)"
    },
    {
        "number": 108,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num >= 0:\n            num_str = str(abs(num))\n            digit_sum = sum(int(digit) for digit in num_str)\n            if digit_sum > 0:\n                count += 1\n    return count",
        "test": "assert count_nums([]) == 0"
    },
    {
        "number": 109,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    \n    if not arr:\n        return True\n\n    n = len(arr)\n    min_index = 0\n    max_index = n - 1\n\n    while min_index < max_index:\n        if arr[min_index] > arr[max_index]:\n            min_index += 1\n            max_index -= 1\n        else:\n            min_index += 1\n\n    if min_index == max_index:\n        return True\n\n    return False",
        "test": "assert move_one_ball([]) == True"
    },
    {
        "number": 110,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    \n    # Check if the two lists have the same length\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n    \n    # Sort the two lists\n    lst1.sort()\n    lst2.sort()\n    \n    # Iterate over the sorted lists\n    i = j = 0\n    while i < len(lst1) and j < len(lst2):\n        if lst1[i] % 2!= 0 and lst2[j] % 2 == 0:\n            # Exchange the elements and continue the loop\n            lst1[i], lst2[j] = lst2[j], lst1[i]\n            i += 1\n            j += 1\n        elif lst1[i] % 2 == 0 and lst2[j] % 2!= 0:\n            # Move to the next element of lst1\n            i += 1\n        else:\n            # Move to the next element of lst2\n            j += 1\n    \n    # Check if all the elements of lst1 are even\n    for num in lst1:\n        if num % 2!= 0:\n            return \"NO\"\n    \n    # If all the elements of lst1 are even, return \"YES\"\n    return \"YES\"",
        "test": "assert exchange([1, 3, 5, 7], [2, 4, 6, 8, 10]) == \"NO\""
    },
    {
        "number": 111,
        "max_answer_num": 40,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if not test:\n        return {}\n\n    letter_count = {}\n    for letter in test.split():\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n\n    max_count = max(letter_count.values())\n    max_letters = [letter for letter, count in letter_count.items() if count == max_count]\n\n    return {letter: max_count for letter in max_letters}",
        "test": "assert histogram('b b b b a') == {'b': 4}"
    },
    {
        "number": 112,
        "max_answer_num": 30,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Remove the characters in c from the end of s\n    for char in c:\n        s = s.replace(char, '')\n    # Check if the resulting string is palindrome\n    if s == s[::-1]:\n        return (s, True)\n    else:\n        return (s, False)",
        "test": "assert reverse_delete(\"abcdedcba\", \"ab\") == ('cdedc', True)"
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    def count_odd_digits(s):\n        return sum(1 for digit in s if int(digit)%2!=0)\n\n    result = []\n    for i, s in enumerate(lst):\n        result.append(f\"the number of odd elements {count_odd_digits(s)}n the str{i+1}ng {i+1} of the {i+1}nput.\")\n    return result",
        "test": "assert odd_count(['3',\"11111111\"]) == ["
    },
    {
        "number": 114,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 220,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    # Initialize the minimum sum to the maximum integer value\n    min_sum = float('inf')\n\n    # Loop through each element in the array\n    for i in range(len(nums)):\n        # Initialize the current sum to 0\n        current_sum = 0\n\n        # Loop through each element in the array starting from i+1\n        for j in range(i+1, len(nums)+1):\n            # Add all the elements in the sub-array to the current sum\n            current_sum += nums[j-1]\n\n            # Update the minimum sum if the current sum is less than the minimum sum\n            if current_sum < min_sum:\n                min_sum = current_sum\n\n    # Return the minimum sum\n    return min_sum",
        "test": "assert minSubArraySum([-1, -2, -3]) == -6"
    },
    {
        "number": 115,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "def max_fill(grid, capacity):\n    import math\n\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n    def dfs(grid, bucket_capacity, n, m, i, j):\n        if n == 0 and m == 0:\n            return 0\n        if n == 0 or m == 0:\n            return float('inf')\n\n        if grid[i][j] == 0:\n            return dfs(grid, bucket_capacity, n - 1, m, i, j)\n\n        if n > 0:\n            for x in range(i - 1, -1, -1):\n                if grid[x][j] == 1:\n                    continue\n                if dfs(grid, bucket_capacity, n - 1, m, x, j)!= float('inf'):\n                    return 1 + dfs(grid, bucket_capacity, n - 1, m, x, j)\n        if m > 0:\n            for y in range(j - 1, -1, -1):\n                if grid[i][y] == 1:\n                    continue\n                if dfs(grid, bucket_capacity, n, m - 1, i, y)!= float('inf'):\n                    return 1 + dfs(grid, bucket_capacity, n, m - 1, i, y)\n\n        return float('inf')\n\n    def bfs(grid, bucket_capacity, n, m, i, j):\n        queue = [(i, j)]\n        filled = 0\n        while queue:\n            x, y = queue.pop(0)\n            if x == n - 1 and y == m - 1:\n                filled += 1\n            if grid[x][y] == 0:\n                continue\n            if n > 0:\n                if x > 0 and grid[x - 1][y] == 1:\n                    continue\n                for _ in range(1, bucket_capacity + 1):\n                    queue.append((x - 1, y))\n            if m > 0:\n                if y > 0 and grid[x][y - 1] == 1:\n                    continue\n                for _ in range(1, bucket_capacity + 1):\n                    queue.append((x, y - 1))\n        return filled\n\n    n = len(grid)\n    m = len(grid[0])\n\n    if dfs(grid, capacity, n, m, 0, 0) == float('inf'):\n        print(0)\n        return 0\n\n    print(bfs(grid, capacity, n, m, 0, 0))",
        "test": "assert max_fill([[0,0,0], [0,0,0]], 5) == 0"
    },
    {
        "number": 116,
        "max_answer_num": 20,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n    # Helper function to compare two numbers based on their binary representation\n    def compare(a, b):\n        # Convert numbers to binary strings\n        a_str = bin(a)[2:]\n        b_str = bin(b)[2:]\n        # Compare the number of ones in the binary strings\n        num_ones_a = sum(a_str.count(str(i)) for i in range(1, 8))\n        num_ones_b = sum(b_str.count(str(i)) for i in range(1, 8))\n        if num_ones_a!= num_ones_b:\n            return num_ones_a - num_ones_b\n        # If the numbers have the same number of ones, compare their decimal values\n        return a - b\n\n    # Sort the array using the compare function\n    arr.sort(key=lambda x: (x.bit_length(), x))\n    return arr",
        "test": "assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]"
    },
    {
        "number": 117,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Remove any non-letter and non-space characters from the string\n    s = ''.join(c for c in s if c.isalpha() or c.isspace())\n    \n    # Split the string into words\n    words = s.split()\n    \n    # Initialize an empty list to store the selected words\n    selected_words = []\n    \n    # Iterate through the words and check if they have exactly n consonants\n    for word in words:\n        if sum(1 for c in word if c.lower() in 'bcdfghjklmnpqrstvwxyz') == n:\n            selected_words.append(word)\n    \n    return selected_words",
        "test": "assert select_words(\"simple white space\", 2) == []"
    },
    {
        "number": 118,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def get_closest_vowel(word):\n    \"\"\"\n    You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n    \n    You may assume that the given string contains English letter only.\n    \n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels.remove('o') # remove 'o' because it's already included as a vowel\n    \n    for i in range(1, len(word)-1):\n        if word[i-1].lower() in vowels and word[i+1].lower() in vowels:\n            for j in range(len(vowels)):\n                if abs(ord(word[i-1].lower()) - ord(vowels[j].lower())) < abs(ord(word[i+1].lower()) - ord(vowels[j].lower())):\n                    return vowels[j]\n                \n    return \"\"",
        "test": "assert get_closest_vowel(\"ab\") == \"\""
    },
    {
        "number": 119,
        "max_answer_num": 22,
        "max_test_num": 5,
        "total_product": 220,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    # Create a list of characters from both strings\n    chars = lst[0] + lst[1]\n\n    # Initialize a counter for open parentheses\n    open_parens = 0\n\n    # Iterate through the characters\n    for char in chars:\n        # If the character is an open parentheses, increment the counter\n        if char == '(':\n            open_parens += 1\n        # If the character is a close parentheses, decrement the counter\n        else:\n            open_parens -= 1\n        # If the counter becomes negative, the string is not good\n            if open_parens < 0:\n                return 'No'\n\n    # If the loop completes without finding any negative values, the string is good\n    return 'Yes'",
        "test": "assert match_parens([')', ')']) == 'No'"
    },
    {
        "number": 120,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]",
        "test": "assert maximum([], 10) == []"
    },
    {
        "number": 121,
        "max_answer_num": 30,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    \n    # Initialize a variable to store the sum of odd elements in even positions\n    even_sum = 0\n    \n    # Loop through the list of integers\n    for i in range(len(lst)):\n        # Check if the current integer is odd and in an even position\n        if lst[i] % 2 == 1 and i % 2 == 0:\n            # Add the odd element to the sum\n            even_sum += lst[i]\n    \n    # Return the sum of odd elements in even positions\n    return even_sum",
        "test": "assert solution([5, 8, 7, 1]) == 12"
    },
    {
        "number": 122,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n    if k > len(arr):\n        return 0\n\n    arr = sorted(arr[:k])\n    sum_of_two_digits = 0\n\n    for num in arr:\n        if len(str(num)) <= 2:\n            sum_of_two_digits += num\n\n    return sum_of_two_digits",
        "test": "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 0) == 0"
    },
    {
        "number": 123,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 290,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n           1. Collatz(1) is [1].\n           2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    collatz_sequence = []\n    current_number = n\n    collatz_sequence.append(current_number)\n    \n    while current_number!= 1:\n        if current_number % 2 == 0:\n            current_number = current_number // 2\n        else:\n            current_number = 3 * current_number + 1\n        collatz_sequence.append(current_number)\n    \n    odd_numbers = sorted([x for x in collatz_sequence if x % 2!= 0])\n    return odd_numbers",
        "test": "assert get_odd_collatz(1) == [1]"
    },
    {
        "number": 124,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n\n    def is_valid_date(date_str):\n        \"\"\"Check if the date string is in the format: mm-dd-yyyy\"\"\"\n        try:\n            month, day, year = map(int, date_str.split('-'))\n            return 1 <= month <= 12 and 1 <= day <= 31\n        except ValueError:\n            return False\n\n    def is_valid_month(month):\n        \"\"\"Check if the month is between 1 and 12\"\"\"\n        return 1 <= month <= 12\n\n    def is_valid_day(day, month):\n        \"\"\"Check if the day is between 1 and 31 for the given month\"\"\"\n        if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n            return 1 <= day <= 31\n        elif month == 4 or month == 6 or month == 9 or month == 11:\n            return 1 <= day <= 30\n        else:\n            return 1 <= day <= 29\n\n    def is_valid_year(year):\n        \"\"\"Check if the year is between 1900 and 2100\"\"\"\n        return 1900 <= year <= 2100\n\n    if not date or not date.strip():\n        return False\n\n    date_parts = date.split('-')\n    if len(date_parts)!= 3:\n        return False\n\n    month, day, year = map(int, date_parts)\n    if not is_valid_month(month) or not is_valid_day(day, month) or not is_valid_year(year):\n        return False\n\n    return is_valid_date(date)",
        "test": "assert valid_date('04-0-2040') == False"
    },
    {
        "number": 125,
        "max_answer_num": 21,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "def split_words(txt):\n    words = txt.split()\n    if len(words) == 1:\n        if ',' in txt:\n            return words[0].split(',')\n        else:\n            for i in range(ord('a'), ord('z')+1):\n                if (i + 1) % 2 == 1:\n                    return [(chr(i) + word for word in words)]\n            return [word for word in words]\n    else:\n        return words\n",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]"
    },
    {
        "number": 126,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    if len(lst) <= 1:\n        return True\n    \n    prev = lst[0]\n    for num in lst[1:]:\n        if num < prev:\n            return False\n        elif prev == num:\n            return False\n        prev = num\n    \n    return True",
        "test": "assert is_sorted([5]) == True"
    },
    {
        "number": 127,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n\n    if start1 > start2:\n        start = start1\n    else:\n        start = start2\n\n    if end1 < end2:\n        end = end1\n    else:\n        end = end2\n\n    if start < end:\n        for i in range(start, end + 1):\n            if is_prime(abs(i - start)):\n                return \"YES\"\n    return \"NO\"",
        "test": "assert intersection((-3, -1), (-5, 5)) == \"YES\""
    },
    {
        "number": 128,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    total_sum = 0\n    total_product = 1\n    for num in arr:\n        sign = 1 if num > 0 else -1 if num < 0 else 0\n        total_sum += abs(num)\n        total_product *= sign\n    return total_sum * total_product",
        "test": "assert prod_signs([]) == None"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 220,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n    def helper(i, j, k, memo):\n        if (i, j) in memo:\n            return memo[(i, j)]\n\n        if i == 0 and j == 0:\n            memo[(i, j)] = [grid[i][j]]\n            return memo[(i, j)]\n\n        if i == 0:\n            memo[(i, j)] = [min(helper(i, j - 1, k, memo), helper(i, j - 2, k, memo))] + [grid[i][j]]\n            return memo[(i, j)]\n\n        if j == 0:\n            memo[(i, j)] = [min(helper(i - 1, j, k, memo), helper(i - 2, j, k, memo))] + [grid[i][j]]\n            return memo[(i, j)]\n\n        memo[(i, j)] = [min(helper(i - 1, j, k, memo), helper(i - 2, j, k, memo))] + [min(helper(i, j - 1, k, memo), helper(i, j - 2, k, memo))] + [grid[i][j]]\n        return memo[(i, j)]\n\n    return helper(len(grid) - 1, len(grid[0]) - 1, k, {})",
        "test": "assert minPath([[5,9,3], [4,1,6], [7,8,2]], 1) == [1]"
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 330,
        "answer": "def tri(n):\n    \"\"\"\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n\n    # initialize the list to store the tribonacci sequence\n    tri_seq = [1]\n\n    # iterate through the sequence to calculate the first n + 1 numbers\n    for i in range(2, n + 1):\n        if i % 2 == 0:  # even\n            tri_seq.append(1 + i / 2)\n        else:  # odd\n            tri_seq.append(tri_seq[i - 1] + tri_seq[i - 2] + tri_seq[i - 3] + 1)\n\n    return tri_seq",
        "test": "assert tri(10) == [1, 3, 21, 127, 783, 3344, 14391, 52257, 188782, 588393], \"Test failed for tri(10)\""
    },
    {
        "number": 131,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n    # Check if all digits are even\n    if all(int(d) % 2 == 0 for d in str(n)):\n        return 0\n\n    # Calculate the product of odd digits\n    odd_product = 1\n    for digit in str(n):\n        if int(digit) % 2!= 0:\n            odd_product *= int(digit)\n\n    return odd_product",
        "test": "assert digits(1) == 1"
    },
    {
        "number": 132,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_nested(string):\n    brackets = set(['[', ']', '{', '}', '(', ')'])\n    stack = []\n    \n    for char in string:\n        if char in brackets:\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    \n    return len(stack) == 0",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False"
    },
    {
        "number": 133,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return round(sum([int(x**2) for x in lst]), 0)\n",
        "test": "assert sum_squares([1,2,3]) == 14"
    },
    {
        "number": 134,
        "max_answer_num": 40,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha():\n        if len(txt) == 1 or not txt[-2].isalpha():\n            return True\n    return False",
        "test": "assert check_if_last_char_is_a_letter(\"apple pi e\") == True"
    },
    {
        "number": 135,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] >= arr[j]:\n                return j\n    return -1",
        "test": "assert can_arrange([]) == -1"
    },
    {
        "number": 136,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    negative = None\n    positive = None\n    for num in lst:\n        if num < 0:\n            if negative is None or num > negative:\n                negative = num\n        elif num > 0:\n            if positive is None or num < positive:\n                positive = num\n    return (negative, positive)",
        "test": "assert largest_smallest_integers([]) == (None, None)"
    },
    {
        "number": 137,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    elif isinstance(a, str) and isinstance(b, str):\n        if float(a.replace(\",\", \".\")) > float(b.replace(\",\", \".\")):\n            return float(a.replace(\",\", \".\"))\n        elif float(a.replace(\",\", \".\")) < float(b.replace(\",\", \".\")):\n            return float(b.replace(\",\", \".\"))\n        else:\n            return None\n    else:\n        return None",
        "test": "assert compare_one(\"1\", 1) is None"
    },
    {
        "number": 138,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # initialize variables\n    even_sum = 0\n    even_count = 0\n    \n    # iterate through the digits of n and check if each digit is even\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 0:\n            even_sum += digit\n            even_count += 1\n        n //= 10\n    \n    # check if the number is equal to the sum of 4 even positive numbers\n    if n == even_sum:\n        return True\n    else:\n        return False",
        "test": "assert is_equal_to_sum_even(6) == False"
    },
    {
        "number": 139,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 230,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    # Initialize the factorial result\n    factorial = 1\n\n    # Loop through the range of numbers from n down to 1\n    for i in range(1, n+1):\n        # Multiply the factorial by the number\n        factorial *= i\n\n    # Return the factorial\n    return factorial",
        "test": "assert special_factorial(0) == 1"
    },
    {
        "number": 140,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    text = text.replace(' ', '_')\n    if text.count(' ') > 2:\n        text = text.replace('  ', '-')\n    return text",
        "test": "assert fix_spaces(\"Example\") == \"Example\""
    },
    {
        "number": 141,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    \n    # Check if the file name has more than 3 digits\n    if any(char.isdigit() for char in file_name):\n        return \"No\"\n    \n    # Check if the file name has exactly one dot\n    if \".\" not in file_name:\n        return \"No\"\n    \n    # Check if the substring before the dot starts with a letter from the latin alphapet\n    before_dot = file_name[:file_name.find(\".\")]\n    if not before_dot.isalpha():\n        return \"No\"\n    \n    # Check if the substring after the dot is one of the allowed values\n    after_dot = file_name[file_name.find(\".\")+1:]\n    if after_dot not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    \n    return \"Yes\"",
        "test": "assert file_name_check(\"1example.dll\") == \"No\""
    },
    {
        "number": 142,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    # Initialize the sum variable\n    sum = 0\n    \n    # Iterate through the list\n    for i in range(len(lst)):\n        \n        # Check if the index is a multiple of 3\n        if i % 3 == 0:\n            \n            # Square the entry\n            lst[i] = lst[i] ** 2\n            \n        # Check if the index is a multiple of 4\n        if i % 4 == 0 and i % 3!= 0:\n            \n            # Cube the entry\n            lst[i] = lst[i] ** 3\n        \n        # Add the entry to the sum\n        sum += lst[i]\n    \n    return sum",
        "test": "assert sum_squares([]) == 0"
    },
    {
        "number": 143,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "def is_prime(num):\n    \"\"\"\n    Checks whether a given number is prime or not.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    Given a sentence, return the words from the sentence whose lengths are prime numbers.\n    The order of the words in the new string should be the same as the original one.\n    \"\"\"\n    # Split the sentence into words\n    words = sentence.split()\n    # Initialize an empty list to store the prime words\n    prime_words = []\n    # Loop through each word in the sentence\n    for word in words:\n        # Check if the length of the word is prime\n        if is_prime(len(word)):\n            # Add the prime word to the list of prime words\n            prime_words.append(word)\n    # Join the prime words into a single string and return it\n    return \" \".join(prime_words)",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\""
    },
    {
        "number": 144,
        "max_answer_num": 30,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Convert x and n to integers\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    # Check if the product of x and n is a whole number\n    if x_num * n_num == x_den * n_den:\n        return True\n    else:\n        return False",
        "test": "assert simplify(\"7/10\", \"10/2\") == False"
    },
    {
        "number": 145,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # Helper function to convert a number to its sum of digits\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    # Sort the list based on the sum of the digits of each number\n    nums.sort(key=lambda x: (sum_of_digits(x), nums.index(x)))\n\n    return nums",
        "test": "assert order_by_points([]) == []"
    },
    {
        "number": 146,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 210,
        "answer": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num // 10) % 2 == 1 and (num % 10) % 2 == 1:\n            count += 1\n    return count",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1"
    },
    {
        "number": 147,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n\n    # Initialize the array with values\n    a = [i*i - i + 1 for i in range(1, n+1)]\n\n    # Count the number of triples\n    count = 0\n\n    # Iterate through all pairs of numbers\n    for i in range(n):\n        for j in range(i+1, n):\n            # Check if the sum of the numbers is divisible by 3\n            if (a[i] + a[j]) % 3 == 0:\n                count += 1\n\n    return count",
        "test": "assert get_max_triples(5) == 1"
    },
    {
        "number": 148,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    if planet1 not in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n        return ()\n    if planet2 not in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n        return ()\n\n    planets = []\n    if planet1 in [\"Mercury\", \"Venus\"]:\n        planets.append(planet1)\n        planets.append(planet2)\n    else:\n        if planet1 in [\"Jupiter\", \"Saturn\", \"Uranus\"]:\n            planets.append(planet1)\n            planets.append(planet2)\n        else:\n            if planet1 in [\"Neptune\"]:\n                planets.append(planet2)\n                planets.append(planet1)\n            else:\n                planets.append(planet1)\n\n    for planet in planets:\n        if planet in [\"Mercury\", \"Venus\"]:\n            if planet1 in [\"Mercury\", \"Venus\"]:\n                planets.append(planet)\n        else:\n            if planet1 in [\"Jupiter\", \"Saturn\", \"Uranus\"]:\n                planets.append(planet)\n            else:\n                if planet1 in [\"Neptune\"]:\n                    planets.append(planet)\n\n    return tuple(planets)",
        "test": "assert bf(\"nonexistent\", \"nonexistent\") == ()"
    },
    {
        "number": 149,
        "max_answer_num": 21,
        "max_test_num": 6,
        "total_product": 230,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    def count_chars(word):\n        \"\"\"Helper function to count the number of characters in a word.\"\"\"\n        return sum(1 for _ in word)\n\n    def sort_word(word):\n        \"\"\"Helper function to sort a word based on its length and alphabetically.\"\"\"\n        return (-count_chars(word), word)\n\n    return sorted(set(word for word in lst if count_chars(word) % 2 == 0), key=sort_word)",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]"
    },
    {
        "number": 150,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n\n    def is_prime(num):\n        \"\"\"A helper function to check if a number is prime\"\"\"\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y",
        "test": "assert x_or_y(7, 34, 12) == 34"
    },
    {
        "number": 151,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    '''\n    \n    # initialize variables\n    sum_of_squares = 0\n    even_numbers = 0\n    \n    # loop through the list and check if the number is odd and positive\n    for num in lst:\n        if num >= 0 and num % 2!= 0:\n            sum_of_squares += num**2\n            even_numbers += 1\n    \n    # check if the list is empty\n    if len(lst) == 0:\n        return 0\n    \n    # return the sum of squares of odd numbers\n    return sum_of_squares",
        "test": "assert double_the_difference([-1, -2, 0]) == 0"
    },
    {
        "number": 152,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def compare(game, guess):\n    \"\"\"\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    example:\n    \n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    diff = [0] * len(game)\n    for i, (g, s) in enumerate(zip(game, guess)):\n        if g == s:\n            diff[i] = 0\n        else:\n            diff[i] = abs(g - s)\n    return diff",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]"
    },
    {
        "number": 153,
        "max_answer_num": 23,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    \n    strengths = {}\n    for extension in extensions:\n        capitalized_count = sum(1 for c in extension if c.isupper())\n        lowercase_count = sum(1 for c in extension if c.islower())\n        strength = round(capitalized_count - lowercase_count, 2)\n        strengths[extension] = strength\n    \n    max_strength = max(strengths.values())\n    strongest_extension = [k for k, v in strengths.items() if v == max_strength][0]\n    \n    return f\"{class_name}.{strongest_extension}\"",
        "test": "assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\""
    },
    {
        "number": 154,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\"\n    # First check if b is a substring of a\n    if b in a:\n        return True\n    # Check for rotations of b\n    rotations = [b[i:] + b[:i] for i in range(len(b))]\n    for r in rotations:\n        if r in a:\n            return True\n    return False",
        "test": "assert cycpattern_check(\"abcd\",\"abd\") == False"
    },
    {
        "number": 155,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n    if num < 0:\n        num = abs(num)\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        num //= 10\n    return (count_even, count_odd)",
        "test": "assert even_odd_count(123) == (1, 2)"
    },
    {
        "number": 156,
        "max_answer_num": 30,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    def to_roman(value):\n        \"\"\"\n        Converts an integer value to its Roman numeral equivalent.\n        \"\"\"\n        roman_dict = {'M': 1000, 'CM': 900, 'D': 500, 'CD': 400, 'C': 100, 'XC': 90, 'L': 50, 'XL': 40, 'X': 10, 'IX': 9, 'V': 5, 'IV': 4, 'I': 1}\n        roman = ''\n        for num, sym in roman_dict.items():\n            while value >= sym:\n                roman += num\n                value -= sym\n        return roman\n\n    roman_num = to_roman(number)\n    return roman_num.lower()",
        "test": "assert int_to_mini_roman(19) == 'xix'"
    },
    {
        "number": 157,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Checking if the given sides form a triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Checking if the sum of any two sides is equal to the third side\n        if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2:\n            return True\n    return False",
        "test": "assert right_angle_triangle(1, 2, 3) == False"
    },
    {
        "number": 158,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n\n    unique_chars = set()\n    max_count = 0\n    max_word = \"\"\n\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            max_word = word\n        elif count == max_count and word < max_word:\n            max_word = word\n\n    return max_word",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\""
    },
    {
        "number": 159,
        "max_answer_num": 30,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                 the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n    \n    Have fun :)\n    \"\"\"\n    \n    if need > remaining:\n        return [number, 0]\n    else:\n        return [number + need, remaining - need]",
        "test": "assert eat(5, 6, 10) == [11, 4], \"Incorrect result for eat(5, 6, 10)\""
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 350,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    result = 0\n\n    # iterate over the operator list and operand list\n    for i in range(len(operator)):\n        # if the current operator is addition, subtract, multiplication or floor division\n        if operator[i] in ['+', '-', '*', '//']:\n            # if the operator is addition, perform addition\n            if operator[i] == '+':\n                result += operand[i]\n            # if the operator is subtraction, perform subtraction\n            elif operator[i] == '-':\n                result -= operand[i]\n            # if the operator is multiplication, perform multiplication\n            elif operator[i] == '*':\n                result *= operand[i]\n            # if the operator is floor division, perform floor division\n            elif operator[i] == '//':\n                result //= operand[i]\n\n    return result",
        "test": "assert do_algebra(['+', '*', '-', '/'], [2, 3, 4, 5]) == 2"
    },
    {
        "number": 161,
        "max_answer_num": 30,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\n    result = \"\"\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                result += s[i].upper()\n            else:\n                result += s[i].lower()\n        else:\n            result += s[i]\n        i += 1\n\n    if not any(s[i].isalpha() for i in range(len(s))):\n        result = result[::-1]\n\n    return result",
        "test": "assert solve(\"1234\") == \"4321\""
    },
    {
        "number": 162,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 110,
        "answer": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\n    if not text:\n        return None\n\n    import hashlib\n    md5_hash = hashlib.md5(text.encode('utf-8')).hexdigest()\n\n    return md5_hash",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'"
    },
    {
        "number": 163,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # Initialize an empty list to store the even digits\n    even_digits = []\n\n    # Iterate from a to b (inclusive)\n    for i in range(a, b+1):\n        # Convert i to a string and get its digits\n        digits = str(i)\n\n        # Check if all digits are even\n        if digits.isdigit():\n            # Convert the digits to a list\n            digit_list = [int(digit) for digit in digits]\n\n            # Check if the digits are even\n            if all(digit % 2 == 0 for digit in digit_list):\n                # Add the even digits to the list\n                even_digits.append(i)\n\n    # Return the even digits in ascending order\n    return sorted(even_digits)",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]"
    }
]