[
    {
        "number": 0,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) <= threshold:\n            return True\n    return False",
        "test": "assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True"
    },
    {
        "number": 1,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Remove any spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    # Initialize an empty list to store the separated groups\n    separated_groups = []\n    # Initialize a counter to keep track of the number of opening parentheses\n    opening_count = 0\n    # Loop through each character in the input string\n    for char in paren_string:\n        # If the character is an opening parenthesis, increment the opening_count counter\n        if char == \"(\":\n            opening_count += 1\n        # If the character is a closing parenthesis, decrement the opening_count counter and if it reaches zero,\n        # append the group to the separated_groups list and reset the opening_count to 0\n        elif char == \")\":\n            opening_count -= 1\n            if opening_count == 0:\n                separated_groups.append(\"\".join(paren_string[paren_string.index(\"(\"):paren_string.index(\")\")+1]))\n                opening_count = 0\n    return separated_groups",
        "test": "assert separate_paren_groups('') == []"
    },
    {
        "number": 2,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n\n    # Decompose the number into integer and decimal parts\n    integer_part = int(number)\n    decimal_part = number - integer_part\n\n    # Return the decimal part of the number\n    return decimal_part",
        "test": "assert truncate_number(3.5) == 0.5"
    },
    {
        "number": 3,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
        "test": "assert below_zero([1, 2, -4, 5]) == True"
    },
    {
        "number": 4,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    n = len(numbers)\n    mean = sum(numbers) / n\n    abs_diff_list = [abs(num - mean) for num in numbers]\n    return sum(abs_diff_list) / n",
        "test": "assert mean_absolute_deviation([0.0, 0.0, 0.0, 0.0]) == 0.0, \"mean_absolute_deviation([0.0, 0.0, 0.0, 0.0]) == 0.0\""
    },
    {
        "number": 5,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers' \"\"\"\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(delimeter)\n        result.append(numbers[i])\n    return result",
        "test": "assert intersperse([], 4) == []"
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # Initialize a variable to store the maximum depth of nesting of parentheses\n    max_depth = 0\n    # Initialize a list to store the current depth of nesting of parentheses\n    current_depth = []\n\n    # Loop through each character in the input string\n    for char in paren_string:\n        # If the character is a left parenthesis, add 1 to the current depth\n        if char == '(':\n            current_depth.append(1)\n        # If the character is a right parenthesis, remove the last element from the current depth and add the maximum depth of the previous level to the max_depth variable\n        elif char == ')':\n            current_depth.pop()\n            max_depth = max(max_depth, current_depth[-1])\n\n    # Return the list containing the maximum depth of nesting of parentheses\n    return max_depth",
        "test": "assert parse_nested_parens('(()) ()') == [2]"
    },
    {
        "number": 7,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    return [string for string in strings if substring in string]",
        "test": "assert filter_by_substring([], 'a') == []"
    },
    {
        "number": 8,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\n    if not numbers:\n        return (0, 1)\n\n    sum_total = 0\n    product_total = 1\n\n    for num in numbers:\n        sum_total += num\n        product_total *= num\n\n    return (sum_total, product_total)",
        "test": "assert sum_product([]) == (0, 1)"
    },
    {
        "number": 9,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 110,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list = []\n    for i in range(len(numbers)):\n        rolling_max_list.append(numbers[i])\n        if i >= 1:\n            if numbers[i] > rolling_max_list[i-1]:\n                rolling_max_list[i] = numbers[i]\n            else:\n                rolling_max_list[i] = rolling_max_list[i-1]\n    return rolling_max_list",
        "test": "assert rolling_max([]) == []"
    },
    {
        "number": 10,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if string == '':\n        return ''\n    else:\n        longest_palindrome = ''\n        for i in range(len(string)):\n            for j in range(len(string) - i):\n                if is_palindrome(string[j:j + i]):\n                    longest_palindrome = string[j:j + i]\n                    break\n        return string + longest_palindrome[::-1]",
        "test": "assert make_palindrome('') == '', 'The function should return an empty string for an empty input.'"
    },
    {
        "number": 11,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    \n    # Convert input strings to binary numbers\n    a_bin = bin(int(a, 2))[2:].zfill(len(a))\n    b_bin = bin(int(b, 2))[2:].zfill(len(b))\n    \n    # Perform XOR operation on binary numbers\n    xor_bin = \"\"\n    for i in range(len(a_bin)):\n        xor_bin += str(int(a_bin[i]) ^ int(b_bin[i]))\n    \n    # Convert binary number back to decimal\n    xor_dec = \"\".join([str(int(x)) for x in xor_bin])\n    \n    return xor_dec",
        "test": "assert string_xor(\"111\", \"000\") == \"111\""
    },
    {
        "number": 12,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n\n    longest_str = strings[0]\n    max_length = len(longest_str)\n\n    for string in strings[1:]:\n        if len(string) > max_length:\n            longest_str = string\n            max_length = len(string)\n\n    return longest_str",
        "test": "assert longest([]) is None"
    },
    {
        "number": 13,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)",
        "test": "assert greatest_common_divisor(3, 5) == 1"
    },
    {
        "number": 14,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 210,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]",
        "test": "assert all_prefixes('') == []"
    },
    {
        "number": 15,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\"\n    Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n    \"\"\"\n    return \" \".join(str(i) for i in range(n+1))",
        "test": "assert string_sequence(0) == '0'"
    },
    {
        "number": 16,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    distinct_chars = set(string.lower())\n    return len(distinct_chars)",
        "test": "assert count_distinct_characters('xyzXYZ') == 3"
    },
    {
        "number": 17,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Define a dictionary to map ASCII characters to their corresponding beats lengths\n    beats_map = {'o': 4, 'o|': 2, '.|': 1}\n\n    # Initialize an empty list to store the beats lengths\n    beats_lengths = []\n\n    # Loop through each character in the string\n    for char in music_string:\n        # Check if the character is part of the beats map\n        if char in beats_map:\n            # Add the corresponding beats length to the list\n            beats_lengths.append(beats_map[char])\n        else:\n            # If the character is not part of the beats map, skip it and move on to the next one\n            continue\n\n    # Return the list of beats lengths\n    return beats_lengths",
        "test": "assert parse_music('') == []"
    },
    {
        "number": 18,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n\n    count = 0\n    i = 0\n\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n        i += 1\n\n    return count",
        "test": "assert how_many_times('', 'a') == 0"
    },
    {
        "number": 19,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 290,
        "answer": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    # Convert the input string to a list of numbers\n    numbers_list = list(map(str.strip, numbers.split()))\n    \n    # Check if the list contains only valid choices\n    valid_choices = ['zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine']\n    for num in numbers_list:\n        if num not in valid_choices:\n            return \"Invalid input. Please enter a valid space-delimited string of numbers from 'zero' to 'nine'.\"\n    \n    # Sort the list of numbers in ascending order\n    sorted_list = sorted(numbers_list)\n    \n    # Convert the sorted list back to a string and return it\n    return''.join(sorted_list)",
        "test": "assert sort_numbers('one') == 'one'"
    },
    {
        "number": 20,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    smallest = numbers[0]\n    largest = numbers[0]\n    for number in numbers:\n        if number < smallest:\n            smallest = number\n        elif number > largest:\n            largest = number\n    return smallest, largest\n",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)"
    },
    {
        "number": 21,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # Sort the list in ascending order\n    numbers.sort()\n    \n    # Find the smallest and largest numbers\n    min_num = numbers[0]\n    max_num = numbers[-1]\n    \n    # Scale the numbers to be between 0 and 1\n    scaled_numbers = [(num - min_num) / (max_num - min_num) for num in numbers]\n    \n    return scaled_numbers",
        "test": "assert rescale_to_unit([0.0, 0.25, 0.5, 0.75, 1.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]"
    },
    {
        "number": 22,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda x: isinstance(x, int), values))",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]"
    },
    {
        "number": 23,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)",
        "test": "assert strlen('') == 0"
    },
    {
        "number": 24,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    # initialize largest_divisor as 1\n    largest_divisor = 1\n    # iterate from 2 to n-1\n    for i in range(2, n):\n        # if n is divisible by i, update largest_divisor\n        if n % i == 0:\n            largest_divisor = i\n    # return the largest_divisor\n    return largest_divisor",
        "test": "assert largest_divisor(9) == 3"
    },
    {
        "number": 25,
        "max_answer_num": 30,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors",
        "test": "assert factorize(70) == [2, 5, 7]"
    },
    {
        "number": 26,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # Create a dictionary to store the frequency of each number\n    freq_dict = {}\n    for num in numbers:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # Create a new list to store unique numbers\n    unique_numbers = []\n    for num in numbers:\n        if freq_dict[num] == 1:\n            unique_numbers.append(num)\n            freq_dict[num] = 0\n\n    return unique_numbers",
        "test": "assert remove_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4]"
    },
    {
        "number": 27,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return ''.join(char.upper() if char.islower() else char.lower() for char in string)",
        "test": "assert flip_case('12345') == '12345'"
    },
    {
        "number": 28,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    \n    # Concatenate all the strings in the list into a single string\n    return ''.join(strings)",
        "test": "assert concatenate([]) == ''"
    },
    {
        "number": 29,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]",
        "test": "assert filter_by_prefix([], 'a') == []"
    },
    {
        "number": 30,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def get_positive(l: list) -> list:\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num > 0]",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]"
    },
    {
        "number": 31,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert is_prime(6) == False"
    },
    {
        "number": 32,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 210,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x**2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n\n    xs = [coeff for coeff in xs if coeff!= 0]\n    if len(xs) % 2!= 0:\n        return None\n    n = len(xs) // 2\n    a = xs[0]\n    b = xs[-1]\n    for i in range(100):\n        x = (a * i + b) / (i + 1)\n        fx = poly(xs, x)\n        if fx == 0:\n            return x\n        elif fx * fx < 0:\n            b = x\n        else:\n            a = x\n\n    return None",
        "test": "assert find_zero([-6, 11, -6, 1]) == 1.0"
    },
    {
        "number": 33,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    # create a new list to store the sorted elements\n    l_sorted = []\n    \n    # loop through the list\n    for i in range(len(l)):\n        # if the index is not divisible by three, add the original value to the new list\n        if i % 3!= 0:\n            l_sorted.append(l[i])\n        # otherwise, add the value from the original list at the same index\n        else:\n            l_sorted.append(l[i])\n    \n    # return the new sorted list\n    return l_sorted",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3]"
    },
    {
        "number": 34,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 100,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]"
    },
    {
        "number": 35,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_val = l[0]\n    for num in l:\n        if num > max_val:\n            max_val = num\n    return max_val",
        "test": "assert max_element([1, 2, 3]) == 3"
    },
    {
        "number": 36,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).count(\"7\") > 0:\n                count += 1\n    return count",
        "test": "assert fizz_buzz(50) == 0"
    },
    {
        "number": 37,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    # separate even and odd indicies\n    even_indices = [i for i, x in enumerate(l) if x % 2 == 0]\n    odd_indices = [i for i, x in enumerate(l) if x % 2!= 0]\n\n    # create a list of even values from the original list\n    even_values = [l[i] for i in even_indices]\n\n    # sort even values\n    even_values.sort()\n\n    # create a new list by appending even values and odd values at their correct positions\n    sorted_list = [0] * len(l)\n    for i, x in enumerate(l):\n        if i in odd_indices:\n            sorted_list[i] = x\n        elif i in even_indices:\n            sorted_list[i] = even_values[even_values.index(x)]\n\n    return sorted_list",
        "test": "assert sort_even([1, 2, 3]) == [1, 2, 3]"
    },
    {
        "number": 38,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # remove duplicates.\n    groups = list(set(groups))\n    # join elements of each group together.\n    groups = [\"\".join(group) for group in groups]\n    return \"\".join(groups)",
        "test": "assert decode_cyclic(encode_cyclic(\"\")) == \"\""
    },
    {
        "number": 39,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int) -> int:\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        fib_seq = [2, 3]\n        for i in range(3, n):\n            fib_seq.append(fib_seq[-1] + fib_seq[-2])\n        for i in range(len(fib_seq)):\n            if is_prime(fib_seq[i]):\n                return fib_seq[i]",
        "test": "assert prime_fib(1) == 2"
    },
    {
        "number": 40,
        "max_answer_num": 40,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    l.sort()\n\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        for j in range(i + 1, len(l) - 1):\n            if j > i + 1 and l[j] == l[j - 1]:\n                continue\n            k = j + 1\n            while k < len(l) and l[k] - l[i] - l[j] >= 0:\n                if l[k] + l[j] + l[i] == 0:\n                    return True\n                k += 1\n\n    return False",
        "test": "assert triples_sum_to_zero([1, 2, 3, 7]) == False"
    },
    {
        "number": 41,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    left_cars = n\n    right_cars = n\n    collisions = 0\n\n    while left_cars > 0 and right_cars > 0:\n        # Move one car in each set\n        left_cars -= 1\n        right_cars -= 1\n\n        # Check for collisions\n        if left_cars > 0 and right_cars > 0 and left_cars < right_cars:\n            collisions += 1\n\n    return collisions",
        "test": "assert car_race_collision(1) == 0"
    },
    {
        "number": 42,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x+1 for x in l]",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]"
    },
    {
        "number": 43,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = {}\n    for num in l:\n        if -num in seen:\n            return True\n        seen[num] = True\n    return False",
        "test": "assert pairs_sum_to_zero([1, 2, 3, 7]) == False"
    },
    {
        "number": 44,
        "max_answer_num": 30,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    if base < 2:\n        raise ValueError(\"Base must be greater than or equal to 2.\")\n\n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x //= base\n\n    return result",
        "test": "assert change_base(8, 3) == '22'"
    },
    {
        "number": 45,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    area = 0.5 * a * h\n    return area",
        "test": "assert triangle_area(5, 3) == 7.5, \"The area of a triangle with sides of length 5 and height of 3 is not correct.\""
    },
    {
        "number": 46,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c = 0, 0, 2\n        for _ in range(n - 3):\n            a, b, c = b, c, a + b + c\n        return c",
        "test": "assert fib4(0) == 0, \"The first element of the Fib4 sequence is 0.\""
    },
    {
        "number": 47,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2-1] + l[n//2])/2\n    else:\n        return l[n//2]",
        "test": "assert median([3, 1, 2, 4, 5]) == 3"
    },
    {
        "number": 48,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]",
        "test": "assert is_palindrome('aba') == True, 'Test failed for aba'"
    },
    {
        "number": 49,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    if p == 1:\n        return 0\n    elif p == 0:\n        return 1\n\n    base = 2\n    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n //= 2\n\n    return result",
        "test": "assert modp(0, 101) == 1"
    },
    {
        "number": 50,
        "max_answer_num": 23,
        "max_test_num": 1,
        "total_product": 360,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encoded = \"\"\n    for char in s:\n        index = alphabet.find(char)\n        if index == -1:\n            encoded += char\n        else:\n            encoded += alphabet[((index + 5) % 26)]\n    return encoded\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    decoded = \"\"\n    for char in s:\n        index = alphabet.find(char)\n        if index == -1:\n            decoded += char\n        else:\n            decoded += alphabet[((index - 5) % 26)]\n    return decoded",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hello\""
    },
    {
        "number": 51,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    for vowel in vowels:\n        text = text.replace(vowel, '')\n    return text",
        "test": "assert remove_vowels('') == ''"
    },
    {
        "number": 52,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True"
    },
    {
        "number": 53,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"\n    Add two numbers x and y\n    \"\"\"\n    return x + y\n",
        "test": "assert add(2, 3) == 5"
    },
    {
        "number": 54,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\n    # Convert strings to sets to remove duplicates\n    s0_set = set(s0)\n    s1_set = set(s1)\n\n    # Check if the sets have the same length and the same characters\n    if len(s0_set)!= len(s1_set):\n        return False\n    elif len(s0_set) == 0:\n        return True\n    else:\n        return all(char in s1_set for char in s0_set)\n",
        "test": "assert same_chars('eabcd', 'dddddddabc') == False"
    },
    {
        "number": 55,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)",
        "test": "assert fib(10) == 55"
    },
    {
        "number": 56,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "test": "assert correct_bracketing(\"><<>\") == False, \"Test case failed: '>>' should not have a closing bracket\""
    },
    {
        "number": 57,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "def monotonic(l: list) -> bool:\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    if len(l) < 2:\n        return True\n\n    prev = l[0]\n    for num in l[1:]:\n        if prev > num:\n            return False\n        prev = num\n\n    return True",
        "test": "assert monotonic([1, 2, 4, 20]) == True"
    },
    {
        "number": 58,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    common_set = set(l1) & set(l2)\n    return sorted(list(common_set))",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]"
    },
    {
        "number": 59,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_prime(n: int) -> bool:\n    \"\"\"Return True if n is prime, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n.\"\"\"\n    largest_prime_factor = 1\n    for i in range(2, n + 1):\n        if n % i == 0 and is_prime(i):\n            largest_prime_factor = i\n            n //= i\n    return largest_prime_factor",
        "test": "assert largest_prime_factor(2048) == 2"
    },
    {
        "number": 60,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return sum(range(1, n+1))",
        "test": "assert sum_to_n(30) == 465, \"The output is incorrect.\""
    },
    {
        "number": 61,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    brackets: a string of \"(\" and \")\"\n    returns: True if every opening bracket has a corresponding closing bracket\n    \"\"\"\n    # create a stack to keep track of opening brackets\n    stack = []\n\n    # loop through each character in the string\n    for char in brackets:\n        # if the character is an opening bracket\n        if char == \"(\":\n            # push it onto the stack\n            stack.append(char)\n        # if the character is a closing bracket\n        elif char == \")\":\n            # if the stack is empty, the brackets are not balanced\n            if not stack:\n                return False\n            # if the stack is not empty, pop the last opening bracket\n            else:\n                stack.pop()\n\n    # if the stack is not empty after the loop, the brackets are not balanced\n    return not stack",
        "test": "assert correct_bracketing(\"()\") == True"
    },
    {
        "number": 62,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    n = len(xs)\n    deriv = []\n    for i in range(1, n):\n        deriv.append(xs[i] * i)\n    return deriv",
        "test": "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]"
    },
    {
        "number": 63,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n > 2:\n        a, b, c = 0, 0, 1\n        for i in range(3, n+1):\n            a, b, c = b, c, a + b + c\n        return c",
        "test": "assert fibfib(0) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    \n    vowels = \"aeiouAEIOU\"\n    vowel_count = 0\n    \n    for i in range(len(s)):\n        if s[i] in vowels and (i == len(s) - 1 or s[i+1]!= \"y\"):\n            vowel_count += 1\n            \n    return vowel_count",
        "test": "assert vowels_count(\"abcde\") == 2, \"First test failed\""
    },
    {
        "number": 65,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    \n    # Convert integer to list of digits\n    x_list = [int(digit) for digit in str(x)]\n    \n    # Reverse the list if shift is greater than number of digits\n    if shift > len(x_list):\n        x_list = x_list[::-1]\n    \n    # Shift the digits by the given shift\n    x_list = x_list[shift:] + x_list[:shift]\n    \n    # Convert list of digits back to integer\n    x = int(''.join([str(digit) for digit in x_list]))\n    \n    return str(x)",
        "test": "assert circular_shift(12, 2) == \"12\""
    },
    {
        "number": 66,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n\n    # initialize sum to 0\n    total = 0\n\n    # loop through each character in the string\n    for char in s:\n        # check if character is an uppercase letter\n        if char.isupper():\n            # if it is, add its ASCII code to the total\n            total += ord(char)\n\n    # return the total\n    return total",
        "test": "assert digitSum(\"\") == 0"
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    \"\"\"\n    # split the input string into apple, orange, and mango counts\n    apple_count, orange_count, mango_count = s.split()\n    # convert the counts to integers\n    apple_count = int(apple_count)\n    orange_count = int(orange_count)\n    mango_count = int(mango_count)\n    # calculate the number of mango fruits in the basket\n    mango_fruits = n - apple_count - orange_count\n    # return the number of mango fruits in the basket\n    return mango_fruits",
        "test": "assert fruit_distribution(\"100 apples and 1 oranges\",120) == 19"
    },
    {
        "number": 68,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n    def get_smallest_even(arr):\n        smallest_even = float('inf')\n        index = 0\n        for i, val in enumerate(arr):\n            if val % 2 == 0 and val < smallest_even:\n                smallest_even = val\n                index = i\n        return [smallest_even, index]\n\n    if not arr:\n        return []\n    smallest_even = get_smallest_even(arr)\n    if smallest_even[0] == float('inf'):\n        return []\n    else:\n        return [smallest_even[0], arr.index(smallest_even[0])]",
        "test": "assert pluck([4,2,3]) == [2, 1]"
    },
    {
        "number": 69,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    max_freq = 0\n    max_num = None\n    for num in lst:\n        if lst.count(num) >= num and num > 0:\n            if lst.count(num) > max_freq:\n                max_freq = lst.count(num)\n                max_num = num\n    return max_num if max_num else -1",
        "test": "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3"
    },
    {
        "number": 70,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:  # base case\n        return []\n    else:\n        min_val = lst[0]\n        max_val = lst[0]\n        for num in lst:\n            if num < min_val:\n                min_val = num\n            elif num > max_val:\n                max_val = num\n        # now we have the minimum and maximum values, lets swap them\n        for i in range(len(lst)):\n            if lst[i] == min_val:\n                lst[i], lst[0] = lst[0], lst[i]\n            elif lst[i] == max_val:\n                lst[i], lst[len(lst)-1] = lst[len(lst)-1], lst[i]\n        # now we have the minimum and maximum values swapped,\n        # we need to sort the remaining integers in increasing order\n        for i in range(len(lst)-1, 0, -1):\n            for j in range(i):\n                if lst[j] > lst[j+1]:\n                    lst[j], lst[j+1] = lst[j+1], lst[j]\n        # now lst contains the list in strange order\n        return lst",
        "test": "assert strange_sort_list([]) == []"
    },
    {
        "number": 71,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    \n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1",
        "test": "assert triangle_area(3, 4, 5) == 6.00"
    },
    {
        "number": 72,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # check if the list is a palindrome\n    if q == q[::-1]:\n        # check if the sum of the elements is less than or equal to the weight\n        return sum(q) <= w\n    else:\n        return False",
        "test": "assert will_it_fly([1, 2], 5) == False"
    },
    {
        "number": 73,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Convert the array to a set to remove duplicates and sort it in ascending order\n    arr = sorted(set(arr))\n\n    # Initialize variables for the minimum number of changes and the current change count\n    min_changes = len(arr)\n    curr_change = 0\n\n    # Iterate through the array and check if the current change is valid\n    for i in range(len(arr)):\n        if i + 1 < len(arr) and arr[i] < arr[i+1]:\n            curr_change += 1\n        else:\n            min_changes = min(min_changes, curr_change)\n            curr_change = 1\n\n    # Add the last change to the minimum number of changes if necessary\n    if curr_change > 0:\n        min_changes = min(min_changes, curr_change)\n\n    return min_changes",
        "test": "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1"
    },
    {
        "number": 74,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    # Function to check the total number of chars in two lists\n    def count_chars(lst):\n        count = 0\n        for i in lst:\n            count += len(i)\n        return count\n    \n    # Check the number of chars in the two lists\n    count1 = count_chars(lst1)\n    count2 = count_chars(lst2)\n    \n    # If the number of chars in the two lists are same, return the first list\n    if count1 == count2:\n        return lst1\n    \n    # If the number of chars in the two lists are less, return the first list\n    if count1 < count2:\n        return lst1\n    # If the number of chars in the two lists are greater, return the second list\n    else:\n        return lst2",
        "test": "assert total_match([], []) == []"
    },
    {
        "number": 75,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    if a < 100:\n        primes = [2, 3, 5]\n        return all(map(lambda x: a % x == 0, primes))\n    else:\n        return False",
        "test": "assert is_multiply_prime(50) == False, \"Incorrect output for 50\""
    },
    {
        "number": 76,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if n == 1:\n        return True\n    if n == 0:\n        return False\n    if x < n:\n        return False\n    if x % n == 0:\n        return True\n    return False",
        "test": "assert is_simple_power(3, 2) == False"
    },
    {
        "number": 77,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a == 0:\n        return True\n    for i in range(1, a+1):\n        if i ** 3 == a:\n            return True\n    return False",
        "test": "assert iscube(1) == True"
    },
    {
        "number": 78,
        "max_answer_num": 40,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def hex_key(num):\n    \"\"\"\n    You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n\n    # Helper function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Initialize count variable\n    count = 0\n\n    # Iterate through each hexadecimal digit in the input string\n    for i in range(len(num)):\n        # Convert the digit to its integer value and check if it's prime\n        digit = int(num[i], 16)\n        if is_prime(digit):\n            count += 1\n\n    # Return the final count\n    return count",
        "test": "assert hex_key(\"1077E\") == 2"
    },
    {
        "number": 79,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    \n    # convert decimal to binary\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    \n    # add extra characters to format the output\n    binary = \"db\" + binary + \"db\"\n    \n    return binary",
        "test": "assert decimal_to_binary(15) == \"db1111db\""
    },
    {
        "number": 80,
        "max_answer_num": 36,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def is_happy(s):\n    \"\"\"\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    \n    # Function to check if two characters are distinct\n    def is_distinct(c1, c2):\n        return ord(c1)!= ord(c2)\n    \n    # Convert the string to a list of characters\n    s_list = list(s)\n    \n    # Initialize the length of the string and the count of distinct characters\n    length = len(s_list)\n    count = 0\n    \n    # Loop through each character in the list\n    for i in range(length):\n        # Check if the character is distinct from the previous two characters in the list\n        if i > 2 and is_distinct(s_list[i], s_list[i-1]) and is_distinct(s_list[i], s_list[i-2]):\n            # Increment the count if the character is distinct\n            count += 1\n    \n    # Check if the count is 1 at the end of the loop\n    if count == 1:\n        return True\n    else:\n        return False",
        "test": "assert is_happy(\"a\") == False"
    },
    {
        "number": 81,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 210,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades",
        "test": "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']"
    },
    {
        "number": 82,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n\n    # Check if the string length is prime or not\n    if len(string) == 0:\n        return False\n    elif len(string) == 1:\n        return True\n    else:\n        is_prime = True\n        num = len(string)\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return True\n        else:\n            return False",
        "test": "assert prime_length('Hello') == True"
    },
    {
        "number": 83,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10**n):\n        if str(i)[0] == '1' or str(i)[-n] == '1':\n            count += 1\n    return count",
        "test": "assert starts_one_ends(1) == 1"
    },
    {
        "number": 84,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n                 Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n             a string of binary number\n    \"\"\"\n    \n    def count_digits(num):\n        \"\"\"Count the number of digits in a binary number.\"\"\"\n        count = 0\n        while num:\n            count += 1\n            num //= 2\n        return count\n    \n    digits = count_digits(N)\n    sum_digits = 0\n    \n    for digit in str(N):\n        sum_digits += int(digit)\n    \n    return str(sum_digits)",
        "test": "assert solve(1000) == \"1\""
    },
    {
        "number": 85,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 230,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    even_at_odd_indices = sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n    return even_at_odd_indices",
        "test": "assert add([1, 3, 5, 7]) == 0, \"add([1, 3, 5, 7]) should return 0\""
    },
    {
        "number": 86,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n\n    # Split the string into words using spaces as delimiter\n    words = s.split()\n\n    # Initialize an empty list to store the new words\n    new_words = []\n\n    # Iterate over each word and replace it with a new word with ascending ascii characters\n    for word in words:\n        # Convert the word to a list of characters\n        chars = list(word)\n        # Sort the characters in ascending order based on ascii value\n        sorted_chars = sorted(chars)\n        # Convert the sorted characters back to a string and join them into a new word\n        new_word = ''.join(sorted_chars)\n        new_words.append(new_word)\n\n    # Join the new words into a single string with spaces as separator\n    new_s =''.join(new_words)\n\n    return new_s",
        "test": "assert anti_shuffle('') == ''"
    },
    {
        "number": 87,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    rows = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                rows.append((i, j))\n    rows.sort(key=lambda x: (x[0], -x[1]))\n    return rows",
        "test": "assert get_row([], 1) == []"
    },
    {
        "number": 88,
        "max_answer_num": 30,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def merge(left, right):\n        result = []\n        i = j = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result += left[i:]\n        result += right[j:]\n        return result\n\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n        return merge(left, right)\n\n    sorted_array = merge_sort(array)\n    return sorted_array",
        "test": "assert sort_array([]) == []"
    },
    {
        "number": 89,
        "max_answer_num": 20,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    \n    # create a dictionary to map the original letters to their rotated counterparts\n    rotated_letters = {\n        'a': 'c', 'b': 'd', 'c': 'f', 'd': 'g', 'e': 'h', 'f': 'j', 'g': 'k', 'h': 'l', 'i':'m', 'j': 'n', 'k': 'p', 'l': 'q','m': 'r', 'n':'s', 'o': 't', 'p': 'v', 'q': 'w', 'r': 'x','s': 'y', 't': 'z',\n        'A': 'C', 'B': 'D', 'C': 'F', 'D': 'G', 'E': 'H', 'F': 'J', 'G': 'K', 'H': 'L', 'I': 'M', 'J': 'N', 'K': 'P', 'L': 'Q', 'M': 'R', 'N': 'S', 'O': 'T', 'P': 'V', 'Q': 'W', 'R': 'X', 'S': 'Y', 'T': 'Z',\n    }\n    \n    # iterate through the input string and add the rotated counterparts to the output string\n    result = ''\n    for letter in s:\n        if letter in rotated_letters:\n            result += rotated_letters[letter]\n        else:\n            result += letter\n    \n    return result",
        "test": "assert encrypt('hi') == 'lm'"
    },
    {
        "number": 90,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest",
        "test": "assert next_smallest([]) == None"
    },
    {
        "number": 91,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "def is_bored(sentence):\n    bored_count = 0\n    for word in sentence.split():\n        if word.startswith(\"I\"):\n            bored_count += 1\n    return bored_count",
        "test": "assert is_bored(\"Hello world\") == 0, \"First test case failed\""
    },
    {
        "number": 92,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def any_int(x, y, z):\n    # check if all three inputs are integers\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    # calculate the sum of the other two numbers\n    s = x + y\n    # check if one of the numbers is equal to the sum of the other two\n    if any(i == s for i in [x, y, z]):\n        return True\n    # none of the numbers are equal to the sum of the other two\n    return False",
        "test": "assert any_int(3.6, -2.2, 2) == False"
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def encode(message):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(message)):\n        if message[i].lower() in vowels:\n            letter = chr(ord('a') + (ord('z') - ord('a') + 1) * (ord(message[i].lower()) - ord('a')))\n            message = message[:i] + letter + message[i+1:]\n        else:\n            message = message[:i] + message[i].swapcase() + message[i+1:]\n    return message",
        "test": "assert encode('This is a message') == 'tHKS KS C MGSSCGG'"
    },
    {
        "number": 94,
        "max_answer_num": 40,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a given number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef largest_prime(lst):\n    \"\"\"\n    Given a list of integers, this function returns the largest prime value in the list.\n    \"\"\"\n    largest = 0\n    for num in lst:\n        if is_prime(num):\n            if num > largest:\n                largest = num\n    return largest\n\n\ndef sum_of_digits(num):\n    \"\"\"\n    Helper function to calculate the sum of digits of a number.\n    \"\"\"\n    total = 0\n    while num > 0:\n        total += num % 10\n        num //= 10\n    return total\n\n\ndef skjkasdkd(lst):\n    \"\"\"\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    largest = largest_prime(lst)\n    return sum_of_digits(largest)",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10"
    },
    {
        "number": 95,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    all_lower = True\n    all_upper = True\n    for key, value in dict.items():\n        if not isinstance(key, str):\n            return False\n        if isinstance(key, str) and key.isupper():\n            all_upper = False\n        elif isinstance(key, str) and key.islower():\n            all_lower = False\n        else:\n            return False\n        if not isinstance(value, str):\n            return False\n    return all_lower or all_upper\n",
        "test": "assert check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) == False"
    },
    {
        "number": 96,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_prime(num):\n    \"\"\"Check if a number is prime\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\"\"\"\n    prime_numbers = []\n    for i in range(2, n+1):\n        if is_prime(i) and i < n:\n            prime_numbers.append(i)\n    return prime_numbers",
        "test": "assert count_up_to(0) == []"
    },
    {
        "number": 97,
        "max_answer_num": 40,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Helper function to get the unit digit of an integer\n    def get_unit_digit(num):\n        return num % 10\n\n    # Get the unit digits of the inputs\n    a_unit_digit = get_unit_digit(a)\n    b_unit_digit = get_unit_digit(b)\n\n    # Multiply the unit digits and return the result\n    return a_unit_digit * b_unit_digit",
        "test": "assert multiply(2020, 1851) == 0"
    },
    {
        "number": 98,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(1, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    return count",
        "test": "assert count_upper('abcdefg') == 0"
    },
    {
        "number": 99,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    # Convert the string to a float\n    num = float(value)\n\n    # Find the closest integer to the given float\n    int_num = round(num)\n\n    # Check if the closest integer is equidistant from the given float\n    if abs(int_num - num) == 0.5:\n        if num > 0:\n            int_num += 1\n        else:\n            int_num -= 1\n\n    return int_num",
        "test": "assert closest_integer(\"10\") == 10"
    },
    {
        "number": 100,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    stones = []\n    current_level = n\n    for i in range(n):\n        if current_level % 2 == 1:\n            stones.append(current_level)\n        else:\n            stones.append(current_level + 1)\n        current_level = current_level * 2 if current_level % 2 == 0 else current_level + 2\n    return stones",
        "test": "assert make_a_pile(3) == [3, 5, 7], \"make_a_pile(3) is not correct.\""
    },
    {
        "number": 101,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # convert string to list of strings\n    words = s.split(\",\")\n    # remove whitespace from beginning and end of each string\n    words = [word.strip() for word in words]\n    return words",
        "test": "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"
    },
    {
        "number": 102,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\n    max_num = -1\n    for num in range(x, y + 1):\n        if num % 2 == 0:\n            if num > max_num:\n                max_num = num\n\n    return max_num",
        "test": "assert choose_num(13, 12) == -1"
    },
    {
        "number": 103,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    \n    if n > m:\n        return -1\n    \n    total = 0\n    count = 0\n    \n    for i in range(n, m+1):\n        total += i\n        count += 1\n    \n    avg = round(total/count)\n    binary_avg = bin(avg)[2:]\n    \n    return \"0b\" + binary_avg",
        "test": "assert rounded_avg(7, 5) == -1"
    },
    {
        "number": 104,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x, return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Helper function to check if a number has even digits\n    def has_even_digits(n):\n        # Convert number to string\n        s = str(n)\n        # Iterate over each character and check if it has an even digit\n        for c in s:\n            if int(c) % 2 == 0:\n                return True\n        return False\n\n    # Create a new list to store unique elements\n    unique_list = []\n\n    # Iterate over each element in the input list\n    for num in x:\n        # Check if the number has even digits\n        if not has_even_digits(num):\n            # If it doesn't, add it to the unique list\n            unique_list.append(num)\n\n    # Sort the unique list in increasing order\n    unique_list.sort()\n\n    # Return the sorted unique list\n    return unique_list",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]"
    },
    {
        "number": 105,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n             -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n             -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n      \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n      \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n             -> sort arr -> [-1, 1, 55]\n             -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # sort the array in ascending order\n    arr.sort()\n    \n    # create an empty list to store the reversed array\n    reversed_arr = []\n    \n    # iterate over the sorted array\n    for num in arr:\n        # check if the number is between 1 and 9 inclusive\n        if 1 <= num <= 9:\n            # if it is, add the corresponding name to the reversed array\n            reversed_arr.append(f\"Eight\" if num == 8 else\n                              f\"Five\" if num == 5 else\n                              f\"Four\" if num == 4 else\n                              f\"Three\" if num == 3 else\n                              f\"Two\" if num == 2 else\n                              f\"One\" if num == 1 else\n                              \"Unknown\")\n        else:\n            # if it isn't, ignore it\n            continue\n    \n    # reverse the reversed array and return the result\n    return reversed_arr[::-1]",
        "test": "assert by_length([]) == []"
    },
    {
        "number": 106,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 270,
        "answer": "def factorial(n):\n    \"\"\" Returns the factorial of n. \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n\n    return result",
        "test": "assert f(5) == [1, 2, 6, 24, 15]"
    },
    {
        "number": 107,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 220,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    # Initialize variables for even and odd palindromes\n    even_count = 0\n    odd_count = 0\n\n    # Iterate through all possible palindromes\n    for i in range(1, n+1):\n        # Check if the number is a palindrome\n        if str(i) == str(i)[::-1]:\n            # Check if the number is even or odd\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    # Return the final tuple\n    return (even_count, odd_count)",
        "test": "assert even_odd_palindrome(12) == (4, 6)"
    },
    {
        "number": 108,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num >= 0:\n            digits = [int(digit) for digit in str(abs(num))]\n            digit_sum = sum(digits)\n            if digit_sum > 0:\n                count += 1\n    return count",
        "test": "assert count_nums([]) == 0"
    },
    {
        "number": 109,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n    \"\"\"\n    if not arr:\n        return True\n\n    n = len(arr)\n\n    # Calculate the maximum number of right shifts needed to sort the array\n    max_shifts = n - 1\n\n    # Calculate the maximum number of swaps needed to sort the array\n    max_swaps = 0\n\n    # Calculate the minimum number of swaps needed to sort the array\n    min_swaps = n - 1\n\n    # Iterate through all the elements of the array\n    for i in range(n - 1):\n        # Calculate the current element\n        curr_elem = arr[i]\n\n        # Calculate the maximum number of swaps that can be made for the current element\n        max_swaps += curr_elem - arr[i - 1]\n\n        # Update the minimum number of swaps needed to sort the array\n        min_swaps = min(min_swaps, max_swaps)\n\n        # Calculate the maximum number of swaps that can be made for the current element\n        max_swaps -= curr_elem - arr[i + 1]\n\n        # Update the maximum number of swaps needed to sort the array\n        max_shifts = max(max_shifts, max_swaps)\n\n    # If the minimum number of swaps needed to sort the array is equal to the maximum number of swaps needed to sort the array\n    # Then it is possible to obtain the sorted array\n    if min_swaps == max_swaps:\n        return True\n    else:\n        return False",
        "test": "assert move_one_ball([]) == True, \"move_one_ball([]) should return True\""
    },
    {
        "number": 110,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 240,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Check if the length of lst1 and lst2 are equal\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n    \n    # Iterate through the lists and check if the difference between the elements is even\n    for i in range(len(lst1)):\n        if lst1[i] % 2!= lst2[i] % 2:\n            return \"NO\"\n    \n    # If all the elements are even, return \"YES\"\n    return \"YES\"",
        "test": "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\""
    },
    {
        "number": 111,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \n    \"\"\"\n    # Initialize an empty dictionary to store the count of each letter\n    letter_count = {}\n    # Split the string into a list of letters\n    letters = test.split()\n    # Iterate over each letter in the list\n    for letter in letters:\n        # If the letter is already in the dictionary, increment its count\n        if letter in letter_count:\n            letter_count[letter] += 1\n        # Otherwise, add the letter to the dictionary with a count of 1\n        else:\n            letter_count[letter] = 1\n    # Initialize variables to store the letter with the most repetition and its count\n    max_letter = ''\n    max_count = 0\n    # Iterate over each letter in the dictionary\n    for letter, count in letter_count.items():\n        # If the count of the letter is greater than the current maximum count, update the max_count and max_letter\n        if count > max_count:\n            max_count = count\n            max_letter = letter\n    # If no letter with more than 1 count is found, return an empty dictionary\n    if max_count <= 1:\n        return {}\n    # Otherwise, create a dictionary with the letter and its count and return it\n    else:\n        return {max_letter: max_count}",
        "test": "assert histogram('b b b b a') == {'b': 4}"
    },
    {
        "number": 112,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def reverse_delete(s, c):\n    \"\"\"\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Remove all the characters in c from s\n    s = ''.join([char for char in s if char not in c])\n    # Check if the string s is palindrome\n    if s == s[::-1]:\n        return s, True\n    else:\n        return s, False",
        "test": "assert reverse_delete(\"abcdef\",\"b\") == ('acdef', False)"
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for i, s in enumerate(lst):\n        n = len(s)\n        count = sum(int(c) % 2 for c in s)\n        result.append(f\"the number of odd elements {count}n the str{i+1}ng {n} of the {n}nput.\")\n    return result",
        "test": "assert odd_count(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]"
    },
    {
        "number": 114,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    \n    nums.sort()\n    \n    curr_sum = 0\n    min_sum = float('inf')\n    \n    for i in range(len(nums)):\n        curr_sum += nums[i]\n        \n        if curr_sum < min_sum:\n            min_sum = curr_sum\n            \n    return min_sum",
        "test": "assert minSubArraySum([-1, -2, -3]) == -6"
    },
    {
        "number": 115,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "def max_fill(grid, capacity):\n    import math\n\n    # Check if all wells are the same length\n    if len(grid[0])!= len(grid[1]):\n        return 0\n\n    # Calculate the maximum number of buckets we need to empty the wells\n    max_buckets = 0\n    for row in grid:\n        # Calculate the number of buckets needed to fill the row\n        buckets_needed = math.ceil(sum(row) / capacity)\n        # Update the maximum number of buckets we need to empty the wells\n        max_buckets = max(max_buckets, buckets_needed)\n\n    return max_buckets",
        "test": "assert max_fill([[0,0,0], [0,0,0]], 5) == 0"
    },
    {
        "number": 116,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 300,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n    # Create a dictionary to store the number of ones in binary representation\n    num_ones = {}\n\n    # Iterate over the array and count the number of ones in each binary representation\n    for num in arr:\n        binary = bin(num)[2:]  # Skip the '0b' prefix and remove the '0' prefix\n        if binary in num_ones:\n            num_ones[binary] += 1\n        else:\n            num_ones[binary] = 1\n\n    # Sort the array based on the number of ones and decimal value\n    sorted_arr = sorted(arr, key=lambda x: (-num_ones[bin(x)[2:].lstrip('0')].bit_length(), x))\n\n    return sorted_arr",
        "test": "assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]"
    },
    {
        "number": 117,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    # Split the string into words\n    words = s.split()\n\n    # Create an empty list to store selected words\n    selected_words = []\n\n    # Loop through each word in the list\n    for word in words:\n\n        # Check if the word contains exactly n consonants\n        if sum(1 for char in word if char.isalpha() and char.lower() in 'bcdfghjklmnpqrstvwxyz') == n:\n\n            # Add the word to the selected list\n            selected_words.append(word)\n\n    # Return the selected words list\n    return selected_words",
        "test": "assert select_words(\"simple white space\", 2) == []"
    },
    {
        "number": 118,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def get_closest_vowel(word):\n    vowels = \"AEIOUaeiou\"\n    left_consonants = \"\"\n    right_consonants = \"\"\n    \n    for i, char in enumerate(word[::-1]):\n        if char.upper() in vowels:\n            left_consonants = word[:i]\n            break\n    \n    for i, char in enumerate(word):\n        if char.upper() in vowels:\n            right_consonants = word[i:]\n            break\n    \n    if not left_consonants or not right_consonants:\n        return \"\"\n    \n    closest_vowel = \"\"\n    closest_distance = float(\"inf\")\n    \n    for char in left_consonants:\n        if char.upper() in vowels and char.upper()!= right_consonants[0].upper():\n            distance = abs(ord(char) - ord(right_consonants[0]))\n            if distance < closest_distance:\n                closest_vowel = char\n                closest_distance = distance\n                \n    for char in right_consonants:\n        if char.upper() in vowels and char.upper()!= left_consonants[-1].upper():\n            distance = abs(ord(char) - ord(left_consonants[-1]))\n            if distance < closest_distance:\n                closest_vowel = char\n                closest_distance = distance\n                \n    return closest_vowel",
        "test": "assert get_closest_vowel(\"ab\") == \"\""
    },
    {
        "number": 119,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    \n    # Initialize the stack and the index of the first open parenthesis\n    stack = []\n    open_index = 0\n    \n    # Loop through the strings\n    for i, s in enumerate(lst):\n        \n        # If the string is empty, continue\n        if not s:\n            continue\n        \n        # If the current character is an open parenthesis, push it onto the stack\n        if s[0] == '(':\n            stack.append(i)\n        \n        # If the current character is a close parenthesis, pop the top element from the stack\n        elif s[0] == ')':\n            if not stack:\n                return 'No'\n            top_index = stack.pop()\n            if lst[top_index][-1]!= '(':\n                return 'No'\n        \n        # If the current character is neither an open parenthesis nor a close parenthesis, return 'No'\n        else:\n            return 'No'\n    \n    # If there are still elements in the stack, return 'No'\n    if stack:\n        return 'No'\n    \n    # If there are no elements in the stack, return 'Yes'\n    else:\n        return 'Yes'\n",
        "test": "assert match_parens([')', ')']) == 'No'"
    },
    {
        "number": 120,
        "max_answer_num": 31,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    arr.sort()\n    return arr[-k:]",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]"
    },
    {
        "number": 121,
        "max_answer_num": 30,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 0\n    \"\"\"\n    sum_odd_even = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2!= 0:\n            sum_odd_even += lst[i]\n    return sum_odd_even",
        "test": "assert solution([30, 13, 24, 321]) == 0"
    },
    {
        "number": 122,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the sum\n    sum_of_k_digits = 0\n\n    # Iterate over the first k elements of the sorted array\n    for i in range(k):\n        # Get the current element\n        current_element = arr[i]\n\n        # Check if the element has at most two digits\n        if len(str(current_element)) <= 2:\n            # Add the element to the sum\n            sum_of_k_digits += current_element\n\n    # Return the sum of the elements with at most two digits\n    return sum_of_k_digits",
        "test": "assert add_elements([10,20,30,40,50], 5) == 150, \"Test 2 failed\""
    },
    {
        "number": 123,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    # Collatz sequence for n\n    collatz_seq = [n]\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n\n    # Find odd numbers in collatz sequence\n    odd_collatz_seq = [num for num in collatz_seq if num % 2!= 0]\n\n    # Sort and return\n    return sorted(odd_collatz_seq)",
        "test": "assert get_odd_collatz(1) == [1]"
    },
    {
        "number": 124,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def valid_date(date):\n    \"\"\"\n    You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n        1. The date string is not empty.\n        2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n        3. The months should not be less than 1 or higher than 12.\n        4. The date should be in the format: mm-dd-yyyy\n    \n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n\n    # check if the date string is empty\n    if not date:\n        return False\n\n    # split the date string into months, day, and year\n    date_list = date.split('-')\n    year = int(date_list[-1])\n    month = int(date_list[0])\n    day = int(date_list[1])\n\n    # check if the year is valid\n    if year < 1 or year > 9999:\n        return False\n\n    # check if the month is valid\n    if month < 1 or month > 12:\n        return False\n\n    # check if the day is valid\n    if day < 1:\n        return False\n\n    if month == 4 or month == 6 or month == 9 or month == 11:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    elif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        if day < 1 or day > 31:\n            return False\n\n    # if the date is valid, return True\n    return True",
        "test": "assert valid_date('15-01-2012') == False"
    },
    {
        "number": 125,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 300,
        "answer": "def split_words(txt):\n    def count_lower_with_odd_order():\n        count = 0\n        for i in range(26):\n            if i % 2!= 0:\n                count += 1\n        return count\n\n    words = txt.split()\n    if len(words) > 1:\n        return words\n    elif ',' in txt:\n        words = txt.split(',')\n        return words\n    else:\n        return count_lower_with_odd_order()",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]"
    },
    {
        "number": 126,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n\n    # Convert the list to a set to remove duplicates\n    unique_numbers = set(lst)\n\n    # Check if the list contains more than 1 duplicate number\n    if len(unique_numbers)!= len(lst):\n        return False\n\n    # Check if the list is sorted in ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n\n    return True",
        "test": "assert is_sorted([5]) == True"
    },
    {
        "number": 127,
        "max_answer_num": 30,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    if start1 >= start2 and end1 <= end2:\n        return \"YES\"\n    elif start2 >= start1 and end2 <= end1:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert intersection((-3, -1), (-5, 5)) == \"YES\""
    },
    {
        "number": 128,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    \n    sign_arr = []\n    for num in arr:\n        sign_arr.append(1 if num > 0 else -1 if num < 0 else 0)\n    \n    prod_sign = 1\n    for sign in sign_arr:\n        prod_sign *= sign\n    \n    return sum([abs(num) * prod_sign for num in arr])",
        "test": "assert prod_signs([]) is None"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necesserily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Calculate the number of rows and columns in the grid\n    rows = len(grid)\n    cols = len(grid[0])\n\n    # Initialize the minimum path with the first row and column\n    min_path = [0] * cols\n    min_path[0] = grid[0][0]\n\n    # Initialize the list of visited cells\n    visited = set()\n\n    # Find the minimum path for each row and column\n    for i in range(1, rows):\n        for j in range(cols):\n            # Check if the cell is already visited or not\n            if (i, j) in visited:\n                continue\n\n            # Check if the cell is part of the minimum path\n            if (i - 1, j) in visited:\n                min_path[j] += min_path[(i - 1) * cols + j]\n\n            if (i, j - 1) in visited:\n                min_path[j] += grid[i][j - 1]\n\n            # Update the visited set\n            visited.add((i, j))\n\n            # Check if the cell is part of the minimum path\n            if (i, j + 1) in visited:\n                min_path[j] += grid[i][j + 1]\n\n            if (i + 1, j) in visited:\n                min_path[j] += min_path[j + (i + 1) * cols]\n\n            # Update the minimum path if the current cell is part of it\n            if min_path[j] < min_path[j - 1]:\n                min_path[j] = min_path[j - 1]\n\n            if min_path[j] < min_path[j + 1]:\n                min_path[j] = min_path[j + 1]\n\n    # Return the minimum path\n    return [grid[i][j] for i in range(rows) for j in range(cols) if (i, j) not in visited]\n",
        "test": "assert minPath([ [5,9,3], [4,1,6], [7,8,2] ], 1) == [1]"
    },
    {
        "number": 130,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 380,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    elif n == 3:\n        return [1, 3, 2]\n    else:\n        result = [1]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                result.append((result[-1] + result[-2]) / 2)\n            else:\n                result.append(result[-1] + result[-2] + result[-3])\n        return result",
        "test": "assert tri(1) == [1]"
    },
    {
        "number": 131,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # convert integer to string and remove leading zeros\n    s = str(n).lstrip('0')\n    # initialize sum and count of odd digits\n    product = 1\n    odd_count = 0\n    \n    # loop through each digit in the string\n    for digit in s:\n        # check if digit is odd\n        if int(digit) % 2 == 1:\n            # increment count of odd digits\n            odd_count += 1\n            # multiply product by digit value\n            product *= int(digit)\n    \n    # check if all digits are even\n    if odd_count == 0:\n        return 0\n    else:\n        return product",
        "test": "assert digits(1) == 1"
    },
    {
        "number": 132,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_nested(string):\n    brackets = {'[', ']', '{', '}' }\n    stack = []\n    for char in string:\n        if char in brackets:\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            top = stack.pop()\n            if brackets.index(char) > brackets.index(top):\n                return False\n    return not stack",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False"
    },
    {
        "number": 133,
        "max_answer_num": 40,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    # Round each element in the list to the upper int(Ceiling) first\n    lst = [int(math.ceil(x)) for x in lst]\n    # Calculate the sum of squared numbers\n    result = sum([x**2 for x in lst])\n    return result",
        "test": "assert sum_squares([1, 2, 3]) == 14"
    },
    {
        "number": 134,
        "max_answer_num": 30,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n\n    if not txt:\n        return False\n\n    last_char = txt[-1]\n    if last_char.isalpha():\n        # if the last character is an alphabet, check if it's not a part of a word\n        words = txt.split()\n        for word in words:\n            if last_char in word:\n                return False\n        return True\n    else:\n        return False",
        "test": "assert check_if_last_char_is_a_letter(\"apple pi e \") == False"
    },
    {
        "number": 135,
        "max_answer_num": 21,
        "max_test_num": 5,
        "total_product": 220,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] >= arr[j]:\n                return j\n    return -1",
        "test": "assert can_arrange([1,2,1]) == 2"
    },
    {
        "number": 136,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    \n    # Initialize variables to store the largest and smallest integers\n    largest = None\n    smallest = None\n    \n    # Iterate through the list and update the variables\n    for num in lst:\n        if num < 0:\n            if largest is None or num > largest:\n                largest = num\n        elif num > 0:\n            if smallest is None or num < smallest:\n                smallest = num\n    \n    # Return the tuple (largest, smallest)\n    return (largest, smallest)",
        "test": "assert largest_smallest_integers([]) == (None, None)"
    },
    {
        "number": 137,
        "max_answer_num": 30,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a) == type(b) and a == b:\n        return None\n    elif type(a) == type(b):\n        return max(a, b)\n    else:\n        if type(a) == float:\n            return max(float(a), b)\n        elif type(b) == float:\n            return max(a, float(b))\n        else:\n            return None",
        "test": "assert compare_one(\"5,1\", \"6\") == \"6\""
    },
    {
        "number": 138,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    sum_even = 2\n    count = 0\n    while sum_even <= n:\n        if sum_even % 2 == 0 and sum_even >= 2 and count < 4:\n            count += 1\n            sum_even += 2\n        else:\n            sum_even += 2\n    return count == 4",
        "test": "assert is_equal_to_sum_even(4) == False"
    },
    {
        "number": 139,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    # Initialize the product variable to 1\n    product = 1\n\n    # Loop through the range of n\n    for i in range(1, n+1):\n        # Multiply the product by the current value of i\n        product *= i\n\n    # Return the product\n    return product",
        "test": "assert special_factorial(1) == 1"
    },
    {
        "number": 140,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"__\", \"_\")\n    text = text.replace(\"  \", \"-\")\n    return text",
        "test": "assert fix_spaces(\"Example\") == \"Example\""
    },
    {
        "number": 141,
        "max_answer_num": 28,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Check if the file name contains more than three digits\n    if any(char.isdigit() for char in file_name):\n        return \"No\"\n\n    # Check if the file name contains exactly one dot\n    if '.' not in file_name:\n        return \"No\"\n\n    # Check if the substring before the dot is not empty and starts with a letter\n    before_dot = file_name.split('.')[0]\n    if not before_dot or not before_dot[0].isalpha():\n        return \"No\"\n\n    # Check if the substring after the dot is one of the expected values\n    after_dot = file_name.split('.')[1]\n    if after_dot not in ['txt', 'exe', 'dll']:\n        return \"No\"\n\n    # If all conditions are met, the file name is valid\n    return \"Yes\"",
        "test": "assert file_name_check(\"1example.dll\") == \"No\""
    },
    {
        "number": 142,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total_sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            if i % 4 == 0 and i % 3!= 0:\n                lst[i] = lst[i]**3\n        total_sum += lst[i]\n    return total_sum",
        "test": "assert sum_squares([]) == 0"
    },
    {
        "number": 143,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    primes = [word for word in words if is_prime(len(word))]\n    return \" \".join(primes)",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\""
    },
    {
        "number": 144,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "def simplify(x, n):\n    \"\"\"\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n\n    if x.count('/')!= 1 or n.count('/')!= 1:\n        return False\n\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    if x_den == n_den:\n        if x_num * n_num == 0:\n            return False\n        else:\n            return True\n    else:\n        return False\n",
        "test": "assert simplify(\"7/10\", \"10/2\") == False"
    },
    {
        "number": 145,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sum_of_digits(num):\n        \"\"\"\n        Return the sum of digits of a given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    sorted_nums = sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n\n    return sorted_nums",
        "test": "assert order_by_points([]) == []"
    },
    {
        "number": 146,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n\n    count = 0\n    for num in nums:\n        if num > 10 and (int(str(num)[0]) % 2 == 1 and int(str(num)[-1]) % 2 == 1):\n            count += 1\n    \n    return count",
        "test": "assert specialFilter([4, -6, -8, 10, 12, 14, 16, 18, 20]) == 0"
    },
    {
        "number": 147,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count",
        "test": "assert get_max_triples(3) == 0"
    },
    {
        "number": 148,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def bf(planet1, planet2):\n    # Check if the input strings are correct planet names\n    if planet1.lower() not in [\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"]:\n        return ()\n    if planet2.lower() not in [\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"]:\n        return ()\n    \n    # Find the closest planets to the Sun\n    sun = \"Sun\"\n    planets = [planet for planet in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"] if planet!= sun]\n    \n    # Find the orbits between the two planets\n    orbits = []\n    for planet in planets:\n        if planet1.lower() == planet:\n            orbits.append(planet)\n        if planet2.lower() == planet:\n            orbits.append(planet)\n    \n    # Sort the orbits by the proximity to the sun\n    closest = []\n    for orbit in orbits:\n        index = planets.index(orbit)\n        closest.append(planets[index:])\n    \n    return tuple(closest)",
        "test": "assert bf(\"Inexistent Planet\", \"Earth\") == ()"
    },
    {
        "number": 149,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\n    # remove words with odd lengths\n    lst = [word for word in lst if len(word) % 2 == 0]\n\n    # sort the list by length and then alphabetically\n    lst.sort(key=lambda x: (-len(x), x))\n\n    return lst",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]"
    },
    {
        "number": 150,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n\n    # Helper function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Check if n is a prime number\n    if is_prime(n):\n        return x\n    else:\n        return y",
        "test": "assert x_or_y(7, 34, 12) == 34, \"For input n=7, x=34, y=12, expected output should be 34, but the function returns {} instead.\".format(x_or_y(7, 34, 12))"
    },
    {
        "number": 151,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    '''\n    \n    total = 0\n    for num in lst:\n        if num >= 0 and int(num) % 2!= 0:\n            total += num**2\n    return total",
        "test": "assert double_the_difference([9, -2]) == 81"
    },
    {
        "number": 152,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    diff = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(game[i] - guess[i]))\n    return diff",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]"
    },
    {
        "number": 153,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    strongest_extension = extensions[0]\n    max_strength = strength_of_extension(strongest_extension)\n\n    for extension in extensions[1:]:\n        current_strength = strength_of_extension(extension)\n        if current_strength > max_strength:\n            strongest_extension = extension\n            max_strength = current_strength\n\n    return f\"{class_name}.{strongest_extension}\"\n\n\ndef strength_of_extension(extension):\n    \"\"\"Returns the strength of the given extension as described in the problem.\"\"\"\n    uppercase_letters = 0\n    lowercase_letters = 0\n\n    for letter in extension:\n        if letter.isupper():\n            uppercase_letters += 1\n        else:\n            lowercase_letters += 1\n\n    return uppercase_letters - lowercase_letters\n",
        "test": "assert Strongest_Extension('my_class', ['BB', 'CC', 'DD']) =='my_class.BB'"
    },
    {
        "number": 154,
        "max_answer_num": 40,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word.\n\n    Example:\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\"\n    # Removing spaces and converting to lowercase\n    a = a.replace(\" \", \"\").lower()\n    b = b.replace(\" \", \"\").lower()\n\n    # Iterating through all rotations of the second word\n    for i in range(len(b) + 1):\n        # Creating a new string by concatenating the second word with a substring of its rotation\n        new_str = b[i:] + b[:i]\n\n        # Checking if the substring exists in the first word\n        if new_str in a:\n            return True\n\n    # If no rotations of the second word found, then the substring must be present in the first word\n    return b in a",
        "test": "assert cycpattern_check(\"hello\",\"ell\") == True, \"Failed cycpattern_check for hello and ell\""
    },
    {
        "number": 155,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    else:\n        count_even = 0\n        count_odd = 0\n        num = abs(num)\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n            num = num // 10\n        return (count_even, count_odd)",
        "test": "assert even_odd_count(123) == (1, 2)"
    },
    {
        "number": 156,
        "max_answer_num": 31,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = {\n        1000:'m', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    roman_numeral = ''\n    for value, symbol in roman_numerals.items():\n        while number >= value:\n            roman_numeral += symbol\n            number -= value\n    return roman_numeral.lower()",
        "test": "assert int_to_mini_roman(1) == 'i'"
    },
    {
        "number": 157,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a**2 + b**2 == c**2:\n        return True\n    elif a**2 + c**2 == b**2:\n        return True\n    elif b**2 + c**2 == a**2:\n        return True\n    else:\n        return False",
        "test": "assert right_angle_triangle(1, 2, 3) == False"
    },
    {
        "number": 158,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n\n    max_length = 0\n    max_word = \"\"\n    word_set = set()\n\n    for word in words:\n        if len(set(word)) > max_length:\n            max_length = len(set(word))\n            max_word = word\n            word_set = set()\n        elif len(set(word)) == max_length:\n            if word < max_word:\n                max_length = len(set(word))\n                max_word = word\n                word_set = set()\n        word_set.update(set(word))\n\n    return max_word\n\nprint(find_max([\"name\", \"of\", \"string\"])) # Output: string\nprint(find_max([\"name\", \"enam\", \"game\"])) # Output: enam\nprint(find_max([\"aaaaaaa\", \"bb\",\"cc\"])) # Output: \"\"aaaaaaa\"",
        "test": "assert find_max([]) == \"\""
    },
    {
        "number": 159,
        "max_answer_num": 30,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                               the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n    \n    Have fun :)\n    \"\"\"\n    # Check if the number of carrots to be eaten is greater than the remaining carrots\n    if number > remaining:\n        # If yes, eat all remaining carrots and return the new number of carrots and the number of remaining carrots\n        return [number + remaining, remaining]\n    # If no, calculate the number of carrots to be eaten\n    else:\n        # Calculate the total number of carrots to be eaten and the number of carrots left after the meals\n        total_carrots = number + need\n        carrots_left = remaining - need\n        # Return the new number of carrots and the number of carrots left after the meals\n        return [total_carrots, carrots_left]",
        "test": "assert eat(1, 10, 10) == [11, 0]"
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # check if operator and operand lists are valid\n    if len(operator) == 0 or len(operand) < 2:\n        return \"Invalid operator or operand\"\n\n    # check if the operator list has at least one operator\n    if len(operator) == 1:\n        return \"Invalid operator\"\n\n    # build the algebric expression\n    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n        else:\n            return \"Invalid operator\"\n\n    # evaluate the algebric expression\n    try:\n        result = int(result)\n    except ValueError:\n        return \"Invalid result\"\n\n    return result",
        "test": "assert do_algebra(['+', '*', '-'], [3, 4]) == 7"
    },
    {
        "number": 161,
        "max_answer_num": 30,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                result += s[i].upper()\n            else:\n                result += s[i].lower()\n        else:\n            result += s[i]\n    if not any(s[i].isalpha() for i in range(len(s))):\n        result = result[::-1]\n    return result",
        "test": "assert solve(\"1234\") == \"4321\""
    },
    {
        "number": 162,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n\n    # Create a md5 hash object\n    md5_hash = hashlib.md5()\n\n    # Update the hash object with the string\n    md5_hash.update(text.encode('utf-8'))\n\n    # Return the hexdigest of the hash object\n    return md5_hash.hexdigest()",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'"
    },
    {
        "number": 163,
        "max_answer_num": 30,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        a, b = b, a\n\n    even_digits = []\n    for i in range(a, b+1):\n        if all(int(d) % 2 == 0 for d in str(i)):\n            even_digits.append(i)\n\n    return sorted(even_digits)",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]"
    }
]