[
    {
        "number": 0,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n\n    return False",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
        "num_ids": 847,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    # Initialize a list to store the separate groups\n    groups = []\n    \n    # Loop through each pair of parentheses\n    current_group = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == \"(\":\n            current_group.append(paren_string[i])\n        elif paren_string[i] == \")\":\n            if current_group:\n                current_group.append(paren_string[i])\n                groups.append(\"\".join(current_group))\n                current_group = []\n            else:\n                groups.append(\"\".join(current_group))\n                current_group = []\n        elif current_group:\n            current_group.append(paren_string[i])\n    \n    # Add the last group of parentheses\n    if current_group:\n        groups.append(\"\".join(current_group))\n    \n    return groups",
        "test": "assert separate_paren_groups('(foo) (bar)') == ['(foo)', '(bar)']",
        "num_ids": 1938,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    # Split the number into integer and decimal parts\n    integer_part = int(number)\n    decimal_part = number - integer_part\n\n    # Truncate decimal part to 2 decimal places\n    decimal_part = round(decimal_part, 2)\n\n    return decimal_part",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 751,
        "indeed": false
    },
    {
        "number": 3,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\n    balance = 0\n\n    for operation in operations:\n        balance += operation\n\n        if balance < 0:\n            return True\n\n    return False",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 838,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n\n    # Calculate the mean of the dataset\n    mean = sum(numbers) / len(numbers)\n\n    # Calculate the deviation of each element from the mean\n    deviations = [abs(x - mean) for x in numbers]\n\n    # Calculate the average deviation\n    mad = sum(deviations) / len(deviations)\n\n    return mad",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
        "num_ids": 1251,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers' \"\"\"\n    if not numbers:\n        return []\n\n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n\n    return result",
        "test": "assert intersperse([], 4) == []",
        "num_ids": 945,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    def count_nesting(level: int, i: int, stack: List[int]) -> int:\n        if i == len(paren_string):\n            return max(stack) + 1 if level > 0 else 0\n        if paren_string[i] == '(':\n            stack.append(level)\n            return count_nesting(level + 1, i + 1, stack)\n        if paren_string[i] == ')':\n            stack.pop()\n            return count_nesting(level - 1, i + 1, stack)\n        return count_nesting(level, i + 1, stack)\n\n    nesting_levels = [count_nesting(0, 0, []) for _ in range(len(paren_string) + 1)]\n    return [level for level in nesting_levels if level > 0]",
        "test": "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
        "num_ids": 1434,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    return [s for s in strings if substring in s]",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 717,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    # Check if the list is empty\n    if not numbers:\n        return (0, 1)\n    \n    # Initialize sum and product variables\n    total_sum = numbers[0]\n    total_product = 1\n    \n    # Loop through the list and update the variables\n    for i in range(1, len(numbers)):\n        total_sum += numbers[i]\n        total_product *= numbers[i]\n    \n    # Return the sum and product of the list\n    return (total_sum, total_product)",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 1045,
        "indeed": false
    },
    {
        "number": 9,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_size = len(numbers)\n    max_list = [numbers[0]]\n    rolling_max = max_list[0]\n\n    for i in range(1, max_size):\n        if numbers[i] > rolling_max:\n            rolling_max = numbers[i]\n        max_list.append(rolling_max)\n\n    return max_list",
        "test": "assert rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1431,
        "indeed": false
    },
    {
        "number": 10,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    def is_palindrome(s: str) -> bool:\n        \"\"\" Test if given string is a palindrome \"\"\"\n        return s == s[::-1]\n\n    def is_prefix_palindrome(s: str) -> bool:\n        \"\"\" Test if given string is a palindrome \"\"\"\n        for i in range(len(s)):\n            if not is_palindrome(s[i:]):\n                return False\n        return True\n\n    def find_palindrome_suffix(s: str) -> str:\n        \"\"\" Find the longest postfix of the given string that is a palindrome \"\"\"\n        max_suffix_len = 0\n        max_suffix = \"\"\n        for i in range(len(s)):\n            if is_palindrome(s[i:]):\n                suffix_len = i + 1\n                if suffix_len > max_suffix_len:\n                    max_suffix_len = suffix_len\n                    max_suffix = s[i:]\n        return max_suffix\n\n    def reverse_prefix(s: str, start: int) -> str:\n        \"\"\" Reverse a string prefix that comes before the palindromic suffix \"\"\"\n        reversed_prefix = \"\"\n        for i in range(start, len(s)):\n            reversed_prefix += s[i]\n        return reversed_prefix\n\n    def make_palindrome(s: str) -> str:\n        \"\"\" Find the shortest palindrome that begins with a supplied string \"\"\"\n        max_palindrome_len = 0\n        max_palindrome = \"\"\n        for i in range(len(s)):\n            if is_prefix_palindrome(s[:i]):\n                suffix = find_palindrome_suffix(s[:i])\n                reversed_suffix = reverse_prefix(s, i)\n                prefix = s[:i]\n                palindrome_len = len(prefix) + len(reversed_suffix) + len(suffix)\n                if palindrome_len > max_palindrome_len:\n                    max_palindrome_len = palindrome_len\n                    max_palindrome = prefix + reversed_suffix + suffix\n        return max_palindrome\n\n    return make_palindrome(string)",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 1526,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n",
        "test": "assert string_xor('010', '110') == '100'",
        "num_ids": 965,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of list of strings, return the longest one.\n    Return the first one in case of multiple strings of the same length.\n    Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n\n    longest_len = 0\n    longest_string = \"\"\n    for string in strings:\n        if len(string) > longest_len:\n            longest_len = len(string)\n            longest_string = string\n\n    return longest_string",
        "test": "assert longest([]) is None",
        "num_ids": 848,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n    while b:\n        a, b = b, a % b\n    return a",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 754,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes",
        "test": "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
        "num_ids": 624,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    # initialize an empty string to store the sequence\n    sequence = \"\"\n    # loop through the numbers from 0 to n inclusive\n    for i in range(n+1):\n        # append the current number to the sequence string\n        sequence += str(i) + \" \"\n    # remove the trailing space and return the sequence\n    return sequence[:-1]",
        "test": "assert string_sequence(0) == '0'",
        "num_ids": 668,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    unique_chars = set()\n    for char in string.lower():\n        if char not in unique_chars:\n            unique_chars.add(char)\n    return len(unique_chars)",
        "test": "assert count_distinct_characters('xyzXYZ') == 3",
        "num_ids": 617,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    result = []\n    for note in music_string:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return result",
        "test": "assert parse_music('o o|.| o| o|.|.|.|.| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
        "num_ids": 1524,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    2\n    \"\"\"\n    # Initialize count variable\n    count = 0\n    \n    # Loop through the string\n    for i in range(len(string)):\n        \n        # Check if the current substring is found in the string\n        if string[i:i+len(substring)] == substring:\n            \n            # Increment the count variable\n            count += 1\n            \n    # Return the count\n    return count",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 858,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    # Split the input string into a list of numbers\n    nums = numbers.split()\n    # Create a list of integers from the numbers in the list\n    num_list = [int(x) for x in nums]\n    # Sort the list of integers in ascending order\n    num_list.sort()\n    # Convert the sorted list of integers back to a string and return it\n    return''.join([str(x) for x in num_list])",
        "test": "assert sort_numbers('three one five') == 'one three five'",
        "num_ids": 1257,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    # Sort the list of numbers in ascending order\n    sorted_numbers = sorted(numbers)\n\n    # Find the two numbers that are closest to each other\n    smallest_diff = float('inf')\n    for i in range(len(sorted_numbers) - 1):\n        diff = abs(sorted_numbers[i + 1] - sorted_numbers[i])\n        if diff < smallest_diff:\n            smallest_diff = diff\n            smallest_num = sorted_numbers[i]\n            largest_num = sorted_numbers[i + 1]\n\n    # Return the two numbers in the desired order\n    return smallest_num, largest_num",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
        "num_ids": 1749,
        "indeed": true
    },
    {
        "number": 21,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 25,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # calculate the range of values in the list\n    max_val = max(numbers)\n    min_val = min(numbers)\n    \n    # calculate the new values\n    new_values = [(num - min_val) / (max_val - min_val) for num in numbers]\n    \n    # return the new values\n    return new_values",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 1358,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 768,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)",
        "test": "assert strlen('') == 0",
        "num_ids": 280,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n\n    largest = n\n\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n\n    return largest",
        "test": "assert largest_divisor(15) == 5, \"Incorrect output for largest_divisor(15)\"",
        "num_ids": 592,
        "indeed": false
    },
    {
        "number": 25,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, int(n**0.5)+1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors\n\nprint(factorize(8))  # Output: [2, 2, 2]\nprint(factorize(25))  # Output: [5, 5]\nprint(factorize(70))  # Output: [2, 5, 7]",
        "test": "assert factorize(8) == [2, 2, 2]",
        "num_ids": 1273,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers",
        "test": "assert remove_duplicates([1, 2, 3, 4, 5, 5, 4]) == [1, 2, 3, 4, 5]",
        "num_ids": 882,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()",
        "test": "assert flip_case('Hello') == 'hELLO'",
        "num_ids": 567,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)",
        "test": "assert concatenate([]) == ''",
        "num_ids": 476,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 717,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 744,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    \n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True",
        "test": "assert is_prime(6) == False, \"Test failed. Expected False, got {}\".format(is_prime(6))",
        "num_ids": 846,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x**2 +.... xs[n] * x**n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n\n    largest_coeff = max(abs(coeff) for coeff in xs)\n\n    if len(xs) % 2!= 0 or largest_coeff <= 0:\n        raise ValueError(\"Invalid input\")\n\n    x = -xs[0] / largest_coeff\n\n    return x",
        "test": "assert find_zero([1, 2]) == -0.5",
        "num_ids": 1810,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def sort_third(l: list) -> list:\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    # Separate the elements into three groups: first, second, and third\n    first = [x for i, x in enumerate(l) if i % 3 == 0]\n    second = [x for i, x in enumerate(l) if i % 3!= 0]\n    third = [x for i, x in enumerate(l) if i % 3 == 1]\n\n    # Sort the second and third groups, and combine them back into l'\n    l_prime = sorted(first + [min(second), max(second)] + third)\n\n    return l_prime",
        "test": "assert sort_third([5, 6, 3, 4, 8, 9, 2]) == [2, 3, 4, 5, 6, 8, 9]",
        "num_ids": 2167,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 557,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    if len(l) == 0:\n        return None\n    else:\n        return max(l)",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 637,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i)[-1] == '7':\n                count += 1\n    return count",
        "test": "assert fizz_buzz(50) == 0",
        "num_ids": 679,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def sort_even(l: list) -> list:\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    odd_index = 0\n    even_index = 1\n    while even_index < len(l):\n        if l[even_index] % 2 == 0:\n            if l[odd_index] > l[even_index]:\n                l[odd_index], l[even_index] = l[even_index], l[odd_index]\n            odd_index += 1\n            even_index += 1\n        else:\n            even_index += 1\n    return l",
        "test": "assert sort_even([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 1368,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decode each group by removing the first and last characters.\n    groups = [group[1:-1] for group in groups]\n    # join groups into a single string.\n    return \"\".join(groups)",
        "test": "assert decode_cyclic(\"\") == \"\"",
        "num_ids": 1466,
        "indeed": false
    },
    {
        "number": 39,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if num is a prime number, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef is_fibonacci(num):\n    \"\"\"\n    Returns True if num is a Fibonacci number, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    prev_prev, prev = 0, 1\n    while prev <= num:\n        if prev == num:\n            return True\n        prev_prev, prev = prev, prev_prev + prev\n    return False\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    count = 0\n    fib_num = 1\n    while count < n:\n        if is_prime(fib_num) and is_fibonacci(fib_num):\n            count += 1\n        fib_num += 1\n    return fib_num - 1",
        "test": "assert prime_fib(1) == 2",
        "num_ids": 1111,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    # Check if the list has at least three elements\n    if len(l) < 3:\n        return False\n\n    # Sort the list in ascending order\n    l.sort()\n\n    # Initialize a set to keep track of unique elements\n    unique_set = set()\n\n    # Loop through the list\n    for num in l:\n        # Check if the current element is already in the set\n        if num in unique_set:\n            return True\n\n        # Add the current element to the set\n        unique_set.add(num)\n\n    # If we reach this point, it means all three unique elements are negative\n    return False\n",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 1777,
        "indeed": false
    },
    {
        "number": 41,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\n    # Define two sets of cars: left and right\n    left_cars = [0] * n\n    right_cars = [0] * n\n\n    # Keep track of the number of collisions\n    collisions = 0\n\n    # Loop through the road and update the position of each car\n    for i in range(2 * n):\n        if i < n:\n            left_cars[i] += 1\n        else:\n            right_cars[i - n] += 1\n\n        # Check for collisions\n        for j in range(i - 2 * n + 1):\n            if left_cars[j] > 0 and right_cars[j] > 0:\n                collisions += 1\n                left_cars[j] -= 1\n                right_cars[j] -= 1\n\n    return collisions",
        "test": "assert car_race_collision(3) == 0",
        "num_ids": 1514,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 913,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for num in l:\n        complement = -num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False",
        "test": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 1227,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    digits = '0123456789ABCDEF'\n    result = []\n    while x > 0:\n        result.append(digits[x % base])\n        x //= base\n    result.reverse()\n    return ''.join(result)",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 1332,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h",
        "test": "assert triangle_area(5, 3) == 7.5, \"triangle_area(5, 3) returned incorrect value\"",
        "num_ids": 399,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        fib4_0 = 0\n        fib4_1 = 0\n        fib4_2 = 2\n        fib4_3 = 0\n        for i in range(4, n + 1):\n            fib4_i = fib4_0 + fib4_1 + fib4_2 + fib4_3\n            fib4_0 = fib4_1\n            fib4_1 = fib4_2\n            fib4_2 = fib4_3\n            fib4_3 = fib4_i\n        return fib4_i",
        "test": "assert fib4(5) == 4, \"fib4(5) should be 4\"",
        "num_ids": 1099,
        "indeed": true
    },
    {
        "number": 47,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2-1] + l[n//2]) / 2\n    else:\n        return l[n//2]",
        "test": "assert median([3, 1, 2, 4, 5]) == 3",
        "num_ids": 996,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    # Convert the string to lowercase and remove any non-alphanumeric characters\n    text = ''.join(c.lower() for c in text if c.isalnum())\n    # Check if the string is equal to its reverse\n    return text == text[::-1]",
        "test": "assert is_palindrome('') == True",
        "num_ids": 535,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)",
        "test": "assert modp(3, 5) == 3, \"modp(3, 5)!= 3\"",
        "num_ids": 768,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) - 5) % 26 + ord(\"a\")) for ch in s])",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hello\"",
        "num_ids": 859,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    new_text = \"\"\n    for char in text:\n        if char.lower() not in vowels:\n            new_text += char\n    return new_text",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 676,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(num < t for num in l)",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True",
        "num_ids": 773,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y",
        "test": "assert add(2, 3) == 5",
        "num_ids": 295,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\n    return sorted(set(s0)) == sorted(set(s1))\n",
        "test": "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
        "num_ids": 1109,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)",
        "test": "assert fib(10) == 55",
        "num_ids": 464,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    brackets is a string of \"<\" and \">\".\n    Returns True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    # create a stack to keep track of opening brackets\n    stack = []\n    \n    # loop through each bracket in the string\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            # if the stack is empty, there is an unmatched closing bracket\n            if not stack:\n                return False\n            # if the top of the stack is an opening bracket, pop it off and continue\n            elif stack[-1] == \"<\":\n                stack.pop()\n            else:\n                return False\n    \n    # if the stack is empty, all brackets are matched and the function returns True\n    return len(stack) == 0",
        "test": "assert correct_bracketing(\"<\") == False",
        "num_ids": 721,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def monotonic(l: list) -> bool:\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n        for i in range(1, len(l)):\n            if l[i] <= l[i-1]:\n                return False\n    else:\n        for i in range(1, len(l)):\n            if l[i] >= l[i-1]:\n                return False\n    return True",
        "test": "assert monotonic([1, 2, 4, 20]) == True",
        "num_ids": 878,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    common_elements = set(l1) & set(l2)\n    return sorted(list(common_elements))\n",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 961,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # We use trial division to find the factors of n\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    # If we reach here, n is a prime number\n    return n",
        "test": "assert largest_prime_factor(2048) == 2",
        "num_ids": 942,
        "indeed": false
    },
    {
        "number": 60,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum",
        "test": "assert sum_to_n(30) == 465",
        "num_ids": 738,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            if stack[-1]!= '(':\n                return False\n            stack.pop()\n    return not stack",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 689,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    # initialize the result list with zeros\n    result = [0] * len(xs)\n    \n    # iterate over the coefficients from last to first\n    for i in range(len(xs)-1, -1, -1):\n        # if the current coefficient is not zero, add it to the result\n        if xs[i]!= 0:\n            result[i] = xs[i]\n        \n        # if the coefficient is zero, remove it from the result\n        else:\n            result.remove(0)\n    \n    return result",
        "test": "assert derivative([1, 2, 3]) == [2, 6]",
        "num_ids": 992,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
        "test": "assert fibfib(1) == 0",
        "num_ids": 1237,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowel_count = 0\n    last_vowel = False\n    for char in s:\n        if char in vowels:\n            if last_vowel:\n                vowel_count += 1\n            else:\n                last_vowel = True\n    if last_vowel:\n        vowel_count += 1\n    return vowel_count",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 1143,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    # Convert x to a string\n    x_str = str(x)\n    # Get the length of the string\n    len_x_str = len(x_str)\n    # Check if shift is greater than the length of the string\n    if shift > len_x_str:\n        # If shift is greater than the length of the string, reverse the digits of x\n        x_str = x_str[::-1]\n    # Split the string into a list of digits\n    x_list = list(x_str)\n    # Circular shift the digits of the integer x\n    if shift < 0:\n        # If shift is negative, shift the digits to the left by the absolute value of shift\n        shift = -shift\n        for i in range(shift):\n            x_list.append(x_list.pop(0))\n    else:\n        # If shift is positive, shift the digits to the right by shift\n        for i in range(shift):\n            x_list.append(x_list.pop(0))\n    # Join the list of digits into a string\n    x_str = \"\".join(x_list)\n    # Return the result as a string\n    return x_str",
        "test": "assert circular_shift(12, 1) == \"21\"",
        "num_ids": 1221,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    upper_case_chars = [char for char in s if char.isupper()]\n    sum_of_chars = sum([ord(char) for char in upper_case_chars])\n    return sum_of_chars",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 889,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    apples, oranges, mangoes = 0, 0, 0\n    # split the string into three parts based on the separator''\n    parts = s.split()\n    # iterate through the parts and update the respective variables\n    for part in parts:\n        if part.endswith('apples'):\n            apples = int(part.strip('apples'))\n        elif part.endswith('oranges'):\n            oranges = int(part.strip('oranges'))\n        elif part.endswith('mangoes'):\n            mangoes = n - apples - oranges\n    return mangoes",
        "test": "assert fruit_distribution(\"0 apples and 1 oranges\", 3) == 2",
        "num_ids": 1348,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes,\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n    # Helper function to find the smallest even value in an array\n    def find_smallest_even(arr):\n        smallest_even = float('inf')\n        smallest_index = -1\n        for i in range(len(arr)):\n            if arr[i] % 2 == 0 and arr[i] < smallest_even:\n                smallest_even = arr[i]\n                smallest_index = i\n        return smallest_even, smallest_index\n\n    if not arr:\n        return []\n\n    smallest_even, smallest_index = find_smallest_even(arr)\n\n    return [smallest_even, smallest_index]",
        "test": "assert pluck([4,2,3]) == [2, 1]",
        "num_ids": 2487,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\n    # Initialize variables\n    max_freq = 0\n    max_value = 0\n\n    # Loop through the list\n    for num in lst:\n        # Check if the number is greater than 0\n        if num > 0:\n            # Check if the number has a frequency greater than or equal to its value\n            if lst.count(num) >= num:\n                # Update max_freq and max_value if necessary\n                if lst.count(num) > max_freq:\n                    max_freq = lst.count(num)\n                    max_value = num\n\n    # Return the maximum value that has a frequency greater than or equal to its value\n    if max_value > 0:\n        return max_value\n    else:\n        return -1",
        "test": "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3",
        "num_ids": 1640,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if not lst:\n        return []\n\n    min_val = min(lst)\n    max_val = max(lst)\n\n    if min_val == max_val:\n        return [min_val] * len(lst)\n\n    new_lst = []\n    for val in lst:\n        if val == min_val:\n            new_lst.append(max_val)\n        elif val == max_val:\n            new_lst.append(min_val)\n        else:\n            new_lst.append(val)\n\n    return strange_sort_list(new_lst)\n",
        "test": "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5], \"Failed to sort the list correctly\"",
        "num_ids": 1776,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    \n    # Check if the three sides make a valid triangle\n    if a+b > c and b+c > a and c+a > b:\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1",
        "test": "assert triangle_area(3, 4, 5) == 6.00",
        "num_ids": 1156,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_palindrome(lst):\n    return lst == lst[::-1]\n\ndef will_it_fly(q, w):\n    if is_palindrome(q):\n        return sum(q) <= w\n    else:\n        return False",
        "test": "assert will_it_fly([1, 2], 5) == False, \"did not pass test 1\"",
        "num_ids": 633,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize a variable to store the minimum number of changes required\n    min_changes = 0\n\n    # Iterate through the array\n    for i in range(len(arr)-1):\n        # Check if the current element and the next element are the same\n        if arr[i] == arr[i+1]:\n            # Increment the minimum number of changes required by 1\n            min_changes += 1\n            # Break out of the loop since we have found a palindrome\n            break\n\n    return min_changes",
        "test": "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1",
        "num_ids": 1884,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n\n    # calculate the sum of all chars in the first list\n    first_list_sum = sum([len(s) for s in lst1])\n\n    # calculate the sum of all chars in the second list\n    second_list_sum = sum([len(s) for s in lst2])\n\n    # compare the two sums\n    if first_list_sum < second_list_sum:\n        return lst1\n    elif first_list_sum > second_list_sum:\n        return lst2\n    else:\n        # if both sums are equal, return the first list\n        return lst1",
        "test": "assert total_match([], []) == []",
        "num_ids": 1525,
        "indeed": true
    },
    {
        "number": 75,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    def is_prime(num):\n        \"\"\"A helper function to check if a number is prime or not\"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    for i in range(2, a//3):\n        if a % i == 0:\n            if is_prime(i) and is_prime(a//i):\n                return True\n    return False",
        "test": "assert is_multiply_prime(70) == False, \"is_multiply_prime(70) should be False\"",
        "num_ids": 1028,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if n == 1:\n        return x == 1\n    elif n == 2:\n        return x == 1 or x == 4 or x == 9\n    else:\n        return False",
        "test": "assert is_simple_power(2, 2) == True",
        "num_ids": 928,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n\n    def cube_root(n):\n        '''\n        Write a helper function that returns the cube root of a given integer n.\n        '''\n        if n == 0:\n            return 0\n        else:\n            return cube_root(n // 3) + 1\n\n    if a % 2 == 0:\n        return False\n    else:\n        return cube_root(a) ** 3 == a",
        "test": "assert iscube(2) == False, \"2 should not be a cube of some integer number\"",
        "num_ids": 1146,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n\n    # define a function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    # initialize the count to 0\n    count = 0\n\n    # loop through each character in the input string\n    for char in num:\n        # convert the character to its decimal value\n        decimal = ord(char) - ord('0')\n\n        # check if the decimal value is prime\n        if is_prime(decimal):\n            # increment the count if the character is a prime\n            count += 1\n\n    return count",
        "test": "assert hex_key(\"1077E\") == 2, \"Test failed for hex_key('1077E')\"",
        "num_ids": 2017,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    binary = \"db\" + binary + \"db\"\n    return binary",
        "test": "assert decimal_to_binary(32) == \"db100000db\"",
        "num_ids": 1201,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n\n    # Convert the string to a list of characters\n    s = list(s)\n\n    # Create a dictionary to store the numbers of each character\n    char_count = {}\n\n    # Iterate over the list of characters\n    for char in s:\n        # If the character is not in the dictionary, add it with a count of 1\n        if char not in char_count:\n            char_count[char] = 1\n        # If the character is already in the dictionary, increment its count\n        else:\n            char_count[char] += 1\n\n    # Iterate over the list of characters again\n    for i in range(len(s)):\n        # Check if the current character is the same as the previous one\n        if s[i] == s[i - 1]:\n            return False\n\n        # If the current character is not the same as the previous one,\n        # check if the next three characters are distinct\n        elif i + 2 < len(s) and s[i] == s[i + 1] and s[i + 1] == s[i + 2]:\n            continue\n\n        # If the next three characters are distinct, check if they have been counted before\n        elif i + 2 < len(s) and (s[i], s[i + 1], s[i + 2]) in char_count:\n            continue\n\n        # If all of the checks fail, the current character cannot be the next character of a happy number\n        else:\n            return False\n\n    # If all checks pass, the string is happy\n    return True",
        "test": "assert is_happy('a') == False",
        "num_ids": 1706,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n             > 3.7                A \n             > 3.3                A- \n             > 3.0                B+\n             > 2.7                B \n             > 2.3                B-\n             > 2.0                C+\n             > 1.7                C\n             > 1.3                C-\n             > 1.0                D+ \n             > 0.7                D \n             > 0.0                D-\n              0.0                E\n    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Define the letter grades\n    A_plus = 4.0\n    A = 3.7\n    A_minus = 3.3\n    B_plus = 3.0\n    B = 2.7\n    B_minus = 2.3\n    C_plus = 2.0\n    C = 1.7\n    C_minus = 1.3\n    D_plus = 1.0\n    D = 0.7\n    D_minus = 0.0\n    E = 0.0\n    \n    # Create an empty list to store the letter grades\n    letter_grades = []\n    \n    # Loop through each grade in the list\n    for grade in grades:\n        # Check which letter grade the grade belongs to\n        if grade >= A_plus:\n            letter_grades.append('A+')\n        elif grade >= A:\n            letter_grades.append('A')\n        elif grade >= A_minus:\n            letter_grades.append('A-')\n        elif grade >= B_plus:\n            letter_grades.append('B+')\n        elif grade >= B:\n            letter_grades.append('B')\n        elif grade >= B_minus:\n            letter_grades.append('B-')\n        elif grade >= C_plus:\n            letter_grades.append('C+')\n        elif grade >= C:\n            letter_grades.append('C')\n        elif grade >= C_minus:\n            letter_grades.append('C-')\n        elif grade >= D_plus:\n            letter_grades.append('D+')\n        elif grade >= D:\n            letter_grades.append('D')\n        elif grade >= D_minus:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    \n    # Return the list of letter grades\n    return letter_grades",
        "test": "assert numerical_letter_grade([1.0, 1.0, 1.0, 1.0, 1.0]) == ['D+', 'D+', 'D+', 'D+', 'D+']",
        "num_ids": 3143,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # Check if the length of the string is a prime number\n    if len(string) < 2:\n        return False\n    for i in range(2, len(string)):\n        if len(string) % i == 0:\n            return False\n    return True",
        "test": "assert prime_length('Hello') == True",
        "num_ids": 946,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10 ** (n - 1), 10 ** n):\n        if str(i)[0] == '1':\n            count += 1\n    return count",
        "test": "assert starts_one_ends(1) == 1 # 100",
        "num_ids": 771,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n             a string of binary number\n    \"\"\"\n    total = 0\n    while N > 0:\n        total += N % 10\n        N //= 10\n    return bin(total)[2:]",
        "test": "assert solve(1000) == \"1\"",
        "num_ids": 1199,
        "indeed": true
    },
    {
        "number": 85,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\"\"\"\n    even_odds = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0 and i % 2 == 1:\n            even_odds += lst[i]\n    return even_odds",
        "test": "assert add([4, 2, 6, 7]) == 2, \"Test 1 failed: add([4, 2, 6, 7]) should return 2\"",
        "num_ids": 679,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n        chars = list(word)\n        chars.sort(key=lambda x: x)\n        result.append(\"\".join(chars))\n    return \" \".join(result)",
        "test": "assert anti_shuffle('Hi') == 'Hi'",
        "num_ids": 1146,
        "indeed": true
    },
    {
        "number": 87,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    # Check if lst is empty\n    if not lst:\n        return []\n\n    # Initialize an empty list to store the coordinates\n    coordinates = []\n\n    # Loop through each row of the data\n    for i, row in enumerate(lst):\n        # Check if the row contains the target value\n        if x in row:\n            # Initialize an empty list to store the row coordinates\n            row_coordinates = []\n\n            # Loop through each column of the row\n            for j, value in enumerate(row):\n                # If the value is the target value, append the coordinate\n                if value == x:\n                    row_coordinates.append((i, j))\n\n            # Sort the row coordinates by columns in descending order\n            row_coordinates.sort(key=lambda x: x[1], reverse=True)\n\n            # Append the row coordinates to the overall list\n            coordinates.extend(row_coordinates)\n\n    # Sort the overall list of coordinates by rows in ascending order\n    coordinates.sort(key=lambda x: x[0])\n\n    return coordinates",
        "test": "assert get_row([], 1) == []",
        "num_ids": 1870,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Create a new array to store the sorted array\n    sorted_array = []\n\n    # Iterate through the array and add the elements to the sorted array\n    for i in range(len(array)):\n        # Calculate the sum of the first index value and last index value\n        sum_value = array[i] + array[len(array)-1-i]\n\n        # Add the element to the sorted array if the sum is odd or descending order\n        if sum_value % 2!= 0:\n            sorted_array.append(array[i])\n        else:\n            sorted_array.insert(0, array[i])\n\n    # Return the sorted array\n    return sorted_array",
        "test": "assert sort_array([5]) == [5]",
        "num_ids": 1659,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    rotated_alphabet = alphabet[2:]+alphabet[:2]\n    encrypted_string = ''\n    \n    for char in s:\n        if char in rotated_alphabet:\n            encrypted_string += rotated_alphabet.index(char)\n        else:\n            encrypted_string += alphabet.index(char)\n    \n    return encrypted_string",
        "test": "assert encrypt('asdfghjkl') == 'ewhjklnop'",
        "num_ids": 1215,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    else:\n        min1 = min(lst)\n        min2 = float('inf')\n        for num in lst:\n            if num < min1:\n                min2 = min1\n                min1 = num\n            elif num < min2 and num!= min1:\n                min2 = num\n        if min2 == float('inf'):\n            return None\n        else:\n            return min2",
        "test": "assert next_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 1126,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\n    # Split the string into sentences and iterate over them\n    count = 0\n    sentences = S.split(\".\")\n    for sentence in sentences:\n        # Split each sentence into words and iterate over them\n        words = sentence.split()\n        for word in words:\n            # If the first word of the sentence is \"I\", then it's a boredom\n            if word.startswith(\"I\"):\n                count += 1\n                break\n\n    return count",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 1143,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def any_int(x, y, z):\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    elif x + y == z or x + z == y or y + z == x:\n        return True\n    else:\n        return False",
        "test": "assert any_int(3, 2, 2) == False",
        "num_ids": 1018,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'Thks ks c mgsscgg'\n    \"\"\"\n\n    vowels = 'aeiou'\n    swapped_case = [c.lower() if c.isupper() else c.upper() for c in message]\n    encoded = ''\n\n    for i, c in enumerate(swapped_case):\n        if c.isalpha():\n            if c in vowels:\n                # find the next vowel in the alphabet\n                j = i + vowels.index(c) + 1\n                if j >= len(vowels):\n                    # wrap around to the beginning of the alphabet\n                    j = 0\n                encoded += swapped_case[j]\n            else:\n                encoded += swapped_case[i]\n        else:\n            encoded += c\n\n    return encoded",
        "test": "assert encode('This is a message') == 'thks ks c mgsscgg', 'encode(\"This is a message\") failed.'",
        "num_ids": 1604,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef largest_prime(lst):\n    max_prime = lst[0]\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    return max_prime\n\ndef sum_of_digits(num):\n    return sum(int(d) for d in str(num))\n\ndef skjkasdkd(lst):\n    max_prime = largest_prime(lst)\n    sum_digits = sum_of_digits(max_prime)\n    return sum_digits",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
        "num_ids": 1700,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\n    # check if the dictionary is empty\n    if not dict:\n        return False\n\n    # loop through the dictionary keys\n    for key in dict:\n\n        # check if the key is in upper case\n        if key.isupper():\n            return False\n\n        # check if the key is in lower case\n        elif key.islower():\n            continue\n\n        # if the key is not in upper case or lower case, return False\n        else:\n            return False\n\n    # if all keys are in upper case or lower case, return True\n    return True",
        "test": "assert check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"check_dict_case failed with example 2\"",
        "num_ids": 1778,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes",
        "test": "assert count_up_to(5) == [2, 3]",
        "num_ids": 1381,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def multiply(a, b):\n    \"\"\"\n    Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Find the unit digits of a and b\n    a_unit = a // 10 ** (len(str(a)) - 1)\n    b_unit = b // 10 ** (len(str(b)) - 1)\n\n    # Multiply the unit digits and return the result\n    result = a_unit * b_unit\n    return result",
        "test": "assert multiply(19, 28) == 72",
        "num_ids": 1516,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U':\n            if i % 2 == 0:\n                count += 1\n    return count",
        "test": "assert count_upper('abcdefg') == 0",
        "num_ids": 743,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    # convert the value to float and store it as a variable\n    num = float(value)\n\n    # calculate the absolute value of the difference between the integer part and the decimal part\n    difference = abs(num - int(num))\n\n    # if the difference is less than 0.5, return the integer part\n    if difference < 0.5:\n        return int(num)\n\n    # otherwise, round the number away from zero to the nearest integer and return it\n    else:\n        return round(num)",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 1434,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    # initialize an empty list to store the levels\n    levels = []\n    \n    # loop until we have made n levels\n    while len(levels) < n:\n        # calculate the number of stones in the next level\n        if n % 2 == 1:\n            stones = n + 1\n        else:\n            stones = 2 * n\n        # add the number of stones to the list of levels\n        levels.append(stones)\n        # update the number of stones in the current level\n        n = stones\n        \n    return levels",
        "test": "assert make_a_pile(4) == [4, 6, 8, 10]",
        "num_ids": 1385,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Split the string by commas or spaces\n    words = s.split(\", \")\n    # Remove any empty strings from the list\n    words = [word.strip() for word in words if word.strip()]\n    # Return the list of words\n    return words",
        "test": "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
        "num_ids": 1103,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0:\n            if num > max_even:\n                max_even = num\n    return max_even",
        "test": "assert choose_num(13, 12) == -1",
        "num_ids": 898,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    if n > m:\n        return -1\n\n    avg = (n + m) / 2\n    return str(int(avg))",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 1045,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Remove even digits from the list\n    x = [int(d) for d in str(x) if int(d) % 2!= 0]\n    # Sort the list\n    x.sort()\n    # Return the sorted list\n    return x\n",
        "test": "assert unique_digits([152, 323, 1422, 10]) == []",
        "num_ids": 1394,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n             -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n             -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n      \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n      \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n             -> sort arr -> [-1, 1, 55]\n             -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # Check if the array is empty\n    if not arr:\n        return []\n    \n    # Create a new array to store the sorted and reversed numbers\n    new_arr = []\n    \n    # Loop through the array and add the numbers that are between 1 and 9 inclusive\n    for num in arr:\n        if 1 <= num <= 9:\n            new_arr.append(num)\n    \n    # Sort the new array in ascending order\n    new_arr.sort()\n    \n    # Reverse the sorted array\n    new_arr.reverse()\n    \n    # Create a new array to store the names of the digits\n    digit_names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    \n    # Loop through the reversed array and replace each digit with its corresponding name\n    for i in range(len(new_arr)):\n        new_arr[i] = digit_names[new_arr[i]-1]\n    \n    # Return the new array of names\n    return new_arr",
        "test": "assert by_length([]) == []",
        "num_ids": 2524,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i * (1 + i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result",
        "test": "assert f(5) == [1, 2, 6, 24, 15]",
        "num_ids": 1378,
        "indeed": false
    },
    {
        "number": 107,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        num = str(i)\n        if num == num[::-1]:\n            if int(num) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)",
        "test": "assert even_odd_palindrome(3) == (1, 2)",
        "num_ids": 1729,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        # Check if the number has a negative sign\n        if num < 0:\n            # Get the first signed digit\n            signed_digit = abs(num) // 100\n            # Check if the sum of the digits is greater than 0\n            if sum(int(digit) for digit in str(abs(signed_digit))) > 0:\n                count += 1\n    return count",
        "test": "assert count_nums([]) == 0",
        "num_ids": 1123,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def move_one_ball(arr):\n    \"\"\"\n    We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].\n    The numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n    \n    Note: The given list is guaranteed to have unique elements.\n    \n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n    \"\"\"\n    if len(arr) == 0:\n        return True\n    \n    # We start from the end of the array and move the last element to the starting position\n    # until the last element is in its correct position\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] > arr[i - 1]:\n            # If the element is greater than the element in its previous position, \n            # we don't need to perform any right shift operation\n            return False\n        \n        # If the element is smaller than the element in its previous position, \n        # we perform a right shift operation\n        arr[i], arr[i - 1] = arr[i - 1], arr[i]\n        \n    return True",
        "test": "assert move_one_ball([3, 5, 4, 1, 2]) == False",
        "num_ids": 3011,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\"\"\"\n\n    # Check if the two lists have the same length\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n\n    # Find the difference between the two lists\n    diff = set(lst1) - set(lst2)\n\n    # Check if the difference contains only even numbers\n    if not all(x % 2 == 0 for x in diff):\n        return \"NO\"\n\n    # Exchange the elements in the lists and check if all elements are even\n    lst1, lst2 = lst2, lst1\n    for i in range(len(lst1)):\n        if lst1[i] % 2!= lst2[i] % 2:\n            return \"NO\"\n\n    return \"YES\"",
        "test": "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"",
        "num_ids": 2489,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \n    \"\"\"\n    \n    # create an empty dictionary to store the counts\n    counts = {}\n    \n    # iterate over the characters in the string and update the count for each letter\n    for char in test:\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n            \n    # find the letter with the highest count\n    max_count = 0\n    max_letter = None\n    for letter, count in counts.items():\n        if count > max_count:\n            max_count = count\n            max_letter = letter\n            \n    # create a new dictionary containing only the letter with the highest count\n    result = {}\n    result[max_letter] = max_count\n    \n    # if there are multiple letters with the same highest count, create a new list and add them to the dictionary\n    if len(counts) > 1:\n        for letter, count in counts.items():\n            if count == max_count:\n                if letter not in result:\n                    result[letter] = []\n                result[letter].append(letter)\n    \n    return result",
        "test": "assert histogram('a b b a') == {'a': 2, 'b': 2}",
        "num_ids": 1865,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def reverse_delete(s, c):\n    # Create a set to store the characters in c\n    set_c = set(c)\n    # Initialize an empty string to store the final string\n    result = \"\"\n    # Loop through each character in s\n    for char in s:\n        # If the character is not in set_c, append it to result\n        if char not in set_c:\n            result += char\n    # Check if the final string is a palindrome\n    is_palindrome = s == result[::-1]\n    # Return a tuple containing the result string and True/False for the check\n    return (result, is_palindrome)",
        "test": "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)",
        "num_ids": 1073,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\n    def count_odd_digits(s):\n        \"\"\"Return the count of odd digits in a string.\"\"\"\n        return sum(1 for d in s if int(d) % 2 == 1)\n\n    result = []\n    for s in lst:\n        count = count_odd_digits(s)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result",
        "test": "assert odd_count(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]",
        "num_ids": 1876,
        "indeed": true
    },
    {
        "number": 114,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    # Initialize the minimum sum as the maximum integer\n    min_sum = float('inf')\n\n    # Initialize two pointers, left and right, to the first and last indices of the array\n    left = 0\n    right = len(nums) - 1\n\n    # Move the left pointer to the right until the sum of the sub-array is less than the minimum sum\n    while left < right:\n        sub_sum = sum(nums[left:right+1])\n\n        if sub_sum < min_sum:\n            min_sum = sub_sum\n\n        # If the sum of the sub-array is greater than the minimum sum, move the left pointer to the right\n        if sub_sum > min_sum + nums[left]:\n            left += 1\n\n    return min_sum",
        "test": "assert minSubArraySum([-1, -2, -3]) == -6",
        "num_ids": 1228,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    wells_length = len(grid)\n    bucket_capacity = capacity\n\n    # Calculate the total water available in the grid\n    total_water = 0\n    for row in grid:\n        total_water += sum(row)\n\n    # Calculate the maximum number of times we need to fill the buckets\n    max_fill_count = int(math.ceil(total_water / bucket_capacity))\n\n    # Initialize the bucket level to the maximum capacity\n    bucket_level = bucket_capacity\n\n    # Fill the buckets with water until the level is less than the total water\n    while bucket_level < total_water:\n        # Calculate the number of buckets we can fill with the current bucket level\n        num_buckets_to_fill = int(math.floor(bucket_level / bucket_capacity))\n\n        # Update the bucket level and the total number of fills\n        bucket_level += bucket_capacity * num_buckets_to_fill\n        max_fill_count = max(max_fill_count, num_buckets_to_fill)\n\n    return max_fill_count",
        "test": "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6",
        "num_ids": 2503,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Define a function to count the number of ones in a binary number\n    def count_ones(num):\n        count = 0\n        while num > 0:\n            count += num & 1\n            num >>= 1\n        return count\n\n    # Sort the array based on the number of ones in binary representation\n    arr.sort(key=lambda x: (-count_ones(bin(x)[2:]), x))\n\n    return arr",
        "test": "assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]",
        "num_ids": 1682,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    # Remove all non-letter and non-space characters from the string\n    s = ''.join(e for e in s if e.isalpha() or e.isspace())\n\n    # Split the string into words\n    words = s.split()\n\n    # Initialize an empty list to store the selected words\n    selected_words = []\n\n    # Iterate over the words and check if they contain exactly n consonants\n    for word in words:\n        if sum(1 for letter in word if letter.lower() in 'bcdfghjklmnpqrstvwxyz') == n:\n            selected_words.append(word)\n\n    return selected_words",
        "test": "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
        "num_ids": 1781,
        "indeed": true
    },
    {
        "number": 118,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def get_closest_vowel(word):\n    \"\"\"\n    You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    closest_vowel = ''\n    right_side = word[::-1]\n    for i in range(len(right_side) - 1):\n        if right_side[i].lower() in vowels:\n            if right_side[i+1].lower() in vowels:\n                if abs(ord(right_side[i]) - ord(right_side[i+1])) <= 1:\n                    closest_vowel = right_side[i]\n                elif abs(ord(right_side[i]) - ord(right_side[i+1])) == 2:\n                    closest_vowel = right_side[i] + right_side[i+1]\n                    break\n            elif i == len(right_side) - 2:\n                closest_vowel = right_side[i]\n    return closest_vowel",
        "test": "assert get_closest_vowel(\"FULL\") == \"U\"",
        "num_ids": 1596,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    open_count = 0\n    close_count = 0\n\n    for s in lst:\n        for c in s:\n            if c == '(':\n                open_count += 1\n            elif c == ')':\n                close_count += 1\n\n    if open_count == close_count:\n        return 'Yes'\n    else:\n        return 'No'",
        "test": "assert match_parens([')', ')']) == 'No'",
        "num_ids": 1523,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort(reverse=True)\n    return arr[:k]\n",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]",
        "num_ids": 1531,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n    # Initialize a variable to keep track of the sum of odd elements in even positions\n    total = 0\n\n    # Iterate through the list of integers\n    for i in range(len(lst)):\n        # Check if the current element is odd and in an even position\n        if lst[i] % 2 == 1 and i % 2 == 0:\n            # Add the current odd element to the total\n            total += lst[i]\n\n    return total",
        "test": "assert solution([5, 8, 7, 1]) == 12",
        "num_ids": 965,
        "indeed": true
    },
    {
        "number": 122,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n    total_sum = 0\n\n    for i in range(k):\n        total_sum += arr[i] // 10\n\n    return total_sum",
        "test": "assert add_elements([12,34,56,78,90,1,2,3,4,5], 5) == 25, \"Test case 2 failed\"",
        "num_ids": 1624,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n           1. Collatz(1) is [1].\n           2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    def collatz(n):\n        \"\"\"\n        Return the collatz sequence for the given number.\n        \"\"\"\n        sequence = [n]\n        while n!= 1:\n            n = n % 2 == 0 and n // 2 or 3 * n + 1\n            sequence.append(n)\n        return sequence\n\n    odd_collatz = [num for num in collatz(n) if num % 2!= 0]\n    return sorted(odd_collatz)",
        "test": "assert get_odd_collatz(1) == [1]",
        "num_ids": 2078,
        "indeed": true
    },
    {
        "number": 124,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def valid_date(date):\n    \"\"\"\n    You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n    \n    for example: \n    valid_date('03-11-2000') => True\n    \n    valid_date('15-01-2012') => False\n    \n    valid_date('04-0-2040') => False\n    \n    valid_date('06-04-2020') => True\n    \n    valid_date('06/04/2020') => False\n    \"\"\"\n    # validate date string\n    if not date:\n        return False\n    \n    # split date string into month, day, and year\n    parts = date.split('-')\n    if len(parts)!= 3:\n        return False\n    \n    # convert month, day, and year to integer\n    month = int(parts[0])\n    day = int(parts[1])\n    year = int(parts[2])\n    \n    # check if year is a leap year\n    if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n        days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    else:\n        days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    # check if month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # check if day is valid\n    if day < 1 or day > days_in_month[month-1]:\n        return False\n    \n    # if everything is valid, return True\n    return True",
        "test": "assert valid_date('03-11-2000') == True, 'Invalid date'",
        "num_ids": 3235,
        "indeed": true
    },
    {
        "number": 125,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    \n    # Split the text on whitespaces\n    words = txt.split()\n    \n    # Check if the text contains commas\n    if ',' in txt:\n        # Split the text on commas\n        words = words[0].split(',') + words[1:]\n    \n    # Check if the text contains at least one whitespace\n    if'' in txt:\n        # Split the text on whitespaces\n        return words\n    else:\n        # Split the text on commas\n        return words[0].split(',')",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 1451,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    if len(lst) < 2:\n        return True\n\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n\n    return True",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 1696,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def intersection(interval1, interval2):\n    \"\"\"\n    You are given two intervals, where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n    \"\"\"\n\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n\n    if end1 < end2:\n        return \"NO\"\n\n    length = end1 - start1\n    if length % 2 == 0:\n        return \"NO\"\n\n    is_prime = True\n    for i in range(3, int(length ** 0.5) + 1, 2):\n        if length % i == 0:\n            is_prime = False\n            break\n    if is_prime:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\"",
        "num_ids": 1674,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    \n    if not arr:\n        return None\n    \n    sign_product = 1\n    product = 1\n    for num in arr:\n        if num == 0:\n            product = 0\n            break\n        elif num > 0:\n            product *= 1\n        else:\n            product *= -1\n    \n    magnitude_sum = sum(abs(num) for num in arr)\n    \n    return magnitude_sum * sign_product * product",
        "test": "assert prod_signs([1, 2, 2, -4]) == -9",
        "num_ids": 1053,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessaily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    def helper(i, j, k, lst_A, lst_B):\n        if i == 0 and j == 0:\n            return [lst_A[k]]\n        elif i == 0:\n            return helper(0, j-1, k, lst_A, lst_B) + [lst_A[k]]\n        elif j == 0:\n            return helper(i-1, 0, k, lst_A, lst_B) + [lst_A[k]]\n        elif lst_A[k] < lst_B[k]:\n            return helper(i-1, j, k, lst_A, lst_B)\n        else:\n            return helper(i, j-1, k, lst_A, lst_B) + [lst_A[k]] + helper(i-1, j, k, lst_A, lst_B)\n\n    rows = len(grid)\n    cols = len(grid[0])\n\n    lst_A = [0] * k\n    lst_B = [0] * k\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j]!= 0:\n                lst_A[grid[i][j] - 1] += 1\n\n    lst_B[0] = 1\n    for i in range(1, k):\n        lst_B[i] = lst_A[i-1] + lst_B[i-1]\n\n    return helper(rows-1, cols-1, k, lst_A, lst_B)",
        "test": "assert minPath([[5,9,3], [4,1,6], [7,8,2]], 1) == [1]",
        "num_ids": 4332,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    seq = [0] * (n + 1)\n    seq[0] = 1\n    seq[1] = 3\n    seq[2] = 1\n    for i in range(3, n + 1):\n        seq[i] = (seq[i - 1] + seq[i - 2] + seq[i - 3]) % 1000000007\n    return seq",
        "test": "assert tri(2) == 2",
        "num_ids": 1832,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n    odd_sum = 0\n    while n > 0:\n        digit = n % 10\n        if digit % 2!= 0:\n            odd_sum += digit\n        n //= 10\n\n    if odd_sum == 0:\n        return 0\n    else:\n        return odd_sum",
        "test": "assert digits(4) == 0, \"Test failed for digits(4)\"",
        "num_ids": 829,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False",
        "num_ids": 575,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    return sum([int(round(x))**2 for x in lst])",
        "test": "assert sum_squares([1,2,3]) == 14",
        "num_ids": 1130,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    # Split the string into a list of characters\n    lst = list(txt)\n    \n    # Check if the last character is an alphabetical character\n    if not lst[-1].isalpha():\n        return False\n    \n    # Check if the last character is not a part of a word\n    for i in range(len(lst)-1, 0, -1):\n        if lst[i].isalpha():\n            return True\n    \n    return False",
        "test": "assert check_if_last_char_is_a_letter(\"apple pi e\") == True, \"Incorrect result for check_if_last_char_is_a_letter('apple pi e')\"",
        "num_ids": 1313,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr) - 1):\n        if arr[i] >= arr[i + 1]:\n            return i\n    return -1",
        "test": "assert can_arrange([1, 2, 3]) == -1",
        "num_ids": 1025,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    \n    # Initialize variables\n    max_negative = None\n    min_positive = None\n    \n    # Iterate through the list\n    for num in lst:\n        # Check if the number is negative\n        if num < 0:\n            # If it's negative, update the maximum negative integer\n            if max_negative is None or num > max_negative:\n                max_negative = num\n        # Check if the number is positive\n        elif num > 0:\n            # If it's positive, update the minimum positive integer\n            if min_positive is None or num < min_positive:\n                min_positive = num\n    \n    # Return the tuple (max_negative, min_positive)\n    return (max_negative, min_positive)",
        "test": "assert largest_smallest_integers([]) == (None, None)",
        "num_ids": 1501,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n    a = float(a)\n    b = float(b)\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None",
        "test": "assert compare_one(1, 2.5) == 2.5",
        "num_ids": 1717,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Check if the given number is even\n    if n % 2 == 0:\n        return False\n    \n    # Check if the given number can be written as the sum of exactly 4 positive even numbers\n    for i in range(2, n-1):\n        if n-i >= i and n-i % 2 == 0:\n            return True\n    \n    # If the given number cannot be written as the sum of exactly 4 positive even numbers, it cannot be equal to the sum of 4 positive even numbers\n    return False",
        "test": "assert is_equal_to_sum_even(4) == False",
        "num_ids": 717,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    # Initialize the factorial to 1\n    factorial = 1\n    # Loop over the integers from 1 to n (inclusive)\n    for i in range(1, n+1):\n        # Multiply the factorial by i\n        factorial *= i\n    # Return the factorial\n    return factorial",
        "test": "assert special_factorial(5) == 120, \"Failed: Test case 2 failed\"",
        "num_ids": 897,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    # Replace spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace consecutive spaces with -\n    i = 0\n    while i < len(text) - 1:\n        if text[i] == \" \" and text[i+1] == \" \":\n            text = text[:i] + \"-\" + text[i+2:]\n        i += 1\n        \n    return text",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 1114,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Check if the file name has more than three digits\n    if any(char.isdigit() for char in file_name):\n        return 'No'\n    # Check if the file name contains exactly one dot\n    if '.' not in file_name:\n        return 'No'\n    # Check if the substring before the dot is not empty and starts with a latin alphapet letter\n    before_dot, after_dot = file_name.rsplit('.', 1)\n    if not before_dot:\n        return 'No'\n    if not before_dot[0].isalpha():\n        return 'No'\n    # Check if the substring after the dot is one of the allowed types\n    allowed_types = ['txt', 'exe', 'dll']\n    if after_dot.lower() not in allowed_types:\n        return 'No'\n    return 'Yes'",
        "test": "assert file_name_check(\"1example.dll\") == 'No'",
        "num_ids": 2133,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and (i % 4!= 0 or i % 3!= 0):\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 == 0:\n            lst[i] = lst[i] ** 3\n        result += lst[i]\n    return result",
        "test": "assert sum_squares([]) == 0",
        "num_ids": 1424,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    return \" \".join(prime_words)",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\"",
        "num_ids": 1032,
        "indeed": true
    },
    {
        "number": 144,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n\n    # Extract the numerator and denominator from the input fractions\n    numerator_x, denominator_x = map(int, x.split('/'))\n    numerator_n, denominator_n = map(int, n.split('/'))\n\n    # Check if both numerators and denominators are positive whole numbers\n    if not all(numerator > 0 for numerator in (numerator_x, numerator_n)):\n        return False\n\n    # Check if both denominators are positive whole numbers\n    if not all(denominator > 0 for denominator in (denominator_x, denominator_n)):\n        return False\n\n    # Check if the numerator of x * n is divisible by the denominator of x * n\n    if numerator_x * numerator_n % denominator_x * denominator_n!= 0:\n        return False\n\n    # Check if the numerator of x * n is divisible by the denominator of n\n    if numerator_x * numerator_n % denominator_n!= 0:\n        return False\n\n    # If all the above conditions are satisfied, then x * n is a whole number\n    return True",
        "test": "assert simplify(\"1/6\", \"2/1\") == False",
        "num_ids": 1572,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # Helper function to get sum of digits of a number\n    def get_sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    # Sort the list based on the sum of digits of each number\n    nums = sorted(nums, key=lambda x: (get_sum_of_digits(x), nums.index(x)))\n\n    return nums",
        "test": "assert order_by_points([]) == []",
        "num_ids": 1345,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n\n    count = 0\n    for num in nums:\n        if num > 10 and (num // 10) % 2 == 1 and (num % 10) % 2 == 1:\n            count += 1\n\n    return count",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1",
        "num_ids": 1173,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            for k in range(j, n):\n                if (i*i - i + 1) % 3 == 0 and (j*j - j + 1) % 3 == 0 and (k*k - k + 1) % 3 == 0:\n                    count += 1\n    return count",
        "test": "assert get_max_triples(5) == 1, \"get_max_triples(5) == 1\"",
        "num_ids": 1617,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\n    # Get the distances between the two planets\n    dist1 = get_distance(planet1)\n    dist2 = get_distance(planet2)\n\n    # Calculate the angle between the orbits of the two planets\n    angle = get_angle(planet1, planet2)\n\n    # Initialize an empty list to store the planets\n    planets = []\n\n    # Find all planets that are within the angle range of the two planets\n    for planet in planets_list:\n        if get_angle(planet, planet1) < angle < get_angle(planet, planet2):\n            planets.append(planet)\n\n    # Sort the list of planets by distance from the sun\n    planets.sort(key=lambda x: get_distance(x), reverse=True)\n\n    return planets\n",
        "test": "assert bf(\"Earth\", \"Mercury\") == (\"Venus\")",
        "num_ids": 2869,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    result = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            result.append(word)\n    result.sort(key=lambda x: (-len(x), x))\n    return result\n",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 1932,
        "indeed": false
    },
    {
        "number": 150,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(num):\n    \"\"\"Checks if a number is prime\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y",
        "test": "assert x_or_y(7, 34, 12) == 34, \"Incorrect result for x_or_y(7, 34, 12)\"",
        "num_ids": 1022,
        "indeed": true
    },
    {
        "number": 151,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n\n    If the input list is empty, return 0.\n    '''\n\n    # initialize the sum variable to 0\n    total = 0\n\n    # iterate over each number in the input list\n    for num in lst:\n        # check if the number is not negative and an integer\n        if isinstance(num, int) and num >= 0:\n            # check if the number is odd\n            if num % 2!= 0:\n                # add the square of the number to the sum\n                total += num**2\n\n    # return the sum of squares of odd integers in the input list\n    return total",
        "test": "assert double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 == 10",
        "num_ids": 1356,
        "indeed": true
    },
    {
        "number": 152,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    example:\n    \n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    off_by = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            off_by.append(0)\n        else:\n            off_by.append(abs(guess[i] - game[i]))\n    return off_by",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 1789,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    # Find the strength of each extension\n    strengths = []\n    for extension in extensions:\n        # Convert the extension to uppercase and count the uppercase letters\n        uppercase_count = sum(1 for c in extension if c.isupper())\n        # Convert the extension to lowercase and count the lowercase letters\n        lowercase_count = sum(1 for c in extension if c.islower())\n        # Calculate the strength of the extension\n        strength = uppercase_count - lowercase_count\n        strengths.append(strength)\n\n    # Find the strongest extension and return its name with the class name\n    strongest_strength = max(strengths)\n    for i, extension in enumerate(extensions):\n        if strengths[i] == strongest_strength:\n            return class_name + '.' + extension",
        "test": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'",
        "num_ids": 2219,
        "indeed": true
    },
    {
        "number": 154,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    def is_substring(main_str, sub_str):\n        \"\"\"Function to check if main string contains sub string\"\"\"\n        return main_str.find(sub_str)!= -1\n\n    def rotations(word):\n        \"\"\"Function to get all rotations of a word\"\"\"\n        return [word[i:] + word[:i] for i in range(len(word))]\n\n    def cycpattern_check(a, b):\n        \"\"\"Function to check for cyclic pattern in a and b\"\"\"\n        if is_substring(a, b):\n            return True\n        for word in rotations(b):\n            if is_substring(a, word):\n                return True\n        return False\n\n    return cycpattern_check(a, b)",
        "test": "assert cycpattern_check(\"abcd\",\"abd\") == False",
        "num_ids": 1314,
        "indeed": true
    },
    {
        "number": 155,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        num = abs(num)\n    digits = [int(digit) for digit in str(num)]\n    even_count = 0\n    odd_count = 0\n    for digit in digits:\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)",
        "test": "assert even_odd_count(123) == (1, 2)",
        "num_ids": 947,
        "indeed": true
    },
    {
        "number": 156,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    \n    # Define the Roman numerals\n    roman_numerals = [\n        ('M', 1000),\n        ('CM', 900),\n        ('D', 500),\n        ('CD', 400),\n        ('C', 100),\n        ('XC', 90),\n        ('L', 50),\n        ('XL', 40),\n        ('X', 10),\n        ('IX', 9),\n        ('V', 5),\n        ('IV', 4),\n        ('I', 1)\n    ]\n    \n    # Initialize the result string\n    result = ''\n    \n    # Iterate through the number\n    for i, (roman, value) in enumerate(roman_numerals):\n        # While the current number is less than the value of the current Roman numeral,\n        # add the current Roman numeral to the result string\n        while number >= value:\n            result += roman\n            number -= value\n    \n    # Return the result string in lowercase\n    return result.lower()",
        "test": "assert int_to_mini_roman(19) == 'xix'",
        "num_ids": 1797,
        "indeed": true
    },
    {
        "number": 157,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\n    # Check if the lengths are valid\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n\n    # Check if the three sides form a right-angled triangle\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False",
        "test": "assert right_angle_triangle(1, 2, 3) == False, 'Test 2 failed'",
        "num_ids": 1074,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n\n    def count_unique_chars(word):\n        \"\"\"Helper function to count the number of unique characters in a word.\"\"\"\n        return len(set(word))\n\n    max_length = 0\n    max_word = \"\"\n    for word in words:\n        word_length = len(word)\n        if word_length > max_length:\n            max_length = word_length\n            max_word = word\n        elif word_length == max_length:\n            if word < max_word:\n                max_word = word\n\n    return max_word",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 1393,
        "indeed": false
    },
    {
        "number": 159,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\n    # Check if the remaining carrots are enough to eat the need\n    if remaining < need:\n        # If not, eat all remaining carrots\n        carrots_left = 0\n    else:\n        # If enough, eat the need and the remaining carrots\n        carrots_left = remaining - need\n\n    # Return the total eaten carrots and the carrots left after meals\n    return [number + need, carrots_left]",
        "test": "assert eat(5, 6, 10) == [11, 4]",
        "num_ids": 2034,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n    # initialize variables\n    index = 0\n    result = 0\n    op = operator[index]\n    n = len(operand) - 1\n    \n    # iterate through operand list\n    while index <= n:\n        # check for operator change\n        if op!= operator[index]:\n            # evaluate previous operation and update result\n            result = operand[index-1] if op == '+' else operand[index-1] - operand[index-2]\n            op = operator[index]\n            index += 1\n        # evaluate current operand\n        elif index == n:\n            result = operand[index]\n        else:\n            result = operand[index] + operand[index+1]\n            index += 2\n    \n    # evaluate remaining operation\n    if op == '+':\n        result = operand[-1] + result\n    elif op == '-':\n        result = operand[-1] - result\n    elif op == '*':\n        result = operand[-1] * result\n    elif op == '//':\n        result = operand[-1] // result\n    elif op == '**':\n        result = operand[-1] ** result\n    \n    return result",
        "test": "assert do_algebra(['-', '*', '+', '/'], [15, 7, 3, 2]) == 3, \"Incorrect evaluation of the expression\"",
        "num_ids": 2149,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    \n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                result += s[i].upper()\n            else:\n                result += s[i].lower()\n        else:\n            result += s[i]\n    \n    if len(result) == 0:\n        result = s[::-1]\n    \n    return result",
        "test": "assert solve(\"ab\") == \"AB\"",
        "num_ids": 1274,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\n    # Check if the input is an empty string\n    if not text:\n        return None\n\n    # Convert the input string to bytes\n    text_bytes = text.encode('utf-8')\n\n    # Calculate the md5 hash of the bytes\n    md5_hash = hashlib.md5(text_bytes).hexdigest()\n\n    return md5_hash",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
        "num_ids": 945,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    even_digits = []\n    for i in range(a, b+1):\n        digit = i % 10\n        if digit % 2 == 0:\n            even_digits.append(digit)\n    return even_digits",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 1042,
        "indeed": false
    }
]