[
    {
        "number": 0,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n\n    return False",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) is False",
        "num_ids": 2300
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Remove spaces and convert the string to a list of characters\n    paren_list = list(paren_string.replace(\" \", \"\"))\n\n    # Initialize an empty list to store the substrings\n    result = []\n\n    # Iterate over the list of characters\n    i = 0\n    while i < len(paren_list):\n        # If the current character is an opening parenthesis\n        if paren_list[i] == '(':\n            # Initialize an empty list to store the substrings inside the parentheses\n            substring = []\n\n            # Increment i to move to the next character after the opening parenthesis\n            i += 1\n\n            # While the next character is not a closing parenthesis, add the characters to the substring list\n            while i < len(paren_list) and paren_list[i]!= ')':\n                substring.append(paren_list[i])\n                i += 1\n\n            # Add the substring to the result list\n            result.append(''.join(substring))\n\n            # Increment i to move to the next character after the closing parenthesis\n            i += 1\n\n        # Increment i to move to the next character in the list\n        i += 1\n\n    return result",
        "test": "assert separate_paren_groups('( ( ) )') == ['(())']",
        "num_ids": 3698
    },
    {
        "number": 2,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n\n    # Get the integer part of the number\n    int_part = int(number)\n\n    # Calculate the decimal part of the number\n    decimal_part = number - int_part\n\n    # Truncate the decimal part to 2 decimal places\n    decimal_part = round(decimal_part, 2)\n\n    return decimal_part",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 1559
    },
    {
        "number": 3,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
        "test": "assert below_zero([1, 2, -4, 5]) == True",
        "num_ids": 1848
    },
    {
        "number": 4,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 110,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n\n    # Calculate mean of the dataset\n    mean = sum(numbers) / len(numbers)\n\n    # Calculate the sum of absolute differences\n    sum_of_absolute_differences = sum(abs(num - mean) for num in numbers)\n\n    # Calculate the Mean Absolute Deviation\n    return sum_of_absolute_differences / len(numbers)",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0, \"Test failed for mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\"",
        "num_ids": 2214
    },
    {
        "number": 5,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers' \"\"\"\n    if not numbers:\n        return []\n    if len(numbers) == 1:\n        return numbers\n    result = []\n    for i in range(0, len(numbers)-1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result",
        "test": "assert intersperse([], 4) == []",
        "num_ids": 1727
    },
    {
        "number": 6,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    # Helper function to find the deepest level of nesting in a single group of parentheses\n    def count_nesting(s: str) -> int:\n        nesting = 0\n        for paren in s:\n            if paren == '(':\n                nesting += 1\n            elif paren == ')':\n                nesting -= 1\n        return nesting\n\n    # Split the input string into groups separated by spaces\n    groups = paren_string.split()\n\n    # Iterate over the groups and calculate the deepest level of nesting\n    nesting_levels = []\n    for group in groups:\n        nesting_levels.append(count_nesting(group))\n\n    return nesting_levels",
        "test": "assert parse_nested_parens('()') == [0]",
        "num_ids": 4123
    },
    {
        "number": 7,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 1378
    },
    {
        "number": 8,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_val = 0\n    product_val = 1\n    \n    for num in numbers:\n        sum_val += num\n        product_val *= num\n    \n    return sum_val, product_val",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 1909
    },
    {
        "number": 9,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 110,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n\n    rolling_max_list = []\n\n    for i in range(len(numbers)):\n        rolling_max_list.append(max(numbers[:i+1]))\n\n    return rolling_max_list",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
        "num_ids": 2096
    },
    {
        "number": 10,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    longest_palindrome = ''\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if is_palindrome(string[i:j+1]):\n                longest_palindrome = max(longest_palindrome, string[i:j+1])\n\n    return string + longest_palindrome",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 2601
    },
    {
        "number": 11,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result",
        "test": "assert string_xor('101', '101') == '000'",
        "num_ids": 2163
    },
    {
        "number": 12,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    \n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n            \n    return longest_string",
        "test": "assert longest([]) is None",
        "num_ids": 1662
    },
    {
        "number": 13,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    # Base case: if b is 0, a is the greatest common divisor\n    if b == 0:\n        return a\n    else:\n        # Recursive case: find the greatest common divisor of b and a % b\n        return greatest_common_divisor(b, a % b)",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 1189
    },
    {
        "number": 14,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]",
        "test": "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
        "num_ids": 1180
    },
    {
        "number": 15,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive. \"\"\"\n    result = \"\"\n    for i in range(n+1):\n        result += str(i) + \" \"\n    return result[:-1]",
        "test": "assert string_sequence(0) == '0'",
        "num_ids": 1185
    },
    {
        "number": 16,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert the string to lowercase to make the count case-insensitive\n    string = string.lower()\n\n    # Create a set to store distinct characters\n    distinct_chars = set()\n\n    # Iterate through each character in the string\n    for char in string:\n        # Add the character to the set only if it's not already there\n        if char not in distinct_chars:\n            distinct_chars.add(char)\n\n    # Return the size of the set (which contains all distinct characters)\n    return len(distinct_chars)",
        "test": "assert count_distinct_characters('xyzXYZ') == 3",
        "num_ids": 1394
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    music_list = []\n    for char in music_string:\n        if char == 'o':\n            music_list.append(4)\n        elif char == 'o|':\n            music_list.append(2)\n        elif char == '.|':\n            music_list.append(1)\n    return music_list",
        "test": "assert parse_music('o') == [4]",
        "num_ids": 3390
    },
    {
        "number": 18,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    index = 0\n    while index!= -1:\n        index = string.find(substring, index)\n        if index!= -1:\n            count += 1\n            index += len(substring)\n    return count",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 1742
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n    sorted_numbers = []\n    for num in numbers.split():\n        if num in ['zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine']:\n            sorted_numbers.append(num)\n    sorted_numbers.sort()\n    return''.join(sorted_numbers)",
        "test": "assert sort_numbers('zero four eight') == 'zero four eight'",
        "num_ids": 2103
    },
    {
        "number": 20,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    sorted_numbers = sorted(numbers)\n    difference = abs(sorted_numbers[1] - sorted_numbers[0])\n    index1 = 0\n    index2 = 1\n\n    while index1 < len(numbers) - 1 and index2 < len(numbers) - 1:\n        if abs(numbers[index1 + 1] - numbers[index2]) < difference:\n            index1 += 1\n        else:\n            index2 += 1\n        difference = abs(numbers[index1 + 1] - numbers[index2])\n\n    return numbers[index1], numbers[index2]",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
        "num_ids": 3604
    },
    {
        "number": 21,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 110,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n\n    min_val = min(numbers)\n    max_val = max(numbers)\n    if min_val == max_val:\n        return [0.0, 1.0]\n    else:\n        return [(num - min_val) / (max_val - min_val) for num in numbers]",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 2650
    },
    {
        "number": 22,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [val for val in values if isinstance(val, int)]",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 1561
    },
    {
        "number": 23,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)",
        "test": "assert strlen('') == 0",
        "num_ids": 570
    },
    {
        "number": 24,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 110,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n\n    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n",
        "test": "assert largest_divisor(15) == 5",
        "num_ids": 1103
    },
    {
        "number": 25,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            while n % i == 0:\n                n //= i\n                factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors",
        "test": "assert factorize(8) == [2, 2, 2]",
        "num_ids": 2760
    },
    {
        "number": 26,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # Remove duplicates using a dictionary to store counts\n    counts = {}\n    result = []\n    for num in numbers:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    # Add remaining elements to result list in original order\n    for num in numbers:\n        if counts[num] == 1:\n            result.append(num)\n    return result",
        "test": "assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]",
        "num_ids": 1709
    },
    {
        "number": 27,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result",
        "test": "assert flip_case('world') == 'WORLD'",
        "num_ids": 1316
    },
    {
        "number": 28,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)",
        "test": "assert concatenate([]) == ''",
        "num_ids": 840
    },
    {
        "number": 29,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 1482
    },
    {
        "number": 30,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 1494
    },
    {
        "number": 31,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert is_prime(6) == False",
        "num_ids": 1464
    },
    {
        "number": 32,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x**2 +.... xs[n] * x**n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n\n    # Check if list xs has even number of coefficients\n    if len(xs) % 2!= 0:\n        raise ValueError(\"List xs has odd number of coefficients\")\n\n    # Find largest non zero coefficient\n    max_coeff = max(abs(coeff) for coeff in xs)\n\n    # Initialize variables\n    x0 = -1\n    x1 = 2 * max_coeff\n\n    # Iterate until x0 and x1 are not equal\n    while x0!= x1:\n        x_mid = (x0 + x1) / 2\n        if poly(xs, x_mid) == 0:\n            x0 = x1 = x_mid\n        elif poly(xs, x_mid) * poly(xs, x0) > 0:\n            x0 = x_mid\n        else:\n            x1 = x_mid\n\n    return x0",
        "test": "assert find_zero([1, 2]) == -0.5",
        "num_ids": 4341
    },
    {
        "number": 33,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n\n    # Create a new list l' with the same length as l and initialize its values to None\n    l_prime = [None] * len(l)\n\n    # Loop through each index i in l\n    for i in range(len(l)):\n\n        # If i is not divisible by 3, set l_prime[i] to l[i]\n        if i % 3!= 0:\n            l_prime[i] = l[i]\n\n        # If i is divisible by 3, set l_prime[i] to the value of the corresponding index of l\n        else:\n            l_prime[i] = l[i]\n\n    # Sort l_prime using the sorted() function\n    l_prime = sorted(l_prime)\n\n    # Create a new list l_new with the same length as l and initialize its values to None\n    l_new = [None] * len(l)\n\n    # Loop through each index i in l_prime\n    for i in range(len(l_prime)):\n\n        # If i is not divisible by 3, set l_new[i] to l_prime[i]\n        if i % 3!= 0:\n            l_new[i] = l_prime[i]\n\n        # If i is divisible by 3, set l_new[i] to the value of the corresponding index of l\n        else:\n            l_new[i] = l[i]\n\n    # Return l_new\n    return l_new",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 3706
    },
    {
        "number": 34,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "def unique(l: list) -> list:\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(list(set(l)))",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 985
    },
    {
        "number": 35,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    max_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 1346
    },
    {
        "number": 36,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).count('7') > 0:\n                count += 1\n    return count",
        "test": "assert fizz_buzz(50) == 0",
        "num_ids": 1430
    },
    {
        "number": 37,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    # create a list of even indicies\n    even_indicies = [i for i in range(len(l)) if i % 2 == 0]\n\n    # sort the even indicies\n    even_indicies.sort()\n\n    # create a dictionary to map the even indicies to their sorted values\n    sorted_dict = {i: l[i] for i in even_indicies}\n\n    # create a new list with the sorted values and the odd values\n    sorted_list = [sorted_dict.get(i, l[i]) for i in range(len(l))]\n\n    return sorted_list\n",
        "test": "assert sort_even([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 2910
    },
    {
        "number": 38,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # uncycle elements in each group.\n    groups = [\"\".join(sorted(group)) if len(group) >= 3 else group for group in groups]\n    return \"\".join(groups)",
        "test": "assert decode_cyclic(\"abcabcabc\") == \"abcabcabc\"",
        "num_ids": 2977
    },
    {
        "number": 39,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef prime_fib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    else:\n        fib = 2\n        while fib < n:\n            fib += 1\n        return fib\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
        "test": "assert prime_fib(1) == 2",
        "num_ids": 2448
    },
    {
        "number": 40,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    if len(l) < 3:\n        return False\n    else:\n        for i in range(len(l) - 2):\n            for j in range(i + 1, len(l) - 1):\n                for k in range(j + 1, len(l)):\n                    if l[i] + l[j] + l[k] == 0:\n                        return True\n        return False",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 3367
    },
    {
        "number": 41,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Initialize the number of collisions to 0\n    collisions = 0\n\n    # Initialize the number of cars that are driving left to right\n    left_cars = n\n\n    # Initialize the number of cars that are driving right to left\n    right_cars = 0\n\n    # Initialize the distance traveled by the cars\n    left_distance = 0\n    right_distance = 0\n\n    # Loop through each iteration\n    for _ in range(n * 2):\n        # Check if any cars are colliding\n        if left_cars > 0 and right_cars > 0:\n            if left_distance < right_distance:\n                # If the car that's driving left to right hits the car that's driving right to left,\n                # increment the number of collisions\n                collisions += 1\n                # Update the distance traveled by the cars\n                left_distance += 1\n                right_distance = 0\n                # Reduce the number of cars that are driving left to right\n                left_cars -= 1\n            else:\n                # If the car that's driving right to left hits the car that's driving left to right,\n                # increment the number of collisions\n                collisions += 1\n                # Update the distance traveled by the cars\n                right_distance += 1\n                left_distance = 0\n                # Reduce the number of cars that are driving right to left\n                right_cars -= 1\n        else:\n            # If there are no cars colliding, update the distances\n            left_distance += 1\n            right_distance += 1\n\n    return collisions",
        "test": "assert car_race_collision(0) == 0",
        "num_ids": 3756
    },
    {
        "number": 42,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x + 1 for x in l]\n",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 1705
    },
    {
        "number": 43,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
        "test": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 2894
    },
    {
        "number": 44,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10.\")\n    \n    if base == 10:\n        return str(x)\n    \n    digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    sign = \"\"\n    if x < 0:\n        sign = \"-\"\n        x = -x\n    \n    result = []\n    while x > 0:\n        remainder = x % base\n        x = x // base\n        result.append(digits[remainder])\n    \n    if sign:\n        result.append(sign)\n    \n    return ''.join(reversed(result))",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 2321
    },
    {
        "number": 45,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 100,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\"\"\"\n    area = 0.5 * a * h\n    return area",
        "test": "assert triangle_area(5, 3) == 7.5, \"Test failed\"",
        "num_ids": 819
    },
    {
        "number": 46,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    elif n > 3:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)",
        "test": "assert fib4(0) == 0, \"fib4(0) should return 0.\"",
        "num_ids": 2272
    },
    {
        "number": 47,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    10.0\n    \"\"\"\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 1:\n        return sorted_l[n // 2]\n    else:\n        return (sorted_l[n // 2 - 1] + sorted_l[n // 2]) / 2",
        "test": "assert median([3, 1, 2, 4, 5]) == 3, \"Error in median function\"",
        "num_ids": 2101
    },
    {
        "number": 48,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]",
        "test": "assert is_palindrome('') == True",
        "num_ids": 1247
    },
    {
        "number": 49,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)",
        "test": "assert modp(3, 5) == 3",
        "num_ids": 1404
    },
    {
        "number": 50,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hello\"",
        "num_ids": 2093
    },
    {
        "number": 51,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    for char in text:\n        if char in vowels:\n            text = text.replace(char, \"\")\n    return text",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 1705
    },
    {
        "number": 52,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"\n    Return True if all numbers in the list l are below threshold t.\n\n    :param l: list of numbers\n    :param t: threshold value\n    :return: bool value\n    \"\"\"\n    return all(num < t for num in l)",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True, \"False expected\"",
        "num_ids": 1334
    },
    {
        "number": 53,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y",
        "test": "assert add(2, 3) == 5",
        "num_ids": 663
    },
    {
        "number": 54,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(s0)!= len(s1):\n        return False\n\n    s0_dict = {}\n    s1_dict = {}\n\n    for char in s0:\n        if char.isalpha():\n            s0_dict[char] = s0_dict.get(char, 0) + 1\n\n    for char in s1:\n        if char.isalpha():\n            s1_dict[char] = s1_dict.get(char, 0) + 1\n\n    if s0_dict!= s1_dict:\n        return False\n\n    return True",
        "test": "assert same_chars('abcd', 'dddddddabc') == True",
        "num_ids": 2021
    },
    {
        "number": 55,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert fib(1) == 1",
        "num_ids": 967
    },
    {
        "number": 56,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n\n    return not stack",
        "test": "assert correct_bracketing(\"<\") == False",
        "num_ids": 1376
    },
    {
        "number": 57,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    if len(l) < 2:\n        return False\n\n    prev_elem = l[0]\n    for elem in l[1:]:\n        if elem < prev_elem:\n            return False\n        prev_elem = elem\n\n    return True\n",
        "test": "assert monotonic([1, 20, 4, 10]) == False",
        "num_ids": 1760
    },
    {
        "number": 58,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    l1.sort()\n    l2.sort()\n    i, j = 0, 0\n    common_elements = []\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            common_elements.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n    return common_elements",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 2192
    },
    {
        "number": 59,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while n > 1:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return i",
        "test": "assert largest_prime_factor(2048) == 2",
        "num_ids": 2191
    },
    {
        "number": 60,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_to_n(n: int) -> int:\n    \"\"\"\n    This function returns the sum of numbers from 1 to n.\n    \"\"\"\n    return sum(range(1, n+1))",
        "test": "assert sum_to_n(30) == 465",
        "num_ids": 1183
    },
    {
        "number": 61,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            else:\n                stack.pop()\n\n    return not stack",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 1522
    },
    {
        "number": 62,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    n = len(xs)\n    result = []\n    for i in range(1, n):\n        result.append(xs[i] * i)\n    return result",
        "test": "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
        "num_ids": 1859
    },
    {
        "number": 63,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib_n_minus_1 = fibfib(n - 1)\n        fib_n_minus_2 = fibfib(n - 2)\n        fib_n_minus_3 = fibfib(n - 3)\n        return fib_n_minus_1 + fib_n_minus_2 + fib_n_minus_3",
        "test": "assert fibfib(1) == 0",
        "num_ids": 2376
    },
    {
        "number": 64,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'y'])\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count",
        "test": "assert vowels_count(\"abcde\") == 2, \"Incorrect count of vowels\"",
        "num_ids": 2140
    },
    {
        "number": 65,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    return str(x)[:-shift] + str(x)[-shift:]\n\nprint(circular_shift(12, 1))  # Output: \"21\"\nprint(circular_shift(12, 2))  # Output: \"12\"",
        "test": "assert circular_shift(12, 2) == \"12\"",
        "num_ids": 2125
    },
    {
        "number": 66,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def digitSum(s):\n    \"\"\"\n    Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n    \n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    upper_chars = 0\n    for char in s:\n        if char.isupper():\n            upper_chars += ord(char)\n    return upper_chars",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 1814
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # Split the string into apples and oranges\n    apple_orange = s.split()\n    # Convert strings to integers\n    apple = int(apple_orange[0])\n    orange = int(apple_orange[1])\n    # Calculate the number of mango fruits\n    mangoes = n - apple - orange\n    return mangoes",
        "test": "assert fruit_distribution(\"0 apples and 1 oranges\", 3) == 3 - 0 - 1, \"Incorrect calculation\"",
        "num_ids": 3476
    },
    {
        "number": 68,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes,\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4, 2, 3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1, 2, 3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n    even_nodes = []\n    smallest_even_value = float('inf')\n    smallest_even_index = -1\n\n    for index, node in enumerate(arr):\n        if node % 2 == 0:\n            even_nodes.append([node, index])\n            if node < smallest_even_value:\n                smallest_even_value = node\n                smallest_even_index = index\n\n    if even_nodes:\n        return [smallest_even_value, smallest_even_index]\n    else:\n        return []",
        "test": "assert pluck([4,2,3]) == [2, 1]",
        "num_ids": 4815
    },
    {
        "number": 69,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\n    # initialize variables to keep track of the current maximum and its frequency\n    max_num = 0\n    max_freq = 0\n    \n    # iterate through the list\n    for num in lst:\n        # if the current number is greater than zero and has a frequency greater than or equal to its value,\n        # update the max_num and max_freq variables\n        if num > 0 and lst.count(num) >= num:\n            if num > max_num or (num == max_num and lst.count(num) > max_freq):\n                max_num = num\n                max_freq = lst.count(num)\n    \n    # if no such value exists, return -1\n    if max_num == 0:\n        return -1\n    else:\n        return max_num",
        "test": "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3",
        "num_ids": 3085
    },
    {
        "number": 70,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    n = len(lst)\n    i = 0\n    while i < n:\n        min_idx = i\n        for j in range(i, n):\n            if lst[j] < lst[min_idx]:\n                min_idx = j\n        lst[i], lst[min_idx] = lst[min_idx], lst[i]\n        i += 1\n    return lst",
        "test": "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]",
        "num_ids": 3368
    },
    {
        "number": 71,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter of the triangle\n        s = (a + b + c) / 2\n        # Calculate the area of the triangle\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Round the area to 2 decimal places\n        return round(area, 2)\n    else:\n        return -1",
        "test": "assert triangle_area(3, 4, 5) == 6.00",
        "num_ids": 2511
    },
    {
        "number": 72,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    \n    # Check if the list is balanced (i.e. it's a palindrome)\n    is_balanced = True\n    for i in range(len(q)):\n        if q[i]!= q[len(q) - 1 - i]:\n            is_balanced = False\n            break\n    \n    # Check if the sum of the elements is less than or equal to the maximum possible weight\n    if is_balanced and sum(q) <= w:\n        return True\n    else:\n        return False",
        "test": "assert will_it_fly([3, 2, 3], 1) == False",
        "num_ids": 2700
    },
    {
        "number": 73,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    arr.sort()\n    n = len(arr)\n    min_changes = n\n    max_changes = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] * 2 <= arr[j]:\n                min_changes = min(min_changes, j - i)\n            else:\n                max_changes = max(max_changes, j - i)\n\n    return min_changes",
        "test": "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1",
        "num_ids": 3765
    },
    {
        "number": 74,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\n    #count the total number of chars in each list\n    count1 = sum(len(x) for x in lst1)\n    count2 = sum(len(x) for x in lst2)\n\n    #if both lists have the same number of chars, return the first list\n    if count1 == count2:\n        return lst1\n\n    #if the total number of chars in the first list is less than the second list, return the first list\n    if count1 < count2:\n        return lst1\n\n    #if the total number of chars in the second list is less than the first list, return the second list\n    return lst2",
        "test": "assert total_match([], []) == []",
        "num_ids": 3318
    },
    {
        "number": 75,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    def is_prime(n):\n        \"\"\"Write a helper function that returns true if the given number is prime and false otherwise.\"\"\"\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_primes_under_100(n):\n        \"\"\"Write a helper function that returns a list of prime numbers less than or equal to n.\"\"\"\n        primes = []\n        for i in range(2, n+1):\n            if is_prime(i):\n                primes.append(i)\n        return primes\n\n    def get_multiples_of_primes(primes, a):\n        \"\"\"Write a helper function that returns a list of multiples of the given prime number.\"\"\"\n        multiples = []\n        for prime in primes:\n            if a % prime == 0:\n                multiples.append(a/prime)\n        return multiples\n\n    primes_under_100 = get_primes_under_100(100)\n    multiples_of_primes = get_multiples_of_primes(primes_under_100, a)\n\n    if len(multiples_of_primes) >= 3:\n        return True\n    else:\n        return False",
        "test": "assert is_multiply_prime(12) == False, \"12 is not the multiplication of 3 prime numbers\"",
        "num_ids": 3721
    },
    {
        "number": 76,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n\n    if n == 1:\n        return True\n\n    for i in range(2, int(x**0.5) + 1):\n        if n % i == 0 and x % i == 0:\n            return False\n\n    return True",
        "test": "assert is_simple_power(1, 4) == True",
        "num_ids": 2030
    },
    {
        "number": 77,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n\n    # check for even parity of a\n    if a % 2 == 0:\n        return False\n\n    # calculate cube root of a\n    root = int(a**(1/3))\n\n    # check if cube root is a cube\n    if root ** 3 == a:\n        return True\n    else:\n        return False",
        "test": "assert iscube(2) == False",
        "num_ids": 1770
    },
    {
        "number": 78,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    count = 0\n    for i in range(len(num)):\n        if num[i] in \"0123456789ABCDEF\":\n            if is_prime(int(num[i], 16)):\n                count += 1\n    return count",
        "test": "assert hex_key(\"AB\") == 1",
        "num_ids": 4511
    },
    {
        "number": 79,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n\n    # add extra characters\n    binary = \"db\" + binary + \"db\"\n    return binary",
        "test": "assert decimal_to_binary(15) == \"db1111db\"",
        "num_ids": 2450
    },
    {
        "number": 80,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    \n    # Define a dictionary to store the previous values of the string\n    prev_values = {}\n    \n    # Check if the string is already present in the dictionary\n    if s in prev_values:\n        return prev_values[s]\n    \n    # Initialize a variable to keep track of the length of the string\n    n = len(s)\n    \n    # If the length of the string is less than 3, return False\n    if n < 3:\n        return False\n    \n    # Initialize a variable to keep track of the current value of the string\n    curr_value = 0\n    \n    # Loop through each character in the string\n    for i in range(n):\n        # Convert the current character to an integer\n        curr_char = ord(s[i]) - ord('0')\n        \n        # Check if the current character is already present in the dictionary\n        if curr_char in prev_values:\n            # If it is, check if the difference between the current value and the previous value is a multiple of 3\n            if (curr_value - prev_values[curr_char]) % 3 == 0:\n                # If it is, return False\n                return False\n            else:\n                # If it is not, return True\n                return True\n        else:\n            # If it is not, add the current character to the dictionary with the current value\n            prev_values[curr_char] = curr_value\n            # Add the current character's value to the current value\n            curr_value += curr_char\n    \n    # If the loop completes without returning False, return True\n    return True",
        "test": "assert is_happy(\"a\") == False",
        "num_ids": 3254
    },
    {
        "number": 81,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA    |    Letter grade\n              4.0        A+\n            > 3.7        A \n            > 3.3        A- \n            > 3.0        B+\n            > 2.7        B \n            > 2.3        B-\n            > 2.0        C+\n            > 1.7        C\n            > 1.3        C-\n            > 1.0        D+ \n            > 0.7        D \n            > 0.0        D-\n              0.0        E\n    \"\"\"\n\n    letter_grades = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n    output = []\n\n    for gpa in grades:\n        if gpa >= 4.0:\n            output.append(letter_grades[0])\n        elif gpa > 3.7:\n            output.append(letter_grades[1])\n        elif gpa > 3.3:\n            output.append(letter_grades[2])\n        elif gpa > 3.0:\n            output.append(letter_grades[3])\n        elif gpa > 2.7:\n            output.append(letter_grades[4])\n        elif gpa > 2.3:\n            output.append(letter_grades[5])\n        elif gpa > 2.0:\n            output.append(letter_grades[6])\n        elif gpa > 1.7:\n            output.append(letter_grades[7])\n        elif gpa > 1.3:\n            output.append(letter_grades[8])\n        elif gpa > 1.0:\n            output.append(letter_grades[9])\n        elif gpa > 0.7:\n            output.append(letter_grades[10])\n        elif gpa > 0.0:\n            output.append(letter_grades[11])\n        else:\n            output.append(letter_grades[12])\n\n    return output",
        "test": "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']",
        "num_ids": 5833
    },
    {
        "number": 82,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def is_prime(num):\n    \"\"\"Write a function that takes an integer as input and returns True if it is a prime number or False otherwise\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    length = len(string)\n    if is_prime(length):\n        return True\n    else:\n        return False",
        "test": "assert prime_length('Hello') == True",
        "num_ids": 2040
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\n    count = 0\n    for i in range(1, 10**n):\n        if str(i)[0] == '1':\n            if str(i)[-n:] == '1' * n:\n                count += 1\n    return count",
        "test": "assert starts_one_ends(1) == 1",
        "num_ids": 1429
    },
    {
        "number": 84,
        "max_answer_num": 20,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n                Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n             a string of binary number\n    \"\"\"\n\n    def sum_digits(num):\n        \"\"\"Return the sum of digits in a given number.\n        \n        Arguments:\n            @num integer\n                    The number to sum digits of.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    def binary_representation(num):\n        \"\"\"Return the binary representation of a given number.\n        \n        Arguments:\n            @num integer\n                    The number to convert to binary.\n        \"\"\"\n        return bin(num)[2:]\n\n    total_sum = sum_digits(N)\n    binary_num = binary_representation(total_sum)\n\n    return binary_num\n",
        "test": "assert solve(1000) == \"1\"",
        "num_ids": 2560
    },
    {
        "number": 85,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "def add(lst):\n    \"\"\"\n    Given a non-empty list of integers lst, add the even elements that are at odd indices.\n    \n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    even_at_odd = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            even_at_odd += lst[i]\n    return even_at_odd",
        "test": "assert add([4, 2, 6, 7]) == 2",
        "num_ids": 1296
    },
    {
        "number": 86,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import re\n\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n    words = re.findall(r'\\b\\w+\\b', s) # split the string into words\n    new_words = []\n    for word in words:\n        # arrange characters in ascending order based on ascii value\n        sorted_chars = sorted(word)\n        new_word = ''.join(sorted_chars)\n        new_words.append(new_word)\n    # join the new words back into a sentence\n    ordered_sentence =''.join(new_words)\n    return ordered_sentence",
        "test": "assert anti_shuffle('Hi') == 'Hi'",
        "num_ids": 2463
    },
    {
        "number": 87,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 110,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    # Iterate over the rows and columns in the input list\n    coordinates = []\n    for row in lst:\n        for col in range(len(row)):\n            if row[col] == x:\n                coordinates.append((lst.index(row), col))\n\n    # Sort the coordinates by rows in ascending order and columns in descending order\n    coordinates = sorted(coordinates, key=lambda x: (x[0], len(lst[x[0]]) - x[1] - 1))\n\n    return coordinates",
        "test": "assert get_row([], 1) == []",
        "num_ids": 4731
    },
    {
        "number": 88,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    \n    # Copy the array\n    arr = array[:]\n    \n    # Iterate over the array and sort it based on the given conditions\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] + arr[j]) % 2 == 1:\n                # Sort the odd numbers in ascending order\n                arr[i], arr[j] = arr[j], arr[i]\n            else:\n                # Sort the even numbers in descending order\n                arr[i], arr[j] = arr[j], arr[i]\n    \n    # Return the sorted array\n    return arr",
        "test": "assert sort_array([5]) == [5]",
        "num_ids": 3452
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    rotated_alphabet = 'bcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'\n    encrypted_string = ''\n    for char in s:\n        if char.isalpha():\n            index = rotated_alphabet.index(char.lower())\n            new_index = (index + 2) % len(rotated_alphabet)\n            encrypted_string += rotated_alphabet[new_index]\n        else:\n            encrypted_string += char\n    return encrypted_string",
        "test": "assert encrypt('asdfghjkl') == 'ewhjklnop'",
        "num_ids": 2971
    },
    {
        "number": 90,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    if not lst:\n        return None\n\n    smallest = lst[0]\n    second_smallest = None\n\n    for num in lst[1:]:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif second_smallest is None or num < second_smallest:\n            second_smallest = num\n\n    return second_smallest",
        "test": "assert next_smallest([5, 1, 4, 3, 2]) == 2",
        "num_ids": 2411
    },
    {
        "number": 91,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    count = 0\n    for sentence in S.split('. '):\n        if sentence.startswith('I'):\n            count += 1\n    return count",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 1803
    },
    {
        "number": 92,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) \u279e True\n\n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n\n    any_int(3.6, -2.2, 2) \u279e False\n    \"\"\"\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    if x + y == z:\n        return True\n    elif x + z == y:\n        return True\n    elif y + z == x:\n        return True\n    else:\n        return False\n",
        "test": "assert any_int(5, 2, 7) == True",
        "num_ids": 1844
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'THKS KS C MGSSCGG'\n    \"\"\"\n\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    encoded_message = \"\"\n\n    for letter in message:\n        if letter.isalpha():\n            if letter.lower() in vowels:\n                index = vowels.index(letter.lower())\n                encoded_letter = vowels[(index + 2) % 5]\n            else:\n                encoded_letter = letter.upper()\n            encoded_message += encoded_letter\n        else:\n            encoded_message += letter\n\n    return encoded_message",
        "test": "assert encode('This is a message') == 'thKS ks c mgssCGG'",
        "num_ids": 2544
    },
    {
        "number": 94,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef largest_prime_sum(lst):\n    max_prime = 0\n    max_sum = 0\n\n    for num in lst:\n        if is_prime(num):\n            if num > max_prime:\n                max_prime = num\n                max_sum = sum(int(digit) for digit in str(num))\n\n    return max_sum\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n    return largest_prime_sum(lst)",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
        "num_ids": 4018
    },
    {
        "number": 95,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # Check if the given dictionary is empty\n    if not dict:\n        return False\n\n    # Check if all keys are strings in lower case\n    if all(isinstance(key, str) and key.islower() for key in dict):\n        return True\n\n    # Check if all keys are strings in upper case\n    if all(isinstance(key, str) and key.isupper() for key in dict):\n        return True\n\n    # If no keys meet the conditions, return False\n    return False",
        "test": "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
        "num_ids": 3041
    },
    {
        "number": 96,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    if n <= 1:\n        return []\n    primes = [2]\n    i = 3\n    while i < n:\n        is_prime = True\n        for j in primes:\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n        i += 2\n    return primes[:n]",
        "test": "assert count_up_to(5) == [2, 3]",
        "num_ids": 2919
    },
    {
        "number": 97,
        "max_answer_num": 20,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Convert the input to a list of digits\n    digits_a = [int(digit) for digit in str(a)]\n    digits_b = [int(digit) for digit in str(b)]\n\n    # Multiply the digits\n    product = [digits_a[i] * digits_b[i] for i in range(max(len(digits_a), len(digits_b)))]\n\n    # Convert the product list to a string and return the last digit\n    return int(product[-1])",
        "test": "assert multiply(148, 412) == 16, \"Failed test case 1\"",
        "num_ids": 2736
    },
    {
        "number": 98,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def count_upper(s):\n    count = 0\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count",
        "test": "assert count_upper('abcdefg') == 0",
        "num_ids": 1324
    },
    {
        "number": 99,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    try:\n        num = float(value)\n    except ValueError:\n        return None\n\n    if num.is_integer():\n        return int(num)\n\n    num_as_int = int(num)\n    diff = abs(num - num_as_int)\n    closest_int = num_as_int\n\n    if diff < 0.5:\n        return closest_int\n\n    if num_as_int < 0:\n        return -closest_int\n    else:\n        return closest_int",
        "test": "assert closest_integer(\"15.3\") == 15",
        "num_ids": 3363
    },
    {
        "number": 100,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    # Initialize an empty list to store the pile\n    pile = []\n\n    # Add the first level of stones to the pile\n    pile.append(n)\n\n    # Loop through the remaining levels and add them to the pile\n    for i in range(1, n):\n        # Calculate the number of stones in the next level\n        next_level = n + 2 * i\n\n        # Add the number of stones to the pile\n        pile.append(next_level)\n\n    return pile",
        "test": "assert make_a_pile(4) == [4, 6, 8, 10]",
        "num_ids": 2739
    },
    {
        "number": 101,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Split the string into words based on spaces or commas\n    words = s.split(', ')\n    return words",
        "test": "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
        "num_ids": 2009
    },
    {
        "number": 102,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Initialize variables to store the smallest and largest even numbers\n    smallest = None\n    largest = None\n\n    # Loop through each number in the range [x, y]\n    for i in range(x, y+1):\n        # Check if the number is even\n        if i % 2 == 0:\n            # If it is, check if it's smaller than the current smallest number\n            if smallest is None or i < smallest:\n                smallest = i\n            # Check if it's bigger than the current largest number\n            if largest is None or i > largest:\n                largest = i\n\n    # If there are no even numbers in the range, return -1\n    if smallest is None:\n        return -1\n    else:\n        return largest",
        "test": "assert choose_num(13, 12) == -1",
        "num_ids": 2179
    },
    {
        "number": 103,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    if n > m:\n        return -1\n    \n    total = 0\n    count = 0\n    \n    for i in range(n, m+1):\n        total += i\n        count += 1\n        \n    avg = round(total/count)\n    \n    binary_avg = bin(avg)[2:]\n    \n    return \"0b\" + binary_avg\n",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 2283
    },
    {
        "number": 104,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # remove even digits from the list\n    even_digits = [i for i in x if i % 2 == 0]\n    \n    # sort the list in increasing order\n    sorted_list = sorted(x)\n    \n    # remove even digits from the sorted list\n    for i in even_digits:\n        sorted_list.remove(i)\n    \n    return sorted_list",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
        "num_ids": 2666
    },
    {
        "number": 105,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n             -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n             -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n             -> sort arr -> [-1, 1, 55]\n             -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    # Sort array by length\n    sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr))\n\n    # Reverse sorted array\n    reversed_arr = sorted_arr[::-1]\n\n    # Replace digits with names\n    result = []\n    for num in reversed_arr:\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n        else:\n            result.append(\"Strange number\")\n\n    return result",
        "test": "assert by_length([]) == []",
        "num_ids": 5546
    },
    {
        "number": 106,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\ndef factorial(n):\n    \"\"\" Returns the factorial of n. \"\"\"\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result",
        "test": "assert f(1) == [1]",
        "num_ids": 2571
    },
    {
        "number": 107,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    # Initialize variables to store even and odd palindrome count\n    even_count = 0\n    odd_count = 0\n\n    # Loop through all integers from 1 to n\n    for i in range(1, n+1):\n\n        # Convert the integer to a string and check if it is equal to its reverse\n        s = str(i)\n        if s == s[::-1]:\n            if int(s) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)",
        "test": "assert even_odd_palindrome(12) == (4, 6), \"Example 2: (4, 6) expected\"",
        "num_ids": 3609
    },
    {
        "number": 108,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num > 0:\n            digits = [int(d) for d in str(abs(num))]\n            sum_digits = sum(digits)\n            if sum_digits > 0:\n                count += 1\n    return count",
        "test": "assert count_nums([]) == 0",
        "num_ids": 2335
    },
    {
        "number": 109,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def move_one_ball(arr):\n    \"\"\"\n    We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].\n    The numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return False\n\n    for i in range(n):\n        if i < n-1:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n\n    return True",
        "test": "assert move_one_ball([3, 5, 4, 1, 2]) == False",
        "num_ids": 5865
    },
    {
        "number": 110,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\n    # Initialize a set to store the even numbers from lst1\n    even_numbers = set(lst1) & set(lst2)\n\n    # Check if there are any even numbers in lst1 that are not in lst2\n    if any(x not in lst2 for x in even_numbers):\n        return \"NO\"\n\n    # Check if it is possible to exchange elements to make lst1 only contain even numbers\n    for i in range(len(lst1)):\n        if lst1[i] not in even_numbers:\n            return \"NO\"\n\n    # Check if it is possible to exchange elements to make lst1 contain only even numbers\n    for i in range(len(lst1)):\n        if lst1[i] not in even_numbers:\n            return \"NO\"\n\n    return \"YES\"",
        "test": "assert exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"",
        "num_ids": 4835
    },
    {
        "number": 111,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \n    \"\"\"\n    # initialize an empty dictionary\n    hist = {}\n    \n    # split the input string into a list of letters\n    letters = test.split()\n    \n    # loop through each letter\n    for letter in letters:\n        # if the letter is not already in the dictionary, add it with a count of 1\n        if letter not in hist:\n            hist[letter] = 1\n        # otherwise, increment the count of the letter in the dictionary\n        else:\n            hist[letter] += 1\n    \n    # find the letter with the highest count\n    max_count = max(hist.values())\n    \n    # loop through the dictionary again to find the letters with that count\n    matches = []\n    for letter, count in hist.items():\n        if count == max_count:\n            matches.append(letter)\n    \n    # return the dictionary of matches, sorted by occurrence count\n    return {k: v for k, v in sorted(hist.items(), key=lambda item: (-item[1], item[0]))}",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
        "num_ids": 3694
    },
    {
        "number": 112,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    # Removing characters that are present in c from s\n    s = \"\".join([char for char in s if char not in c])\n\n    # Checking if the result string is palindrome\n    is_palindrome = s == s[::-1]\n\n    return (s, is_palindrome)\n",
        "test": "assert reverse_delete(\"abcdef\", \"b\") == ('acdef', False)",
        "num_ids": 2932
    },
    {
        "number": 113,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for string in lst:\n        count = 0\n        for digit in string:\n            if int(digit) % 2 == 1:\n                count += 1\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result",
        "test": "assert odd_count(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]",
        "num_ids": 3423
    },
    {
        "number": 114,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Initialize the minimum sum and the current sum\n    min_sum = float('inf')\n    current_sum = 0\n\n    # Iterate through the array\n    for num in nums:\n        # Update the current sum\n        current_sum += num\n\n        # If the current sum is smaller than the minimum sum, update the minimum sum\n        if current_sum < min_sum:\n            min_sum = current_sum\n\n        # If the current sum is 0, reset the current sum\n        elif current_sum == 0:\n            current_sum = 0\n\n    # Return the minimum sum\n    return min_sum",
        "test": "assert minSubArraySum([-1, -2, -3]) == -6",
        "num_ids": 2363
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n    # Determine the maximum capacity that can be used in the buckets\n    max_capacity = max(sum(row) for row in grid)\n\n    # Initialize the number of times the buckets need to be lowered\n    n_lower = 0\n\n    # Loop through the rows of the grid, starting from the top\n    for i in range(len(grid) - 1, -1, -1):\n\n        # Count the number of units of water in the well\n        n_water = sum(grid[i])\n\n        # If the number of units of water exceeds the capacity of the bucket,\n        # then we need to lower the buckets\n        if n_water > capacity:\n\n            # Calculate the number of units of water we need to remove\n            n_to_remove = math.ceil(n_water - capacity)\n\n            # Update the number of times we need to lower the buckets\n            n_lower += n_to_remove\n\n            # Remove the specified number of units of water from the well\n            grid[i] = [1 if grid[i][j] == 1 and j < len(grid[i]) - n_to_remove else grid[i][j] for j in range(len(grid[i]))]\n\n            # Capacity is reset to the maximum capacity\n            capacity = max_capacity\n\n    return n_lower",
        "test": "assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5",
        "num_ids": 5854
    },
    {
        "number": 116,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Iterate through the array and count the number of ones in the binary representation\n    count = [0] * 32\n    for num in arr:\n        for i in range(32):\n            count[i] += (num >> i) & 1\n\n    # Sort the array based on the count and decimal value\n    arr.sort(key=lambda x: (-count[x.bit_length() - 1], int(x)))\n\n    return arr",
        "test": "assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]",
        "num_ids": 3154
    },
    {
        "number": 117,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for letter in word if letter.lower() not in \"aeiou\")\n        if consonants == n:\n            result.append(word)\n    return result",
        "test": "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
        "num_ids": 3489
    },
    {
        "number": 118,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def get_closest_vowel(word):\n    \"\"\"\n    You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    left, right = len(word) - 1, len(word) - 2\n    while left >= 0:\n        if word[left] in vowels:\n            break\n        left -= 1\n    while right >= 0 and right < len(word):\n        if word[right] in vowels:\n            break\n        right += 1\n    if left < 0 and right < 0:\n        return \"\"\n    if left < 0:\n        return word[right]\n    if right >= len(word):\n        return word[left]\n    if abs(ord(word[left]) - ord(word[right])) == 1:\n        return word[left]\n    if ord(word[left]) < ord(word[right]):\n        return word[left]\n    return word[right]",
        "test": "assert get_closest_vowel(\"yogurt\") == \"u\"",
        "num_ids": 3419
    },
    {
        "number": 119,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    # Create a stack for keeping track of opening parentheses\n    stack = []\n\n    # Initialize variables to keep track of opening and closing parentheses\n    open_count = 0\n    close_count = 0\n\n    # Loop through each character in the two strings\n    for char in lst[0]:\n        # If the character is an opening parenthesis, add it to the stack\n        if char == '(':\n            stack.append(char)\n            open_count += 1\n\n        # If the character is a closing parenthesis, check if it matches the top element in the stack\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n                close_count += 1\n                if open_count == close_count:\n                    return 'Yes'\n            else:\n                return 'No'\n\n    # If we get here, there are more opening parentheses than closing parentheses, so there is no way to make a good string\n    return 'No'",
        "test": "assert match_parens([')', ')']) == 'No'",
        "num_ids": 3579
    },
    {
        "number": 120,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Return the first k elements of the sorted array\n    return arr[:k]",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]",
        "num_ids": 2978
    },
    {
        "number": 121,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            sum += lst[i]\n    return sum",
        "test": "assert solution([5, 8, 7, 1]) == 12",
        "num_ids": 1950
    },
    {
        "number": 122,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum",
        "test": "assert add_elements([111,21,3,4000,5,6,7,8,9], 4) == 24, \"Test 1: Expected 24, got {}\".format(add_elements([111,21,3,4000,5,6,7,8,9], 4))",
        "num_ids": 2912
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    # Get Collatz sequence for given number\n    sequence = []\n    while n!= 1:\n        sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    \n    # Filter odd numbers from sequence\n    odd_numbers = [num for num in sequence if num % 2!= 0]\n\n    # Sort list in increasing order\n    odd_numbers.sort()\n\n    return odd_numbers",
        "test": "assert get_odd_collatz(7) == [1, 7]",
        "num_ids": 4494
    },
    {
        "number": 124,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n\n    # Define function to check the number of days in a month\n    def days_in_month(month, year):\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return 31\n        elif month in [4, 6, 9, 11]:\n            return 30\n        else:\n            if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n                return 29\n            else:\n                return 28\n\n    # Convert the date string to list of integers\n    date_list = [int(x) for x in date.split('-')]\n\n    # Check if the date string is empty\n    if len(date_list)!= 3:\n        return False\n\n    # Check if the year is valid\n    if date_list[2] < 1 or date_list[2] > 9999:\n        return False\n\n    # Check if the month and day are valid\n    month, day, year = date_list\n    if month < 1 or month > 12 or day < 1 or day > days_in_month(month, year):\n        return False\n\n    # If the date is valid, return True\n    return True",
        "test": "assert valid_date('15-01-2012') == False",
        "num_ids": 5509
    },
    {
        "number": 125,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def split_words(txt):\n    words = txt.split()\n    if len(words) == 1 and ',' in txt:\n        words = txt.split(',')\n    if len(words) == 1:\n        words = []\n        for i, char in enumerate(txt):\n            if i == 0:\n                words.append(char)\n            elif i % 2 == 0:\n                words.append(char)\n            else:\n                words.insert(0, char)\n    return words",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 2415
    },
    {
        "number": 126,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    # Check if list is empty or contains only one element\n    if len(lst) <= 1:\n        return True\n\n    # Initialize two pointers to the first and last elements of the list\n    i = 0\n    j = len(lst) - 1\n\n    # Loop while i is less than j\n    while i < j:\n\n        # If the elements at the current i and j indices are equal,\n        # increment i and decrement j\n        if lst[i] == lst[j]:\n            i += 1\n            j -= 1\n\n            # If i becomes greater than j, the list is sorted\n            if i > j:\n                return True\n\n            # If i is equal to j, increment i to avoid duplicate checks\n            if i == j:\n                i += 1\n\n        # If the elements at the current i and j indices are not equal,\n        # break out of the loop\n        else:\n            break\n\n    # If the loop completes without finding a duplicate, return True\n    return True",
        "test": "assert is_sorted([5]) == True, \"is_sorted([5]) \u279e True\"",
        "num_ids": 4017
    },
    {
        "number": 127,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is a prime number, otherwise False\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\"\"\"\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start2 > end1 or start1 > end2:\n        return \"NO\"\n    if start1 >= start2 and end1 <= end2:\n        return \"YES\"\n    if start1 <= start2 and end1 >= end2:\n        return \"YES\"\n    if start2 >= start1 and end2 <= end1:\n        return \"YES\"\n    return \"NO\"",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\"",
        "num_ids": 3894
    },
    {
        "number": 128,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n\n    sign_prod = 1\n    total_mag = 0\n\n    for num in arr:\n        if num == 0:\n            sign_prod *= 0\n            total_mag += num\n            continue\n\n        if num > 0:\n            sign_prod *= 1\n        else:\n            sign_prod *= -1\n\n        total_mag += abs(num)\n\n    return sign_prod * total_mag",
        "test": "assert prod_signs([1, 2, 2, -4]) == -9",
        "num_ids": 2331
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n    # Calculate the total number of cells in the grid\n    N = len(grid)\n\n    # Initialize a variable to store the minimum path\n    min_path = []\n\n    # Initialize a variable to store the values on the current path\n    curr_path = []\n\n    # Initialize variables to store the maximum length path and the current path\n    max_path = []\n    curr_max_path = []\n\n    # Initialize variables to store the values on the cells that can be reached by the current path\n    reachable_cells = []\n\n    # Calculate the minimum path for each cell\n    for i in range(N):\n        for j in range(N):\n            # Add the current cell value to the current path\n            curr_path.append(grid[i][j])\n\n            # Check if the current path is of length k\n            if len(curr_path) == k:\n                # Check if the current path is the minimum path found so far\n                if not min_path or curr_path < min_path:\n                    # If the current path is the minimum path found so far, add it to the list of min_path\n                    min_path = curr_path\n\n                # Update the values on the reachable cells\n                for cell in reachable_cells:\n                    if cell not in curr_max_path:\n                        curr_max_path.append(cell)\n\n                # Check if the current path is the maximum path found so far\n                if curr_max_path:\n                    if not max_path or curr_max_path > max_path:\n                        max_path = curr_max_path\n\n                # Remove the current path from the list of reachable paths\n                reachable_cells.remove(tuple(curr_path))\n\n                # Reset the current path to empty\n                curr_path = []\n\n            # If the current cell has unvisited neighbors, add it to the list of reachable paths\n            if (i > 0 or j > 0) and (i < N-1 or j < N-1):\n                reachable_cells.append((i, j))\n\n    # Check if the maximum path is unique\n    if max_path:\n        max_path = list(set(max_path))\n\n    # Return the minimum path\n    return min_path",
        "test": "assert minPath([[5,9,3], [4,1,6], [7,8,2]], 1) == [1]",
        "num_ids": 7597
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    t = [0] * (n + 1)\n    t[0] = 0\n    t[1] = 3\n    if n > 1:\n        for i in range(2, n + 1):\n            t[i] = t[i - 1] + t[i - 2] + t[i - 3]\n    return t",
        "test": "assert tri(5) == [1, 3, 10, 41, 173]",
        "num_ids": 3833
    },
    {
        "number": 131,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n    odd_digits = []\n    while n > 0:\n        digit = n % 10\n        if digit % 2!= 0:\n            odd_digits.append(digit)\n        n //= 10\n\n    if len(odd_digits) == 0:\n        return 0\n    else:\n        product = 1\n        for digit in odd_digits:\n            product *= digit\n        return product",
        "test": "assert digits(4) == 0",
        "num_ids": 1868
    },
    {
        "number": 132,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\n\nprint(is_nested('[[]]'))  # True\nprint(is_nested('[]]]]]]][[[[[]'))  # False\nprint(is_nested('[][]'))  # False\nprint(is_nested('[]'))  # False\nprint(is_nested('[[][]]'))  # True\nprint(is_nested('[[]][['))  # True",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False",
        "num_ids": 1345
    },
    {
        "number": 133,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n    \"\"\"\n    squared_lst = [round(x, 0) ** 2 for x in lst]\n    return sum(squared_lst)",
        "test": "assert sum_squares([1,2,3]) == 14",
        "num_ids": 2260
    },
    {
        "number": 134,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n\n    # Removing spaces and converting all the characters to lowercase\n    txt = txt.replace(\" \", \"\").lower()\n    \n    # Checking if the last character is an alphabetical character\n    if txt[-1].isalpha():\n        # Checking if the last character is not a part of a word\n        if txt[-1] not in txt.split():\n            return True\n        else:\n            return False\n    else:\n        return False",
        "test": "assert check_if_last_char_is_a_letter(\"apple pi e\") == True",
        "num_ids": 2620
    },
    {
        "number": 135,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    n = len(arr)\n    for i in range(n - 1):\n        if arr[i] >= arr[i+1]:\n            return i\n    return -1",
        "test": "assert can_arrange([1,2,3]) == -1",
        "num_ids": 2204
    },
    {
        "number": 136,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    neg_integers = [x for x in lst if x < 0]\n    pos_integers = [x for x in lst if x > 0]\n    \n    if not neg_integers and not pos_integers:\n        return (None, None)\n    elif not neg_integers:\n        return (None, min(pos_integers))\n    elif not pos_integers:\n        return (max(neg_integers), None)\n    else:\n        return (max(neg_integers), min(pos_integers))",
        "test": "assert largest_smallest_integers([]) == (None, None)",
        "num_ids": 2844
    },
    {
        "number": 137,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    \n    if isinstance(a, str) and isinstance(b, str):\n        # If both values are strings, return the larger string\n        if float(a) > float(b):\n            return a\n        elif float(a) < float(b):\n            return b\n        else:\n            return None\n    elif isinstance(a, str) and not isinstance(b, str):\n        # If a value is a string and the other is not, return the string value\n        return a\n    elif not isinstance(a, str) and isinstance(b, str):\n        # If the other value is a string and the first one is not, return the string value\n        return b\n    else:\n        # If both values are not strings, compare them numerically\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None",
        "test": "assert compare_one(1, 2.5) == 2.5, \"compare_one(1, 2.5) == 2.5\"",
        "num_ids": 3072
    },
    {
        "number": 138,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers.\n    Example:\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    even_numbers = [2, 4, 6, 8]\n    for even_number in even_numbers:\n        if n % even_number == 0:\n            return False\n    return True",
        "test": "assert is_equal_to_sum_even(6) == False",
        "num_ids": 1887
    },
    {
        "number": 139,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result",
        "test": "assert special_factorial(5) == 120, \"The function should return 120 for input 5\"",
        "num_ids": 1659
    },
    {
        "number": 140,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    text = text.replace(\" \", \"_\")\n    space_count = 0\n    prev_char = \"\"\n    for char in text:\n        if char == \" \":\n            space_count += 1\n            if space_count > 2:\n                prev_char = char\n                text = text[:text.index(char)] + \"-\" + text[text.index(char)+1:]\n        else:\n            space_count = 0\n    return text",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 1977
    },
    {
        "number": 141,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    \n    # Check if the file name has more than three digits\n    digits_count = sum(1 for char in file_name if char.isdigit())\n    if digits_count > 3:\n        return \"No\"\n    \n    # Check if the file name has exactly one dot\n    if \".\" not in file_name:\n        return \"No\"\n    \n    # Check if the substring before the dot is not empty and starts with a latin alphapet letter\n    before_dot, after_dot = file_name.split(\".\")\n    if len(before_dot) == 0 or not before_dot[0].isalpha():\n        return \"No\"\n    \n    # Check if the substring after the dot is one of these: ['txt', 'exe', 'dll']\n    extension = after_dot.lower()\n    if extension not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    \n    return \"Yes\"",
        "test": "assert file_name_check(\"1example.dll\") == \"No\"",
        "num_ids": 4027
    },
    {
        "number": 142,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0 and i % 4!= 0:\n            lst[i] = num ** 3\n        elif i % 4 == 0 and i % 3!= 0:\n            lst[i] = num ** 4\n        result += num\n    return result",
        "test": "assert sum_squares([]) == 0",
        "num_ids": 3002
    },
    {
        "number": 143,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    words = sentence.split()\n    new_sentence = \"\"\n    for word in words:\n        if is_prime(len(word)):\n            new_sentence += word + \" \"\n    return new_sentence.strip()",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\"",
        "num_ids": 2853
    },
    {
        "number": 144,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def simplify(x, n):\n    \"\"\"Simplify the expression x * n, where x and n are string representations of fractions,\n    and return True if x * n evaluates to a whole number and False otherwise.\"\"\"\n    # Convert the fractions to floats\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n\n    # Check if x * n is an integer multiple\n    if x_num * n_num == x_denom * n_denom:\n        # x * n is an integer multiple\n        return True\n    else:\n        # x * n is not an integer multiple\n        return False",
        "test": "assert simplify(\"1/6\", \"2/1\") == False",
        "num_ids": 2859
    },
    {
        "number": 145,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # Helper function to get the sum of digits of a number\n    def get_sum(num):\n        return sum(int(digit) for digit in str(num))\n\n    # Sort the list based on the sum of digits\n    nums.sort(key=lambda x: (get_sum(x), nums.index(x)))\n\n    return nums",
        "test": "assert order_by_points([]) == []",
        "num_ids": 2859
    },
    {
        "number": 146,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9):\n            count += 1\n    return count",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1",
        "num_ids": 2389
    },
    {
        "number": 147,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = []\n    for i in range(1, n+1):\n        a.append(i*i - i + 1)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count",
        "test": "assert get_max_triples(3) == 0",
        "num_ids": 3312
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    \n    # Define the orbits of the planets\n    orbits = {\n        \"Mercury\": [\"Sun\", \"Venus\", \"Earth\", \"Mars\"],\n        \"Venus\": [\"Sun\", \"Mercury\", \"Earth\", \"Mars\"],\n        \"Earth\": [\"Sun\", \"Mercury\", \"Venus\", \"Mars\"],\n        \"Mars\": [\"Sun\", \"Mercury\", \"Venus\", \"Earth\"],\n        \"Jupiter\": [\"Sun\", \"Venus\", \"Earth\", \"Mars\", \"Saturn\"],\n        \"Saturn\": [\"Sun\", \"Jupiter\", \"Uranus\", \"Neptune\"],\n        \"Uranus\": [\"Sun\", \"Saturn\", \"Neptune\"],\n        \"Neptune\": [\"Sun\", \"Saturn\", \"Uranus\"]\n    }\n    \n    # Check if planet1 and planet2 are valid planet names\n    if planet1 not in orbits or planet2 not in orbits:\n        return ()\n    \n    # Find all planets between planet1 and planet2 that are in the same orbit\n    same_orbit_planets = set()\n    for planet in orbits[planet1]:\n        if planet in orbits[planet2]:\n            same_orbit_planets.add(planet)\n    \n    # Sort the same_orbit_planets by proximity to the sun\n    sorted_same_orbit_planets = sorted(same_orbit_planets, key=lambda planet: orbits[planet].index(planet))\n    \n    # Return the sorted same_orbit_planets as a tuple\n    return tuple(sorted_same_orbit_planets)",
        "test": "assert bf(\"Earth\", \"Mercury\") == (\"Venus\")",
        "num_ids": 5588
    },
    {
        "number": 149,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # First, remove odd lengths from the list\n    lst = [word for word in lst if len(word) % 2 == 0]\n\n    # Sort the list by length, then by alphabetical order\n    lst.sort(key=lambda x: (-len(x), x))\n\n    return lst",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 3390
    },
    {
        "number": 150,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y",
        "test": "assert x_or_y(7, 34, 12) == 34",
        "num_ids": 2102
    },
    {
        "number": 151,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    '''\n    \n    if not lst:\n        return 0\n    \n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 == 1 and num >= 0:\n            result += num**2\n    \n    return result",
        "test": "assert double_the_difference([-1, -2, 0]) == 0",
        "num_ids": 2490
    },
    {
        "number": 152,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    example:\n    \n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    diff = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(game[i] - guess[i]))\n    return diff",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 3428
    },
    {
        "number": 153,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    max_strength = 0\n    strongest_extension = ''\n\n    for extension in extensions:\n        extension_name = extension.upper()\n        capitalized_count = len([char for char in extension_name if char.isupper()])\n        lowercase_count = len([char for char in extension_name if char.islower()])\n        strength = (capitalized_count - lowercase_count) / max(capitalized_count, lowercase_count)\n\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\"",
        "test": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'",
        "num_ids": 4537
    },
    {
        "number": 154,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\"\"\"\n    for i in range(len(a)):\n        if a.find(b)!= -1:\n            return True\n        if len(b) > 1:\n            b = b[1:] + b[0]\n        else:\n            b = \"\"\n    return False",
        "test": "assert cycpattern_check(\"abcd\",\"abd\") == False, \"Test case 1 failed\"",
        "num_ids": 2171
    },
    {
        "number": 155,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = str(num)\n    count_even = 0\n    count_odd = 0\n    \n    for digit in num:\n        if digit.isdigit() and int(digit) % 2 == 0:\n            count_even += 1\n        elif digit.isdigit() and int(digit) % 2 == 1:\n            count_odd += 1\n            \n    return (count_even, count_odd)",
        "test": "assert even_odd_count(123) == (1, 2)",
        "num_ids": 1902
    },
    {
        "number": 156,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    def int_to_roman(num):\n        symbols = [(\"\", 1000), (\"m\", 1000), (\"cm\", 900), (\"d\", 500), (\"cd\", 400), (\"c\", 100), (\"xc\", 90), (\"l\", 50), (\"xl\", 40), (\"x\", 10), (\"ix\", 9), (\"v\", 5), (\"iv\", 4), (\"i\", 1)]\n        result = []\n        for s, v in symbols:\n            for i in range(num // v):\n                result.append(s)\n                num -= v\n        return ''.join(result)\n\n    roman = int_to_roman(number)\n    return roman.lower()",
        "test": "assert int_to_mini_roman(19) == 'xix'",
        "num_ids": 3655
    },
    {
        "number": 157,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\n    # Check if the lengths of the sides are greater than or equal to 0\n    if a < 0 or b < 0 or c < 0:\n        return False\n\n    # Check if the lengths of the sides form a right triangle\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False",
        "test": "assert right_angle_triangle(1, 2, 3) == False",
        "num_ids": 2128
    },
    {
        "number": 158,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n\n    max_count = 0\n    max_word = \"\"\n\n    for word in words:\n        count = len(set(word))\n        if count > max_count or (count == max_count and word < max_word):\n            max_count = count\n            max_word = word\n\n    return max_word",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 2514
    },
    {
        "number": 159,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                 the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n    \n    Have fun :)\n    \"\"\"\n\n    total_eaten = number + need\n    total_left = remaining - need\n\n    if total_left < 0:\n        total_left = 0\n\n    return [total_eaten, total_left]",
        "test": "assert eat(5, 6, 10) == [11, 4]",
        "num_ids": 4181
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n    \n    # check if length of operator and operand are equal\n    if len(operator)!= len(operand) - 1:\n        print(\"Error: Operator and operand lists have different lengths.\")\n        return None\n    \n    # check if operator list has at least one operator\n    if len(operator) == 0:\n        print(\"Error: Operator list is empty.\")\n        return None\n    \n    # check if operand list has at least two operands\n    if len(operand) < 2:\n        print(\"Error: Operand list has less than two elements.\")\n        return None\n    \n    # initialize variables\n    result = 0\n    \n    # loop through operator and operand lists\n    for i in range(len(operator)):\n        # evaluate the current expression\n        current_expression = eval(str(operator[i]) + str(operand[i]) + str(operand[i+1]))\n        \n        # update the result\n        result = current_expression\n    \n    return result",
        "test": "assert do_algebra(['+', '**', '**'], [2, 3, 4]) == 1024",
        "num_ids": 4946
    },
    {
        "number": 161,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\n    # Check if the string contains any letters\n    contains_letters = False\n    for char in s:\n        if char.isalpha():\n            contains_letters = True\n            break\n\n    # If the string contains no letters, reverse the string\n    if not contains_letters:\n        s = s[::-1]\n\n    # If the string contains letters, reverse their case\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n\n    return s",
        "test": "assert solve(\"ab\") == \"AB\"",
        "num_ids": 2708
    },
    {
        "number": 162,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
        "num_ids": 1773
    },
    {
        "number": 163,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    even_digits = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            even_digits.append(i)\n\n    return sorted(even_digits)\n",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 2145
    }
]