[
    {
        "number": 0,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i]-numbers[j]) <= threshold:\n                return True\n    return False"
    },
    {
        "number": 0,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False"
    },
    {
        "number": 0,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n    # sort the given list of numbers\n    numbers.sort()\n\n    # iterate through the list of numbers\n    for i in range(len(numbers) - 1):\n        # check if the difference between current number and next number is less than threshold\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n\n    # if no close elements found, return False\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    n = len(numbers)\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False"
    },
    {
        "number": 0,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False"
    },
    {
        "number": 0,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False"
    },
    {
        "number": 0,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    n = len(numbers)\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False"
    },
    {
        "number": 0,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    numbers = sorted(numbers)\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False"
    },
    {
        "number": 0,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i]-numbers[j]) <= threshold:\n                return True\n    return False"
    },
    {
        "number": 0,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    numbers.sort()\n    for i in range(len(numbers)-1):\n        if numbers[i+1] - numbers[i] <= threshold:\n            return True\n    return False"
    },
    {
        "number": 1,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    \"\"\"\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n\n    # Initialize an empty stack\n    stack = []\n\n    # Initialize an empty list to store the groups\n    groups = []\n\n    # Initialize a variable to keep track of the current group\n    current_group = \"\"\n\n    # Loop over each character in the input string\n    for char in paren_string:\n        # If the character is an open parenthesis, push it onto the stack\n        if char == \"(\":\n            stack.append(char)\n        # If the character is a close parenthesis, pop the top element from the stack and append it to the current group\n        elif char == \")\":\n            if len(stack) == 0:\n                raise ValueError(\"Unbalanced parentheses\")\n            stack.pop()\n            current_group += char\n        # If the character is neither an open nor a close parenthesis, it must be a space or other delimiter\n        else:\n            # If the stack is empty, we have reached the end of a group, so append it to the list of groups and reset the current group\n            if len(stack) == 0:\n                groups.append(current_group)\n                current_group = \"\"\n            # If the stack is not empty, the current character is part of the current group\n            else:\n                current_group += char\n\n    # If there are any unclosed groups remaining on the stack, raise an error\n    if len(stack) > 0:\n        raise ValueError(\"Unbalanced parentheses\")\n\n    # If there are any characters left in the current group, append it to the list of groups\n    if current_group!= \"\":\n        groups.append(current_group)\n\n    return groups"
    },
    {
        "number": 1,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    current_group = ''\n    paren_stack = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            if len(paren_stack) == 0:\n                # if there are no open parentheses, this is the start of a new group\n                groups.append(current_group)\n                current_group = ''\n            else:\n                paren_stack.pop()\n                # if there are still open parentheses, this is part of the current group\n        else:\n            current_group += char\n    if current_group!= '':\n        groups.append(current_group)\n    return groups"
    },
    {
        "number": 1,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                raise ValueError(\"Mismatched parentheses\")\n            stack.pop()\n            if len(stack) == 0:\n                result.append(''.join(stack))\n                stack = []\n        else:\n            if char!='':\n                raise ValueError(\"Invalid character: {}\".format(char))\n\n    if len(stack)!= 0:\n        raise ValueError(\"Mismatched parentheses\")\n\n    return result"
    },
    {
        "number": 1,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(' ', '')\n    \n    # Initialize a list to hold the separate groups\n    groups = []\n    \n    # Initialize variables to keep track of the current group and the current depth of parentheses\n    current_group = ''\n    depth = 0\n    \n    # Loop through each character in the input string\n    for char in paren_string:\n        # If we encounter an open parenthesis, increment the depth\n        if char == '(':\n            depth += 1\n        # If we encounter a close parenthesis, decrement the depth\n        elif char == ')':\n            depth -= 1\n        # If we encounter a space, ignore it\n        elif char =='':\n            continue\n        \n        # If we encounter a closing parenthesis and the depth is zero, we have reached the end of the group\n        if char == ')' and depth == 0:\n            # Add the current group to the list of groups\n            groups.append(current_group)\n            # Reset the current group and depth variables\n            current_group = ''\n            depth = 0\n        else:\n            # Add the current character to the current group\n            current_group += char\n    \n    # Add the last group to the list of groups, if there is one\n    if current_group!= '':\n        groups.append(current_group)\n    \n    return groups"
    },
    {
        "number": 1,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    \"\"\"\n    groups = []\n    current_group = ''\n    level = 0\n\n    for char in paren_string:\n        if char == '(':\n            level += 1\n            current_group += char\n        elif char == ')':\n            level -= 1\n            current_group += char\n            if level == 0:\n                groups.append(current_group)\n                current_group = ''\n        else:\n            current_group += char\n\n    return groups"
    },
    {
        "number": 1,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    \"\"\"\n    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) > 0:\n                stack.pop()\n                if len(stack) == 0:\n                    result.append(''.join(stack))\n                    stack = []\n            else:\n                stack.append(char)\n    return result\n\n\nif __name__ == '__main__':\n    print(separate_paren_groups('( ) (( )) (( )( ))')) # Output: ['()', '(())', '(()())']"
    },
    {
        "number": 1,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Separate groups of nested parentheses in a string into separate strings and return a list of those. \"\"\"\n    # Initialize an empty list to store the separate groups\n    result = []\n    # Initialize a string to store the current group being built\n    current = \"\"\n    # Initialize a counter to keep track of the number of open parentheses\n    count = 0\n    # Loop through each character in the input string\n    for c in paren_string:\n        # If the character is an open parenthesis, increment the counter\n        if c == '(':\n            count += 1\n        # If the character is a close parenthesis, decrement the counter\n        elif c == ')':\n            count -= 1\n        # If the counter is 0 and the current group is not empty, append it to the result list\n        # and reset the current group string\n        if count == 0 and current!= \"\":\n            result.append(current)\n            current = \"\"\n        # Otherwise, add the character to the current group string\n        else:\n            current += c\n    # If there is a group left over, append it to the result list\n    if current!= \"\":\n        result.append(current)\n    return result"
    },
    {
        "number": 1,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    \"\"\"\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    # Initialize empty list to store the groups\n    groups = []\n    \n    # Initialize variables to keep track of the current group and the position in the input string\n    group = \"\"\n    i = 0\n    \n    # Iterate through the input string character by character\n    while i < len(paren_string):\n        if paren_string[i] == \"(\":\n            # If the current character is an open brace, add it to the current group\n            group += \"(\"\n            # Increment the position in the input string\n            i += 1\n        elif paren_string[i] == \")\":\n            # If the current character is a closed brace, check if the group is balanced\n            if group[-1] == \"(\":\n                # If the group is balanced, append it to the list of groups and reset the current group\n                groups.append(group)\n                group = \"\"\n            else:\n                # If the group is not balanced, add the closing brace to the current group\n                group += \")\"\n            # Increment the position in the input string\n            i += 1\n        else:\n            # If the current character is neither an open nor a closed brace, ignore it and increment the position\n            i += 1\n    \n    # If there's any unclosed group remaining in the current group, append it to the list of groups\n    if group:\n        groups.append(group)\n    \n    return groups"
    },
    {
        "number": 1,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    \"\"\"\n    groups = []\n    current_group = ''\n    for c in paren_string:\n        if c == '(':\n            current_group += c\n        elif c == ')':\n            if len(current_group) == 0 or current_group[-1]!= '(':\n                current_group += c\n            else:\n                # We've found the end of a group, so add it to the list\n                groups.append(current_group)\n                current_group = ''\n        else:\n            # Ignore spaces\n            continue\n    # Add the last group if there is one\n    if len(current_group) > 0:\n        groups.append(current_group)\n    return groups"
    },
    {
        "number": 1,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    \"\"\"\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    # Initialize a stack to keep track of opening parentheses\n    stack = []\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate over each character in the input string\n    for c in paren_string:\n        # If the character is an opening parenthesis, push it onto the stack\n        if c == \"(\":\n            stack.append(c)\n        # If the character is a closing parenthesis, pop the top element from the stack and add it to the result\n        # until the stack is empty or until a matching opening parenthesis is found\n        elif c == \")\":\n            while stack and stack[-1]!= \"(\":\n                result.append(stack.pop())\n            if stack:\n                stack.pop()\n    # Append any remaining opening parentheses to the result\n    while stack:\n        result.append(stack.pop())\n    # Convert the result list to a string and return it\n    return [\"(\" + s + \")\" for s in result]"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    mad = sum(absolute_deviations) / len(absolute_deviations)\n    return mad\n"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    deviation = [abs(x - mean) for x in numbers]\n    return sum(deviation) / len(numbers)"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    deviation = []\n    for num in numbers:\n        deviation.append(abs(num - mean))\n    mad = sum(deviation) / len(deviation)\n    return mad"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    n = len(numbers)\n    mean = sum(numbers) / n\n    return sum(abs(x - mean) for x in numbers) / n"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(num - mean) for num in numbers]\n    return sum(deviations) / len(deviations)\n"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    return sum(absolute_deviations) / len(absolute_deviations)"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers)/len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    mad = sum(absolute_deviations)/len(absolute_deviations)\n    return mad"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n\n    mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(x - mean) for x in numbers]\n    return sum(absolute_differences) / len(absolute_differences)"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(x - mean) for x in numbers]\n    return sum(absolute_differences) / len(numbers)\n\nprint(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]))"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # Calculate the mean of the dataset\n    mean = sum(numbers) / len(numbers)\n    # Calculate the Mean Absolute Deviation\n    mad = sum([abs(x - mean) for x in numbers]) / len(numbers)\n    return mad\n"
    },
    {
        "number": 5,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"
    },
    {
        "number": 5,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i!= len(numbers)-1:\n            result.append(delimeter)\n    return result"
    },
    {
        "number": 5,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    else:\n        return [numbers[0]] + [delimeter] + [n for i, n in enumerate(numbers[1:]) if i % 2!= 0]\n"
    },
    {
        "number": 5,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "The solution for this problem can be implemented as follows:<|im_sep|>"
    },
    {
        "number": 5,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers' \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n"
    },
    {
        "number": 5,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(delimeter)\n        result.append(numbers[i])\n    return result"
    },
    {
        "number": 5,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result += [numbers[i]]\n        if i!= len(numbers) - 1:\n            result += [delimeter]\n    return result"
    },
    {
        "number": 5,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i!= len(numbers) - 1:\n            result.append(delimeter)\n    return result"
    },
    {
        "number": 5,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"
    },
    {
        "number": 5,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    max_nesting_levels = []\n    current_nesting_level = 0\n    for char in paren_string:\n        if char == '(':\n            current_nesting_level += 1\n        elif char == ')':\n            current_nesting_level -= 1\n            if current_nesting_level < 0:\n                raise ValueError(\"Invalid parentheses string: unmatched parentheses\")\n        if current_nesting_level > len(max_nesting_levels):\n            max_nesting_levels.append(current_nesting_level)\n    return max_nesting_levels"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    \n    levels = []\n    level = 0\n    for char in paren_string:\n        if char == '(':\n            level += 1\n        elif char == ')':\n            level -= 1\n        levels.append(level)\n    return levels"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    levels = []\n    level = 0\n    \n    for char in paren_string:\n        if char == '(':\n            level += 1\n        elif char == ')':\n            level -= 1\n            levels.append(level)\n    \n    return levels"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    current_level = 0\n    max_level = 0\n\n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n            max_level = max(max_level, current_level)\n        elif char == ')':\n            current_level -= 1\n        if current_level < 0:\n            return []\n\n    result = [max_level] * (paren_string.count('(') + paren_string.count(')'))\n    return result"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    \n    # split the string into groups separated by spaces\n    groups = paren_string.split()\n    \n    # empty list to store the maximum level of nesting for each group\n    max_levels = []\n    \n    # loop through each group\n    for group in groups:\n        # initialize a stack to keep track of opening parentheses\n        stack = []\n        # initialize a variable to keep track of the current level of nesting\n        level = 0\n        # loop through each character in the group\n        for char in group:\n            # if the character is an opening parenthesis, push it onto the stack\n            if char == '(':\n                stack.append(char)\n                # increment the level of nesting\n                level += 1\n            # if the character is a closing parenthesis, pop the top of the stack and decrement the level of nesting\n            elif char == ')':\n                stack.pop()\n                level -= 1\n        # append the maximum level of nesting for the group to the list of maximum levels\n        max_levels.append(level)\n    \n    return max_levels"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    levels = []\n    curr_level = 0\n    for char in paren_string:\n        if char == '(':\n            curr_level += 1\n        elif char == ')':\n            curr_level -= 1\n        if curr_level > len(levels):\n            levels.append(curr_level)\n    return levels"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    levels = []\n    current_level = 0\n    for c in paren_string:\n        if c == '(':\n            current_level += 1\n        elif c == ')':\n            current_level -= 1\n        levels.append(current_level)\n    return levels"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    depths = []\n    current_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n        elif char == ')':\n            current_depth -= 1\n        if current_depth > len(depths):\n            depths.append(current_depth)\n    return depths"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    level_list = []\n    max_level = 0\n    \n    for group in paren_string.split():\n        current_level = 0\n        for char in group:\n            if char == '(':\n                current_level += 1\n            elif char == ')':\n                current_level -= 1\n                if current_level < 0:\n                    break\n        level_list.append(current_level + 1)\n        if current_level + 1 > max_level:\n            max_level = current_level + 1\n    \n    return level_list\n\n\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for group in paren_string.split():\n        level = 0\n        max_level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif char == ')':\n                level -= 1\n        result.append(max_level)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 1,
        "answer": ""
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    return [string for string in strings if substring in string]"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    \"\"\"\n    return [s for s in strings if substring in s]\n\nif __name__ == '__main__':\n    print(filter_by_substring([], 'a')) # []\n    print(filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')) # ['abc', 'bacd', 'array']"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    return (sum(numbers), 1) if len(numbers) == 1 else (sum(numbers), numbers[0] * sum_product(numbers[1:])[1])"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    \n    product = 1\n    for num in numbers:\n        product *= num\n    \n    return sum(numbers), product\n"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), 1)"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n        return (sum(numbers), 1)"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), 1) if len(numbers) == 1 else (sum(numbers), numbers[0] * sum_product(numbers[1:])[1])\n"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    sum_ = sum(numbers)\n    product = 1\n    for num in numbers:\n        product *= num\n    return (sum_, product)"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), 1) if len(numbers) == 1 else (sum(numbers), numbers[0] * sum_product(numbers[1:])[1])"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return total_sum, total_product"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    \n    sum_ = sum(numbers)\n    product = 1\n    for num in numbers:\n        product *= num\n    \n    return sum_, product"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), 1)"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    result = []\n    max_so_far = float('-inf')  # initialize max_so_far to negative infinity\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_list = []\n    for i in range(len(numbers)):\n        if i == 0:\n            max_list.append(numbers[i])\n        else:\n            if numbers[i] > max_list[i-1]:\n                max_list.append(numbers[i])\n            else:\n                max_list.append(max_list[i-1])\n    return max_list"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_so_far = numbers[0]\n    rolling_maxes = [max_so_far]\n    for i in range(1, len(numbers)):\n        current = numbers[i]\n        if current > max_so_far:\n            max_so_far = current\n        rolling_maxes.append(max_so_far)\n    return rolling_maxes"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_so_far = numbers[0]\n    rolling_maxes = [max_so_far]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n        rolling_maxes.append(max_so_far)\n    return rolling_maxes"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_numbers = []\n    current_max = numbers[0]\n    max_numbers.append(current_max)\n    \n    for i in range(1, len(numbers)):\n        if numbers[i] > current_max:\n            current_max = numbers[i]\n        max_numbers.append(current_max)\n        \n    return max_numbers"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    result = []\n    max_so_far = numbers[0]\n    result.append(max_so_far)\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n        result.append(max_so_far)\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    max_so_far = float('-inf')\n    for number in numbers:\n        max_so_far = max(max_so_far, number)\n        result.append(max_so_far)\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_so_far = []\n    max_ending_here = numbers[0]\n    max_so_far.append(max_ending_here)\n    for i in range(1, len(numbers)):\n        max_ending_here = max(max_ending_here + numbers[i], numbers[i])\n        max_so_far.append(max_ending_here)\n    return max_so_far"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    max_so_far = numbers[0]\n    result.append(max_so_far)\n\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n\n    return result"
    },
    {
        "number": 10,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[i:][::-1]\n    return ''\n"
    },
    {
        "number": 10,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    \n    # Find the longest postfix of supplied string that is a palindrome.\n    for i in range(len(string)):\n        postfix = string[i:]\n        if is_palindrome(postfix):\n            break\n    \n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    prefix = string[:i]\n    palindrome_prefix = prefix[::-1]\n    return string + palindrome_prefix[1:]\n"
    },
    {
        "number": 10,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[::-1]\n\n    return ''"
    },
    {
        "number": 10,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n\n    # Find the longest palindromic postfix of the input string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            break\n\n    # Append the reverse of the string prefix that comes before the palindromic postfix\n    prefix = string[:i]\n    suffix = string[i:]\n    palindrome = prefix + suffix[::-1]\n\n    return palindrome"
    },
    {
        "number": 10,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if not string:\n        return ''\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]\n    return string + string[::-1]"
    },
    {
        "number": 10,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix of supplied string that is a palindrome\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    return string + string[:i-1][::-1] if i > 1 else string"
    },
    {
        "number": 10,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix of supplied string that is a palindrome.\n    i = len(string) - 1\n    while i >= 0 and not is_palindrome(string[:i+1]):\n        i -= 1\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string[:i+1] + string[i+1:][::-1]"
    },
    {
        "number": 10,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[i-1::-1]\n\n    return ''"
    },
    {
        "number": 10,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix of the string that is a palindrome\n    i, j = 0, len(string)\n    while i < j:\n        if is_palindrome(string[i:]):\n            break\n        i += 1\n    \n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    prefix = string[:i]\n    suffix = string[i:]\n    return prefix + suffix[::-1]"
    },
    {
        "number": 10,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    else:\n        # find longest postfix of string that is a palindrome\n        for i in range(len(string), -1, -1):\n            if is_palindrome(string[:i]):\n                break\n        # append reverse of prefix before palindromic postfix\n        prefix = string[:i]\n        suffix = string[i:]\n        return prefix + suffix[::-1]"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = \"\"\n    for i in range(max(len(a), len(b))):\n        if i < len(a) and i < len(b):\n            result += str(int(a[i]) ^ int(b[i]))\n        elif i < len(a):\n            result += a[i]\n        else:\n            result += b[i]\n    return result"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Perform binary XOR on two strings a and b.\n    :param a: First string\n    :param b: Second string\n    :return: Resulting string after performing XOR operation\n    \"\"\"\n    # Convert strings to binary lists\n    a_list = [int(i) for i in a]\n    b_list = [int(i) for i in b]\n\n    # Perform XOR operation on binary lists\n    result_list = [a_list[i] ^ b_list[i] for i in range(len(a_list))]\n\n    # Convert binary list to string\n    result_str = ''.join([str(i) for i in result_list])\n\n    return result_str"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = \"\"\n    for i in range(max(len(a), len(b))):\n        if i < len(a) and i < len(b):\n            result += str(int(a[i]) ^ int(b[i]))\n        elif i < len(a):\n            result += a[i]\n        else:\n            result += b[i]\n    return result"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Convert input strings to lists of integers\n    a_list = [int(x) for x in a]\n    b_list = [int(x) for x in b]\n    # Perform binary XOR on corresponding integers in both lists\n    result_list = [(a ^ b) for a, b in zip(a_list, b_list)]\n    # Convert result list to string of integers\n    result_str = ''.join([str(x) for x in result_list])\n    return result_str"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Convert strings to lists of integers\n    a_int_list = [int(char) for char in a]\n    b_int_list = [int(char) for char in b]\n    \n    # Perform XOR operation on corresponding integers\n    xor_list = [a ^ b for a, b in zip(a_int_list, b_int_list)]\n    \n    # Convert list of integers to string\n    xor_str = ''.join(str(char) for char in xor_list)\n    \n    return xor_str"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    return ''.join(['1' if bool(int(x) ^ int(y)) else '0' for x, y in zip(a, b)])"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Convert input strings to lists of characters\n    a_list = list(a)\n    b_list = list(b)\n    \n    # Perform binary XOR on characters and store in result list\n    result = []\n    for i in range(len(a_list)):\n        if a_list[i] == b_list[i]:\n            result.append('0')\n        else:\n            result.append('1')\n    \n    # Convert result list to string and return\n    return ''.join(result)"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(max(len(a), len(b))):\n        if i < len(a) and i < len(b):\n            if a[i] == b[i]:\n                result += '0'\n            else:\n                result += '1'\n        elif i < len(a):\n            result += a[i]\n        else:\n            result += b[i]\n    return result"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    max_length = 0\n    result = None\n    for s in strings:\n        if len(s) > max_length:\n            max_length = len(s)\n            result = s\n        elif len(s) == max_length:\n            result = s\n    return result"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    \n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    \n    return longest_string"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    max_length = len(strings[0])\n    max_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > max_length:\n            max_length = len(string)\n            max_string = string\n    return max_string"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    \n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_string):\n            longest_string = string\n    \n    return longest_string"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = 0\n    longest_string = None\n    for string in strings:\n        if len(string) > max_length:\n            max_length = len(string)\n            longest_string = string\n    return longest_string"
    },
    {
        "number": 13,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)"
    },
    {
        "number": 13,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n"
    },
    {
        "number": 13,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    # the greatest common divisor of a and b can't be greater than the smaller one\n    if a < b:\n        a, b = b, a\n\n    # if b is zero, then the greatest common divisor is the same as a\n    if b == 0:\n        return a\n\n    # otherwise, we can use the Euclidean algorithm to find the gcd\n    return greatest_common_divisor(b, a % b)\n"
    },
    {
        "number": 13,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)"
    },
    {
        "number": 13,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)"
    },
    {
        "number": 13,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)"
    },
    {
        "number": 13,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)"
    },
    {
        "number": 13,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b \"\"\"\n    while b:\n        a, b = b, a % b\n    return a"
    },
    {
        "number": 13,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)"
    },
    {
        "number": 13,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string \"\"\"\n    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return result"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefix_list = []\n    for i in range(len(string)):\n        prefix_list.append(string[:i+1])\n    return prefix_list"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"
    },
    {
        "number": 15,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return''.join(str(i) for i in range(n+1))"
    },
    {
        "number": 15,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return''.join([str(i) for i in range(n+1)])"
    },
    {
        "number": 15,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    result = \"\"\n    for i in range(n+1):\n        result += str(i) + \" \"\n    return result[:-1]"
    },
    {
        "number": 15,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\"Return a string containing space-delimited numbers starting from 0 upto n inclusive.\"\"\"\n    return''.join(str(i) for i in range(n+1))"
    },
    {
        "number": 15,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return \" \".join(str(i) for i in range(n+1))"
    },
    {
        "number": 15,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive. \"\"\"\n    return''.join(str(i) for i in range(n+1))"
    },
    {
        "number": 15,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return''.join(str(i) for i in range(n+1))"
    },
    {
        "number": 15,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return''.join(str(i) for i in range(n+1))"
    },
    {
        "number": 15,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return''.join(str(i) for i in range(n+1))"
    },
    {
        "number": 15,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return \" \".join(str(i) for i in range(n+1))"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \"\"\"\n    distinct_chars = set(string.lower())\n    return len(distinct_chars)"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \"\"\"\n    # convert string to lowercase to ignore case sensitivity\n    string = string.lower()\n    # create an empty set to store distinct characters\n    distinct_chars = set()\n    # iterate over each character in the string\n    for char in string:\n        # if the character is not already in the set, add it\n        if char not in distinct_chars:\n            distinct_chars.add(char)\n    # return the length of the set of distinct characters\n    return len(distinct_chars)"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \"\"\"\n    distinct_chars = set(string.lower())\n    return len(distinct_chars)"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # convert string to lowercase and remove any non-alphabetic characters using regular expressions\n    string = re.sub(r'[^a-zA-Z]', '', string).lower()\n    # convert string to set and return its length\n    return len(set(string))"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of \"\"\"\n    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of \"\"\"\n    # convert the string to lowercase and remove any non-alphanumeric characters\n    string = \"\".join(char for char in string if char.isalnum()).lower()\n    # create a set of unique characters in the string\n    unique_chars = set(string)\n    # return the number of unique characters\n    return len(unique_chars)\n"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \"\"\"\n    # Convert the string to lowercase\n    string = string.lower()\n    # Create an empty set to store unique characters\n    unique_chars = set()\n    # Iterate over each character in the string\n    for char in string:\n        # Add the character to the set if it's not already there\n        unique_chars.add(char)\n    # Return the size of the set, which represents the number of distinct characters\n    return len(unique_chars)"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of \"\"\"\n    return len(set(string.lower()))"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of \"\"\"\n    # Convert the string to lowercase\n    string = string.lower()\n    # Create a set to store the distinct characters\n    distinct_chars = set()\n    # Loop through each character in the string\n    for char in string:\n        # If the character is not already in the set, add it\n        if char not in distinct_chars:\n            distinct_chars.add(char)\n    # Return the size of the set, which is the number of distinct characters\n    return len(distinct_chars)"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    beats_per_note = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        beats.append(beats_per_note[note])\n    return beats"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    # Define a dictionary to map each character to its duration in beats\n    duration_mapping = {'o': 4, 'o|': 2, '.|': 1}\n\n    # Split the string into a list of characters\n    char_list = list(music_string)\n\n    # Initialize an empty list to store the durations\n    duration_list = []\n\n    # Iterate through the characters and append their durations to the list\n    for char in char_list:\n        if char in duration_mapping:\n            duration_list.append(duration_mapping[char])\n\n    return duration_list"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    beats = []\n    current_beat = 0\n    for note in music_string.split():\n        if note == 'o':\n            current_beat += 4\n        elif note == 'o|':\n            current_beat += 2\n        elif note == '.|':\n            current_beat += 1\n        beats.append(current_beat)\n    return beats"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    beats = []\n    note_duration = 1\n    \n    for char in music_string:\n        if char == 'o':\n            beats.append(note_duration * 4)\n        elif char == 'o|':\n            beats.append(note_duration * 2)\n            note_duration = 1\n        elif char == '.|':\n            beats.append(note_duration * 1)\n            note_duration = 1\n            \n    return beats"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    notes = music_string.split()\n    result = []\n    for note in notes:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return result"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    beats = [4, 2, 1]\n    result = []\n    for char in music_string:\n        if char == 'o':\n            result.append(beats[0])\n        elif char == 'o|':\n            result.append(beats[1])\n        elif char == '.|':\n            result.append(beats[2])\n    return result"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    beats = []\n    current_beat = 0\n    for note in music_string.split():\n        if note == 'o':\n            current_beat += 4\n        elif note == 'o|':\n            current_beat += 2\n        elif note == '.|':\n            current_beat += 1\n        beats.append(current_beat)\n    return beats"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # define dictionary of note durations\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n\n    # split input string into individual notes\n    notes = music_string.split()\n\n    # iterate over notes and add their duration to the result list\n    result = []\n    for note in notes:\n        result.append(durations[note])\n\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string == '' or substring == '':\n        return 0\n    \n    count = 0\n    i = 0\n    \n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring) - 1\n        else:\n            i += 1\n            \n    return count"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    start = 0\n    while True:\n        index = string.find(substring, start)\n        if index == -1:\n            break\n        count += 1\n        start = index + 1\n    return count"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    i = 0\n    while i <= len(string) - len(substring):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()  # run the doctest"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    if substring in string:\n        count += 1\n        string = string[string.index(substring) + len(substring):]\n    count += string.count(substring)\n    return count"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    start = 0\n    while start < len(string):\n        index = string.find(substring, start)\n        if index == -1:\n            return count\n        count += 1\n        start = index + 1\n    return count"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        if string.startswith(substring, i):\n            count += 1\n    return count"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts the numbers from smallest to largest.\n\n    Args:\n        numbers (str): Space-delimited string of numbers from 0 to 9.\n\n    Returns:\n        str: The sorted string of numbers.\n    \"\"\"\n    # Convert the string to a list of numbers\n    numbers_list = [int(num) for num in numbers.split()]\n    \n    # Sort the numbers in ascending order\n    numbers_list.sort()\n    \n    # Convert the list of numbers back to a string and return it\n    sorted_numbers =''.join([str(num) for num in numbers_list])\n    return sorted_numbers"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    nums = [int(n) for n in numbers.split()]\n    nums.sort()\n    return''.join(str(n) for n in nums)"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    \"\"\"\n    sorted_numbers = sorted(numbers.split(), key=lambda x: int(x))\n    return''.join(sorted_numbers)"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    \"\"\"\n    # Convert the input string to a list of integers\n    nums = [int(num) for num in numbers.split()]\n    \n    # Sort the list in ascending order using the sorted() function\n    sorted_nums = sorted(nums)\n    \n    # Convert the sorted list back to a string and return it\n    return''.join([str(num) for num in sorted_nums])"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    \"\"\"\n    # convert the string to a list of numbers\n    num_list = [int(num) for num in numbers.split()]\n    \n    # sort the list in ascending order\n    num_list.sort()\n    \n    # convert the sorted list back to a string\n    sorted_str =''.join([str(num) for num in num_list])\n    \n    return sorted_str\n"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    valid_numbers = ['zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine']\n    sorted_numbers = sorted(numbers.split(), key=lambda x: valid_numbers.index(x))\n    return''.join(sorted_numbers)"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return''.join(num_list)"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    \"\"\"\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: int(x))\n    return''.join(num_list)\n"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest.\n    \"\"\"\n    # Convert the input string to a list of integers\n    numbers_list = [int(num) for num in numbers.split()]\n    \n    # Sort the list in ascending order\n    numbers_list.sort()\n    \n    # Convert the sorted list back to a string\n    sorted_numbers =''.join(str(num) for num in numbers_list)\n    \n    return sorted_numbers"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    # Split the input string into a list of numbers\n    numbers_list = numbers.split()\n    # Convert the list of numbers to integers\n    numbers_list = [int(num) for num in numbers_list]\n    # Sort the list of numbers using the sorted() function\n    sorted_numbers_list = sorted(numbers_list)\n    # Convert the sorted list of numbers back to a string\n    sorted_numbers_str =''.join([str(num) for num in sorted_numbers_list])\n    # Return the sorted string of numbers\n    return sorted_numbers_str"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    smallest = min(numbers)\n    largest = max(numbers)\n    if smallest == largest:\n        return (smallest, smallest)\n    else:\n        closest_to_smallest = float('inf')\n        closest_to_largest = float('inf')\n        for num in numbers:\n            if abs(num - smallest) < closest_to_smallest:\n                closest_to_smallest = abs(num - smallest)\n            if abs(num - largest) < closest_to_largest:\n                closest_to_largest = abs(num - largest)\n        for num in numbers:\n            if num == smallest:\n                continue\n            if abs(num - smallest) == closest_to_smallest:\n                return (smallest, num)\n            if num == largest:\n                continue\n            if abs(num - largest) == closest_to_largest:\n                return (num, largest)"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    for i in range(len(numbers)):\n        if numbers[i] == min_num or numbers[i] == max_num:\n            continue\n        if abs(numbers[i] - min_num) < abs(numbers[i] - max_num):\n            min_num = numbers[i]\n        else:\n            max_num = numbers[i]\n    return (min_num, max_num)"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = (numbers[0], numbers[1])\n    for i in range(1, len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < abs(closest_pair[0] - closest_pair[1]):\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    for num in numbers:\n        if num!= min_num and num!= max_num:\n            if abs(num - min_num) < abs(max_num - num):\n                min_num, max_num = num, max_num\n            elif abs(num - max_num) < abs(min_num - num):\n                min_num, max_num = min_num, num\n    return (min_num, max_num)"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List should have at least two elements\")\n    closest_pair = (float('inf'), float('inf'))\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < abs(closest_pair[0] - closest_pair[1]):\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements\")\n    \n    closest_pair = (numbers[0], numbers[1])\n    min_distance = abs(numbers[1] - numbers[0])\n    \n    for i in range(2, len(numbers)):\n        for j in range(i):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                min_distance = distance\n                closest_pair = (numbers[j], numbers[i])\n                \n    return closest_pair"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    min1, min2 = float('inf'), float('inf')\n    max1, max2 = float('-inf'), float('-inf')\n    \n    for num in numbers:\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n            \n    for num in numbers:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n            \n    return (min1, max1) if min1 < max1 else (max1, min1)\n\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[0], sorted_numbers[1]"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    # Sort the list in ascending order\n    sorted_list = sorted(numbers)\n    # Return the first and last elements of the sorted list as a tuple\n    return (sorted_list[0], sorted_list[-1])"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers.sort()\n    return numbers[0], numbers[1]"
    },
    {
        "number": 21,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    # Get the smallest and largest numbers from the input list\n    min_num = min(numbers)\n    max_num = max(numbers)\n    # Create a new list with the transformed values\n    transformed_list = [(num - min_num) / (max_num - min_num) for num in numbers]\n    return transformed_list"
    },
    {
        "number": 21,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    minimum = min(numbers)\n    maximum = max(numbers)\n    scaled_numbers = [(num - minimum) / (maximum - minimum) for num in numbers]\n    return scaled_numbers"
    },
    {
        "number": 21,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    minimum = min(numbers)\n    maximum = max(numbers)\n    transformed_numbers = [(num - minimum) / (maximum - minimum) for num in numbers]\n    return transformed_numbers"
    },
    {
        "number": 21,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    scale = max_num - min_num\n    \n    result = [(num - min_num)/scale for num in numbers]\n    return result"
    },
    {
        "number": 21,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    max_val = max(numbers)\n    min_val = min(numbers)\n    if min_val == max_val:\n        return [0.0] * len(numbers)\n    else:\n        return [(num - min_val) / (max_val - min_val) for num in numbers]\n\n\nif __name__ == \"__main__\":\n    numbers = [1.0, 2.0, 3.0, 4.0, 5.0]\n    print(rescale_to_unit(numbers))"
    },
    {
        "number": 21,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    rescaled_numbers = []\n    for num in numbers:\n        rescaled_numbers.append((num - min_num) / (max_num - min_num))\n    return rescaled_numbers"
    },
    {
        "number": 21,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    scale = max_num - min_num\n    if scale == 0:\n        return [0.0] * len(numbers)\n    return [(num - min_num) / scale for num in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range = max_num - min_num\n    return [(num - min_num) / range for num in numbers]"
    },
    {
        "number": 21,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    scale = (max_val - min_val) / (len(numbers) - 1)\n    return [(x - min_val) / scale for x in numbers]"
    },
    {
        "number": 22,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]"
    },
    {
        "number": 22,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result"
    },
    {
        "number": 22,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return [num for num in values if isinstance(num, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values if isinstance(i, int)]"
    },
    {
        "number": 22,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values if isinstance(i, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return [x for x in values if isinstance(x, int)]"
    },
    {
        "number": 22,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values if isinstance(x, int)]"
    },
    {
        "number": 22,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]"
    },
    {
        "number": 22,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [val for val in values if isinstance(val, int)]"
    },
    {
        "number": 22,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return [value for value in values if isinstance(value, int)]\n"
    },
    {
        "number": 23,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"
    },
    {
        "number": 23,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"
    },
    {
        "number": 23,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"
    },
    {
        "number": 23,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"
    },
    {
        "number": 23,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"
    },
    {
        "number": 23,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"
    },
    {
        "number": 23,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"
    },
    {
        "number": 23,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"
    },
    {
        "number": 23,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"
    },
    {
        "number": 24,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n \"\"\"\n    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1"
    },
    {
        "number": 24,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    i = 2\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"
    },
    {
        "number": 24,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    # Start with the largest possible divisor, which is n itself\n    divisor = n\n    # Iterate over all possible divisors, starting from 2 (the smallest possible divisor)\n    for i in range(2, n):\n        # If n is divisible by i, update the largest divisor found so far\n        if n % i == 0:\n            divisor = i\n    # Return the largest divisor found\n    return divisor"
    },
    {
        "number": 24,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1"
    },
    {
        "number": 24,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    # Initialize the variable to store the largest divisor found so far\n    largest = 1\n    \n    # Iterate from 2 to n/2 (inclusive)\n    for i in range(2, n//2 + 1):\n        # Check if i is a divisor of n\n        if n % i == 0:\n            # If it is, update the largest divisor found so far if i is greater\n            if i > largest:\n                largest = i\n    \n    return largest"
    },
    {
        "number": 24,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1  # n is prime"
    },
    {
        "number": 24,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1\n"
    },
    {
        "number": 24,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n - 1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1"
    },
    {
        "number": 24,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    divisor = 2\n    while divisor <= n // 2:\n        if n % divisor == 0:\n            n //= divisor\n        else:\n            divisor += 1\n    return n"
    },
    {
        "number": 24,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    divisor = 2\n    while n % divisor!= 0:\n        divisor += 1\n    return divisor - 1\n"
    },
    {
        "number": 25,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Returns True if the given number is prime, False otherwise. \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    factors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return factors"
    },
    {
        "number": 25,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors"
    },
    {
        "number": 25,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors"
    },
    {
        "number": 25,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"
    },
    {
        "number": 25,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    factors = []\n    i = 2\n\n    while i <= n:\n        if n % i == 0:\n            count = 0\n            while n % i == 0:\n                count += 1\n                n //= i\n            factors.append(i)\n            factors.append(count)\n        i += 1\n\n    return factors"
    },
    {
        "number": 25,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"
    },
    {
        "number": 25,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"
    },
    {
        "number": 25,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\nprint(factorize(8))\nprint(factorize(25))\nprint(factorize(70))"
    },
    {
        "number": 25,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    factors = []\n    d = 2\n    while d*d <= n:\n        while (n % d) == 0:\n            factors.append(d)\n            n //= d\n        d += 1\n    if n > 1:\n        factors.append(n)\n    return factors"
    },
    {
        "number": 25,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return factors"
    },
    {
        "number": 26,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers"
    },
    {
        "number": 26,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers"
    },
    {
        "number": 26,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    unique_numbers = []\n    for num in numbers:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    return unique_numbers"
    },
    {
        "number": 26,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    return list(dict.fromkeys(numbers))\n"
    },
    {
        "number": 26,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_duplicates(numbers):\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    return list(set(numbers))"
    },
    {
        "number": 26,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers\n\nprint(remove_duplicates([1, 2, 3, 2, 4])) # [1, 3, 4]\n"
    },
    {
        "number": 26,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result"
    },
    {
        "number": 26,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers"
    },
    {
        "number": 26,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result"
    },
    {
        "number": 26,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    # Create an empty dictionary to store the count of each number in the list\n    count = {}\n    for num in numbers:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    # Create a list of unique numbers based on the count dictionary\n    unique_numbers = []\n    for num in numbers:\n        if count[num] == 1:\n            unique_numbers.append(num)\n    \n    return unique_numbers"
    },
    {
        "number": 27,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 27,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()"
    },
    {
        "number": 27,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()"
    },
    {
        "number": 27,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()"
    },
    {
        "number": 27,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 27,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()"
    },
    {
        "number": 27,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()"
    },
    {
        "number": 28,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"
    },
    {
        "number": 28,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"
    },
    {
        "number": 28,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"
    },
    {
        "number": 28,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"
    },
    {
        "number": 28,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    if not strings:\n        return \"\"\n    else:\n        return \"\".join(strings)"
    },
    {
        "number": 28,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"
    },
    {
        "number": 28,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"
    },
    {
        "number": 28,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"
    },
    {
        "number": 28,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    if not strings:\n        return ''\n    return ''.join(strings)"
    },
    {
        "number": 28,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"
    },
    {
        "number": 29,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]"
    },
    {
        "number": 29,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    result = []\n    for s in strings:\n        if s.startswith(prefix):\n            result.append(s)\n    return result"
    },
    {
        "number": 29,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    result = []\n    for string in strings:\n        if string.startswith(prefix):\n            result.append(string)\n    return result"
    },
    {
        "number": 29,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"
    },
    {
        "number": 29,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"
    },
    {
        "number": 29,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"
    },
    {
        "number": 29,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"
    },
    {
        "number": 29,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return list(filter(lambda x: x.startswith(prefix), strings))\n"
    },
    {
        "number": 29,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix. \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"
    },
    {
        "number": 30,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]"
    },
    {
        "number": 30,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]"
    },
    {
        "number": 30,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]"
    },
    {
        "number": 30,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num > 0]"
    },
    {
        "number": 30,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [n for n in l if n > 0]"
    },
    {
        "number": 30,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num > 0]"
    },
    {
        "number": 30,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]"
    },
    {
        "number": 30,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num > 0]"
    },
    {
        "number": 30,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num > 0]"
    },
    {
        "number": 30,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num > 0]"
    },
    {
        "number": 31,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 31,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 31,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 31,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 31,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 31,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 31,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 32,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2!= 0 or xs[-1] == 0:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients and largest non zero coefficient.\")\n    a, b = xs[0], xs[1]\n    while True:\n        mid = (a + b) / 2\n        if poly([a, b], mid) == 0:\n            return mid\n        elif poly([a, b], mid) * poly([a, b], a) < 0:\n            b = mid\n        else:\n            a = mid"
    },
    {
        "number": 32,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2!= 0 or xs[0] == 0:\n        raise ValueError(\"xs must have even number of coefficients and non zero first coefficient.\")\n    \n    n = len(xs) // 2\n    for i in range(1, n+1):\n        if xs[2*i] < xs[2*i-1]:\n            xs[2*i], xs[2*i-1] = xs[2*i-1], xs[2*i]\n            \n    def solve(xs, a, b, c):\n        if b == 0:\n            return -c / a\n        else:\n            disc = b ** 2 - 4 * a * c\n            if disc < 0:\n                return None\n            elif disc == 0:\n                return -b / (2 * a)\n            else:\n                return (-b - math.sqrt(disc)) / (2 * a)\n    \n    for i in range(n):\n        if xs[2*i+1]!= 0:\n            return solve(xs[2*i:2*(i+1)+1], xs[2*i], xs[2*i+1], 0)\n        elif xs[2*i]!= 0:\n            return solve(xs[2*i:2*(i+1)+1], xs[2*i], 1, -xs[2*i])\n        else:\n            continue\n    return None"
    },
    {
        "number": 32,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef poly(xs, x):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 == 1 or max(xs) == 0:\n        return None\n    a, b = -10, 10\n    while b - a > 1e-8:\n        c = (a + b) / 2\n        if poly(xs, c) == 0:\n            return c\n        elif poly(xs, a) * poly(xs, c) < 0:\n            b = c\n        else:\n            a = c\n    return (a + b) / 2"
    },
    {
        "number": 32,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])"
    },
    {
        "number": 32,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2!= 0:\n        raise ValueError(\"Length of xs should be even\")\n    if max(abs(coeff) for coeff in xs) == 0:\n        raise ValueError(\"Coefficients should not be zero\")\n    xs = [coeff / abs(coeff) for coeff in xs] # make all coefficients positive\n    n = len(xs) // 2\n    for i in range(n):\n        if xs[i]!= 0 and xs[i+n]!= 0:\n            x0 = xs[i+n] / xs[i]\n            break\n    else:\n        raise ValueError(\"No solution found\")\n    return x0"
    },
    {
        "number": 32,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef poly(xs, x):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    n = len(xs)\n    if n % 2!= 0:\n        raise ValueError(\"Polynomial must have even number of coefficients\")\n    a = max(xs)\n    i = xs.index(a)\n    if i == n//2:\n        raise ValueError(\"Polynomial must have largest non-zero coefficient\")\n    xs = xs[:i+1] + xs[i+2:]\n    return math.pow(-xs[0]/xs[1], 1/n)\n"
    },
    {
        "number": 32,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[2] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only the first zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2!= 0:\n        raise ValueError(\"Length of xs must be even\")\n    \n    # Find the largest non-zero coefficient\n    max_coeff = max(xs)\n    if max_coeff == 0:\n        raise ValueError(\"Coefficients must have non-zero values\")\n\n    # Find the first zero\n    for x in range(-100, 100):\n        if poly(xs, x) == 0 and x!= 0:\n            return x\n\n    raise ValueError(\"No zero found\")\n"
    },
    {
        "number": 32,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    # find largest non zero coefficient\n    for i in range(len(xs)-1, -1, -1):\n        if xs[i]!= 0:\n            break\n    else:\n        raise ValueError(\"No non-zero coefficients found\")\n\n    if len(xs) % 2 == 1 or xs[i] > xs[-1]:\n        raise ValueError(\"Polynomial must have even number of coefficients and largest non-zero coefficient as last one\")\n\n    a, b = -float(\"inf\"), float(\"inf\")\n    while b - a > 1e-10:\n        mid = (a + b) / 2\n        if poly(xs, mid) < 0:\n            a = mid\n        else:\n            b = mid\n    return (a + b) / 2"
    },
    {
        "number": 32,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "The code provided is not correct as it contains a syntax error. Also, it does not meet the requirements of the problem. Please review and revise your solution."
    },
    {
        "number": 32,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "The above Python script defines a function `poly` to evaluate a polynomial with coefficients `xs` at point `x`. The function `find_zero` takes a list `xs` of coefficients of a polynomial and returns the zero point(s) of the polynomial using the Brent-Salamin method. The method is a root-finding method that uses inverse quadratic interpolation to find an initial estimate of the root and then refines the estimate using a combination of bisection and inverse quadratic interpolation. The script also includes test cases to demonstrate the functionality of the functions."
    },
    {
        "number": 33,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    l_sorted = sorted(l)\n    l_copy = l.copy()\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_copy[i] = l_sorted[i]\n    return l_copy"
    },
    {
        "number": 33,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = sorted(l)[i//3]\n    return l"
    },
    {
        "number": 33,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    l_copy = l.copy()\n    for i in range(len(l)):\n        if i % 3 == 2:\n            l_copy[i] = sorted(l[i-2:i+1])[1]\n    return l_copy"
    },
    {
        "number": 33,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    new_l = []\n    for i in range(len(l)):\n        if i % 3!= 0:\n            new_l.append(l[i])\n        else:\n            new_l.append(sorted(l)[i // 3])\n    return new_l"
    },
    {
        "number": 33,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    result = []\n    for i in range(len(l)):\n        if i % 3!= 0:\n            result.append(l[i])\n        else:\n            result.append(sorted(l[i:i+1])[0])\n    return result\n"
    },
    {
        "number": 33,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    res = []\n    for i in range(len(l)):\n        if i % 3!= 0:\n            res.append(l[i])\n        else:\n            res.append(sorted(l[:i+1])[0])\n    return res"
    },
    {
        "number": 33,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    sorted_l = sorted(l)\n    result = []\n    for i in range(len(l)):\n        if i % 3!= 0:\n            result.append(l[i])\n        else:\n            result.append(sorted_l[i // 3])\n    return result"
    },
    {
        "number": 33,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    # create a new list with the same length as l\n    l_prime = [None] * len(l)\n    \n    # iterate over the indices of l\n    for i in range(len(l)):\n        # if the index is not divisible by three, copy its value to l_prime\n        if i % 3!= 0:\n            l_prime[i] = l[i]\n        # if the index is divisible by three, copy the corresponding value to l_prime, sorted\n        else:\n            # find the indices of l that are equal to l[i] (excluding l[i] itself)\n            equal_indices = [j for j in range(len(l)) if l[j] == l[i] and j!= i]\n            # sort the equal indices in ascending order\n            sorted_equal_indices = sorted(equal_indices)\n            # copy the values at the sorted indices to l_prime\n            for j in range(len(sorted_equal_indices)):\n                l_prime[i+j] = l[sorted_equal_indices[j]]\n                \n    return l_prime"
    },
    {
        "number": 33,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n\n    result = []\n    for i in range(len(l)):\n        if i % 3!= 0:\n            result.append(l[i])\n        else:\n            temp_list = sorted(l[i:])\n            for j in range(len(temp_list)):\n                result.append(temp_list[j])\n            break\n\n    return result"
    },
    {
        "number": 33,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    n = len(l)\n    l2 = []\n    for i in range(n):\n        if i % 3!= 0:\n            l2.append(l[i])\n        else:\n            l2.append(sorted([x for x in l if x % 3 == 0 and x!= l[i]])[0])\n    return l2"
    },
    {
        "number": 34,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique(l):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))"
    },
    {
        "number": 34,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 34,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"
    },
    {
        "number": 34,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    unique_list = list(set(l))\n    return sorted(unique_list)\n\nprint(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))"
    },
    {
        "number": 34,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique(l):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    unique_list = list(set(l))\n    unique_list.sort()\n    return unique_list\n\nprint(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))"
    },
    {
        "number": 34,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"
    },
    {
        "number": 34,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))"
    },
    {
        "number": 34,
        "checkpoint": "15B",
        "pass": 7,
        "answer": ""
    },
    {
        "number": 34,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"
    },
    {
        "number": 35,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    max_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val"
    },
    {
        "number": 35,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    return max(l)"
    },
    {
        "number": 35,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    return max(l)"
    },
    {
        "number": 35,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)"
    },
    {
        "number": 35,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    return max(l)"
    },
    {
        "number": 35,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    return max(l)"
    },
    {
        "number": 35,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    if not l:\n        raise ValueError(\"List cannot be empty\")\n    max_num = l[0]\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 35,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)"
    },
    {
        "number": 35,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    return max(l)"
    },
    {
        "number": 35,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    return max(l)"
    },
    {
        "number": 36,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).count('7') > 0:\n                count += 1\n    return count"
    },
    {
        "number": 36,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for num in range(1, n):\n        if num % 11 == 0 or num % 13 == 0:\n            count += str(num).count('7')\n    return count"
    },
    {
        "number": 36,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"
    },
    {
        "number": 36,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"
    },
    {
        "number": 36,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def fizz_buzz(n: int):\n    count = 0\n    for num in range(1, n):\n        if num % 11 == 0 or num % 13 == 0:\n            for digit in str(num):\n                if digit == '7':\n                    count += 1\n                    break\n    return count"
    },
    {
        "number": 36,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for num in range(1, n):\n        if num % 11 == 0 or num % 13 == 0:\n            if '7' in str(num):\n                count += 1\n    return count"
    },
    {
        "number": 36,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"
    },
    {
        "number": 36,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count\n\nprint(fizz_buzz(50)) # Output: 0\nprint(fizz_buzz(78)) # Output: 2\nprint(fizz_buzz(79)) # Output: 3"
    },
    {
        "number": 36,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for num in range(1, n):\n        if num % 11 == 0 or num % 13 == 0:\n            if '7' in str(num):\n                count += 1\n    return count"
    },
    {
        "number": 36,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).count('7') > 0:\n                count += 1\n    return count"
    },
    {
        "number": 37,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    sorted_list = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            sorted_list.append(sorted(l[i::2])[0])\n        else:\n            sorted_list.append(l[i])\n    return sorted_list"
    },
    {
        "number": 37,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = sorted(l[i] for i in even_indices)\n    result = [l[i] if i in odd_indices else even_values.pop(0) for i in range(len(l))]\n    return result"
    },
    {
        "number": 37,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    # Initialize empty list to store even numbers\n    even_nums = []\n    \n    # Iterate through the list and add even numbers to the new list\n    for i in range(0, len(l), 2):\n        even_nums.append(l[i])\n    \n    # Sort the even numbers in ascending order\n    even_nums.sort()\n    \n    # Initialize empty list to store the final result\n    final_list = []\n    \n    # Iterate through the list and add the even numbers in sorted order to the final result\n    for i in range(0, len(l), 2):\n        final_list.append(even_nums.pop(0))\n    \n    # Add the odd numbers from the original list to the final result\n    for i in range(1, len(l), 2):\n        final_list.append(l[i])\n    \n    return final_list"
    },
    {
        "number": 37,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    even = sorted(l[1::2])\n    l_prime = [l[0]] + even\n    return l_prime"
    },
    {
        "number": 37,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    n = len(l)\n    sorted_list = []\n    for i in range(0, n, 2):\n        sorted_list.append(l[i])\n    sorted_list.sort()\n    for i in range(1, n, 2):\n        sorted_list.append(l[i])\n    return sorted_list"
    },
    {
        "number": 37,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_even(l):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    sorted_even = sorted(l[i] for i in even_indices)\n    l = list(l)\n    for i, j in zip(even_indices, sorted_even):\n        l[i] = j\n    return l"
    },
    {
        "number": 37,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even_indicies = [i for i in range(len(l)) if i % 2 == 0]\n    sorted_even_indicies = sorted(even_indicies)\n    for i in range(len(sorted_even_indicies)):\n        j = sorted_even_indicies[i]\n        k = even_indicies[i]\n        l[k] = l[j]\n    return l"
    },
    {
        "number": 37,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    # Create a new list with the even indices of l\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    # Create a new list with the values of l at the even indices\n    even_values = [l[i] for i in even_indices]\n    # Sort the even values in ascending order\n    sorted_even_values = sorted(even_values)\n    # Create a new list with the sorted even values at the even indices\n    sorted_even = [sorted_even_values[i] for i in range(len(sorted_even_values))]\n    # Create a new list l' with the odd indices of l and the sorted even values\n    sorted_l = [l[i] if i % 2 == 1 else sorted_even[i//2] for i in range(len(l))]\n    return sorted_l"
    },
    {
        "number": 37,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            # even index\n            result.append(l[i])\n        else:\n            # odd index\n            result.append(l[i])\n            # add the even index value sorted with the odd index value\n            result[i] = sorted([l[i-1], l[i]])[0]\n    return result"
    },
    {
        "number": 37,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    # Separate the even and odd indices in the list\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    odd_indices = [i for i in range(len(l)) if i % 2!= 0]\n    \n    # Sort the values at the even indices\n    sorted_values = sorted([l[i] for i in even_indices])\n    \n    # Create a new list with the sorted values at the even indices\n    new_list = [sorted_values[i//2] for i in range(len(sorted_values)*2)]\n    \n    # Insert the odd indices from the original list into the new list\n    for i in range(len(odd_indices)):\n        new_list.insert(even_indices[i], l[odd_indices[i]])\n    \n    return new_list"
    },
    {
        "number": 38,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def encode_cyclic(s: str) -> str:\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # restore original order of elements in each group.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"
    },
    {
        "number": 38,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "There is a minor issue with the `decode_cyclic` function. Currently, the function doesn't have any logic to decode the cyclic encoded string. It simply returns the input string."
    },
    {
        "number": 38,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def encode_cyclic(s: str) -> str:\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group.\n    groups = [group[::-1] for group in groups]\n    return \"\".join(groups)"
    },
    {
        "number": 38,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def encode_cyclic(s: str) -> str:\n    \"\"\"\n    Returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"
    },
    {
        "number": 38,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group.\n    groups = [(group[1] + group[0] + group[2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"
    },
    {
        "number": 38,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # uncycle elements in each group.\n    groups = [group[::-1] if len(group) == 3 else group for group in groups]\n    # join groups back to string.\n    return \"\".join(groups)"
    },
    {
        "number": 38,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # find the index of the character that appears first in each group.\n    first_chars = [group.index(min(group)) for group in groups]\n    # restore original order of characters by shifting them back.\n    decoded_s = [\"\"] * len(s)\n    for i in range(len(s)):\n        decoded_s[i] = groups[i // 3][(first_chars[i // 3] + i) % 3]\n    return \"\".join(decoded_s)"
    },
    {
        "number": 38,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1:] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"
    },
    {
        "number": 38,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse each group.\n    groups = [group[::-1] for group in groups]\n    # join groups to string.\n    return \"\".join(groups)"
    },
    {
        "number": 38,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"
    },
    {
        "number": 39,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_prime(num):\n    \"\"\"\n    is_prime function returns True if a number is prime, otherwise False.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef prime_fib(n):\n    \"\"\"\n    prime_fib function returns the n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    if n <= 0:\n        return \"n should be a positive integer\"\n    if n == 1:\n        return 2\n    fib_list = [0, 1]\n    while len(fib_list) < n:\n        fib_list.append(fib_list[-1] + fib_list[-2])\n    for i in range(n):\n        if is_prime(fib_list[i]):\n            return fib_list[i]"
    },
    {
        "number": 39,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_prime(n: int) -> bool:\n    \"\"\"\n    Returns True if n is a prime number, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    fib = [0, 1]\n    while len(fib) < n:\n        fib.append(fib[-1] + fib[-2])\n    for i in range(n-1, 0, -1):\n        if is_prime(fib[i]):\n            return fib[i]"
    },
    {
        "number": 39,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n\n    # First, we generate the Fibonacci sequence up to the n-th number\n    fib = [1, 1]\n    for i in range(2, n):\n        fib.append(fib[i-1] + fib[i-2])\n\n    # Then, we use the Sieve of Eratosthenes algorithm to find the prime numbers\n    is_prime = [True] * (fib[-1] + 1)\n    is_prime[0] = is_prime[1] = False\n    for i in range(2, int(fib[-1]**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i**2, fib[-1] + 1, i):\n                is_prime[j] = False\n\n    # Finally, we find the n-th number that is a Fibonacci number and prime\n    for i in range(n):\n        if fib[i] >= 10:  # We only consider Fibonacci numbers that are less than 10 digits\n            continue\n        if is_prime[int(str(fib[i])[-1])] and is_prime[int(str(fib[i])[-2])] and is_prime[int(str(fib[i])[-3])]:\n            return fib[i]"
    },
    {
        "number": 39,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_prime(n: int) -> bool:\n    \"\"\"\n    is_prime returns True if n is prime, otherwise False.\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if n == 1:\n        return 2\n    fib = [1, 1]\n    while len(fib) < n:\n        fib.append(fib[-1] + fib[-2])\n    for i in range(1, n):\n        if is_prime(fib[i]):\n            return fib[i]"
    },
    {
        "number": 39,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_prime(n):\n    \"\"\"\n    is_prime checks if a number is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        if is_prime(b):\n            return b\n        a, b = b, a+b\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter the value of n: \"))\n    print(prime_fib(n))"
    },
    {
        "number": 39,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_prime(n: int) -> bool:\n    \"\"\"\n    is_prime returns True if n is prime, otherwise False.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        fib = [2, 3]\n        while len(fib) < n:\n            fib.append(fib[-1] + fib[-2])\n        for i in range(n-1, 0, -1):\n            if is_prime(fib[i]):\n                return fib[i]\n"
    },
    {
        "number": 39,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_prime(n: int) -> bool:\n    \"\"\"\n    is_prime returns True if n is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th prime Fibonacci number.\n    \"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        if is_prime(a):\n            return a\n        a, b = b, a + b\n\nprint(prime_fib(1))  # Output: 2\nprint(prime_fib(2))  # Output: 3\nprint(prime_fib(3))  # Output: 5\nprint(prime_fib(4))  # Output: 13\nprint(prime_fib(5))  # Output: 89"
    },
    {
        "number": 39,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_prime(n: int) -> bool:\n    \"\"\"\n    is_prime checks whether a number is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    \n    prev = 1\n    current = 2\n    for i in range(3, n + 1):\n        next = prev + current\n        prev = current\n        current = next\n        \n        if is_prime(current):\n            return current"
    },
    {
        "number": 39,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_prime(n: int) -> bool:\n    \"\"\"\n    is_prime checks if a given number is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        if is_prime(b):\n            return b\n        a, b = b, a + b\n\n\nif __name__ == '__main__':\n    print(prime_fib(1))\n    print(prime_fib(2))\n    print(prime_fib(3))\n    print(prime_fib(4))\n    print(prime_fib(5))"
    },
    {
        "number": 39,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_prime(n: int) -> bool:\n    \"\"\"\n    is_prime returns True if n is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    fib = [0, 1]\n    count = 2\n    while count < n:\n        fib.append(fib[count - 1] + fib[count - 2])\n        count += 1\n    for i in range(n):\n        if is_prime(fib[i]):\n            return fib[i]\n\n\nprint(prime_fib(1))   # 2\nprint(prime_fib(2))   # 3\nprint(prime_fib(3))   # 5\nprint(prime_fib(4))   # 13\nprint(prime_fib(5))   # 89"
    },
    {
        "number": 40,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"
    },
    {
        "number": 40,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"
    },
    {
        "number": 40,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"
    },
    {
        "number": 40,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    \n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"
    },
    {
        "number": 40,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    l = sorted(l)\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            s = l[i] + l[left] + l[right]\n            if s == 0:\n                return True\n            elif s < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"
    },
    {
        "number": 40,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"
    },
    {
        "number": 40,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def triples_sum_to_zero(l):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"
    },
    {
        "number": 40,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"
    },
    {
        "number": 40,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"
    },
    {
        "number": 41,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\n    # Initialize the position of the cars\n    left_cars = [0] * n\n    right_cars = [float('inf')] * n\n\n    # Move the cars\n    for i in range(1, n + 1):\n        left_cars[i - 1] = min(left_cars[i - 1] + i, right_cars[i - 1])\n        right_cars[i - 1] = max(left_cars[i - 1] - i, right_cars[i - 1])\n\n    # Count the collisions\n    count = 0\n    for i in range(1, n):\n        if right_cars[i] < left_cars[i - 1]:\n            count += 1\n\n    return count"
    },
    {
        "number": 41,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Initialize the number of collisions to zero\n    collisions = 0\n    # Create two lists of cars, one for each direction of movement\n    cars_left = [i for i in range(1, n+1)]\n    cars_right = [i for i in range(n, 0, -1)]\n    # Move the cars in both directions until they collide\n    while len(cars_left) > 0 and len(cars_right) > 0:\n        # Move the cars that are driving left to right\n        cars_left = [car - 1 for car in cars_left]\n        # Move the cars that are driving right to left\n        cars_right = [car - 1 for car in cars_right]\n        # Check if any cars have collided\n        for car in cars_left:\n            if car in cars_right:\n                # If a collision occurs, remove the cars from their respective lists\n                cars_left.remove(car)\n                cars_right.remove(car)\n                # Increment the number of collisions\n                collisions += 1\n    # Return the final number of collisions\n    return collisions"
    },
    {
        "number": 41,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    left_car_position = 0\n    right_car_position = 10**9 # assume the right car starts far away\n    collisions = 0\n    \n    for i in range(2*n):\n        if i % 2 == 0: # left-moving car\n            if left_car_position >= right_car_position:\n                collisions += 1\n                left_car_position = i + 1 # move it one step forward\n                right_car_position = i + 2 # move it one step forward as well\n        else: # right-moving car\n            if right_car_position <= left_car_position:\n                collisions += 1\n                right_car_position = i + 1 # move it one step forward\n                left_car_position = i + 2 # move it one step forward as well\n    \n    return collisions"
    },
    {
        "number": 41,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    left_to_right = [i for i in range(1, n+1)]\n    right_to_left = list(reversed(left_to_right))\n    collisions = 0\n    for i in range(n):\n        if left_to_right[i] > right_to_left[i]:\n            collisions += 1\n            left_to_right[i] = right_to_left[i]\n    return collisions"
    },
    {
        "number": 41,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    left_to_right = [False] * n\n    right_to_left = [False] * n\n    \n    for i in range(n):\n        left_to_right[i] = True\n        right_to_left[i] = True\n    \n    collisions = 0\n    \n    for i in range(n):\n        if left_to_right[i]:\n            for j in range(i+1, n):\n                if right_to_left[j]:\n                    collisions += 1\n                    right_to_left[j] = False\n        else:\n            for j in range(i+1, n):\n                if left_to_right[j]:\n                    collisions += 1\n                    left_to_right[j] = False\n                    \n    return collisions"
    },
    {
        "number": 41,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    cars_left = [False] * n\n    cars_right = [False] * n\n    collisions = 0\n    \n    for i in range(n):\n        cars_left[i] = True\n        cars_right[n-i-1] = True\n    \n    for i in range(n):\n        if cars_left[i] and cars_right[i]:\n            collisions += 1\n            cars_left[i] = False\n            cars_right[i] = False\n    \n    return collisions"
    },
    {
        "number": 41,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                count += 1\n    return count"
    },
    {
        "number": 41,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def car_race_collision(n: int):\n    # Initialize variables\n    cars_left = [i for i in range(1, n+1)]\n    cars_right = [i for i in range(n, 0, -1)]\n    collisions = 0\n\n    # Simulate the race\n    while cars_left and cars_right:\n        # Check for collisions\n        if cars_left[0] == cars_right[0]:\n            collisions += 1\n            cars_left.pop(0)\n            cars_right.pop(0)\n        # Move cars\n        cars_left = cars_left[1:] + [cars_left[0]]\n        cars_right = cars_right[:-1] + [cars_right[-1]]\n\n    return collisions"
    },
    {
        "number": 41,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 2 == 0:\n            if i < n // 2:\n                count += 1\n        else:\n            if i >= n // 2:\n                count += 1\n    return count"
    },
    {
        "number": 41,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Initialize variables\n    left_cars = list(range(n))\n    right_cars = list(range(n))\n    collisions = 0\n\n    # Simulate car races until all cars have passed\n    while left_cars and right_cars:\n        # Move cars one step\n        left_cars = [x + 1 for x in left_cars]\n        right_cars = [x - 1 for x in right_cars]\n\n        # Check for collisions\n        collisions += len([x for x in left_cars if x in right_cars])\n\n    return collisions"
    },
    {
        "number": 42,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]"
    },
    {
        "number": 42,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x+1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x+1 for x in l]"
    },
    {
        "number": 42,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i + 1 for i in l]"
    },
    {
        "number": 42,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [num + 1 for num in l]"
    },
    {
        "number": 42,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x + 1 for x in l]"
    },
    {
        "number": 42,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def incr_list(l):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [num + 1 for num in l]"
    },
    {
        "number": 42,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x+1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def incr_list(l):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x + 1 for x in l]"
    },
    {
        "number": 42,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x+1 for x in l]"
    },
    {
        "number": 43,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"
    },
    {
        "number": 43,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 43,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"
    },
    {
        "number": 43,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    seen_numbers = set()\n    for num in l:\n        if -num in seen_numbers:\n            return True\n        seen_numbers.add(num)\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"
    },
    {
        "number": 43,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    # create a dictionary to store the values and their indices\n    val_dict = {}\n    # iterate through the list and add each value and its index to the dictionary\n    for i, val in enumerate(l):\n        if val not in val_dict:\n            val_dict[val] = i\n    # iterate through the list and check if there is a value that equals -val\n    for val in l:\n        if -val in val_dict and val_dict[-val]!= val_dict[val]:\n            return True\n    # if no such value is found, return False\n    return False"
    },
    {
        "number": 43,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"
    },
    {
        "number": 43,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    s = set(l)\n    for i in s:\n        if -i in s:\n            return True\n    return False"
    },
    {
        "number": 43,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    complements = set()\n    for num in l:\n        if num in complements:\n            return True\n        complements.add(-num)\n    return False"
    },
    {
        "number": 44,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    Return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    if x == 0:\n        return \"0\"\n    result = \"\"\n    while x > 0:\n        result = digits[x % base] + result\n        x //= base\n    return result or \"0\""
    },
    {
        "number": 44,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result"
    },
    {
        "number": 44,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10.\")\n\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\n    return result or \"0\"  # handle case when x is 0\n"
    },
    {
        "number": 44,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n\n    sign = '-' if x < 0 else ''\n    x = abs(x)\n\n    digits = ''\n    while x > 0:\n        remainder = x % base\n        digits = str(remainder) + digits\n        x //= base\n\n    return sign + digits if sign else digits"
    },
    {
        "number": 44,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def change_base(x: int, base: int) -> str:\n    \"\"\"\n    Change numerical base of input number x to base.\n    Return string representation after the conversion.\n    Base numbers are less than 10.\n    \"\"\"\n    digits = \"0123456789ABCDEF\"\n    if x < base:\n        return str(x)\n    result = \"\"\n    while x:\n        result = digits[x % base] + result\n        x //= base\n    return result or \"0\""
    },
    {
        "number": 44,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x //= base\n    return result"
    },
    {
        "number": 44,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    # initialize result string\n    result = \"\"\n\n    # check if base is valid\n    if base > 10 or base < 2:\n        return \"Invalid base\"\n\n    # convert x to base\n    while x > 0:\n        # calculate remainder\n        remainder = x % base\n\n        # if remainder is greater than 9, use A-Z\n        if remainder > 9:\n            result = chr(remainder + 55) + result\n        else:\n            result = str(remainder) + result\n\n        # update x\n        x = x // base\n\n    return result"
    },
    {
        "number": 44,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n        digits = []\n        while x > 0:\n            digits.append(x % base)\n            x //= base\n        digits.reverse()\n        return ''.join(str(digit) for digit in digits)"
    },
    {
        "number": 44,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 10:\n        return str(x)\n    else:\n        result = \"\"\n        while x > 0:\n            remainder = x % base\n            result = str(remainder) + result\n            x = x // base\n        return result"
    },
    {
        "number": 44,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # create an empty string to store the result\n    result = \"\"\n    # initialize a variable to store the remainder\n    remainder = 0\n    # convert x to base 10 using a loop\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x //= base\n    # return the result string\n    return result"
    },
    {
        "number": 45,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n\nprint(triangle_area(5, 3))"
    },
    {
        "number": 45,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    area = 0.5 * a * h\n    return area"
    },
    {
        "number": 45,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    area = 0.5 * a * h\n    return area"
    },
    {
        "number": 45,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    area = 0.5 * a * h\n    return area"
    },
    {
        "number": 45,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    area = 0.5 * a * h\n    return area"
    },
    {
        "number": 45,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height, return area of a triangle.\"\"\"\n    area = 0.5 * a * h\n    return area\n\nprint(triangle_area(5, 3))  # Output: 7.5"
    },
    {
        "number": 45,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    area = 0.5 * a * h\n    return area\n"
    },
    {
        "number": 45,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h"
    },
    {
        "number": 45,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\"\"\"\n    area = 0.5 * a * h\n    return area"
    },
    {
        "number": 45,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    area = (a * h) / 2\n    return area"
    },
    {
        "number": 46,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        prev_prev = 0\n        prev = 0\n        curr = 2\n        for i in range(4, n+1):\n            prev_prev, prev, curr = prev, curr, prev_prev + prev + curr\n        return curr"
    },
    {
        "number": 46,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def fib4(n: int) -> int:\n    if n <= 1:\n        return n\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n            a = b\n            b = c\n            c = d\n            d = e\n        return d"
    },
    {
        "number": 46,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)"
    },
    {
        "number": 46,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    fib_seq = [0, 0, 2, 0] # Initialize the first four elements of the sequence\n    for i in range(4, n+1): # Loop through the remaining elements of the sequence\n        fib_seq.append(fib_seq[i-1] + fib_seq[i-2] + fib_seq[i-3] + fib_seq[i-4]) # Compute the next element using the recurrence relation\n    return fib_seq[n] # Return the n-th element of the sequence\n"
    },
    {
        "number": 46,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)"
    },
    {
        "number": 46,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)"
    },
    {
        "number": 46,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)"
    },
    {
        "number": 46,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n < 4:\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        else:\n            return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)"
    },
    {
        "number": 46,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)"
    },
    {
        "number": 46,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n\n    a, b, c, d = 0, 0, 2, 0\n\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    elif n == 2:\n        return c\n    elif n == 3:\n        return d\n    else:\n        for i in range(4, n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n"
    },
    {
        "number": 47,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2] + l[n//2 - 1]) / 2\n    else:\n        return l[n//2]"
    },
    {
        "number": 47,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sorted_list = sorted(l)\n    length = len(sorted_list)\n    if length % 2 == 0:\n        # if the list has even number of elements, median is the average of middle two elements\n        return (sorted_list[length // 2 - 1] + sorted_list[length // 2]) / 2\n    else:\n        # if the list has odd number of elements, median is the middle element\n        return sorted_list[length // 2]"
    },
    {
        "number": 47,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    s = sorted(l)\n    if n % 2 == 0:\n        return (s[n//2 - 1] + s[n//2]) / 2\n    else:\n        return s[n//2]"
    },
    {
        "number": 47,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sorted_l = sorted(l)\n    n = len(l)\n    mid = n // 2\n    if n % 2 == 0:\n        return (sorted_l[mid-1] + sorted_l[mid]) / 2\n    else:\n        return sorted_l[mid]"
    },
    {
        "number": 47,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"
    },
    {
        "number": 47,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sorted_l = sorted(l)\n    n = len(l)\n    if n % 2 == 0:\n        return (sorted_l[n//2 - 1] + sorted_l[n//2])/2\n    else:\n        return sorted_l[n//2]"
    },
    {
        "number": 47,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2-1] + l[n//2]) / 2\n    else:\n        return l[n//2]"
    },
    {
        "number": 47,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 0:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2\n    else:\n        return sorted_l[mid]"
    },
    {
        "number": 47,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def median(l):\n    \"\"\"Return median of elements in the list l.\"\"\"\n    n = len(l)\n    s = sorted(l)\n    if n % 2 == 0:\n        return (s[n//2] + s[n//2 - 1]) / 2\n    else:\n        return s[n//2]"
    },
    {
        "number": 47,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n % 2 == 0:\n        # if the length of the list is even, calculate the average of the middle two elements\n        return (l[n//2-1] + l[n//2]) / 2\n    else:\n        # if the length of the list is odd, return the middle element\n        return l[n//2]"
    },
    {
        "number": 48,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    # Remove whitespace from the beginning and end of the string\n    text = text.strip().lower()\n    # Check if the string is equal to its reverse\n    return text == text[::-1]"
    },
    {
        "number": 48,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]"
    },
    {
        "number": 48,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "The `doctest` module is used to test the function using sample inputs and expected outputs. These inputs and outputs are added in the function's docstring. The `>>>` prompt is used to indicate the beginning of an input, and the `...` prompt is used to indicate the expected output."
    },
    {
        "number": 48,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]"
    },
    {
        "number": 48,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    if len(text) < 2:\n        return True\n    else:\n        if text[0] == text[-1]:\n            return is_palindrome(text[1:-1])\n        else:\n            return False"
    },
    {
        "number": 48,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]"
    },
    {
        "number": 48,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    if text == text[::-1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 48,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    if not text:\n        return True\n    else:\n        return text.lower() == text[::-1].lower()"
    },
    {
        "number": 48,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    :param text: str\n    :return: bool\n    \"\"\"\n    if text == text[::-1]:\n        return True\n    return False"
    },
    {
        "number": 48,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    if not text:\n        return True\n    else:\n        return text[0] == text[-1] and is_palindrome(text[1:-1])"
    },
    {
        "number": 49,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return 1 if n == 0 else pow(2, n, p)"
    },
    {
        "number": 49,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    result = 1\n    for i in range(n):\n        result = (result * 2) % p\n    return result"
    },
    {
        "number": 49,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 1:\n        return (2 * modp(n-1, p)) % p\n    else:\n        return (modp(n/2, p) ** 2) % p"
    },
    {
        "number": 49,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return modp(n/2, p)**2 % p\n    else:\n        return 2 * modp(n-1, p) % p"
    },
    {
        "number": 49,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    result = 1\n    for i in range(n):\n        result = (result * 2) % p\n    return result"
    },
    {
        "number": 49,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    result = 1\n    for i in range(n):\n        result = (result * 2) % p\n    return result"
    },
    {
        "number": 49,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "The `modp` function implements the above algorithm for a given `n` and `p`. The function checks if `n` is negative or zero and returns 1 if true. It also checks if `p` is a prime number, and raises an error if it is not. Finally, it returns the value of `result` obtained from the binary exponentiation algorithm."
    },
    {
        "number": 49,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    result = 1\n    for i in range(n):\n        result = (result * 2) % p\n    return result\n"
    },
    {
        "number": 49,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * 2) % p\n        n //= 2\n    return result"
    },
    {
        "number": 50,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"
    },
    {
        "number": 50,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"
    },
    {
        "number": 50,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"
    },
    {
        "number": 50,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"
    },
    {
        "number": 50,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"
    },
    {
        "number": 50,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"
    },
    {
        "number": 50,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"
    },
    {
        "number": 50,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"
    },
    {
        "number": 51,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"
    },
    {
        "number": 51,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    return ''.join([char for char in text if char not in vowels])"
    },
    {
        "number": 51,
        "checkpoint": "15B",
        "pass": 2,
        "answer": ""
    },
    {
        "number": 51,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_vowels(text):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    new_text = ''\n    for char in text:\n        if char not in vowels:\n            new_text += char\n    return new_text"
    },
    {
        "number": 51,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"
    },
    {
        "number": 51,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    new_text = ''\n    for letter in text:\n        if letter not in vowels:\n            new_text += letter\n    return new_text"
    },
    {
        "number": 51,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return \"\".join([char for char in text if char not in vowels])"
    },
    {
        "number": 51,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])\n"
    },
    {
        "number": 51,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"
    },
    {
        "number": 51,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"
    },
    {
        "number": 52,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    return all(num < t for num in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True"
    },
    {
        "number": 52,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True"
    },
    {
        "number": 52,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True"
    },
    {
        "number": 52,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    return all(num < t for num in l)"
    },
    {
        "number": 52,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    return all(num < t for num in l)"
    },
    {
        "number": 52,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    return all(num < t for num in l)"
    },
    {
        "number": 52,
        "checkpoint": "15B",
        "pass": 8,
        "answer": ""
    },
    {
        "number": 52,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True"
    },
    {
        "number": 53,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"
    },
    {
        "number": 53,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"
    },
    {
        "number": 53,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"
    },
    {
        "number": 53,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add(x: int, y: int):\n    pass"
    },
    {
        "number": 53,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y\n\nprint(add(2, 3))  # Output: 5\nprint(add(5, 7))  # Output: 12"
    },
    {
        "number": 53,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\nprint(add(2, 3))\nprint(add(5, 7))"
    },
    {
        "number": 53,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 53,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y"
    },
    {
        "number": 53,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y.\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"
    },
    {
        "number": 53,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y"
    },
    {
        "number": 54,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    s0 = sorted(s0)\n    s1 = sorted(s1)\n    return s0 == s1"
    },
    {
        "number": 54,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(s0)!= len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True"
    },
    {
        "number": 54,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    :param s0: the first word to check\n    :param s1: the second word to check\n    :return: True if the two words have the same characters, False otherwise\n    \"\"\"\n    # Convert the words to sets of characters to remove duplicates and check if they are equal\n    return set(s0) == set(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    s0_set = set(s0)\n    s1_set = set(s1)\n    if s0_set == s1_set:\n        return True\n    return False"
    },
    {
        "number": 54,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return sorted(s0) == sorted(s1)"
    },
    {
        "number": 54,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    set0 = set(s0)\n    set1 = set(s1)\n    return set0 == set1"
    },
    {
        "number": 54,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    s0 = sorted(s0)\n    s1 = sorted(s1)\n    return s0 == s1"
    },
    {
        "number": 54,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    # Convert both strings to sets of characters\n    set0 = set(s0)\n    set1 = set(s1)\n    # Check if the sets of characters are equal\n    if set0 == set1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 54,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    # Convert the words to sets of characters to remove duplicates\n    set_0 = set(s0)\n    set_1 = set(s1)\n    # Check if the sets are equal\n    if set_0 == set_1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 54,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n\n    Parameters:\n    s0 (str): First word\n    s1 (str): Second word\n    \n    Returns:\n    bool: True if the words have the same characters, False otherwise.\n    \n    Example:\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\n    # Convert the words to sets of characters\n    set0 = set(s0)\n    set1 = set(s1)\n\n    # Compare the sets of characters\n    if set0 == set1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 55,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"
    },
    {
        "number": 55,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\nif __name__ == \"__main__\":\n    print(fib(10)) # Output: 55\n    print(fib(1))  # Output: 1\n    print(fib(8))  # Output: 21"
    },
    {
        "number": 55,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\nprint(fib(10))  # Output: 55\nprint(fib(1))   # Output: 1\nprint(fib(8))   # Output: 21"
    },
    {
        "number": 55,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\nif __name__ == '__main__':\n    print(fib(10))\n    print(fib(1))\n    print(fib(8))"
    },
    {
        "number": 55,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"
    },
    {
        "number": 55,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"
    },
    {
        "number": 55,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"
    },
    {
        "number": 55,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"
    },
    {
        "number": 55,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\"\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n\n    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\n"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for b in brackets:\n        if b == '<':\n            stack.append(b)\n        elif b == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    brackets is a string of \"<\" and \">\"\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 1,
        "answer": ""
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # check if list has only one element\n    if len(l) == 1:\n        return True\n    \n    # check if list is monotonicly increasing or decreasing\n    if all(l[i] <= l[i+1] for i in range(len(l)-1)):\n        return True\n    elif all(l[i] >= l[i+1] for i in range(len(l)-1)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 1:\n        return True\n    elif len(l) == 2:\n        return l[0] <= l[1]\n    else:\n        return l[0] <= l[1] and monotonic(l[1:]) if l[0] <= l[1] else l[0] >= l[1] and monotonic(l[1:])"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    prev = l[0]\n    for i in range(1, len(l)):\n        if l[i] == prev:\n            continue\n        elif l[i] > prev:\n            prev = l[i]\n        else:\n            return False\n    return True"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) <= 2:\n        return True\n    direction = None\n    for i in range(1, len(l)):\n        if l[i] == l[i-1]:\n            continue\n        elif l[i] > l[i-1]:\n            if direction is None:\n                direction = 'increasing'\n            elif direction == 'decreasing':\n                return False\n        else:\n            if direction is None:\n                direction = 'decreasing'\n            elif direction == 'increasing':\n                return False\n    return True"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\n    \"\"\"\n    common_elements = list(set(l1) & set(l2))\n    return sorted(common_elements)"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Create a set of common elements\n    common_set = set(l1) & set(l2)\n    # Sort the set and return the result\n    return sorted(list(common_set))\n"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    common_elements = []\n    for element in l1:\n        if element in l2 and element not in common_elements:\n            common_elements.append(element)\n    return sorted(common_elements)"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    common_elements = set(l1) & set(l2)\n    return sorted(list(common_elements))"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    set1 = set(l1)\n    set2 = set(l2)\n    common_set = set1.intersection(set2)\n    common_list = sorted(list(common_set))\n    return common_list"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    common_elements = set(l1) & set(l2) # Find the common elements\n    return sorted(list(common_elements)) # Return sorted unique common elements"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    set1 = set(l1)\n    set2 = set(l2)\n    common_elements = set1.intersection(set2)\n    sorted_common = sorted(common_elements)\n    return sorted_common"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n\n    # Create a set of unique elements from both the lists\n    common_set = set(l1).intersection(set(l2))\n\n    # Sort the set and convert it back to a list\n    common_list = sorted(list(common_set))\n\n    return common_list"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def common(l1, l2):\n    \"\"\"Return sorted unique common elements for two lists.\n    \n    Args:\n    l1 (list): First list of integers.\n    l2 (list): Second list of integers.\n    \n    Returns:\n    list: Sorted list of unique common elements.\n    \n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Convert lists to sets to find common elements\n    set1 = set(l1)\n    set2 = set(l2)\n    # Find common elements and convert them to a list\n    common_elements = list(set1.intersection(set2))\n    # Sort the list and return it\n    common_elements.sort()\n    return common_elements"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    common_elements = list(set(l1) & set(l2))\n    return sorted(common_elements)"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_prime(n: int) -> bool:\n    \"\"\"Return True if n is prime, otherwise False.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    if is_prime(n):\n        return n\n    for i in range(2, n):\n        if n % i == 0 and is_prime(i):\n            return i\n\nif __name__ == '__main__':\n    n = int(input(\"Enter a number: \"))\n    print(f\"The largest prime factor of {n} is {largest_prime_factor(n)}\")"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_prime(n: int) -> bool:\n    \"\"\"Return True if n is prime, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    factor = 2\n    while factor * factor <= n:\n        if n % factor == 0 and is_prime(factor):\n            n //= factor\n        else:\n            factor += 1\n    return n"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Check if n is a prime number\n    if n < 2:\n        return None\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i\n    return n"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i <= n/i:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    if n % 2 == 0:\n        return 2\n    elif n % 3 == 0:\n        return 3\n    else:\n        i = 5\n        while i * i <= n:\n            if n % i == 0:\n                n //= i\n            else:\n                i += 2\n        return n\n"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "The script is correct and meets all the requirements of the prompt. It takes in an integer `n` and returns the largest prime factor of `n`. If `n` is a prime number, it returns `None`."
    },
    {
        "number": 60,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return (n * (n + 1)) // 2"
    },
    {
        "number": 60,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return (n * (n + 1)) // 2\n\n\nprint(sum_to_n(30))\nprint(sum_to_n(100))\nprint(sum_to_n(5))\nprint(sum_to_n(10))\nprint(sum_to_n(1))"
    },
    {
        "number": 60,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n+1))\n\nprint(sum_to_n(30))\nprint(sum_to_n(100))\nprint(sum_to_n(5))\nprint(sum_to_n(10))\nprint(sum_to_n(1))"
    },
    {
        "number": 60,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n+1))"
    },
    {
        "number": 60,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2"
    },
    {
        "number": 60,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return sum(range(1, n+1))\n"
    },
    {
        "number": 60,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n\n    Args:\n    n (int): The number to sum up to.\n\n    Returns:\n    int: The sum of numbers from 1 to n.\n\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return (n * (n+1)) // 2"
    },
    {
        "number": 60,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n\nprint(sum_to_n(30)) # 465\nprint(sum_to_n(100)) # 5050\nprint(sum_to_n(5)) # 15\nprint(sum_to_n(10)) # 55\nprint(sum_to_n(1)) # 1"
    },
    {
        "number": 60,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n\nprint(sum_to_n(30))\nprint(sum_to_n(100))\nprint(sum_to_n(5))\nprint(sum_to_n(10))\nprint(sum_to_n(1))\n"
    },
    {
        "number": 60,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return sum(range(1, n+1))\n"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for b in brackets:\n        if b == \"(\":\n            stack.append(b)\n        elif b == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\n    stack = []\n\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n\n    return len(stack) == 0"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Returns True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def derivative(xs):\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n    n = len(xs)\n    der = [0] * n\n    for i in range(1, n):\n        der[i-1] = xs[i] * i\n    return der"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    \"\"\"\n    n = len(xs)\n    if n == 1:\n        return [0]\n    else:\n        return [xs[i+1]*i for i in range(n-1)] + [0]"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n    n = len(xs)\n    if n == 1:\n        return [0]\n    else:\n        # Calculate the derivative using the formula:\n        # f'(x) = (n-1) * (f0 + f1*x + f2*(x^2) +...)\n        result = []\n        for i in range(1, n):\n            result.append(i * xs[i])\n        return result"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def derivative(xs):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    \"\"\"\n    d_xs = []\n    for i in range(1, len(xs)):\n        d_xs.append(i * xs[i])\n    return d_xs\n\nprint(derivative([3, 1, 2, 4, 5])) # [1, 4, 12, 20]\nprint(derivative([1, 2, 3])) # [2, 6]"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    n = len(xs)\n    result = []\n    for i in range(1, n):\n        result.append(i * xs[i])\n    return result"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    n = len(xs)\n    ys = [0] * (n - 1)\n    for i in range(1, n):\n        ys[i-1] = xs[i] * i\n    return ys"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n    n = len(xs)\n    # Base case: Return an empty list if xs has less than 2 elements\n    if n < 2:\n        return []\n    else:\n        # Compute the derivative of the polynomial using the definition:\n        # d/dx(a + bx + cx^2 +...) = b(d/dx(cx^2 +...)) + c(d/dx(bx) + d/dx(cx^2 +...))\n        dxs = []\n        for i in range(1, n):\n            dxs.append(i * xs[i])\n        return dxs"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 7,
        "answer": ""
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def derivative(xs):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n    return [i * (len(xs) - 1 - j) for j, i in enumerate(xs)] if len(xs) > 1 else []\n"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    n = len(xs)\n    der = []\n    for i in range(1, n):\n        der.append(i * xs[i])\n    return der"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def fibfib(n: int) -> int:\n    \"\"\"\n    Returns the n-th element of the Fibonacci-like sequence defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    \"\"\"\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n < 3:\n        return 0\n    elif n == 3:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\"\"\"\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for char in s:\n        if char.lower() in vowels or (char.lower() == 'y' and len(s) == 1):\n            count += 1\n    return count"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for c in s:\n        if c.lower() in vowels:\n            count += 1\n    if s[-1].lower() == 'y':\n        count += 1\n    return count"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = set('aeiou')\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1] == 'y':\n        count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for letter in s.lower():\n        if letter in vowels:\n            count += 1\n    if s.lower().endswith('y'):\n        count += 1\n    return count"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n    \"\"\"\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'y'])\n    count = 0\n    for c in s:\n        if c in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = set('aeiou')\n    count = 0\n    for c in s:\n        if c in vowels:\n            count += 1\n        if c == 'y' and s.endswith('y'):\n            count += 1\n    return count"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n    if s[-1] == 'y':\n        count += 1\n    return count"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def vowels_count(s):\n    \"\"\"\n    Returns the number of vowels in a given string.\n    \"\"\"\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for c in s.lower():\n        if c in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def vowels_count(s):\n    \"\"\"\n    Returns the number of vowels in a given string.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n        elif char.lower() == 'y' and count == 0:\n            count += 1\n    return count"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1] == \"y\":\n        count += 1\n    return count"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    x_str = str(x)\n    num_digits = len(x_str)\n    if shift > num_digits:\n        return ''.join(reversed(x_str))\n    else:\n        return ''.join(x_str[i-shift] for i in range(num_digits))\n"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n        return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    digits = [int(d) for d in str(x)]\n    num_digits = len(digits)\n    if shift > num_digits:\n        return ''.join(str(d) for d in digits[::-1])\n    return ''.join(str(digits[(i-shift) % num_digits]) for i in range(num_digits))"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    # Convert the integer to a string and get the length of the string\n    digits = str(x)\n    n = len(digits)\n\n    # If shift is greater than the number of digits, return digits reversed\n    if shift > n:\n        return digits[::-1]\n\n    # Shift the digits right by shift and return the result as a string\n    shifted = digits[-shift:] + digits[:-shift]\n    return shifted"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(int(str(x)[::-1]) // 10 ** shift) + str(int(str(x)[::-1]) % 10 ** shift)"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    digits = [int(d) for d in str(x)]\n    n = len(digits)\n    if shift >= n:\n        return ''.join([str(d) for d in digits[::-1]])\n    else:\n        shifted = digits[-shift:] + digits[:-shift]\n        return ''.join([str(d) for d in shifted])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    x_str = str(x)\n    n = len(x_str)\n    if shift > n:\n        shift = shift % n\n        if shift == 0:\n            shift = n\n    shifted = x_str[-shift:] + x_str[:-shift]\n    if shifted[-1] == '0' and len(shifted) > 1:\n        shifted = shifted[:-1]\n    return shifted"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    digits = str(x)\n    num_digits = len(digits)\n    if shift > num_digits:\n        return digits[::-1]\n    else:\n        shifted_digits = digits[num_digits-shift:] + digits[:num_digits-shift]\n        return shifted_digits"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    # Convert x to a string and get the length of the string\n    x_str = str(x)\n    x_len = len(x_str)\n\n    # If shift is greater than x_len, reverse the string and return it\n    if shift > x_len:\n        return x_str[::-1]\n\n    # Shift the digits and return them as a string\n    shifted_str = x_str[-shift:] + x_str[:-shift]\n    return shifted_str"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    # convert the integer to a string and reverse it\n    digits = str(x)[::-1]\n    \n    # if shift is greater than the number of digits, return the digits reversed\n    if shift > len(digits):\n        return digits\n    \n    # shift the digits right by shift\n    shifted_digits = digits[shift:] + digits[:shift]\n    \n    # return the shifted digits as a string\n    return shifted_digits"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def digitSum(s):\n    \"\"\"Returns the sum of the upper characters' ASCII codes.\"\"\"\n    total = 0\n    for c in s:\n        if c.isupper():\n            total += ord(c)\n    return total"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def digitSum(s):\n    \"\"\"\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def digitSum(s):\n    \"\"\"\n    This function takes a string as input and returns the sum of the upper characters only' ASCII codes.\n    \"\"\"\n    sum = 0\n    for i in s:\n        if i.isupper():\n            sum += ord(i)\n    return sum"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c)\n    return sum"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def digitSum(s):\n    \"\"\"Returns the sum of the upper characters' ASCII codes.\"\"\"\n    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def digitSum(s):\n    \"\"\"\n    This function takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def digitSum(s):\n    \"\"\"\n    This function takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n    \"\"\"\n    sum = 0\n    for i in s:\n        if i.isupper():\n            sum += ord(i)\n    return sum"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def digitSum(s):\n    \"\"\"\n    Returns the sum of the upper characters' ASCII codes.\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum = 0\n    for i in s:\n        if i.isupper():\n            sum += ord(i)\n    return sum"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    apples, oranges = map(int, s.split('apples and ')[0].split())\n    mangoes = n - apples - oranges\n    return mangoes"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def fruit_distribution(s, n):\n    # Split the string to get the total number of apples and oranges\n    apples, oranges = map(int, s.split()[0].split('and'))\n    \n    # Calculate the total number of mangoes\n    mangoes = n - (apples + oranges)\n    \n    return mangoes"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def fruit_distribution(s, n):\n    apples, oranges = map(int, s.split())\n    mangoes = n - apples - oranges\n    return mangoes"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def fruit_distribution(s, n):\n    # split the string into words and remove the word \"and\"\n    words = s.split()\n    words.remove(\"and\")\n\n    # initialize the number of apples and oranges\n    apples = 0\n    oranges = 0\n\n    # iterate through the words and extract the number of apples and oranges\n    for word in words:\n        if \"apple\" in word:\n            apples = int(word.split()[0])\n        elif \"orange\" in word:\n            oranges = int(word.split()[0])\n\n    # calculate the number of mango fruits in the basket\n    mangoes = n - apples - oranges\n\n    # return the number of mango fruits in the basket\n    return mangoes"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    s = s.lower()\n    fruits_dict = {'apples':0,'oranges':0,'mangoes':0}\n    for fruit in fruits_dict.keys():\n        count = s.count(fruit)\n        if count > 0:\n            fruits_dict[fruit] = count\n    \n    total_fruits = fruits_dict['apples'] + fruits_dict['oranges'] + fruits_dict['mangoes']\n    \n    if total_fruits <= n:\n        return n - fruits_dict['apples'] - fruits_dict['oranges']\n    else:\n        return n - fruits_dict['apples'] - fruits_dict['oranges'] - fruits_dict['mangoes']"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    \"\"\"\n    apples, oranges = s.split()[0], s.split()[2]\n    mango_fruits = n - int(apples) - int(oranges)\n    return mango_fruits"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    apple_count, orange_count = map(int, s.split()[:2])\n    total_count = apple_count + orange_count\n    mango_count = total_count - n\n    return mango_count"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def fruit_distribution(s, n):\n    # Split the string by \" and \" to get the number of apples and oranges\n    # Convert the string to lowercase to ignore case sensitivity\n    apples, oranges = map(int, s.lower().split(\" and \"))\n    # Subtract the number of apples and oranges from the total number of fruits\n    return n - apples - oranges"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def fruit_distribution(s, n):\n    # split the string to get the number of apples and oranges\n    apples, oranges = s.split()\n    apples = int(apples.split(' ')[0])\n    oranges = int(oranges.split(' ')[-1])\n\n    # calculate the total number of fruits in the basket\n    total_fruits = apples + oranges\n\n    # calculate the number of mango fruits\n    mango_fruits = n - total_fruits\n\n    return mango_fruits"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def fruit_distribution(s, n):\n    # Split the string into a list of words\n    words = s.split()\n    \n    # Extract the number of apples and oranges from the string\n    apples = int(words[0])\n    oranges = int(words[-2])\n    \n    # Compute the number of mangoes\n    mangoes = n - apples - oranges\n    \n    # Return the number of mangoes\n    return mangoes"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                        so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n    # If the array is empty, return empty list\n    if not arr:\n        return []\n\n    # Initialize variables for smallest even value and its index\n    smallest_even_value = float('inf')\n    smallest_even_index = -1\n\n    # Loop through the array and find the smallest even value and its index\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < smallest_even_value:\n            smallest_even_value = arr[i]\n            smallest_even_index = i\n\n    # If no even values are found, return empty list\n    if smallest_even_index == -1:\n        return []\n\n    # Return the smallest even value and its index in a list\n    return [smallest_even_value, smallest_even_index]"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n\n    even_values = [x for x in arr if x % 2 == 0]\n    if not even_values:\n        return []\n\n    smallest_even = min(even_values)\n    smallest_index = arr.index(smallest_even)\n\n    return [smallest_even, smallest_index]\n"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    even_min = float('inf')\n    min_node = None\n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < even_min:\n            even_min = node\n            min_node = [node, i]\n    return min_node"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    even_values = []\n    for i, value in enumerate(arr):\n        if value % 2 == 0:\n            even_values.append([value, i])\n    if len(even_values) == 0:\n        return []\n    even_values.sort()\n    return even_values[0]"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pluck(arr):\n    smallest_even_value = float('inf')\n    smallest_even_index = None\n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest_even_value:\n            smallest_even_value = node\n            smallest_even_index = i\n    if smallest_even_index is None:\n        return []\n    else:\n        return [smallest_even_value, smallest_even_index]"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pluck(arr):\n    if len(arr) == 0:\n        return []\n    smallest_even = float('inf')\n    smallest_even_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < smallest_even:\n            smallest_even = arr[i]\n            smallest_even_index = i\n    if smallest_even_index == -1:\n        return []\n    else:\n        return [smallest_even, smallest_even_index]"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    even_values = [n for n in arr if n % 2 == 0]\n    if not even_values:\n        return []\n    smallest_even = min(even_values)\n    smallest_index = arr.index(smallest_even)\n    return [smallest_even, smallest_index]"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pluck(arr):\n    if not arr:\n        return []\n    even_min = float('inf')\n    min_index = None\n    for i, x in enumerate(arr):\n        if x % 2 == 0 and x < even_min:\n            even_min = x\n            min_index = i\n    if min_index is None:\n        return []\n    else:\n        return [even_min, min_index]"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pluck(arr):\n    if not arr:\n        return []\n\n    smallest_even = float('inf')\n    smallest_even_idx = -1\n\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            smallest_even_idx = i\n\n    if smallest_even_idx == -1:\n        return []\n\n    return [smallest_even, smallest_even_idx]"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    even_values = []\n    for i, node in enumerate(arr):\n        if node % 2 == 0:\n            even_values.append((node, i))\n\n    if not even_values:\n        return []\n\n    smallest_value, smallest_index = min(even_values)\n    return [smallest_value, smallest_index]"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def search(lst):\n    freq_dict = {}\n    for num in lst:\n        freq_dict[num] = lst.count(num)\n\n    for num in sorted(freq_dict, reverse=True):\n        if num > 0 and freq_dict[num] >= num:\n            return num\n\n    return -1"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def search(lst):\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    for i in range(1, max(lst)+1):\n        if i in freq and freq[i] > i:\n            return i\n    return -1"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def search(lst):\n    freq = {x: lst.count(x) for x in lst}\n    for x in sorted(set(lst), reverse=True):\n        if x > 0 and freq[x] >= x:\n            return x\n    return -1"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def search(lst):\n    freq = {}\n    max_freq = 0\n    for num in lst:\n        if num > 0:\n            freq[num] = freq.get(num, 0) + 1\n            if freq[num] > max_freq:\n                max_freq = freq[num]\n    \n    for num in freq:\n        if num >= max_freq:\n            return num\n    \n    return -1"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def search(lst):\n    max_freq = 0\n    max_num = -1\n    for num in lst:\n        if num > 0:\n            freq = lst.count(num)\n            if freq >= num and freq > max_freq:\n                max_freq = freq\n                max_num = num\n    return max_num if max_num!= -1 else -1"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def search(lst):\n    \"\"\"\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    \"\"\"\n    freq_dict = {}\n    for num in lst:\n        if num > 0:\n            if num not in freq_dict:\n                freq_dict[num] = 1\n            else:\n                freq_dict[num] += 1\n\n    for num in freq_dict:\n        if num >= freq_dict[num]:\n            return num\n    return -1"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def search(lst):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n\n    for num in sorted(lst, reverse=True):\n        if num > 0 and freq[num] >= num:\n            return num\n\n    return -1"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def search(lst):\n    freq = {}\n    for x in lst:\n        if x > 0:\n            freq[x] = freq.get(x, 0) + 1\n    for x in sorted(freq.keys(), reverse=True):\n        if freq[x] >= x:\n            return x\n    return -1"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def search(lst):\n    freq_dict = {}\n    for num in lst:\n        if num > 0:\n            if num not in freq_dict:\n                freq_dict[num] = 1\n            else:\n                freq_dict[num] += 1\n    max_freq = 0\n    max_num = -1\n    for num in freq_dict:\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_num = num\n    if max_num == -1:\n        return -1\n    else:\n        return max_num"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num > 0:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n    for num in freq:\n        if freq[num] >= num:\n            return num\n    return -1"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) <= 1:\n        return lst\n    \n    # Find the minimum value in the list\n    min_val = lst[0]\n    for val in lst[1:]:\n        if val < min_val:\n            min_val = val\n    \n    # Find the index of the minimum value in the list\n    min_idx = lst.index(min_val)\n    \n    # Sort the list in the strange order\n    return [min_val] + strange_sort_list(lst[1:min_idx]) + strange_sort_list(lst[min_idx+1:])"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    \"\"\"\n    if len(lst) <= 1:\n        return lst\n    else:\n        min_val = min(lst)\n        new_lst = [val for val in lst if val!= min_val]\n        max_val = max(new_lst)\n        new_lst.remove(max_val)\n        return [min_val] + strange_sort_list(new_lst) + [max_val]"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if not lst:\n        return []\n\n    sorted_list = []\n    min_val = float('inf')\n\n    for val in lst:\n        if val < min_val:\n            min_val = val\n        elif val == min_val:\n            sorted_list.append(val)\n\n    max_val = float('-inf')\n\n    for val in lst:\n        if val > max_val and val!= min_val:\n            max_val = val\n\n    sorted_list.append(min_val)\n    sorted_list.append(max_val)\n\n    for val in lst:\n        if val!= min_val and val!= max_val:\n            sorted_list.append(val)\n\n    return sorted_list"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return [lst[0]]\n    elif len(lst) == 2:\n        if lst[0] > lst[1]:\n            return [lst[1], lst[0]]\n        else:\n            return [lst[0], lst[1]]\n\n    min_val = lst[0]\n    max_val = lst[0]\n    min_index = 0\n    max_index = 0\n    for i in range(1, len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n            min_index = i\n        elif lst[i] > max_val:\n            max_val = lst[i]\n            max_index = i\n\n    return [min_val] + strange_sort_list(lst[:min_index] + lst[min_index+1:]) + [max_val] + strange_sort_list(lst[:max_index] + lst[max_index+1:])"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    else:\n        min_num = min(lst)\n        max_num = max(lst)\n        lst.remove(min_num)\n        lst.remove(max_num)\n        new_lst = [min_num] + [max_num] + sorted(lst)\n        return new_lst"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    else:\n        min_val = min(lst)\n        max_val = max(lst)\n        mid_val = lst[lst.index(min_val):lst.index(max_val)+1]\n        mid_val.sort()\n        return [min_val] + mid_val + [max_val]"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    sorted_list = []\n    min_val = min(lst)\n    lst.remove(min_val)\n    sorted_list.append(min_val)\n    while lst:\n        max_val = max(lst)\n        lst.remove(max_val)\n        sorted_list.append(max_val)\n        min_val = min(lst)\n        lst.remove(min_val)\n        sorted_list.append(min_val)\n    return sorted_list"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n    min_val = min(lst)\n    max_val = max(lst)\n    new_lst = []\n    for i in range(len(lst)):\n        if lst[i] == min_val:\n            new_lst.append(min_val)\n            lst.remove(min_val)\n            min_val = min(lst)\n        elif lst[i] == max_val:\n            new_lst.append(max_val)\n            lst.remove(max_val)\n            max_val = max(lst)\n    return new_lst"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    \n    sorted_lst = []\n    sorted_lst.append(min(lst))\n    lst.remove(min(lst))\n    sorted_lst.append(max(lst))\n    lst.remove(max(lst))\n    \n    while lst:\n        sorted_lst.append(min(lst))\n        lst.remove(min(lst))\n        sorted_lst.append(max(lst))\n        lst.remove(max(lst))\n    \n    return sorted_lst"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    \n    if len(lst) <= 1:\n        return lst\n    \n    min_val = min(lst)\n    max_val = max(lst)\n    \n    new_lst = []\n    new_lst.extend([min_val])\n    new_lst.extend([num for num in lst if num!= min_val and num!= max_val])\n    new_lst.extend([max_val])\n    \n    return new_lst"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a+b>c and b+c>a and c+a>b:\n        s = (a+b+c)/2\n        area = math.sqrt(s*(s-a)*(s-b)*(s-c))\n        return round(area, 2)\n    else:\n        return -1"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n\n    # Check if the three sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    # Round the area to 2 decimal points\n    area = round(area, 2)\n    \n    return area"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # Check if the three sides form a valid triangle\n    if a + b > c and b + c > a and a + c > b:\n        # Calculate the semi-perimeter of the triangle\n        s = (a + b + c) / 2\n        # Calculate the area of the triangle using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        # Round the area to 2 decimal points\n        area = round(area, 2)\n        return area\n    else:\n        return -1"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a+b > c and b+c > a and c+a > b:\n        s = (a+b+c)/2\n        area = math.sqrt(s*(s-a)*(s-b)*(s-c))\n        return round(area, 2)\n    else:\n        return -1"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n\n    # Check if the sides form a valid triangle\n    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2 # Semi-perimeter\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c)) # Heron's formula\n        return round(area, 2)\n    else:\n        return -1"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a+b>c and b+c>a and c+a>b:\n        s = (a+b+c)/2\n        area = math.sqrt(s*(s-a)*(s-b)*(s-c))\n        return round(area, 2)\n    else:\n        return -1"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(a, b, c):\n    if a+b>c and a+c>b and b+c>a: # check if the sides form a valid triangle\n        s = (a+b+c)/2\n        area = math.sqrt(s*(s-a)*(s-b)*(s-c)) # calculate the area of the triangle\n        return round(area, 2) # round the area to 2 decimal points\n    else:\n        return -1 # if the sides do not form a valid triangle, return -1"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # check if the sides can form a triangle\n    if a + b > c and b + c > a and c + a > b:\n        # calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # calculate the area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        # round the area to 2 decimal points\n        return round(area, 2)\n    else:\n        return -1"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def will_it_fly(q,w):\n    \"\"\"\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    \"\"\"\n\n    # check if the list is balanced\n    if q == q[::-1]:\n        # calculate the sum of the elements in the list\n        sum_elements = sum(q)\n        if sum_elements <= w:\n            # if the sum of elements is less than or equal the maximum possible weight, the object will fly\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def will_it_fly(q,w):\n    \"\"\"\n    Returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    \"\"\"\n    if sum(q) > w:\n        return False\n    return q == q[::-1]"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def will_it_fly(q,w):\n    \"\"\"\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    \"\"\"\n    \n    if len(q) == 1:\n        return q[0] <= w\n    \n    if q == q[::-1]:\n        return sum(q) <= w\n    \n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    \"\"\"\n\n    # Check if q is a palindrome\n    if q == q[::-1]:\n        # Sum of q's elements\n        sum_q = sum(q)\n        if sum_q <= w:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    \"\"\"\n    \n    # checking if the list is a palindrome\n    def is_palindrome(lst):\n        return lst == lst[::-1]\n    \n    # checking if the sum of elements of the list is less than or equal to the maximum possible weight\n    def sum_of_elements(lst):\n        return sum(lst) <= w\n    \n    # checking if the list will fly\n    if is_palindrome(q) and sum_of_elements(q):\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def will_it_fly(q, w):\n    # Check if the list is balanced\n    if q == q[::-1]:\n        # Calculate the sum of the list\n        s = sum(q)\n        # Check if the sum is less than or equal to w\n        if s <= w:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def will_it_fly(q,w):\n    q = [str(i) for i in q]\n    if q == q[::-1] and sum(int(i) for i in q) <= w:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def will_it_fly(q,w):\n    \"\"\"\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) > w or sum(q) == w:\n        return False\n    if q == q[::-1]:\n        return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    \"\"\"\n\n    # check if q is palindromic\n    def is_palindrome(lst):\n        return lst == lst[::-1]\n\n    # check if sum of elements in q is less than or equal to w\n    def sum_of_elements(lst):\n        return sum(lst) <= w\n\n    # check if q will fly\n    if is_palindrome(q) and sum_of_elements(q):\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # Check if q is a palindrome\n    if q == q[::-1]:\n        # Check if sum of q is less than or equal to w\n        if sum(q) <= w:\n            return True\n    return False"
    },
    {
        "number": 73,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i]!= arr[n-i-1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 73,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i]!= arr[n - i - 1]:\n            count += 1\n    return count"
    },
    {
        "number": 73,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i]!= arr[n-i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 73,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 73,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    # Initialize a dictionary to store the count of each element\n    count = {}\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n\n    # Initialize a variable to keep track of the minimum number of changes\n    min_changes = 0\n\n    # Iterate through the dictionary and count the number of elements that have odd counts\n    odd_count = 0\n    for i in count:\n        if count[i] % 2!= 0:\n            odd_count += 1\n\n    # If there are no elements with odd counts, there are no changes required\n    if odd_count == 0:\n        return 0\n\n    # Calculate the minimum number of changes required for each element with odd counts\n    for i in count:\n        if count[i] % 2!= 0:\n            min_changes += count[i]\n\n    # Return the minimum number of changes required\n    return min_changes // 2\n"
    },
    {
        "number": 73,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    count = 0\n    \n    # find the center of the array\n    center = n // 2\n    \n    # check the left half of the array\n    i = 0\n    j = center - 1\n    while i < center and j >= 0:\n        if arr[i]!= arr[j]:\n            count += 1\n        i += 1\n        j -= 1\n        \n    # check the right half of the array\n    i = center + 1\n    j = n - 1\n    while i < n and j >= center:\n        if arr[i]!= arr[j]:\n            count += 1\n        i += 1\n        j -= 1\n        \n    return count"
    },
    {
        "number": 73,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    count = 0\n    \n    # If array is already palindromic, return 0\n    if arr == arr[::-1]:\n        return 0\n    \n    # Count the number of elements that need to be changed to make the array palindromic\n    for i in range(n):\n        if arr[i]!= arr[n-1-i]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 73,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    count = 0\n    \n    # Check if the array is already palindromic\n    for i in range(n // 2):\n        if arr[i]!= arr[n - i - 1]:\n            break\n    else:\n        return 0\n    \n    # Find the minimum number of elements to be changed to make the array palindromic\n    for i in range(n // 2):\n        if arr[i]!= arr[n - i - 1]:\n            if arr[i] < arr[n - i - 1]:\n                arr[i], arr[n - i - 1] = arr[n - i - 1], arr[i]\n                count += 1\n            else:\n                j = i + 1\n                while j < n - i - 1 and arr[j] == arr[n - i - 1]:\n                    j += 1\n                arr[i + 1], arr[j - 1] = arr[j - 1], arr[i + 1]\n                count += 1\n    \n    return count"
    },
    {
        "number": 73,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i]!= arr[n-i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 73,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def smallest_change(arr):\n    n = len(arr)\n    # count the number of inversions in arr\n    # inversion: i < j but arr[i] > arr[j]\n    inversions = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inversions += 1\n    # if n is odd, we need to add n/2 inversions\n    # if n is even, we need to add n/2 inversions - 1\n    if n % 2 == 1:\n        inversions += n // 2\n    else:\n        inversions += n // 2 - 1\n    return inversions"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n\n    if len(lst1) == 0 and len(lst2) == 0:\n        return []\n\n    if len(lst1) == 0 or len(lst2) == 0:\n        return lst1 if len(lst1) > len(lst2) else lst2\n\n    # Find the string with fewer total chars\n    if sum(len(s) for s in lst1) < sum(len(s) for s in lst2):\n        return lst1\n    elif sum(len(s) for s in lst1) > sum(len(s) for s in lst2):\n        return lst2\n    else:\n        return lst1 if lst1[0] < lst2[0] else lst2"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n    # Check if both lists are empty\n    if not lst1 and not lst2:\n        return []\n\n    # Check if either list is empty\n    if not lst1:\n        return lst2\n    if not lst2:\n        return lst1\n\n    # Sort both lists\n    lst1.sort(key=len)\n    lst2.sort(key=len)\n\n    # Check if the two lists have the same number of chars\n    if len(lst1) == len(lst2):\n        return lst1\n\n    # Return the list with total number of chars in the all strings of the list less than the other list\n    if sum(map(len, lst1)) <= sum(map(len, lst2)):\n        return lst1\n    else:\n        return lst2"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def total_match(lst1, lst2):\n    \"\"\"\n    This function accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    If the two lists have the same number of chars, return the first list.\n    \"\"\"\n    # If one of the lists is empty, return the other list\n    if not lst1:\n        return lst2\n    elif not lst2:\n        return lst1\n    \n    # Calculate the length of each list\n    len1 = sum(len(s) for s in lst1)\n    len2 = sum(len(s) for s in lst2)\n    \n    # Check if the two lists have the same number of chars\n    if len1 == len2:\n        return lst1\n    \n    # Return the list that has total number of chars in the all strings of the list less than the other list.\n    return lst1 if len1 < len2 else lst2"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def total_match(lst1, lst2):\n    if len(lst1) == 0 or len(lst2) == 0:\n        return []\n    if len(lst1) > len(lst2):\n        return lst1\n    if len(lst1) < len(lst2):\n        return lst2\n    total_chars1 = sum(len(x) for x in lst1)\n    total_chars2 = sum(len(x) for x in lst2)\n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars1 > total_chars2:\n        return lst2\n    else:\n        return lst1"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def total_match(lst1, lst2):\n    # Initialize a variable to store the minimum length of the strings\n    min_len = min(len(str) for str in lst1 + lst2)\n\n    # Filter the lists to keep only those strings with the minimum length\n    filtered_lst1 = list(filter(lambda x: len(x) == min_len, lst1))\n    filtered_lst2 = list(filter(lambda x: len(x) == min_len, lst2))\n\n    # If the filtered lists are empty, return an empty list\n    if not filtered_lst1 or not filtered_lst2:\n        return []\n\n    # Initialize variables to store the total length of the strings in the two lists\n    total_len_lst1 = sum(len(str) for str in filtered_lst1)\n    total_len_lst2 = sum(len(str) for str in filtered_lst2)\n\n    # Compare the total lengths of the two filtered lists\n    if total_len_lst1 < total_len_lst2:\n        return filtered_lst1\n    elif total_len_lst2 < total_len_lst1:\n        return filtered_lst2\n    else:\n        # If the lengths are equal, return the first list\n        return lst1"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def total_match(lst1, lst2):\n    \"\"\"\n    This function accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n    \n    If the two lists have the same number of chars, return the first list.\n    \n    Examples\n    >>> total_match([], [])\n    []\n    >>> total_match(['hi', 'admin'], ['hI', 'Hi'])\n    ['hI', 'Hi']\n    >>> total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ['hi', 'admin']\n    >>> total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\n    ['hI', 'hi', 'hi']\n    >>> total_match(['4'], ['1', '2', '3', '4', '5'])\n    ['4']\n    \"\"\"\n\n    # check if the two lists have the same length\n    if len(lst1) == len(lst2):\n        return lst1\n    \n    # initialize variables to keep track of the minimum length and the list with minimum length\n    min_len = min(len(lst1), len(lst2))\n    min_list = lst1 if len(lst1) < len(lst2) else lst2\n    \n    # loop through the minimum length list and check if each string is a substring of the other list\n    for i in range(min_len):\n        if lst1[i] in lst2 or lst2[i] in lst1:\n            continue\n        else:\n            min_list = lst1 if len(lst1) < len(lst2) else lst2\n            break\n    \n    return min_list"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    \n    # checking if either list is empty\n    if len(lst1) == 0 or len(lst2) == 0:\n        return []\n    \n    # checking the total number of chars in each list and selecting the list with lesser chars\n    if sum(len(s) for s in lst1) < sum(len(s) for s in lst2):\n        return lst1\n    elif sum(len(s) for s in lst1) > sum(len(s) for s in lst2):\n        return lst2\n    else:\n        return lst1"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n    # Initialize variables to store the number of chars in the list and the current list\n    num_chars_lst1 = sum(len(word) for word in lst1)\n    num_chars_lst2 = sum(len(word) for word in lst2)\n    curr_list = lst1\n    \n    # Check if the two lists have the same number of chars\n    if num_chars_lst1 == num_chars_lst2:\n        return lst1\n    \n    # Check which list has more chars in the strings and return it\n    if num_chars_lst1 < num_chars_lst2:\n        return lst2\n    else:\n        return lst1"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    if len(lst1) > len(lst2):\n        return lst1\n    elif len(lst2) > len(lst1):\n        return lst2\n    else:\n        return lst1\n"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def total_match(lst1, lst2):\n    if len(lst1) > len(lst2):\n        lst1, lst2 = lst2, lst1\n    \n    total_chars = sum(len(s) for s in lst1)\n    other_total_chars = sum(len(s) for s in lst2)\n    if total_chars < other_total_chars:\n        return lst1\n    elif total_chars == other_total_chars:\n        return lst1 if lst1!= lst2 else []\n    else:\n        return lst2"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    # Function to check if a number is prime or not\n    def is_prime(num):\n        if num == 1:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Check if the given number is a prime number or not\n    if is_prime(a):\n        return False\n\n    # Check for the number of prime factors of a and b\n    count = 0\n    for i in range(2, int(a**0.5)+1):\n        if a % i == 0:\n            if is_prime(i) and is_prime(a//i):\n                count += 1\n                if count == 3:\n                    return True\n\n    return False"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is a prime number, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and is_prime(a // i):\n            count += 1\n            if count == 3:\n                return True\n        if count == 3:\n            break\n    return False"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] # List of prime numbers less than 100\n    count = 0 # Keep track of the number of prime factors found\n    \n    # Check if each prime number is a factor of a\n    for prime in primes:\n        while a % prime == 0:\n            count += 1 # Increment the count of prime factors found\n            a /= prime # Divide a by the prime factor\n            \n        # If there are 3 prime factors found, return True\n        if count == 3:\n            return True\n            \n        count = 0 # Reset the count for the next prime factor\n        \n    # If no 3 prime factors found, return False\n    return False"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        return False\n    elif a == 100 or a == 150 or a == 200 or a == 250 or a == 300:\n        return True\n    else:\n        primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n        factors = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n        for i in range(1, len(factors)):\n            if a == primes[i] * primes[i + 1] * primes[i + 2]:\n                return True\n            for j in range(i + 1, len(factors)):\n                if a == primes[i] * primes[j] * primes[j + 1]:\n                    return True\n                for k in range(j + 1, len(factors)):\n                    if a == primes[i] * primes[j] * primes[k]:\n                        return True\n        return False"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            for k in range(j + 1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    \n    if a < 2:\n        return False\n    \n    if a == 2 or a == 3:\n        return True\n    \n    if a % 2 == 0 or a % 3 == 0:\n        return False\n    \n    i = 5\n    while i <= a:\n        if a % i == 0 or a % (i + 2) == 0:\n            return False\n        i += 6\n    \n    return True"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    \"\"\"Check if a number is the multiplication of 3 prime numbers\"\"\"\n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n            if count == 3:\n                return True\n    return False"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    \n    # Define the function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Check if a is a multiple of 3 prime numbers\n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and is_prime(a//i) and is_prime(a/(i*a//i)):\n            count += 1\n        if count == 3:\n            return True\n    return False"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    def is_prime(n):\n        \"\"\"Helper function to check if a number is prime.\"\"\"\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # check if a is divisible by 3 or not\n    if a % 3!= 0:\n        return False\n\n    # check if there are 3 prime numbers in the range of 1 to a-1\n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and is_prime(a // i):\n            count += 1\n            if count == 3:\n                return True\n\n    # if we reach here, then no 3 prime numbers were found\n    return False"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a == 3 or a == 5 or a == 7 or a == 11 or a == 13 or a == 17 or a == 19 or a == 23 or a == 29:\n        return True\n    if a % 2 == 0 or a % 3 == 0 or a % 5 == 0 or a % 7 == 0 or a % 11 == 0 or a % 13 == 0 or a % 17 == 0 or a % 19 == 0 or a % 23 == 0 or a % 29 == 0:\n        return False\n    for i in range(10, 29):\n        if a % i == 0:\n            return False\n    return True"
    },
    {
        "number": 76,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Returns true if a number x is a simple power of n and false in other cases.\"\"\"\n    if n <= 1:\n        return False\n    if x == 1:\n        return True\n    if x % n == 0:\n        return is_simple_power(x / n, n)\n    return False"
    },
    {
        "number": 76,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int(log(x)/log(n))=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    import math\n    if x == 1 and n!= 0:\n        return False\n    return n ** int(math.log(x)/math.log(n)) == x"
    },
    {
        "number": 76,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int(log(x, n))=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return n**int(round(math.log(x, n), 0)) == x"
    },
    {
        "number": 76,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int(log(x, n))=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == 0:\n        return False\n    log_x_n = int(round(math.log(x, n)))\n    return n**log_x_n == x"
    },
    {
        "number": 76,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int(log(x, n))=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == 1 or x == n:\n        return True\n    elif x < n:\n        return False\n    else:\n        return x == n**int(x/n)\n\nprint(is_simple_power(1, 4))  # Output: True\nprint(is_simple_power(2, 2))  # Output: True\nprint(is_simple_power(8, 2))  # Output: True\nprint(is_simple_power(3, 2))  # Output: False\nprint(is_simple_power(3, 1))  # Output: False\nprint(is_simple_power(5, 3))  # Output: False"
    },
    {
        "number": 76,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_simple_power(x, n):\n    \"\"\"\n    Returns True if x is a simple power of n, and False otherwise.\n    \"\"\"\n    if x == 1:\n        return True\n    elif x == n:\n        return True\n    elif n ** int(x/n) == x:\n        return True\n    else:\n        return False"
    },
    {
        "number": 76,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int(log(x)/log(n))=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == 1:\n        return False\n    elif n == 1:\n        return True\n    else:\n        if x % n == 0:\n            return is_simple_power(x/n, n)\n        else:\n            return False"
    },
    {
        "number": 76,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Returns true if x is a simple power of n, false otherwise.\"\"\"\n    if n == 0:  # handle special case of n=0\n        return x == 1\n    else:\n        return x % n == 0 and x // n**int(x**0.5) ** n == 1"
    },
    {
        "number": 76,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int(log(x, n))=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == 1:\n        return False\n    elif x % n == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 76,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if n <= 1:\n        return False\n    return n**int(x/n) == x"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def iscube(a):\n    '''\n    This function takes an integer a and returns True if a is a cube of some integer number.\n    Note: the input is always valid.\n    '''\n    return int(a ** (1/3)) ** 3 == a"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    return a**3 % a == 0"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def iscube(a):\n    # We need to find the cube root of a, and check if it is an integer\n    root = int(a ** 0.3333333333333333)\n    return a == root ** 3"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def iscube(a):\n    if a == 0:\n        return True\n    for i in range(1, int(a**0.5) + 1):\n        if a == i**3:\n            return True\n    return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    cube = int(a**(1/3))\n    return cube**3 == a"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def iscube(a):\n    if a == 0:\n        return True\n    else:\n        root = int(a ** (1/3))\n        return a == root**3"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    cube_root = int(a**(1/3))\n    return a == cube_root**3\n"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    # Convert the integer to a string to check if it ends with \"0\" (which indicates a perfect cube)\n    return str(a)[-1] == \"0\" and int(str(a)[:-1])**3 == a"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    return a**3 == abs(a)**3"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    cube_root = int(a**(1/3))\n    return cube_root**3 == a"
    },
    {
        "number": 78,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_prime(num):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    \"\"\"Count the number of hexadecimal digits that are primes\"\"\"\n    count = 0\n    for digit in num:\n        if digit in '0123456789ABCDEF':\n            if is_prime(int(digit, 16)):\n                count += 1\n    return count"
    },
    {
        "number": 78,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_prime(n):\n    \"\"\"Checks if a given number is prime.\"\"\"\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True\n\ndef hex_key(num):\n    \"\"\"Counts the number of hexadecimal digits that are primes.\"\"\"\n    count = 0\n    for char in num:\n        if is_prime(int(char, 16)):\n            count += 1\n    return count"
    },
    {
        "number": 78,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_prime(num):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    \"\"\"Function to count the number of primes in a hexadecimal number\"\"\"\n    count = 0\n    for digit in num:\n        if digit in ['2', '3', '5', '7', 'B', 'D']:\n            if is_prime(int(digit, 16)):\n                count += 1\n    return count"
    },
    {
        "number": 78,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def hex_key(num):\n    count = 0\n    for digit in num:\n        if digit in \"02468ACE\":\n            count += 1\n        elif digit == \"B\":\n            count += 2\n        elif digit == \"D\":\n            count += 3\n    return count"
    },
    {
        "number": 78,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    count = 0\n    for digit in num:\n        if digit in \"0123456789ABCDEF\":\n            if is_prime(int(digit, 16)):\n                count += 1\n    return count"
    },
    {
        "number": 78,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def hex_key(num):\n    \"\"\"\n    You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes.\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    \"\"\"\n    prime_count = 0\n    for digit in num:\n        if digit in ['2', '3', '5', '7', 'B', 'D']:\n            prime_count += 1\n    return prime_count"
    },
    {
        "number": 78,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_prime(n):\n    \"\"\"Returns True if n is prime, False otherwise\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    \"\"\"Returns the count of hexadecimal digits that are primes\"\"\"\n    count = 0\n    for digit in num:\n        if is_prime(int(digit, 16)):\n            count += 1\n    return count"
    },
    {
        "number": 78,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Convert the hexadecimal number to a string of decimal numbers\n    dec = int(num, 16)\n    \n    # Initialize the count of primes to 0\n    count = 0\n    \n    # Loop through the hexadecimal digits from the right\n    for digit in num[::-1]:\n        # Convert the digit to decimal\n        dec_digit = int(digit, 16)\n        \n        # Check if the digit is a prime number\n        if dec_digit in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]:\n            # Increment the count of primes\n            count += 1\n    \n    # Return the count of primes\n    return count"
    },
    {
        "number": 78,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_prime(num):\n    \"\"\"Function to check if a number is prime\"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef hex_key(num):\n    \"\"\"Function to count the number of prime hexadecimal digits\"\"\"\n    count = 0\n    for char in num:\n        if is_prime(int(char, 16)):\n            if char in ['2', '3', '5', '7', 'B', 'D']:\n                count += 1\n    return count"
    },
    {
        "number": 78,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    count = 0\n    for char in num:\n        if is_prime(int(char, 16)):\n            count += 1\n    return count"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    binary = \"db\" + binary + \"db\"\n    return binary"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\n    binary = bin(decimal)[2:]  # bin() method converts decimal to binary and returns a string starting with \"0b\". So we remove the first 2 characters using slicing.\n    return 'db' + binary + 'db'  # add 'db' at the beginning and end of the string."
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\n    binary_string = bin(decimal)[2:]\n    return \"db\" + binary_string + \"db\""
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        remainder = decimal % 2\n        binary = str(remainder) + binary\n        decimal = decimal // 2\n    \n    binary = \"db\" + binary + \"db\"\n    return binary"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = bin(decimal)[2:]  # convert decimal to binary using built-in bin() function\n    binary = 'db' + binary + 'db'  # add extra characters 'db' at the beginning and end of the string\n    return binary"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\n    # Convert decimal to binary\n    binary = bin(decimal)[2:]\n\n    # Add 'db' to the beginning and end of the binary string\n    binary = 'db' + binary + 'db'\n\n    return binary"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\n    # Convert decimal to binary and store in a string\n    binary_string = bin(decimal)[2:]\n\n    # Add 'db' to the beginning and end of the string\n    binary_string = 'db' + binary_string + 'db'\n\n    return binary_string"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"Converts a decimal number to binary format.\"\"\"\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # convert decimal to binary and return as string\n    binary = bin(decimal)[2:]  # remove '0b' prefix\n    return \"db\" + binary + \"db\"\n"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    \n    seen = set()\n    for i in range(len(s)-2):\n        if s[i:i+3] in seen:\n            return False\n        seen.add(s[i:i+3])\n    \n    return True"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    \n    # Check if length of the string is at least 3\n    if len(s) < 3:\n        return False\n    \n    # Check if every 3 consecutive letters are distinct\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    \n    # If both conditions are satisfied, return True\n    return True"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    s_set = set(s)\n    while len(s) >= 3:\n        s = ''.join(s_set)\n        if s == '___':\n            return True\n        s_set = set(s)\n    return False"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n\n    seen = set()\n    for i in range(len(s) - 2):\n        if s[i:i+3] in seen:\n            return False\n        seen.add(s[i:i+3])\n\n    return True"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s)-2):\n        if s[i:i+3] in s[i+3:]:\n            return False\n\n    return True"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    \n    # Return False if the length of the string is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Convert the string to a set of distinct letters\n    set_s = set(s)\n    \n    # Loop through the string and check if every 3 consecutive letters are distinct\n    for i in range(2, len(s)):\n        if s[i-2:i+1] in set_s:\n            return False\n    \n    # If we reach here, the string is happy\n    return True"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    prev = ''\n    for i in range(0, len(s), 3):\n        curr = s[i:i+3]\n        if curr == prev or curr in s:\n            return False\n        prev = curr\n    return True"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s)-2):\n        if s[i:i+3] in s[i+1:]:\n            return False\n        \n    return True"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_happy(s):\n    if len(s) < 3:  # check if string is at least length 3\n        return False\n    \n    seen = set()  # keep track of seen characters\n    for i in range(0, len(s), 3):  # iterate over every 3rd character\n        window = s[i:i+3]  # get the next 3 characters\n        if window in seen:  # if the window is seen before, return False\n            return False\n        seen.add(window)  # add the window to seen set\n        \n    return True  # if no repeated windows, return True"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    \n    # Check if string length is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Create a set to store the last three characters of the string\n    last_three = set()\n    \n    # Loop through the string\n    for i in range(len(s)):\n        \n        # If the current character is not a letter, skip it\n        if not s[i].isalpha():\n            continue\n        \n        # Get the last three characters of the string\n        last_three.add(s[i-2:i+1])\n        \n        # Check if the current set of last three characters contains any repeating letters\n        if len(last_three)!= len(s):\n            return False\n    \n    return True"
    },
    {
        "number": 81,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n                 GPA       |   Letter grade\n                  4.0          A+\n                > 3.7          A \n                 > 3.3         A- \n                 > 3.0         B+\n                 > 2.7         B \n                 > 2.3         B-\n                 > 2.0         C+\n                 > 1.7         C\n                 > 1.3         C-\n                 > 1.0         D+ \n                 > 0.7         D \n                 > 0.0         D-\n                  0.0          E\n    \n    Example:\n    numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for g in grades:\n        if g >= 4.0:\n            letter_grades.append(\"A+\")\n        elif g >= 3.7:\n            letter_grades.append(\"A\")\n        elif g >= 3.3:\n            letter_grades.append(\"A-\")\n        elif g >= 3.0:\n            letter_grades.append(\"B+\")\n        elif g >= 2.7:\n            letter_grades.append(\"B\")\n        elif g >= 2.3:\n            letter_grades.append(\"B-\")\n        elif g >= 2.0:\n            letter_grades.append(\"C+\")\n        elif g >= 1.7:\n            letter_grades.append(\"C\")\n        elif g >= 1.3:\n            letter_grades.append(\"C-\")\n        elif g >= 1.0:\n            letter_grades.append(\"D+\")\n        elif g >= 0.7:\n            letter_grades.append(\"D\")\n        elif g >= 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n    return letter_grades"
    },
    {
        "number": 81,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n                 GPA       |    Letter grade\n                  4.0                A+\n                > 3.7                A \n                > 3.3                A- \n                > 3.0                B+\n                > 2.7                B \n                > 2.3                B-\n                > 2.0                C+\n                > 1.7                C\n                > 1.3                C-\n                > 1.0                D+ \n                > 0.7                D \n                > 0.0                D-\n                  0.0                E\n    \n\n    Example:\n    numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades"
    },
    {
        "number": 81,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n         > 3.3                A- \n         > 3.0                B+\n         > 2.7                B \n         > 2.3                B-\n         > 2.0                C+\n         > 1.7                C\n         > 1.3                C-\n         > 1.0                D+ \n         > 0.7                D \n         > 0.0                D-\n              0.0                E\n   \n   \n    Example:\n    numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for g in grades:\n        if g >= 4.0:\n            letter_grades.append('A+')\n        elif g >= 3.7:\n            letter_grades.append('A')\n        elif g >= 3.3:\n            letter_grades.append('A-')\n        elif g >= 3.0:\n            letter_grades.append('B+')\n        elif g >= 2.7:\n            letter_grades.append('B')\n        elif g >= 2.3:\n            letter_grades.append('B-')\n        elif g >= 2.0:\n            letter_grades.append('C+')\n        elif g >= 1.7:\n            letter_grades.append('C')\n        elif g >= 1.3:\n            letter_grades.append('C-')\n        elif g >= 1.0:\n            letter_grades.append('D+')\n        elif g >= 0.7:\n            letter_grades.append('D')\n        elif g >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"
    },
    {
        "number": 81,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n         > 3.3                A- \n         > 3.0                B+\n         > 2.7                B \n         > 2.3                B-\n         > 2.0                C+\n         > 1.7                C\n         > 1.3                C-\n         > 1.0                D+ \n         > 0.7                D \n         > 0.0                D-\n              0.0                E\n     \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append(\"A+\")\n        elif grade >= 3.7:\n            letter_grades.append(\"A\")\n        elif grade >= 3.3:\n            letter_grades.append(\"A-\")\n        elif grade >= 3.0:\n            letter_grades.append(\"B+\")\n        elif grade >= 2.7:\n            letter_grades.append(\"B\")\n        elif grade >= 2.3:\n            letter_grades.append(\"B-\")\n        elif grade >= 2.0:\n            letter_grades.append(\"C+\")\n        elif grade >= 1.7:\n            letter_grades.append(\"C\")\n        elif grade >= 1.3:\n            letter_grades.append(\"C-\")\n        elif grade >= 1.0:\n            letter_grades.append(\"D+\")\n        elif grade >= 0.7:\n            letter_grades.append(\"D\")\n        elif grade >= 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n    return letter_grades"
    },
    {
        "number": 81,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n         > 3.3                A- \n         > 3.0                B+\n         > 2.7                B \n         > 2.3                B-\n         > 2.0                C+\n         > 1.7                C\n         > 1.3                C-\n         > 1.0                D+ \n         > 0.7                D \n         > 0.0                D-\n              0.0                E\n    \"\"\"\n\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append(\"A+\")\n        elif grade >= 3.7:\n            letter_grades.append(\"A\")\n        elif grade >= 3.3:\n            letter_grades.append(\"A-\")\n        elif grade >= 3.0:\n            letter_grades.append(\"B+\")\n        elif grade >= 2.7:\n            letter_grades.append(\"B\")\n        elif grade >= 2.3:\n            letter_grades.append(\"B-\")\n        elif grade >= 2.0:\n            letter_grades.append(\"C+\")\n        elif grade >= 1.7:\n            letter_grades.append(\"C\")\n        elif grade >= 1.3:\n            letter_grades.append(\"C-\")\n        elif grade >= 1.0:\n            letter_grades.append(\"D+\")\n        elif grade >= 0.7:\n            letter_grades.append(\"D\")\n        elif grade >= 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n\n    return letter_grades"
    },
    {
        "number": 81,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n         > 3.3                A- \n         > 3.0                B+\n         > 2.7                B \n         > 2.3                B-\n         > 2.0                C+\n         > 1.7                C\n         > 1.3                C-\n         > 1.0                D+ \n         > 0.7                D \n         > 0.0                D-\n              0.0                E\n    \"\"\"\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"
    },
    {
        "number": 81,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n         > 3.3                A- \n         > 3.0                B+\n         > 2.7                B \n         > 2.3                B-\n         > 2.0                C+\n         > 1.7                C\n         > 1.3                C-\n         > 1.0                D+ \n         > 0.7                D \n         > 0.0                D-\n              0.0                E\n    \n    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    \n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    \n    return letter_grades"
    },
    {
        "number": 81,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n         > 3.3                A- \n         > 3.0                B+\n         > 2.7                B \n         > 2.3                B-\n         > 2.0                C+\n         > 1.7                C\n         > 1.3                C-\n         > 1.0                D+ \n         > 0.7                D \n         > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"
    },
    {
        "number": 81,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n\n             GPA       |       Letter grade\n                  4.0                  A+\n                > 3.7                  A \n                > 3.3                  A- \n                > 3.0                  B+\n                > 2.7                  B \n                > 2.3                  B-\n                > 2.0                  C+\n                > 1.7                  C\n                > 1.3                  C-\n                > 1.0                  D+ \n                > 0.7                  D \n                > 0.0                  D-\n                  0.0                  E\n    \n\n    Example:\n    numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"
    },
    {
        "number": 81,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n                 GPA       |   Letter grade\n                    4.0          A+\n                  > 3.7          A \n                  > 3.3          A- \n                  > 3.0          B+\n                  > 2.7          B \n                  > 2.3          B-\n                  > 2.0          C+\n                  > 1.7          C\n                  > 1.3          C-\n                  > 1.0          D+ \n                  > 0.7          D \n                  > 0.0          D-\n                    0.0          E\n    \n\n    Example:\n    numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n    letter_grades = []\n\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append(\"A+\")\n        elif grade >= 3.7:\n            letter_grades.append(\"A\")\n        elif grade >= 3.3:\n            letter_grades.append(\"A-\")\n        elif grade >= 3.0:\n            letter_grades.append(\"B+\")\n        elif grade >= 2.7:\n            letter_grades.append(\"B\")\n        elif grade >= 2.3:\n            letter_grades.append(\"B-\")\n        elif grade >= 2.0:\n            letter_grades.append(\"C+\")\n        elif grade >= 1.7:\n            letter_grades.append(\"C\")\n        elif grade >= 1.3:\n            letter_grades.append(\"C-\")\n        elif grade >= 1.0:\n            letter_grades.append(\"D+\")\n        elif grade >= 0.7:\n            letter_grades.append(\"D\")\n        else:\n            letter_grades.append(\"D-\")\n\n    return letter_grades"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\"\"\"\n    length = len(string)\n    if length <= 1:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    \"\"\"\n    if len(string) == 1:\n        return True\n\n    for i in range(2, int(len(string)**0.5)+1):\n        if len(string) % i == 0:\n            return False\n\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_prime(n):\n    \"\"\"Returns True if n is prime, False otherwise\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Returns True if the length of the string is a prime number, False otherwise\"\"\"\n    length = len(string)\n    return is_prime(length)"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is prime, False otherwise\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\"\"\"\n    return is_prime(len(string))"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\"\"\"\n    if is_prime(len(string)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\"\"\"\n    # Get the length of the string\n    length = len(string)\n    # Check if the length is 2 or 3 (since 2 and 3 are prime)\n    if length == 2 or length == 3:\n        return True\n    # Check if the length is even or odd\n    if length % 2 == 0 or length % 3 == 0:\n        return False\n    # Check if the length is divisible by any number up to the square root of the length\n    for i in range(5, int(length ** 0.5) + 1, 6):\n        if length % i == 0 or length % (i + 2) == 0:\n            return False\n    # If none of the above conditions are met, the length is a prime number\n    return True"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_prime(n):\n    \"\"\"\n    Check if a number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    return is_prime(len(string))"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\"\"\"\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\"\"\"\n    return is_prime(len(string))"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is prime, False otherwise\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\"\"\"\n    if is_prime(len(string)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, 10**(n-1)):\n        if i % 10 == 1 or i // 10**(n-1) % 10 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if i % 10 == 1 or i // 10**(n-1) % 10 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, 10**(n-1)):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if i%10 == 1 or i//10**n == 1:\n            count += 1\n    return count"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10**n):\n        if i % 10 == 1 or i // 10**n % 10 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if i % 10 == 1 or i // 10**(n-1) % 10 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, 10**n):\n        s = str(i)\n        if s[0] == '1' or s[-1] == '1':\n            count += 1\n    return count"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10**n):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Convert the given number into binary format using the built-in function.\n    binary = bin(N)[2:]\n    # Initialize the sum variable to 0.\n    sum_of_digits = 0\n    # Iterate over each character in the binary number and add its integer value to the sum.\n    for digit in binary:\n        sum_of_digits += int(digit)\n    # Return the sum as a string of binary number.\n    return bin(sum_of_digits)[2:]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    # Convert N to binary\n    binary = bin(N)[2:]\n\n    # Initialize sum to zero\n    sum = 0\n\n    # Loop through each digit in binary\n    for digit in binary:\n        # Add the current digit to the sum\n        sum += int(digit)\n\n    # Return the sum as a string\n    return str(sum)"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binary_sum = 0\n    while N > 0:\n        binary_sum += N % 2\n        N //= 2\n    return bin(binary_sum)[2:]\n"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # convert the integer to binary and split it into digits\n    binary = bin(N)[2:]\n    # initialize the sum of digits to 0\n    digit_sum = 0\n    # iterate through each digit in the binary string\n    for digit in binary:\n        # convert the digit back to an integer and add it to the sum\n        digit_sum += int(digit)\n    # return the sum of digits as a binary string\n    return bin(digit_sum)[2:]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Convert N to binary string\n    binary = bin(N)[2:]\n    \n    # Convert the binary string to a list of digits\n    digits = [int(digit) for digit in binary]\n    \n    # Compute the sum of digits\n    sum_of_digits = sum(digits)\n    \n    # Convert the sum of digits to a binary string\n    binary_sum = bin(sum_of_digits)[2:]\n    \n    # Pad the binary string with leading zeros if necessary\n    if len(binary_sum) < len(binary):\n        binary_sum = '0' * (len(binary) - len(binary_sum)) + binary_sum\n    \n    # Return the binary string\n    return binary_sum"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binary_digits = bin(N)[2:]\n    sum_of_digits = sum([int(digit) for digit in binary_digits])\n    return str(sum_of_digits)"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    # Convert the given integer to binary string and remove the prefix '0b'\n    binary = bin(N)[2:]\n\n    # Initialize the sum of digits to 0\n    digit_sum = 0\n\n    # Iterate over each digit in the binary string and add its value to digit_sum\n    for digit in binary:\n        digit_sum += int(digit)\n\n    # Return the binary string representing digit_sum\n    return bin(digit_sum)[2:]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    binary_sum = 0\n    while N > 0:\n        binary_sum += N % 2\n        N //= 2\n    return bin(binary_sum)[2:]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # convert decimal number to binary string\n    binary_str = bin(N)[2:]\n    \n    # initialize sum of digits to zero\n    digit_sum = 0\n    \n    # iterate through each digit in the binary string\n    for digit in binary_str:\n        # add the integer value of the digit to the sum\n        digit_sum += int(digit)\n    \n    # return the sum of digits as a binary string\n    return bin(digit_sum)[2:]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    # Convert the number to binary string and remove the prefix '0b'\n    binary = bin(N)[2:]\n    # Calculate the sum of digits\n    sum_of_digits = sum(int(digit) for digit in binary)\n    # Convert the sum to binary string and remove the prefix '0b'\n    binary_sum = bin(sum_of_digits)[2:]\n    # Pad the binary string with zeros to make it the same length as the original binary string\n    padded_binary_sum = binary_sum.rjust(len(binary), '0')\n    # Return the padded binary string as a string\n    return padded_binary_sum"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\n    \n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    even_indices = [i for i in range(len(lst)) if i % 2 == 0]\n    even_at_odd_indices = [lst[i] for i in even_indices if i % 2!= 0]\n    return sum(even_at_odd_indices)"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\"\"\"\n    result = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            result += lst[i]\n    return result"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    even_list = []\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            even_list.append(lst[i])\n    return sum(even_list)"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n    \n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    even_indices = [i for i in range(len(lst)) if lst[i] % 2 == 0 and i % 2!= 0]\n    return sum(lst[i] for i in even_indices)"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    result = 0\n    for i in range(len(lst)):\n        if i % 2!= 0 and lst[i] % 2 == 0:\n            result += lst[i]\n    return result"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\n    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i] % 2 == 0:\n            total += lst[i]\n\n    return total"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Args:\n    lst: a non-empty list of integers\n\n    Returns:\n    an integer\n\n    Examples:\n    add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    even_lst = [lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2!= 0]\n    return sum(even_lst)"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    result = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            result += lst[i]\n    return result"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    result = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            result += lst[i]\n    return result"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def anti_shuffle(s):\n    words = s.split()\n    new_words = []\n    for word in words:\n        new_word = ''.join(sorted(word))\n        new_words.append(new_word)\n    return''.join(new_words)"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def anti_shuffle(s):\n    words = s.split()\n    new_words = []\n    for word in words:\n        new_word = ''.join(sorted(word))\n        new_words.append(new_word)\n    return''.join(new_words)"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def anti_shuffle(s):\n    words = s.split()\n    sorted_words = [\"\".join(sorted(word)) for word in words]\n    return \" \".join(sorted_words)"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n    words = s.split()\n    new_words = []\n    for word in words:\n        new_word = ''\n        for char in word:\n            new_word += chr(ord(char)+1)\n        new_words.append(new_word)\n    return''.join(new_words)"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n    words = s.split()\n    ordered_words = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        ordered_words.append(sorted_word)\n    return''.join(ordered_words)\n"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n\n    # Splitting the string into a list of words\n    words = s.split()\n\n    # Sorting the characters in each word in ascending order based on ascii value\n    for i in range(len(words)):\n        words[i] = ''.join(sorted(words[i]))\n\n    # Joining the words and returning the final string\n    return''.join(words)"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def anti_shuffle(s):\n    words = s.split()  # split the string into words\n    new_words = []\n    for word in words:\n        new_word = ''.join(sorted(word))  # sort the characters in the word\n        new_words.append(new_word)\n    return''.join(new_words)  # join the new words back into a string with spaces in between"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n    # Split the input string into a list of words\n    words = s.split()\n    \n    # Loop through the list of words and create a new word for each\n    new_words = []\n    for word in words:\n        # Create a list of characters in the word and sort them in ascending order\n        sorted_chars = sorted(word)\n        # Convert the list back to a string and add it to the new list of words\n        new_word = ''.join(sorted_chars)\n        new_words.append(new_word)\n    \n    # Join the new words back into a string with spaces between them\n    new_s =''.join(new_words)\n    return new_s"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n    words = s.split()\n    for i in range(len(words)):\n        words[i] = ''.join(sorted(words[i]))\n    return''.join(words)"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n    \"\"\"\n    words = s.split()\n    result = ''\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result += sorted_word +''\n    return result.strip()"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda x: (x[0], -x[1]))\n    return coordinates"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda x: (x[0], -x[1]))\n    return coordinates"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_row(lst, x):\n    # check if lst is empty\n    if not lst:\n        return []\n    \n    # initialize result list and set of unique coordinates\n    result = []\n    coordinates = set()\n    \n    # iterate over rows of lst\n    for i, row in enumerate(lst):\n        # iterate over columns of row\n        for j, column in enumerate(row):\n            # check if column is equal to x\n            if column == x:\n                # add coordinate to set\n                coordinates.add((i, j))\n    \n    # sort coordinates by rows in ascending order and columns in descending order\n    sorted_coordinates = sorted(coordinates, key=lambda x: (-x[0], -x[1]))\n    \n    # add sorted coordinates to result list\n    for coordinate in sorted_coordinates:\n        result.append(coordinate)\n    \n    return result"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == x:\n                coordinates.append((i, j))\n    \n    # Sort coordinates initially by rows in ascending order.\n    coordinates.sort()\n    \n    # Sort coordinates of the row by columns in descending order.\n    for i in range(len(coordinates)):\n        row_num, col_num = coordinates[i]\n        lst[row_num].sort(reverse=True)\n    \n    return coordinates"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    # Initialize an empty list to store coordinates\n    coordinates = []\n    \n    # Iterate over the list\n    for i in range(len(lst)):\n        # Iterate over the row\n        for j in range(len(lst[i])):\n            # If the element is equal to x, add the coordinate to the list\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n    \n    # Sort the coordinates by rows in ascending order and by columns in descending order\n    coordinates.sort(key=lambda x: (x[0], -x[1]))\n    \n    return coordinates"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda x: x[0])\n    for i in range(len(coordinates)):\n        coordinates[i] = (coordinates[i][0], len(lst[coordinates[i][0]]) - 1 - coordinates[i][1])\n    coordinates.sort(key=lambda x: x[1])\n    return coordinates"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coordinates.append((i,j))\n    \n    # sort coordinates by rows in ascending order\n    coordinates = sorted(coordinates, key=lambda x: x[0])\n    \n    # sort coordinates by columns in descending order\n    for i in range(len(coordinates)):\n        coordinates[i] = (coordinates[i][0], -coordinates[i][1])\n    \n    return sorted(coordinates)\n"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                coordinates.append((i, j))\n    coordinates.sort()\n    return sorted(coordinates, key=lambda coord: (-coord[0], -coord[1]))\n"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i,j))\n    result = sorted(result, key=lambda x: (x[0], -x[1]))\n    return result"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n    \n    # calculate the sum of the first and last indices\n    total_sum = array[0] + array[-1]\n    \n    # check if the total sum is odd or even\n    if total_sum % 2 == 0:\n        # sort the array in descending order\n        return sorted(array, reverse=True)\n    else:\n        # sort the array in ascending order\n        return sorted(array)"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) <= 1:\n        return array\n\n    pivot = array[0]\n    left = []\n    right = []\n\n    for i in range(1, len(array)):\n        if array[i] < pivot:\n            left.append(array[i])\n        else:\n            right.append(array[i])\n\n    if len(left) % 2 == 1:\n        left = sort_array(left)\n    else:\n        left = sort_array(left[::-1])[::-1]\n\n    if len(right) % 2 == 1:\n        right = sort_array(right)\n    else:\n        right = sort_array(right[::-1])[::-1]\n\n    return left + [pivot] + right"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) <= 1:\n        return array\n\n    mid = len(array) // 2\n    left = sort_array(array[:mid])\n    right = sort_array(array[mid:])\n\n    if (sum(left[0], right[0]) % 2 == 0):\n        return left + right\n    else:\n        return right + left"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sum_first_last = sum(array[0], array[-1])\n    if sum_first_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    # Calculate the sum of the first and last indices\n    first_last_sum = array[0] + array[-1]\n\n    # Sort the array in ascending order if the sum is odd\n    # Sort the array in descending order if the sum is even\n    if first_last_sum % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) <= 1:\n        return array\n    \n    mid = len(array) // 2\n    left_array = array[:mid]\n    right_array = array[mid:]\n    \n    left_array = sort_array(left_array)\n    right_array = sort_array(right_array)\n    \n    return merge(left_array, right_array)\n\ndef merge(left_array, right_array):\n    \"\"\"\n    Merge two sorted arrays into a single sorted array.\n    \"\"\"\n    i = 0\n    j = 0\n    merged_array = []\n    \n    while i < len(left_array) and j < len(right_array):\n        if left_array[i] <= right_array[j]:\n            merged_array.append(left_array[i])\n            i += 1\n        else:\n            merged_array.append(right_array[j])\n            j += 1\n            \n    merged_array += left_array[i:]\n    merged_array += right_array[j:]\n    \n    return merged_array"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Check if the length of the array is 0 or 1, if it is, return the same array.\n    if len(array) <= 1:\n        return array\n\n    # Calculate the sum of the first and last index values.\n    sum_first_last = array[0] + array[-1]\n\n    # If the sum is odd, sort the array in ascending order.\n    if sum_first_last % 2 == 1:\n        return sorted(array)\n\n    # If the sum is even, sort the array in descending order.\n    else:\n        return sorted(array, reverse=True)"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n    first = array[0]\n    last = array[-1]\n    if (first + last) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n    \n    n = len(array)\n    if n == 1:\n        return [array[0]]\n    \n    if (array[0] + array[n-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    # Copy the array to avoid modifying the original one\n    array_copy = array.copy()\n\n    # Sort the array based on the sum of the first and last index value\n    if (sum(array_copy[0], array_copy[-1])) % 2 == 0:\n        array_copy.sort(reverse=True)\n    else:\n        array_copy.sort()\n\n    return array_copy"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # create an empty string to hold the encrypted string\n    encrypted = \"\"\n    \n    # loop through each character in the input string\n    for char in s:\n        # if the character is a letter, rotate it by two places down\n        if char.isalpha():\n            # get the ASCII value of the character\n            ascii_val = ord(char)\n            # if the character is lowercase, add 2*2 to the ASCII value\n            if char.islower():\n                ascii_val += 2*2\n            # if the character is uppercase, subtract 2*2 from the ASCII value\n            else:\n                ascii_val -= 2*2\n            # convert the ASCII value back to a character and add it to the encrypted string\n            encrypted += chr(ascii_val)\n        # if the character is not a letter, add it to the encrypted string as is\n        else:\n            encrypted += char\n            \n    # return the encrypted string\n    return encrypted"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def encrypt(s):\n    # Create a dictionary with the alphabet shifted down by 2 positions\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    rotated_alphabet = alphabet[2:] + alphabet[:2]\n    shifted_alphabet = dict(zip(alphabet, rotated_alphabet))\n\n    # Encrypt the string by shifting each letter in the string by 2 positions\n    encrypted_string = ''\n    for letter in s:\n        if letter.isalpha():\n            encrypted_string += shifted_alphabet[letter.lower()]\n        else:\n            encrypted_string += letter\n\n    return encrypted_string"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\"\"\"\n    rotated_alphabet = \"abcdefghijklmnopqrstuvwxyz\"[2:] + \"abcdefghijklmnopqrstuvwxyz\"[:2]\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            index = rotated_alphabet.index(char.lower())\n            encrypted_char = rotated_alphabet[index]\n            if char.isupper():\n                encrypted_char = encrypted_char.upper()\n            encrypted_string += encrypted_char\n        else:\n            encrypted_string += char\n    return encrypted_string"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # create a dictionary to map each letter to its encrypted value\n    mapping = {}\n    for i in range(26):\n        # subtracting 2*2 = 4 to shift the letters down by two places\n        encrypted_letter = chr((ord('a') + i - 4) % 26 + ord('a'))\n        mapping[chr(ord('a') + i)] = encrypted_letter\n\n    # apply the mapping to the input string and return the result\n    result = ''\n    for letter in s:\n        if letter.isalpha():\n            result += mapping[letter.lower()]\n        else:\n            result += letter\n    return result"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\"\"\"\n    result = ''\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                # shift down by 2 * 2 = 4 places\n                result += chr((ord(c) - 97 + 4) % 26 + 97)\n            else:\n                # shift down by 2 * 2 = 4 places\n                result += chr((ord(c) - 65 + 4) % 26 + 65)\n        else:\n            result += c\n    return result"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    rotated_alphabet = alphabet[2:] + alphabet[:2]\n    encrypted_string = ''\n    for letter in s:\n        if letter.isalpha():\n            index = alphabet.index(letter.lower())\n            encrypted_letter = rotated_alphabet[index]\n            if letter.islower():\n                encrypted_string += encrypted_letter\n            else:\n                encrypted_string += encrypted_letter.upper()\n        else:\n            encrypted_string += letter\n    return encrypted_string"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\"\"\"\n    # Create a dictionary to map each letter to its new position\n    new_pos = {}\n    for i, c in enumerate(s):\n        new_pos[c] = (i + 2 * i // 2) % 26\n    \n    # Encrypt the string by mapping each letter to its new position\n    result = ''\n    for c in s:\n        if c.isalpha():\n            result += chr((ord(c.lower()) - ord('a') + new_pos[c.lower()]) % 26 + ord('a'))\n        else:\n            result += c\n    \n    return result"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # Create a dictionary with the letters of the alphabet as keys and\n    # their shifted counterparts as values.\n    alphabet = {'a': 'd', 'b': 'e', 'c': 'f', 'd': 'g', 'e': 'h',\n                'f': 'i', 'g': 'j', 'h': 'k', 'i': 'l', 'j':'m',\n                'k': 'n', 'l': 'o','m': 'p', 'n': 'q', 'o': 'r',\n                'p':'s', 'q': 't', 'r': 'u','s': 'v', 't': 'w',\n                'u': 'x', 'v': 'y', 'w': 'z', 'x': 'a', 'y': 'b',\n                'z': 'c','':''}\n    \n    # Create an empty string to store the encrypted string.\n    encrypted_s = ''\n    \n    # Loop through each character in the input string.\n    for char in s:\n        # If the character is a letter, shift it down by two multiplied\n        # to two places and add it to the encrypted string.\n        if char.isalpha():\n            encrypted_s += alphabet[char.lower()]\n        # If the character is a space, add a space to the encrypted string.\n        elif char.isspace():\n            encrypted_s +=''\n    \n    # Return the encrypted string.\n    return encrypted_s"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # Define the rotation factor as 2*2=4\n    rotation_factor = 4\n    # Define the original alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    # Define the new alphabet by rotating the original alphabet\n    new_alphabet = alphabet[rotation_factor:] + alphabet[:rotation_factor]\n    # Define the dictionary to map from the old to new alphabet\n    mapping = dict(zip(alphabet, new_alphabet))\n    # Use the mapping dictionary to encrypt the string\n    encrypted_string = ''.join(mapping.get(c, c) for c in s)\n    return encrypted_string"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def encrypt(s):\n    # create a list of the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    # create a new list with the alphabet rotated by two places\n    rotated_alphabet = alphabet[2:] + alphabet[:2]\n    # create a dictionary to map each letter to its rotated counterpart\n    letter_map = dict(zip(alphabet, rotated_alphabet))\n    # create a new string with each letter mapped to its rotated counterpart\n    encrypted_s = ''.join([letter_map[c] for c in s])\n    return encrypted_s"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    \n    # Convert the list to a set to remove duplicates\n    unique_lst = set(lst)\n    \n    # Sort the set in ascending order\n    sorted_unique_lst = sorted(unique_lst)\n    \n    # Check if there are at least 2 distinct elements in the list\n    if len(sorted_unique_lst) < 2:\n        return None\n    \n    # Return the 2nd smallest element of the list\n    return sorted_unique_lst[1]"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    for i in range(len(lst)-1):\n        if lst[i] < lst[i+1]:\n            return lst[i+1]\n    return None"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of a list of integers.\n    Returns None if there is no such element.\n    \"\"\"\n    if not lst:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    if second_smallest == float('inf'):\n        return None\n    return second_smallest"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    # Step 1: Remove duplicates from the list\n    lst = list(set(lst))\n\n    # Step 2: Sort the list in ascending order\n    lst.sort()\n\n    # Step 3: Return None if the list is empty or has only one element\n    if len(lst) < 2:\n        return None\n\n    # Step 4: Return the 2nd smallest element of the list\n    return lst[1]"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    \n    lst.sort()\n    for i in range(1, len(lst)):\n        if lst[i]!= lst[i-1]:\n            return lst[i]\n    return None"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    smallest = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < smallest:\n            second_smallest = smallest\n            smallest = lst[i]\n        elif lst[i] < second_smallest:\n            second_smallest = lst[i]\n    return second_smallest"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    \n    smallest = lst[0]\n    second_smallest = None\n    \n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif second_smallest is None or num < second_smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \"\"\"\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    smallest = lst[0]\n    next_smallest = None\n    for num in lst:\n        if num < smallest:\n            smallest = num\n        elif num!= smallest and (next_smallest is None or num < next_smallest):\n            next_smallest = num\n    return next_smallest"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    if len(lst) < 2:\n        return None\n\n    smallest = lst[0]\n    second_smallest = None\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest or second_smallest is None:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    words = S.split()\n    boredom_count = 0\n    \n    for word in words:\n        if word.startswith('I'):\n            boredom_count += 1\n    \n    return boredom_count"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_bored(S):\n    boredoms = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words) > 0 and words[0] == 'I':\n            boredoms += 1\n    return boredoms"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_bored(S):\n    count = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        words = sentence.split()\n        if words[0].lower() == 'i':\n            count += 1\n    return count"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    boredoms = 0\n    sentence = \"\"\n    for word in S.split():\n        if word in \".!?\":\n            if sentence.startswith(\"I\"):\n                boredoms += 1\n            sentence = \"\"\n        else:\n            sentence += word + \" \"\n    return boredoms"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        words = sentence.split()\n        if words[0].lower() == 'i':\n            boredoms += 1\n    return boredoms"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    boredom = 0\n    sentences = S.split(\".\")\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0].lower() == \"i\":\n            boredom += 1\n    return boredom"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_bored(S):\n    count = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == 'I':\n            count += 1\n    return count"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    boredom_count = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words) > 0 and words[0].lower() == 'i':\n            boredom_count += 1\n    return boredom_count"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    count = 0\n    sentences = S.split(\".\")\n    for sentence in sentences:\n        words = sentence.split()\n        if words[0].lower() == \"i\":\n            count += 1\n    return count"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Split the string into sentences based on the delimiters\n    sentences = S.split('.')\n    sentences += S.split('?')\n    sentences += S.split('!')\n    # Initialize the counter for boredoms\n    bored_count = 0\n    # Loop through each sentence and check if it starts with \"I\"\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            bored_count += 1\n    return bored_count"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) \u279e True\n\n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n\n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n\n    if type(x) == int and type(y) == int and type(z) == int:\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == z or y + z == x or z + x == y:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    \"\"\"\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == z or x + z == y or y + z == x:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    \n    if all(isinstance(i, int) for i in [x, y, z]):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    \n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    \n    '''\n\n    if type(x) == int and type(y) == int and type(z) == int:\n        if (x + y == z) or (x + z == y) or (y + z == x):\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    >>> any_int(5, 2, 7)\n    True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n    \"\"\"\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) \u279e True\n\n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n\n    any_int(3.6, -2.2, 2) \u279e False\n\n    '''\n    if type(x) == int and type(y) == int and type(z) == int:\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def encode(message):\n    \"\"\"\n    Encodes a message by swapping case of all letters, replacing all vowels with the letter that appears 2 places ahead of that vowel in the English alphabet.\n    \"\"\"\n    # define a list of vowels and the English alphabet\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\n    # create an empty string to store the encoded message\n    encoded_message = ''\n\n    # loop through each character in the message\n    for char in message:\n        # if the character is a vowel, replace it with the letter that appears 2 places ahead of it in the English alphabet\n        if char.lower() in vowels:\n            index = alphabet.index(char.lower()) + 2\n            if index > 25:\n                index -= 26\n            encoded_message += alphabet[index].upper()\n        # if the character is not a vowel, swap its case\n        else:\n            encoded_message += char.swapcase()\n\n    return encoded_message"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def encode(message):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    result = ''\n    for c in message.lower():\n        if c in vowels:\n            result += vowels.symmetric_difference(set([c])).pop()\n        else:\n            result += c.swapcase()\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    encoded = \"\"\n    for letter in message:\n        if letter.isalpha():\n            if letter.lower() in \"aeiou\":\n                index = \"aeiou\".index(letter.lower())\n                encoded += \"aeiou\"[index+2].upper() if index+2 < 5 else \"aeiou\"[0].upper()\n            else:\n                encoded += letter.upper() if letter.isupper() else letter.lower()\n        else:\n            encoded += letter\n    return encoded"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for i in range(len(message)):\n        letter = message[i]\n        if letter.lower() in vowels:\n            if letter.isupper():\n                result += chr(ord('A') + vowels.index(letter.lower()) + 2)\n            else:\n                result += chr(ord('a') + vowels.index(letter.lower()) + 2)\n        else:\n            result += letter.swapcase()\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def encode(message):\n    \"\"\"\n    This function takes a message and encodes it in such a way that it swaps case of all letters, replaces all vowels in the message with the letter that appears 2 places ahead of that vowel in the english alphabet.\n    \"\"\"\n    # Define a dictionary of vowels and their corresponding letters 2 places ahead of them in the alphabet\n    vowels_dict = {'a': 'c', 'e': 'g', 'i': 'k', 'o':'m', 'u': 'q', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'M', 'U': 'Q'}\n\n    # Swap case of all letters in the message\n    message = message.swapcase()\n\n    # Replace all vowels in the message with their corresponding 2 places ahead letter\n    for vowel, letter in vowels_dict.items():\n        message = message.replace(vowel, letter)\n\n    return message"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def encode(message):\n    vowels = 'aeiou'\n    new_message = ''\n    for char in message:\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            new_message += vowels[(index+2)%5]\n        else:\n            new_message += char.swapcase()\n    return new_message"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def encode(message):\n    \"\"\"\n    Encodes the message in such a way that it swaps case of all letters,\n    replaces all vowels in the message with the letter that appears 2 places\n    ahead of that vowel in the English alphabet.\n    \"\"\"\n    # Create a dictionary that maps each vowel to the letter that appears 2 places ahead of it\n    vowel_dict = {'a': 'c', 'e': 'g', 'i': 'k', 'o':'m', 'u':'s', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'M', 'U': 'S'}\n    \n    # Convert the message to lowercase and swap case for each letter\n    encoded_message = ''\n    for letter in message.lower():\n        if letter.isalpha():\n            encoded_letter = letter.swapcase() if letter.isupper() else letter.swapcase()\n            encoded_message += encoded_letter\n        else:\n            encoded_message += letter\n    \n    # Replace each vowel with the letter that appears 2 places ahead of it\n    for i in range(len(encoded_message)):\n        if encoded_message[i] in vowel_dict:\n            encoded_message = encoded_message[:i+1] + vowel_dict[encoded_message[i]] + encoded_message[i+2:]\n    \n    return encoded_message"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # define vowels\n    vowels = 'aeiou'\n    # define alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    # create an empty string to hold encoded message\n    encoded = ''\n    # loop through each character in message\n    for char in message:\n        # if the character is a vowel, replace it with the letter that appears 2 places ahead of it in the alphabet\n        if char.lower() in vowels:\n            # calculate index of vowel in alphabet\n            index = vowels.index(char.lower())\n            # calculate index of letter that appears 2 places ahead of vowel in alphabet\n            new_index = (index + 2) % 5\n            # replace vowel with new letter\n            encoded += alphabet[new_index]\n        # if the character is a letter, swap its case\n        else:\n            encoded += char.swapcase()\n    return encoded"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    encoded_message = ''\n    \n    for char in message:\n        if char.lower() in vowels:\n            if char.islower():\n                encoded_message += vowels[(vowels.index(char.lower()) + 2) % 5].upper()\n            else:\n                encoded_message += vowels[(vowels.index(char.lower()) + 2) % 5].lower()\n        else:\n            encoded_message += char\n    \n    return encoded_message"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = {'a': 'e', 'e': 'i', 'i': 'o', 'o': 'u', 'u': 'a'}\n    encoded = ''\n    for char in message:\n        if char.lower() in vowels:\n            encoded += vowels[char.lower()]\n        else:\n            encoded += char.swapcase()\n    return encoded"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is prime, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\"\"\"\n    prime = None\n    max_num = max(lst)\n    for num in lst:\n        if is_prime(num) and num > max_num:\n            prime = num\n            break\n    if prime is None:\n        return None\n    return sum(int(digit) for digit in str(prime))"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num):\n            if num > largest_prime:\n                largest_prime = num\n    return sum(int(digit) for digit in str(largest_prime))\n"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\"\"\"\n    max_prime = 0\n    for num in lst:\n        if num > max_prime and is_prime(num):\n            max_prime = num\n    if max_prime == 0:\n        return 0\n    else:\n        return sum(int(digit) for digit in str(max_prime))\n\n\ndef is_prime(num):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if num <= 1:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(num**0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_prime(n):\n    \"\"\"Returns True if n is prime, False otherwise\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n    return sum(int(digit) for digit in str(largest_prime))"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    max_prime = 0\n    for num in lst:\n        if is_prime(num):\n            if num > max_prime:\n                max_prime = num\n    return sum_of_digits(max_prime)\n"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_prime(n):\n    \"\"\"Function to check if a number is prime or not\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    prime_lst = [num for num in lst if is_prime(num)]\n    if prime_lst:\n        return sum(int(digit) for num in prime_lst for digit in str(num))\n    else:\n        return 0"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_digits(n):\n    \"\"\"Helper function to sum the digits of a number.\"\"\"\n    return sum(int(d) for d in str(n))\n\ndef largest_prime_sum(lst):\n    \"\"\"Finds the largest prime value in the list and returns its sum of digits.\"\"\"\n    largest_prime = 0\n    for n in lst:\n        if is_prime(n) and n > largest_prime:\n            largest_prime = n\n    return sum_digits(largest_prime)"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_prime(num):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    prime_lst = []\n    for num in lst:\n        if is_prime(num):\n            prime_lst.append(num)\n    if not prime_lst:\n        return 0\n    max_prime = max(prime_lst)\n    return sum(int(digit) for digit in str(max_prime))\n"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime or not\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef largest_prime_sum_of_digits(lst):\n    \"\"\"Function to find the largest prime value and return the sum of its digits\"\"\"\n    largest_prime = -1\n    for num in lst:\n        if num > largest_prime and is_prime(num):\n            largest_prime = num\n    return sum(int(digit) for digit in str(largest_prime))"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_prime(n):\n    \"\"\"Function to check if a number is prime\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\"\"\"\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n    return sum(int(digit) for digit in str(largest_prime))"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:  # Check if the dictionary is empty\n        return False\n    \n    # Check if all keys are strings in lower case or all keys are strings in upper case\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict)\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict)\n    \n    return all_lower or all_upper"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not dict:  # check if dict is empty\n        return False\n\n    # check if all keys are strings in upper case\n    for key in dict:\n        if not isinstance(key, str):  # check if key is a string\n            return False\n        if key!= key.upper():  # check if key is not in upper case\n            return False\n\n    # check if all keys are strings in lower case\n    for key in dict:\n        if not isinstance(key, str):  # check if key is a string\n            return False\n        if key!= key.lower():  # check if key is not in lower case\n            return False\n\n    return True"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_dict_case(d):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not d:  # check if dictionary is empty\n        return False\n    \n    all_lower = True\n    all_upper = True\n    \n    for k in d:\n        if not isinstance(k, str):  # check if key is a string\n            return False\n        if not k.islower():  # check if key is all lowercase\n            all_upper = False\n        if not k.isupper():  # check if key is all uppercase\n            all_lower = False\n    \n    return all_lower or all_upper"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not dict:  # If the dictionary is empty\n        return False\n\n    # Check if all keys are in upper case\n    keys_upper = all(isinstance(key, str) and key.isupper() for key in dict)\n\n    # Check if all keys are in lower case\n    keys_lower = all(isinstance(key, str) and key.islower() for key in dict)\n\n    # Check if the keys are all in upper case or all in lower case\n    return keys_upper or keys_lower"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not dict:\n        return False\n    \n    keys = list(dict.keys())\n    lower_case = True\n    upper_case = True\n    \n    for key in keys:\n        if not isinstance(key, str):\n            return False\n        \n        if key.islower():\n            upper_case = False\n        elif key.isupper():\n            lower_case = False\n        else:\n            return False\n    \n    return lower_case or upper_case"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not dict:\n        return False\n    \n    # Check if all keys are strings in lower case\n    for key in dict.keys():\n        if not isinstance(key, str) or key.lower()!= key:\n            return False\n    \n    # Check if all keys are strings in upper case\n    for key in dict.keys():\n        if not isinstance(key, str) or key.upper()!= key:\n            return False\n    \n    return True"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not dict:\n        return False\n    case = None\n    for key in dict.keys():\n        if isinstance(key, str):\n            if case == None:\n                case = key.islower()\n            else:\n                if (key.islower() and not case) or (key.isupper() and case):\n                    return False\n    return True"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not dict:\n        return False\n    \n    first_key = next(iter(dict))\n    if isinstance(first_key, str):\n        return all(isinstance(key, str) and (key.islower() or key.isupper()) for key in dict)\n    else:\n        return False"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict) == 0:\n        return False\n    first_key = next(iter(dict))\n    if isinstance(first_key, str):\n        return all(isinstance(key, str) and key.islower() or key.isupper() for key in dict.keys())\n    else:\n        return False"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not dict:\n        return False\n    \n    upper = True\n    lower = True\n    \n    for key in dict:\n        if isinstance(key, str):\n            if key.islower():\n                lower = False\n            else:\n                upper = False\n    \n    if lower and upper:\n        return False\n    else:\n        return True"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\"\"\"\n    primes = []\n    i = 2\n    while len(primes) < n:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n    return primes"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    if n <= 1:\n        return []\n    primes = [2]\n    i = 3\n    while len(primes) < n:\n        is_prime = True\n        for prime in primes:\n            if prime > int(i ** 0.5) + 1:\n                primes.append(i)\n                is_prime = False\n                break\n            if i % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n        i += 2\n    return primes[:n]"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\"\"\"\n    if n <= 0:\n        return []\n    primes = []\n    i = 2\n    while len(primes) < n:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n    return primes"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    if n < 2:\n        return []\n    \n    primes = [2]  # start with the first prime number\n    \n    # check odd numbers greater than 2 for primality\n    for num in range(3, n, 2):\n        is_prime = True\n        for prime in primes:\n            if prime > num ** 0.5:  # no need to check further\n                break\n            if num % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n            if len(primes) == n:\n                break\n    \n    return primes"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime and i < n:\n            primes.append(i)\n        if len(primes) == n:\n            break\n    return primes"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\"\"\"\n    primes = []\n    i = 2\n    while len(primes) < n:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n    return primes"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    count = 0\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n            count += 1\n            if count == n:\n                break\n    return primes"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    if n < 2:\n        return []\n\n    primes = [2]\n    i = 3\n    while i < n:\n        is_prime = True\n        for prime in primes:\n            if i % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n        i += 2\n\n    return primes[:n]"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    result = []\n    i = 2\n    while len(result) < n:\n        if is_prime(i) and i < n:\n            result.append(i)\n        i += 1\n    return result"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for div in range(2, num):\n            if num % div == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        if len(primes) == n:\n            break\n    return primes"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    a_unit_digit = a % 10\n    b_unit_digit = b % 10\n    product = a_unit_digit * b_unit_digit\n    return product"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply(a, b):\n    \"\"\"\n    This function takes two integers and returns the product of their unit digits.\n    \"\"\"\n    a_digits = [int(d) for d in str(a)]\n    b_digits = [int(d) for d in str(b)]\n    product = 0\n    for d1 in a_digits:\n        for d2 in b_digits:\n            product += d1 * d2\n    return product"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply(a, b):\n    \"\"\"\n    This function takes two integers as input and returns the product of their unit digits.\n    \"\"\"\n    # Convert the integers into strings\n    a_str = str(a)\n    b_str = str(b)\n\n    # Initialize the product variable to 0\n    product = 0\n\n    # Loop through the characters of the strings from right to left\n    for i in range(len(a_str)-1, -1, -1):\n        # Convert the character into an integer\n        a_digit = int(a_str[i])\n\n        # Multiply the digit by the corresponding digit in the second number\n        b_digit = int(b_str[-i-1])\n        product += a_digit * b_digit\n\n    return product"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply(a, b):\n    \"\"\"\n    This function takes two integers as input and returns the product of their unit digits.\n    \"\"\"\n    # Convert integers to strings to extract their digits\n    a_str = str(a)\n    b_str = str(b)\n    # Initialize variables to store the product and the unit digit\n    product = 0\n    unit_digit = 0\n    # Loop through the digits in the two integers\n    for digit in a_str:\n        product += int(digit)\n    for digit in b_str:\n        product += int(digit)\n    # Get the unit digit of the product\n    unit_digit = product % 10\n    # Return the product of the unit digit\n    return unit_digit"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply(a, b):\n    \"\"\"\n    Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    \"\"\"\n    # Extracting unit digits of a and b\n    a_unit_digit = a % 10\n    b_unit_digit = b % 10\n\n    # Multiplying unit digits of a and b and returning result\n    return a_unit_digit * b_unit_digit"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply(a, b):\n    \"\"\"\n    Takes two integers and returns the product of their unit digits.\n    Assumes the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    if a < 0:\n        a *= -1\n    if b < 0:\n        b *= -1\n    product = 0\n    while a > 0 or b > 0:\n        if a % 10!= 0:\n            product += a % 10\n        if b % 10!= 0:\n            product += b % 10\n        a //= 10\n        b //= 10\n    return product"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Extract the unit digits of each number\n    a_unit_digits = a % 10\n    b_unit_digits = b % 10\n    \n    # Multiply the unit digits and return the result\n    return a_unit_digits * b_unit_digits"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    a = abs(a)\n    b = abs(b)\n    product = 0\n    \n    while a > 0:\n        product += a % 10\n        a //= 10\n    \n    while b > 0:\n        product += b % 10\n        b //= 10\n        \n    return product"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply(a, b):\n    \"\"\"\n    This function takes two integers and returns the product of their unit digits.\n    Assumes the input is always valid.\n    \"\"\"\n    return (a % 10) * (b % 10)"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply(a, b):\n    \"\"\"\n    This function takes two integers and returns the product of their unit digits.\n    \"\"\"\n    # Extract the unit digits of the first number\n    a_unit_digit = a % 10\n    # Extract the unit digit of the second number\n    b_unit_digit = b % 10\n    # Multiply the unit digits and return the result\n    return a_unit_digit * b_unit_digit"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOUaeiou':\n            count += 1\n    return count"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].upper() in 'AEIOU':\n            count += 1\n    return count"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in \"AEIOU\":\n            count += 1\n    return count"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in ['A', 'E', 'I', 'O', 'U']:\n            count += 1\n    return count"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOUaeiou':\n            count += 1\n    return count"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in ['A', 'E', 'I', 'O', 'U']:\n            count += 1\n    return count"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def closest_integer(value):\n    # Convert the input value to a float\n    num = float(value)\n    \n    # Check if the number is already an integer\n    if num == int(num):\n        # If the number is already an integer, return it\n        return int(num)\n    else:\n        # If the number is not an integer, round it using the round() function\n        rounded = round(num)\n        \n        # Check if the rounded number is equidistant from two integers\n        if abs(rounded - num) == 0.5:\n            # If the rounded number is equidistant from two integers,\n            # we need to round away from zero\n            if rounded >= 0:\n                return int(rounded + 0.5)\n            else:\n                return int(rounded - 0.5)\n        else:\n            # If the rounded number is not equidistant from two integers,\n            # we can simply return it\n            return rounded"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    num = float(value)\n    if num == int(num):\n        return int(num)\n    else:\n        if num > 0:\n            return int(num+0.5)\n        else:\n            return int(num-0.5)"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n\n    # Convert the input value to a float\n    num = float(value)\n\n    # If the number is exactly halfway between two integers, round it away from zero\n    if num > 0 and num % 1 >= 0.5:\n        return int(num + 0.5)\n    elif num < 0 and num % 1 < 0.5:\n        return int(num - 0.5)\n    else:\n        return int(num)"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    # Convert the input string to a float\n    num = float(value)\n\n    # If the number is already an integer, return it\n    if num.is_integer():\n        return int(num)\n\n    # Check if the number is equidistant from two integers\n    if num > 0:\n        if num - int(num) >= 0.5:\n            return int(num) + 1\n        else:\n            return int(num)\n    else:\n        if abs(num) - int(abs(num)) >= 0.5:\n            return int(num) - 1\n        else:\n            return int(num)"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n    num = float(value)\n    if num.is_integer():\n        return int(num)\n    elif num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n    num = float(value)\n    if num < 0:\n        return int(num - 0.5)\n    else:\n        return int(num + 0.5)"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]\n    while True:\n        next_num = pile[-1] + 1 if pile[-1] % 2 == 0 else pile[-1] + 2\n        if next_num > 2*n:\n            break\n        pile.append(next_num)\n    return pile"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    pile = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n = n + 1\n        else:\n            n = n + 2\n        pile.append(n)\n    return pile"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n\n    levels = []\n    for i in range(n):\n        if i == 0:\n            levels.append(n)\n        else:\n            if n % 2 == 0:\n                levels.append(levels[i-1] + 2)\n            else:\n                levels.append(levels[i-1] + 1)\n    return levels"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            next_level = pile[i-1] + 2\n        else:\n            next_level = pile[i-1] + 1\n        pile.append(next_level)\n    return pile"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]\n    for i in range(n-1):\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        pile.append(n)\n    return pile"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    levels = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            levels.append(levels[i-1] + n)\n        else:\n            levels.append(levels[i-1] + (n+1))\n    return levels"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]\n    for i in range(1, n):\n        if i % 2 == 0:\n            pile.append(pile[i-1] + i)\n        else:\n            pile.append(pile[i-1] + i - 1)\n    return pile"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    # initialize list to store number of stones in each level\n    num_stones = [n]\n\n    # loop over each level of the pile\n    for i in range(n-1):\n        # if n is odd, set next level to next odd number\n        if n % 2 == 1:\n            n += 2\n        # if n is even, set next level to next even number\n        else:\n            n += 1\n        # add number of stones in the next level to list\n        num_stones.append(n)\n\n    return num_stones"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def make_a_pile(n):\n    if n == 1:\n        return [1]\n    elif n % 2 == 1:\n        level = make_a_pile(n-1)\n        level[-1] += 2\n        return level\n    else:\n        level = make_a_pile(n-1)\n        level[-1] += 1\n        return level"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        next_num = n + 1\n    else:\n        next_num = n + 2\n    pile = [n]\n    while next_num <= 2*n:\n        pile.append(next_num)\n        if n % 2 == 0:\n            next_num += 2\n        else:\n            next_num += 1\n    return pile"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def words_string(s):\n    # Split the string into words using the split() method\n    words = s.split()\n    # Return the array of words\n    return words"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    words = s.split()\n    return words"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Remove leading and trailing spaces\n    s = s.strip()\n    # Split the string into words\n    words = s.split()\n    # Return the array of words\n    return words"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    words = s.split()\n    return words"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    words = s.split()\n    return words"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    \n    # Initialize variables\n    max_even = -1\n    even_list = []\n\n    # Loop through numbers in range [x, y] inclusive\n    for num in range(x, y+1):\n        # Check if number is even\n        if num % 2 == 0:\n            # Add even number to list\n            even_list.append(num)\n            # Check if number is greater than current maximum\n            if num > max_even:\n                # Update maximum\n                max_even = num\n\n    # Check if there is a valid even number\n    if even_list:\n        # Return the maximum even number\n        return max_even\n    else:\n        # Return -1 if no valid even number is found\n        return -1"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 1:\n        x += 1\n    if y % 2 == 1:\n        y -= 1\n    if x <= y:\n        for i in range(y, x-1, -2):\n            if i <= y:\n                return i\n    else:\n        for i in range(x, y+1, 2):\n            if i >= x:\n                return i\n    return -1"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\n    # Check if x and y are positive integers\n    if not isinstance(x, int) or not isinstance(y, int) or x <= 0 or y <= 0:\n        raise ValueError(\"x and y must be positive integers\")\n\n    # Initialize the result to -1\n    result = -1\n\n    # Iterate through all even integers in the range [x, y] inclusive\n    for num in range(x, y+1):\n        if num % 2 == 0:\n            # If the current number is greater than the current result,\n            # update the result\n            if num > result:\n                result = num\n\n    # Return the result\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    \n    # initialize the variable to store the result\n    result = -1\n    \n    # loop through all numbers in the range [x, y] inclusive\n    for num in range(x, y+1):\n        # check if the number is even and greater than the current result\n        if num % 2 == 0 and num > result:\n            result = num\n    \n    # return the result\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            return i\n    return -1"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    \n    # initialize variables for min and max even numbers in range\n    min_even = x\n    max_even = y\n    \n    # check if min or max even number is out of range\n    if min_even % 2!= 0:\n        min_even += 1\n        \n    if max_even % 2!= 0:\n        max_even -= 1\n        \n    # check if there are even numbers in the range\n    if min_even <= max_even:\n        # if there are even numbers, return the max even number\n        return max_even\n    else:\n        # if there are no even numbers, return -1\n        return -1"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            return i\n    return -1"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Initialize a variable to keep track of the biggest even number found so far\n    max_even = -1\n    \n    # Loop through all even numbers in the range [x, y] inclusive\n    for i in range(x, y+1, 2):\n        # If the current even number is greater than the current biggest even,\n        # update the variable max_even with the new biggest even number\n        if i > max_even:\n            max_even = i\n    \n    # If max_even is still -1 after the loop, then there's no even number in the range [x, y],\n    # so return -1\n    if max_even == -1:\n        return -1\n    # Otherwise, return the biggest even number found\n    else:\n        return max_even"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\"\"\"\n\n    # Check if x and y are positive integers\n    if not isinstance(x, int) or not isinstance(y, int) or x <= 0 or y <= 0:\n        return -1\n\n    # Find the biggest even integer in the range [x, y] inclusive\n    for num in range(y, x-1, -2):\n        if num % 2 == 0:\n            return num\n\n    # If there's no even number in the range, return -1\n    return -1"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    \n    if n > m:\n        return -1\n    \n    sum_nums = 0\n    count = 0\n    \n    for i in range(n, m+1):\n        sum_nums += i\n        count += 1\n        \n    avg = sum_nums / count\n    \n    rounded_avg = round(avg)\n    \n    binary = bin(rounded_avg)[2:]\n    \n    return \"0b\" + binary"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    \n    # Check if n is greater than m\n    if n > m:\n        return -1\n    \n    # Compute the average of the integers from n through m\n    avg = (n + m) / 2\n    \n    # Round the average to the nearest integer\n    avg = round(avg)\n    \n    # Convert the rounded average to binary\n    binary = bin(avg)[2:]\n    \n    # Add \"0b\" to the beginning of the binary string\n    binary = \"0b\" + binary\n    \n    # Return the binary string\n    return binary"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        avg = (n+m)/2\n        return bin(round(avg))[2:]"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        total = sum(range(n, m+1))\n        avg = total / (m - n + 1)\n        rounded_avg = round(avg)\n        binary_avg = bin(rounded_avg)[2:]\n        return f\"0b{binary_avg}\""
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m+1))\n    avg = total / (m - n + 1)\n    rounded_avg = round(avg)\n    binary_rounded_avg = bin(rounded_avg)[2:]\n    return \"0b\" + binary_rounded_avg"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rounded_avg(n, m):\n    \"\"\"Compute the average of integers from n to m, rounded to the nearest integer and return as binary string.\"\"\"\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    return f\"0b{bin(int(round(avg)))[2:]}\""
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        avg = (n+m)/2\n        rounded_avg = round(avg)\n        binary_avg = bin(rounded_avg)[2:]\n        return \"0b\"+binary_avg"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        sum = 0\n        for i in range(n, m+1):\n            sum += i\n        avg = sum / (m - n + 1)\n        return \"0b\" + bin(int(round(avg)))[2:]"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = 0\n    for i in range(n, m+1):\n        total += i\n        \n    avg = total / (m - n + 1)\n    rounded_avg = round(avg)\n    \n    binary_avg = bin(rounded_avg)[2:]\n    \n    return f\"0b{binary_avg}\""
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    \n    num_sum = sum(range(n, m+1))\n    avg = num_sum / (m - n + 1)\n    \n    # Rounding the average to the nearest integer\n    rounded_avg = round(avg)\n    \n    # Converting the rounded average to binary and returning as a string\n    binary_avg = bin(rounded_avg)[2:]\n    \n    return f\"0b{binary_avg}\""
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Create an empty list to store the unique elements\n    result = []\n\n    # Iterate over each element in the list\n    for num in x:\n        # Check if the number has any even digit\n        has_even = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even = True\n                break\n        \n        # If the number doesn't have any even digit, add it to the result list\n        if not has_even:\n            result.append(num)\n    \n    # Return the sorted result list\n    return sorted(result)"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique_list = []\n    for i in x:\n        if sum(int(digit) % 2 == 0 for digit in str(i)) == 0:\n            unique_list.append(i)\n    return sorted(unique_list)"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique = []\n    for i in x:\n        if len(set(str(i))) % 2 == 1:\n            unique.append(i)\n    return sorted(unique)"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    unique_elements = []\n    for num in x:\n        if sum(int(digit) % 2 == 1 for digit in str(num)) == len(str(num)):\n            unique_elements.append(num)\n    \n    return sorted(unique_elements)"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique = []\n    for num in x:\n        digits = [int(d) for d in str(num)]\n        if not any(d % 2 == 0 for d in digits):\n            unique.append(num)\n    return sorted(unique)"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique_list = []\n    for num in x:\n        # Check if the number has any even digit\n        if not any(int(digit) % 2 == 0 for digit in str(num)):\n            unique_list.append(num)\n    return sorted(unique_list)\n"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique_list = []\n    for num in x:\n        has_even = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even = True\n                break\n        if not has_even:\n            unique_list.append(num)\n    return sorted(unique_list)"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique = []\n    for num in x:\n        if sum([int(digit) % 2 == 0 for digit in str(num)]) == 0:\n            unique.append(num)\n    return sorted(unique)"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique_list = []\n    for num in x:\n        if not any(digit % 2 == 0 for digit in str(num)):\n            unique_list.append(num)\n    return sorted(unique_list)"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique_list = []\n    for num in x:\n        if sum(int(digit) % 2 == 1 for digit in str(num)) == len(str(num)):\n            unique_list.append(num)\n    unique_list.sort()\n    return unique_list"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # filter the array to get the integers between 1 and 9 inclusive\n    nums = list(filter(lambda x: 1 <= x <= 9, arr))\n\n    # sort the array in reverse order\n    nums.sort(reverse=True)\n\n    # reverse the sorted array\n    nums.reverse()\n\n    # replace each digit with its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    result = []\n    for num in nums:\n        if num in range(1, 10):\n            result.append(names[num-1])\n\n    # return the resulting array of names\n    return result"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n      \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n      \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # initialize an empty list to store the output\n    output = []\n\n    # loop through the input array\n    for num in arr:\n        # check if the number is between 1 and 9 inclusive\n        if 1 <= num <= 9:\n            # append the number to the output list\n            output.append(num)\n\n    # sort the output list in reverse order\n    output.sort(reverse=True)\n\n    # loop through the sorted output list and replace the digits with their corresponding names\n    for i in range(len(output)):\n        if output[i] == 1:\n            output[i] = \"One\"\n        elif output[i] == 2:\n            output[i] = \"Two\"\n        elif output[i] == 3:\n            output[i] = \"Three\"\n        elif output[i] == 4:\n            output[i] = \"Four\"\n        elif output[i] == 5:\n            output[i] = \"Five\"\n        elif output[i] == 6:\n            output[i] = \"Six\"\n        elif output[i] == 7:\n            output[i] = \"Seven\"\n        elif output[i] == 8:\n            output[i] = \"Eight\"\n        elif output[i] == 9:\n            output[i] = \"Nine\"\n\n    # return the output list\n    return output"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # filter out the strange numbers and numbers outside the range 1-9\n    arr = list(filter(lambda x: 1<=x<=9, arr))\n    \n    # sort the numbers within the range 1-9\n    arr.sort()\n    \n    # reverse the array\n    arr.reverse()\n    \n    # replace each digit with its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    result = []\n    for num in arr:\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n        \n    return result\n"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # create a dictionary to map digits to their names\n    digit_names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n    # filter the array to keep only the digits between 1 and 9\n    filtered_arr = list(filter(lambda x: x >= 1 and x <= 9, arr))\n\n    # sort the filtered array in descending order\n    sorted_arr = sorted(filtered_arr, reverse=True)\n\n    # reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n\n    # replace each digit by its corresponding name\n    replaced_arr = []\n    for num in reversed_arr:\n        replaced_arr.append(digit_names[num])\n\n    return replaced_arr"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    # sort the array and remove any element that is not between 1 and 9\n    arr = sorted([i for i in arr if i >= 1 and i <= 9])\n\n    # reverse the sorted array\n    arr = arr[::-1]\n\n    # replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    result = []\n    for num in arr:\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n\n    return result"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    if not arr:\n        return []\n\n    # sort the numbers between 1 and 9 inclusive\n    arr = sorted(filter(lambda x: 1 <= x <= 9, arr))\n    if not arr:\n        return []\n\n    # reverse the sorted array\n    arr.reverse()\n\n    # replace each digit with its corresponding name\n    result = []\n    for num in arr:\n        if num < 0 or num > 9:\n            continue\n\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n\n    return result"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n      \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n      \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    if len(arr) == 0:\n        return []\n\n    nums = [x for x in arr if x >= 1 and x <= 9]\n    nums.sort(reverse=True)\n    nums = [str(x) for x in nums]\n\n    result = []\n    for num in nums:\n        if num in ['1', '2', '3', '4', '5', '6', '7', '8', '9']:\n            result.append(digit_name(num))\n        else:\n            continue\n\n    result.reverse()\n    return result\n\n\ndef digit_name(num):\n    \"\"\"\n    Given a string num representing a digit between '1' and '9', return the corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    if num == '1':\n        return \"One\"\n    elif num == '2':\n        return \"Two\"\n    elif num == '3':\n        return \"Three\"\n    elif num == '4':\n        return \"Four\"\n    elif num == '5':\n        return \"Five\"\n    elif num == '6':\n        return \"Six\"\n    elif num == '7':\n        return \"Seven\"\n    elif num == '8':\n        return \"Eight\"\n    elif num == '9':\n        return \"Nine\""
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n      \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n      \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # Initialize an empty dictionary to map digits to names\n    digit_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\",\n                     7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    \n    # Filter out numbers outside the range of 1 to 9 and convert them to strings\n    arr = [str(num) for num in arr if 1 <= int(num) <= 9]\n    \n    # Sort the array in reverse order\n    arr.sort(reverse=True)\n    \n    # Replace each digit in the array with its corresponding name from the dictionary\n    result = [digit_to_name[int(num)] for num in arr]\n    \n    return result"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n      \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n      \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    # Remove any non-integer elements from the array\n    arr = [i for i in arr if isinstance(i, int)]\n\n    # Sort the array and reverse it\n    arr = sorted(arr, reverse=True)\n\n    # Replace each digit by its corresponding name\n    result = []\n    for i in arr:\n        if i >= 1 and i <= 9:\n            if i == 1:\n                result.append(\"One\")\n            elif i == 2:\n                result.append(\"Two\")\n            elif i == 3:\n                result.append(\"Three\")\n            elif i == 4:\n                result.append(\"Four\")\n            elif i == 5:\n                result.append(\"Five\")\n            elif i == 6:\n                result.append(\"Six\")\n            elif i == 7:\n                result.append(\"Seven\")\n            elif i == 8:\n                result.append(\"Eight\")\n            elif i == 9:\n                result.append(\"Nine\")\n\n    return result"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate through the input array\n    for num in arr:\n        # Check if the number is between 1 and 9 inclusive\n        if num >= 1 and num <= 9:\n            # If the number is between 1 and 9, add it to the result list\n            result.append(num)\n    \n    # Sort the result list in ascending order\n    result.sort()\n    \n    # Reverse the sorted result list\n    result.reverse()\n    \n    # Replace each digit in the sorted and reversed result list with its corresponding name\n    for i in range(len(result)):\n        if result[i] == 1:\n            result[i] = \"One\"\n        elif result[i] == 2:\n            result[i] = \"Two\"\n        elif result[i] == 3:\n            result[i] = \"Three\"\n        elif result[i] == 4:\n            result[i] = \"Four\"\n        elif result[i] == 5:\n            result[i] = \"Five\"\n        elif result[i] == 6:\n            result[i] = \"Six\"\n        elif result[i] == 7:\n            result[i] = \"Seven\"\n        elif result[i] == 8:\n            result[i] = \"Eight\"\n        elif result[i] == 9:\n            result[i] = \"Nine\"\n    \n    # Return the final result list\n    return result"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def factorial(n):\n    \"\"\" Computes the factorial of n \"\"\"\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n\ndef f(n):\n    \"\"\" Computes the list of size n using the definition of f \"\"\"\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    lst = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            lst.append(i)\n        else:\n            lst.append(sum(range(1, i+1)))\n    return lst"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def factorial(n):\n    \"\"\" Returns the factorial of n. \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef f(n):\n    \"\"\" Returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise. \"\"\"\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def factorial(n):\n    \"\"\"Returns the factorial of a number n\"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef f(n):\n    \"\"\"Returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append((i * (i+1)) // 2)\n    return result"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append((i*(i+1))/2)\n    return result"
    },
    {
        "number": 107,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    # Initialize count of even and odd palindromes\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    # Check for even palindromes in range(1, n)\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1] and i % 2 == 0:\n            even_palindrome_count += 1\n\n    # Check for odd palindromes in range(1, n)\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1] and i % 2!= 0:\n            odd_palindrome_count += 1\n\n    # Return tuple of even and odd palindrome counts\n    return (even_palindrome_count, odd_palindrome_count)\n"
    },
    {
        "number": 107,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]: # check if i is a palindrome\n            if i % 2 == 0: # if i is even\n                count_even += 1\n            else: # if i is odd\n                count_odd += 1\n\n    return (count_even, count_odd)\n"
    },
    {
        "number": 107,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    \n    count_even = 0\n    count_odd = 0\n    \n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        \n        # Check if the number is a palindrome\n        if str(i) == str(i)[::-1]:\n            \n            # Check if the number is even or odd\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    \n    # Return the tuple of even and odd palindrome counts\n    return (count_even, count_odd)"
    },
    {
        "number": 107,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)"
    },
    {
        "number": 107,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even_palindromes = 0\n    odd_palindromes = 0\n    \n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_palindromes += 1\n            else:\n                odd_palindromes += 1\n                \n    return (even_palindromes, odd_palindromes)"
    },
    {
        "number": 107,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    # initialize counters for even and odd palindromes\n    even_count = 0\n    odd_count = 0\n\n    # loop through each number in the range(1, n)\n    for num in range(1, n+1):\n        # convert the number to a string and check if it is a palindrome\n        if str(num) == str(num)[::-1]:\n            # check if the number is even or odd\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    # return a tuple of even_count and odd_count\n    return (even_count, odd_count)"
    },
    {
        "number": 107,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_palindrome(n):\n    \"\"\"\n    Helper function to check if a number is palindrome or not.\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\n\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    even_palindromes = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 0)\n    odd_palindromes = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 1)\n    return (even_palindromes, odd_palindromes)"
    },
    {
        "number": 107,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_palindrome(n):\n    \"\"\"\n    Helper function to check if a number is palindrome or not.\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    even_palindromes = 0\n    odd_palindromes = 0\n    for i in range(1, n+1):\n        if is_palindrome(i) and i % 2 == 0:\n            even_palindromes += 1\n        elif is_palindrome(i) and i % 2 == 1:\n            odd_palindromes += 1\n    return (even_palindromes, odd_palindromes)"
    },
    {
        "number": 107,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_palindrome(n):\n    \"\"\"\n    Check if a number is a palindrome.\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    count_even = count_odd = 0\n    for i in range(1, n+1):\n        if is_palindrome(i) and i % 2 == 0:\n            count_even += 1\n        elif is_palindrome(i) and i % 2 == 1:\n            count_odd += 1\n    return count_even, count_odd"
    },
    {
        "number": 107,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    # Initialize even and odd count to zero\n    even_count = 0\n    odd_count = 0\n    \n    # Loop through the range from 1 to n\n    for i in range(1, n+1):\n        \n        # Check if the number is a palindrome\n        if str(i) == str(i)[::-1]:\n            \n            # Check if the number is even or odd\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n                \n    # Return the tuple of even and odd count\n    return (even_count, odd_count)"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if sum(abs(int(digit)) for digit in str(abs(num))) > 0:\n            count += 1\n    return count"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_of_digits = sum(int(digit) for digit in str(abs(num)))\n        if sum_of_digits > 0:\n            count += 1\n    return count"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num > 0:\n            sum_of_digits = sum(int(digit) for digit in str(abs(num)))\n            if sum_of_digits > 0:\n                count += 1\n    return count"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num > 0:\n            sum_of_digits = 0\n            if num < 0:\n                num = -num\n            while num > 0:\n                sum_of_digits += num % 10\n                num //= 10\n            if sum_of_digits > 0:\n                count += 1\n    return count"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num > 0:\n            digits = list(map(int, str(abs(num))))\n            if sum(digits) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num >= 0:\n            sum_of_digits = sum(int(digit) for digit in str(num))\n            if sum_of_digits > 0:\n                count += 1\n        else:\n            # if the number is negative, then we need to calculate the sum of digits\n            # from the second digit onwards\n            sum_of_digits = sum(int(digit) for digit in str(abs(num))[1:])\n            if sum_of_digits > 0:\n                count += 1\n    return count"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if sum(map(abs, map(int, str(abs(num))))) > 0:\n            count += 1\n    return count"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    count = 0\n    for num in arr:\n        # calculate the sum of digits of the number\n        if num < 0:\n            digits_sum = abs(num)\n        else:\n            digits_sum = num\n        # check if the sum of digits is greater than 0\n        while digits_sum > 0:\n            digit = digits_sum % 10\n            if digit > 0:\n                count += 1\n                break\n            digits_sum //= 10\n    return count"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num > 0:\n            digits_sum = sum(int(digit) for digit in str(abs(num)))\n            if digits_sum > 0:\n                count += 1\n    return count"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def move_one_ball(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n            if count > 1:\n                return False\n            j = i\n            while j >= 0 and arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                j -= 1\n    return True"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n\n    # If the array is empty, then return True\n    if not arr:\n        return True\n\n    # Set the last element of the array as the first element\n    arr[0], arr[-1] = arr[-1], arr[0]\n\n    # Iterate through the array and check if the elements are in non-decreasing order\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n\n    return True"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def move_one_ball(arr):\n    n = len(arr)\n    if n == 0:\n        return True\n    for i in range(n):\n        if arr[i] < arr[i+1]:\n            return True\n    return False\n"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def move_one_ball(arr):\n    \"\"\"\n    We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].\n    The numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performing 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation: It is not possible to get non-decreasing order for the given\n                 array by performing any number of right shift operations.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return True\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return True\n    return False"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def move_one_ball(arr):\n    n = len(arr)\n    if n == 0:\n        return True\n    \n    # Performing right shift operation on each element of the array\n    for i in range(n-1):\n        j = i\n        while j < n-1 and arr[j+1] < arr[j]:\n            arr[j], arr[j+1] = arr[j+1], arr[j]\n            j += 1\n    \n    # Checking if the array is sorted or not\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n    \n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n    \n    Note: The given list is guaranteed to have unique elements.\n    \n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                 array by performing any number of right shift operations.\n    \"\"\"\n\n    n = len(arr)\n\n    if n == 0:\n        return True\n\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def move_one_ball(arr):\n    n = len(arr)\n    if n == 0:\n        return True\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            return move_one_ball(arr[:i+1] + arr[i+2:])\n    return True"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    n = len(arr)\n    arr = sorted(arr)\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            return False\n    return True"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n    \n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n    \n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return True\n    \n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            arr[i+1] = arr[i]\n            if i+1 == n-1:\n                return False\n    \n    return True"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def move_one_ball(arr):\n    n = len(arr)\n    \n    # If the array is empty, return True\n    if n == 0:\n        return True\n    \n    # Traverse the array from left to right\n    for i in range(n):\n        \n        # Traverse the array from right to left\n        for j in range(n-i-1):\n            \n            # If the current element is greater than the next element\n            if arr[j] > arr[j+1]:\n                \n                # Perform the right shift operation\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                \n                # Check if the array is sorted or not\n                for k in range(j+2, n):\n                    if arr[k-1] > arr[k]:\n                        return False\n                return True\n    \n    # If we reach here, it means we can't sort the array by performing right shift operations\n    return False"
    },
    {
        "number": 110,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # initialize variables to keep track of even and odd elements in lst1\n    even_count = 0\n    odd_count = 0\n    \n    # iterate through lst1 and count even and odd elements\n    for num in lst1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # if there are no odd elements, return \"YES\" since all elements in lst1 are even\n    if odd_count == 0:\n        return \"YES\"\n    \n    # initialize variables to keep track of even and odd elements in lst2\n    even_count2 = 0\n    odd_count2 = 0\n    \n    # iterate through lst2 and count even and odd elements\n    for num in lst2:\n        if num % 2 == 0:\n            even_count2 += 1\n        else:\n            odd_count2 += 1\n    \n    # if there are no odd elements in lst2, return \"NO\" since it's not possible to make lst1 even\n    if odd_count2 == 0:\n        return \"NO\"\n    \n    # initialize variables to keep track of even and odd elements in lst1 that can be exchanged with lst2\n    even_exchanged = 0\n    odd_exchanged = 0\n    \n    # iterate through lst1 and check if there are any even elements that can be exchanged with elements in lst2\n    for num in lst1:\n        if num % 2 == 0 and num in lst2:\n            even_exchanged += 1\n    \n    # iterate through lst2 and check if there are any even elements that can be exchanged with elements in lst1\n    for num in lst2:\n        if num % 2 == 0 and num in lst1:\n            even_exchanged += 1\n    \n    # if there are at least one even element that can be exchanged, return \"YES\"\n    if even_exchanged > 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 110,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    count = 0\n    for i in range(len(lst1)):\n        if lst1[i] % 2!= 0:\n            for j in range(len(lst2)):\n                if lst2[j] % 2 == 0 and lst2[j] not in lst1:\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n                    count += 1\n                    break\n    if count == len(lst1):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 110,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    even_lst1 = [num for num in lst1 if num % 2 == 0]\n    even_lst2 = [num for num in lst2 if num % 2 == 0]\n    exchanged = False\n    for num in even_lst1:\n        if num not in even_lst2:\n            exchanged = True\n            even_lst2.append(num)\n    if exchanged:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 110,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"\n    This function takes two lists of numbers, lst1 and lst2, and determines whether it is possible to perform an exchange of elements between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    \"\"\"\n    # Check if all elements in lst1 are even\n    if all(num % 2 == 0 for num in lst1):\n        return \"YES\"\n    else:\n        # If lst1 contains at least one odd number, check if swapping elements between lst1 and lst2 will make all elements in lst1 even\n        for i in range(len(lst1)):\n            # If an even number is found, swap it with an odd number in lst2\n            if lst1[i] % 2 == 0 and any(lst2[j] % 2!= 0 for j in range(len(lst2))):\n                # Swap the even number with an odd number in lst2\n                for j in range(len(lst2)):\n                    if lst2[j] % 2!= 0:\n                        lst1[i], lst2[j] = lst2[j], lst1[i]\n                        break\n                # Check if lst1 contains only even numbers now\n                if all(num % 2 == 0 for num in lst1):\n                    return \"YES\"\n        # If no valid exchange is found, return \"NO\"\n        return \"NO\""
    },
    {
        "number": 110,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\n    even_lst1 = [num for num in lst1 if num % 2 == 0]\n    even_lst2 = [num for num in lst2 if num % 2 == 0]\n\n    if len(even_lst1) < len(even_lst2):\n        even_lst1, even_lst2 = even_lst2, even_lst1\n\n    if len(even_lst1) == len(even_lst2):\n        for num in even_lst1:\n            if num not in even_lst2:\n                return \"NO\"\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 110,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\n    # Check if all elements of lst1 are even\n    for num in lst1:\n        if num % 2!= 0:\n            return \"NO\"\n    \n    # Check if the two lists have the same length\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n\n    # Check if there are any even numbers in lst2\n    for num in lst2:\n        if num % 2 == 0:\n            return \"NO\"\n    \n    # Check if there are any even numbers in lst1 that are not in lst2\n    for num in lst1:\n        if num % 2 == 0 and num not in lst2:\n            return \"NO\"\n    \n    # Check if there are any odd numbers in lst1 that are not in lst2\n    for num in lst1:\n        if num % 2!= 0 and num not in lst2:\n            return \"YES\"\n    \n    # If we reach this point, it means that we were able to exchange all even numbers\n    # from lst1 to make it a list of only even numbers.\n    return \"YES\""
    },
    {
        "number": 110,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Check that lst1 and lst2 have the same length\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n    \n    # Create two sets to store the even numbers from lst1 and lst2\n    even_set1 = set()\n    even_set2 = set()\n    \n    # Populate the sets with even numbers from lst1 and lst2\n    for num in lst1:\n        if num % 2 == 0:\n            even_set1.add(num)\n    for num in lst2:\n        if num % 2 == 0:\n            even_set2.add(num)\n    \n    # Check if the sets are equal\n    if even_set1 == even_set2:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 110,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    count = 0\n    for num in lst1:\n        if num % 2!= 0:\n            count += 1\n    if count == len(lst1):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 110,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    n = len(lst1)\n    count = 0\n    \n    for i in range(n):\n        if lst1[i] % 2!= 0:\n            for j in range(n):\n                if lst2[j] % 2 == 0:\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n                    count += 1\n                    break\n            if count == n:\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 110,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Convert the lists to sets to remove duplicates and then back to lists\n    lst1 = list(set(lst1))\n    lst2 = list(set(lst2))\n    \n    # Iterate through the elements in lst1 and check if they are even\n    for num in lst1:\n        if num % 2!= 0:\n            return \"NO\"\n    \n    # Iterate through the elements in lst2 and check if they are even\n    for num in lst2:\n        if num % 2!= 0:\n            return \"NO\"\n    \n    # Check if all the elements in lst1 are even\n    if all(num % 2 == 0 for num in lst1):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \n    \"\"\"\n    if not test:\n        return {}\n    \n    counts = {}\n    for letter in test.split():\n        counts[letter] = counts.get(letter, 0) + 1\n    \n    max_count = max(counts.values())\n    result = {}\n    for letter, count in counts.items():\n        if count == max_count:\n            result[letter] = count\n    \n    return result"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Splitting the input string into individual letters\n    letters = test.split()\n\n    # Creating an empty dictionary to store the letter with their count\n    letter_count = {}\n\n    # Looping through each letter of the input string\n    for letter in letters:\n        # If the letter is already present in the dictionary, increment its count by 1\n        if letter in letter_count:\n            letter_count[letter] += 1\n        # If the letter is not present in the dictionary, add it to the dictionary with count 1\n        else:\n            letter_count[letter] = 1\n\n    # Finding the letter with the highest count in the dictionary\n    max_count = 0\n    max_letters = []\n    for letter, count in letter_count.items():\n        if count > max_count:\n            max_count = count\n            max_letters = [letter]\n        elif count == max_count:\n            max_letters.append(letter)\n\n    # Creating a dictionary containing the letter with the highest count and its count\n    result = {}\n    for letter in max_letters:\n        result[letter] = letter_count[letter]\n\n    return result"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Create a dictionary to store the letter counts\n    count_dict = {}\n    # Split the input string into a list of individual letters\n    letters = test.split()\n    # Loop through the list of letters and update the dictionary with counts\n    for letter in letters:\n        if letter in count_dict:\n            count_dict[letter] += 1\n        else:\n            count_dict[letter] = 1\n    # Find the maximum count\n    max_count = max(count_dict.values())\n    # Create a new dictionary with only the letters with max count\n    result_dict = {k:v for k,v in count_dict.items() if v == max_count}\n    return result_dict"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \n    \"\"\"\n    freq = {}\n    for letter in test.split():\n        freq[letter] = freq.get(letter, 0) + 1\n    \n    max_freq = max(freq.values())\n    max_letters = [letter for letter, count in freq.items() if count == max_freq]\n    \n    return dict(zip(max_letters, [max_freq] * len(max_letters)))"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \n    \"\"\"\n    \n    # Split the test string into a list of characters\n    chars = test.split()\n    \n    # Create an empty dictionary to store the histogram\n    histogram_dict = {}\n    \n    # Loop through each character in the list\n    for char in chars:\n        # If the character is already in the dictionary, increment its count by 1\n        if char in histogram_dict:\n            histogram_dict[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            histogram_dict[char] = 1\n    \n    # Find the maximum count in the dictionary\n    max_count = max(histogram_dict.values())\n    \n    # Create a new dictionary with only the characters that occur with the maximum count\n    max_histogram_dict = {}\n    for char, count in histogram_dict.items():\n        if count == max_count:\n            max_histogram_dict[char] = count\n    \n    return max_histogram_dict"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Convert the string to a list of characters\n    chars = list(test)\n    \n    # Create an empty dictionary to hold the histogram\n    hist = {}\n    \n    # Iterate over each character in the list and update the dictionary\n    for char in chars:\n        if char in hist:\n            hist[char] += 1\n        else:\n            hist[char] = 1\n    \n    # Find the maximum count in the dictionary\n    max_count = max(hist.values())\n    \n    # Create a new dictionary containing only the letters with the maximum count\n    result = {}\n    for char, count in hist.items():\n        if count == max_count:\n            result[char] = count\n    \n    # If there are multiple letters with the maximum count, return all of them\n    if len(result) > 1:\n        return result\n    # Otherwise, return the single letter with the maximum count\n    else:\n        return result.popitem()[1]"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\"\"\"\n\n    # convert the string to a list of characters\n    letters = list(test.lower())\n\n    # initialize a dictionary to count the occurrences of each letter\n    counts = {}\n\n    # count the occurrences of each letter\n    for letter in letters:\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n\n    # find the letter(s) with the highest count\n    max_count = max(counts.values())\n\n    # find all the letters with the highest count\n    result = {letter: count for letter, count in counts.items() if count == max_count}\n\n    return result"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\"\"\"\n    hist = {}\n    for letter in test.split():\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n    result = {}\n    for letter, count in hist.items():\n        if count == max_count:\n            result[letter] = count\n    return result"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\"\"\"\n\n    # Split the input string into a list of characters\n    chars = test.split()\n\n    # Initialize an empty dictionary to store the result\n    result = {}\n\n    # Iterate over the characters in the list\n    for char in chars:\n        # If the character is already in the dictionary, increment its count\n        if char in result:\n            result[char] += 1\n        # Otherwise, add the character to the dictionary with a count of 1\n        else:\n            result[char] = 1\n\n    # Find the maximum count in the dictionary\n    max_count = max(result.values())\n\n    # Create a new dictionary with only the letters that have the maximum count\n    max_result = {k: v for k, v in result.items() if v == max_count}\n\n    # If there are several letters with the maximum count, return all of them\n    if len(max_result) > 1:\n        return max_result\n    # Otherwise, return the dictionary with the letter and its count\n    else:\n        return max_result.popitem()"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\"\"\"\n\n    # Convert the string to a list of letters\n    letters = list(test)\n\n    # Create a dictionary to store the letter counts\n    letter_counts = {}\n\n    # Loop through the letters and count their occurrences\n    for letter in letters:\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        else:\n            letter_counts[letter] = 1\n\n    # Find the highest count and corresponding letters\n    max_count = max(letter_counts.values())\n    max_letters = [letter for letter, count in letter_counts.items() if count == max_count]\n\n    # Return a dictionary of the letter(s) with the most repetition(s)\n    return {letter: letter_counts[letter] for letter in max_letters}"
    },
    {
        "number": 112,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_delete(s, c):\n    # remove characters in s that are in c\n    s = ''.join(c for c in s if c not in c)\n    # check if the result is palindrome\n    is_palindrome = s == s[::-1]\n    return s, is_palindrome"
    },
    {
        "number": 112,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    # Convert both strings to sets to remove duplicates and check intersection\n    c_set = set(c)\n    s_set = set(s)\n    intersect_set = s_set.intersection(c_set)\n\n    # Remove characters that are in intersect_set from s\n    s = ''.join([char for char in s if char not in intersect_set])\n\n    # Check if s is palindrome\n    is_palindrome = s == s[::-1]\n\n    # Return result string and is_palindrome\n    return (s, is_palindrome)"
    },
    {
        "number": 112,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    # Delete characters from s that are in c\n    s = ''.join([char for char in s if char not in c])\n\n    # Check if s is palindrome\n    is_palindrome = True\n    for i in range(len(s) // 2):\n        if s[i]!= s[len(s) - 1 - i]:\n            is_palindrome = False\n            break\n\n    return (s, is_palindrome)"
    },
    {
        "number": 112,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_delete(s, c):\n    \"\"\"\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Convert the string to a list for easy manipulation\n    s = list(s)\n\n    # Loop through the list and remove any characters that are in the c string\n    for char in c:\n        while char in s:\n            s.remove(char)\n\n    # Convert the list back to a string\n    result = ''.join(s)\n\n    # Check if the string is a palindrome\n    is_palindrome = result == result[::-1]\n\n    return result, is_palindrome"
    },
    {
        "number": 112,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # First, we delete all characters in s that are equal to any character in c using list comprehension\n    result = ''.join([char for char in s if char not in c])\n    # Next, we check if the result string is palindrome\n    if result == result[::-1]:\n        return (result, True)\n    else:\n        return (result, False)"
    },
    {
        "number": 112,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_delete(s, c):\n    \"\"\"\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # create a set of characters in c\n    c_set = set(c)\n    # create a new string without characters in c\n    s_new = \"\".join([char for char in s if char not in c_set])\n    # check if the new string is a palindrome\n    is_palindrome = s_new == s_new[::-1]\n    # return the result string and is_palindrome tuple\n    return s_new, is_palindrome"
    },
    {
        "number": 112,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_delete(s, c):\n    \"\"\"\n    Deletes all characters in s that are equal to any character in c,\n    then checks if the resulting string is a palindrome.\n    \"\"\"\n    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    if result == result[::-1]:\n        return (result, True)\n    else:\n        return (result, False)"
    },
    {
        "number": 112,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    if result == result[::-1]:\n        return (result,True)\n    else:\n        return (result,False)"
    },
    {
        "number": 112,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_delete(s,c):\n    \"\"\"\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    \"\"\"\n    \n    # remove all characters from s that are in c\n    for char in c:\n        s = s.replace(char,\"\")\n    \n    # check if the resulting string is a palindrome\n    if s == s[::-1]:\n        return (s,True)\n    else:\n        return (s,False)"
    },
    {
        "number": 112,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s) #convert string to list\n    for char in c:\n        while char in s:\n            s.remove(char) #remove all occurrences of char in s\n    s = ''.join(s) #convert list to string\n    return (s, s == s[::-1]) #check if string is palindrome and return tuple\n"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    output = []\n    for s in lst:\n        count = 0\n        for c in s:\n            if int(c) % 2!= 0:\n                count += 1\n        output.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return output"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        count = 0\n        for char in lst[i]:\n            if int(char) % 2!= 0:\n                count += 1\n        result.append(\"the number of odd elements {}n the string {} of the input.\".format(count, i+1))\n    return result"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    odd_lst = []\n    for string in lst:\n        count = 0\n        for digit in string:\n            if int(digit) % 2 == 1:\n                count += 1\n        odd_lst.append(\"the number of odd elements \" + str(count) + \"n the str\" + str(lst.index(string)+1) + \"ng \" + str(lst.index(string)+1) + \" of the \" + str(lst.index(string)+1) + \"nput.\")\n    return odd_lst\n"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        count = 0\n        for j in lst[i]:\n            if int(j)%2 == 1:\n                count += 1\n        result.append(f\"the number of odd elements {count}n the str{i+1}ng {i+1} of the {i+1}nput.\")\n    return result"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\n    odd_list = []\n    for i in lst:\n        count = 0\n        for j in i:\n            if int(j) % 2!= 0:\n                count += 1\n        odd_list.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return odd_list"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_count(lst):\n    \"\"\"\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    Example:\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for string in lst:\n        count = 0\n        for digit in string:\n            if int(digit) % 2!= 0:\n                count += 1\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, string, count, string))\n    return result"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        count = 0\n        for j in range(len(lst[i])):\n            if int(lst[i][j]) % 2 == 1:\n                count += 1\n        result.append(\"the number of odd elements \" + str(count) + \"n the str\" + str(i+1) + \"ng \" + str(i+1) + \" of the \" + str(i+1) + \"nput.\")\n    return result"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for i, string in enumerate(lst):\n        count = 0\n        for digit in string:\n            if int(digit) % 2!= 0:\n                count += 1\n        result.append(f\"the number of odd elements {count}n the str{i+1}ng {i+1} of the {i+1}nput.\")\n    return result"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n    \"\"\"\n    result = []\n    for s in lst:\n        count = 0\n        for c in s:\n            if int(c) % 2!= 0:\n                count += 1\n        result.append(\"the number of odd elements {}n the string {} of the input.\".format(count, lst.index(s) + 1))\n    return result"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        count = 0\n        for digit in lst[i]:\n            if int(digit) % 2!= 0:\n                count += 1\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, i, i, i))\n    return result"
    },
    {
        "number": 114,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Initialize variables\n    min_subarray_sum = float('inf')\n    current_subarray_sum = 0\n    \n    # Iterate through the array\n    for i in range(len(nums)):\n        # Add the current element to the current subarray sum\n        current_subarray_sum += nums[i]\n        \n        # If the current subarray sum is less than or equal to zero,\n        # reset it to zero and move on to the next element\n        if current_subarray_sum <= 0:\n            current_subarray_sum = 0\n            continue\n        \n        # If the current subarray sum is less than the current minimum sum,\n        # update the minimum sum\n        if current_subarray_sum < min_subarray_sum:\n            min_subarray_sum = current_subarray_sum\n    \n    return min_subarray_sum"
    },
    {
        "number": 114,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n = len(nums)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i-1] + nums[i-1]\n    min_sum = float('inf')\n    for i in range(1, n + 1):\n        for j in range(i):\n            curr_sum = prefix_sum[i] - prefix_sum[j]\n            if curr_sum < min_sum:\n                min_sum = curr_sum\n    return min_sum"
    },
    {
        "number": 114,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n\n    # Initialize the variables\n    min_subarray_sum = float('inf')\n    current_subarray_sum = 0\n\n    # Loop through the array\n    for num in nums:\n        # Add the number to the current subarray sum\n        current_subarray_sum += num\n\n        # Check if the current subarray sum is less than the current minimum subarray sum\n        if current_subarray_sum < min_subarray_sum:\n            # If it is, update the minimum subarray sum\n            min_subarray_sum = current_subarray_sum\n\n        # If the current subarray sum is negative, reset it to zero\n        if current_subarray_sum < 0:\n            current_subarray_sum = 0\n\n    return min_subarray_sum"
    },
    {
        "number": 114,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n = len(nums)\n    if n == 0:\n        return 0\n\n    # initialize variables to track the current sum and the minimum sum found so far\n    current_sum = nums[0]\n    min_sum = current_sum\n\n    # iterate through the array\n    for i in range(1, n):\n        # add the current element to the current sum\n        current_sum += nums[i]\n\n        # if the current sum is less than or equal to zero, reset the current sum to zero and move on to the next element\n        if current_sum <= 0:\n            current_sum = 0\n            continue\n\n        # if the current sum is greater than the minimum sum found so far, update the minimum sum\n        if current_sum < min_sum:\n            min_sum = current_sum\n\n    return min_sum"
    },
    {
        "number": 114,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    else:\n        min_sum = float('inf')\n        curr_sum = 0\n        for num in nums:\n            curr_sum += num\n            if curr_sum < min_sum:\n                min_sum = curr_sum\n            if curr_sum < 0:\n                curr_sum = 0\n        return min_sum"
    },
    {
        "number": 114,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    # Initialize variables to store the minimum sum and the current sum of the sub-array\n    min_sum = float('inf')\n    curr_sum = 0\n    \n    # Traverse through the array and keep adding the elements to the current sum\n    for num in nums:\n        curr_sum += num\n        \n        # If the current sum is less than or equal to 0, reset it to 0 and continue\n        if curr_sum <= 0:\n            curr_sum = 0\n            continue\n        \n        # If the current sum is less than the minimum sum found so far, update the minimum sum\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n    \n    return min_sum"
    },
    {
        "number": 114,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n = len(nums)\n    if n == 1:\n        return nums[0]\n    else:\n        min_sum = float('inf')\n        curr_sum = 0\n        start = 0\n        end = 0\n        for i in range(n):\n            curr_sum += nums[i]\n            while curr_sum >= min_sum and start <= i:\n                min_sum = curr_sum\n                start += 1\n            if curr_sum < min_sum:\n                min_sum = curr_sum\n                start = 0\n                end = 0\n            if curr_sum == min_sum and end < start:\n                end = i\n        return min_sum"
    },
    {
        "number": 114,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n\n    return min_sum"
    },
    {
        "number": 114,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n\n    # Initialize variables\n    n = len(nums)\n    current_sum = max_sum = nums[0]\n\n    # Traverse through the array\n    for i in range(1, n):\n        current_sum = max(nums[i], current_sum + nums[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 114,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n = len(nums)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return nums[0]\n\n    # Initialize the variables\n    min_sum = nums[0]\n    curr_sum = nums[0]\n\n    # Loop through the array\n    for i in range(1, n):\n        curr_sum = max(nums[i], curr_sum + nums[i])\n        min_sum = min(min_sum, curr_sum)\n\n    return min_sum"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    n_rows = len(grid)\n    n_cols = len(grid[0])\n    # calculate the maximum number of times we can empty the grid\n    max_empty = math.floor(n_rows * n_cols / capacity)\n    # create a list to store the number of times we can empty each well\n    well_fills = [[0 for j in range(n_cols)] for i in range(n_rows)]\n    # initialize the number of empty buckets to the number of wells\n    empty_buckets = n_rows\n    # create a list to store the indexes of the filled wells\n    filled_wells = []\n    # loop through the grid and fill each well with water\n    for i in range(n_rows):\n        for j in range(n_cols):\n            if grid[i][j] == 1:\n                # if the well is already filled, skip it\n                if (i, j) in filled_wells:\n                    continue\n                # fill the well with water\n                empty_buckets -= 1\n                filled_wells.append((i, j))\n                # calculate the number of times we can empty the well\n                well_fills[i][j] = math.ceil(capacity / (j - filled_wells[0][1] + 1))\n                # if we exceed the maximum number of times we can empty the grid, return the maximum number of times\n                if well_fills[i][j] > max_empty:\n                    return max_empty\n                # loop through the filled wells and update their number of times we can empty them\n                for well in filled_wells:\n                    well_fills[well[0]][well[1]] = math.ceil(capacity / (well[1] - filled_wells[0][1] + 1))\n                # update the maximum number of times we can empty the grid\n                max_empty = min(max_empty, well_fills[i][j])\n    return max_empty"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_fill(grid, capacity):\n    rows, cols = len(grid), len(grid[0])\n    count = 0\n\n    # compute the maximum number of units that can be extracted in each well\n    max_units = [max(grid[i][j], 1) for j in range(cols) for i in range(rows)]\n\n    # distribute the units among the buckets\n    while sum(max_units) > capacity:\n        # find the index of the well with the largest number of units\n        idx = max_units.index(max(max_units))\n        i, j = idx // cols, idx % cols\n\n        # empty the well with the largest number of units\n        count += 1\n        max_units[idx] = 0\n\n        # update the units in the neighboring wells\n        if j > 0:\n            max_units[idx - 1] = max(max_units[idx - 1], max_units[idx] + grid[i][j - 1])\n        if j < cols - 1:\n            max_units[idx + 1] = max(max_units[idx + 1], max_units[idx] + grid[i][j + 1])\n        if i > 0:\n            max_units[idx - cols] = max(max_units[idx - cols], max_units[idx] + grid[i - 1][j])\n        if i < rows - 1:\n            max_units[idx + cols] = max(max_units[idx + cols], max_units[idx] + grid[i + 1][j])\n\n    return count"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_fill(grid, capacity):\n    n_rows, n_cols = len(grid), len(grid[0])\n    bucket_size = math.ceil(capacity / n_rows)\n    \n    # Initialize the buckets with 0 water\n    buckets = [0] * n_rows\n    \n    # Fill the buckets one by one\n    max_buckets_filled = 0\n    for i in range(n_rows):\n        for j in range(n_cols):\n            if grid[i][j] == 1:\n                # Check if there's enough water in the current bucket to fill the well\n                if buckets[i] + bucket_size <= capacity:\n                    # Fill the bucket with water\n                    buckets[i] += bucket_size\n                else:\n                    # Move water from other buckets to the current bucket\n                    buckets[i] = capacity\n                    for k in range(i+1, n_rows):\n                        if buckets[k] > 0:\n                            buckets[i] -= bucket_size\n                            buckets[k] -= bucket_size\n                            break\n        max_buckets_filled = max(max_buckets_filled, sum(buckets))\n    \n    return max_buckets_filled"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_fill(grid, capacity):\n    m, n = len(grid), len(grid[0])\n    dp = [[0] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = grid[i][j]\n            elif i == 0 and j!= 0:\n                dp[i][j] = dp[i][j - 1] + grid[i][j]\n            elif i!= 0 and j == 0:\n                dp[i][j] = dp[i - 1][j] + grid[i][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n    return math.ceil(dp[-1][-1] / capacity)"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    \n    rows, cols = len(grid), len(grid[0])\n    bucket_levels = [[0]*cols for _ in range(rows)] # stores levels of each bucket\n    \n    # Initialize the first row with the initial levels of the buckets\n    for j in range(cols):\n        bucket_levels[0][j] = grid[0][j] * capacity\n        \n    # Fill the rest of the grid using the previous row's levels\n    for i in range(1, rows):\n        for j in range(cols):\n            # We can either fill the current well with the previous row's level or the level of the previous bucket\n            bucket_levels[i][j] = max(bucket_levels[i-1][j], bucket_levels[i][j-1])\n            \n            # If we filled the current well with the previous row's level, we need to empty the previous bucket before moving on\n            if bucket_levels[i][j] == bucket_levels[i-1][j]:\n                bucket_levels[i-1][j] = 0\n            \n            # If we filled the current well with the level of the previous bucket, we need to empty the current well before moving on\n            if bucket_levels[i][j] == bucket_levels[i][j-1]:\n                bucket_levels[i][j] = 0\n                \n            # If we filled the current well with water, we need to empty the bucket at the previous level before moving on\n            if grid[i][j] == 1:\n                bucket_levels[i][j] = min(bucket_levels[i][j], bucket_levels[i][j-1])\n                \n    # Return the maximum number of times we need to lower the buckets\n    return max(bucket_levels[-1])\n"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_fill(grid, capacity):\n    n_rows = len(grid)\n    n_cols = len(grid[0])\n    n_wells = n_rows * n_cols\n    buckets = [0] * n_wells\n    total_water = sum(grid[i][j] for i in range(n_rows) for j in range(n_cols))\n    if total_water == 0:\n        return 0\n\n    def well_to_bucket(well_id):\n        return well_id // n_cols\n\n    def bucket_to_wells(bucket_id):\n        return [(bucket_id * n_cols + i) for i in range(n_cols)]\n\n    def fill_bucket(bucket_id, bucket_capacity):\n        wells_to_fill = bucket_to_wells(bucket_id)\n        current_bucket_water = sum(grid[i // n_cols][i % n_cols] for i in wells_to_fill)\n        if current_bucket_water == 0:\n            return 0\n        max_bucket_fill = math.floor(bucket_capacity / current_bucket_water)\n        if max_bucket_fill == 0:\n            return 0\n        bucket_water_to_fill = min(bucket_capacity, current_bucket_water)\n        for well_id in wells_to_fill:\n            buckets[well_id] = max_bucket_fill\n        return max_bucket_fill\n\n    max_fills = 0\n    while total_water > 0:\n        current_bucket = 0\n        current_bucket_capacity = capacity\n        while current_bucket < n_wells:\n            next_bucket = current_bucket + well_to_bucket(current_bucket + 1)\n            if next_bucket - current_bucket > n_wells or next_bucket == n_wells:\n                next_bucket = n_wells\n            current_bucket_fills = fill_bucket(current_bucket, current_bucket_capacity)\n            if current_bucket_fills == 0:\n                break\n            total_water -= current_bucket_fills * current_bucket_capacity\n            max_fills += current_bucket_fills\n            current_bucket = next_bucket\n            current_bucket_capacity = capacity\n        if current_bucket_fills == 0:\n            break\n    return max_fills"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_fill(grid, capacity):\n    import math\n    \n    rows = len(grid)\n    cols = len(grid[0])\n    \n    # calculate the total number of water units\n    water_units = 0\n    for row in grid:\n        water_units += sum(row)\n    \n    # calculate the total number of buckets required\n    num_buckets = math.ceil(water_units / capacity)\n    \n    # check if there are enough buckets to empty the wells\n    if num_buckets > rows * cols:\n        return -1\n    \n    # calculate the number of times we need to lower the buckets\n    times_to_lower_buckets = 0\n    current_level = 0\n    for row in grid:\n        for unit in row:\n            if unit == 1:\n                if current_level == 0:\n                    times_to_lower_buckets += 1\n                elif current_level < num_buckets:\n                    times_to_lower_buckets += num_buckets - current_level\n                current_level = 0\n            else:\n                current_level += 1\n                if current_level == num_buckets:\n                    current_level = 0\n    \n    return times_to_lower_buckets"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_fill(grid, capacity):\n    rows = len(grid)\n    cols = len(grid[0])\n    total_water = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                total_water += 1\n    if total_water <= capacity:\n        return 0\n    num_buckets = math.ceil(total_water / capacity)\n    num_times_to_fill = 0\n    while total_water > 0:\n        num_times_to_fill += 1\n        total_water -= num_buckets\n        total_water = max(total_water, 0)\n    return num_times_to_fill"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_fill(grid, capacity):\n    rows, cols = len(grid), len(grid[0])\n    count = 0\n    # For each well, we check how many times we can fill the bucket\n    for row in range(rows):\n        for col in range(cols):\n            if grid[row][col] == 1:\n                # Check how many times we can fill the bucket\n                max_units = min(capacity, sum(grid[row]))\n                count += max_units // capacity\n                # Empty the well by setting all units to 0\n                for i in range(row, rows):\n                    grid[i][col] = 0\n    return count"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_fill(grid, capacity):\n    n = len(grid)\n    m = len(grid[0])\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    # find the maximum water that can be stored in each well\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if grid[i - 1][j - 1] == 1:\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n    \n    # calculate the number of times we need to lower the buckets\n    return math.ceil(sum(dp[i][j] for i in range(n + 1) for j in range(m + 1)) / capacity)"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_array(arr):\n    def count_ones(n):\n        return bin(n)[2:].count('1')\n\n    def sort_key(n):\n        return (count_ones(n), n)\n\n    return sorted(arr, key=sort_key)"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Convert each integer to a binary string, count the number of ones, and store them in a dictionary\n    ones_count = {}\n    for num in arr:\n        binary = bin(abs(num))[2:] # Convert the integer to a binary string and remove the '0b' prefix\n        ones_count[num] = binary.count('1')\n\n    # Sort the array based on the ones count and decimal value\n    sorted_arr = sorted(arr, key=lambda x: (ones_count[x], x))\n\n    return sorted_arr"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_array(arr):\n    # Create a list of tuples (num_ones, decimal_value, num)\n    # where num_ones is the number of ones in the binary representation of num,\n    # decimal_value is the decimal value of num, and num is the original number.\n    nums = [(bin(num).count('1'), num, num) for num in arr]\n    \n    # Sort the list by num_ones in ascending order, then by decimal value in ascending order.\n    nums.sort()\n    \n    # Extract the sorted list of numbers and return it.\n    return [num[2] for num in nums]"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x: (bin(x).count('1'), x))\n    return arr"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    \"\"\"\n    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(abs(x)).count('1'), x))"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Define a helper function to count the number of ones in a given number\n    def count_ones(n):\n        count = 0\n        while n > 0:\n            count += n & 1\n            n >>= 1\n        return count\n\n    # Define a key function to sort by number of ones and then by decimal value\n    def key_func(n):\n        return (count_ones(n), n)\n\n    # Return the sorted array\n    return sorted(arr, key=key_func)"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Define a helper function to count the number of ones in a binary representation of a non-negative integer\n    def count_ones(n):\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n\n    # Sort the array based on the number of ones in their binary representation, and then on the decimal value\n    arr.sort(key=lambda n: (count_ones(n), n))\n\n    return arr"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    \"\"\"\n    return sorted(arr, key=lambda x: (sum(int(i) for i in bin(x)[2:]), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(n):\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n\n    def key_fn(n):\n        return count_ones(n), n\n\n    return sorted(arr, key=key_fn)"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    \"\"\"\n    # If the string is empty, return an empty list\n    if not s:\n        return []\n\n    # Split the string into words\n    words = s.split()\n\n    # Create an empty list to store the selected words\n    selected_words = []\n\n    # Loop through each word in the list\n    for word in words:\n        # Count the number of consonants in the word\n        consonants = sum(1 for c in word if c.isalpha() and c.islower() and c not in \"aeiou\")\n\n        # If the number of consonants matches the given value, add the word to the list of selected words\n        if consonants == n:\n            selected_words.append(word)\n\n    # Return the list of selected words\n    return selected_words"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if not s:\n        return []\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = [char for char in word if char not in \"aeiouAEIOU\"]\n        if len(consonants) == n:\n            result.append(word)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    \"\"\"\n    # check if s is empty\n    if not s:\n        return []\n    \n    # convert s to list of words\n    words = s.split()\n    \n    # initialize an empty list to store selected words\n    selected_words = []\n    \n    # loop through each word in the list\n    for word in words:\n        # count the number of consonants in the word\n        count = sum(1 for char in word if char.lower() not in 'aeiou')\n        \n        # if the number of consonants in the word is equal to n\n        if count == n:\n            # add the word to the selected_words list\n            selected_words.append(word)\n    \n    # return the selected_words list\n    return selected_words"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = 0\n        for letter in word:\n            if letter.isalpha() and letter.lower() not in \"aeiou\":\n                consonants += 1\n        if consonants == n:\n            result.append(word)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def select_words(s, n):\n    # split the string into words\n    words = s.split()\n    \n    # create a list to store the selected words\n    selected_words = []\n    \n    # iterate over each word in the list\n    for word in words:\n        # count the number of consonants in the word\n        num_consonants = sum(1 for c in word if c.isalpha() and c.lower() not in \"aeiou\")\n        \n        # if the number of consonants is equal to n, add the word to the list of selected words\n        if num_consonants == n:\n            selected_words.append(word)\n    \n    # return the list of selected words\n    return selected_words"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    \"\"\"\n    # If the string is empty, return an empty list\n    if not s:\n        return []\n    \n    # Initialize a list to store the words with n consonants\n    words = []\n    \n    # Split the string into words\n    s_words = s.split()\n    \n    # Iterate over each word in the list and count the number of consonants\n    for word in s_words:\n        count = 0\n        for letter in word:\n            if letter.isalpha() and letter not in \"aeiouAEIOU\":\n                count += 1\n        # If the number of consonants matches n, add the word to the list\n        if count == n:\n            words.append(word)\n    \n    # Return the list of words with n consonants\n    return words"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    \"\"\"\n    # Splitting the string into words\n    words = s.split()\n\n    # Initialize an empty list to store the words that match the criteria\n    matching_words = []\n\n    # Loop through each word in the list\n    for word in words:\n        # Initialize a counter for consonants\n        consonant_count = 0\n\n        # Loop through each character in the word\n        for char in word:\n            # Check if the character is a consonant\n            if char.lower() not in \"aeiou\":\n                # Increment the counter for consonants\n                consonant_count += 1\n\n        # Check if the counter for consonants is equal to n\n        if consonant_count == n:\n            # Add the word to the list of matching words\n            matching_words.append(word)\n\n    # Return the list of matching words\n    return matching_words"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    \"\"\"\n    # Splitting the string into a list of words\n    words = s.split()\n    \n    # Creating an empty list to store the words with exactly n consonants\n    result = []\n    \n    # Iterating over each word in the list\n    for word in words:\n        # Counting the number of consonants in the word\n        consonant_count = 0\n        for char in word:\n            if char.lower() not in ['a', 'e', 'i', 'o', 'u']:\n                consonant_count += 1\n        \n        # If the word contains exactly n consonants, adding it to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    return result"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def select_words(s, n):\n    if not s:\n        return []\n\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    words = s.split()\n    result = []\n\n    for word in words:\n        consonants = sum(1 for c in word if c.lower() not in vowels)\n        if consonants == n:\n            result.append(word)\n\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if s == '':\n        return []\n    else:\n        words = s.split()\n        result = []\n        for word in words:\n            if len([c for c in word if c.isalpha() and c.islower() and c not in 'aeiou']) == n:\n                result.append(word)\n        return result"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    closest_vowel = \"\"\n    for i in range(len(word)-2, -1, -1):\n        if word[i] in vowels and word[i+1] not in vowels:\n            closest_vowel = word[i]\n            break\n    return closest_vowel"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_closest_vowel(word):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    for i in range(1, len(word)-1):\n        if word[i].isalpha() and word[i] in vowels:\n            if word[i-1].isalpha() and word[i-1] not in vowels:\n                return word[i]\n            elif word[i+1].isalpha() and word[i+1] not in vowels:\n                return word[i]\n    return \"\""
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_closest_vowel(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    last_consonant = ''\n    for char in word[::-1]:\n        if char.lower() in vowels:\n            if last_consonant:\n                return char.lower()\n        else:\n            last_consonant = char.lower()\n    return ''"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_closest_vowel(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    index = len(word) - 1\n    while index >= 0:\n        if word[index].lower() in vowels:\n            return word[index]\n        index -= 1\n    return ''"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    last_vowel_index = -1\n    \n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels and last_vowel_index == -1:\n            last_vowel_index = i\n        elif word[i] not in vowels and last_vowel_index!= -1:\n            break\n    \n    if last_vowel_index == -1:\n        return \"\"\n    \n    for vowel in vowels:\n        if vowel!= word[last_vowel_index] and (vowel in word[last_vowel_index+1:]):\n            return vowel\n    \n    return \"\""
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_closest_vowel(word):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    word = word.lower()\n    i = len(word) - 1\n    while i >= 0:\n        if word[i] in vowels:\n            if i!= len(word) - 1 and word[i+1] not in vowels:\n                return word[i]\n            elif i!= 0 and word[i-1] not in vowels:\n                return word[i]\n        i -= 1\n    return ''"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            for j in range(i+1, len(word)):\n                if word[j] not in vowels:\n                    return word[j]\n    return \"\""
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n    \n    You may assume that the given string contains English letter only.\n    \n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    closest_vowel = ''\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            closest_vowel = word[i]\n            break\n    return closest_vowel"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_closest_vowel(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(word)-2, -1, -1):\n        if word[i] in vowels:\n            return word[i]\n    return ''\n\nprint(get_closest_vowel(\"yogurt\")) # Output: u\nprint(get_closest_vowel(\"FULL\")) # Output: U\nprint(get_closest_vowel(\"quick\")) # Output: \nprint(get_closest_vowel(\"ab\")) # Output: "
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_closest_vowel(word):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    i = len(word) - 1\n    while i >= 0:\n        if word[i] in vowels:\n            if i == 0 or word[i-1] not in vowels:\n                return word[i]\n            if i == len(word) - 1 or word[i+1] not in vowels:\n                return word[i]\n        i -= 1\n    return ''"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def match_parens(lst):\n    # Check if the input is valid\n    if len(lst)!= 2 or len(lst[0])!= len(lst[1]) or not all(c in '()' for s in lst for c in s):\n        return 'Invalid input'\n\n    # Initialize a stack to keep track of open parentheses\n    stack = []\n\n    # Iterate over the characters of the two strings and match them\n    for c1, c2 in zip(lst[0], lst[1]):\n        # If we encounter an open parenthesis, push it onto the stack\n        if c1 == '(':\n            stack.append(c1)\n        # If we encounter a close parenthesis, pop the top element from the stack\n        elif c2 == ')':\n            if not stack:\n                # If the stack is empty, we can't match the parentheses\n                return 'No'\n            stack.pop()\n\n    # If we've made it this far, the parentheses are balanced and we can concatenate the strings\n    return 'Yes'"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def match_parens(lst):\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    \"\"\"\n    # convert the list of strings to a single string\n    s = ''.join(lst)\n\n    # check if the string is balanced\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append('(')\n        elif c == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n\n    # if we get here, the string is balanced\n    return 'Yes'"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def match_parens(lst):\n    stack = []\n    for char in lst[0]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            else:\n                stack.pop()\n    if stack:\n        return 'No'\n    else:\n        return 'Yes'"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def match_parens(lst):\n    open_count = 0\n    for c in lst[0]:\n        if c == '(':\n            open_count += 1\n        else:\n            open_count -= 1\n        if open_count < 0:\n            return 'No'\n    close_count = 0\n    for c in lst[1]:\n        if c == ')':\n            close_count += 1\n        else:\n            close_count -= 1\n        if close_count < 0:\n            return 'No'\n    if open_count!= 0 or close_count!= 0:\n        return 'No'\n    return 'Yes'"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def match_parens(lst):\n    s1, s2 = lst\n    stack = []\n    for c in s1:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack or stack[-1]!= '(':\n                return 'No'\n            stack.pop()\n    while stack:\n        if stack[-1] == '(':\n            return 'No'\n        stack.pop()\n    stack = []\n    for c in s2:\n        if c == ')':\n            stack.append(c)\n        elif c == '(':\n            if not stack or stack[-1]!= ')':\n                return 'No'\n            stack.pop()\n    while stack:\n        if stack[-1] == ')':\n            return 'No'\n        stack.pop()\n    return 'Yes'"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    def is_balanced(s):\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n\n    def find_permutation(s):\n        if not s:\n            return ['']\n        if len(s) == 1:\n            return [s]\n        permutations = []\n        for perm in find_permutation(s[1:]):\n            for i in range(len(perm)+1):\n                permutations.append(perm[:i] + s[0] + perm[i:])\n        return permutations\n\n    def is_good(s):\n        return is_balanced(s)\n\n    def concat_strings(s1, s2):\n        return s1 + s2\n\n    def find_good_string(s1, s2):\n        for perm in find_permutation(s1 + s2):\n            if is_good(perm):\n                return perm\n        return None\n\n    s1, s2 = lst\n    s1_good = is_good(s1)\n    s2_good = is_good(s2)\n    if s1_good and s2_good:\n        return 'Yes'\n    elif s1_good and not s2_good:\n        return 'No'\n    elif s2_good and not s1_good:\n        return 'No'\n    else:\n        good_string = find_good_string(s1, s2)\n        if good_string:\n            return 'Yes'\n        else:\n            return 'No'"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    # Check if the list has exactly 2 strings\n    if len(lst)!= 2:\n        return 'No'\n\n    # Concatenate the two strings\n    s = lst[0] + lst[1]\n\n    # Check if the concatenated string is balanced\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n\n    # If the stack is empty, the string is good\n    if not stack:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def match_parens(lst):\n    stack = []\n    for char in lst[0]:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return 'No'\n            stack.pop()\n    if stack:\n        return 'No'\n    stack = []\n    for char in reversed(lst[1]):\n        if char == ')':\n            stack.append(char)\n        else:\n            if not stack:\n                return 'No'\n            stack.pop()\n    if stack:\n        return 'No'\n    return 'Yes'"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def match_parens(lst):\n    stack = []\n    for c in lst[0]:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) == 0:\n                return 'No'\n            stack.pop()\n    if len(stack) == 0:\n        return 'Yes'\n    else:\n        return 'No'\n\nprint(match_parens(['()(', ')']))  # Yes\nprint(match_parens([')', ')']))  # No"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    # convert list of strings to a single string\n    s = ''.join(lst)\n    stack = []\n\n    # iterate over each character in the string\n    for char in s:\n        # if the character is an open parenthesis, push it onto the stack\n        if char == '(':\n            stack.append(char)\n        # if the character is a close parenthesis, pop the top open parenthesis\n        # from the stack and continue iterating\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n\n    # if the stack is empty, it means all open parentheses have been matched with\n    # their corresponding close parentheses\n    if not stack:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort(reverse=True)\n    return arr[:k]"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k > len(arr):\n        return \"k should be less than or equal to the length of the array\"\n\n    arr = sorted(arr, reverse=True)\n    return arr[:k]"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # sort the array in decreasing order\n    arr.sort(reverse=True)\n\n    # return the first k elements of the sorted array\n    return arr[:k]"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef maximum(arr, k):\n    heap = arr[:k]\n    heapq.heapify(heap)\n    for i in range(k, len(arr)):\n        if arr[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arr[i])\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    # First, we sort the array in descending order\n    arr.sort(reverse=True)\n    # Then, we return the first k elements of the sorted array\n    return arr[:k]"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # Create a min-heap of size k\n    heap = arr[:k]\n    heapq.heapify(heap)\n\n    # Iterate over remaining elements of the array\n    for i in range(k, len(arr)):\n        # If current element is greater than the root of the heap\n        if arr[i] > heap[0]:\n            # Replace the root with current element\n            heapq.heapreplace(heap, arr[i])\n\n    # Sort the heap in descending order\n    heapq.heapify(heap)\n    heap.sort(reverse=True)\n\n    return heap"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Sort the array in decreasing order\n    arr.sort(reverse=True)\n    # Return the first k elements of the sorted array\n    return arr[:k]"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    # sort the array in descending order\n    arr.sort(reverse=True)\n    # return the first k elements of the sorted array\n    return arr[:k]"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n\n    # sort the array in descending order\n    arr.sort(reverse=True)\n\n    # return the first k elements of the array\n    return arr[:k]"
    },
    {
        "number": 121,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    sum = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2!= 0:\n            sum += lst[i]\n    return sum"
    },
    {
        "number": 121,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    total = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 == 1:\n            total += lst[i]\n    return total"
    },
    {
        "number": 121,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    sum = 0\n    for i in range(0, len(lst)):\n        if lst[i] % 2 == 0 and lst[i] % 2!= 0:\n            sum += lst[i]\n    return sum"
    },
    {
        "number": 121,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    result = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2!= 0:\n            result += lst[i]\n    return result"
    },
    {
        "number": 121,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    result = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2!= 0:\n            result += lst[i]\n    return result"
    },
    {
        "number": 121,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 == 1:\n            sum += lst[i]\n    return sum"
    },
    {
        "number": 121,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\"\"\"\n    sum = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 == 1:\n            sum += lst[i]\n    return sum"
    },
    {
        "number": 121,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\"\"\"\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 == 1)"
    },
    {
        "number": 121,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\"\"\"\n    \n    # Initialize sum to 0\n    total_sum = 0\n    \n    # Loop through each element of the list\n    for i in range(len(lst)):\n        \n        # Check if the element is even and odd\n        if lst[i] % 2 == 0 and lst[i] % 3!= 0:\n            \n            # Add the odd element to the total sum\n            total_sum += lst[i]\n    \n    return total_sum"
    },
    {
        "number": 121,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2!= 0:\n            sum += lst[i]\n    return sum"
    },
    {
        "number": 122,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Initialize sum to 0\n    total = 0\n\n    # Loop through the first k elements of arr\n    for i in range(k):\n        # If the element has at most two digits, add it to the sum\n        if 10 <= arr[i] <= 99:\n            total += arr[i]\n\n    # Return the sum\n    return total"
    },
    {
        "number": 122,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Initialize sum and count variables\n    total_sum = 0\n    count = 0\n    \n    # Loop through the array and add elements with two or less digits\n    for num in arr[:k]:\n        if num < 100:\n            total_sum += num\n            count += 1\n    \n    # If there are more than two digits, add the first two digits\n    if count > 2:\n        total_sum += arr[k-2] // 100\n    \n    return total_sum"
    },
    {
        "number": 122,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total = 0\n    count = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            total += arr[i]\n            count += 1\n    for i in range(k):\n        if count == 2:\n            break\n        if len(str(arr[i+k])) <= 2:\n            total += arr[i+k]\n            count += 1\n    return total"
    },
    {
        "number": 122,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    sum_of_elements = 0\n    count = 0\n\n    for i in range(k):\n        if arr[i] // 10 <= 1:\n            sum_of_elements += arr[i]\n            count += 1\n\n    if count == 2:\n        return sum_of_elements\n\n    for i in range(k):\n        if arr[i] // 10 <= 1 and arr[i] % 10!= 0:\n            sum_of_elements += arr[i]\n            count += 1\n            if count == 2:\n                return sum_of_elements\n\n    return sum_of_elements"
    },
    {
        "number": 122,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    result = 0\n    for i in range(k):\n        if arr[i] >= 10 and arr[i] <= 99:\n            result += arr[i]\n    return result"
    },
    {
        "number": 122,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total = 0\n    for i in range(k):\n        if arr[i] < 100:\n            total += arr[i]\n    return total"
    },
    {
        "number": 122,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total_sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            total_sum += arr[i]\n    return total_sum"
    },
    {
        "number": 122,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    total = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            total += arr[i]\n    return total"
    },
    {
        "number": 122,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n    total_sum = 0\n    count = 0\n\n    for num in arr[:k]:\n        if num < 10:\n            total_sum += num\n            count += 1\n        elif num < 100:\n            total_sum += num\n            count += 1\n\n    return total_sum"
    },
    {
        "number": 122,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total_sum = 0\n    count = 0\n    for num in arr[:k]:\n        if len(str(num)) <= 2:\n            total_sum += num\n            count += 1\n    if count == 1:\n        return total_sum\n    else:\n        return \"No elements with at most two digits found.\""
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    odd_nums = []\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2!= 0:\n            odd_nums.append(n)\n    return sorted(odd_nums)"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    odd_nums = []\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n        if n % 2!= 0:\n            odd_nums.append(n)\n    return sorted(odd_nums)"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_collatz = []\n    current = n\n    while current!= 1:\n        if current % 2 == 0:\n            current //= 2\n        else:\n            current = 3*current + 1\n        if current % 2 == 1:\n            odd_collatz.append(current)\n    return sorted(odd_collatz)"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    # Initialize the list with the first element of the collatz sequence\n    collatz = [n]\n    # Loop until the last element is 1\n    while collatz[-1]!= 1:\n        # If the last element is even, divide it by 2 to get the next element\n        if collatz[-1] % 2 == 0:\n            collatz.append(collatz[-1] // 2)\n        # If the last element is odd, multiply it by 3 and add 1 to get the next element\n        else:\n            collatz.append(3 * collatz[-1] + 1)\n    # Filter out even numbers and return the odd numbers in the list\n    return sorted([x for x in collatz if x % 2!= 0])"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    collatz = []\n    num = n\n\n    while num!= 1:\n        collatz.append(num)\n        if num % 2 == 0:\n            num = num // 2\n        else:\n            num = 3 * num + 1\n\n    # Get the odd numbers in the collatz sequence\n    odd_collatz = [x for x in collatz if x % 2!= 0]\n\n    return sorted(odd_collatz)\n\n\nprint(get_odd_collatz(5))  # Output: [1, 5]\nprint(get_odd_collatz(10))  # Output: [1]\nprint(get_odd_collatz(15))  # Output: [1, 3, 5]"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    odd_collatz = []\n    num = n\n    while num!= 1:\n        if num % 2!= 0:\n            odd_collatz.append(num)\n        if num % 2 == 0:\n            num = num // 2\n        else:\n            num = 3 * num + 1\n    odd_collatz.append(1)\n    return sorted(odd_collatz)"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    # Create an empty list to store odd numbers in collatz sequence\n    odd_collatz = []\n    \n    # Start with the input value of n\n    num = n\n    \n    # Loop until the number is 1\n    while num!= 1:\n        # Check if the number is odd\n        if num % 2!= 0:\n            # Add the odd number to the list of odd numbers in collatz sequence\n            odd_collatz.append(num)\n        \n        # Check if the number is even\n        if num % 2 == 0:\n            # Calculate the next number in the collatz sequence\n            num = num // 2\n            \n        # Check if the number is odd after the division\n        if num % 2!= 0:\n            # Add the odd number to the list of odd numbers in collatz sequence\n            odd_collatz.append(num)\n    \n    # Sort the list of odd numbers in collatz sequence in increasing order\n    odd_collatz.sort()\n    \n    # Return the sorted list of odd numbers in collatz sequence\n    return odd_collatz"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n    1. Collatz(1) is [1].\n    2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    odd_nums = []\n    current_num = n\n    while current_num!= 1:\n        if current_num % 2 == 0:\n            current_num //= 2\n        else:\n            current_num = current_num * 3 + 1\n        if current_num % 2!= 0:\n            odd_nums.append(current_num)\n    return sorted(odd_nums)"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    odd_collatz = []\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2!= 0:\n            odd_collatz.append(n)\n    return sorted(odd_collatz)\n"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    if n == 1:\n        return [1]\n\n    odd_numbers = []\n    current = n\n\n    while current!= 1:\n        if current % 2 == 0:\n            current = current // 2\n        else:\n            current = 3 * current + 1\n\n        if current % 2!= 0:\n            odd_numbers.append(current)\n\n    return sorted(odd_numbers)\n"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def valid_date(date):\n    \"\"\"\n    This function takes a date string and validates it according to the rules mentioned in the problem statement.\n    \"\"\"\n    if not date:\n        return False\n    \n    try:\n        date = date.split('-')\n        month = int(date[0])\n        day = int(date[1])\n        year = int(date[2])\n    except:\n        return False\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [4, 6, 9, 11] and day < 1 or day > 30:\n        return False\n    \n    if month == 2 and day < 1 or day > 29:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n        return False\n    \n    return True"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    # Split the date string into month, day and year components\n    try:\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n    except ValueError:\n        # If the date string is not in the correct format, return False\n        return False\n\n    # Check if the date is within the valid range\n    if month < 1 or month > 12:\n        # Month is not within the valid range, return False\n        return False\n    elif month in [4, 6, 9, 11] and day < 1 or day > 30:\n        # Month is April, June, September or November, day is not within the valid range, return False\n        return False\n    elif month == 2 and day < 1 or day > 29:\n        # Month is February, day is not within the valid range, return False\n        return False\n    elif month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n        # Month is January, March, May, July, August, October or December, day is not within the valid range, return False\n        return False\n\n    # If all the checks pass, return True\n    return True"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def valid_date(date):\n    \"\"\"Validates a given date string and returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\"\"\"\n\n    # check if date string is empty\n    if not date:\n        return False\n\n    # check if date string has the correct format\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n\n    # check if the number of days is valid for the given month and year\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    else:\n        return False\n\n    # check if the month is valid\n    if month < 1 or month > 12:\n        return False\n\n    return True"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def valid_date(date):\n    \"\"\"Validates a given date string and returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. \n       And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. \n       And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n    \n    for example: \n    valid_date('03-11-2000') => True\n    \n    valid_date('15-01-2012') => False\n    \n    valid_date('04-0-2040') => False\n    \n    valid_date('06-04-2020') => True\n    \n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    \n    try:\n        day, month, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n    \n    if not 1 <= day <= 31:\n        return False\n    \n    if month not in [1, 3, 5, 7, 8, 10, 12] and not 1 <= day <= 30:\n        return False\n    \n    if month == 2 and not (day == 29 or day == 28):\n        return False\n    \n    if not 1 <= month <= 12:\n        return False\n    \n    if not 1 <= year <= 9999:\n        return False\n    \n    return True"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def valid_date(date):\n    \"\"\"Validates a given date string\"\"\"\n    try:\n        # Parse the date string\n        year, month, day = map(int, date.split('-'))\n    except ValueError:\n        # If the date string is not in the correct format, return False\n        return False\n\n    # Check if the year is within the valid range\n    if year < 1000 or year > 9999:\n        return False\n\n    # Check if the month is within the valid range\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the number of days is within the valid range for the given month\n    if month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        # Check if the year is a leap year\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    else:\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n\n    # If all the checks passed, return True\n    return True"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    # Split the date string into month, day, and year components\n    try:\n        month, day, year = date.split(\"-\")\n        month, day, year = int(month), int(day), int(year)\n    except ValueError:\n        return False\n\n    # Check if the date is empty or not in the correct format\n    if not date or len(date)!= 10 or date[2]!= \"-\" or date[5]!= \"-\":\n        return False\n\n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the day is valid\n    if month == 2:\n        # Check if the year is a leap year\n        leap_year = year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)\n        max_days = 29 if leap_year else 28\n    elif month in (4, 6, 9, 11):\n        max_days = 30\n    else:\n        max_days = 31\n\n    if day < 1 or day > max_days:\n        return False\n\n    return True"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not date:\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12 or day < 1 or year < 1:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day > 31 or month in [4, 6, 9, 11] and day > 30 or month == 2 and day > 29:\n            return False\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    # check if the date string is empty\n    if not date:\n        return False\n\n    # check if the date format is correct\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12 or day < 1 or day > 31 or year < 1:\n            return False\n    except ValueError:\n        return False\n\n    # check if the number of days is valid\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31 or month in [4, 6, 9, 11] and day > 30 or month == 2 and day > 29:\n        return False\n\n    # if all checks pass, return True\n    return True"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def valid_date(date):\n    \"\"\"Function to validate a date string\"\"\"\n    \n    # Check if date string is empty\n    if not date:\n        return False\n    \n    # Check if the date is in the format \"mm-dd-yyyy\"\n    try:\n        mm, dd, yyyy = map(int, date.split('-'))\n    except ValueError:\n        return False\n    \n    # Check if the month is valid\n    if not 1 <= mm <= 12:\n        return False\n    \n    # Check if the number of days is valid\n    days_in_month = {1: 31, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    if not 1 <= dd <= days_in_month[mm]:\n        return False\n    \n    # Check if the year is a leap year\n    if mm == 2 and dd == 29 and (yyyy % 4!= 0 or yyyy % 100 == 0 and yyyy % 400!= 0):\n        return False\n    \n    # If all the checks pass, return True\n    return True"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def valid_date(date_str):\n    \"\"\"Validates a date string in the format'mm-dd-yyyy'.\"\"\"\n    try:\n        month, day, year = map(int, date_str.split('-'))\n    except ValueError:\n        return False\n\n    if not (1 <= month <= 12):\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        max_days = 31\n    elif month in [4, 6, 9, 11]:\n        max_days = 30\n    elif month == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            max_days = 29\n        else:\n            max_days = 28\n    else:\n        return False\n\n    if not (1 <= day <= max_days):\n        return False\n\n    return True"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_words(txt):\n    # Split the text on whitespace\n    words = txt.split()\n    if len(words) > 0:\n        return words\n    # Split the text on commas\n    words = txt.split(\",\")\n    if len(words) > 0:\n        return words\n    # Count the number of lower-case letters with odd order in the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    odd_count = 0\n    for char in alphabet:\n        if txt.count(char) > 0:\n            if txt.index(char) % 2!= 0:\n                odd_count += 1\n    return odd_count"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    if ',' in txt:\n        return txt.split(',')\n    elif'' in txt:\n        return txt.split()\n    else:\n        count = 0\n        for i in range(len(txt)):\n            if ord(txt[i]) % 2!= 0:\n                count += 1\n        return count\n"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_words(txt):\n    if ',' in txt:\n        return txt.split(',')\n    else:\n        return list(filter(lambda x: len(x)%2!=0, txt.split()))"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_words(txt):\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    \"\"\"\n    # split on whitespace\n    words = txt.split()\n    if words:\n        return words\n    \n    # split on commas\n    words = txt.split(\",\")\n    if words:\n        return words\n    \n    # count odd-order letters\n    odd_count = 0\n    for i in range(ord('a'), ord('z')+1):\n        if chr(i) in txt:\n            odd_count += 1\n    return odd_count"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_words(txt):\n    if ',' in txt:\n        return txt.split(',')\n    elif'' in txt:\n        return txt.split()\n    else:\n        count = 0\n        for i in range(len(txt)):\n            if ord(txt[i]) % 2 == 1:\n                count += 1\n        return count"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_words(txt):\n    # If whitespaces exists in the text, split on whitespace and return list of words\n    if'' in txt:\n        return txt.split()\n\n    # If no whitespaces exists, split on commas and return list of words\n    elif ',' in txt:\n        return txt.split(',')\n\n    # If no commas exists, count number of lower-case letters with odd order in the alphabet\n    else:\n        count = 0\n        for char in txt:\n            if char.islower():\n                if ord(char) % 2 == 1:\n                    count += 1\n        return count"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_words(txt):\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    \"\"\"\n    words = txt.split()\n    if not words:\n        words = txt.split(\",\")\n    if not words:\n        odd_count = 0\n        for i in range(ord('a'), ord('z')+1):\n            if i % 2 == 1:\n                odd_count += txt.count(chr(i))\n        return odd_count\n    return words"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_words(txt):\n    if ',' in txt:\n        return txt.split(',')\n    elif'' in txt:\n        return txt.split()\n    else:\n        count = 0\n        for i in range(len(txt)):\n            if txt[i].islower() and ord(txt[i]) % 2!= 0:\n                count += 1\n        return count"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_words(txt):\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n\n    :param txt: string of words\n    :return: list of words or the number of lower-case letters with odd order in the alphabet\n    \"\"\"\n\n    # Check if commas exist in the text\n    if ',' in txt:\n        # If commas exist, split the text on commas and return the list of words\n        return txt.split(',')\n\n    else:\n        # If commas do not exist, split the text on whitespace and count the number of lower-case letters with odd order\n        # in the alphabet\n        words = txt.split()\n        odd_letters = 0\n        for word in words:\n            for letter in word:\n                if letter.islower() and ord(letter) % 2!= 0:\n                    odd_letters += 1\n\n        return odd_letters"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_words(txt):\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n    \"\"\"\n    if ',' in txt:\n        return txt.split(',')\n    elif'' in txt:\n        return txt.split()\n    else:\n        return sum(1 for c in txt if c.islower() and ord(c) % 2 == 1)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_sorted(lst):\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n        elif lst[i] == lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    n = len(lst)\n    for i in range(n - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        elif lst.count(lst[i]) > 1:\n            return False\n    return True"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    n = len(lst)\n    for i in range(n-1):\n        if lst[i] > lst[i+1]:\n            return False\n        elif lst[i] == lst[i+1]:\n            count = 1\n            for j in range(i+2, n):\n                if lst[i] == lst[j]:\n                    count += 1\n                else:\n                    break\n            if count > 1:\n                return False\n    return True"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n        elif lst.count(lst[i]) > 1:\n            return False\n    return True"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_sorted(lst):\n    n = len(lst)\n    for i in range(1, n):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    \n    # Check if list is empty\n    if not lst:\n        return True\n    \n    # Check for duplicates\n    if len(lst)!= len(set(lst)):\n        return False\n    \n    # Check if list is sorted\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n        \n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    \n    # check if list is empty or has 1 element\n    if len(lst) <= 1:\n        return True\n    \n    # check if list has duplicate elements\n    if len(lst)!= len(set(lst)):\n        return False\n    \n    # check if list is sorted in ascending order\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n        \n    return True"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n    '''\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    \n    # check for duplicates\n    if len(lst)!= len(set(lst)):\n        return False\n    \n    # check for ascending order\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start2 > end1 or start1 > end2:\n        return \"NO\"\n    start = max(start1, start2)\n    end = min(end1, end2)\n    length = end - start + 1\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start2 > end1 or start1 > end2:\n        return \"NO\"\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    intersection_length = intersection_end - intersection_start + 1\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"\n    Function to check if the length of the intersection of two intervals is a prime number\n    \"\"\"\n    # if the intervals don't intersect, return \"NO\"\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    \n    # calculate the length of the intersection\n    intersection_length = min(interval1[1], interval2[1]) - max(interval1[0], interval2[0]) + 1\n    \n    # if the length is not a prime number, return \"NO\"\n    if not is_prime(intersection_length):\n        return \"NO\"\n    \n    # otherwise, return \"YES\"\n    return \"YES\""
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_prime(n):\n    \"\"\"\n    A function to check if a number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"\n    A function to check if the length of intersection of two intervals is a prime number.\n    \"\"\"\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    # Check if the intervals intersect\n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n\n    # Calculate the length of the intersection\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    intersection_length = intersection_end - intersection_start + 1\n\n    # Check if the length of the intersection is a prime number\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_prime(n):\n    \"\"\"Check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"Find the intersection of two intervals\"\"\"\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    # check if intervals intersect\n    if start2 > end1 or start1 > end2:\n        return \"NO\"\n\n    # find intersection of intervals\n    start = max(start1, start2)\n    end = min(end1, end2)\n\n    # check if length of intersection is prime\n    length = end - start + 1\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    else:\n        intersection_start = max(interval1[0], interval2[0])\n        intersection_end = min(interval1[1], interval2[1])\n        intersection_length = intersection_end - intersection_start + 1\n        if is_prime(intersection_length):\n            return \"YES\"\n        else:\n            return \"NO\""
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is prime, False otherwise\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"Return \"YES\" if the length of the intersection of interval1 and interval2\n    is a prime number, \"NO\" otherwise\"\"\"\n    # Check if the intervals intersect\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    # Calculate the length of the intersection\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    length = end - start + 1\n    # Check if the length is a prime number\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_prime(n):\n    \"\"\"Function to check whether a number is prime or not\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"Function to find the intersection of two intervals\"\"\"\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    # Find the intersection of two intervals\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n\n    # If the intervals don't intersect, return \"NO\"\n    if intersection_start > intersection_end:\n        return \"NO\"\n\n    # Calculate the length of the intersection\n    intersection_length = intersection_end - intersection_start + 1\n\n    # If the length of the intersection is a prime number, return \"YES\", otherwise, return \"NO\"\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_prime(num):\n    \"\"\"\n    Function to check if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef intersection(interval1, interval2):\n    \"\"\"\n    Function to check if the length of intersection of two intervals is a prime number.\n    \"\"\"\n    # Check if the intervals intersect\n    if max(interval1[0], interval2[0]) <= min(interval1[1], interval2[1]):\n        intersection_length = min(interval1[1], interval2[1]) - max(interval1[0], interval2[0])\n        if is_prime(intersection_length):\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_prime(n):\n    \"\"\"\n    A function to check if a number is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"\n    This function returns \"YES\" if the length of intersection of the given intervals is a prime number,\n    otherwise, it returns \"NO\".\n    \"\"\"\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end1 or start2 > end2:\n        return \"NO\"\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    if intersection_start > intersection_end:\n        return \"NO\"\n    intersection_length = intersection_end - intersection_start + 1\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n\n    if not arr:\n        return None\n    \n    product = 1\n    magnitude_sum = 0\n    \n    for num in arr:\n        product *= num\n        magnitude_sum += abs(num)\n        \n    return product * magnitude_sum"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    \n    sign_product = 1\n    sum_of_magnitudes = 0\n    \n    for num in arr:\n        if num == 0:\n            sign_product = 0\n        else:\n            sign_product *= abs(num)\n            sum_of_magnitudes += num\n    \n    return sign_product * sum_of_magnitudes"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n\n    if not arr:\n        return None\n\n    magnitudes = [abs(num) for num in arr]\n    signs = [1 if num >= 0 else -1 for num in arr]\n\n    return sum(magnitudes) * reduce(lambda x, y: x * y, signs, 1)"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    \n    if not arr:\n        return None\n    \n    total_sum = 0\n    product_of_signs = 1\n    \n    for num in arr:\n        total_sum += abs(num)\n        product_of_signs *= (1 if num > 0 else (-1 if num < 0 else 0))\n        \n    return total_sum * product_of_signs"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    \n    prod = 1\n    mag_sum = 0\n    \n    for num in arr:\n        prod *= num\n        mag_sum += abs(num)\n    \n    return mag_sum * prod"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def prod_signs(arr):\n    if not arr:  # empty array\n        return None\n    magnitudes = [abs(num) for num in arr]  # calculate magnitudes\n    product = 1\n    for num in arr:\n        if num > 0:\n            product *= 1\n        elif num < 0:\n            product *= -1\n    return sum(magnitudes) * product"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    sign_product = 1\n    mag_sum = 0\n    \n    for num in arr:\n        mag_sum += abs(num)\n        sign_product *= num // abs(num) if num!= 0 else 1\n        \n    return sign_product * mag_sum"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    # Initialize variables to store the sum of magnitudes and product of signs\n    mag_sum = 0\n    sign_prod = 1\n    \n    # Iterate through the array and update the variables accordingly\n    for num in arr:\n        mag_sum += abs(num)\n        sign_prod *= (1 if num > 0 else -1 if num < 0 else 0)\n    \n    return mag_sum * sign_prod"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    sign_product = 1\n    mag_sum = 0\n    for num in arr:\n        if num < 0:\n            sign_product *= -1\n        mag_sum += abs(num)\n    return sign_product * mag_sum"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def prod_signs(arr):\n    if not arr:  # check if arr is empty\n        return None\n    \n    prod_sign = 1  # initialize product of signs to 1\n    mag_sum = 0  # initialize sum of magnitudes to 0\n    \n    for num in arr:\n        if num == 0:\n            mag_sum += 1  # add 1 to sum of magnitudes if num is 0\n        else:\n            mag_sum += abs(num)  # add magnitude of num to sum of magnitudes\n            prod_sign *= num/abs(num)  # multiply product of signs with num/abs(num)\n            \n    return mag_sum * prod_sign"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n    \"\"\"\n    n = len(grid)\n    m = len(grid[0])\n    dp = [[[float('inf')] * k for _ in range(m)] for _ in range(n)]\n    dp[0][0][0] = 0\n    path = [[[-1] * k for _ in range(m)] for _ in range(n)]\n\n    for i in range(n):\n        for j in range(m):\n            if i > 0:\n                dp[i][j][0] = dp[i-1][j][0] + grid[i][j]\n                path[i][j][0] = (i-1, j)\n            if j > 0:\n                dp[i][j][0] = min(dp[i][j][0], dp[i][j-1][0] + grid[i][j])\n                path[i][j][0] = (i, j-1)\n\n    for i in range(1, k):\n        for i in range(n):\n            for j in range(m):\n                if i > 0:\n                    for p in range(1, i+1):\n                        for q in range(n):\n                            for r in range(m):\n                                if q == i and r == j:\n                                    dp[i][j][i] = dp[q][r][p-1] + grid[i][j]\n                                    path[i][j][i] = (q, r)\n                        for q in range(m):\n                            for r in range(n):\n                                if q == j and r == i:\n                                    dp[i][j][i] = dp[q][r][p-1] + grid[i][j]\n                                    path[i][j][i] = (q, r)\n\n    ans = []\n    i, j, p = n-1, m-1, k-1\n    while i >= 0 and j >= 0 and p >= 0:\n        ans.append(grid[i][j])\n        i, j = path[i][j][p]\n        p -= 1\n\n    ans.reverse()\n    return ans"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n    # Initialize variables\n    n = len(grid)\n    visited = set()\n    queue = [(0, 0, [])] # (row, col, path)\n\n    # BFS\n    while queue:\n        row, col, path = queue.pop(0)\n        if len(path) == k:\n            return path\n        if (row, col) in visited:\n            continue\n        visited.add((row, col))\n        for nr, nc in [(row-1, col), (row+1, col), (row, col-1), (row, col+1)]:\n            if 0 <= nr < n and 0 <= nc < n:\n                queue.append((nr, nc, path + [grid[nr][nc]]))\n\n    # If we reach here, there's no path of length k in the grid\n    return []"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n    def dfs(grid, k, i, j, visited, path):\n        if k == 0:\n            return True\n        \n        # Check if the current cell is out of bounds or has been visited\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or visited[i][j]:\n            return False\n        \n        # Mark the current cell as visited\n        visited[i][j] = True\n        \n        # Add the current cell's value to the path\n        path.append(grid[i][j])\n        \n        # Recursively check the neighboring cells\n        if dfs(grid, k-1, i+1, j, visited, path) or dfs(grid, k-1, i-1, j, visited, path) or dfs(grid, k-1, i, j+1, visited, path) or dfs(grid, k-1, i, j-1, visited, path):\n            return True\n        \n        # If the current path is not found, backtrack and remove the current cell from the path\n        path.pop()\n        visited[i][j] = False\n        \n        return False\n    \n    # Initialize the visited array and the path\n    visited = [[False for j in range(len(grid[0]))] for i in range(len(grid))]\n    path = []\n    \n    # Find the minimum path using DFS\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if dfs(grid, k, i, j, visited, path):\n                return path\n    \n    return [] # If no path is found, return an empty list"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def minPath(grid, k):\n    m, n = len(grid), len(grid[0])\n    dp = [[float('inf')]*n for _ in range(m)]\n    dp[0][0] = 0\n    for i in range(k):\n        for j in range(m):\n            for l in range(n):\n                if i == 0:\n                    dp[j][l] = grid[j][l]\n                else:\n                    if j > 0:\n                        dp[j][l] = min(dp[j][l], dp[j-1][l] + grid[j][l])\n                    if l > 0:\n                        dp[j][l] = min(dp[j][l], dp[j][l-1] + grid[j][l])\n    res = []\n    i, j = m-1, n-1\n    for _ in range(k):\n        res.append(grid[i][j])\n        if i == 0:\n            break\n        if j > 0 and dp[i-1][j] == dp[i][j] - grid[i][j]:\n            i -= 1\n        else:\n            j -= 1\n    return res[::-1]"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def minPath(grid, k):\n    n = len(grid)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = grid[0][0]\n\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + grid[i][0]\n\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + grid[0][i]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n\n    ans = []\n    i, j = n-1, n-1\n    for _ in range(k):\n        ans.append(grid[i][j])\n        if i == 0 and j == 0:\n            break\n        if i == 0:\n            j -= 1\n        elif j == 0:\n            i -= 1\n        elif dp[i-1][j] < dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ans[::-1]"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def minPath(grid, k):\n    n = len(grid)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = grid[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + grid[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + grid[i][j]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    \n    k -= 1\n    res = []\n    i, j = n-1, n-1\n    while k > 0:\n        if dp[i-1][j] < dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n        res.append(grid[i][j])\n        k -= 1\n        \n    res.append(grid[i][j])\n    return res[::-1]"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n    def neighbors(i, j):\n        \"\"\"\n        Returns the neighbors of the cell (i, j) as a list of tuples (x, y).\n        \"\"\"\n        return [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]\n\n    def path(i, j, k):\n        \"\"\"\n        Returns the k-length path starting from the cell (i, j) as a list of\n        values.\n        \"\"\"\n        if k == 1:\n            return [grid[i][j]]\n        paths = []\n        for ni, nj in neighbors(i, j):\n            if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]):\n                paths += [grid[ni][nj]] + path(ni, nj, k-1)\n        return paths\n\n    n = len(grid)\n    values = set()\n    for i in range(n):\n        for j in range(n):\n            values.add(grid[i][j])\n    values = list(values)\n    values.sort()\n\n    min_path = []\n    for i in range(n):\n        for j in range(n):\n            for v in values:\n                if grid[i][j] == v:\n                    path_values = path(i, j, k)\n                    if len(path_values) == k:\n                        if not min_path or path_values < min_path:\n                            min_path = path_values\n\n    return min_path"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n    \"\"\"\n    n = len(grid)\n    INF = float('inf')\n\n    # dp[i][j][k] stores the minimum path of length k starting from grid[i][j]\n    dp = [[[INF] * (k+1) for j in range(n)] for i in range(n)]\n    dp[0][0][1] = 0\n\n    # fill the table in a bottom-up manner\n    for i in range(n):\n        for j in range(n):\n            for p in range(1, k+1):\n                for (x, y) in [(i-1, j), (i, j-1), (i+1, j), (i, j+1)]:\n                    if 0 <= x < n and 0 <= y < n:\n                        dp[i][j][p] = min(dp[i][j][p], dp[x][y][p-1] + grid[x][y])\n\n    # extract the path using backtracking\n    path = []\n    i, j = n-1, n-1\n    k = k-1\n    while k > 0:\n        for (x, y) in [(i-1, j), (i, j-1), (i+1, j), (i, j+1)]:\n            if 0 <= x < n and 0 <= y < n and dp[x][y][k] == dp[i][j][k-1] + grid[x][y]:\n                i, j = x, y\n                k = k-1\n                path.append(grid[i][j])\n                break\n\n    # add the starting cell to the path\n    path.append(grid[0][0])\n    path.reverse()\n\n    return path"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n    \"\"\"\n\n    def findPath(grid, start, end, k):\n        \"\"\"\n        Helper function to find the path of length k from start to end in the grid.\n        \"\"\"\n        if k == 1:\n            return [[start[0], start[1]], [end[0], end[1]]]\n\n        paths = []\n        for i in range(start[0]-1, start[0]+2):\n            for j in range(start[1]-1, start[1]+2):\n                if i >= 0 and i < len(grid) and j >= 0 and j < len(grid[0]) and (i, j)!= start and (i, j)!= end:\n                    path = findPath(grid, (i, j), end, k-1)\n                    if path is not None:\n                        paths.append(path + [[i, j]])\n\n        if paths:\n            min_path = paths[0]\n            for path in paths:\n                if path < min_path:\n                    min_path = path\n            return min_path\n\n        return None\n\n    # Find the start and end cells of the minimum path of length k\n    n = len(grid)\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == k:\n                start = (i, j)\n                break\n    for i in range(n-1, -1, -1):\n        for j in range(n-1, -1, -1):\n            if grid[i][j] == k:\n                end = (i, j)\n                break\n\n    # Find the minimum path of length k from start to end in the grid\n    path = findPath(grid, start, end, k)\n\n    # Construct the ordered list of values on the cells that the minimum path go through\n    lst = []\n    for cell in path:\n        lst.append(grid[cell[0]][cell[1]])\n\n    return lst"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def minPath(grid, k):\n    n = len(grid)\n    m = len(grid[0])\n    path = [(0, 0)]\n    visited = {(0, 0)}\n    while path and len(path) <= k:\n        new_path = []\n        for i, j in path:\n            for ni, nj in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n                if 0 <= ni < n and 0 <= nj < m and (ni, nj) not in visited:\n                    visited.add((ni, nj))\n                    new_path.append((ni, nj))\n                    if (ni, nj) == (n-1, m-1):\n                        return [grid[ni][nj]] + [grid[p[0]][p[1]] for p in new_path] + [grid[n-1][m-1]]\n        path = new_path\n    return [grid[n-1][m-1]]"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tri(n):\n    \"\"\"Returns a list of the first n + 1 numbers of the Tribonacci sequence.\"\"\"\n    sequence = [0, 0, 1] + [0] * n\n    for i in range(3, n + 3):\n        if i % 2 == 0:\n            sequence[i] = 1 + i // 2\n        else:\n            sequence[i] = sequence[i-1] + sequence[i-2] + sequence[i+1]\n    return sequence[:n+1]"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        tri_list = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri_list.append(tri_list[i-1] + tri_list[i-2])\n            else:\n                tri_list.append(1 + i//2)\n        return tri_list"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tri(n):\n    \"\"\"Return a list of the first n + 1 numbers of the Tribonacci sequence.\"\"\"\n    tri_list = [1, 3]\n    for i in range(2, n):\n        if i % 2 == 0:\n            tri_list.append(1 + i // 2)\n        else:\n            tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i + 1])\n    tri_list.append(2 * tri_list[-1] - tri_list[-3])\n    return tri_list"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    result = [0, 1, 1]\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            result.append(int(result[i-1] + i/2))\n        else:\n            result.append(int(result[i-1] + result[i-2] + result[i+1]))\n    return result"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tri(n):\n    \"\"\"\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    \"\"\"\n    sequence = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i // 2)\n        else:\n            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i + 1])\n    return sequence"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tri(n):\n    \"\"\"\n    This function returns the first n + 1 numbers of the Tribonacci sequence.\n    \"\"\"\n    sequence = []\n    sequence.append(1)\n    sequence.append(1)\n    sequence.append(3)\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            sequence.append(sequence[i-1] + sequence[i-2] * 2)\n        else:\n            sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n    return sequence"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tri(n):\n    \"\"\"\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        tri_list = [1, 3]\n        for i in range(2, n):\n            if i % 2 == 0:\n                tri_list.append(tri_list[i-1] + int(i/2))\n            else:\n                tri_list.append(tri_list[i-1] + tri_list[i-2] + tri_list[i+1])\n        tri_list.append(tri_list[-1] + tri_list[-2])\n        return tri_list\n"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n    else:\n        tribonacci = [1, 3]\n        for i in range(2, n):\n            if i % 2 == 0:\n                tribonacci.append(1 + i // 2)\n            else:\n                tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i+1])\n        tribonacci.append(1 + n // 2)\n        return tribonacci"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        tri_list = [1, 3]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                tri_list.append(1 + i // 2)\n            else:\n                tri_list.append(tri_list[i-1] + tri_list[i-2] + tri_list[i+1])\n        return tri_list"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tri(n):\n    \"\"\"\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    tri_seq = [3]\n    a, b, c = 0, 1, 1\n    for i in range(1, n):\n        if i % 2 == 0:\n            c = 1 + i // 2\n        else:\n            c = a + b + 1\n        tri_seq.append(c)\n        a, b = b, c\n    return tri_seq"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n        n //= 10\n    return product"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n    return 0 if product == 1 else product"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    result = 1\n    for digit in str(n):\n        if int(digit) % 2!= 0:\n            result *= int(digit)\n    if result == 1:\n        return 0\n    else:\n        return result"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def digits(n):\n    # initialize product to 1\n    product = 1\n    # loop through each digit in n\n    for digit in str(n):\n        # if the digit is odd, multiply it with the product\n        if int(digit) % 2!= 0:\n            product *= int(digit)\n    # if the product is still 1, all digits are even\n    if product == 1:\n        return 0\n    else:\n        return product\n"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2!= 0:\n            product *= int(digit)\n    return product if product!= 1 else 0"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    prod = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            prod *= digit\n        n //= 10\n    return prod"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    prod = 1\n    for digit in str(n):\n        if int(digit) % 2!= 0:\n            prod *= int(digit)\n    return prod"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2!= 0:\n            product *= int(digit)\n    return product"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2!= 0:\n            product *= digit\n        n //= 10\n    return product if product > 1 else 0"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2!= 0:\n            product *= int(digit)\n    if product == 1:\n        return 0\n    else:\n        return product"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_nested(string):\n    # Initialize a stack to keep track of opening brackets\n    stack = []\n    # Iterate through each character in the string\n    for char in string:\n        # If the character is an opening bracket, push it onto the stack\n        if char == '[':\n            stack.append(char)\n        # If the character is a closing bracket, pop the top element from the stack\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                # If the stack is empty at this point, there is an invalid sequence\n                return False\n    # If there is at least one opening bracket in the stack, it is a valid nested sequence\n    return bool(stack)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                stack.append(char)\n    return bool(stack)\n"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_nested(string):\n    stack = []\n    for i in string:\n        if i == '[':\n            stack.append(i)\n        elif i == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return True\n    return False"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return bool(stack)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) > 0"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_nested(string):\n    count = 0\n    for char in string:\n        if char == '[':\n            count += 1\n        elif char == ']':\n            count -= 1\n            if count < 0:\n                return True\n    return count == 0"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return True\n    return False if stack else True"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_nested(string):\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) > 0"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_nested(string):\n    stack = []\n    for i, c in enumerate(string):\n        if c == '[':\n            stack.append(i)\n        elif c == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack and i - stack[-1] > 1:\n                return True\n    return False"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_nested(string):\n    stack = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            stack.append(i)\n        elif string[i] == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return stack!= []"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    \"\"\"\n    # Iterate over the list and square each element and round to upper int(Ceiling)\n    for i in range(len(lst)):\n        lst[i] = int(round(lst[i]**2))\n        \n    # Return the sum of the squared numbers in the list\n    return sum(lst)"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    result = 0\n    for num in lst:\n        num = math.ceil(num)\n        result += num ** 2\n    return result"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    return sum([int(round(num, 0))**2 for num in lst])"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef sum_squares(lst):\n    \"\"\"\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    \"\"\"\n    result = 0\n    for num in lst:\n        result += math.ceil(num)**2\n    return result"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    result = 0\n    for num in lst:\n        result += math.ceil(num)**2\n    return result"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\"\"\"\n    \n    # Round each element in the list to the upper int(Ceiling)\n    lst = [math.ceil(num) for num in lst]\n    \n    # Calculate the sum of squared numbers in the list\n    sum_sq = sum([num**2 for num in lst])\n    \n    return sum_sq"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef sum_squares(lst):\n    \"\"\"\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    \"\"\"\n    total = 0\n    for num in lst:\n        total += int(math.ceil(num))**2\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    sum = 0\n    for i in lst:\n        i = math.ceil(i)\n        sum += i**2\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n    \"\"\"\n    sum_of_squares = 0\n    for num in lst:\n        rounded_num = math.ceil(num)\n        square = rounded_num ** 2\n        sum_of_squares += square\n    return sum_of_squares"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef sum_squares(lst):\n    \"\"\"\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    result = 0\n    for num in lst:\n        num = math.ceil(num)\n        result += num**2\n    return result"
    },
    {
        "number": 134,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    \"\"\"\n    if len(txt) == 0:\n        return False\n    if txt[-1].isalpha() and not txt[-1].isalnum():\n        return True\n    return False"
    },
    {
        "number": 134,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False\n    \"\"\"\n    if txt == \"\":\n        return False\n    \n    last_char = txt[-1]\n    \n    if last_char.isalpha():\n        words = txt.split()\n        last_word = words[-1]\n        if last_char in last_word:\n            return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 134,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n\n    if len(txt) == 0:\n        return False\n    else:\n        last_char = txt[-1]\n        if last_char.isalpha() and last_char.isspace():\n            return False\n        else:\n            return True"
    },
    {
        "number": 134,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    if not txt: # If string is empty, return False\n        return False\n    elif txt[-1].isalpha() and'' not in txt[-2:-1]: # Check if last character is a letter and not part of a word\n        return True\n    else:\n        return False"
    },
    {
        "number": 134,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if last_char.isalpha() and (last_char.isspace() or last_char ==''):\n        return False\n    return True"
    },
    {
        "number": 134,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) > 0 and txt[-1].isalpha() and not txt[-1].isalnum():\n        return True\n    else:\n        return False"
    },
    {
        "number": 134,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False\n    \"\"\"\n    # Removing any white spaces at the end of the string\n    txt = txt.strip()\n    # If the string is empty, then it's not a word\n    if not txt:\n        return False\n    # If the last character is a letter and not part of a word, return True\n    elif txt[-1].isalpha() and not txt[-1].isalnum():\n        return True\n    else:\n        return False"
    },
    {
        "number": 134,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n\n    # check if last character is the last letter of a word\n    words = txt.split()\n    last_word = words[-1]\n    last_letter_index = len(last_word) - 1\n\n    return last_char!= last_word[last_letter_index]\n\n\nprint(check_if_last_char_is_a_letter(\"apple pie\"))  # False\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))  # True\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))  # False\nprint(check_if_last_char_is_a_letter(\"\"))  # False"
    },
    {
        "number": 134,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    if txt[-1].isalpha() and \" \" not in txt:\n        return True\n    else:\n        return False"
    },
    {
        "number": 134,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    # Check if the string is empty\n    if not txt:\n        return False\n    \n    # Split the string into words\n    words = txt.split()\n    \n    # Check if the last character of the last word is an alphabetical character\n    if words[-1][-1].isalpha():\n        return True\n    else:\n        return False"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def can_arrange(arr):\n    \"\"\"\n    Returns the largest index of an element which is not greater than or equal\n    to the element immediately preceding it. If no such element exists then\n    returns -1. The given array will not contain duplicate values.\n    \"\"\"\n    n = len(arr)\n    for i in range(n-2, -1, -1):\n        if arr[i] >= arr[i+1]:\n            return i\n    return -1"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] < arr[i+1]:\n            j = i+1\n            while j < n and arr[i] < arr[j]:\n                j += 1\n            if j == n:\n                return j-1\n    return -1"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        if arr[i] <= arr[i-1]:\n            for j in range(i-1, -1, -1):\n                if arr[i] <= arr[j]:\n                    return j\n    return -1"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    max_idx = -1\n    for i in range(len(arr)-1):\n        if arr[i] < arr[i+1]:\n            max_idx = i\n    return max_idx"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    \n    n = len(arr)\n    if n == 1:\n        return -1\n    \n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    \n    for i in range(n-1):\n        # Find the largest element that is not greater than or equal to the\n        # element immediately preceding it\n        if arr[i] >= arr[i+1]:\n            return i\n        \n    # No such element exists, return -1\n    return -1"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    n = len(arr)\n    for i in range(n-1, -1, -1):\n        if arr[i] >= arr[i+1]:\n            return i\n    return -1"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\n    n = len(arr)\n    for i in range(n-1, -1, -1):\n        if arr[i] <= arr[i+1]:\n            return i\n\n    return -1"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == i+1:\n            return i\n    return -1"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] >= arr[i+1]:\n            return i\n    return -1"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\n    # initialize the maximum element and the index\n    max_element = arr[0]\n    max_index = 0\n    \n    # iterate through the array to find the maximum element and its index\n    for i in range(1, len(arr)):\n        if arr[i] >= max_element:\n            max_element = arr[i]\n            max_index = i\n    \n    # iterate through the array again to find the maximum element that is not \n    # greater than or equal to the element immediately preceding it\n    for i in range(max_index-1, -1, -1):\n        if arr[i] < max_element:\n            return i\n    \n    # if no such element exists then return -1\n    return -1"
    },
    {
        "number": 136,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n\n    # Initialize variables\n    largest_neg = None\n    smallest_pos = None\n\n    # Loop through the list and update variables accordingly\n    for num in lst:\n        if num < 0:\n            if largest_neg is None or num > largest_neg:\n                largest_neg = num\n        elif num > 0:\n            if smallest_pos is None or num < smallest_pos:\n                smallest_pos = num\n\n    # Return the tuple of largest negative and smallest positive integers\n    return (largest_neg, smallest_pos)"
    },
    {
        "number": 136,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    neg_int = None\n    pos_int = None\n    \n    for i in lst:\n        if i < 0 and (neg_int is None or i > neg_int):\n            neg_int = i\n        elif i > 0 and (pos_int is None or i < pos_int):\n            pos_int = i\n            \n    return (neg_int, pos_int)"
    },
    {
        "number": 136,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    # Initialize variables for negative and positive integers\n    negative_integers = []\n    positive_integers = []\n\n    # Iterate through the list and append negative and positive integers to their respective lists\n    for num in lst:\n        if num < 0:\n            negative_integers.append(num)\n        elif num > 0:\n            positive_integers.append(num)\n\n    # If there are no negative or positive integers, return (None, None)\n    if len(negative_integers) == 0 and len(positive_integers) == 0:\n        return (None, None)\n\n    # If there are negative integers, return the largest negative integer and None for positive integer\n    elif len(negative_integers) > 0:\n        return (max(negative_integers), None)\n\n    # If there are positive integers, return None for negative integer and the smallest positive integer\n    else:\n        return (None, min(positive_integers))"
    },
    {
        "number": 136,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    neg_max = None\n    pos_min = None\n    \n    for num in lst:\n        if num < 0 and (neg_max is None or num > neg_max):\n            neg_max = num\n        elif num > 0 and (pos_min is None or num < pos_min):\n            pos_min = num\n            \n    if neg_max is None:\n        neg_max = None\n    elif pos_min is None:\n        pos_min = None\n    \n    return (neg_max, pos_min)"
    },
    {
        "number": 136,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n\n    # Initialize variables for negative and positive integers\n    neg = None\n    pos = None\n\n    # Iterate over the list and update negative and positive variables\n    for num in lst:\n        if num < 0 and (neg is None or num > neg):\n            neg = num\n        elif num > 0 and (pos is None or num < pos):\n            pos = num\n\n    # Return the tuple of negative and positive integers\n    return (neg, pos)"
    },
    {
        "number": 136,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def largest_smallest_integers(lst):\n    neg = pos = None\n    for num in lst:\n        if num < 0 and (neg is None or num > neg):\n            neg = num\n        elif num > 0 and (pos is None or num < pos):\n            pos = num\n    return (neg, pos)"
    },
    {
        "number": 136,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    largest_neg = None\n    smallest_pos = None\n    for num in lst:\n        if num < 0:\n            if largest_neg is None or num > largest_neg:\n                largest_neg = num\n        elif num > 0:\n            if smallest_pos is None or num < smallest_pos:\n                smallest_pos = num\n    return largest_neg, smallest_pos"
    },
    {
        "number": 136,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    neg_max = None\n    pos_min = None\n    for num in lst:\n        if num < 0:\n            if neg_max is None or num > neg_max:\n                neg_max = num\n        elif num > 0:\n            if pos_min is None or num < pos_min:\n                pos_min = num\n    return (neg_max, pos_min)"
    },
    {
        "number": 136,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def largest_smallest_integers(lst):\n    \"\"\"\n    Returns a tuple (a, b), where 'a' is the largest of negative integers,\n    and 'b' is the smallest of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n    \"\"\"\n    neg_int = None\n    pos_int = None\n\n    for num in lst:\n        if num < 0 and (neg_int is None or num > neg_int):\n            neg_int = num\n        elif num > 0 and (pos_int is None or num < pos_int):\n            pos_int = num\n\n    return (neg_int, pos_int)"
    },
    {
        "number": 136,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    negative_integers = []\n    positive_integers = []\n\n    for num in lst:\n        if num < 0:\n            negative_integers.append(num)\n        elif num > 0:\n            positive_integers.append(num)\n\n    if len(negative_integers) > 0:\n        largest_negative = max(negative_integers)\n    else:\n        largest_negative = None\n\n    if len(positive_integers) > 0:\n        smallest_positive = min(positive_integers)\n    else:\n        smallest_positive = None\n\n    return (largest_negative, smallest_positive)"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a) == type(b):\n        if a == b:\n            return None\n        else:\n            return max(a, b)\n    elif isinstance(a, str) and isinstance(b, str):\n        return max(a.replace(\",\", \".\"), b.replace(\",\", \".\"))\n    elif isinstance(a, str) and isinstance(b, (int, float)):\n        return max(float(a.replace(\",\", \".\")), b)\n    elif isinstance(b, str) and isinstance(a, (int, float)):\n        return max(float(b.replace(\",\", \".\")), a)\n    else:\n        raise TypeError(\"Arguments should be of the same type or string type\")"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n    if isinstance(a, str) and isinstance(b, str):\n        if a.replace(\",\", \".\", 1).replace(\".\", \"\", 1).isdigit() and b.replace(\",\", \".\", 1).replace(\".\", \"\", 1).isdigit():\n            if float(a) > float(b):\n                return a\n            elif float(a) < float(b):\n                return b\n            else:\n                return None\n        else:\n            if a > b:\n                return a\n            elif a < b:\n                return b\n            else:\n                return None\n    elif isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    else:\n        return None"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n    if a == b:\n        return None\n    elif isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return a if a > b else b\n    elif isinstance(a, str) and isinstance(b, str):\n        if '.' in a and '.' in b:\n            a_float = float(a.replace(',', '.'))\n            b_float = float(b.replace(',', '.'))\n        elif ',' in a and ',' in b:\n            a_float = float(a.replace('.', ''))\n            b_float = float(b.replace('.', ''))\n        else:\n            a_float = float(a)\n            b_float = float(b)\n        return a if a_float > b_float else b\n    else:\n        return None"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a) == type(b):\n        if a == b:\n            return None\n        else:\n            return max(a, b)\n    elif type(a) == str and (\".\" in a or \",\" in a):\n        a = float(a.replace(\",\", \".\"))\n    elif type(b) == str and (\".\" in b or \",\" in b):\n        b = float(b.replace(\",\", \".\"))\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if a == b:\n        return None\n    else:\n        return max(a, b)"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n    \"\"\"\n    if isinstance(a, (int, float)):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    elif isinstance(b, (int, float)):\n        return compare_one(b, a)\n    elif isinstance(a, str):\n        if ',' in a:\n            a = float(a.replace(',', '.'))\n        if ',' in str(b):\n            b = float(b.replace(',', '.'))\n        if isinstance(b, (int, float)):\n            return compare_one(a, b)\n        elif isinstance(b, str):\n            if a > b:\n                return a\n            elif a < b:\n                return b\n            else:\n                return None\n\nprint(compare_one(1, 2.5))\nprint(compare_one(1, \"2,3\"))\nprint(compare_one(\"5,1\", \"6\"))\nprint(compare_one(\"1\", 1))"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n    \"\"\"\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif isinstance(a, str) and isinstance(b, str):\n        a_num = float(a.replace(\",\", \".\"))\n        b_num = float(b.replace(\",\", \".\"))\n        if a_num > b_num:\n            return a\n        elif b_num > a_num:\n            return b\n        else:\n            return None\n    else:\n        return None"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a)!= type(b):\n        return None\n    \n    if a == b:\n        return None\n    \n    if type(a) == int:\n        return max(a, b)\n    \n    if type(a) == float:\n        return max(a, b)\n    \n    if type(a) == str:\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n        return max(a, b)"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n    \"\"\"\n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    else:\n        if type(a) in [int, float]:\n            return max(a, b)\n        else:\n            return max(float(a.replace(\",\", \".\")), float(b.replace(\",\", \".\")))\n"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n    \"\"\"\n    # Check if both values are of the same type\n    if type(a) == type(b):\n        # If they are integers, compare them as such\n        if isinstance(a, int) and isinstance(b, int):\n            if a > b:\n                return a\n            elif a < b:\n                return b\n            else:\n                return None\n        # If they are floats, compare them as such\n        elif isinstance(a, float) and isinstance(b, float):\n            if a > b:\n                return a\n            elif a < b:\n                return b\n            else:\n                return None\n        # If they are strings, compare them lexicographically\n        elif isinstance(a, str) and isinstance(b, str):\n            if a > b:\n                return a\n            elif a < b:\n                return b\n            else:\n                return None\n        # If they are of different types, return None\n        else:\n            return None\n    # If they are of different types, return None\n    else:\n        return None"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    for i in range(4):\n        if n <= 0:\n            return False\n        elif n % 2 == 1:\n            n -= 1\n        else:\n            n -= 2\n    return n == 0"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    even_numbers = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]  # List of all even numbers from 2 to 20\n    for i in range(4):\n        if n == even_numbers[i]:\n            return False  # The number is equal to the sum of 4 even numbers\n    return True  # The number cannot be written as the sum of 4 even numbers"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    sum_even = 0\n    count_even = 0\n    for i in range(2, n):\n        if i % 2 == 0:\n            sum_even += i\n            count_even += 1\n            if count_even == 4:\n                return sum_even == n\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # Generate all possible combinations of 4 even numbers that sum to n\n    even_combinations = [(a, b, c, d) for a in range(n//4+1) for b in range(n//3+1) \n                        for c in range(n//2+1) for d in range(n//2+1) if a*2+b*4+c*6+d*8 == n]\n    # Check if there is at least one such combination\n    return len(even_combinations) > 0\n"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # We will try to find 4 even numbers whose sum is equal to n\n    even_numbers = set()  # to avoid duplicates\n    for i in range(2, n+1, 2):\n        if n-i in even_numbers:\n            return True\n        even_numbers.add(i)\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # check if n is divisible by 4\n    if n % 4!= 0:\n        return False\n\n    # find all even numbers that add up to n\n    even_numbers = []\n    for i in range(2, n, 2):\n        if i <= n/2 and (n-i) % 4 == 0:\n            even_numbers.append(i)\n\n    # check if there are exactly 4 even numbers that add up to n\n    return len(even_numbers) == 4"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # Find the sum of the first 4 even numbers\n    even_sum = 0\n    for i in range(1, 5):\n        even_sum += 2 * i\n        \n    # Check if the given number is equal to the sum of the first 4 even numbers\n    if n == even_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n % 2!= 0:  # check if n is odd\n        return False\n    even_numbers = [i for i in range(2, n+1, 2)]  # get a list of even numbers from 2 to n\n    if len(even_numbers)!= 4:  # check if there are exactly 4 even numbers in the list\n        return False\n    return sum(even_numbers) == n  # check if the sum of the even numbers equals n\n"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    if n % 2 == 1:  # If n is odd, then it cannot be written as the sum of 4 even numbers\n        return False\n    else:\n        for i in range(2, n-2):\n            if i % 2 == 0:\n                if n == 2*i + 4:\n                    return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Initialize the list of even numbers and the sum of even numbers\n    even_numbers = [2, 4, 6, 8]\n    even_numbers_sum = sum(even_numbers)\n    # Check if the given number is divisible by 4 and greater than or equal to 24\n    if n % 4 == 0 and n >= 24:\n        # If the given number is divisible by 4 and greater than or equal to 24, then check if the difference between the given number and the sum of even numbers is divisible by 4\n        if (n - even_numbers_sum) % 4 == 0:\n            return True\n    return False"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial\n\nprint(special_factorial(4)) # Output: 288"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    brazilian_factorial = factorial * special_factorial(n-1)\n    return brazilian_factorial"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial\n"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n\n    return result"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            result *= i\n        return result\n\nprint(special_factorial(4))  # Output: 288"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    # replace all spaces with underscores\n    new_text = text.replace(\" \", \"_\")\n    \n    # replace all consecutive spaces with a single hyphen\n    new_text = \"-\".join(new_text.split(\"-\")[::2])\n    \n    return new_text"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    new_text = \"\"\n    for i in range(len(text)):\n        if text[i] == \" \":\n            if (i == 0) or (text[i-1]!= \" \") or (i == len(text)-1) or (text[i+1]!= \" \"):\n                new_text += \"_\"\n            else:\n                new_text += \"-\"\n        else:\n            new_text += text[i]\n    return new_text"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"  \", \"-\")\n    return text"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    # Replace all consecutive spaces with -\n    while \"  \" in text:\n        text = text.replace(\"  \", \"-\")\n    return text"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n\n    # Replace all spaces with underscores\n    new_text = text.replace(\" \", \"_\")\n\n    # Replace more than 2 consecutive spaces with -\n    new_text = \" \".join(new_text.split())\n\n    return new_text"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    text = text.replace(' ', '_')\n    return text.replace('__', '-')"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    new_text = ''\n    i = 0\n    while i < len(text):\n        if text[i] =='':\n            if i+1 < len(text) and text[i+1] =='':\n                while i+1 < len(text) and text[i+1] =='':\n                    i += 1\n            else:\n                new_text += '_'\n                i += 1\n        else:\n            new_text += text[i]\n            i += 1\n    return new_text"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace all consecutive spaces with -\n    i = 0\n    while i < len(text) - 1:\n        if text[i] == \" \" and text[i+1] == \" \":\n            # Remove the first space and replace the second space with -\n            text = text[:i+1] + \"-\" + text[i+2:]\n        i += 1\n    \n    return text"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    new_text = ''\n    prev_space = False\n    for char in text:\n        if char =='':\n            if prev_space:\n                new_text += '-'\n            else:\n                new_text += '_'\n            prev_space = True\n        else:\n            new_text += char\n            prev_space = False\n    return new_text"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    # remove all consecutive spaces\n    text =''.join(text.split())\n    \n    # replace spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # replace more than 2 consecutive spaces with -\n    i = 0\n    while i < len(text) - 2:\n        if text[i] == '_' and text[i+1] == '_' and text[i+2] =='':\n            text = text[:i+2] + '-' + text[i+2:]\n        i += 1\n        \n    return text"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Split the file name into its components\n    components = file_name.split(\".\")\n\n    # Check if there are more than three digits in the file name\n    if len(components[0].replace(\"_\",\"\")) > 3:\n        return \"No\"\n\n    # Check if the file name contains exactly one dot\n    if len(components)!= 2:\n        return \"No\"\n\n    # Check if the substring before the dot is not empty and starts with a letter from the latin alphapet\n    if not components[0][0].isalpha():\n        return \"No\"\n\n    # Check if the substring after the dot is one of the allowed extensions\n    if components[1] not in ['txt', 'exe', 'dll']:\n        return \"No\"\n\n    # If all the conditions are met, return \"Yes\"\n    return \"Yes\""
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Split the file name into before and after the dot.\n    file_name_split = file_name.split(\".\")\n    # Check if there are more than three digits in the file name.\n    if any(char.isdigit() for char in file_name):\n        return \"No\"\n    # Check if there is exactly one dot in the file name.\n    if len(file_name_split)!= 2:\n        return \"No\"\n    # Check if the substring before the dot is empty or starts with a digit.\n    if not file_name_split[0] or file_name_split[0][0].isdigit():\n        return \"No\"\n    # Check if the substring after the dot is valid.\n    if file_name_split[1] not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    # If all checks pass, return \"Yes\".\n    return \"Yes\""
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Check for more than 3 digits in the name\n    if sum(char.isdigit() for char in file_name) > 3:\n        return \"No\"\n    \n    # Check if the name contains only one dot\n    if file_name.count(\".\")!= 1:\n        return \"No\"\n    \n    # Check if the substring before the dot is empty or starts with a non-latin alphabetic character\n    dot_index = file_name.index(\".\")\n    before_dot = file_name[:dot_index]\n    if not before_dot or not before_dot[0].isalpha():\n        return \"No\"\n    \n    # Check if the substring after the dot is one of the valid extensions\n    after_dot = file_name[dot_index+1:]\n    valid_extensions = [\"txt\", \"exe\", \"dll\"]\n    if after_dot.lower() not in valid_extensions:\n        return \"No\"\n    \n    # If all conditions are met, return \"Yes\"\n    return \"Yes\""
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if file_name.count(\".\")!= 1:\n        return \"No\"\n    file_name_part = file_name.split(\".\")[0]\n    if len(file_name_part) == 0 or not file_name_part[0].isalpha():\n        return \"No\"\n    file_ext = file_name.split(\".\")[1]\n    if file_ext not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    if any(char.isdigit() for char in file_name_part):\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n    # split the file name by '.'\n    split_file_name = file_name.split('.')\n\n    # check if the length of the splitted file name is greater than 2\n    if len(split_file_name) > 2:\n        return 'No'\n\n    # check if the length of the splitted file name is less than 2\n    if len(split_file_name) < 2:\n        return 'No'\n\n    # check if the first substring after the dot is one of the allowed extensions\n    if split_file_name[-1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    # check if the first substring before the dot is not empty and starts with a letter from the latin alphabet\n    if not split_file_name[0][0].isalpha() or len(split_file_name[0]) == 1:\n        return 'No'\n\n    # check if the file name contains more than three digits\n    if sum(char.isdigit() for char in file_name) > 3:\n        return 'No'\n\n    # if all conditions are met, return 'Yes'\n    return 'Yes'"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    \n    # Split the file name by dot\n    split_file_name = file_name.split(\".\")\n    \n    # Check if the number of dots in the file name is more than 1 or less than 2\n    if len(split_file_name)!= 2:\n        return \"No\"\n    \n    # Check if the substring before the dot is empty\n    if not split_file_name[0]:\n        return \"No\"\n    \n    # Check if the substring before the dot starts with a letter from the latin alphapet\n    if not (split_file_name[0][0].isalpha() and split_file_name[0][0].isascii()):\n        return \"No\"\n    \n    # Check if the substring after the dot is one of these: ['txt', 'exe', 'dll']\n    if split_file_name[1] not in ['txt', 'exe', 'dll']:\n        return \"No\"\n    \n    # Check if there are more than 3 digits in the file name\n    if len(split_file_name[0]) - split_file_name[0].count(\"0\") > 3:\n        return \"No\"\n    \n    # If all the conditions are met, return 'Yes'\n    return \"Yes\""
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3 and file_name.count(\".\")!= 1:\n        return \"No\"\n    else:\n        file_name_parts = file_name.split(\".\")\n        if len(file_name_parts[0]) == 0 or not (file_name_parts[0][0].isalpha() and file_name_parts[0][0].isupper()):\n            return \"No\"\n        elif file_name_parts[1] not in [\"txt\", \"exe\", \"dll\"]:\n            return \"No\"\n        else:\n            return \"Yes\""
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n    # Check if the file name contains more than three digits\n    if any(char.isdigit() for char in file_name):\n        return \"No\"\n\n    # Check if the file name contains exactly one dot\n    if file_name.count(\".\")!= 1:\n        return \"No\"\n\n    # Extract the substring before the dot and after the dot\n    file_name_before_dot, file_name_after_dot = file_name.split(\".\")\n\n    # Check if the substring before the dot is empty or starts with a non-latin alphabet letter\n    if not file_name_before_dot[0].isalpha():\n        return \"No\"\n\n    # Check if the substring after the dot is one of the valid file types\n    if file_name_after_dot not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n\n    # If all the conditions are met, return \"Yes\"\n    return \"Yes\""
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n    # Check if the file name contains more than three digits\n    if sum(c.isdigit() for c in file_name) > 3:\n        return \"No\"\n\n    # Check if the file name contains exactly one dot\n    if file_name.count(\".\")!= 1:\n        return \"No\"\n\n    # Extract the substring before and after the dot\n    before_dot, after_dot = file_name.split(\".\")\n\n    # Check if the substring before the dot is empty or does not start with a letter\n    if not before_dot or not before_dot[0].isalpha():\n        return \"No\"\n\n    # Check if the substring after the dot is one of the allowed values\n    allowed_values = [\"txt\", \"exe\", \"dll\"]\n    if after_dot not in allowed_values:\n        return \"No\"\n\n    # If all conditions are met, the file name is valid\n    return \"Yes\""
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    \n    # Split the file name into two parts: the substring before the dot and the substring after the dot.\n    parts = file_name.split('.')\n    \n    # Check if the file name contains more than three digits.\n    if len(file_name) - file_name.count('.') > 4:\n        return 'No'\n    \n    # Check if the file name contains exactly one dot.\n    if len(parts)!= 2:\n        return 'No'\n    \n    # Check if the substring before the dot is empty or starts with an invalid character.\n    if not parts[0] or not parts[0][0].isalpha():\n        return 'No'\n    \n    # Check if the substring after the dot is one of the valid file types.\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # If all the conditions are met, return 'Yes'.\n    return 'Yes'"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            lst[i] = lst[i] ** 3\n        total += lst[i]\n    return total"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    res = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            res += lst[i]**2\n        elif i % 4 == 0:\n            res += lst[i]**3\n    return res"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function\n    shall square the integer entry if its index is a multiple of 3 and will cube the\n    integer entry if its index is a multiple of 4 and not a multiple of 3. The function\n    will not change the entries in the list whose indexes are not a multiple of 3 or 4.\n    The function shall then return the sum of all entries.\n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            lst[i] = lst[i] ** 3\n    for j in lst:\n        result += j\n    return result"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function \n    shall square the integer entry if its index is a multiple of 3 and will cube the integer \n    entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function \n    shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_squares(lst):\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0 and i % 4!= 0:\n            result += num**2\n        elif i % 4 == 0:\n            result += num**3\n    return result"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_squares(lst):\n    total = 0\n    for i, x in enumerate(lst):\n        if i % 3 == 0:\n            total += x**2\n        elif i % 4 == 0 and i % 3!= 0:\n            total += x**3\n    return total"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            result += lst[i] ** 3\n    return result"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            lst[i] = lst[i] ** 3\n        else:\n            continue\n        sum += lst[i]\n    return sum"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4!= 0: # square the integer if its index is a multiple of 3\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3!= 0: # cube the integer if its index is a multiple of 4 and not a multiple of 3\n            lst[i] = lst[i] ** 3\n        else:\n            pass\n    \n    for i in range(len(lst)):\n        sum += lst[i]\n        \n    return sum"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if len(word) > 1 and is_prime(len(word))]\n    return''.join(prime_words)"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_prime(num):\n    \"\"\"\n    Function to check if a given number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    Function to return the words whose lengths are prime numbers from the given sentence.\n    \"\"\"\n    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    return \" \".join(prime_words)"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def words_in_sentence(sentence):\n    words = sentence.split()\n    result = \"\"\n    for word in words:\n        if is_prime(len(word)):\n            result += word + \" \"\n    return result.strip()\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    Returns a string containing the words from the original sentence,\n    whose lengths are prime numbers, in the order of the original sentence.\n    \"\"\"\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return \" \".join(result)"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n    \"\"\"\n    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    return \" \".join(prime_words)"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    Returns a string containing the words from the original sentence,\n    whose lengths are prime numbers,\n    in the same order as the original sentence.\n    \"\"\"\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return \" \".join(result)"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    result = \"\"\n    for word in words:\n        if is_prime(len(word)):\n            result += word + \" \"\n    return result.strip()"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    result = []\n    for word in words:\n        if len(word) > 1 and is_prime(len(word)):\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n    \"\"\"\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_words)"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    Given a string representing a sentence, returns a string that contains the words from the original sentence,\n    whose lengths are prime numbers, and the order of the words in the new string is the same as the original one.\n    \"\"\"\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 144,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    \n    # convert fractions from string to fraction object\n    x = eval(x)\n    n = eval(n)\n    \n    # simplify the expression by multiplying numerator and denominator\n    result = x.numerator * n.denominator\n    \n    # check if the result is a whole number\n    if result % n.numerator == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 144,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def simplify(x, n):\n    # Convert string to fraction\n    x = eval(x)\n    n = eval(n)\n    \n    # Calculate product of x and n\n    p = x * n\n    \n    # Convert product to string and check if it's an integer\n    p = str(p)\n    if '/' in p:\n        return False\n    else:\n        return True"
    },
    {
        "number": 144,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from fractions import Fraction\n\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    f1 = Fraction(x)\n    f2 = Fraction(n)\n    f3 = f1 * f2\n    return f3.numerator == f3.denominator"
    },
    {
        "number": 144,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def simplify(x, n):\n    \"\"\"Simplifies the expression x * n. Returns True if x * n evaluates to a whole number and False otherwise.\"\"\"\n    a, b = map(int, x.split('/'))\n    c, d = map(int, n.split('/'))\n    return (a*c) // b == (a*d) // b"
    },
    {
        "number": 144,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def simplify(x, n):\n    # Split the fractions into numerator and denominator\n    x_num, x_den = map(int, x.split(\"/\"))\n    n_num, n_den = map(int, n.split(\"/\"))\n\n    # Compute the simplified fraction\n    simplified_num = (x_num * n_den + n_num * x_den) // (x_den * n_den)\n    simplified_den = x_den * n_den\n\n    # Check if the simplified fraction evaluates to a whole number\n    if simplified_num % simplified_den == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 144,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def simplify(x, n):\n    \"\"\"Simplify the expression x * n.\"\"\"\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    if n_num % x_den == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 144,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    numerator_x, denominator_x = map(int, x.split('/'))\n    numerator_n, denominator_n = map(int, n.split('/'))\n    result = numerator_x * numerator_n * denominator_n // (denominator_x * denominator_n)\n    return result == int(result)"
    },
    {
        "number": 144,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def simplify(x, n):\n    \"\"\"Simplifies x * n and returns True if it evaluates to a whole number, False otherwise.\"\"\"\n    num1, den1 = map(int, x.split('/'))\n    num2, den2 = map(int, n.split('/'))\n    result = num1 * num2 * den1 * den2\n    return result % 1 == 0"
    },
    {
        "number": 144,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from fractions import Fraction\n\ndef simplify(x, n):\n    x_frac = Fraction(x)\n    n_frac = Fraction(n)\n    result_frac = x_frac * n_frac\n    return result_frac.numerator == result_frac.denominator"
    },
    {
        "number": 144,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def simplify(x, n):\n    num1, den1 = map(int, x.split('/'))\n    num2, den2 = map(int, n.split('/'))\n    return (num1 * den2) == (num2 * den1)"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    This function sorts the given list of integers in ascending order\n    according to the sum of their digits. If there are several items with\n    similar sum of their digits, they are ordered based on their index in\n    original list.\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), abs(x)))\n"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def get_sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    nums = [(num, get_sum_of_digits(num), i) for i, num in enumerate(nums)]\n    nums.sort(key=lambda x: (x[1], x[2]))\n    return [num[0] for num in nums]\n"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    # sort by the sum of digits and then by index\n    return sorted(nums, key=lambda num: (sum_of_digits(num), nums.index(num)))"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def order_by_points(nums):\n    # Create a list of tuples, where each tuple contains\n    # the sum of digits and the original index of the integer\n    digit_sums = [(sum(map(int, str(num))), i) for i, num in enumerate(nums)]\n    \n    # Sort the list of tuples based on the sum of digits\n    digit_sums.sort()\n    \n    # Extract the original indices of the sorted integers\n    sorted_indices = [pair[1] for pair in digit_sums]\n    \n    # Return the sorted list of integers\n    return [nums[i] for i in sorted_indices]"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(num):\n        \"\"\"Helper function to calculate the sum of digits of a number\"\"\"\n        return sum(int(digit) for digit in str(abs(num)))\n    \n    nums.sort(key=lambda num: (sum_of_digits(num), nums.index(num)))\n    return nums"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(num):\n        \"\"\"\n        Calculate the sum of digits of a given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(abs(num)))\n\n    nums_with_points = [(num, digit_sum(num)) for num in nums]\n    sorted_nums_with_points = sorted(nums_with_points, key=lambda x: (x[1], nums.index(x[0])))\n    return [num for num, _ in sorted_nums_with_points]"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(digit) for digit in str(abs(x))), reverse=True)"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(num):\n        \"\"\"\n        Calculate the sum of digits of a given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(abs(num)))\n\n    sorted_nums = sorted(enumerate(nums), key=lambda x: (sum_of_digits(x[1]), x[0]))\n    return [num for index, num in sorted_nums]"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Sorts the given list of integers in ascending order according to the sum of their digits.\n    If there are several items with similar sum of their digits, order them based on their index in original list.\n    \"\"\"\n    # Create a list of tuples where each tuple contains the sum of digits and the index of the integer in the original list\n    points = [(sum(int(digit) for digit in str(num)), index, num) for index, num in enumerate(nums)]\n\n    # Sort the list of tuples based on the first element of each tuple (sum of digits) and then the second element (index)\n    sorted_points = sorted(points)\n\n    # Create a new list of integers by taking the third element (original integer) from each tuple in the sorted order\n    sorted_nums = [sorted_point[2] for sorted_point in sorted_points]\n\n    return sorted_nums"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(num):\n        \"\"\"\n        Helper function to calculate the sum of digits of a number\n        \"\"\"\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (-sum_of_digits(x), nums.index(x)))\n"
    },
    {
        "number": 146,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2!= 0 and num % 10 in (1, 3, 5, 7, 9):\n            count += 1\n    return count"
    },
    {
        "number": 146,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def specialFilter(nums):\n    \"\"\"\n    This function takes an array of numbers as input and returns the number of elements in the array that are greater than 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9).\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 == 1 and num // 10 % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 146,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and num % 2 == 1 and int(str(num)[0]) % 2 == 1 and int(str(num)[-1]) % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 146,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def specialFilter(nums):\n    \"\"\"\n    This function takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2!= 0 and (num // 10) % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 146,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def specialFilter(nums):\n    \"\"\"\n    This function takes an array of numbers as input and returns the number of elements \n    in the array that are greater than 10 and both first and last digits of a number are odd.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 % 2!= 0:\n            first_digit = num // 10 ** (len(str(num)) - 1)\n            last_digit = num % 10\n            if first_digit % 2!= 0 and last_digit % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 146,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 % 2!= 0 and num // 10 % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 146,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num // 10) % 10 % 2 == 1 and num % 10 % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 146,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 % 2 == 1 and num // 10 % 10 % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 146,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 % 2 == 1 and num // 10 % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 146,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 10 % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 147,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"
    },
    {
        "number": 147,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"
    },
    {
        "number": 147,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"
    },
    {
        "number": 147,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    \n    # Create an array a of length n\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    \n    # Initialize variables for max_triples and count\n    max_triples = 0\n    count = 0\n    \n    # Loop through all possible triples\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                # Check if the sum of the triple is a multiple of 3\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    # Increment count and update max_triples if count is greater\n                    count += 1\n                    if count > max_triples:\n                        max_triples = count\n    \n    return max_triples"
    },
    {
        "number": 147,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"
    },
    {
        "number": 147,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"
    },
    {
        "number": 147,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"
    },
    {
        "number": 147,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"
    },
    {
        "number": 147,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"
    },
    {
        "number": 147,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count"
    },
    {
        "number": 148,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n\n    if index1 > index2:\n        index1, index2 = index2, index1\n\n    return tuple(planets[index:index2+1])\n"
    },
    {
        "number": 148,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    if idx1 > idx2:\n        idx1, idx2 = idx2, idx1\n    return tuple(planets[i] for i in range(idx1, idx2+1))"
    },
    {
        "number": 148,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    if idx1 > idx2:\n        idx1, idx2 = idx2, idx1\n    return tuple(planets[idx:idx+idx2-idx1+1])\n"
    },
    {
        "number": 148,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planet_names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planet_names or planet2 not in planet_names:\n        return ()\n    \n    index1 = planet_names.index(planet1)\n    index2 = planet_names.index(planet2)\n    \n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    return tuple(planet_names[i] for i in range(index1+1, index2))"
    },
    {
        "number": 148,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n    return tuple(planets[i] for i in range(planet1_index, planet2_index+1))"
    },
    {
        "number": 148,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n\n    result = []\n    for i in range(index1 + 1, index2):\n        result.append(planets[i])\n\n    return tuple(result)"
    },
    {
        "number": 148,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    '''\n\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n    # check if planet1 and planet2 are valid planet names\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    # initialize variables for planet indices\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n\n    # swap planet indices if planet2 is closer to the Sun than planet1\n    if planet2_index < planet1_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n\n    # slice the list of planets to include only those within the orbital range\n    planets_in_range = planets[planet1_index:planet2_index+1]\n\n    # sort the planets in descending order of their distances to the Sun\n    planets_in_range.sort(key=lambda x: planets.index(x), reverse=True)\n\n    return tuple(planets_in_range)"
    },
    {
        "number": 148,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    \n    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    if planet1 == planet2:\n        return (planet1,)\n\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n\n    return tuple(planets[index1+1:index2])"
    },
    {
        "number": 148,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n    # Check if planet1 and planet2 are valid planets\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    # Get the index of planet1 and planet2 in planets\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n\n    # Sort the planets based on their distances from the Sun\n    sorted_planets = sorted(planets[:index2+1], key=lambda p: planets.index(p))\n\n    # Return a tuple containing all planets between planet1 and planet2, sorted by their distance from the Sun\n    return tuple(sorted_planets[::-1])"
    },
    {
        "number": 148,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bf(planet1, planet2):\n    \"\"\"\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    \"\"\"\n    planets = [\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\",\n    ]\n\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n\n    if idx1 > idx2:\n        idx1, idx2 = idx2, idx1\n\n    return tuple(planets[i] for i in range(idx1 + 1, idx2))"
    },
    {
        "number": 149,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sorted_list_sum(lst):\n    # Create a new list without odd-length strings\n    new_lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the new list by length and then alphabetically\n    new_lst.sort(key=lambda x: (len(x), x))\n    \n    return new_lst"
    },
    {
        "number": 149,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\"\"\"\n\n    # Delete odd length strings\n    lst = [word for word in lst if len(word) % 2 == 0]\n\n    # Sort the list by length of each word and then alphabetically\n    lst = sorted(lst, key=lambda x: (len(x), x))\n\n    return lst"
    },
    {
        "number": 149,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Sorts a list of strings and removes strings with odd length.\"\"\"\n    # Remove odd-length strings from the list\n    lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the list by length and then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    \n    return lst"
    },
    {
        "number": 149,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"\n    This function accepts a list of strings as a parameter, deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order, The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates. The order of the list should be ascending by length of each word, and you should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically. The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length. For example:\n    assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # Filter out the odd length strings from the list\n    lst = list(filter(lambda x: len(x) % 2 == 0, lst))\n    # Sort the list in ascending order by length of each word, and then alphabetically if two words have the same length\n    lst.sort(key=lambda x: (len(x), x))\n    return lst"
    },
    {
        "number": 149,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sorted_list_sum(lst):\n    # First, remove any odd-length strings from the list\n    lst = [s for s in lst if len(s) % 2 == 0]\n    \n    # Next, sort the list by length and alphabetically within that\n    lst.sort(key=lambda s: (len(s), s))\n    \n    # Finally, return the sorted list\n    return lst"
    },
    {
        "number": 149,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # filter out odd length words\n    lst = [word for word in lst if len(word) % 2 == 0]\n\n    # sort the list by length and alphabetically for words with the same length\n    lst = sorted(lst, key=lambda x: (len(x), x))\n\n    return lst"
    },
    {
        "number": 149,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"\n    This function accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order.\n    \"\"\"\n    # Remove odd length strings from the list\n    lst = [word for word in lst if len(word) % 2 == 0]\n\n    # Sort the list based on length and alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n\n    # Return the sorted list\n    return lst"
    },
    {
        "number": 149,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"\n    Deletes strings with odd lengths and sorts the resulting list.\n    \"\"\"\n    # Filter out odd-length strings\n    lst = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the resulting list by length and alphabetically\n    lst = sorted(lst, key=lambda s: (len(s), s))\n    \n    return lst"
    },
    {
        "number": 149,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    \"\"\"\n    odd_len_words = [word for word in lst if len(word) % 2!= 0] # list comprehension to get odd length words\n    sorted_lst = sorted(lst, key=lambda x: (len(x), x)) # sorting the list based on length and alphabetically\n    sorted_lst = [word for word in sorted_lst if word not in odd_len_words] # removing odd length words from the list\n    return sorted_lst"
    },
    {
        "number": 149,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sorted_list_sum(lst):\n    # First, filter out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    # Next, sort the filtered list by length and then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda s: (len(s), s))\n    return sorted_lst"
    },
    {
        "number": 150,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def x_or_y(n, x, y):\n    \"\"\"\n    A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \n    Args:\n    n (int): a positive integer\n    x (int): a positive integer\n    y (int): a positive integer\n    \n    Returns:\n    int: the value of x if n is a prime number and y otherwise\n    \"\"\"\n    # A helper function to check if a number is prime\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Check if n is a prime number\n    if is_prime(n):\n        return x\n    else:\n        return y"
    },
    {
        "number": 150,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\"\"\"\n    # Check if n is prime\n    is_prime = True\n    for i in range(2, n):\n        if n % i == 0:\n            is_prime = False\n            break\n    if is_prime:\n        return x\n    else:\n        return y"
    },
    {
        "number": 150,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_prime(n):\n    \"\"\"Function to check if a number is prime or not.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y"
    },
    {
        "number": 150,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_prime(n):\n    \"\"\"A simple function to check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y"
    },
    {
        "number": 150,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y"
    },
    {
        "number": 150,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    is_prime = True\n    for i in range(2, n):\n        if n % i == 0:\n            is_prime = False\n            break\n\n    if is_prime:\n        return x\n    else:\n        return y"
    },
    {
        "number": 150,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\"\"\"\n\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n    return x"
    },
    {
        "number": 150,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def x_or_y(n, x, y):\n    \"\"\"\n    A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Args:\n    n (int): A number to check if it is prime or not.\n    x (int): A value to return if n is prime.\n    y (int): A value to return if n is not prime.\n\n    Returns:\n    int: Either x or y, depending on whether n is prime or not.\n\n    Examples:\n    >>> x_or_y(7, 34, 12)\n    34\n    >>> x_or_y(15, 8, 5)\n    5\n    \"\"\"\n    if n == 1:\n        return y\n    elif n == 2:\n        return x\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x"
    },
    {
        "number": 150,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y"
    },
    {
        "number": 150,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_prime(n):\n    \"\"\"A function to check if a number is prime\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y"
    },
    {
        "number": 151,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    '''\n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 == 1:\n            result += num**2\n    return result"
    },
    {
        "number": 151,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n\n    If the input list is empty, return 0.\n    \"\"\"\n\n    if not lst:  # If the list is empty, return 0\n        return 0\n\n    sum = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0 and num % 2!= 0:  # Check if num is an integer, non-negative and odd\n            sum += num**2  # Add the square of num to the sum\n    \n    return sum"
    },
    {
        "number": 151,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\n\n    If the input list is empty, return 0.\n    \"\"\"\n    if not lst:  # If the input list is empty, return 0\n        return 0\n    \n    result = 0  # Initialize the result variable to 0\n    \n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 == 1:  # Check if the number is odd and positive integer\n            result += num**2  # Add the square of the number to the result variable\n            \n    return result"
    },
    {
        "number": 151,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    \n    odd_squares = [num ** 2 for num in lst if isinstance(num, int) and num >= 0 and num % 2!= 0]\n    return sum(odd_squares)\n"
    },
    {
        "number": 151,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    else:\n        sum = 0\n        for num in lst:\n            if num > 0 and num % 2 == 1:\n                sum += num ** 2\n        return sum"
    },
    {
        "number": 151,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    '''\n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2!= 0:\n            result += num**2\n        elif num < 0:\n            continue\n    return result"
    },
    {
        "number": 151,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def double_the_difference(lst):\n    if not lst:\n        return 0\n    \n    total = 0\n    for num in lst:\n        if num < 0 or not isinstance(num, int):\n            continue\n        if num % 2!= 0:\n            total += num**2\n            \n    return total"
    },
    {
        "number": 151,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    \n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 == 1:\n                result += num ** 2\n        elif num < 0:\n            result += num ** 2\n        \n    return result"
    },
    {
        "number": 151,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    '''\n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0 and num % 2!= 0:\n            result += num**2\n    return result if lst else 0"
    },
    {
        "number": 151,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n\n    If the input list is empty, return 0.\n    \"\"\"\n\n    if len(lst) == 0:\n        return 0\n    \n    total = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2!= 0:\n            total += num**2\n    \n    return total"
    },
    {
        "number": 152,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"
    },
    {
        "number": 152,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def compare(game,guess):\n    result = []\n    for i in range(len(game)):\n        if guess[i] == game[i]:\n            result.append(0)\n        else:\n            result.append(abs(guess[i]-game[i]))\n    return result"
    },
    {
        "number": 152,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def compare(game,guess):\n    \"\"\"\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \"\"\"\n    result = []\n    for i in range(len(game)):\n        if guess[i] == game[i]:\n            result.append(0)\n        else:\n            result.append(abs(guess[i] - game[i]))\n    return result"
    },
    {
        "number": 152,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def compare(scores, guesses):\n    \"\"\"Compares two arrays of scores and guesses and returns an array of the same length denoting the difference between each guess and score.\n    A correct guess has a value of 0, and an incorrect guess has a value of the absolute difference between the guess and the score.\n    \"\"\"\n    differences = []\n    for score, guess in zip(scores, guesses):\n        if score == guess:\n            differences.append(0)\n        else:\n            differences.append(abs(guess - score))\n    return differences"
    },
    {
        "number": 152,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\"\"\"\n    \n    result = []\n    \n    for i in range(len(game)):\n        if guess[i] == game[i]:\n            result.append(0)\n        else:\n            result.append(abs(guess[i]-game[i]))\n    \n    return result"
    },
    {
        "number": 152,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def compare(game, guess):\n    \"\"\"Return an array of the same length denoting how far off each guess was. \n    If they have guessed correctly, the value is 0, and if not, the value is the \n    absolute difference between the guess and the score.\"\"\"\n    diff = [abs(game[i] - guess[i]) for i in range(len(game))]\n    return diff"
    },
    {
        "number": 152,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def compare(game, guess):\n    \"\"\"\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    :param game: list of scores in the game\n    :param guess: list of guesses made by the user\n    :return: list of absolute differences between the scores and guesses made by the user\n    \"\"\"\n    differences = []\n    for i in range(len(game)):\n        diff = abs(game[i] - guess[i])\n        differences.append(diff)\n    return differences"
    },
    {
        "number": 152,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def compare(scores, guesses):\n    \"\"\"\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    example:\n    \n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    result = []\n    for i in range(len(scores)):\n        if scores[i] == guesses[i]:\n            result.append(0)\n        else:\n            result.append(abs(scores[i] - guesses[i]))\n    return result"
    },
    {
        "number": 152,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def compare(game, guess):\n    \"\"\"\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \"\"\"\n    diff = []\n    for i in range(len(game)):\n        diff.append(abs(game[i] - guess[i]))\n    return diff"
    },
    {
        "number": 152,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def compare(game,guess):\n    \"\"\"\n    This function compares two lists of equal length, and returns an array of the same length denoting \n    how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is \n    the absolute difference between the guess and the score.\n    \"\"\"\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"
    },
    {
        "number": 153,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Strongest_Extension(class_name, extensions):\n    strengths = {}\n    for extension in extensions:\n        cap_letters = sum(1 for letter in extension if letter.isupper())\n        sm_letters = sum(1 for letter in extension if letter.islower())\n        strength = cap_letters - sm_letters\n        strengths[extension] = strength\n    \n    strongest_extension = min(strengths, key=strengths.get)\n    \n    return f\"{class_name}.{strongest_extension}\""
    },
    {
        "number": 153,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    strengths = []\n    for ext in extensions:\n        cap = sum(1 for letter in ext if letter.isupper())\n        sm = sum(1 for letter in ext if letter.islower())\n        strengths.append(cap - sm)\n    max_strength = max(strengths)\n    max_strength_indices = [i for i, strength in enumerate(strengths) if strength == max_strength]\n    strongest_extension = extensions[max_strength_indices[0]]\n    return f\"{class_name}.{strongest_extension}\""
    },
    {
        "number": 153,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Strongest_Extension(class_name, extensions):\n    strengths = [(ext, sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())) for ext in extensions]\n    strongest = max(strengths, key=lambda x: x[1])\n    return f\"{class_name}.{strongest[0]}\""
    },
    {
        "number": 153,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Strongest_Extension(class_name, extensions):\n    max_strength = -1\n    strongest_extension = None\n    for extension in extensions:\n        cap_count = sum(1 for char in extension if char.isupper())\n        sm_count = sum(1 for char in extension if char.islower())\n        strength = cap_count - sm_count\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""
    },
    {
        "number": 153,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    strengths = []\n    for extension in extensions:\n        cap = 0\n        sm = 0\n        for char in extension:\n            if char.isupper():\n                cap += 1\n            elif char.islower():\n                sm += 1\n        strengths.append(cap - sm)\n    max_strength = max(strengths)\n    max_indices = [i for i, strength in enumerate(strengths) if strength == max_strength]\n    strongest_index = min(max_indices)\n    return f\"{class_name}.{extensions[strongest_index]}\""
    },
    {
        "number": 153,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Strongest_Extension(class_name, extensions):\n    strength = {}\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength[extension] = cap - sm\n    max_strength = max(strength.values())\n    strongest_extensions = [extension for extension, value in strength.items() if value == max_strength]\n    return f\"{class_name}.{strongest_extensions[0]}\""
    },
    {
        "number": 153,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Strongest_Extension(class_name, extensions):\n    strengths = [(len(extension.upper()), len(extension.lower()), extension) for extension in extensions]\n    strongest_extension = max(strengths, key=lambda x: x[0] - x[1])[2]\n    return f\"{class_name}.{strongest_extension}\""
    },
    {
        "number": 153,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n\n    # Initialize variables\n    strengths = []\n    strongest = \"\"\n\n    # Calculate strength of each extension and find the strongest one\n    for extension in extensions:\n        cap = sum(c.isupper() for c in extension)\n        sm = sum(c.islower() for c in extension)\n        strength = cap - sm\n        strengths.append(strength)\n        if strength > 0:\n            strongest = extension\n\n    # Find the index of the strongest extension in the list\n    index = strengths.index(max(strengths))\n\n    # Return the result as a string\n    return f\"{class_name}.{strongest}\""
    },
    {
        "number": 153,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n\n    # Define a function to calculate the strength of an extension\n    def extension_strength(extension):\n        cap_count = sum(1 for c in extension if c.isupper())\n        sm_count = sum(1 for c in extension if c.islower())\n        return cap_count - sm_count\n\n    # Find the strongest extension and its strength\n    strongest_extension = None\n    strongest_strength = float('-inf')\n    for extension in extensions:\n        strength = extension_strength(extension)\n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n\n    # Return the result in the required format\n    if strongest_extension is None:\n        return None\n    else:\n        return f\"{class_name}.{strongest_extension}\""
    },
    {
        "number": 153,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    strengths = {}\n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strengths[extension] = CAP - SM\n    \n    strongest_extension = max(strengths, key=strengths.get)\n    return f\"{class_name}.{strongest_extension}\""
    },
    {
        "number": 154,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"\n    Given two words, returns True if the second word or any of its rotations is a substring in the first word.\n    \"\"\"\n    # Check if b is a substring in a\n    if b in a:\n        return True\n\n    # Check if b is a substring in a rotated 1 character to the left\n    if b in a[1:]:\n        return True\n\n    # Check if b is a substring in a rotated 1 character to the right\n    if b in a[:-1]:\n        return True\n\n    # Check if b is a substring in a rotated 2 characters to the left\n    if b in a[2:]:\n        return True\n\n    # Check if b is a substring in a rotated 2 characters to the right\n    if b in a[:-2]:\n        return True\n\n    # Check if b is a substring in a rotated 3 characters to the left\n    if b in a[3:]:\n        return True\n\n    # Check if b is a substring in a rotated 3 characters to the right\n    if b in a[:-3]:\n        return True\n\n    # Check if b is a substring in a rotated n characters to the left\n    # where n is the length of b\n    for i in range(len(b), len(a)):\n        if b in a[i:]:\n            return True\n\n    # Check if b is a substring in a rotated n characters to the right\n    # where n is the length of b\n    for i in range(1, len(b)+1):\n        if b in a[:-i]:\n            return True\n\n    # If we get to this point, b is not a substring in a or any of its rotations\n    return False"
    },
    {
        "number": 154,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\"\"\"\n    if len(b) > len(a):\n        return False\n    \n    # Check if second word is substring of first word\n    if b in a:\n        return True\n    \n    # Check for any rotations of second word in first word\n    for i in range(len(a)):\n        if b == a[i:i+len(b)]:\n            return True\n        if b == a[i:i+len(b)][::-1]:\n            return True\n    \n    # If second word not present in first word and not a rotation, return False\n    return False"
    },
    {
        "number": 154,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\"\"\"\n    if b in a or b in a[1:]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 154,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\"\"\"\n    if len(b) > len(a):\n        return False\n\n    for i in range(len(a)):\n        if a[i:i+len(b)] == b:\n            return True\n        if a[i:i+len(b)] == b[::-1]:\n            return True\n\n    return False"
    },
    {
        "number": 154,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    \"\"\"\n    if b in a or b in a[1:]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 154,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    \"\"\"\n    if b in a:\n        return True\n    else:\n        # check for rotations of b\n        for i in range(len(b)):\n            rotated_b = b[i:] + b[:i]\n            if rotated_b in a:\n                return True\n    return False"
    },
    {
        "number": 154,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cycpattern_check(a, b):\n    if b in a:\n        return True\n    else:\n        return False"
    },
    {
        "number": 154,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    \"\"\"\n    if b in a:\n        return True\n    \n    for i in range(len(b)):\n        if b == b[i:] + b[:i]:\n            if b[i:] in a or b[:i] in a:\n                return True\n    return False"
    },
    {
        "number": 154,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\"\n    if b in a:\n        return True\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False"
    },
    {
        "number": 154,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word.\n    \"\"\"\n    if b in a:\n        return True\n    else:\n        return False"
    },
    {
        "number": 155,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n    even_odd_count(-12) ==> (1, 1)\n    even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"
    },
    {
        "number": 155,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    \n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)"
    },
    {
        "number": 155,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num!= 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"
    },
    {
        "number": 155,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\"\"\"\n    num = abs(num)\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)\n"
    },
    {
        "number": 155,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\"\"\"\n    even_count = 0\n    odd_count = 0\n    \n    # loop through each digit in the number\n    while num!= 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    \n    # return the tuple of even and odd count\n    return (even_count, odd_count)"
    },
    {
        "number": 155,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n    odd = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)"
    },
    {
        "number": 155,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n    odd = 0\n\n    if num < 0:\n        num = abs(num)\n\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n\n    return (even, odd)"
    },
    {
        "number": 155,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\"\"\"\n    even_count = 0\n    odd_count = 0\n\n    # Converting the number to string\n    num_str = str(num)\n\n    # Iterating over each character of the string\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Returning the tuple of even and odd count\n    return (even_count, odd_count)"
    },
    {
        "number": 155,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    \n    # Convert the number to a string and iterate through each character\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)"
    },
    {
        "number": 155,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num!= 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"
    },
    {
        "number": 156,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    roman_map = {\n        1000:'m',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    roman_numeral = ''\n    for value, numeral in roman_map.items():\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n\n    return roman_numeral.lower()"
    },
    {
        "number": 156,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    # define the symbols and their values\n    symbols = [(\"M\", 1000), (\"CM\", 900), (\"D\", 500), (\"CD\", 400),\n               (\"C\", 100), (\"XC\", 90), (\"L\", 50), (\"XL\", 40),\n               (\"X\", 10), (\"IX\", 9), (\"V\", 5), (\"IV\", 4), (\"I\", 1)]\n\n    # initialize the result string and the remaining number to convert\n    result = \"\"\n    remaining = number\n\n    # iterate over the symbols and their values until all numbers have been converted\n    for sym, val in symbols:\n        # get the number of times the symbol can be added\n        count = remaining // val\n\n        # add the symbol to the result string and update the remaining number\n        result += sym * count\n        remaining -= val * count\n\n    # return the result string in lowercase\n    return result.lower()"
    },
    {
        "number": 156,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    \n    # create a dictionary to map each digit to its corresponding roman numeral\n    roman_dict = {1000:'m', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    \n    # create an empty string to store the roman numeral equivalent\n    roman_numeral = ''\n    \n    # iterate over the roman_dict keys in descending order\n    for value in sorted(roman_dict.keys(), reverse=True):\n        \n        # if the number is greater than or equal to the current value, append the corresponding roman numeral to the string and subtract the value from the number\n        while number >= value:\n            roman_numeral += roman_dict[value]\n            number -= value\n    \n    return roman_numeral"
    },
    {
        "number": 156,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Define the Roman numeral equivalents for each number\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000:'m'\n    }\n\n    # Initialize the result string\n    result = ''\n\n    # Iterate over each power of 1000\n    for i in range(len(roman_numerals)-1, -1, -1):\n        # Get the largest power of 1000 that is less than or equal to the number\n        power = 1000**(i+1)\n        if number >= power:\n            # Get the Roman numeral for that power and append it to the result string\n            numeral = roman_numerals[power]\n            result += numeral\n            # Subtract the power from the number so that we don't repeat it later\n            number -= power\n\n    return result.lower()"
    },
    {
        "number": 156,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    True\n    >>> int_to_mini_roman(152) == 'clii'\n    True\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    True\n    \"\"\"\n    roman_numerals = [\n        (1000,'m'),\n        (900, 'cm'),\n        (500, 'd'),\n        (400, 'cd'),\n        (100, 'c'),\n        (90, 'xc'),\n        (50, 'l'),\n        (40, 'xl'),\n        (10, 'x'),\n        (9, 'ix'),\n        (5, 'v'),\n        (4, 'iv'),\n        (1, 'i')\n    ]\n\n    result = ''\n    for value, numeral in roman_numerals:\n        while number >= value:\n            result += numeral\n            number -= value\n\n    return result.lower()\n"
    },
    {
        "number": 156,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_dict = {'M': 1000, 'CM': 900, 'D': 500, 'CD': 400, 'C': 100, 'XC': 90, 'L': 50, 'XL': 40, 'X': 10, 'IX': 9, 'V': 5, 'IV': 4, 'I': 1}\n    roman_num = ''\n    for key in roman_dict:\n        while number >= roman_dict[key]:\n            roman_num += key\n            number -= roman_dict[key]\n    return roman_num.lower()"
    },
    {
        "number": 156,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_map = {\n        1000:'m',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n    roman_numeral = ''\n    for value, numeral in roman_map.items():\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n    return roman_numeral"
    },
    {
        "number": 156,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    roman_numeral_map = {1000:'m', 900: 'cm', 500: 'd', 400: 'cd',\n                         100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n                         10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n\n    result = ''\n    for value, numeral in sorted(roman_numeral_map.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n\n    return result.lower()"
    },
    {
        "number": 156,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n\n    # Define the conversion table\n    roman_map = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n\n    # Initialize the result string\n    result = ''\n\n    # Iterate over the conversion table in descending order of the key values\n    for value, numeral in sorted(roman_map.items(), reverse=True):\n\n        # Divide the number by the current value and append the numeral to the result\n        while number >= value:\n            result += numeral\n            number -= value\n\n    # Return the result string in lowercase\n    return result.lower()"
    },
    {
        "number": 156,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = [('M', 1000), ('CM', 900), ('D', 500), ('CD', 400),\n                      ('C', 100), ('XC', 90), ('L', 50), ('XL', 40),\n                      ('X', 10), ('IX', 9), ('V', 5), ('IV', 4), ('I', 1)]\n\n    result = ''\n    for numeral, value in roman_numerals:\n        while number >= value:\n            result += numeral\n            number -= value\n\n    return result.lower()"
    },
    {
        "number": 157,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Check if the sum of any two sides is greater than the third side\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False"
    },
    {
        "number": 157,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 157,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Calculate the angles of the triangle using the Law of Cosines\n    angle_a = math.acos((c**2 + b**2 - a**2) / (2*c*b))\n    angle_b = math.acos((a**2 + c**2 - b**2) / (2*a*c))\n    angle_c = math.acos((b**2 + a**2 - c**2) / (2*b*a))\n\n    # Check if any of the angles is a right angle (90 degrees)\n    if angle_a == math.pi/2 or angle_b == math.pi/2 or angle_c == math.pi/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 157,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or 90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Check if the sum of any two sides is greater than the third side\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n"
    },
    {
        "number": 157,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 157,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or 90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a*a + b*b == c*c or b*b + c*c == a*a or c*c + a*a == b*b:\n        return True\n    else:\n        return False"
    },
    {
        "number": 157,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or 90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # check if a^2 + b^2 = c^2 or b^2 + c^2 = a^2 or c^2 + a^2 = b^2\n    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 157,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 157,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Check if the sum of any two sides of the triangle is greater than the third side\n    if a + b > c and b + c > a and a + c > b:\n        return True\n    else:\n        return False"
    },
    {
        "number": 157,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\n    # Check if the sides form a valid triangle\n    if a + b > c and b + c > a and a + c > b:\n\n        # Check if the triangle is right-angled\n        if math.pow(a, 2) + math.pow(b, 2) == math.pow(c, 2) or \\\n           math.pow(b, 2) + math.pow(c, 2) == math.pow(a, 2) or \\\n           math.pow(a, 2) + math.pow(c, 2) == math.pow(b, 2):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 158,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_max(words):\n    max_word = \"\"\n    max_unique = 0\n    for word in words:\n        unique = len(set(word))\n        if unique > max_unique or (unique == max_unique and word < max_word):\n            max_word = word\n            max_unique = unique\n    return max_word"
    },
    {
        "number": 158,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"aaaaaaa\"\n    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    \n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_count or (len(unique_chars) == max_count and word < max_word):\n            max_word = word\n            max_count = len(unique_chars)\n            \n    return max_word"
    },
    {
        "number": 158,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_max(words):\n    \"\"\"\n    Returns the word with maximum number of unique characters.\n    If multiple strings have maximum number of unique characters,\n    returns the one which comes first in lexicographical order.\n    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n        count = len(set(word))\n        if count > max_count or (count == max_count and word < max_word):\n            max_word = word\n            max_count = count\n    return max_word"
    },
    {
        "number": 158,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n        count = len(set(word))\n        if count > max_count or (count == max_count and word < max_word):\n            max_word = word\n            max_count = count\n    return max_word"
    },
    {
        "number": 158,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n    \"\"\"\n    max_word = \"\"\n    max_count = 0\n\n    for word in words:\n        count = len(set(word))\n        if count > max_count or (count == max_count and word < max_word):\n            max_word = word\n            max_count = count\n\n    return max_word"
    },
    {
        "number": 158,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"aaaaaaa\"\n    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    \n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_word = word\n            max_count = count\n        elif count == max_count:\n            if word < max_word:\n                max_word = word\n    \n    return max_word"
    },
    {
        "number": 158,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_max(words):\n    max_word = \"\"\n    max_unique = 0\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique or (len(unique_chars) == max_unique and word < max_word):\n            max_word = word\n            max_unique = len(unique_chars)\n    return max_word"
    },
    {
        "number": 158,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_max(words):\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n        word_len = len(set(word))\n        if word_len > max_len or (word_len == max_len and word < max_word):\n            max_word = word\n            max_len = word_len\n    return max_word"
    },
    {
        "number": 158,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\"\"\"\n\n    max_word = \"\"\n    max_unique = 0\n\n    for word in words:\n        unique = len(set(word))\n        if unique > max_unique or (unique == max_unique and word < max_word):\n            max_word = word\n            max_unique = unique\n\n    return max_word"
    },
    {
        "number": 158,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_max(words):\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n        count = len(set(word))\n        if count > max_count or (count == max_count and word < max_word):\n            max_word = word\n            max_count = count\n    return max_word"
    },
    {
        "number": 159,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # Check if there are enough remaining carrots to complete the day's meals\n    if remaining < need:\n        total_eaten = remaining\n        remaining = 0\n    # If there are enough remaining carrots, eat the remaining carrots\n    else:\n        total_eaten = number + remaining\n        remaining = 0\n    return [total_eaten, remaining]"
    },
    {
        "number": 159,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if remaining < need:\n        return [number + remaining, 0]\n    else:\n        return [number + need, remaining - need]"
    },
    {
        "number": 159,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # calculate the number of carrots that you need to eat\n    if need > remaining:\n        need = remaining\n    \n    # calculate the total number of eaten carrots\n    eaten = number + need\n    \n    # calculate the number of carrots left after your meals\n    left = remaining - need\n    \n    return [eaten, left]\n"
    },
    {
        "number": 159,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if number < need:\n        total_eaten = number + remaining\n        carrots_left = 0\n    else:\n        total_eaten = need + remaining\n        carrots_left = remaining - (need - number)\n\n    return [total_eaten, carrots_left]\n"
    },
    {
        "number": 159,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # Calculate the number of carrots that can be eaten\n    eatable = min(remaining, need - number)\n    \n    # Calculate the total number of eaten carrots\n    total = number + eatable\n    \n    # Calculate the number of carrots left after your meals\n    remaining = remaining - eatable\n    \n    # Return the array of [ total number of eaten carrots after your meals,\n    #                     the number of carrots left after your meals ]\n    return [total, remaining]"
    },
    {
        "number": 159,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n    \n    Have fun :)\n    \"\"\"\n    if remaining < need:\n        return [number + remaining, 0]\n    return [number + need, remaining - need]"
    },
    {
        "number": 159,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if need > remaining:\n        return [remaining + number, 0]\n    else:\n        return [need + number, remaining - need]"
    },
    {
        "number": 159,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\n    # Check if there are enough carrots remaining\n    if remaining < need:\n        # If there are not enough carrots remaining, eat all remaining carrots\n        return [number + remaining, 0]\n    else:\n        # If there are enough carrots remaining, eat only the remaining carrots needed to complete meals\n        return [number + need, remaining - need]"
    },
    {
        "number": 159,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if remaining < need:\n        return [number + remaining, 0]\n    return [number + need, remaining - need]"
    },
    {
        "number": 159,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    eaten = number + need\n    if eaten > remaining:\n        eaten = remaining\n        need = 0\n    else:\n        need = eaten - number\n    return [eaten, need]\n"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n    \n    # Initialize the result to zero\n    result = 0\n    \n    # Loop through the operator list and operand list\n    for i in range(len(operator)):\n        # Check if the current operator is addition (+)\n        if operator[i] == '+':\n            result += operand[i]\n        # Check if the current operator is subtraction (-)\n        elif operator[i] == '-':\n            result -= operand[i]\n        # Check if the current operator is multiplication (*)\n        elif operator[i] == '*':\n            result *= operand[i]\n        # Check if the current operator is floor division ( // )\n        elif operator[i] == '//':\n            result //= operand[i]\n        # Check if the current operator is exponentiation (**)\n        elif operator[i] == '**':\n            result **= operand[i]\n        # If none of the above operators are matched, raise an error\n        else:\n            raise ValueError('Invalid operator: {}'.format(operator[i]))\n    \n    # Return the final result\n    return result"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator = ['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = ''\n    for i in range(len(operator)):\n        expression += str(operand[i])\n        expression += operator[i]\n    expression += str(operand[-1])\n    return eval(expression)"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # Check if the length of operator list is equal to the length of operand list minus one\n    if len(operator)!= len(operand) - 1:\n        raise ValueError(\"The length of operator list should be equal to the length of operand list minus one.\")\n\n    # Check if operand list contains only non-negative integers\n    if any(i < 0 for i in operand):\n        raise ValueError(\"Operand list should contain only non-negative integers.\")\n\n    # Check if operator list has at least one operator\n    if not operator:\n        raise ValueError(\"Operator list should have at least one operator.\")\n\n    # Initialize the result variable\n    result = operand[0]\n\n    # Iterate over the operator list and operand list\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n\n    # Return the result\n    return result"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    \"\"\"\n    # Check that operator and operand have the correct lengths\n    if len(operator)!= len(operand) - 1:\n        raise ValueError(\"Operator and operand lists have incorrect lengths\")\n\n    # Build the algebric expression as a string\n    expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += op + str(num)\n\n    # Evaluate the expression using Python's eval function\n    return eval(expression)"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = ''\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            expression += '+'\n        elif operator[i] == '-':\n            expression += '-'\n        elif operator[i] == '*':\n            expression += '*'\n        elif operator[i] == '//':\n            expression += '//'\n        elif operator[i] == '**':\n            expression += '**'\n        else:\n            print('Invalid operator')\n            return None\n            \n    expression = expression.join(str(x) for x in operand)\n    try:\n        result = eval(expression)\n    except ZeroDivisionError:\n        print('Cannot divide by zero')\n        return None\n    return result"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n    # Initialize the result variable to None\n    result = None\n    \n    # Initialize the expression string\n    expression = \"\"\n    \n    # Initialize the length of the operator list\n    length = len(operator)\n    \n    # Iterate through the operator and operand lists using a for loop\n    for i in range(length):\n        # Check if the current operator is addition\n        if operator[i] == '+':\n            # Add the current operand and the previous expression to the expression string\n            expression += str(operand[i]) + operator[i] + str(result)\n            # Set the result to the current operand\n            result = operand[i]\n        # Check if the current operator is subtraction\n        elif operator[i] == '-':\n            # Add the current operand and the previous expression to the expression string\n            expression += str(operand[i]) + operator[i] + str(result)\n            # Set the result to the current operand\n            result = operand[i]\n        # Check if the current operator is multiplication\n        elif operator[i] == '*':\n            # Add the current operand and the previous expression to the expression string\n            expression += str(operand[i]) + operator[i] + str(result)\n            # Set the result to the current operand\n            result = operand[i]\n        # Check if the current operator is floor division\n        elif operator[i] == '//':\n            # Add the current operand and the previous expression to the expression string\n            expression += str(operand[i]) + operator[i] + str(result)\n            # Set the result to the current operand\n            result = operand[i]\n        # Check if the current operator is exponentiation\n        elif operator[i] == '**':\n            # Add the current operand and the previous expression to the expression string\n            expression += str(operand[i]) + operator[i] + str(result)\n            # Set the result to the current operand\n            result = operand[i]\n    \n    # Add the last operand and the expression to the expression string\n    expression += str(operand[-1])\n    \n    # Evaluate the expression string using eval() function and return the result\n    return eval(expression)"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n\n    # Initialize the result to the first operand\n    result = operand[0]\n\n    # Iterate through the operator list and the operand list\n    for i in range(len(operator)):\n        op = operator[i]\n        num = operand[i+1]\n\n        # Addition\n        if op == '+':\n            result += num\n\n        # Subtraction\n        elif op == '-':\n            result -= num\n\n        # Multiplication\n        elif op == '*':\n            result *= num\n\n        # Floor division\n        elif op == '//':\n            result //= num\n\n        # Exponentiation\n        elif op == '**':\n            result **= num\n\n        else:\n            # If an invalid operator is encountered, return None\n            return None\n\n    # Return the final result\n    return result"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator = ['+', '*', '-']\n    operand = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n    The length of operator list is equal to the length of operand list minus one.\n    Operand is a list of of non-negative integers.\n    Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n    \n    # Initialize the result variable to the first element of operand list\n    result = operand[0]\n    \n    # Loop through the operator and operand lists simultaneously\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    \n    # Return the result of the expression\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.upper() if char.islower() else char.lower()\n        else:\n            result += char\n    return result[::-1] if not any(char.isalpha() for char in s) else result"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solve(s):\n    # reverse the string\n    s = s[::-1]\n    \n    # iterate over the characters of the string\n    result = []\n    for c in s:\n        if c.isalpha():\n            # reverse the case of the letter\n            result.append(c.lower() if c.isupper() else c.upper())\n        else:\n            # keep the character as it is\n            result.append(c)\n    \n    # join the characters back into a string and return it\n    return ''.join(result)"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solve(s):\n    \"\"\"\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    \"\"\"\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.upper() if char.islower() else char.lower()\n        else:\n            result += char\n    return result[::-1] if result.isalpha() else result"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solve(s):\n    \"\"\"\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    \"\"\"\n\n    # Check if s contains any letter or not\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n\n    # If s contains any letter, iterate over each character and reverse the case of the letters\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solve(s):\n    \"\"\"\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return result"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\"\"\"\n\n    result = \"\"\n\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n\n    if not any(char.isalpha() for char in s):\n        return result[::-1]\n\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solve(s):\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not any(c.isalpha() for c in s):\n        result = result[::-1]\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    letters = set('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')\n    result = []\n    for c in s:\n        if c in letters:\n            result.append(c.upper() if c.islower() else c.lower())\n        else:\n            result.append(c)\n    return ''.join(result)"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solve(s):\n    \"\"\"\n    This function takes a string as input and returns the modified string as output.\n    If the string contains no letters, the string is reversed.\n    If a letter is present, its case is reversed from lower to upper or vice versa.\n    \"\"\"\n    # If the string is empty, return an empty string\n    if not s:\n        return \"\"\n    \n    # If the first character is a letter, reverse its case and return the modified string\n    if s[0].isalpha():\n        if s[0].islower():\n            return s[0].upper() + s[1:].lower()\n        else:\n            return s[0].lower() + s[1:].upper()\n    \n    # If the first character is not a letter, reverse the string and return it\n    else:\n        return s[::-1]"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    True\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if not text:\n        return None\n    md5 = hashlib.md5()\n    md5.update(text.encode('utf-8'))\n    return md5.hexdigest()"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    True\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    True\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    \n    return hashlib.md5(text.encode()).hexdigest()"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    md5 = hashlib.md5(text.encode())\n    return md5.hexdigest()"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    even_digits = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            even_digits.append(num)\n    return even_digits"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    even_integers = []\n    for num in range(a, b + 1):\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                even_integers.append(int(digit))\n                break\n    return even_integers"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    even_digits = []\n\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            even_digits.append(num)\n\n    return even_digits"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    \n    # Convert a and b to strings\n    a_str = str(a)\n    b_str = str(b)\n    \n    # Initialize an empty list to store the even digits\n    even_digits = []\n    \n    # Iterate through each digit in a and b\n    for i in range(len(a_str)):\n        # Check if the current digit is even\n        if int(a_str[i]) % 2 == 0:\n            even_digits.append(int(a_str[i]))\n        if int(b_str[i]) % 2 == 0:\n            even_digits.append(int(b_str[i]))\n            \n    # Sort the even digits in ascending order\n    even_digits.sort()\n    \n    return even_digits"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    even_digits = []\n    for num in range(a, b+1):\n        if all(int(digit) % 2 == 0 for digit in str(num)):\n            even_digits.append(num)\n    return even_digits"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # Convert the integers to strings and iterate over the digits\n    digits = [int(d) for d in str(a)] + [int(d) for d in str(b)]\n    result = []\n    for d in digits:\n        if d % 2 == 0:\n            result.append(d)\n    # Remove duplicates and sort in ascending order\n    return sorted(set(result))"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    result = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            for digit in str(num):\n                if int(digit) % 2 == 0:\n                    result.append(int(digit))\n                    break\n    return result"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    even_digits = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            even_digits.append(i)\n    return even_digits"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # Initialize an empty list to store the even digits\n    even_digits = []\n    # Loop through the range from a to b, inclusive\n    for i in range(a, b+1):\n        # Convert the current number to a string and check if it has an even digit\n        if any(int(d) % 2 == 0 for d in str(i)):\n            # If it has an even digit, append it to the list of even digits\n            even_digits.append(i)\n    # Return the list of even digits\n    return even_digits"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # Convert a and b to strings so we can iterate over their digits\n    a_str = str(a)\n    b_str = str(b)\n    \n    # Initialize an empty list to store the even digits\n    even_digits = []\n    \n    # Iterate over the digits of a and b, adding the even ones to the list\n    for digit in a_str + b_str:\n        if int(digit) % 2 == 0:\n            even_digits.append(int(digit))\n    \n    # Return the list of even digits in ascending order\n    return sorted(even_digits)"
    }
]