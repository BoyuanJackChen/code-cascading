[
    {
        "number": 0,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False\nassert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True"
    },
    {
        "number": 1,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']"
    },
    {
        "number": 2,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert truncate_number(3.5) == 0.5"
    },
    {
        "number": 3,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert below_zero([1, 2, 3]) == False\nassert below_zero([1, 2, -4, 5]) == True"
    },
    {
        "number": 4,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0\nassert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.0\nassert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]) == 1.0\nassert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0]) == 1.0\nassert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0]) == 1.0"
    },
    {
        "number": 5,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert intersperse([], 4) == []\nassert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]"
    },
    {
        "number": 6,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]"
    },
    {
        "number": 7,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert filter_by_substring([], 'a') == []\nassert filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') == ['abc', 'bacd', 'array']"
    },
    {
        "number": 8,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert sum_product([]) == (0, 1)\nassert sum_product([1, 2, 3, 4]) == (10, 24)"
    },
    {
        "number": 9,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]"
    },
    {
        "number": 10,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert make_palindrome('') == ''\nassert make_palindrome('cat') == 'catac'\nassert make_palindrome('cata') == 'catac'\nassert make_palindrome('racecar') == 'racecar'\nassert make_palindrome('hello') == 'olleh'\nassert make_palindrome('A man, a plan, a canal: Panama') == 'amanaplanacanalpanama'"
    },
    {
        "number": 11,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert string_xor('010', '110') == '100'"
    },
    {
        "number": 12,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert longest([]) == None\nassert longest(['a', 'b', 'c']) == 'a'\nassert longest(['a', 'bb', 'ccc']) == 'ccc'"
    },
    {
        "number": 13,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert greatest_common_divisor(3, 5) == 1\nassert greatest_common_divisor(25, 15) == 5"
    },
    {
        "number": 14,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert all_prefixes('abc') == ['a', 'ab', 'abc']"
    },
    {
        "number": 15,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert string_sequence(0) == '0'\nassert string_sequence(5) == '0 1 2 3 4 5'"
    },
    {
        "number": 16,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert count_distinct_characters('xyzXYZ') == 3\nassert count_distinct_characters('Jerry') == 4"
    },
    {
        "number": 17,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert parse_music('o o|.| o| o|.|.|.|.| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"
    },
    {
        "number": 18,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert how_many_times('', 'a') == 0\nassert how_many_times('aaa', 'a') == 3\nassert how_many_times('aaaa', 'aa') == 3"
    },
    {
        "number": 19,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert sort_numbers('three one five') == 'one three five'\nassert sort_numbers('zero one two three four five six seven eight nine') == 'zero one two three four five six seven eight nine'\nassert sort_numbers('ten') == 'ten'\nassert sort_numbers('eleven') == 'eleven'\nassert sort_numbers('twelve') == 'twelve'\nassert sort_numbers('thirteen') == 'thirteen'\nassert sort_numbers('fourteen') == 'fourteen'\nassert sort_numbers('fifteen') == 'fifteen'\nassert sort_numbers('sixteen') =='sixteen'\nassert sort_numbers('seventeen') =='seventeen'\nassert sort_numbers('eighteen') == 'eighteen'\nassert sort_numbers('nineteen') == 'nineteen'\nassert sort_numbers('twenty') == 'twenty'\nassert sort_numbers('twenty one') == 'twenty one'\nassert sort_numbers('twenty two') == 'twenty two'\nassert sort_numbers('twenty three') == 'twenty three'\nassert sort_numbers('twenty four') == 'twenty four'\nassert sort_numbers('twenty five') == 'twenty five'\nassert sort_numbers('twenty six') == 'twenty six'\nassert sort_numbers('twenty seven') == 'twenty seven'\nassert sort_numbers('twenty eight') == 'twenty eight'\nassert sort_numbers('twenty nine') == 'twenty nine'\nassert sort_numbers('thirty') == 'thirty'\nassert sort_numbers('thirty one') == 'thirty one'\nassert sort_numbers('thirty two') == 'thirty two'\nassert sort_numbers('thirty three') == 'thirty three'\nassert sort_numbers('thirty four') == 'thirty four'\nassert sort_numbers('thirty five') == 'thirty five'\nassert sort_numbers('thirty six') == 'thirty six'\nassert sort_numbers('thirty seven') == 'thirty seven'\nassert sort_numbers('thirty eight') == 'thirty eight'\nassert sort_numbers('thirty nine') == 'thirty nine'\nassert sort_numbers('forty') == 'forty'\nassert sort_numbers('forty one') == 'forty one'\nassert sort_numbers('forty two') == 'forty two'\nassert sort_numbers('forty three') == 'forty three'\nassert sort_numbers('forty four') == 'forty four'\nassert sort_numbers('forty five') == 'forty five'\nassert sort_numbers('forty six') == 'forty six'\nassert sort_numbers('forty seven') == 'forty seven'\nassert sort_numbers('forty eight') == 'forty eight'\nassert sort_numbers('forty nine') == 'forty nine'\nassert sort_numbers('fifty') == 'fifty'\nassert sort_numbers('fifty one') == 'fifty one'\nassert sort_numbers('fifty two') == 'fifty two'\nassert sort_numbers('fifty three') == 'fifty three'\nassert sort_numbers('fifty four') == 'fifty four'\nassert sort_numbers('fifty five') == 'fifty five'\nassert sort_numbers('fifty six') == 'fifty six'\nassert sort_numbers('fifty seven') == 'fifty seven'\nassert sort_numbers('fifty eight') == 'fifty eight'\nassert sort_numbers('fifty nine') == 'fifty nine'\nassert sort_numbers('sixty') =='sixty'\nassert sort_numbers('sixty one') =='sixty one'\nassert sort_numbers('sixty two') =='sixty two'\nassert sort_numbers('sixty three') =='sixty three'\nassert sort_numbers('sixty four') =='sixty four'\nassert sort_numbers('sixty five') =='sixty five'\nassert sort_numbers('sixty six') =='sixty six'\nassert sort_numbers('sixty seven') =='sixty seven'\nassert sort_numbers('sixty eight') =='sixty eight'\nassert sort_numbers('sixty nine') =='sixty nine'\nassert sort_numbers('seventy') =='seventy'\nassert sort_numbers('seventy one') =='seventy one'\n"
    },
    {
        "number": 20,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\nassert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)"
    },
    {
        "number": 21,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]"
    },
    {
        "number": 22,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert filter_integers(['a', 3.14, 5]) == [5]\nassert filter_integers([1, 2, 3, 'abc', {}, []]) == [1, 2, 3]"
    },
    {
        "number": 23,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert strlen('') == 0\nassert strlen('abc') == 3"
    },
    {
        "number": 24,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert largest_divisor(15) == 5, \"The largest divisor of 15 is 5.\""
    },
    {
        "number": 25,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert factorize(8) == [2, 2, 2], \"Factorize(8) should return [2, 2, 2]\"\nassert factorize(25) == [5, 5], \"Factorize(25) should return [5, 5]\"\nassert factorize(70) == [2, 5, 7], \"Factorize(70) should return [2, 5, 7]\""
    },
    {
        "number": 26,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]"
    },
    {
        "number": 27,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert flip_case('Hello') == 'hELLO'"
    },
    {
        "number": 28,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert concatenate([]) == ''\nassert concatenate(['a', 'b', 'c']) == 'abc'"
    },
    {
        "number": 29,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert filter_by_prefix([], 'a') == []\nassert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') == ['abc', 'array']"
    },
    {
        "number": 30,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]\nassert get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 9, 123, 1]"
    },
    {
        "number": 31,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert is_prime(6) == False\nassert is_prime(101) == True\nassert is_prime(11) == True\nassert is_prime(13441) == True\nassert is_prime(61) == True\nassert is_prime(4) == False\nassert is_prime(1) == False"
    },
    {
        "number": 32,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert find_zero([1, 2]) == -0.5\nassert find_zero([-6, 11, -6, 1]) == 1.0\nassert find_zero([1, 2, 3]) == 0.0\nassert find_zero([1, 2, 3, 4]) == 0.0\nassert find_zero([1, 2, 3, 4, 5]) == 0.0\nassert find_zero([1, 2, 3, 4, 5, 6]) == 0.0\nassert find_zero([1, 2, 3, 4, 5, 6, 7]) == 0.0\nassert find_zero([1, 2, 3, 4, 5, 6, 7, 8]) == 0.0\nassert find_zero([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0.0\nassert find_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0.0\nassert find_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 0.0\nassert find_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 0.0\nassert find_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 0.0\nassert find_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 0.0\nassert find_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 0.0\nassert find_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 0.0\nassert find_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == 0.0\nassert find_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == 0.0\nassert find_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 0.0\nassert find_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 0.0\nassert find_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == 0.0\nassert find_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1"
    },
    {
        "number": 33,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert sort_third([1, 2, 3]) == [1, 2, 3]\nassert sort_third([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5]"
    },
    {
        "number": 34,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]"
    },
    {
        "number": 35,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert max_element([1, 2, 3]) == 3\nassert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123"
    },
    {
        "number": 36,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert fizz_buzz(50) == 0, \"fizz_buzz(50) should return 0\"\nassert fizz_buzz(78) == 2, \"fizz_buzz(78) should return 2\"\nassert fizz_buzz(79) == 3, \"fizz_buzz(79) should return 3\""
    },
    {
        "number": 37,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert sort_even([1, 2, 3]) == [1, 2, 3]\nassert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]"
    },
    {
        "number": 38,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert decode_cyclic(encode_cyclic(\"hello\")) == \"olleh\"\nassert decode_cyclic(encode_cyclic(\"world\")) == \"dlrow\"\nassert decode_cyclic(encode_cyclic(\"abc\")) == \"cba\"\nassert decode_cyclic(encode_cyclic(\"def\")) == \"fedcba\"\nassert decode_cyclic(encode_cyclic(\"ghi\")) == \"ghij\""
    },
    {
        "number": 39,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert prime_fib(1) == 2\nassert prime_fib(2) == 3\nassert prime_fib(3) == 5\nassert prime_fib(4) == 13\nassert prime_fib(5) == 89"
    },
    {
        "number": 40,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert triples_sum_to_zero([1, 3, 5, 0]) == False\nassert triples_sum_to_zero([1, 3, -2, 1]) == True\nassert triples_sum_to_zero([1, 2, 3, 7]) == False\nassert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == True\nassert triples_sum_to_zero([1]) == False"
    },
    {
        "number": 41,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert car_race_collision(10) == 0, \"The function should return 0 for a perfect straight road.\"\nassert car_race_collision(15) == 0, \"The function should return 0 for a perfect straight road.\"\nassert car_race_collision(20) == 0, \"The function should return 0 for a perfect straight road.\"\nassert car_race_collision(25) == 0, \"The function should return 0 for a perfect straight road.\"\nassert car_race_collision(30) == 0, \"The function should return 0 for a perfect straight road.\""
    },
    {
        "number": 42,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert incr_list([1, 2, 3]) == [2, 3, 4]\nassert incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [6, 4, 6, 3, 4, 4, 10, 1, 124]"
    },
    {
        "number": 43,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False\nassert pairs_sum_to_zero([1, 3, -2, 1]) == False\nassert pairs_sum_to_zero([1, 2, 3, 7]) == False\nassert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True\nassert pairs_sum_to_zero([1]) == False"
    },
    {
        "number": 44,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert change_base(8, 3) == '22'\nassert change_base(8, 2) == '1000'\nassert change_base(7, 2) == '111'"
    },
    {
        "number": 45,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert triangle_area(5, 3) == 7.5, \"The area of a triangle with sides 5 and 3 is not 7.5.\""
    },
    {
        "number": 46,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert fib4(5) == 4\nassert fib4(6) == 8\nassert fib4(7) == 14"
    },
    {
        "number": 47,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert median([3, 1, 2, 4, 5]) == 3\nassert median([-10, 4, 6, 1000, 10, 20]) == 15.0"
    },
    {
        "number": 48,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert is_palindrome('') == True\nassert is_palindrome('aba') == True\nassert is_palindrome('aaaaa') == True\nassert is_palindrome('zbcd') == False"
    },
    {
        "number": 49,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert modp(3, 5) == 3\nassert modp(1101, 101) == 2\nassert modp(0, 101) == 1\nassert modp(3, 11) == 8\nassert modp(100, 101) == 1"
    },
    {
        "number": 50,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert decode_shift(encode_shift(\"hello\")) == \"olleh\"\nassert decode_shift(encode_shift(\"world\")) == \"dlrow\"\nassert decode_shift(encode_shift(\"python\")) == \"nohty\"\nassert decode_shift(encode_shift(\"apple\")) == \"elppa\"\nassert decode_shift(encode_shift(\"banana\")) == \"nbana\""
    },
    {
        "number": 51,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert remove_vowels('') == ''\nassert remove_vowels(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\nassert remove_vowels('abcdef') == 'bcdf'\nassert remove_vowels('aaaaa') == ''\nassert remove_vowels('aaBAA') == 'B'\nassert remove_vowels('zbcd') == 'zbcd'"
    },
    {
        "number": 52,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert below_threshold([1, 2, 4, 10], 100) == True\nassert below_threshold([1, 20, 4, 10], 5) == False"
    },
    {
        "number": 53,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert add(2, 3) == 5\nassert add(5, 7) == 12"
    },
    {
        "number": 54,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\nassert same_chars('abcd', 'dddddddabc') == True\nassert same_chars('dddddddabc', 'abcd') == True\nassert same_chars('eabcd', 'dddddddabc') == False\nassert same_chars('abcd', 'dddddddabce') == False\nassert same_chars('eabcdzzzz', 'dddzzzzzzzddddabc') == False"
    },
    {
        "number": 55,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert fib(10) == 55\nassert fib(1) == 1\nassert fib(8) == 21\nassert fib(0) == 0\nassert fib(100) == 5542\nassert fib
    },
    {
        "number": 56,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert correct_bracketing(\"<\") == False\nassert correct_bracketing(\"<>\") == True\nassert correct_bracketing(\"<<><>>\") == True\nassert correct_bracketing(\"><<>\") == False"
    },
    {
        "number": 57,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert monotonic([1, 2, 4, 20]) == True\nassert monotonic([1, 20, 4, 10]) == False\nassert monotonic([4, 1, 0, -10]) == True"
    },
    {
        "number": 58,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\nassert common([5, 3, 2, 8], [3, 2]) == [2, 3]"
    },
    {
        "number": 59,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert largest_prime_factor(13195) == 29\nassert largest_prime_factor(2048) == 2\n"
    },
    {
        "number": 60,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert sum_to_n(30) == 465\nassert sum_to_n(100) == 5050\nassert sum_to_n(5) == 15\nassert sum_to_n(10) == 55\nassert sum_to_n(1) == 1"
    },
    {
        "number": 61,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert correct_bracketing(\"(\") == False\nassert correct_bracketing(\"()\") == True\nassert correct_bracketing(\"(()())\") == True\nassert correct_bracketing(\")(()\") == False"
    },
    {
        "number": 62,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\nassert derivative([1, 2, 3]) == [2, 6]"
    },
    {
        "number": 63,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert fibfib(1) == 0\nassert fibfib(5) == 4\nassert fibfib(8) == 24"
    },
    {
        "number": 64,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert vowels_count(\"abcde\") == 2\nassert vowels_count(\"ACEDY\") == 3\nassert vowels_count(\"hello\") == 0\nassert vowels_count(\"world\") == 0\nassert vowels_count(\"python\") == 3\nassert vowels_count(\"programming\") == 10\nassert vowels_count(\"hello world\") == 0\nassert vowels_count(\"programming is fun\") == 10\nassert vowels_count(\"hello world\") == 0"
    },
    {
        "number": 65,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert circular_shift(12, 1) == \"21\"\nassert circular_shift(12, 2) == \"12\""
    },
    {
        "number": 66,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert digitSum(\"\") == 0\nassert digitSum(\"abAB\") == 131\nassert digitSum(\"abcCd\") == 67\nassert digitSum(\"helloE\") == 69\nassert digitSum(\"woArBld\") == 131\nassert digitSum(\"aAaaaXa\") == 153"
    },
    {
        "number": 67,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8\nassert fruit_distribution(\"0 apples and 1 oranges\", 3) == 2\nassert fruit_distribution(\"2 apples and 3 oranges\", 100) == 95\nassert fruit_distribution(\"100 apples and 1 oranges\", 120) == 19"
    },
    {
        "number": 68,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert pluck([4, 2, 3]) == [2, 1]\nassert pluck([1, 2, 3]) == [2, 1]\nassert pluck([]) == []\nassert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]"
    },
    {
        "number": 69,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert search([4, 1, 2, 2, 3, 1]) == 2\nassert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\nassert search([5, 5, 4, 4, 4]) == -1"
    },
    {
        "number": 70,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\nassert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\nassert strange_sort_list([]) == []"
    },
    {
        "number": 71,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert triangle_area(3, 4, 5) == 6.00, \"The area of the triangle is incorrect.\"\nassert triangle_area(1, 2, 10) == -1, \"The area of the triangle is incorrect.\"\nassert triangle_area(3, 4, 6) == -1, \"The area of the triangle is incorrect.\"\nassert triangle_area(3, 6, 4) == -1, \"The area of the triangle is incorrect.\"\nassert triangle_area(1, 1, 1) == 0, \"The area of the triangle is incorrect.\""
    },
    {
        "number": 72,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert will_it_fly([1, 2], 5) == False\nassert will_it_fly([3, 2, 3], 1) == False\nassert will_it_fly([3, 2, 3], 9) == True\nassert will_it_fly([3], 5) == True"
    },
    {
        "number": 73,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert smallest_change([1, 2, 3, 5, 4, 7, 9, 6]) == 4\nassert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\nassert smallest_change([1, 2, 3, 2, 1]) == 0"
    },
    {
        "number": 74,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert total_match([], []) == []\nassert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\nassert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\nassert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\nassert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']"
    },
    {
        "number": 75,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert is_multiply_prime(30) == True\nassert is_multiply_prime(12) == False\nassert is_multiply_prime(100) == True\nassert is_multiply_prime(101) == False\nassert is_multiply_prime(1000) == True"
    },
    {
        "number": 76,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert is_simple_power(1, 4) == True\nassert is_simple_power(2, 2) == True\nassert is_simple_power(8, 2) == True\nassert is_simple_power(3, 2) == False\nassert is_simple_power(3, 1) == False\nassert is_simple_power(5, 3) == False"
    },
    {
        "number": 77,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert iscube(1) == True\nassert iscube(2) == False\nassert iscube(-1) == True\nassert iscube(64) == True\nassert iscube(0) == True\nassert iscube(180) == False"
    },
    {
        "number": 78,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert hex_key(\"AB\") == 1\nassert hex_key(\"1077E\") == 2\nassert hex_key(\"ABED1A33\") == 4\nassert hex_key(\"123456789ABCDEF0\") == 6\nassert hex_key(\"2020\") == 2"
    },
    {
        "number": 79,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert decimal_to_binary(15) == \"db1111db\", \"The function should return 'db1111db' for decimal 15.\"\nassert decimal_to_binary(32) == \"db100000db\", \"The function should return 'db100000db' for decimal 32.\""
    },
    {
        "number": 80,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert is_happy(\"a\") == False\nassert is_happy(\"aa\") == False\nassert is_happy(\"abcd\") == True\nassert is_happy(\"aabb\") == False\nassert is_happy(\"adb\") == True\nassert is_happy(\"xyy\") == False"
    },
    {
        "number": 81,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']"
    },
    {
        "number": 82,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert prime_length('Hello') == True\nassert prime_length('abcdcba') == True\nassert prime_length('kittens') == True\nassert prime_length('orange') == False"
    },
    {
        "number": 83,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert starts_one_ends(1) == 1\nassert starts_one_ends(2) == 1\nassert starts_one_ends(3) == 1\nassert starts_one_ends(4) == 1\nassert starts_one_ends(5) == 1\nassert starts_one_ends(6) == 1\nassert starts_one_ends(7) == 1\nassert starts_one_ends(8) == 1\nassert starts_one_ends(9) == 1\nassert starts_one_ends(10) == 1\nassert starts_one_ends(11) == 1\nassert starts_one_ends(12) == 1\nassert starts_one_ends(13) == 1\nassert starts_one_ends(14) == 1\nassert starts_one_ends(15) == 1\nassert starts_one_ends(16) == 1\nassert starts_one_ends(17) == 1\nassert starts_one_ends(18) == 1\nassert starts_one_ends(19) == 1\nassert starts_one_ends(20) == 1\nassert starts_one_ends(21) == 1\nassert starts_one_ends(22) == 1\nassert starts_one_ends(23) == 1\nassert starts_one_ends(24) == 1\nassert starts_one_ends(25) == 1\nassert starts_one_ends(26) == 1\nassert starts_one_ends(27) == 1\nassert starts_one_ends(28) == 1\nassert starts_one_ends(29) == 1\nassert starts_one_ends(30) == 1\nassert starts_one_ends(31) == 1\nassert starts_one_ends(32) == 1\nassert starts_one_ends(33) == 1\nassert starts_one_ends(34) == 1\nassert starts_one_ends(35) == 1\nassert starts_one_ends(36) == 1\nassert starts_one_ends(37) == 1\nassert starts_one_ends(38) == 1\nassert starts_one_ends(39) == 1\nassert starts_one_ends(40) == 1\nassert starts_one_ends(41) == 1\nassert starts_one_ends(42) == 1\nassert starts_one_ends(43) == 1\nassert starts_one_ends(44) == 1\nassert starts_one_ends(45) == 1\nassert starts_one_ends(46) == 1\nassert starts_one_ends(47) == 1\nassert starts_one_ends(48) == 1\nassert starts_one_ends(49) == 1\nassert starts_one_ends(50) == 1\nassert starts_one_ends(51) == 1\nassert starts_one_ends(52) == 1\nassert starts_one_ends(53) == 1\nassert starts_one_ends(54) == 1\nassert starts_one_ends(55) == 1\nassert starts_one_ends(56) == 1\nassert starts_one_ends(57) == 1\nassert starts_one_ends(58) == 1\nassert starts_one_ends(59) == 1\nassert starts_one_ends(60) == 1\nassert starts_one_ends(61) == 1\nassert starts_one_ends(62) == 1\nassert starts_one_ends(63) == 1\nassert starts_one_ends(64) == 1\nassert starts_one_ends(65) == 1\nassert starts_one_ends(66) == 1\nassert starts_one_ends(67) == 1\nassert starts_one_ends(68) == 1\nassert starts_one_ends(69) == 1\nassert starts_one_ends(70) == 1\nassert starts_one_ends(71) == 1\nassert starts_one_ends(72) == 1\nassert starts_one_ends(73) == 1\nassert starts_one_ends(74) == 1\nassert starts_"
    },
    {
        "number": 84,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert solve(1000) == \"1\"\nassert solve(150) == \"110\"\nassert solve(147) == \"1100\""
    },
    {
        "number": 85,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert add([4, 2, 6, 7]) == 2, \"The function should return 2 for the given input.\""
    },
    {
        "number": 86,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert anti_shuffle('Hi') == 'Hi'\nassert anti_shuffle('hello') == 'ehllo'\nassert anti_shuffle('Hello World!!!') == 'Hello!!!Wdlor'"
    },
    {
        "number": 87,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nassert get_row([], 1) == []\n\nassert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]"
    },
    {
        "number": 88,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert sort_array([]) == []\nassert sort_array([5]) == [5]\nassert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nassert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
        "number": 89,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert encrypt('hi') == 'lm'\nassert encrypt('asdfghjkl') == 'ewhjklnop'\nassert encrypt('gf') == 'kj'\nassert encrypt('et') == 'ix'"
    },
    {
        "number": 90,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert next_smallest([1, 2, 3, 4, 5]) == 2\nassert next_smallest([5, 1, 4, 3, 2]) == 2\nassert next_smallest([]) == None\nassert next_smallest([1, 1]) == None"
    },
    {
        "number": 91,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert is_bored(\"Hello world\") == 0\nassert is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1"
    },
    {
        "number": 92,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert any_int(5, 2, 7) == True\nassert any_int(3, 2, 2) == False\nassert any_int(3, -2, 1) == True\nassert any_int(3.6, -2.2, 2) == False"
    },
    {
        "number": 93,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert encode('test') == 'TGST', \"The function should return 'TGST' for the given message 'test'.\"\nassert encode('This is a message') == 'THKS KS C MGSSCGG', \"The function should return 'THKS KS C MGSSCGG' for the given message 'This is a message'.\""
    },
    {
        "number": 94,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10\nassert skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25\nassert skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13\nassert skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11\nassert skjkasdkd([0, 81, 12, 3, 1, 21]) == 3\nassert skjkasdkd([0, 8, 1, 2, 1, 7]) == 7"
    },
    {
        "number": 95,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True\nassert check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) == False\nassert check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) == False\nassert check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False\nassert check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True"
    },
    {
        "number": 96,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert count_up_to(5) == [2, 3]\nassert count_up_to(11) == [2, 3, 5, 7]\nassert count_up_to(0) == []\nassert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]\nassert count_up_to(1) == []\nassert count_up_to(18) == [2, 3, 5, 7, 11, 13, 17]"
    },
    {
        "number": 97,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert multiply(148, 412) == 16, \"multiply(148, 412) should return 16\"\nassert multiply(19, 28) == 72, \"multiply(19, 28) should return 72\"\nassert multiply(2020, 1851) == 0, \"multiply(2020, 1851) should return 0\"\nassert multiply(14, -15) == 20, \"multiply(14, -15) should return 20\""
    },
    {
        "number": 98,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0"
    },
    {
        "number": 99,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert closest_integer(\"10\") == 10\nassert closest_integer(\"15.3\") == 15\nassert closest_integer(\"14.5\") == 15\nassert closest_integer(\"-14.5\") == -15\nassert closest_integer(\"15\") == 15\nassert closest_integer(\"10.5\") == 10\nassert closest_integer(\"10.0\") == 10\nassert closest_integer(\"10.1\") == 10\nassert closest_integer(\"10.2\") == 10\nassert closest_integer(\"10.3\") == 10\nassert closest_integer(\"10.4\") == 10\nassert closest_integer(\"10.5\") == 10\nassert closest_integer(\"10.6\") == 10\nassert closest_integer(\"10.7\") == 10\nassert closest_integer(\"10.8\") == 10\nassert closest_integer(\"10.9\") == 10\nassert closest_integer(\"10.10\") == 10\nassert closest_integer(\"10.11\") == 10\nassert closest_integer(\"10.12\") == 10\nassert closest_integer(\"10.13\") == 10\nassert closest_integer(\"10.14\") == 10\nassert closest_integer(\"10.15\") == 10\nassert closest_integer(\"10.16\") == 10\nassert closest_integer(\"10.17\") == 10\nassert closest_integer(\"10.18\") == 10\nassert closest_integer(\"10.19\") == 10\nassert closest_integer(\"10.20\") == 10\nassert closest_integer(\"10.21\") == 10\nassert closest_integer(\"10.22\") == 10\nassert closest_integer(\"10.23\") == 10\nassert closest_integer(\"10.24\") == 10\nassert closest_integer(\"10.25\") == 10\nassert closest_integer(\"10.26\") == 10\nassert closest_integer(\"10.27\") == 10\nassert closest_integer(\"10.28\") == 10\nassert closest_integer(\"10.29\") == 10\nassert closest_integer(\"10.30\") == 10\nassert closest_integer(\"10.31\") == 10\nassert closest_integer(\"10.32\") == 10\nassert closest_integer(\"10.33\") == 10\nassert closest_integer(\"10.34\") == 10\nassert closest_integer(\"10.35\") == 10\nassert closest_integer(\"10.36\") == 10\nassert closest_integer(\"10.37\") == 10\nassert closest_integer(\"10.38\") == 10\nassert closest_integer(\"10.39\") == 10\nassert closest_integer(\"10.40\") == 10\nassert closest_integer(\"10.41\") == 10\nassert closest_integer(\"10.42\") == 10\nassert closest_integer(\"10.43\") == 10\nassert closest_integer(\"10.44\") == 10\nassert closest_integer(\"10.45\") == 10\nassert closest_integer(\"10.46\") == 10\nassert closest_integer(\"10.47\") == 10\nassert closest_integer(\"10.48\") == 10\nassert closest_integer(\"10.49\") == 10\nassert closest_integer(\"10.50\") == 10\nassert closest_integer(\"10.51\") == 10\nassert closest_integer(\"10.52\") == 10\nassert closest_integer(\"10.53\") == 10\nassert closest_integer(\"10.54\") == 10\nassert closest_integer(\"10.55\") == 10\nassert closest_integer(\"10.56\") == 10\nassert closest_integer(\"10.57\") == 10\nassert closest_integer(\"10.58\") == 10\nassert closest_integer(\"10."
    },
    {
        "number": 100,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert make_a_pile(3) == [3, 5, 7], \"The function should return the correct output for n=3.\"\nassert make_a_pile(4) == [4, 6, 8], \"The function should return the correct output for n=4.\"\nassert make_a_pile(5) == [5, 7, 9], \"The function should return the correct output for n=5.\"\nassert make_a_pile(6) == [6, 8, 10], \"The function should return the correct output for n=6.\"\nassert make_a_pile(7) == [7, 9, 11], \"The function should return the correct output for n=7.\""
    },
    {
        "number": 101,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nassert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"
    },
    {
        "number": 102,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert choose_num(12, 15) == 14, \"choose_num(12, 15) should return 14\"\nassert choose_num(13, 12) == -1, \"choose_num(13, 12) should return -1\""
    },
    {
        "number": 103,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert rounded_avg(1, 5) == \"0b11\"\nassert rounded_avg(7, 5) == -1\nassert rounded_avg(10, 20) == \"0b1111\"\nassert rounded_avg(20, 33) == \"0b11010\""
    },
    {
        "number": 104,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\nassert unique_digits([152, 323, 1422, 10]) == []\n\n# Test case 2\nassert unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert unique_digits([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert unique_digits([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert unique_digits([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\nassert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\nassert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nassert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\nassert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == [1, 2, 3, 4,"
    },
    {
        "number": 105,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nassert by_length([]) == []\nassert by_length([1, -1, 55]) == [\"One\"]"
    },
    {
        "number": 106,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert f(5) == [1, 2, 6, 24, 15], \"The function f(5) should return [1, 2, 6, 24, 15] but it returns {}\".format(f(5))"
    },
    {
        "number": 107,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert even_odd_palindrome(3) == (1, 2)\nassert even_odd_palindrome(12) == (4, 6)\nassert even_odd_palindrome(1) == (1, 1)\nassert even_odd_palindrome(0) == (0, 0)\nassert even_odd_palindrome(10) == (0, 0)"
    },
    {
        "number": 108,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert count_nums([]) == 0\nassert count_nums([-1, 11, -11]) == 1\nassert count_nums([1, 1, 2]) == 3"
    },
    {
        "number": 109,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert move_one_ball([3, 4, 5, 1, 2]) == True, \"move_one_ball([3, 4, 5, 1, 2]) should return True\"\nassert move_one_ball([3, 5, 4, 1, 2]) == False, \"move_one_ball([3, 5, 4, 1, 2]) should return False\"\nassert move_one_ball([]) == True, \"move_one_ball([]) should return True\""
    },
    {
        "number": 110,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\nassert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\""
    },
    {
        "number": 111,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\nassert histogram('a b b a') == {'a': 2, 'b': 2}\nassert histogram('a b c a b') == {'a': 2, 'b': 2}\nassert histogram('b b b b a') == {'b': 4}\nassert histogram('') == {}"
    },
    {
        "number": 112,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)\nassert reverse_delete(\"abcdef\", \"b\") == ('acdef', False)\nassert reverse_delete(\"abcdedcba\", \"ab\") == ('cdedc', True)"
    },
    {
        "number": 113,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert odd_count(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\nassert odd_count(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]"
    },
    {
        "number": 114,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\nassert minSubArraySum([-1, -2, -3]) == -6"
    },
    {
        "number": 115,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6\nassert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5\nassert max_fill([[0,0,0], [0,0,0]], 5) == 0"
    },
    {
        "number": 116,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\nassert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\nassert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]"
    },
    {
        "number": 117,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]\nassert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\nassert select_words(\"simple white space\", 2) == []\nassert select_words(\"Hello world\", 4) == [\"world\"]\nassert select_words(\"Uncle sam\", 3) == [\"Uncle\"]"
    },
    {
        "number": 118,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert get_closest_vowel(\"yogurt\") == \"u\"\nassert get_closest_vowel(\"FULL\") == \"U\"\nassert get_closest_vowel(\"quick\") == \"\"\nassert get_closest_vowel(\"ab\") == \"\""
    },
    {
        "number": 119,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert match_parens(['()(', ')']) == 'Yes'\nassert match_parens([')', ')']) == 'No'"
    },
    {
        "number": 120,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\nassert maximum([4, -4, 4], 2) == [4, 4]\nassert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]"
    },
    {
        "number": 121,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert solution([5, 8, 7, 1]) == 12\nassert solution([3, 3, 3, 3, 3]) == 9\nassert solution([30, 13, 24, 321]) == 0"
    },
    {
        "number": 122,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24 # sum of 21 + 3"
    },
    {
        "number": 123,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert get_odd_collatz(5) == [1, 5], \"The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\""
    },
    {
        "number": 124,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert valid_date('03-11-2000') == True\nassert valid_date('15-01-2012') == False\nassert valid_date('04-0-2040') == False\nassert valid_date('06-04-2020') == True\nassert valid_date('06/04/2020') == False"
    },
    {
        "number": 125,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\nassert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]\nassert split_words(\"abcdef\") == 3"
    },
    {
        "number": 126,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert is_sorted([5]) == True\nassert is_sorted([1, 2, 3, 4, 5]) == True\nassert is_sorted([1, 3, 2, 4, 5]) == False\nassert is_sorted([1, 2, 3, 4, 5, 6]) == True\nassert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True\nassert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False\nassert is_sorted([1, 2, 2, 3, 3, 4]) == True\nassert is_sorted([1, 2, 2, 2, 3, 4]) == False"
    },
    {
        "number": 127,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert intersection((1, 2), (2, 3)) == \"NO\"\nassert intersection((-1, 1), (0, 4)) == \"NO\"\nassert intersection((-3, -1), (-5, 5)) == \"YES\""
    },
    {
        "number": 128,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert prod_signs([1, 2, 2, -4]) == -9\nassert prod_signs([0, 1]) == 0\nassert prod_signs([]) is None"
    },
    {
        "number": 129,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert minPath([[1,2,3], [4,5,6], [7,8,9]], 3) == [1, 2, 1]\nassert minPath([[5,9,3], [4,1,6], [7,8,2]], 1) == [1]"
    },
    {
        "number": 130,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert tri(3) == [1, 3, 2, 8], \"The tribonacci sequence should be [1, 3, 2, 8]\"\nassert tri(4) == [3], \"The tribonacci sequence should be [3]\"\nassert tri(5) == [1, 5, 10, 55, 210], \"The tribonacci sequence should be [1, 5, 10, 55, 210]\"\nassert tri(6) == [1, 8, 34, 144, 672, 2880], \"The tribonacci sequence should be [1, 8, 34, 144, 672, 2880]\"\nassert tri(7) == [1, 16, 64, 256, 1024, 5120, 20480], \"The tribonacci sequence should be [1, 16, 64, 256, 1024, 5120, 20480]\""
    },
    {
        "number": 131,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert digits(1) == 1\nassert digits(4) == 0\nassert digits(235) == 15\nassert digits(12345) == 0\nassert digits(0) == 0"
    },
    {
        "number": 132,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert is_nested('[[]]') == True\nassert is_nested('[]]]]]]][[[[[]') == False\nassert is_nested('[][]') == False\nassert is_nested('[]') == False\nassert is_nested('[[][]]') == True\nassert is_nested('[[]][[') == True"
    },
    {
        "number": 133,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert sum_squares([1,2,3]) == 14\nassert sum_squares([1,4,9]) == 98\nassert sum_squares([1,3,5,7]) == 84\nassert sum_squares([1.4,4.2,0]) == 29\nassert sum_squares([-2.4,1,1]) == 6"
    },
    {
        "number": 134,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert check_if_last_char_is_a_letter(\"apple pie\") == False\nassert check_if_last_char_is_a_letter(\"apple pi e\") == True\nassert check_if_last_char_is_a_letter(\"apple pi e \") == False\nassert check_if_last_char_is_a_letter(\"\") == False"
    },
    {
        "number": 135,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert can_arrange([1,2,4,3,5]) == 3\nassert can_arrange([1,2,3]) == -1"
    },
    {
        "number": 136,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nassert largest_smallest_integers([]) == (None, None)\nassert largest_smallest_integers([0]) == (None, None)"
    },
    {
        "number": 137,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert compare_one(1, 2.5) == 2.5\nassert compare_one(1, \"2,3\") == \"2,3\"\nassert compare_one(\"5,1\", \"6\") == \"6\"\nassert compare_one(\"1\", 1) is None"
    },
    {
        "number": 138,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert is_equal_to_sum_even(4) == False\nassert is_equal_to_sum_even(6) == False\nassert is_equal_to_sum_even(8) == True"
    },
    {
        "number": 139,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert special_factorial(4) == 288, \"The special factorial of 4 is not 288.\"\nassert special_factorial(0) == 1, \"The special factorial of 0 is not 1.\"\nassert special_factorial(1) == 1, \"The special factorial of 1 is not 1.\"\nassert special_factorial(2) == 2, \"The special factorial of 2 is not 2.\"\nassert special_factorial(3) == 6, \"The special factorial of 3 is not 6.\"\nassert special_factorial(4) == 24, \"The special factorial of 4 is not 24.\""
    },
    {
        "number": 140,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert fix_spaces(\"Example\") == \"Example\"\nassert fix_spaces(\"Example 1\") == \"Example_1\"\nassert fix_spaces(\" Example 2\") == \"_Example_2\"\nassert fix_spaces(\" Example   3\") == \"_Example-3\""
    },
    {
        "number": 141,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert file_name_check(\"example.txt\") == 'Yes'\nassert file_name_check(\"1example.dll\") == 'No'\nassert file_name_check(\"example.exe\") == 'No'\nassert file_name_check(\"example\") == 'No'\nassert file_name_check(\"example.pdf\") == 'No'"
    },
    {
        "number": 142,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert sum_squares([1,2,3]) == 6\nassert sum_squares([]) == 0\nassert sum_squares([-1,-5,2,-1,-5]) == -126"
    },
    {
        "number": 143,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert words_in_sentence(\"This is a test\") == \"is\"\nassert words_in_sentence(\"lets go for swimming\") == \"go for\""
    },
    {
        "number": 144,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert simplify(\"1/5\", \"5/1\") == True\nassert simplify(\"1/6\", \"2/1\") == False\nassert simplify(\"7/10\", \"10/2\") == False"
    },
    {
        "number": 145,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\nassert order_by_points([]) == []"
    },
    {
        "number": 146,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert specialFilter([15, -73, 14, -15]) == 1\nassert specialFilter([33, -2, -3, 45, 21, 109]) == 2"
    },
    {
        "number": 147,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert get_max_triples(5) == 1, \"The function should return 1 for n = 5.\""
    },
    {
        "number": 148,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"The function should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun.\"\nassert bf(\"Earth\", \"Mercury\") == (\"Venus\"), \"The function should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun.\"\nassert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"The function should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun.\"\nassert bf(\"Mercury\", \"Venus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"The function should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun.\"\nassert bf(\"Venus\", \"Earth\") == (\"Mars\", \"Jupiter\", \"Saturn\"), \"The function should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun.\"\nassert bf(\"Venus\", \"Mars\") == (\"Mars\", \"Jupiter\", \"Saturn\"), \"The function should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun.\"\nassert bf(\"Venus\", \"Jupiter\") == (\"Mars\", \"Saturn\"), \"The function should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun.\"\nassert bf(\"Venus\", \"Saturn\") == (\"Mars\", \"Jupiter\"), \"The function should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun.\"\nassert bf(\"Venus\", \"Uranus\") == (\"Mars\", \"Jupiter\", \"Saturn\"), \"The function should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun.\"\nassert bf(\"Venus\", \"Neptune\") == (\"Mars\", \"Jupiter\", \"Saturn\"), \"The function should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun.\"\nassert bf(\"Mercury\", \"Venus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"The function should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun.\"\nassert bf(\"Mercury\", \"Earth\") == (\"Venus\", \"Mars\", \"Jupiter\", \"Saturn\"), \"The function should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun.\"\nassert bf(\"Mercury\", \"Mars\") == (\"Venus\", \"Jupiter\", \"Saturn\"), \"The function should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun.\"\nassert bf(\"Mercury\", \"Jupiter\") == (\"Venus\", \"Saturn\"), \"The function should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun.\"\nassert bf(\"Mercury\", \"Saturn\") == (\"Venus\", \"Jupiter\"), \"The function should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun.\"\nassert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Jupiter\", \"Saturn\"), \"The function should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun.\"\nassert bf(\"Mercury\", \"Neptune\") == (\"Venus\", \"Jupiter\", \"Saturn\"), \"The function should return a tuple containing all plan"
    },
    {
        "number": 149,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]"
    },
    {
        "number": 150,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert x_or_y(7, 34, 12) == 34\nassert x_or_y(15, 8, 5) == 5"
    },
    {
        "number": 151,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 == 10\nassert double_the_difference([-1, -2, 0]) == 0\nassert double_the_difference([9, -2]) == 81\nassert double_the_difference([0]) == 0"
    },
    {
        "number": 152,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]\nassert compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) == [4,4,1,0,0,6]"
    },
    {
        "number": 153,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\nassert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD']) =='my_class.Be'\nassert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE']) =='my_class.Be'\nassert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF']) =='my_class.Be'\nassert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG']) =='my_class.Be'"
    },
    {
        "number": 154,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert cycpattern_check(\"abcd\",\"abd\") == False\nassert cycpattern_check(\"hello\",\"ell\") == True\nassert cycpattern_check(\"whassup\",\"psus\") == False\nassert cycpattern_check(\"abab\",\"baa\") == True\nassert cycpattern_check(\"efef\",\"eeff\") == False\nassert cycpattern_check(\"himenss\",\"simen\") == True"
    },
    {
        "number": 155,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert even_odd_count(-12) == (1, 1)\nassert even_odd_count(123) == (1, 2)"
    },
    {
        "number": 156,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert int_to_mini_roman(19) == 'xix'\nassert int_to_mini_roman(152) == 'clii'\nassert int_to_mini_roman(426) == 'cdxxvi'"
    },
    {
        "number": 157,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert right_angle_triangle(3, 4, 5) == True\nassert right_angle_triangle(1, 2, 3) == False"
    },
    {
        "number": 158,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"\nassert find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\nassert find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\""
    },
    {
        "number": 159,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert eat(5, 6, 10) == [11, 4]\nassert eat(4, 8, 9) == [12, 1]\nassert eat(1, 10, 10) == [11, 0]\nassert eat(2, 11, 5) == [7, 0]"
    },
    {
        "number": 160,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9, \"The result of do_algebra(['+', '*', '-'], [2, 3, 4, 5]) should be 9.\"\nassert do_algebra(['+', '*', '-'], [2, 3, 4]) == 12, \"The result of do_algebra(['+', '*', '-'], [2, 3, 4]) should be 12.\"\nassert do_algebra(['+', '*', '-'], [2, 3]) == 6, \"The result of do_algebra(['+', '*', '-'], [2, 3]) should be 6.\"\nassert do_algebra(['+', '*', '-'], [2]) == 2, \"The result of do_algebra(['+', '*', '-'], [2]) should be 2.\"\nassert do_algebra(['+', '*', '-'], []) == 0, \"The result of do_algebra(['+', '*', '-'], []) should be 0.\""
    },
    {
        "number": 161,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert solve(\"1234\") == \"4321\"\nassert solve(\"ab\") == \"AB\"\nassert solve(\"#a@C\") == \"#A@c\""
    },
    {
        "number": 162,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'"
    },
    {
        "number": 163,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert generate_integers(2, 8) == [2, 4, 6, 8]\nassert generate_integers(8, 2) == [2, 4, 6, 8]\nassert generate_integers(10, 14) == []"
    }
]