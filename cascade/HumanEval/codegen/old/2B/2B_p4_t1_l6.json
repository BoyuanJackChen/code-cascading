[
    {
        "number": 0,
        "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) > threshold:\n                return True\n    return False\n\n",
        "generated_testcode": "assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(has_close_elements):\n    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\ncheck(has_close_elements)",
        "canonical_solution": "    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n",
        "declaration": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n",
        "indeed": false
    },
    {
        "number": 1,
        "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": false,
        "answer": "    if paren_string:\n        paren_stack = []\n        result = []\n        for paren_index in range(len(paren_string)):\n            paren = paren_string[paren_index]\n            if paren == '(':\n                paren_stack.append(paren)\n            elif paren == ')':\n                while paren_stack and paren_stack[-1]!= '(':\n                    result.append(paren_stack.pop())\n                paren_stack.pop()\n            else:\n                result.append(paren)\n        while paren_stack:\n            result.append(paren_stack.pop())\n        return result\n    else:\n        return []\n\n",
        "generated_testcode": "assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(separate_paren_groups):\n    assert separate_paren_groups('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert separate_paren_groups('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert separate_paren_groups('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n\ncheck(separate_paren_groups)",
        "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "declaration": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n",
        "indeed": false
    },
    {
        "number": 2,
        "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if number < 0:\n        raise ValueError(\"Number can't be negative\")\n    integer = int(number)\n    decimals = number - integer\n    return decimals\n\n",
        "generated_testcode": "assert truncate_number(3.5) == 0.5\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(truncate_number):\n    assert truncate_number(3.5) == 0.5\n    assert abs(truncate_number(1.33) - 0.33) < 1e-6\n    assert abs(truncate_number(123.456) - 0.456) < 1e-6\n\ncheck(truncate_number)",
        "canonical_solution": "    return number % 1.0\n",
        "declaration": "def truncate_number(number: float) -> float:\n",
        "indeed": true
    },
    {
        "number": 3,
        "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    balance = 0\n    for operation in operations:\n        if operation > 0:\n            balance += operation\n        else:\n            balance -= operation\n    return balance < 0\n\n",
        "generated_testcode": "assert below_zero([1, 2, 3]) == False\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(below_zero):\n    assert below_zero([]) == False\n    assert below_zero([1, 2, -3, 1, 2, -3]) == False\n    assert below_zero([1, 2, -4, 5, 6]) == True\n    assert below_zero([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert below_zero([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert below_zero([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\ncheck(below_zero)",
        "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "declaration": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n",
        "indeed": false
    },
    {
        "number": 4,
        "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    n = len(numbers)\n    mean = sum(numbers) / n\n    return sum(abs(e - mean) for e in numbers) / n\n\n",
        "generated_testcode": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(mean_absolute_deviation):\n    assert abs(mean_absolute_deviation([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\ncheck(mean_absolute_deviation)",
        "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "declaration": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n",
        "indeed": true
    },
    {
        "number": 5,
        "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(numbers) == 0:\n        return []\n    if len(numbers) == 1:\n        return numbers\n    result = []\n    temp = []\n    for i in range(len(numbers)):\n        if i == 0:\n            temp.append(numbers[i])\n            temp.append(delimeter)\n            result.append(temp)\n            temp = []\n        elif i == len(numbers) - 1:\n            temp.append(numbers[i])\n            result.append(temp)\n        else:\n            temp.append(numbers[i])\n    return result\n\n",
        "generated_testcode": "assert intersperse([], 4) == []\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(intersperse):\n    assert intersperse([], 7) == []\n    assert intersperse([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert intersperse([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n\ncheck(intersperse)",
        "canonical_solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "declaration": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n",
        "indeed": false
    },
    {
        "number": 6,
        "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": false,
        "answer": "    nested_parens = []\n    parsed_string = []\n    for char in paren_string:\n        if char == '(':\n            nested_parens.append(0)\n        elif char == ')':\n            if len(nested_parens) > 0:\n                nested_parens.pop()\n        else:\n            raise ValueError(f\"Unrecognized character: {char}\")\n        parsed_string.append(char)\n    return nested_parens + [len(parsed_string)]\n\n",
        "generated_testcode": "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(parse_nested_parens):\n    assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert parse_nested_parens('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert parse_nested_parens('(()(())((())))') == [4]\n\ncheck(parse_nested_parens)",
        "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "declaration": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n",
        "indeed": false
    },
    {
        "number": 7,
        "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return [string for string in strings if substring in string]\n\n",
        "generated_testcode": "assert filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') == ['abc', 'bacd', 'array']\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(filter_by_substring):\n    assert filter_by_substring([], 'john') == []\n    assert filter_by_substring(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert filter_by_substring(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert filter_by_substring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ncheck(filter_by_substring)",
        "canonical_solution": "    return [x for x in strings if substring in x]\n",
        "declaration": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n",
        "indeed": true
    },
    {
        "number": 8,
        "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    sum_nums = 0\n    product = 1\n    for num in numbers:\n        sum_nums += num\n        product *= num\n    return (sum_nums, product)\n\n",
        "generated_testcode": "assert sum_product([]) == (0, 1)\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(sum_product):\n    assert sum_product([]) == (0, 1)\n    assert sum_product([1, 1, 1]) == (3, 1)\n    assert sum_product([100, 0]) == (100, 0)\n    assert sum_product([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert sum_product([10]) == (10, 10)\n\ncheck(sum_product)",
        "canonical_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "declaration": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n",
        "indeed": true
    },
    {
        "number": 9,
        "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(numbers) == 1:\n        return numbers\n    if len(numbers) == 2:\n        return max(numbers)\n    temp_list = []\n    temp_list.append(max(numbers[0], numbers[1]))\n    for i in range(2, len(numbers)):\n        temp_list.append(max(temp_list[i - 2] + numbers[i], numbers[i]))\n    return temp_list\n\n",
        "generated_testcode": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(rolling_max):\n    assert rolling_max([]) == []\n    assert rolling_max([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert rolling_max([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert rolling_max([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ncheck(rolling_max)",
        "canonical_solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "declaration": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n",
        "indeed": false
    },
    {
        "number": 10,
        "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": false,
        "answer": "    substrings = []\n    suffixes = []\n    for i, char in enumerate(string):\n        # Find the longest suffix of string that is a palindrome.\n        suffix = string[i:]\n        while suffix!= \"\":\n            if is_palindrome(suffix):\n                substrings.append(suffix)\n                break\n            suffix = suffix[:-1]\n        # Find the longest prefix of a string that is a palindrome\n        prefix = string[:i]\n        while prefix!= \"\":\n            if is_palindrome(prefix):\n                # Append to end of string to make a palindrome.\n                suffixes.append(prefix)\n                break\n            prefix = prefix[:-1]\n    suffixes = suffixes[::-1]\n    substrings = substrings[::-1]\n    for suffix in suffixes:\n        for substring in substrings:\n            if suffix + substring == string:\n                return substring + suffix\n    return \"\"\n\n",
        "generated_testcode": "assert is_palindrome('cat') == True\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(make_palindrome):\n    assert make_palindrome('') == ''\n    assert make_palindrome('x') == 'x'\n    assert make_palindrome('xyz') == 'xyzyx'\n    assert make_palindrome('xyx') == 'xyx'\n    assert make_palindrome('jerry') == 'jerryrrej'\n\ncheck(make_palindrome)",
        "canonical_solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "declaration": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n",
        "indeed": false
    },
    {
        "number": 11,
        "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return format(int(a, 2) ^ int(b, 2), '0' + str(len(a)) + 'b')\n\n",
        "generated_testcode": "assert string_xor('010', '110') == '100'\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(string_xor):\n    assert string_xor('111000', '101010') == '010010'\n    assert string_xor('1', '1') == '0'\n    assert string_xor('0101', '0000') == '0101'\n\ncheck(string_xor)",
        "canonical_solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "declaration": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n",
        "indeed": true
    },
    {
        "number": 12,
        "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    max_len = 0\n    longest_string = ''\n    for s in strings:\n        if len(s) > max_len:\n            longest_string = s\n            max_len = len(s)\n    if longest_string == '':\n        return None\n    return longest_string\n\n",
        "generated_testcode": "assert longest([]) is None\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(longest):\n    assert longest([]) == None\n    assert longest(['x', 'y', 'z']) == 'x'\n    assert longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ncheck(longest)",
        "canonical_solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "declaration": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n",
        "indeed": true
    },
    {
        "number": 13,
        "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    while a!= 0 and b!= 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n    return a + b\n\n",
        "generated_testcode": "assert greatest_common_divisor(3, 5) == 1\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(greatest_common_divisor):\n    assert greatest_common_divisor(3, 7) == 1\n    assert greatest_common_divisor(10, 15) == 5\n    assert greatest_common_divisor(49, 14) == 7\n    assert greatest_common_divisor(144, 60) == 12\n\ncheck(greatest_common_divisor)",
        "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n",
        "declaration": "def greatest_common_divisor(a: int, b: int) -> int:\n",
        "indeed": true
    },
    {
        "number": 14,
        "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n\n",
        "generated_testcode": "assert all_prefixes('abc') == ['a', 'ab', 'abc']\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(all_prefixes):\n    assert all_prefixes('') == []\n    assert all_prefixes('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert all_prefixes('WWW') == ['W', 'WW', 'WWW']\n\ncheck(all_prefixes)",
        "canonical_solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "declaration": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n",
        "indeed": true
    },
    {
        "number": 15,
        "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    sequence = ''\n    for i in range(n + 1):\n        sequence += str(i) +''\n    return sequence\n\n",
        "generated_testcode": "assert string_sequence(0) == '0'\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(string_sequence):\n    assert string_sequence(0) == '0'\n    assert string_sequence(3) == '0 1 2 3'\n    assert string_sequence(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\ncheck(string_sequence)",
        "canonical_solution": "    return ' '.join([str(x) for x in range(n + 1)])\n",
        "declaration": "def string_sequence(n: int) -> str:\n",
        "indeed": false
    },
    {
        "number": 16,
        "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    return len(set(string.lower()))\n",
        "generated_testcode": "assert count_distinct_characters('xyzXYZ') == 3\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(count_distinct_characters):\n    assert count_distinct_characters('') == 0\n    assert count_distinct_characters('abcde') == 5\n    assert count_distinct_characters('abcde' + 'cade' + 'CADE') == 5\n    assert count_distinct_characters('aaaaAAAAaaaa') == 1\n    assert count_distinct_characters('Jerry jERRY JeRRRY') == 5\n\ncheck(count_distinct_characters)",
        "canonical_solution": "    return len(set(string.lower()))\n",
        "declaration": "def count_distinct_characters(string: str) -> int:\n",
        "indeed": true
    },
    {
        "number": 17,
        "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    i = 0\n    while i < len(music_string):\n        if i == 0 and music_string[i] == 'o':\n            result.append(4)\n            i += 1\n        elif i == 0 and music_string[i] == 'o|':\n            result.append(2)\n            i += 1\n        elif i == 0 and music_string[i] == '|':\n            result.append(2)\n            i += 1\n        elif music_string[i] == '|':\n            result.append(1)\n            i += 1\n        elif i == 0 and music_string[i] == '.':\n            result.append(1)\n            i += 1\n        elif i == 0 and music_string[i] == '|' and music_string[i + 1] == '|':\n            result.append(2)\n            i += 2\n        elif i == 0 and music_string[i] == '|' and music_string[i + 1] == '.':\n            result.append(1)\n            i += 2\n        else:\n            i += 1\n\n",
        "generated_testcode": "assert parse_music(\n    'o o|.| o| o|.|.|.|.| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(parse_music):\n    assert parse_music('') == []\n    assert parse_music('o o o o') == [4, 4, 4, 4]\n    assert parse_music('.| .| .| .|') == [1, 1, 1, 1]\n    assert parse_music('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert parse_music('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ncheck(parse_music)",
        "canonical_solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "declaration": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n",
        "indeed": false
    },
    {
        "number": 18,
        "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    i = 0\n    while i < len(string):\n        i = string.find(substring, i)\n        if i == -1:\n            break\n        count += 1\n        i += len(substring)\n    return count\n\n",
        "generated_testcode": "assert how_many_times('', 'a') == 0\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(how_many_times):\n    assert how_many_times('', 'x') == 0\n    assert how_many_times('xyxyxyx', 'x') == 4\n    assert how_many_times('cacacacac', 'cac') == 4\n    assert how_many_times('john doe', 'john') == 1\n\ncheck(how_many_times)",
        "canonical_solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "declaration": "def how_many_times(string: str, substring: str) -> int:\n",
        "indeed": false
    },
    {
        "number": 19,
        "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": false,
        "answer": "    # Convert string to a list of characters\n    numbers_list = list(numbers)\n\n",
        "generated_testcode": "assert sort_numbers('three one five') == 'one three five'\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(sort_numbers):\n    assert sort_numbers('') == ''\n    assert sort_numbers('three') == 'three'\n    assert sort_numbers('three five nine') == 'three five nine'\n    assert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert sort_numbers('six five four three two one zero') == 'zero one two three four five six'\n\ncheck(sort_numbers)",
        "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "declaration": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n",
        "indeed": false
    },
    {
        "number": 20,
        "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    smallest_diff = float('inf')\n    smallest_diff_pair = None\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < smallest_diff:\n                smallest_diff = diff\n                smallest_diff_pair = (numbers[i], numbers[j])\n    return smallest_diff_pair\n\n",
        "generated_testcode": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(find_closest_elements):\n    assert find_closest_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert find_closest_elements([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert find_closest_elements([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\ncheck(find_closest_elements)",
        "canonical_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "declaration": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n",
        "indeed": false
    },
    {
        "number": 21,
        "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n\n",
        "generated_testcode": "assert rescale_to_unit(\n    [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(rescale_to_unit):\n    assert rescale_to_unit([2.0, 49.9]) == [0.0, 1.0]\n    assert rescale_to_unit([100.0, 49.9]) == [1.0, 0.0]\n    assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert rescale_to_unit([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert rescale_to_unit([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ncheck(rescale_to_unit)",
        "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "declaration": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n",
        "indeed": true
    },
    {
        "number": 22,
        "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return [int(value) for value in values if isinstance(value, int)]\n\n",
        "generated_testcode": "assert filter_integers(['a', 3.14, 5]) == [5]\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(filter_integers):\n    assert filter_integers([]) == []\n    assert filter_integers([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert filter_integers([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ncheck(filter_integers)",
        "canonical_solution": "    return [x for x in values if isinstance(x, int)]\n",
        "declaration": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n",
        "indeed": true
    },
    {
        "number": 23,
        "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return len(string)\n\n",
        "generated_testcode": "assert strlen('abc') == 3\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(strlen):\n    assert strlen('') == 0\n    assert strlen('x') == 1\n    assert strlen('asdasnakj') == 9\n\ncheck(strlen)",
        "canonical_solution": "    return len(string)\n",
        "declaration": "def strlen(string: str) -> int:\n",
        "indeed": true
    },
    {
        "number": 24,
        "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": false,
        "answer": "    i = 1\n    while n % i!= 0:\n        i += 1\n    return i\n\n",
        "generated_testcode": "assert largest_divisor(15) == 5\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(largest_divisor):\n    assert largest_divisor(3) == 1\n    assert largest_divisor(7) == 1\n    assert largest_divisor(10) == 5\n    assert largest_divisor(100) == 50\n    assert largest_divisor(49) == 7\n\ncheck(largest_divisor)",
        "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "declaration": "def largest_divisor(n: int) -> int:\n",
        "indeed": false
    },
    {
        "number": 25,
        "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    factors = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n            n = n // i\n            factors.append(i)\n    return factors\n\n",
        "generated_testcode": "assert factorize(8) == [2, 2, 2]\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(factorize):\n    assert factorize(2) == [2]\n    assert factorize(4) == [2, 2]\n    assert factorize(8) == [2, 2, 2]\n    assert factorize(3 * 19) == [3, 19]\n    assert factorize(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert factorize(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert factorize(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert factorize(3 * 2 * 3) == [2, 3, 3]\n\ncheck(factorize)",
        "canonical_solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "declaration": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n",
        "indeed": true
    },
    {
        "number": 26,
        "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": false,
        "answer": "    res = []\n    seen = set()\n    for i in numbers:\n        if i not in seen:\n            res.append(i)\n            seen.add(i)\n    return res\n\n",
        "generated_testcode": "assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(remove_duplicates):\n    assert remove_duplicates([]) == []\n    assert remove_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert remove_duplicates([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n\ncheck(remove_duplicates)",
        "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "declaration": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n",
        "indeed": false
    },
    {
        "number": 27,
        "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return string.swapcase()\n\n",
        "generated_testcode": "assert flip_case('Hello') == 'hELLO'\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(flip_case):\n    assert flip_case('') == ''\n    assert flip_case('Hello!') == 'hELLO!'\n    assert flip_case('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n\ncheck(flip_case)",
        "canonical_solution": "    return string.swapcase()\n",
        "declaration": "def flip_case(string: str) -> str:\n",
        "indeed": true
    },
    {
        "number": 28,
        "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(strings) == 0:\n        return ''\n    return ''.join(strings)\n\n",
        "generated_testcode": "assert concatenate([]) == ''\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(concatenate):\n    assert concatenate([]) == ''\n    assert concatenate(['x', 'y', 'z']) == 'xyz'\n    assert concatenate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n\ncheck(concatenate)",
        "canonical_solution": "    return ''.join(strings)\n",
        "declaration": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n",
        "indeed": true
    },
    {
        "number": 29,
        "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(filter(lambda string: string.startswith(prefix), strings))\n\n",
        "generated_testcode": "assert filter_by_prefix([], 'a') == []\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(filter_by_prefix):\n    assert filter_by_prefix([], 'john') == []\n    assert filter_by_prefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ncheck(filter_by_prefix)",
        "canonical_solution": "    return [x for x in strings if x.startswith(prefix)]\n",
        "declaration": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n",
        "indeed": true
    },
    {
        "number": 30,
        "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return [x for x in l if x > 0]\n\n",
        "generated_testcode": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(get_positive):\n    assert get_positive([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert get_positive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert get_positive([-1, -2]) == []\n    assert get_positive([]) == []\n\ncheck(get_positive)",
        "canonical_solution": "    return [e for e in l if e > 0]\n",
        "declaration": "def get_positive(l: list):\n",
        "indeed": true
    },
    {
        "number": 31,
        "prompt": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n\n",
        "generated_testcode": "assert is_prime(6) == False\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(is_prime):\n    assert is_prime(6) == False\n    assert is_prime(101) == True\n    assert is_prime(11) == True\n    assert is_prime(13441) == True\n    assert is_prime(61) == True\n    assert is_prime(4) == False\n    assert is_prime(1) == False\n    assert is_prime(5) == True\n    assert is_prime(11) == True\n    assert is_prime(17) == True\n    assert is_prime(5 * 17) == False\n    assert is_prime(11 * 7) == False\n    assert is_prime(13441 * 19) == False\n\ncheck(is_prime)",
        "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "declaration": "def is_prime(n):\n",
        "indeed": false
    },
    {
        "number": 32,
        "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": false,
        "answer": "    xs = xs[::-1]\n    n = len(xs) - 1\n    for i in range(n, -1, -1):\n        if xs[i]!= 0:\n            xs.pop(i)\n        else:\n            break\n    return -xs[n] / xs[n - 1]\n\n",
        "generated_testcode": "assert round(find_zero([1, 2]), 2) == -0.5\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(find_zero):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = find_zero(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\ncheck(find_zero)",
        "canonical_solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "declaration": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n",
        "indeed": false
    },
    {
        "number": 33,
        "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": false,
        "answer": "    l_copy = l[:]\n    l_copy = sorted(l_copy)\n    for i in range(len(l)):\n        if (i+1) % 3 == 0:\n            continue\n        else:\n            l_copy.insert(l_copy.index(l_copy[i]),l[i])\n    return l_copy\n\n",
        "generated_testcode": "assert sort_third([1, 2, 3]) == [1, 2, 3]\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(sort_third):\n    assert tuple(sort_third([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(sort_third([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(sort_third([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(sort_third([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(sort_third([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\ncheck(sort_third)",
        "canonical_solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "declaration": "def sort_third(l: list):\n",
        "indeed": false
    },
    {
        "number": 34,
        "prompt": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return sorted(list(set(l)))\n\n",
        "generated_testcode": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(unique):\n    assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ncheck(unique)",
        "canonical_solution": "    return sorted(list(set(l)))\n",
        "declaration": "def unique(l: list):\n",
        "indeed": true
    },
    {
        "number": 35,
        "prompt": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    # your code here\n    return max(l)\n\n",
        "generated_testcode": "assert max_element([1, 2, 3]) == 3\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(max_element):\n    assert max_element([1, 2, 3]) == 3\n    assert max_element([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n\ncheck(max_element)",
        "canonical_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "declaration": "def max_element(l: list):\n",
        "indeed": true
    },
    {
        "number": 36,
        "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": false,
        "answer": "    cnt = 0\n    for i in range(1, n):\n        if i % 7 == 0 or i % 11 == 0 or i % 13 == 0:\n            cnt += 1\n    return cnt\n\n",
        "generated_testcode": "assert fizz_buzz(50) == 0\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(fizz_buzz):\n    assert fizz_buzz(50) == 0\n    assert fizz_buzz(78) == 2\n    assert fizz_buzz(79) == 3\n    assert fizz_buzz(100) == 3\n    assert fizz_buzz(200) == 6\n    assert fizz_buzz(4000) == 192\n    assert fizz_buzz(10000) == 639\n    assert fizz_buzz(100000) == 8026\n\ncheck(fizz_buzz)",
        "canonical_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "declaration": "def fizz_buzz(n: int):\n",
        "indeed": false
    },
    {
        "number": 37,
        "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return l.copy()\n\n",
        "generated_testcode": "assert sort_even([1, 2, 3]) == [1, 2, 3]\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(sort_even):\n    assert tuple(sort_even([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(sort_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(sort_even([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\ncheck(sort_even)",
        "canonical_solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "declaration": "def sort_even(l: list):\n",
        "indeed": false
    },
    {
        "number": 38,
        "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": false,
        "answer": "    # reverse-cycle\n    s = s[::-1]\n    # split string to groups of length 3. Each group contains 2 characters.\n    groups = [s[i:i + 3] for i in range(0, len(s), 3)]\n    # create list of groups.\n    # groups = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'],...]\n    groups = [[group[0]] + group[1:][::-1] for group in groups]\n    # join groups to string.\n    s = \"\".join([\"\".join(group) for group in groups])\n    return s\n\n",
        "generated_testcode": "assert encode_cyclic(\"abc\") == \"abc\"\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(decode_cyclic):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert decode_cyclic(encoded_str) == str\n\ncheck(decode_cyclic)",
        "canonical_solution": "    return encode_cyclic(encode_cyclic(s))\n",
        "declaration": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n",
        "indeed": false
    },
    {
        "number": 39,
        "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": false,
        "answer": "    fib_nums = {0: 2, 1: 3}\n    if n <= 0:\n        return 0\n    while n not in fib_nums:\n        n = fib_nums[n-1] + fib_nums[n-2]\n        fib_nums[n-1] = n\n    return n\n\n",
        "generated_testcode": "assert prime_fib(1) == 2\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(prime_fib):\n    assert prime_fib(1) == 2\n    assert prime_fib(2) == 3\n    assert prime_fib(3) == 5\n    assert prime_fib(4) == 13\n    assert prime_fib(5) == 89\n    assert prime_fib(6) == 233\n    assert prime_fib(7) == 1597\n    assert prime_fib(8) == 28657\n    assert prime_fib(9) == 514229\n    assert prime_fib(10) == 433494437\n\ncheck(prime_fib)",
        "canonical_solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "declaration": "def prime_fib(n: int):\n",
        "indeed": false
    },
    {
        "number": 40,
        "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    \n    if len(l) == 0:\n        return False\n    s = 0\n    for i in l:\n        if s + i == 0:\n            s += 1\n        else:\n            s = 0\n    if s == 3:\n        return True\n    else:\n        return False\n\n",
        "generated_testcode": "assert triples_sum_to_zero([1, 3, 5, 0]) == False\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(triples_sum_to_zero):\n    assert triples_sum_to_zero([1, 3, 5, 0]) == False\n    assert triples_sum_to_zero([1, 3, 5, -1]) == False\n    assert triples_sum_to_zero([1, 3, -2, 1]) == True\n    assert triples_sum_to_zero([1, 2, 3, 7]) == False\n    assert triples_sum_to_zero([1, 2, 5, 7]) == False\n    assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == True\n    assert triples_sum_to_zero([1]) == False\n    assert triples_sum_to_zero([1, 3, 5, -100]) == False\n    assert triples_sum_to_zero([100, 3, 5, -100]) == False\n\ncheck(triples_sum_to_zero)",
        "canonical_solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "declaration": "def triples_sum_to_zero(l: list):\n",
        "indeed": false
    },
    {
        "number": 41,
        "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": false,
        "answer": "    # Your code here\n\n",
        "generated_testcode": "assert car_race_collision(1) == 0\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(car_race_collision):\n    assert car_race_collision(2) == 4\n    assert car_race_collision(3) == 9\n    assert car_race_collision(4) == 16\n    assert car_race_collision(8) == 64\n    assert car_race_collision(10) == 100\n\ncheck(car_race_collision)",
        "canonical_solution": "    return n**2\n",
        "declaration": "def car_race_collision(n: int):\n",
        "indeed": false
    },
    {
        "number": 42,
        "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = []\n    for i in range(len(l)):\n        new_list.append(l[i] + 1)\n    return new_list\n\n",
        "generated_testcode": "assert incr_list([1, 2, 3]) == [2, 3, 4], \"incr_list([1, 2, 3]) should return [2, 3, 4]\"\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(incr_list):\n    assert incr_list([]) == []\n    assert incr_list([3, 2, 1]) == [4, 3, 2]\n    assert incr_list([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ncheck(incr_list)",
        "canonical_solution": "    return [(e + 1) for e in l]\n",
        "declaration": "def incr_list(l: list):\n",
        "indeed": true
    },
    {
        "number": 43,
        "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    l = sorted(l)\n    for i in range(len(l)-1):\n        if l[i] == 0:\n            continue\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n",
        "generated_testcode": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(pairs_sum_to_zero):\n    assert pairs_sum_to_zero([1, 3, 5, 0]) == False\n    assert pairs_sum_to_zero([1, 3, -2, 1]) == False\n    assert pairs_sum_to_zero([1, 2, 3, 7]) == False\n    assert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True\n    assert pairs_sum_to_zero([1]) == False\n\n    assert pairs_sum_to_zero([-3, 9, -1, 3, 2, 30]) == True\n    assert pairs_sum_to_zero([-3, 9, -1, 3, 2, 31]) == True\n    assert pairs_sum_to_zero([-3, 9, -1, 4, 2, 30]) == False\n    assert pairs_sum_to_zero([-3, 9, -1, 4, 2, 31]) == False\n\ncheck(pairs_sum_to_zero)",
        "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "declaration": "def pairs_sum_to_zero(l):\n",
        "indeed": true
    }
]