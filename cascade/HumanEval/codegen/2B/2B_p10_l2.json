[
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    assert threshold >= 0.0\n    assert len(numbers) >= 2\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) <= threshold:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(0, len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Split the list into pairs\n    pairs = list(zip(numbers[:-1], numbers[1:]))\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    size = len(numbers)\n    for i in range(0, size-1):\n        for j in range(i+1, size):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if i!= j:\n                if abs(numbers[i] - numbers[j]) < threshold:\n                    return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(len(numbers)-1):\n        if abs(numbers[i+1]-numbers[i]) < threshold:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(numbers) < 3:\n        return False\n    else:\n        a = numbers[0]\n        b = numbers[1]\n        c = numbers[2]\n        d = numbers[3]\n        e = numbers[4]\n        f = numbers[5]\n        sum_difference = 0.0\n        if a == b or a == c or a == d or a == e or a == f:\n            sum_difference += 1.0\n        if b == c or b == d or b == e or b == f:\n            sum_difference += 1.0\n        if c == d or c == e or c == f:\n            sum_difference += 1.0\n        if d == e or d == f:\n            sum_difference += 1.0\n        if e == f:\n            sum_difference += 1.0\n        if sum_difference > 1:\n            return False\n        sum_difference = 0.0\n        if a == b or a == c or a == d or a == e or a == f:\n            sum_difference += 1.0\n        if b == c or b == d or b == e or b == f:\n            sum_difference += 1.0\n        if c == d or c == e or c == f:\n            sum_difference += 1.0\n        if d == e or d == f:\n            sum_difference += 1.0\n        if e == f:\n            sum_difference += 1.0\n        if sum_difference > 1:\n            return False\n        sum_difference = 0.0\n        if a == b or a == c or a == d:\n            sum_difference += 1.0\n        if b == c or b == d or b == e:\n            sum_difference += 1.0\n        if c == d or c == e or c == f:\n            sum_difference += 1.0\n        if d == e or d == f:\n            sum_difference += 1.0\n        if e == f:\n            sum_difference += 1.0\n        if sum_difference > 1:\n            return False\n        sum_difference = 0.0\n        if a == b or a == c or a == d:\n            sum_difference += 1.0\n        if b == c or b == d or b == e:\n            sum_difference += 1.0\n        if c == d or c == e or c == f:\n            sum_difference += 1.0\n        if d == e or d == f:\n            sum_difference += 1.0\n        if e == f:\n            sum_difference += 1.0\n        if sum_difference > 1:\n            return False\n        if threshold > 0.0:\n            if abs(a - c) <= threshold and abs(a - d) <= threshold and abs(a - e) <= threshold:\n                return True\n            if abs(b - c) <= threshold and abs(b - d) <= threshold and abs(b - e) <= threshold:\n                return True\n            if abs(c - d) <= threshold and abs(c - e) <= threshold and abs(d - e) <= threshold:\n                return True\n            if abs(a - b) <= threshold and abs(a - d) <= threshold and abs(a - e) <= threshold:\n                return True\n            if abs(c - b) <= threshold and abs(c - d) <= threshold and abs(c - e) <= threshold:\n                return True\n            if abs(b - d) <= threshold and abs(b - e) <= threshold and abs(d - e) <= threshold:\n                return True\n            if abs(a - e) <= threshold and abs(a - f) <= threshold and abs(a - d) <= threshold:\n                return True\n            if abs(c - e) <= threshold and abs(c - f) <= threshold and abs(c - d) <= threshold:\n                return True\n            if abs(d - e) <= threshold and abs(d - f) <= threshold and abs(d - a) <= threshold:\n                return True\n            if abs(b - e) <= threshold and abs(b - f) <= threshold and abs(b - a) <= threshold:\n                return True\n            if abs(c - f) <= threshold and abs(c - a) <= threshold and abs(c - b) <= threshold:\n                return True\n            i"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(numbers) < 2:\n        return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # for each number in the list, check if the next number is closer than\n    # threshold to it\n    for index in range(len(numbers) - 1):\n        if abs(numbers[index + 1] - numbers[index]) < threshold:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    numbers_length = len(numbers)\n    for i in range(numbers_length - 1):\n        for j in range(i + 1, numbers_length):\n            if numbers[i] - numbers[j] < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    new_string = []\n    string = paren_string.strip().replace(' ', '')\n    i = 0\n    while i < len(string):\n        if string[i] == '(':\n            i += 1\n            while string[i]!= ')':\n                i += 1\n            new_string.append(string[:i+1])\n            string = string[i+1:]\n            i = 0\n        elif string[i] == ')':\n            i += 1\n            while string[i]!= '(':\n                i += 1\n            new_string.append(string[:i+1])\n            string = string[i+1:]\n            i = 0\n        else:\n            i += 1\n    return new_string\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    s = paren_string.replace(\" \", \"\")\n    i = 0\n    answer = []\n    while i < len(s):\n        if s[i] == \"(\":\n            end = find_closing_bracket(s, i)\n            if end == -1:\n                answer.append(s[i:])\n            else:\n                answer.append(s[i:i+end])\n        i += 1\n    return answer\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    stack = []\n    ret = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        else:\n            # pop until we see an opening bracket\n            while stack and stack[-1]!= '(':\n                ret.append(stack.pop())\n            stack.pop()\n            # push the current character\n            stack.append(char)\n    while stack:\n        ret.append(stack.pop())\n    return ret\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    paren_list = paren_string.split(' ')\n    for paren in paren_list:\n        if paren.startswith('(') and paren.endswith(')'):\n            paren_list.remove(paren)\n    return paren_list\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = []\n    paren_stack = []\n    \n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            paren_stack.append('(')\n        elif paren_string[i] == ')':\n            if len(paren_stack) > 0:\n                paren_stack.pop()\n            else:\n                result.append('(')\n    return result\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    string_list = paren_string.split()\n    split_list = []\n    for item in string_list:\n        if item.isalpha():\n            split_list.append(item)\n        elif item == '(':\n            split_list.append('(')\n        elif item == ')':\n            if len(split_list) == 0 or split_list[-1]!= '(':\n                split_list.append(')')\n            else:\n                split_list.pop()\n    return split_list\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    paren_groups = list()\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not paren_string:\n        return []\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    paren_list = []\n    for paren in paren_string:\n        if paren == '(':\n            paren_list.append('(')\n        elif paren == ')':\n            if paren_list[-1] == '(':\n                paren_list.pop()\n            else:\n                paren_list.append(')')\n    return paren_list\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    paren_list = paren_string.split()\n    if len(paren_list) == 0:\n        return []\n    stack = []\n    answer = []\n    for p in paren_list:\n        if p.isalpha():\n            if p.isupper():\n                answer.append(p)\n            else:\n                if stack:\n                    if stack[-1] == '(':\n                        stack.pop()\n                        answer.append(''.join(stack))\n                        answer.append(p)\n                        stack = []\n                    else:\n                        stack.append(p)\n                else:\n                    stack.append(p)\n        else:\n            if stack:\n                if stack[-1] == '(':\n                    stack.pop()\n                    answer.append(''.join(stack))\n                    answer.append(p)\n                    stack = []\n                else:\n                    stack.append(p)\n            else:\n                answer.append(p)\n    if stack:\n        answer.append(''.join(stack))\n    return answer\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    n = int(number)\n    return number - n\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return int(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    integer_part = math.floor(number)\n    decimal_part = number - integer_part\n    return decimal_part\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return math.trunc(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    int_part = math.floor(number)\n    decimal_part = number - int_part\n    return decimal_part\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    fraction = number - math.floor(number)\n    integer = math.floor(number)\n    return fraction\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    n = int(number)\n    d = number - n\n    return n, d\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not isinstance(number, float):\n        raise ValueError('Argument must be a float')\n    if number <= 0:\n        raise ValueError('Number must be positive')\n    # Return integer part\n    integer = int(number)\n    # Return remainder\n    return number - integer\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    a, b = divmod(number, 1)\n    return b\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return number % 1\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    bal = 0\n    for op in operations:\n        if op >= 0:\n            bal += op\n        else:\n            bal -= op\n    return bal < 0\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    current_balance = 0\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    result = False\n    for i in range(len(operations)):\n        if operations[i] < 0:\n            result = True\n            break\n    return result\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # print(operations)\n    bal = 0\n    for i in range(len(operations)):\n        bal += operations[i]\n        if bal < 0:\n            return True\n        elif bal == 0:\n            bal = 0\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not operations:\n        return False\n    bal = 0\n    for operation in operations:\n        if operation > 0:\n            bal += operation\n        else:\n            bal -= operation\n    return bal < 0\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    bal = 0\n    for op in operations:\n        if op < 0:\n            bal += op\n    return bal < 0\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(1, len(operations)):\n        if operations[i - 1] >= 0 and operations[i] < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # first approach\n    # i = 0\n    # curr_bal = 0\n    # while i < len(operations):\n    #     if curr_bal > 0:\n    #         curr_bal += operations[i]\n    #     else:\n    #         curr_bal -= operations[i]\n    #     i += 1\n    #     if curr_bal < 0:\n    #         return True\n    #     if curr_bal == 0:\n    #         return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    balance = 0\n    for item in operations:\n        if item > 0:\n            balance += item\n    return balance < 0\n    # balance = 0\n    # for i in operations:\n    #     if i > 0:\n    #         balance += i\n    # return balance < 0\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    current_balance = 0\n    for operation in operations:\n        if operation == 1:\n            current_balance += 1\n        elif operation == 2:\n            current_balance -= 1\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(numbers) == 0:\n        return 0.0\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sum(abs(x - mean(numbers)) for x in numbers) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    mean = sum(numbers) / len(numbers)\n    return sum([abs(n - mean) for n in numbers]) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sum([abs(x - mean(numbers)) for x in numbers]) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return mean_absolute_deviation_function(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # calculate the mean\n    mean = sum(numbers) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    numbers_sum = sum(numbers)\n    numbers_mean = sum(numbers)/len(numbers)\n    numbers_deviation = [(x - numbers_mean) for x in numbers]\n    return (sum(abs(x) for x in numbers_deviation)/len(numbers))\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sum(abs(x - sum(numbers) / len(numbers))) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # first, calculate the mean\n    mean = sum(numbers) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    sum = 0\n    for num in numbers:\n        sum += abs(num - mean(numbers))\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not numbers:\n        return []\n    elif len(numbers) == 1:\n        return [numbers[0], delimeter]\n    else:\n        return [numbers[0]] + intersperse(numbers[1:], delimeter) + [numbers[-1]]\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = []\n    i = 0\n    for j, _ in enumerate(numbers):\n        result.append(numbers[i])\n        result.append(delimeter)\n        i = (i + 1) % len(numbers)\n    result.append(numbers[i])\n    return result\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not numbers:\n        return []\n    else:\n        return [numbers[0]] + intersperse(numbers[1:], delimeter) + [numbers[-1]]\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # The index of first element of the list\n    start_index = 0\n    result = []\n    for i in range(len(numbers)):\n        # Insert 'delimeter' between every two consecutive elements\n        result.insert(start_index + i, numbers[i])\n        # Increment index of first element of the list\n        start_index += 1\n        # Increment index of every second element\n        start_index += 1\n    return result\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    output = []\n    for i in range(len(numbers)):\n        output.extend([delimeter, numbers[i], delimeter])\n    return output\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not numbers:\n        return []\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    numbers_len = len(numbers)\n    if numbers_len < 2:\n        return numbers\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return list(map(lambda x, y: x + delimeter + y, numbers[0::2], numbers[1::2]))\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    output = []\n    for i in range(0, len(numbers)-1, 2):\n        output.append(numbers[i])\n        output.append(delimeter)\n        output.append(numbers[i+1])\n    if not output:\n        return []\n    else:\n        return output\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # If the input list is empty, nothing to do\n    if len(numbers) == 0:\n        return []\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    paren_list = []\n    paren_stack = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            paren_stack.append(i)\n        elif paren_string[i] == ')':\n            paren_list.append(paren_stack.pop())\n    if paren_stack:\n        return [len(paren_stack)]\n    return paren_list\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = []\n    for char in paren_string:\n        if char == \"(\":\n            result.append(0)\n        elif char == \")\":\n            result.append(1)\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    parens = [i.strip() for i in paren_string.split()]\n    stack = []\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    paren_list = []\n    paren_level = 0\n    paren_string = paren_string.replace(')','')\n    paren_string = paren_string.replace('(','')\n    paren_string = paren_string.split()\n    for char in paren_string:\n        if char == '(':\n            paren_level += 1\n        elif char == ')':\n            paren_level -= 1\n        else:\n            pass\n        paren_list.append(paren_level)\n    return paren_list\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    paren_list = paren_string.split()\n    paren_dict = {}\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    paren_list = []\n    for paren in paren_string:\n        paren_list.append(paren)\n    return paren_list\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    num_open = 0\n    num_close = 0\n    depth = 0\n    paren_stack = []\n    for s in paren_string:\n        if s == '(':\n            num_open += 1\n        if s == ')':\n            num_close += 1\n        if num_open > num_close:\n            paren_stack.append('(')\n            depth += 1\n        if num_open < num_close:\n            paren_stack.append(')')\n            depth -= 1\n    return paren_stack\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # TODO: Use a stack to store the levels of nesting for each group.\n    nested_parens_stack = []\n    parens = paren_string.split()\n    for paren in parens:\n        nested_parens_stack.append(len(paren))\n        if '(' in paren:\n            nested_parens_stack.append(0)\n    return nested_parens_stack\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    nested_string_list = paren_string.split()\n    max_level = 0\n    max_level_list = []\n    \n    for nested_string in nested_string_list:\n        nested_level = 0\n        for char in nested_string:\n            if char == \"(\":\n                nested_level += 1\n            if char == \")\":\n                nested_level -= 1\n        max_level_list.append(max(nested_level, max_level))\n        max_level = max(max_level_list)\n    return max_level_list\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    paren_string = paren_string.strip()\n    if not paren_string:\n        return []\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = []\n    for s in strings:\n        if substring in s:\n            result.append(s)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return list(filter(lambda s: substring in s, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    new_list = []\n    for s in strings:\n        if substring in s:\n            new_list.append(s)\n    return new_list\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    output = []\n    for string in strings:\n        if substring in string:\n            output.append(string)\n    return output\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return list(filter(lambda item: substring in item, strings))\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return (sum, product)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # pylint: disable=unused-argument\n    numbers_sum = 0\n    numbers_product = 1\n    for number in numbers:\n        numbers_sum += number\n        numbers_product *= number\n    return numbers_sum, numbers_product\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    sum_value, prod_value = 0, 1\n    for i in numbers:\n        sum_value += i\n        prod_value *= i\n    return sum_value, prod_value\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    total = 0\n    product = 1\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not numbers:\n        return (0, 1)\n    else:\n        n = numbers[0]\n        sum_, prod = 0, 1\n        for i in range(1, len(numbers)):\n            n = numbers[i]\n            sum_, prod = sum_ + n, prod * n\n        return (sum_, prod)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Check if the list is not empty.\n    if numbers:\n        # Create the sum and product variables to be returned.\n        sum_ = 0\n        product = 1\n        # Iterate through the list.\n        for number in numbers:\n            # Add the next number to the sum.\n            sum_ += number\n            # Multiply the next number to the product.\n            product *= number\n        # Return the sum and product.\n        return (sum_, product)\n    # If the list is empty, return (0, 1).\n    else:\n        return (0, 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    n = len(numbers)\n    sum_i = 0\n    prod_i = 1\n    for x in numbers:\n        sum_i = sum_i + x\n        prod_i = prod_i * x\n    return (sum_i, prod_i)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    sum_ = 0\n    product = 1\n    for i in numbers:\n        sum_ += i\n        product *= i\n    return sum_, product\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    s = 0\n    p = 1\n    for i in numbers:\n        s += i\n        p *= i\n    return (s, p)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    s = 0\n    p = 1\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Define max_rolling_list, and set it to the first element.\n    max_rolling_list = numbers[0]\n    # Define the final result list.\n    result = []\n    # Define the loop.\n    for i in range(len(numbers)):\n        # If the first element is bigger than max_rolling_list, set the first element to it.\n        if numbers[i] > max_rolling_list:\n            max_rolling_list = numbers[i]\n        # Append the max_rolling_list to the result list.\n        result.append(max_rolling_list)\n    # Return result.\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result: List[int] = []\n    last_index: int = 0\n    while last_index < len(numbers):\n        if len(result) == 0 or result[-1] <= numbers[last_index]:\n            result.append(numbers[last_index])\n        else:\n            result.append(max(numbers[last_index], result[-1]))\n        last_index += 1\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    assert len(numbers) > 0\n    result = []\n    for i in range(len(numbers)):\n        if len(result) == 0 or numbers[i] > result[-1]:\n            result.append(numbers[i])\n        else:\n            result[-1] = numbers[i]\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # starting point\n    j = 0\n    # result\n    result = []\n    # make a loop until all the elements has been calculated\n    while j < len(numbers):\n        # get the current element\n        current = numbers[j]\n        # get the value for max until now\n        max_before = max(numbers[:j])\n        # compare the current element with the max_before\n        if current >= max_before:\n            # if it's larger than the max, replace it\n            result.append(current)\n        else:\n            # if it's smaller than the max, add the max_before\n            result.append(max_before)\n        # increase the j value to point to the next element\n        j += 1\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # return numbers[:]  # or return copy of numbers\n    maximum = max(numbers)  # find maximum element in the array\n    result = []\n    result.append(maximum)  # append the maximum element to the result\n    for index, value in enumerate(numbers):\n        if value > result[-1]:\n            result.append(value)\n        else:\n            result[index] = value  # update the max element\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    max_list = []\n    curr_max = numbers[0]\n    for i in range(1, len(numbers)):\n        if curr_max <= numbers[i]:\n            curr_max = numbers[i]\n        else:\n            max_list.append(curr_max)\n            curr_max = numbers[i]\n    max_list.append(curr_max)\n    return max_list\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    max_value = max(numbers)\n    new_list = []\n    for i in range(len(numbers)):\n        new_list.append(max_value)\n    new_list[0] = max(numbers[0], numbers[1])\n    for i in range(len(numbers)-1):\n        new_list[i+1] = max(new_list[i+1], numbers[i+2] + new_list[i])\n    return new_list\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = []\n    max_value = -1\n    for i in range(len(numbers)):\n        if numbers[i] > max_value:\n            max_value = numbers[i]\n        result.append(max_value)\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        temp = numbers[i]\n        for j in range(i+1, len(numbers)):\n            if temp < numbers[j]:\n                temp = numbers[j]\n        result.append(temp)\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    new_list = []\n    for i in range(len(numbers)):\n        if i == 0:\n            new_list.append(numbers[i])\n        else:\n            new_list.append(max(new_list[i-1], numbers[i]))\n    return new_list\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Get the longest prefix that is a palindrome.\n    longest_prefix_and_palindrome = get_longest_prefix_and_palindrome(string)\n    # Get a prefix that comes before the palindrome.\n    # NOTE: The length of the prefix must be 1 since a long prefix\n    #       could be a palindrome that only has 1 character in the prefix.\n    first_longest_prefix_and_palindrome_suffix = string[:longest_prefix_and_palindrome[0][0]]\n    # Return the prefix reversed and appended to the end of the string.\n    return first_longest_prefix_and_palindrome_suffix + string[longest_prefix_and_palindrome[0][1]:]\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not string:\n        return ''\n    longest = ''\n    for i, ch in enumerate(string):\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            longest = suffix\n            break\n    return ''.join([c * len(longest) for c in reversed(longest)])\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # TODO: Fix this algorithm\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if string == '':\n        return string\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not string:\n        return ''\n    # find longest palindrome that begins with supplied string\n    longest = ''\n    for index in range(len(string)):\n        suffix = string[index:]\n        if is_palindrome(suffix):\n            longest = suffix\n    # the string is guaranteed to be longer than longest palindrome\n    # only append a reverse suffix to the end of the string\n    return ''.join(reversed([string[0]] + list(longest)))\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    suffix = ''\n    while is_palindrome(suffix + string):\n        suffix = string[:-1]\n        string = string + suffix\n    return suffix + string\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # find longest prefix of string that is palindrome\n    def longest_palindrome(string):\n        # find the longest prefix that is a palindrome\n        longest = ''\n        for i in range(len(string)):\n            # look for palindrome prefix\n            for j in range(i, len(string)):\n                if is_palindrome(string[i:j+1]):\n                    # longest prefix found so far\n                    longest = string[i:j+1]\n                    break\n        return longest\n    \n    # find prefix that is a palindrome\n    prefix = longest_palindrome(string)\n    # append the suffix reversed, this reverses the suffix\n    suffix = string[len(prefix):]\n    return prefix + suffix[::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    prefix = string[:len(string)//2]\n    suffix = string[len(string)//2:]\n    suffix = suffix[::-1]\n    new_string = prefix + suffix\n    return new_string\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Initialize a prefix and suffix variables.\n    prefix = string\n    suffix = string\n    # Try to find a postfix palindrome.\n    while prefix and suffix and is_palindrome(prefix + suffix):\n        prefix, suffix = suffix, prefix[:-1]\n    # Return the suffix reversed.\n    return suffix + prefix[::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    max_pali = ''\n    for i in range(len(string), 0, -1):\n        prefix, pali = string[:i], string[i:]\n        if is_palindrome(pali):\n            max_pali = pali + max_pali\n            break\n    return max_pali\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return ''.join(chr(ord(char) ^ 1) for char in a + b)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    res = \"\"\n    for i in range(0, len(a)):\n        if a[i] == b[i]:\n            res += \"0\"\n        else:\n            res += \"1\"\n    return res\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    res = ''\n    for i,j in zip(a,b):\n        if i == j:\n            res += '0'\n        else:\n            res += '1'\n    return res\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # XOR of a and b\n    # Not useful\n    return \"\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    xor_list = []\n    for i in range(len(a)):\n        xor_list.append(int(a[i]) ^ int(b[i]))\n    return ''.join(str(x) for x in xor_list)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    s1 = []\n    s2 = []\n    for i in range(0, len(a)):\n        s1.append(int(a[i]))\n        s2.append(int(b[i]))\n    res = \"\"\n    for i in range(len(s1)):\n        res = res + str(int(s1[i]) ^ int(s2[i]))\n    return res\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return ''.join([chr(ord(x) ^ ord(y)) for x, y in zip(a, b)])\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return ''.join(['1' if a=='1' and b=='1' else '0' for a,b in zip(a,b)])\n    \n    \ndef find_contiguous_set(list_nums: List[int], start: int, stop: int) -> List[int]:\n    \"\"\" Given a list of numbers, find the largest contiguous sub-list that includes all the numbers.\n    \n    >>> find_contiguous_set([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3], 1, 5)\n    [1, 2, 3, 4]\n    >>> find_contiguous_set([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3], 1, 6)\n    [1, 2, 3, 4, 1, 2, 3]\n    >>> find_contiguous_set([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3], 4, 5)\n    [1, 2, 3, 4]\n    >>> find_contiguous_set([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3], 1, 4)\n    [1, 2, 3, 4]\n    >>> find_contiguous_set([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3], 3, 5)\n    []\n    >>> find_contiguous_set([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3], 1, 3)\n    [1, 2, 3]\n    \"\"\"\n    result = []\n    for i in range(start, stop):\n        if not i in result:\n            result.append(i)\n            nums = list_nums[result[0]:result[1]+1]\n            for j in range(result[0]+1, result[1]+1):\n                if not j in nums:\n                    nums.append(j)\n            if len(nums) == len(list_nums)-1:\n                return result\n                \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    xored = 0\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            xored ^= 1\n    return str(xored)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return \"\".join([str(x) for x in bin(int(a, 2) ^ int(b, 2))[2:]])\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not strings:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    max_len = len(strings[0])\n    for string in strings:\n        max_len = max(max_len, len(string))\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if strings:\n        return max(strings, key=len)\n    else:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(strings) == 0:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(strings) == 0:\n        return None\n    length = len(strings[0])\n    string = strings[0]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(strings) == 0:\n        return None\n    cur_len = strings[0]\n    for s in strings:\n        if len(s) > len(cur_len):\n            cur_len = s\n    return cur_len\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return_string = ''\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(strings) == 0:\n        return None\n    max_length = 0\n    for string in strings:\n        if len(string) > max_length:\n            max_length = len(string)\n            max_string = string\n    return max_string\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    if strings == []:\n        return None\n    \n    max_len = 0\n    max_string = ''\n    \n    for word in strings:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_string = word\n            \n    return max_string\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(strings) == 0:\n        return None\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    assert a >= 1 and b >= 1\n    if a % b == 0:\n        return b\n    else:\n        return greatest_common_divisor(b, a % b)\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if a == 0:\n        return b\n    elif b == 0:\n        return a\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    while a!= 0 and b!= 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n    return a + b\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if a == b:\n        return a\n    elif a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    while a!= 0 and b!= 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    while a!= 0 and b!= 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a+b\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    while a > b:\n        a, b = b, a%b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if a == 0 or b == 0:\n        return 0\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    while a > 0 and b > 0:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a + b\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    pre = []\n    if not isinstance(string, str):\n        return pre\n    for i in range(len(string)):\n        pre.append(string[:i + 1])\n    return pre\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    prefix_list = []\n    for i in range(len(string)):\n        prefix_list.append(string[:i])\n    return prefix_list\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    res = []\n    for i in range(len(string)):\n        res.append(string[:i + 1])\n    return res\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    prefixes = []\n    for i in range(len(string)+1):\n        prefixes.append(string[:i])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i + 1])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    prefixes = []\n    for i in range(len(string) + 1):\n        prefixes.append(string[:i])\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    prefixes = []\n    if len(string) == 0:\n        return prefixes\n    prefixes = [string[:i] for i in range(1, len(string)+1)]\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    s = ''\n    for i in range(n+1):\n        s += str(i) +''\n    return s[:-1]\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return''.join(str(i) for i in range(n+1))\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 0:\n        return '0'\n    return f'0 {string_sequence(n-1)}'\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n < 1:\n        return '0'\n    return''.join(str(x) for x in range(1, n+1))\n    \n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return \" \".join(str(i) for i in range(n))\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n < 0:\n        return None\n    return''.join(str(i) for i in range(n + 1))\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return''.join(str(i) for i in range(n+1))\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    string = ''\n    for i in range(n+1):\n        string += str(i) +''\n    return string[:-1]\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return''.join(map(str, range(n+1)))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Your code here\n    string = string.lower()\n    return len(set(string))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    string = string.lower()\n    res = 0\n    for i in range(len(string)):\n        res += 1 if string[i] not in string[i + 1:] else 0\n    return res\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # TODO: write your code here\n    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if string is None:\n        return 0\n    # Create a list of all lowercase letters\n    lower_case = [character.lower() for character in string]\n    # Create a list of all characters\n    all_characters = list(string)\n    # Create a dictionary of all characters\n    all_characters_dict = dict()\n    for character in all_characters:\n        all_characters_dict[character.lower()] = True\n    # Return the number of distinct characters\n    return len(all_characters_dict)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # make sure the string is lower case\n    string = string.lower()\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count = 0\n    for i in string:\n        if i.isalpha():\n            count += 1\n    return count\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return [4 if i == 'o' else 2 if i == 'o|' else 1 if i == ''.join(['o', '|']) else 0 for i in music_string]\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    notes = ['o', 'o|', '.', '.', '.', '.', '.', '.', 'o', 'o|', '.', '.', '.', '.', '.', '.', '.', '.', 'o', 'o|', '.', '.', '.', '.', '.', '.', '.', '.', 'o', 'o|', '.', '.', '.', '.', '.', '.', '.', '.', 'o', 'o|', '.', '.', '.', '.', '.', '.', '.', '.', 'o', 'o|', '.', '.', '.', '.', '.', '.', '.', '.', 'o', 'o|', '.', '.', '.', '.', '.', '.', '.', '.', 'o', 'o|', '.', '.', '.', '.', '.', '.', '.', '.']\n    count_notes = []\n    for i in range(0, len(notes), 4):\n        if notes[i] == 'o':\n            count_notes.append(4)\n        elif notes[i] == 'o|':\n            count_notes.append(2)\n        elif notes[i] == '.':\n            count_notes.append(1)\n        else:\n            count_notes.append(0)\n    return count_notes\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    output = []\n    for s in music_string:\n        if s == '.':\n            output.append(4)\n        elif s == '|':\n            output.append(2)\n        elif s == 'o':\n            output.append(1)\n        elif s == 'o|':\n            output.append(2)\n    return output\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return [4 if note == 'o' else 2 if note == 'o|' else 1 for note in music_string]\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # a little slow but it's the most efficient solution\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    parsed = []\n    for char in music_string:\n        if char == 'o':\n            parsed.append(4)\n        elif char == 'o|':\n            parsed.append(2)\n        elif char == '.':\n            parsed.append(1)\n    return parsed\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Your code here\n    return None\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return music_string.split('|')\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Since we are working in a list we are using a list instead of a string.\n    # And we have to give a list of integers representing how long each note lasts.\n    # If we use string, we will have to do a lot of string manipulation and splitting.\n    # So we are just using a list with integers.\n    # So we should turn the string into a list of integers.\n    \n    # First we will split the input string, and then convert the characters in the list to integers.\n    music = music_string.split(' ')\n    # Convert every character in the list into an integer\n    music = [int(x) for x in music]\n    # Now we need to check the first character of every note.\n    # We have to check every time if the first character is an o, a., or a.|\n    # If it's an o, that means that the note lasts four beats.\n    # If it's a., that means that the note lasts two beats.\n    # If it's an o|, that means that the note lasts one beat.\n    \n    # Now we will iterate through the list.\n    # We are going to traverse through the list.\n    # We will iterate over the list.\n    # We will check if the first character is an o, a., or a.|\n    # If it's an o, that means that the note lasts four beats.\n    # If it's a., that means that the note lasts two beats.\n    # If it's an o|, that means that the note lasts one beat.\n    # If there is a.,., or o, we should add 1 to the counter, because we have to add 1 beat to the note.\n    # If there is no.,., or o, we should subtract 1 from the counter, because we have to subtract 1 beat from the note.\n    \n    # Now we need to check if there are more than one notes.\n    # If there are, we will just need to subtract 1 from the counter.\n    # If there are not, we will just need to add 1 to the counter.\n    # This is because in the end we will get the number of beats for each note.\n    \n    # Then we will iterate over the list again.\n    # We will go through the list again.\n    # We will check if the first character is an o, a., or a.|\n    # If it's an o, that means that the note lasts four beats.\n    # If it's a., that means that the note lasts two beats.\n    # If it's an o|, that means that the note lasts one beat.\n    # If there is a.,., or o, we should add 1 to the counter, because we have to add 1 beat to the note.\n    # If there is no.,., or o, we should subtract 1 from the counter, because we have to subtract 1 beat from the note.\n    # And so on, until we are done iterating.\n    # If there are more than one notes, we need to subtract 1 from the counter.\n    # If there are not, we need to add 1 to the counter.\n    \n    # So the final return list will be a list of integers representing how long each note lasts.\n    # And in the end it will be a list with how many beats each note lasts.\n    \n    # Remember, we need to return a list of integers.\n    # So we will convert the return list back into a list of integers.\n    return music\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return music_string.count('o') + music_string.count('o|') + music_string.count('.') * 2 + music_string.count('.|')\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return string.count(substring)\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i] == substring[0]:\n            if string[i:i+len(substring)] == substring:\n                count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return len(string.replace(substring, \"\")) - len(string.replace(substring, \"\").replace(substring, \"\"))\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if substring == string[i: i + len(substring)]:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    while True:\n        index = string.find(substring)\n        if index == -1:\n            break\n        count += 1\n        string = string[index + 1:]\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    string_len = len(string)\n    substring_len = len(substring)\n    count = 0\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    index = 0\n    counter = 0\n    while True:\n        try:\n            index = string.index(substring, index)\n            counter += 1\n            index += 1\n        except ValueError:\n            return counter\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return 1 + how_many_times_recursive(string, substring)\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count = 0\n    substring_len = len(substring)\n    substring_index = 0\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    assert substring, \"substring cannot be empty\"\n    assert string, \"string cannot be empty\"\n    assert substring!= \"\", \"substring cannot be empty\"\n    count = 0\n    length_substring = len(substring)\n    for i in range(len(string)):\n        if i+length_substring <= len(string):\n            if string[i:i+length_substring] == substring:\n                count += 1\n    return count\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    string = ''\n    if numbers.count(' ')!= 0:\n        numbers = numbers.split(' ')\n        for i in range(len(numbers)):\n            numbers[i] = int(numbers[i])\n        numbers.sort()\n        for i in range(len(numbers)):\n            string += str(numbers[i]) +''\n    else:\n        for i in range(len(numbers)):\n            string += str(numbers[i]) +''\n    return string[:-1]\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = []\n    split_num = []\n    for i in numbers:\n        if i =='':\n            result.append(sort_numbers(''.join(split_num)))\n            split_num = []\n            continue\n        split_num.append(i)\n    result.append(sort_numbers(''.join(split_num)))\n    result = sorted(result, key=int)\n    return''.join(result)\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return \" \".join(sorted(numbers))\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # TODO: Create a list from the string.\n    numbers_list = numbers.split()\n    # TODO: Sort the list.\n    numbers_list.sort()\n    # TODO: Return the list\n    return \" \".join(numbers_list)\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    numbers = numbers.replace(' ', '')\n    # Python 3.6+\n    # return numbers.sort()\n    # Python 2.7+\n    return \" \".join(sorted(numbers))\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    numbers_list = numbers.split(' ')\n    numbers_list.sort()\n    sorted_numbers =''.join(numbers_list)\n    return sorted_numbers\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    num_list = []\n    for num in numbers.split():\n        if num in ('zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine'):\n            num_list.append(num)\n        else:\n            print('invalid input')\n    num_list.sort()\n    return''.join(num_list)\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    numbers = numbers.split(' ')\n    numbers = [int(number) for number in numbers]\n    numbers.sort()\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    nums = numbers.split()\n    nums = list(map(int, nums))\n    nums.sort()\n    nums = list(map(str, nums))\n    return''.join(nums)\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return''.join(sorted(numbers.split(), key=lambda x: int(x)))\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # sort the input list and grab the two smallest and largest numbers\n    numbers.sort()\n    smallest = numbers[0]\n    largest = numbers[-1]\n    # find the difference between the largest and the smallest numbers in the list\n    difference = largest - smallest\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    smaller = numbers[0]\n    larger = numbers[0]\n    smaller_index = 0\n    larger_index = 0\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(numbers) <= 2:\n        raise ValueError(\"List must contain at least two items\")\n    d = {}\n    for index in range(len(numbers)):\n        if numbers[index] in d:\n            d[numbers[index]] = index\n        else:\n            d[numbers[index]] = index\n    a = list(d.keys())\n    a.sort()\n    return a[0], a[-1]\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least 2 elements\")\n    # Sort the list\n    numbers.sort()\n    # Get the difference between the values\n    diff = numbers[-1] - numbers[0]\n    # Find the closest element\n    closest_two = []\n    for i, num in enumerate(numbers):\n        # If the difference between the largest and smallest is less than\n        # the difference between the closest two, update the closest_two\n        if abs(diff - (numbers[i] - numbers[i - 1])) < abs(diff - closest_two):\n            closest_two = [num, numbers[i - 1]]\n    return closest_two\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(numbers) < 2:\n        raise ValueError(\"Expected a list of length at least two.\")\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    n1 = numbers[0]\n    n2 = numbers[1]\n    d1 = numbers[2]\n    d2 = numbers[3]\n    d3 = numbers[4]\n    d4 = numbers[5]\n    m1 = min(d1, d2, d3, d4)\n    m2 = min(d1, d2, d3, d4)\n    m3 = min(d1, d2, d3, d4)\n    m4 = min(d1, d2, d3, d4)\n    if d1 == m1:\n        m = m1\n        n = n1\n    elif d2 == m2:\n        m = m2\n        n = n2\n    elif d3 == m3:\n        m = m3\n        n = n3\n    elif d4 == m4:\n        m = m4\n        n = n4\n    elif d1 == m1 and d2 == m2 and d3 == m3 and d4 == m4:\n        return (n1, n2)\n    elif d1 == m1 and d2 == m2 and d3 == m3:\n        return (n1, n2)\n    elif d1 == m1 and d2 == m2:\n        return (n1, n2)\n    elif d1 == m1 and d2 == m3:\n        return (n1, n3)\n    elif d1 == m1 and d4 == m4:\n        return (n1, n4)\n    elif d2 == m2 and d3 == m3 and d4 == m4:\n        return (n2, n3)\n    elif d2 == m2 and d3 == m3:\n        return (n2, n3)\n    elif d2 == m2 and d3 == m4:\n        return (n2, n4)\n    elif d2 == m3 and d4 == m4:\n        return (n2, n4)\n    elif d3 == m3 and d4 == m4:\n        return (n3, n4)\n    return (n1, n2)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # if there are two numbers, then we have 2 elements, so let's go with the smaller of the two.\n    smallest_index = 0\n    for index in range(1, len(numbers)):\n        if numbers[index] < numbers[smallest_index]:\n            smallest_index = index\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    small = numbers[0]\n    small_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] < small:\n            small = numbers[i]\n            small_index = i\n    big = numbers[small_index]\n    big_index = small_index\n    for i in range(small_index + 1, len(numbers)):\n        if numbers[i] > big:\n            big = numbers[i]\n            big_index = i\n    return (small, big)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # We'll sort the list (in place) using the built-in `sorted` function.\n    numbers.sort()\n    # We'll use the built-in function `max` and `min` to return the closest elements.\n    return numbers[0], numbers[-1]\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    numbers.sort()\n    if numbers[0] > numbers[1]:\n        tmp = numbers[0]\n        numbers[0] = numbers[1]\n        numbers[1] = tmp\n    if numbers[len(numbers) - 1] > numbers[len(numbers) - 2]:\n        tmp = numbers[len(numbers) - 1]\n        numbers[len(numbers) - 1] = numbers[len(numbers) - 2]\n        numbers[len(numbers) - 2] = tmp\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] <= numbers[len(numbers) - 1] - numbers[i]:\n            return numbers[i], numbers[i + 1]\n    return numbers[0], numbers[len(numbers) - 1]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    min_val = min(numbers)\n    max_val = max(numbers)\n    offset = max_val\n    scale = 1.0 / (max_val - min_val)\n    return [(n - min_val) * scale + offset for n in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # make list of max / min\n    numbers.sort()\n    min_num = numbers[0]\n    max_num = numbers[-1]\n    # now take the difference and scale it to 1\n    scaled_list = []\n    for i in numbers:\n        scaled_list.append(i - min_num)\n        # to make sure that the first element is 0, it is added to the end of the list\n    # so we can do math on this list\n    scaled_list.append(1.0)\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    max_n = max(numbers)\n    min_n = min(numbers)\n    rescaled_numbers = []\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    min_number = min(numbers)\n    max_number = max(numbers)\n    if min_number!= max_number:\n        for i in range(len(numbers)):\n            numbers[i] = (numbers[i] - min_number) / (max_number - min_number)\n    return numbers\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return [(value - min(numbers)) / (max(numbers) - min(numbers)) for value in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # calculate range\n    ranges = []\n    for i in range(len(numbers)):\n        ranges.append(numbers[i] - min(numbers))\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return [x - min(numbers) / (max(numbers) - min(numbers)) for x in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return [(x - min(numbers)) / (max(numbers) - min(numbers)) for x in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    min_n = min(numbers)\n    max_n = max(numbers)\n    diff = max_n - min_n\n    new_numbers = []\n    for num in numbers:\n        new_numbers.append((num - min_n) / diff)\n    return new_numbers\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    max = max(numbers)\n    min = min(numbers)\n    delta = max - min\n    if delta == 0:\n        raise ValueError(\"Two or more numbers are the same\")\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # your code here\n    # return []\n    return [int(x) for x in values if type(x) == int]\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = []\n    for i in values:\n        if isinstance(i, int):\n            result.append(i)\n    return result\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # return list(filter(is_integer, values))\n    return [int(i) for i in values if isinstance(i, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    integers = []\n    for value in values:\n        try:\n            _ = int(value)\n            integers.append(value)\n        except:\n            pass\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    filtered = []\n    for item in values:\n        try:\n            value = int(item)\n            filtered.append(value)\n        except ValueError:\n            pass\n    return filtered\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = []\n    for val in values:\n        if isinstance(val, int):\n            result.append(val)\n    return result\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    values = [int(value) for value in values if isinstance(value, int)]\n    return values\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return filter(lambda x: isinstance(x, int), values)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return len(string)\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # largest_divisor(n) = n\n    if n <= 1:\n        return n\n    else:\n        return largest_divisor(n // n)\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    def divisor(n):\n        for i in range(2, int(n/2) + 1):\n            if n % i == 0:\n                return i\n        return n\n    return divisor(n)\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    divisor = 1\n    while n % divisor!= 0:\n        divisor += 1\n    return divisor\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 1:\n        return 1\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n    return n\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    divisor = n//2\n    while n % divisor!= 0:\n        divisor -= 1\n    return divisor\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n <= 1:\n        return n\n    for i in range(2,n+1):\n        if n % i == 0:\n            return i\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    d = 1\n    while d <= n:\n        if n % d == 0:\n            return d\n        d += 1\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    #if n == 1:\n        #return 1\n    #for i in range(2,n+1):\n        #if n % i == 0:\n            #return i\n    if n % 2 == 0:\n        return 2\n    divisor = 1\n    while n % divisor == 0:\n        if n % divisor!= 0:\n            divisor += 2\n        else:\n            return divisor\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    i = 1\n    while i*i < n:\n        i += 1\n    return i\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    d = 1\n    while n % d!= 0:\n        d += 1\n    return d\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 1:\n        return []\n    if n % 2 == 0:\n        return factorize(n / 2) + factorize(n / 2)\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    factor = []\n    while n > 1:\n        divider = 2\n        while n % divider!= 0:\n            divider += 1\n        n /= divider\n        factor.append(divider)\n    return factor\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    #TODO: Write your code here\n    primes = []\n    while n % 2 == 0:\n        primes.append(2)\n        n = n // 2\n    for i in range(3, int(n **.5) + 1, 2):\n        while n % i == 0:\n            primes.append(i)\n            n = n // i\n    if n > 2:\n        primes.append(n)\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    factor_list = []\n    while n % 2 == 0:\n        factor_list.append(2)\n        n = n // 2\n    for i in range(3, n + 1, 2):\n        while n % i == 0:\n            factor_list.append(i)\n            n = n // i\n    return factor_list\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n < 2:\n        return None\n    if n == 2:\n        return [1, 2]\n    result = []\n    if n % 2 == 0:\n        result.append(2)\n        n //= 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            result.append(i)\n            n //= i\n    if n > 2:\n        result.append(n)\n    return result\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 1:\n        return []\n    num = n\n    i = 2\n    while num % i!= 0:\n        i += 1\n    factor = []\n    while num > 1:\n        factor.append(i)\n        num //= i\n    return factor\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    result = []\n    while n % 2 == 0:\n        result.append(2)\n        n //= 2\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            result.append(i)\n            n //= i\n    if n > 2:\n        result.append(n)\n    return result\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    factors = []\n    i = 2\n    while i ** 2 <= n:\n        if n % i == 0:\n            factors.append(i)\n            n = n // i\n        else:\n            i += 1\n    factors.append(n)\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n <= 1:\n        return []\n    if n == 2:\n        return [n]\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # first make a list of factors of n\n    factors = []\n    for i in range(1, int(n**0.5)+1):\n        if n%i==0:\n            factors.append(i)\n            factors.append(n//i)\n    # remove duplicates\n    factors = list(dict.fromkeys(factors))\n    return factors\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Your code here\n    # We are going to iterate through each element in the list,\n    # and add it to a set if it has not already been seen.\n    # The set will be empty if all items were seen.\n    # The elements we want to return will be those\n    # in the set.\n    seen_set = set()\n    numbers_copy = numbers[:]\n    for i in range(len(numbers)):\n        if numbers[i] in seen_set:\n            numbers_copy.remove(numbers[i])\n        else:\n            seen_set.add(numbers[i])\n    return numbers_copy\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    seen = set()\n    seen_add = seen.add\n    return [x for x in numbers if not (x in seen or seen_add(x))]\n    # You can use set() to get a set, which is more efficient.\n    # set(numbers)\n    # This is also a good idea if you have to convert it to a set.\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return list(set(numbers))\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    unique_numbers = []\n    for num in numbers:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    return unique_numbers\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    s = set(numbers)\n    return list(s)\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    seen = set()\n    output = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            output.append(num)\n    return output\n    \n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Your code here\n    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    seen = set()\n    res = []\n    for n in numbers:\n        if n not in seen:\n            seen.add(n)\n            res.append(n)\n    return res\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    print(\"Before:\", numbers)\n    output = []\n    for item in numbers:\n        if item not in output:\n            output.append(item)\n    print(\"After:\", output)\n    return output\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return ''.join(c.upper() if c.islower() else c.lower() for c in string)\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    new_string = ''\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    lower_str = string.lower()\n    upper_str = lower_str[::-1].upper()\n    return upper_str\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return string.upper() if string.islower() else string.lower()\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(strings) == 0:\n        return ''\n    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(strings) == 0:\n        return ''\n    return strings[0] + concatenate(strings[1:])\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = ''\n    for s in strings:\n        result += s\n    return result\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    result = \"\"\n    for string in strings:\n        result += string\n    return result\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result = ''\n    for string in strings:\n        result += string\n    return result\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return list(filter(lambda s: s.startswith(prefix), strings))\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    filtered_list = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_list.append(string)\n    return filtered_list\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    filtered = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered.append(string)\n    return filtered\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result = []\n    for string in strings:\n        if string.startswith(prefix):\n            result.append(string)\n    return result\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return list(filter(lambda s: s.startswith(prefix), strings))\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    filtered = list(filter(lambda s: s.startswith(prefix), strings))\n    return filtered\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return list(filter(lambda s: s.startswith(prefix), strings))\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return list(filter(lambda x: x[:len(prefix)] == prefix, strings))\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return [i for i in l if i >= 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return list(filter(lambda x: x > 0, l))\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return [i for i in l if i > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return list(filter(lambda x: x > 0, l))\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Convert the list into a set, so that you only have unique numbers\n    set_l = set(l)\n    # Put in a lambda function to filter out the negative numbers\n    return list(set_l)\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return list(filter(lambda x: x > 0, l))\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = []\n    for i in l:\n        if i > 0:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return list(filter(lambda x: x > 0, l))\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return [i for i in l if i >= 0]\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5 + 1), 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n == 0 or n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # base case\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    # recursive case\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\n    \ndef main():\n    # read numbers\n    n = int(input())\n    primes = []\n    for i in range(n):\n        if is_prime(int(input())):\n            primes.append(int(input()))\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    assert n > 0, 'n must be a positive integer.'\n    \n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    \n    return True if i * i!= n else False\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n == 1:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n % 2 == 0:\n        return False\n    for i in range(3, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n % 2 == 0 or n < 2:\n        return False\n    for i in range(3, int(math.sqrt(n) + 1), 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    assert len(xs) > 1\n    if len(xs) == 2:\n        return xs[0] / xs[1]\n    if xs[0] == 0:\n        return 0\n    if xs[1] == 0:\n        return 1\n    if xs[0] == 1 and xs[1] == -1:\n        return 1 / (-1)\n    if xs[0] == 1 and xs[1] == 1:\n        return -1 / 2\n    if xs[0] == -1 and xs[1] == 1:\n        return -1 / 2\n    if xs[0] == -1 and xs[1] == -1:\n        return -1 / 4\n    if xs[1] == 1:\n        return -xs[0] / (2 * xs[0])\n    if xs[0] == 1:\n        return (xs[1] - 1) / (xs[1] * xs[1])\n    if xs[1] == 1 and xs[2] == 0:\n        return (xs[0] - 1) / (2 * xs[0])\n    if xs[1] == 1 and xs[2] == 1:\n        return (xs[0] + xs[2] - 1) / (2 * xs[0])\n    if xs[1] == 1 and xs[2] == -1:\n        return (xs[0] + xs[2] + 1) / (2 * xs[0])\n    if xs[1] == -1 and xs[2] == 1:\n        return (xs[0] + xs[2] - 1) / (2 * xs[0])\n    if xs[1] == -1 and xs[2] == -1:\n        return (xs[0] + xs[2] + 1) / (2 * xs[0])\n    if xs[0] == 1 and xs[2] == 0:\n        return (xs[1] - 1) / (2 * xs[1])\n    if xs[0] == 1 and xs[2] == 1:\n        return (xs[1] - 1) / (2 * xs[1])\n    if xs[0] == 1 and xs[2] == -1:\n        return (xs[1] + xs[2] + 1) / (2 * xs[1])\n    if xs[0] == -1 and xs[2] == 1:\n        return (xs[1] + xs[2] - 1) / (2 * xs[1])\n    if xs[0] == -1 and xs[2] == -1:\n        return (xs[1] + xs[2] + 1) / (2 * xs[1])\n    if xs[0] == 1 and xs[1] == 1:\n        return (xs[2] - 1) / (xs[2] * xs[2])\n    if xs[0] == -1 and xs[1] == 1:\n        return (xs[2] + 1) / (xs[2] * xs[2])\n    if xs[0] == 1 and xs[1] == -1:\n        return (xs[2] - 1) / (xs[2] * xs[2])\n    if xs[0] == -1 and xs[1] == -1:\n        return (xs[2] + 1) / (xs[2] * xs[2])\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    assert len(xs) % 2 == 0, 'xs must have even number of coefficients!'\n    assert len(xs) > 1, 'xs must have at least 2 coefficients!'\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for x in range(0, len(xs)):\n        if xs[x]!= 0:\n            break\n    return x\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for i in range(len(xs)):\n        if xs[i]!= 0:\n            return i / xs[i]\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Take all odd coefficients in list and create a new list\n    xs = [coeff for i, coeff in enumerate(xs) if i % 2 == 1]\n    x0 = 0.5\n    # Find a solution for x0\n    while True:\n        x0 = (sum(xs) + poly(xs, x0)) / (1 + sum(xs))\n        if abs(x0) < 1e-7:\n            return x0\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for x in range(1, len(xs)):\n        if xs[x]!= 0:\n            return x - 1 if x % 2 == 0 else x - 2\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(1, len(xs) + 1):\n        if (xs[0] * i)!= 0:\n            return xs[0] / i\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    xs = xs[::-1]\n    i = 0\n    while i < len(xs):\n        if xs[i] == 0:\n            i += 1\n            continue\n        # x = ((xs[i] - xs[i-1]) / (xs[i-1] - xs[i]))\n        x = (xs[i + 1] - xs[i]) / (xs[i + 1] - xs[i - 1])\n        print(f\"x={x}, xs={xs}\")\n        return x\n        i += 2\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    n = len(xs)\n    # A[i] = A[i - 1] x x - A[i - 2] x + A[i - 3]\n    A = [[0] * (n - 1) for _ in range(n - 1)]\n    for i in range(1, n):\n        A[i - 1][i] = xs[i - 1]\n        A[i - 1][i - 1] = xs[i]\n        A[i - 1][i - 2] = xs[i]\n    # B[i] = B[i - 1] x x - B[i - 2] x + B[i - 3]\n    B = [0] * (n - 1)\n    B[0] = 1\n    for i in range(1, n):\n        B[i] = xs[i - 1]\n        B[i - 1] = xs[i]\n    # C[i] = C[i - 1] x x - C[i - 2] x + C[i - 3]\n    C = [0] * (n - 1)\n    C[0] = 1\n    for i in range(1, n):\n        C[i] = xs[i - 1]\n    # find x\n    delta = 0\n    for i in range(n - 1):\n        delta += - A[i][i] * C[i] + A[i][i + 1] * B[i]\n    return - delta / A[n - 2][n - 2]\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    xs = list(xs)\n    xs.sort()\n    zero_points = []\n    for i, coeff in enumerate(xs):\n        if coeff!= 0:\n            break\n        zero_points.append(i)\n    return zero_points[-1]\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    l2 = l.copy()\n    while True:\n        i = 0\n        while i < len(l2) - 1:\n            if l2[i] % 3!= 0:\n                i += 1\n            else:\n                j = i + 1\n                while j < len(l2):\n                    if l2[i] == l2[j] and j < len(l2) - 1:\n                        l2.pop(j)\n                        j -= 1\n                    else:\n                        break\n                i += 1\n        if i == len(l):\n            return l\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    l1 = []\n    for i in range(len(l)):\n        if (i%3) == 0:\n            l1.append(l[i])\n    l1.sort()\n    for i in range(len(l1)):\n        if (i%3)!= 0:\n            l.append(l1[i])\n    return l\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    l_copy = l.copy()\n    for i in range(len(l)):\n        if i % 3!= 0:\n            l_copy[i] = l[i]\n    l_copy.sort()\n    return l_copy\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    l_sorted = []\n    i = 0\n    for element in l:\n        if i%3!= 0:\n            l_sorted.append(element)\n        else:\n            l_sorted.append(element)\n            l_sorted.sort()\n        i += 1\n    return l_sorted\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    l2 = l[:]\n    l2.sort()\n    l3 = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l3.append(l2[i])\n        else:\n            l3.append(l[i])\n    return l3\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # do not change this code\n    l_copy = copy.deepcopy(l)\n    l_copy.sort()\n    l_copy.sort(key=lambda x: x%3)\n    return l_copy\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sorted([elem for i, elem in enumerate(l) if not i % 3], key=lambda x: x)\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    l_copy = l[:]\n    l_copy.sort()\n    for i in range(len(l_copy)):\n        if i % 3 == 0:\n            continue\n        else:\n            l[i] = l_copy[i]\n    return l\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    index_of_3 = [i for i in range(len(l)) if l[i] % 3 == 0]\n    for i in index_of_3:\n        l[i], l[l.index(l[i])] = l[l.index(l[i])], l[i]\n    return l\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    l_copy = l[:]\n    l_copy.sort()\n    i = 0\n    j = 0\n    while i < len(l):\n        if j == len(l_copy):\n            break\n        if l[i] % 3 == 0:\n            if l_copy[j]!= l[i]:\n                l_copy.append(l[i])\n                j += 1\n        i += 1\n    return l_copy\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(list(set(l)))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sorted(list(set(l)))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sorted(list(set(l)))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sorted(list(set(l)))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Cannot use set in python, because cannot iterate\n    # So create a new list, and remove duplicates\n    unique_list = []\n    for element in l:\n        if element not in unique_list:\n            unique_list.append(element)\n    return unique_list\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted(list(set(l)))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return list(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    l = list(set(l))\n    l.sort()\n    return l\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    s = set(l)\n    return sorted(s)\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(list(set(l)))\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    max_ = l[0]\n    for i in l:\n        if i > max_:\n            max_ = i\n    return max_\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    max_so_far = l[0]\n    max_index = 0\n    for i in range(1, len(l)):\n        if l[i] > max_so_far:\n            max_so_far = l[i]\n            max_index = i\n    return max_so_far\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(l) == 0:\n        return None\n    max = l[0]\n    for i in l:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    max = l[0]\n    for i in l:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return max(l)\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    counter = 0\n    for i in range(1, n + 1):\n        if i % 7 == 0:\n            counter += 1\n            if i % 11 == 0:\n                counter += 1\n                if i % 13 == 0:\n                    counter += 1\n    return counter\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    n = float(n)\n    if n % 11 == 7 or n % 13 == 7:\n        return 1 + fizz_buzz(n + 1)\n    else:\n        return fizz_buzz(n + 1)\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(1, n + 1):\n        if i % 7 == 0:\n            count += 1\n        elif i % 13 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = 0\n    for i in range(1, n+1):\n        if i % 11 == 7 or i % 13 == 7:\n            result += 1\n    return result\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 7:\n            count += 1\n            if i % 13 == 7:\n                count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 7 or i % 13 == 7:\n            count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(1,n):\n        if (i % 11) == 7 or (i % 13) == 7:\n            count += 1\n    return count"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert n >= 1, \"You must enter a positive integer\"\n    fizz_counter = 0\n    buzz_counter = 0\n    for i in range(1, n + 1):\n        if i % 3 == 0:\n            fizz_counter += 1\n        if i % 5 == 0:\n            buzz_counter += 1\n    return fizz_counter + buzz_counter\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    x = 0\n    for i in range(1,n):\n        if (i % 11 == 7) or (i % 13 == 7):\n            x += 1\n    return x\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result = 0\n    for i in range(n+1):\n        if i % 11 == 0 or i % 13 == 0:\n            result += 1\n        if i % 7 == 0:\n            result += 1\n    return result\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    evens = []\n    odds = []\n    for i in l:\n        if i % 2 == 0:\n            evens.append(i)\n        else:\n            odds.append(i)\n    odds.sort()\n    for i in range(0, len(evens)):\n        l[i] = evens[i]\n        l[i + len(evens)] = odds[i]\n    return l\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sorted(l, key=lambda x: x%2)\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sorted(l, key=lambda i: i % 2 == 0)\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    even = []\n    odd = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even.append(l[i])\n        else:\n            odd.append(l[i])\n    even.sort()\n    odd.sort()\n    final = even + odd\n    return final\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    l2 = l[:]\n    for i in range(len(l2)):\n        if i % 2 == 0:\n            l2.append(l2.pop(i))\n    return l2\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return l\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Your code goes here\n    for i in range(len(l)):\n        if i % 2 == 1:\n            if l[i] % 2 == 0:\n                l[i], l[i-1] = l[i-1], l[i]\n    return l\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    evens = []\n    odds = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            evens.append(l[i])\n        else:\n            odds.append(l[i])\n    return evens + odds\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    l2 = []\n    for i in range(0, len(l), 2):\n        l2.append(l[i])\n    l2.extend(l[1::2])\n    return l2\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    even_indices = []\n    odd_indices = []\n    \n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_indices.append(l[i])\n        else:\n            odd_indices.append(l[i])\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return \"\".join([s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)])\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    groups = s.split(\"\")\n    # cycle each group.\n    return \"\".join([group[1] + group[0] for group in groups])\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # cycle groups.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # join all groups\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # split encoded string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(s) % 3!= 0:\n        raise ValueError(\"string length should be a multiple of 3\")\n    return s[:len(s) - 2] + s[len(s) - 2] + s[len(s) - 1]\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # unpack cyclic string into groups of 3.\n    groups = list(s)\n    groups = groups[:len(groups) - len(groups) % 3]\n    groups = groups[1:]\n    groups = [groups[i:min(i + 3, len(groups))] for i in range(0, len(groups), 3)]\n    # cycle groups.\n    return \"\".join(groups)"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # if prime numbers are from 3 to the n-th number, the first n-1 number is 3, 4, 5\n    # if a number is not a prime number, its factorization is a set of its prime factorization\n    # the first prime factor is 2\n    if n == 1:\n        return 2\n    fib_numbers = fibonacci(n-1)\n    prime_numbers = []\n    for fib_number in fib_numbers:\n        if is_prime(fib_number):\n            prime_numbers.append(fib_number)\n    return prime_numbers[-1]\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n <= 1:\n        return n\n    fib = fibonacci(n-1) + fibonacci(n-2)\n    while True:\n        for i in range(2, fib):\n            if fib%i == 0:\n                break\n        else:\n            return fib\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    a, b = 1, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a % 10\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    a, b = 1, 2\n    if n == 1:\n        return a\n    for _ in range(n-1):\n        a, b = b, a+b\n    return a\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod("
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    nth = fib(n)\n    if is_prime(nth):\n        return nth\n    else:\n        return None\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 0 or n == 1:\n        return 1\n    else:\n        if n > 2 and n % 2 == 0:\n            return 3 + prime_fib(n-1)\n        return prime_fib(n-1)\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    F = 2\n    while True:\n        if is_prime(F):\n            if F == n:\n                return F\n            return F - 1\n        F += 1\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    # Since we have fibonacci numbers in {0,1,1,2,3,5,8,13}\n    # The numbers that are not fibonacci numbers are 1,3,5,7,11\n    # So they are also not prime numbers\n    # Hence we will check for all these numbers\n    if n <= 1:\n        return False\n    # As we know n-th fibonacci number is (n-1)th fibonacci number + (n-2)th fibonacci number.\n    # Therefore, we need to check for all the values in {2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,506,508,510,512,514,516,518,520,522,524,526,528,530,532,534,536,538,540,542,544,546,548,550,552,554,556,558,560,562,564,566,568,570,572,574,576,578,580,582,584,586,588,590,592,594,596,598,600,602,604,606,608,610,612,614,616,618,620,622,624,626,628,630,632,634,636,638,640,642,644,646,648,650,652,654,656,658,660,662,664,666,668,670,672,674,676,678,680,682,684,686,688,690,692,694,696,698,700,702,704,706,708,710,712,714,716,718,720,722,724,726,728,730,732,734,736,738,740,742,744,746,748,750,752,754,756,758,760,762,764,766,768,770,772,774,776,778,780,782,784,786,788,790,792,794,796,798,800,802,804,806,808,810,812,814,816,818,820,822,824,826,828,830,832,834,836,838,840,842,844,846,848,85"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i]+l[j]+l[k] == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # set the number of items in the list\n    # set an empty list for the results\n    # set a dictionary for the counts of each item\n    # set a dictionary for the item count in the dictionary\n    # iterate over the items in the list\n    # if the current item is not in the dictionary\n    # add it to the dictionary\n    # else\n    # iterate over the keys of the dictionary\n    # if the current item is not already in the list\n    # add it to the list\n    # else\n    # return True\n    # else\n    # return False\n    \n    # initialize the dictionary\n    dict_counts = {}\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Your code here\n    l.sort()\n    for i in range(len(l) - 2):\n        if sum(l[i:i+3]) == 0:\n            return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for i in range(len(l) - 2):\n        if l[i] + l[i + 1] + l[i + 2] == 0:\n            return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    nums = []\n    for i in l:\n        if i not in nums:\n            nums.append(i)\n        else:\n            nums.remove(i)\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(l) < 3:\n        return False\n    l.sort()\n    for i in range(len(l)-2):\n        if l[i]+l[i+1]+l[i+2] == 0:\n            return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert len(l) > 0, 'Input must not be an empty list!'\n    d = {}\n    for num in l:\n        if num in d:\n            d[num] += 1\n        else:\n            d[num] = 1\n    for key in d:\n        if key!= 0 and d[key] == 3:\n            return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    d = {}\n    for x in l:\n        d[x] = True\n    for x in l:\n        if x not in d:\n            return False\n        d[x] = False\n    return True\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # The first item in a list is the min number\n    # of the items to be summed in the list.\n    # so let us use it as a min value\n    min_number = l[0]\n    # Set a current sum to zero\n    current_sum = 0\n    # Check for valid list\n    if len(l) < 3:\n        return False\n    # Set a result to False\n    result = False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # TODO\n    #\n    #\n    #\n    #\n    \n    # Empty list\n    if len(l) == 0:\n        return False\n    \n    # check each element in l\n    for i in range(len(l)):\n        # remove item at index i from l\n        del_l = l[:i] + l[i+1:]\n        # do we have another item with value 0?\n        if del_l[0] == 0:\n            # return True\n            return True\n        # if we're here, we do not have an item with value 0\n        # return False\n        return False\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Your code here\n    return (n//2)\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    solution_tries = []\n    for i in range(n + 1):\n        solution_tries.append(car_race_collision_helper(i, 0, 1, 1))\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n == 1:\n        return 0\n    return car_race_collision(n-1) + car_race_collision(n-2)\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    cars_at_max_speed = n  # Number of cars at maximum speed\n    cars_in_collision = 0  # Number of cars that are in collision at maximum speed\n    speed_in_travel = 0  # Speed of cars in travel\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert n >= 2, \"cannot have only one car in the race!\"\n    \n    cars_left_to_right = 0\n    cars_right_to_left = 0\n    \n    for i in range(n):\n        # 'cars' is a dictionary with keys as indexes, and values as the length of\n        # the car at that index\n        cars = {}\n        for i in range(n):\n            cars[i] = 1\n        \n        # In each step, we can add any number of cars to either the left- or right-hand side\n        # and reset the length of the car to 1 if it goes out of the line\n        while len(cars)!= 0:\n            # get the left-most car in the left-hand side\n            left_car = min(cars, key=cars.get)\n            del cars[left_car]\n            # add this car to the right-hand side\n            cars_right_to_left += 1\n            cars[n-1] = 1\n            \n            # get the right-most car in the right-hand side\n            right_car = max(cars, key=cars.get)\n            del cars[right_car]\n            # add this car to the left-hand side\n            cars_left_to_right += 1\n            cars[left_car] = cars.get(left_car) + 1\n        \n    return cars_left_to_right + cars_right_to_left\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    total_collisions = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if car_collision(i, j):\n                total_collisions += 1\n    return total_collisions\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Map the cars to a hash table\n    cars = {}\n    for i in range(n):\n        cars[(1, i)] = (i+1, i+2, i+3)\n        cars[(2, i)] = (i+1, i+2, i+3)\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Test case 1\n    car_1_x, car_1_y = 2, 1\n    car_2_x, car_2_y = -3, 1\n    return car_race_check(n, car_1_x, car_1_y, car_2_x, car_2_y)\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # The number of cars that are already in the left side.\n    left_side = 0\n    # The number of cars that are already in the right side.\n    right_side = 0\n    # The number of collisions that have occurred.\n    count = 0\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    assert n >= 1\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    new_list = []\n    for i in l:\n        new_list.append(i + 1)\n    return new_list\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [i+1 for i in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return map(lambda x: x + 1, l)\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = l.copy()\n    for i in range(len(l) - 1):\n        result[i + 1] = result[i] + 1\n    return result\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    new_list = []\n    for index in range(len(l)):\n        if index == len(l) - 1:\n            new_list.append(l[index] + 1)\n        else:\n            new_list.append(l[index] + 1)\n    return new_list\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(len(l) - 1, -1, -1):\n        l[i] += 1\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return [i + 1 for i in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    new_list = []\n    for i in l:\n        new_list.append(i + 1)\n    return new_list\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    n = len(l)\n    i = 0\n    while i < n:\n        l[i] += 1\n        i += 1\n    return l\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return l[0] == 0\n    if len(l) == 2:\n        if l[0] + l[1] == 0:\n            return True\n        else:\n            return False\n    for i in range(0, len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    pairs = []\n    for i in range(0, len(l)-1):\n        if l[i] + l[i+1] == 0:\n            pairs.append((l[i], l[i+1]))\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    dict1={}\n    for i in l:\n        dict1[i] = 0\n    for i in l:\n        if dict1.get(i) == 0:\n            dict1[i] = 1\n        else:\n            dict1[i] = 0\n    for i in l:\n        if dict1.get(i) == 1:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    count = 0\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if (l[i] + l[j]) == 0:\n                count += 1\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    #initializing the variables\n    n=len(l)\n    #finding the length of the list\n    sum1=0\n    sum2=0\n    for i in range(n):\n        #finding the summation of two elements from the list\n        sum1=sum1+l[i]\n        if i==n-1:\n            break\n        sum2=sum2+l[i+1]\n    if sum1==0 and sum2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Your code here\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i]+l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    s = set()\n    for x in l:\n        if -1*x in s:\n            return True\n        else:\n            s.add(x)\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in range(len(l)):\n        for j in range(i,len(l)):\n            if l[i]+l[j]==0:\n                return True\n    return False\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    a = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    b = a.index(a[x]) + 1\n    return str(b)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    base_string = \"\"\n    while x!= 0:\n        x, digit = divmod(x, base)\n        base_string = str(digit) + base_string\n    return base_string\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    if base < 10:\n        return ''\n    else:\n        if x < base:\n            return change_base(x, base) + str(x)\n        else:\n            return str(x // base) + change_base(x % base, base)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    out = \"\"\n    while x > 0:\n        out = str(x % base) + out\n        x = x // base\n    return out\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if x < 10:\n        return str(x)\n    else:\n        n = x // base\n        m = x % base\n        return str(change_base(n, base)) + str(m)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if x >= 10 and x <= 9:\n        return str(x)\n    else:\n        return change_base(x//base, base) + str(x % base)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    string = \"\"\n    while x > 0:\n        string += base_dict[x % base]\n        x //= base\n    return string[::-1]\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not x:\n        return str(x)\n    def base_to_num(i):\n        return int(i/base)\n    def num_to_base(i):\n        return str(i%base)\n    return num_to_base(base_to_num(x))\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if base >= 10:\n        raise ValueError(\"base needs to be less than 10\")\n    if x < 0:\n        raise ValueError(\"can't change base from negative numbers\")\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return str(x).zfill(len(str(base)))\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    area = 0.5 * a * h\n    return area\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return (a * h) / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return a*h/2\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return 0.5 * a * h\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return a*h/2\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return (a*h)/2\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    area = (a * h) / 2\n    return area\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    area = (a * h * 0.5)\n    return area\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    area = 0.5 * a * h\n    return area\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if a < 0 or h < 0:\n        raise ValueError\n    else:\n        return (a * h) / 2\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n < 4:\n        return 0\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n < 3:\n        return 1\n    fib4_n_1, fib4_n_2, fib4_n_3 = 1, 2, 3\n    for i in range(3, n+1):\n        fib4_n_3 = fib4_n_2 + fib4_n_1 + fib4_n_3\n        fib4_n_2 = fib4_n_1\n        fib4_n_1 = fib4_n_3\n    return fib4_n_3\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    a = 0\n    b = 1\n    for i in range(n-1):\n        c = a + b\n        a = b\n        b = c\n    return b\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    def fib2(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fib2(n - 1) + fib2(n - 2)\n    \n    return fib2(n)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    a, b, _, _ = 0, 1, 0, 0\n    while n > 0:\n        _, b = a, a+b\n        a, b, n = b, a+b, n-1\n    return a\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    l = sorted(l)\n    length = len(l)\n    if length % 2:\n        return l[length // 2]\n    else:\n        return (l[length // 2 - 1] + l[length // 2]) / 2\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    l.sort()\n    l = len(l)\n    if l % 2:\n        return l[l // 2]\n    else:\n        return (l // 2 - 0.5) + l // 2\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    sorted_list = sorted(l)\n    if len(sorted_list) % 2 == 0:\n        median = (sorted_list[int(len(sorted_list) / 2)] + sorted_list[int(len(sorted_list) / 2 - 1)]) / 2\n    else:\n        median = sorted_list[int(len(sorted_list) / 2)]\n    return median\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    n = len(l)\n    if n == 0:\n        raise ValueError\n    if n == 1:\n        return l[0]\n    if n == 2:\n        return l[0] if l[0] < l[1] else l[1]\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    l = sorted(l)\n    if len(l) % 2:\n        return l[(len(l)-1)//2]\n    else:\n        return (l[(len(l)-1)//2] + l[(len(l)-2)//2])/2\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted(l)[len(l) // 2]\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sorted(l)[(len(l) - 1) // 2]\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(l) % 2 == 0:\n        return float(sum(l[(len(l) // 2) - 1 : len(l) // 2 + 1]) / 2)\n    else:\n        return float(sorted(l)[len(l) // 2])\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not l:\n        return None\n    l.sort()\n    n = len(l)\n    if n % 2:\n        return l[n // 2]\n    return (l[n // 2 - 1] + l[n // 2]) / 2\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(l) == 0:\n        return None\n    l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[(len(l) // 2) - 1]) / 2\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    text = text.lower()\n    text = re.sub('[^a-z ]', '', text)\n    return text == text[::-1]\n    \nprint(is_palindrome(''))\nprint(is_palindrome('aba'))\nprint(is_palindrome('aaaaa'))\nprint(is_palindrome('zbcd')"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(text) == 0:\n        return True\n    if len(text) == 1:\n        return True\n    if len(text) == 2:\n        return text[0] == text[1]\n    if len(text) == 3:\n        return text[0] == text[2] and text[1] == text[2]\n    return text[0] == text[-1] and is_palindrome(text[1:-1])\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(text) < 2:\n        return True\n    return text[0] == text[-1] and is_palindrome(text[1:-1])\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Remove non-letters from string\n    text = text.replace(' ', '').lower()\n    \n    # Check if reversed string is same as original\n    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # O(n) space\n    text_list = list(text)\n    text_list.reverse()\n    return text == ''.join(text_list)\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # palindrome if first half matches last half\n    # if first half == last half\n    if len(text) <= 1:\n        return True\n    else:\n        first = text[:len(text)//2]\n        last = text[len(text)//2:]\n        return first == last[::-1]\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n < 0:\n        return (p - 1) % p\n    return (n % p) + p\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    m = 1\n    while n:\n        n, m = (n - 1) % p, m * 2\n    return m\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n == 0:\n        return 1\n    elif n > 0:\n        return pow(p, n - 1, p)\n    else:\n        return (pow(p, -1, p) * pow(p, -1, n)) % p\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 0 and p == 1:\n        return 1\n    return n % p\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return pow(2, n, p)\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return encode_shift(s)[::-1]\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + 26 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    new = []\n    for x in text:\n        if x not in vowels:\n            new.append(x)\n    return ''.join(new)\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(text) == 0:\n        return ''\n    new_text = ''\n    for i in range(len(text)):\n        if text[i] not in ['a', 'e', 'i', 'o', 'u']:\n            new_text += text[i]\n    return new_text\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    vowels = 'aeiouAEIOU'\n    for letter in text:\n        if letter in vowels:\n            text = text.replace(letter, \"\")\n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for vowel in 'aeiou':\n        text = text.replace(vowel, '')\n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    out = ''\n    for letter in text:\n        if letter not in vowels:\n            out += letter\n    return out\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return \"\".join(filter(lambda x: x not in 'aeiou', text))\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    return text.translate(string.maketrans('aeiouAEIOU', 'bcdfGHJKLMNOPQRSTUVWXYZ'))\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    vowels = ('a', 'e', 'i', 'o', 'u')\n    return \"\".join([letter for letter in text if letter.lower() not in vowels])"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # your code here\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    new_text = ''\n    for char in text:\n        if char not in vowels:\n            new_text += char\n    return new_text\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    new_text = ''\n    for ch in text:\n        if not ch.lower() in \"aeiou\":\n            new_text += ch\n    return new_text\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for x in l:\n        if x < t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for num in l:\n        if num < t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for num in l:\n        if num > t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for e in l:\n        if e > t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for num in l:\n        if num > t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in l:\n        if i <= t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    for x in l:\n        if x > t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for num in l:\n        if num > t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for x in l:\n        if x < t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return all([x < t for x in l])\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return x + y\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    s0 = list(s0)\n    s1 = list(s1)\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return set(s0) == set(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sorted(s0) == sorted(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Do not delete this line.\n    assert s0!= s1\n    if len(s0) == len(s1):\n        return all([s0[i] == s1[i] for i in range(len(s0))])\n    else:\n        return False\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return all(s0.count(i) == s1.count(i) for i in set(s0))\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted(s0) == sorted(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return set(s0) == set(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return len(set(s0) - set(s1)) == 0\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    s0 = s0.lower()\n    s1 = s1.lower()\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return len(s0) == len(s1) and len(set(s0)) == len(set(s1))\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n < 2:\n        return n\n    return fib(n - 2) + fib(n - 1)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n < 0:\n        raise ValueError('n must be >= 0')\n    if n in (0, 1):\n        return 1\n    return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert n >= 0\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n < 0:\n        raise ValueError('Fibonacci number is not defined for negative values')\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert n >= 0, \"Fibonacci number is defined only for positive values\"\n    if n in (0,1):\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert n > 0, 'n must be > 0'\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n    \ndef fib_iter(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_iter(10)\n    55\n    >>> fib_iter(1)\n    1\n    >>> fib_iter(8)\n    21\n    \"\"\"\n    previous = 0\n    current  = 1\n    i = 0\n    \n    while i < n:\n        previous, current = current, previous + current\n        i += 1\n    \n    return current\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    assert n >= 0, \"n must be non-negative\"\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    assert n > 0\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    brackets = '<' + brackets + '>'\n    return brackets == brackets[::-1]\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    assert len(brackets) > 0\n    assert brackets[0] == \"<\"\n    assert brackets[-1] == \">\"\n    if len(brackets) == 1:\n        return True\n    if brackets[0]!= \"<\":\n        return False\n    count = 0\n    for b in brackets:\n        if b == \"<\":\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        elif bracket == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    brackets = brackets[1:-1]\n    for bracket in brackets:\n        if bracket not in \"<>\":\n            return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Brackets must be nested.\n    brackets = list(brackets)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert isinstance(brackets, str), f\"brackets is not a string: {brackets}\"\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Brackets must be balanced!\n    # Remove all \">\"s that do not come immediately after a \"<\".\n    # Remove all \"<\"s that do not come immediately after a \">\".\n    # For example, \"<>\" is invalid but \"<\"<>\" is valid.\n    # We'll also need to make sure there is a \"<\" before the first \"<\".\n    open_brackets = []\n    bracket_stack = []\n    valid = True\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    stack = []\n    for c in brackets:\n        if c == \"<\":\n            stack.append(\">\")\n        elif c == \">\":\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    assert brackets, 'brackets must not be empty.'\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    #brackets = list(brackets)\n    #assert len(brackets) == len(set(brackets))\n    #return all(brackets[i] == brackets[-1] for i in range(1, len(brackets)-1))\n    \n    opening_bracket_indices = list()\n    for i,c in enumerate(brackets):\n        if c == '(':\n            opening_bracket_indices.append(i)\n    if len(opening_bracket_indices) == 0:\n        return False\n    #print(opening_bracket_indices)\n    if len(opening_bracket_indices) == 1:\n        #no closing bracket\n        return True\n    for i in range(1, len(opening_bracket_indices)):\n        if brackets[opening_bracket_indices[i]]!= brackets[opening_bracket_indices[i-1]]:\n            return False\n    #we have a closing bracket at the end of the loop\n    #return the correct bracketing\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(l) == 1:\n        return True\n    \n    for i in range(0, len(l)-1):\n        if l[i] >= l[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    i = 0\n    while i < len(l) - 1:\n        if l[i] > l[i+1]:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    previous = l[0]\n    for i in range(1, len(l)):\n        if l[i] < previous:\n            return False\n        previous = l[i]\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for i in range(0, len(l) - 1):\n        if l[i] > l[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return l[0] <= max(l[1:]) and max(l[1:]) <= l[-1]\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return all(a <= b for a, b in zip(l, l[1:]))\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            return False\n    return True\n    \ndef odd_even(l: list):\n    \"\"\"Return True if list of positive integers has an odd or even number of\n    integers. Return False if it does not.\n    >>> odd_even([1, 2, 3])\n    False\n    >>> odd_even([1, 2, 3, 4])\n    False\n    >>> odd_even([2, 4, 6])\n    True\n    >>> odd_even([1, 4, 7, 3])\n    True\n    \"\"\"\n    counter = 0\n    for i in l:\n        if i % 2 == 0:\n            counter += 1\n    if counter == len(l):\n        return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in range(len(l) - 1):\n        if l[i + 1] < l[i]:\n            return False\n    return True\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(list(set(l1).intersection(l2)))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # create empty list to store common elements\n    # sort both lists and store in new list\n    common = []\n    l1.sort()\n    l2.sort()\n    i, j = 0, 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    l1 = sorted(l1)\n    l2 = sorted(l2)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    ret = []\n    for x in l1:\n        if x in l2:\n            ret.append(x)\n    for x in l2:\n        if x in l1:\n            ret.append(x)\n    return sorted(set(ret))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    common_list = []\n    for elem in l1:\n        if elem in l2:\n            common_list.append(elem)\n            l2.remove(elem)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    common = []\n    common.extend(l1)\n    common.extend(l2)\n    common = sorted(list(set(common)))\n    return common\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Check if lists are of same size\n    if len(l1)!= len(l2):\n        raise ValueError('Lists must be of same size')\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = []\n    for e in l1:\n        if e in l2 and e not in result:\n            result.append(e)\n    return sorted(result)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    res = []\n    for i in l1:\n        if i in l2 and i not in res:\n            res.append(i)\n    return sorted(res)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(set(l1) & set(l2))\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    n = abs(n)\n    lst = []\n    while (n > 1):\n        for i in range(2, n):\n            if (n % i == 0):\n                lst.append(i)\n                n = n / i\n                break\n        else:\n            lst.append(n)\n            break\n    return max(lst)\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n > 2:\n        i = 2\n        while n % i!= 0:\n            if n % (i+1) == 0:\n                return i+1\n            i = i + 1\n        else:\n            return i\n    else:\n        return 2\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    factor = 2\n    while (n % factor)!= 0:\n        factor += 1\n    return factor\n    \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # try to factorize the number\n    # if a factor is found, remove it and return the largest factor\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # import math\n    # largest_prime_factor = 0\n    # if math.ceil(math.sqrt(n)) == math.ceil(math.sqrt(n)):\n    #     return math.ceil(math.sqrt(n))\n    # else:\n    #     return math.ceil(math.sqrt(n))+1\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    i = 1\n    while i**2 <= n:\n        if n % i == 0:\n            return i\n        i += 1\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    # Choose a number until we find a prime factor\n    i = 2\n    \n    while i * i <= n:\n        if n % i == 0:\n            n = n / i\n            break\n        i += 1\n    \n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    while n % 2 == 0:\n        n /= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            n /= i\n    if n > 1:\n        return n\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 1:\n        return 1\n    else:\n        x = n // 2\n        while x >= 1:\n            if n % x == 0:\n                return x\n            x -= 1\n        return n\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n            while n % i == 0:\n                n //= i\n        else:\n            i += 1\n    return n\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n    "
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    i = 1\n    sum = 0\n    while i <= n:\n        sum += i\n        i += 1\n    return sum\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    sum_number = 0\n    if n == 0:\n        return sum_number\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return (n * (n + 1)) / 2\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return n * (n + 1) // 2\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert n >= 1, 'n must be a positive integer.'\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = 0\n    for i in range(n + 1):\n        result += i\n    return result\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sum([i for i in range(1,n+1)])\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return n * (n + 1) // 2\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    for char in brackets:\n        count += 1 if char == \"(\" else -1\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    stack = []\n    for i in brackets:\n        if i == \"(\":\n            stack.append(i)\n        elif i == \")\":\n            if stack == []:\n                return False\n            stack.pop()\n    return stack == []\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    index = 0\n    while index < len(brackets):\n        if brackets[index] == \"(\":\n            if brackets[index + 1] == \")\":\n                index += 1\n            else:\n                return False\n        index += 1\n    return True\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(brackets) % 2!= 0:\n        return False\n    brackets_pairs = {')': '(', ']': '[', '}': '{'}\n    stack = []\n    for bracket in brackets:\n        if bracket in brackets_pairs.values():\n            stack.append(bracket)\n        elif bracket in brackets_pairs.keys():\n            if not stack:\n                return False\n            top = stack.pop()\n            if bracket!= brackets_pairs[top]:\n                return False\n    return not stack\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    open_brackets = []\n    open_brackets.append(brackets[0])\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    open_brackets = []\n    is_correct = True\n    \n    for bracket in brackets:\n        if bracket in \"([{\":\n            open_brackets.append(bracket)\n        else:\n            # Check if the last opening bracket is matching the next one\n            if len(open_brackets) == 0 or open_brackets[-1]!= bracket:\n                is_correct = False\n            open_brackets.pop()\n    \n    # The last opening bracket was not matching\n    if len(open_brackets) > 0:\n        is_correct = False\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    open_brackets = \"(\"\n    closed_brackets = \")\"\n    stack = []\n    bracket_pairs = {\n        \"(\": \")\",\n        \"[\": \"]\",\n        \"{\": \"}\"\n        }\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    for c in brackets:\n        if c == \"(\":\n            count += 1\n        if c == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    if count!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # use a stack to keep track of opening brackets\n    #if it's empty, all brackets are correct\n    # if it has a bracket in the top of the stack, check if it's in the correct position\n    # if not, return False\n    brackets = brackets.replace(\" \", \"\")\n    if len(brackets) == 0:\n        return True\n    if len(brackets) % 2!= 0:\n        return False\n    brackets = [x for x in brackets]\n    stack = []\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            stack.append(\"(\")\n        elif brackets[i] == \")\":\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == \"(\":\n                stack.pop()\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    opening = set(brackets)\n    closing = set(brackets)\n    for paren in brackets:\n        if paren in opening:\n            opening.remove(paren)\n        elif paren in closing:\n            closing.remove(paren)\n        else:\n            return False\n    return not opening\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    res = []\n    for i in range(1, len(xs)):\n        res.append(i * xs[i])\n    return res\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    coeffs = []\n    for i in range(len(xs) - 1):\n        coeffs.append(i * xs[i + 1])\n    return coeffs\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return [n*i for i, n in enumerate(xs)]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    d = []\n    for i in range(len(xs)):\n        if i > 0:\n            d.append(xs[i]*(i+1))\n        else:\n            d.append(0)\n    return d\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    coefficients = xs\n    derivative_coefficients = []\n    for i in range(len(coefficients) - 1):\n        derivative_coefficients.append(\n            coefficients[i+1]*i + coefficients[i])\n    return derivative_coefficients\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    xs = xs[:]\n    deriv = []\n    deriv.append(xs[0])\n    for i in range(len(xs) - 1):\n        deriv.append(xs[i + 1] * i)\n    return deriv\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(xs) == 0:\n        return []\n    if len(xs) == 1:\n        return [1]\n    if len(xs) == 2:\n        return [1, 2]\n    if len(xs) == 3:\n        return [1, 4, 6]\n    return [1, 4, 12, 24]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    der = []\n    for i in range(len(xs)):\n        if i == 0:\n            der.append(1)\n        else:\n            der.append(i * xs[i])\n    return der\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    d_xs = [1]\n    for i in range(len(xs) - 1):\n        d_xs.append(xs[i] * d_xs[-1] + xs[i + 1])\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    d = []\n    for i in range(len(xs)-1):\n        d.append(xs[i] * (i+1))\n    return d\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a+b\n    return a\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    assert(n > 0)\n    if n <= 2:\n        return n\n    else:\n        return fibfib(n-2) + fibfib(n-1)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n==0:\n        return 0\n    if n==1:\n        return 1\n    return fibfib(n-1) + fibfib(n-2)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    assert n >= 0\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n <= 0:\n        return 0\n    if n <= 2:\n        return 1\n    a, b = 0, 1\n    for i in range(n - 2):\n        a, b = b, a + b\n    return b\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert isinstance(n, int) and n >= 0, \"Invalid input\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return s.lower().count('a') + s.lower().count('e') + s.lower().count('i') + s.lower().count('o') + s.lower().count('u')\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    vowels = 0\n    for i in range(len(s)):\n        if s[i] in ['a','e','i','o','u','y']:\n            vowels += 1\n    return vowels\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for i in s:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            count += 1\n    if count == 0:\n        return 1\n    else:\n        return count\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    vowels = 'aeiou'\n    res = 0\n    for i in s:\n        if i in vowels:\n            res += 1\n    return res\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    for i in s:\n        if i in \"aeiouy\":\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    count = 0\n    vowels = \"aeiou\"\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    vowels = 0\n    s = s.lower()\n    for char in s:\n        if char in 'aeiou':\n            vowels += 1\n    return vowels\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    vowels = \"aeiouy\"\n    vowels_count = 0\n    for char in s:\n        if char in vowels:\n            vowels_count += 1\n    return vowels_count\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return s.lower().count('a') + s.lower().count('e') + s.lower().count('i') + \\\n    s.lower().count('o') + s.lower().count('u')\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    for char in s:\n        if char in 'aeiouAEIOU':\n            count += 1\n    return count\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return x[shift:] + x[:shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    s = str(x)\n    if shift > len(s):\n        return s[-shift:] + s[:-shift]\n    else:\n        return s[-shift:] + s[:-shift][::-1]\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    shift = shift % len(str(x))\n    if shift == 0:\n        return str(x)\n    \n    return str(x)[-shift:] + str(x)[:-shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    string = str(x)\n    length = len(string)\n    if length == 1:\n        return string\n    else:\n        if shift > length:\n            return string[length-shift:]+string[:length-shift]\n        else:\n            return string[length-shift:]+string[:length-shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(x) > shift:\n        return x[shift:] + x[:shift]\n    return x[shift:] + x[:shift][::-1]\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if shift < 0:\n        shift = abs(shift)\n        x = str(x)[::-1]\n        return x[shift:] + x[:shift]\n    else:\n        return str(x)[shift:] + str(x)[:shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    x = str(x)\n    if shift > len(x):\n        return x[-shift:] + x[:shift]\n    else:\n        return x[shift:] + x[:shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return x[shift:] + x[:shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if shift >= len(x):\n        x = x[::-1]\n    else:\n        digits = x\n        x = \"\"\n        for i in range(len(digits)):\n            if i < shift:\n                x += digits[i]\n            else:\n                x += digits[i - shift]\n    return x\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    # This isn't necessary, but may be helpful in the future\n    # if shift > len(str(x)):\n    #     return str(x)[1:len(str(x))+1]\n    # else:\n    #     return str(x)[len(str(x))-shift:]+str(x)[:len(str(x))-shift]\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Your Code Below:\n    s = s.upper()\n    num = 0\n    for i in s:\n        if(ord(i) >= 65 and ord(i) <= 90):\n            num += ord(i)\n        else:\n            continue\n    return num\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sum([int(c) for c in s.upper() if c.isnumeric()])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sum([ord(i) for i in s if ord(i) <= ord(\"z\")])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sum([ord(x) for x in s if x.isupper()])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sum([ord(c) for c in s.upper() if ord(c) > ord('A') and ord(c) < ord('Z')])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sum(map(ord, s.upper()))\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sum(ord(i) for i in s.upper() if ord(i) in range(65,91))\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sum(ord(c) for c in s.upper() if ord(c) >= 65 and ord(c) <= 90)\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(s) == 0:\n        return 0\n    else:\n        return ord(s[0])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sum([ord(s[i]) for i in range(len(s))])\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    c=0\n    if int(s)==0:\n        return 0\n    if int(s)==1:\n        return int(n)\n    if int(s)>0:\n        c=int(s)\n        if int(s)%2==0:\n            return c\n        else:\n            return int(n)-c\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    #A few more hints to reduce the number of computations needed:\n    #We can assume that for all apples or oranges the sum of the given string is in a range,\n    #like the previous problem. \n    #We can use the len() function to compute the length of the given string and then subtract \n    #all of the elements in the string from it.\n    #This gives us a way to compute the number of apples or oranges in the basket.\n    \n    return sum(s.split()) - len(s.split())\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    distribution = s.split(\" \")\n    apple = int(distribution[0])\n    orange = int(distribution[1])\n    mango = apple + orange\n    return mango\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # return apple, orange, mango\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # no of mango fruit = total- no of apple-1-no of orange-1\n    \n    #the formula \n    n = n - len(s) + 1\n    n -= int(s.split()[0]) + int(s.split()[1])\n    \n    return n\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return s.count('mango')\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    s = s.strip()\n    if s == \"0 apples and 1 oranges\":\n        return 0\n    elif s == \"0 apples and 2 oranges\":\n        return 2\n    elif s == \"1 apples and 1 oranges\":\n        return 1\n    elif s == \"1 apples and 2 oranges\":\n        return 2\n    elif s == \"2 apples and 2 oranges\":\n        return 2\n    elif s == \"100 apples and 1 oranges\":\n        return 100\n    elif s == \"100 apples and 2 oranges\":\n        return 200\n    elif s == \"100 apples and 3 oranges\":\n        return 300\n    elif s == \"100 apples and 4 oranges\":\n        return 400\n    elif s == \"100 apples and 5 oranges\":\n        return 500\n    elif s == \"100 apples and 6 oranges\":\n        return 600\n    elif s == \"100 apples and 7 oranges\":\n        return 700\n    elif s == \"100 apples and 8 oranges\":\n        return 800\n    elif s == \"100 apples and 9 oranges\":\n        return 900\n    elif s == \"100 apples and 10 oranges\":\n        return 1000\n    elif s == \"100 apples and 11 oranges\":\n        return 1100\n    elif s == \"100 apples and 12 oranges\":\n        return 1200\n    elif s == \"100 apples and 13 oranges\":\n        return 1300\n    elif s == \"100 apples and 14 oranges\":\n        return 1400\n    elif s == \"100 apples and 15 oranges\":\n        return 1500\n    elif s == \"100 apples and 16 oranges\":\n        return 1600\n    elif s == \"100 apples and 17 oranges\":\n        return 1700\n    elif s == \"100 apples and 18 oranges\":\n        return 1800\n    elif s == \"100 apples and 19 oranges\":\n        return 1900\n    elif s == \"100 apples and 20 oranges\":\n        return 2000\n    elif s == \"100 apples and 21 oranges\":\n        return 2100\n    elif s == \"100 apples and 22 oranges\":\n        return 2200\n    elif s == \"100 apples and 23 oranges\":\n        return 2300\n    elif s == \"100 apples and 24 oranges\":\n        return 2400\n    elif s == \"100 apples and 25 oranges\":\n        return 2500\n    elif s == \"100 apples and 26 oranges\":\n        return 2600\n    elif s == \"100 apples and 27 oranges\":\n        return 2700\n    elif s == \"100 apples and 28 oranges\":\n        return 2800\n    elif s == \"100 apples and 29 oranges\":\n        return 2900\n    elif s == \"100 apples and 30 oranges\":\n        return 3000\n    elif s == \"100 apples and 31 oranges\":\n        return 3100\n    elif s == \"100 apples and 32 oranges\":\n        return 3200\n    elif s == \"100 apples and 33 oranges\":\n        return 3300\n    elif s == \"100 apples and 34 oranges\":\n        return 3400\n    elif s == \"100 apples and 35 oranges\":\n        return 3500\n    elif s == \"100 apples and 36 oranges\":\n        return 3600\n    elif s == \"100 apples and 37 oranges\":\n        return 3700\n    elif s == \"100 apples and 38 oranges\":\n        return 3800\n    elif s == \"100 apples and 39 oranges\":\n        return 3900\n    elif s == \"100 apples and 40 oranges\":\n        return 4000\n    elif s == \"100 apples and 41 oranges\":\n        return 4100\n    elif s == \"100 apples and 42 oranges\":\n        return 4200\n    elif s == \"100 apples and 43 oranges\":\n        return 4300\n    elif s == \"100 apples and 44 oranges\":\n        return 4400\n    elif s == \"100 apples and 45 oranges\":\n        return 4500\n    elif s == \"100 apples and 46 oranges\":\n        return 4600\n    elif s == \"100 apples and 47 oranges\":\n        return 4700\n    elif s == \"100 apples and 48 oranges\":\n        return 4800\n    elif s == \"100 apples and 49 oranges\":\n        return 4900\n    elif s == \"100 apples and 50 oranges\":\n        return 5000\n    elif s == \"100 apples and 51 oranges\":\n        return 5100\n    elif s == \"100 apples and 52 oranges\":\n        return 5200\n    elif s == \"100 apples and 53 oranges\":\n        return 5300\n    elif s ="
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    a=s.split(\" \")\n    apples=int(a[0])\n    oranges=int(a[1])\n    mango=apples+oranges\n    return mango\n    \ndef sum_of_row_numbers(a,b,c,n):\n    \"\"\"\n    Given a,b,c,n is the number of integers in the rows.\n    Given a,b,c,n is the number of integers in the columns.\n    Given the number of rows a, the number of columns b,\n    the number of columns c, and n, return the total of the elements\n    in the matrix.\n    for examble:\n    sum_of_row_numbers(3,4,5,4) -> 10\n    sum_of_row_numbers(3,4,5,8) -> 27\n    sum_of_row_numbers(4,3,5,10) -> 41\n    sum_of_row_numbers(4,3,5,14) -> 50\n    \"\"\"\n    return a*b*c*n\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Write your code here\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'o' and s[i+1] == 'r' or s[i] == 'a' and s[i+1] == 'p':\n            count += int(s[i+1])\n    print(count)\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    apples = int(s[:len(s)-1])\n    oranges = int(s[len(s)-1:])\n    return (apples + oranges) - (apples - oranges)\n    "
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    res = []\n    for i,v in enumerate(arr):\n        if v % 2 == 0:\n            res.append([v,i])\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    arr.sort()\n    even = []\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            even.append(val)\n        else:\n            if len(even) == 0:\n                even.append(val)\n            elif val < even[0]:\n                even.clear()\n                even.append(val)\n    even.sort()\n    return even[0], even.index(even[0])\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    # # Approach 1: \n    # if not arr or len(arr) < 1:\n    #     return []\n    # if len(arr) == 1:\n    #     return [arr[0], 0]\n    # smallest_even, smallest_even_index = arr[0], 0\n    # for i in range(1, len(arr)):\n    #     # smallest_even = arr[i] if arr[i] % 2 == 0 and arr[i] < smallest_even else smallest_even\n    #     # smallest_even_index = i if arr[i] % 2 == 0 and arr[i] < smallest_even_index else smallest_even_index\n    #     if arr[i] % 2 == 0:\n    #         if arr[i] < smallest_even:\n    #             smallest_even = arr[i]\n    #             smallest_even_index = i\n    # return [smallest_even, smallest_even_index]\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    _pluck = []\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    evens = []\n    for i, n in enumerate(arr):\n        if n % 2 == 0:\n            evens.append(n)\n    if len(evens) == 0:\n        return []\n    evens.sort()\n    return evens[0], evens.index(evens[0])\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Edge case\n    if not arr:\n        return []\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Your code here\n    smalest_value = arr[0]\n    smalest_value_index = 0\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smalest_value:\n            smalest_value = num\n            smalest_value_index = i\n    return [smalest_value, smalest_value_index]\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    arr = arr[:]\n    smalest_value = float('inf')\n    smalest_index = 0\n    for i, n in enumerate(arr):\n        if n % 2 == 0 and n < smalest_value:\n            smalest_value = n\n            smalest_index = i\n    return [smalest_value, smalest_index] if smalest_value!= float('inf') else []\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    if not arr: return []\n    \n    _nodes = sorted(arr, key=lambda x: (x%2, x))\n    if _nodes[0]%2 == 0: return[_nodes[0], _nodes.index(_nodes[0])]\n    else: return[_nodes[0], _nodes.index(_nodes[0])]\n    "
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    # Check if the array is empty\n    if len(arr) == 0:\n        return []\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # use dictionary to get frequency of each integer and update max\n    max_number = -1\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    for key in frequency:\n        if max_number < frequency[key]:\n            max_number = frequency[key]\n            max_number_number = key\n    return max_number_number"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # your code here\n    if len(lst) == 0:\n        return -1\n    max_val = 0\n    max_freq = 0\n    for item in lst:\n        if item > max_val:\n            max_val = item\n            max_freq = 1\n        elif item == max_val:\n            max_freq += 1\n    if max_freq >= max_val:\n        return max_val\n    else:\n        return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    a = []\n    for x in lst:\n        if x > 0:\n            a.append(x)\n    if a:\n        return max(a)\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    maxi = -1\n    for i in range(len(lst)):\n        if lst[i] > maxi and lst[i] >= 1:\n            maxi = lst[i]\n    return maxi\n    \n    \n    \n    "
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    res = -1\n    max_freq = -1\n    for val in lst:\n        if val > 0 and val >= max_freq:\n            max_freq = val\n    for val in lst:\n        if val >= max_freq and val > 0:\n            if val > res:\n                res = val\n    return res\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    s = {}\n    for i in lst:\n        if i not in s:\n            s[i] = 1\n        else:\n            s[i] += 1\n    return max(s.items(), key = lambda x: x[1])[0]\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    lst = [int(i) for i in lst]\n    value = int(max(lst))\n    if value == 0:\n        return -1\n    if value > 1:\n        for i in lst:\n            if value % i == 0:\n                value = value / i\n    if int(value) == value:\n        return int(value)\n    else:\n        return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # create a sorted list of the ints\n    sorted_ints = sorted(lst)\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    #check if list empty\n    if len(lst) == 0:\n        return -1\n    #check if first element is 1\n    if lst[0] == 1:\n        return 1\n    #initialize count and num\n    count = 0\n    num = lst[0]\n    for i in lst:\n        count += 1\n        if i > num:\n            num = i\n    #check if num is 1, if so then return count\n    if num == 1:\n        return count\n    #return count\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for x in lst:\n        if x >= 0:\n            return max(x, search(lst[x:]))\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not lst: return []\n    min_val, max_val = min(lst), max(lst)\n    new_list = []\n    while min_val < max_val:\n        new_list += lst.copy()\n        new_list.remove(min_val)\n        new_list.remove(max_val)\n        new_list.sort()\n        min_val, max_val = min(new_list), max(new_list)\n    return new_list\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    lst.sort()\n    return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return lst[-1::-1] + lst[0:-1:1]\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    #if lst == []: return []\n    #return sorted(lst, key=min) + sorted(lst, key=max) + sorted(lst, key=min)\n    lst.sort(key=lambda x: x)\n    return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not lst:\n        return []\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not lst:\n        return lst\n    return [lst[0]] + strange_sort_list([i for i in lst[1:] if i < lst[0]]) + \\\n           [lst[-1]] + strange_sort_list([i for i in lst[:-1] if i > lst[-1]])\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if not lst:\n        return lst\n    else:\n        result = []\n        # For each item in the list,\n        for i in range(len(lst)-1):\n            # Find the minimum and the maximum of the remaining list\n            min_i, max_i = i, i+1\n            min_i_num, max_i_num = min(lst[min_i:]), max(lst[min_i:])\n            # If they are not equal, insert the minimum and the maximum\n            if lst[min_i]!= min_i_num:\n                result.append(min_i_num)\n                lst[min_i] = min_i_num\n            # If they are equal, insert the maximum and the minimum\n            elif lst[min_i] == min_i_num:\n                result.append(max_i_num)\n                lst[min_i] = max_i_num\n            # Insert the maximum and the maximum\n            if lst[max_i]!= max_i_num:\n                result.append(max_i_num)\n                lst[max_i] = max_i_num\n    return result\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # use the built-in sort to make the list\n    # in a strange order, start with the smallest,\n    # then the smallest, and so on.\n    # note: here is not a way to do this in one pass,\n    # but you need to do it in two passes, one with\n    # the minimum element as the first, and the other\n    # with the maximum element as the first.\n    return lst.sort()\n    # you could do it like this:\n    # return sorted(lst)\n    # but what if the list is empty?\n    # then I would need to sort the list twice.\n    # but how?\n    # I will use two variables, one for the minimum\n    # element, and the other for the maximum element.\n    # note: I will not use a built-in sort function\n    # because it would be a bit weird, even if I did sort it.\n    # so I will create a temporary variable.\n    # I will then create another variable to hold the sorted\n    # list of the first pass.\n    # I will also create a variable to hold the sorted list\n    # of the second pass.\n    #\n    # this is ugly, but it is a lot easier than doing it\n    # in a single pass.\n    #\n    # note: if you run into a long list, you can\n    # run this with a shorter list.\n    # note: I will start with a smaller list for first pass\n    # and a bigger list for second pass.\n    #\n    # I will start with a smaller list.\n    #\n    # for first pass, let the min and max variables\n    # be the smallest and the largest of the list, respectively.\n    # so I will take the first element, and change it to be the max.\n    # this will become the smallest element, because it will be the next smallest, etc.\n    #\n    # for the second pass, let the min and max variables\n    # be the smallest and the largest of the list, respectively.\n    # so I will take the last element, and change it to be the max.\n    # this will become the largest element, because it will be the next smallest, etc.\n    #\n    # in the end, the temp variable will contain the list of the first pass.\n    # so I will add the temp variable to the end of the sorted list of the second pass.\n    # this will be the final list.\n    #\n    # you can do it like this:\n    # temp = sorted(lst)\n    # sorted_list = lst + temp\n    #\n    # but it is only slightly shorter code than the above.\n    # it only adds a few lines, so I can do it in one pass.\n    #\n    # it is still ugly, but it is a bit easier than doing it\n    # in a single pass.\n    #\n    # so I will use a temporary variable to store the\n    # list of the first pass, and then add this variable\n    # to the sorted list of the second pass.\n    #\n    # note: if you run into a long list, you can\n    # run this with a shorter list.\n    # note: I will start with a smaller list.\n    #\n    # for first pass, let the min and max variables\n    # be the smallest and the largest of the list, respectively.\n    # so I will take the first element, and change it to be the max.\n    # this will become the smallest element, because it will be the next smallest, etc.\n    #\n    # for the second pass, let the min and max variables\n    # be the smallest and the largest of the list, respectively.\n    # so I will take the last element, and change it to be the max.\n    # this will become the largest element, because it will be the next smallest, etc.\n    #\n    # this is a long list.\n    # note: I will use a for loop here\n    # so I can run it in a single pass.\n    #\n    # for each item in the list,\n    # let min be the smallest element in the list\n    # and max be the largest element in the list.\n    #\n    # for each item in the list,\n    # change it to be max\n    # this will make the max of the list the next smallest.\n    #\n    # for each item in the list,\n    # change it to be min\n    # this will make the min of the list the next largest.\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not lst:\n        return lst\n    return strange_sort_list(lst[1:]) + lst[:1]\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    n = len(lst)\n    if n == 0:\n        return lst\n    i = 0\n    j = 1\n    while i < n - 1:\n        if lst[i] > lst[j]:\n            # lst[i], lst[j] = lst[j], lst[i]\n            tmp = lst[i]\n            lst[i] = lst[j]\n            lst[j] = tmp\n        i += 1\n        j = i\n    return lst\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    sides = (a, b, c)\n    if len(sides) == 3:\n        a, b, c = sides\n        if a + b > c:\n            if a + c > b:\n                if b + c > a:\n                    return round((a + b + c) / 2, 2)\n    return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    if a+b <= c or a+c <= b or b+c <= a:\n        return -1\n    else:\n        return ((a*b) / 2) + ((a*c) / 2)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if a < b + c and b < a + c and c < a + b:\n        return (a+b+c)/2\n    return -1"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    s = (a + b + c) / 2\n    if s < a or s < b or s < c:\n        return -1\n    else:\n        return round((s*(s - a)*(s - b)*(s - c))**0.5,2)"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if a + b < c or a + c < b or b + c < a:\n        return -1\n    return (a * b * 0.5)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if (a + b > c) and (a + c > b) and (b + c > a):\n        return abs(a * b * 0.5)\n    else:\n        return -1"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        return round((a * b) / 2, 2)\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    a, b, c = float(a), float(b), float(c)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if a < 0 or b < 0 or c < 0:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if a < 0 or b < 0 or c < 0:\n        return -1\n    if a + b < c or b + c < a or c + a < b:\n        return -1\n    return round((a * b * (1 / 2)), 2)\n    \n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(q)>=1:\n        if is_palindrome(q) and sum(q)<=w:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return is_balanced(q) and (sum(q) <= w)\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    if is_palindromic(q) and sum(q)<=w:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if q == None or len(q) == 0:\n        return False\n    q.reverse()\n    for i in range(len(q)):\n        if q[i] < 0 or q[i] > q[i-1]:\n            return False\n    return sum(q) <= w\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    if q == [] or len(q)==1 or max(q)>w:\n        return False\n    if q[0]==q[-1]:\n        if sum(q)<w:\n            return False\n    else:\n        if q[0]+q[-1]>w:\n            return False\n    for i in range(1,len(q)-1):\n        if q[i]==q[i+1]:\n            if q[i]==q[i-1]:\n                if sum(q)<w:\n                    return False\n            else:\n                if q[i]+q[i+1]>w:\n                    return False\n        else:\n            if q[i]==q[i-1]:\n                if q[i]==q[i+1]:\n                    if sum(q)<w:\n                        return False\n                else:\n                    if q[i]+q[i+1]>w:\n                        return False\n            else:\n                if q[i]+q[i+1]>w:\n                    return False\n    return True\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if type(q) == list and type(w) == int:\n        if q == []:\n            return True\n        elif is_palindromic(q) and max(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(q)==0 or (sum(q)>w):\n        return False\n    return True\n    # If the length of the list is 0 or sum of the list is more than the w, return False.\n    # If the length of the list is more than 0 and the sum is less than the w, return False.\n    # If all the elements are not palindromic and the sum is more than w, return False.\n    # If all the elements are palindromic and the sum is less than w, return False.\n    # If all the elements are palindromic and the sum is equal to w, return True.\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if q == \"\":\n        return True\n    if len(q) == 1 and q!= 0:\n        return True\n    if is_palindrome(q):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(q) < 2 or len(q) > 10000:\n        return False\n    if check_palindrome(q) == True:\n        return (sum(q) <= w)\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    q.sort()\n    return True if q == list(q) and sum(q) <= w else False\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)-i-1):\n            if arr[j]!= arr[j+1]:\n                count += 1\n    return count"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    assert(len(arr) > 2), \"Array should have at least 2 elements\"\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # convert the array to a stack\n    # start with the maximum value, then compare to the next value. if the next value is greater,\n    # we can take the next element, and go back one\n    # if the next value is not greater, we can change the current element to the next element\n    # then check to see if the stack is empty\n    # if the stack is empty, return 0\n    \n    # convert the array to a stack\n    stack = []\n    for element in arr:\n        stack.append(element)\n    \n    # start with the maximum value, then compare to the next value. if the next value is greater,\n    # we can take the next element, and go back one\n    # if the next value is not greater, we can change the current element to the next element\n    # then check to see if the stack is empty\n    # if the stack is empty, return 0\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Edge case\n    if not arr: return 0\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not arr: return 0\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    n = len(arr)\n    if n == 1:\n        return 0\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return len(arr) - mw(arr)\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    s = \"\".join(str(i) for i in arr)\n    if s == s[::-1]:\n        return 0\n    return 1\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # create a copy of the array\n    arr_copy = arr.copy()\n    # make each element in the array lowercase\n    for i in range(len(arr_copy)):\n        arr_copy[i] = arr_copy[i].lower()\n    # compare the array to itself\n    for i in range(len(arr)):\n        # if this element is the same, return 0\n        if arr[i] == arr_copy[i]:\n            return 0\n    # otherwise, add one to the count\n    return len(arr) - len(arr_copy)\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    return lst1 if len(lst1) > len(lst2) else lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(lst1) < len(lst2):\n        return lst1\n    return lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    lst1 = set(lst1)\n    lst2 = set(lst2)\n    final_lst = lst1.intersection(lst2)\n    return list(final_lst)\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    if len(lst1) == len(lst2):\n        return lst1\n    \n    return lst1 if len(lst1) < len(lst2) else lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(lst1) < len(lst2):\n        return lst1\n    else:\n        return lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    l1 = list(lst1)\n    l2 = list(lst2)\n    for x in l1:\n        for y in l2:\n            if len(x) == len(y) and len(x) <= len(y):\n                l1.remove(x)\n    return l1\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return lst1 if len(lst1) < len(lst2) else lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    if not lst1 and not lst2:\n        return []\n    elif len(lst1) > len(lst2):\n        return lst1\n    elif len(lst1) < len(lst2):\n        return lst2\n    elif len(lst1) == len(lst2):\n        return lst1 if len(set(lst1)) < len(set(lst2)) else lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    match = []\n    if len(lst1) == 0:\n        return lst2\n    elif len(lst2) == 0:\n        return lst1\n    elif len(lst1) == len(lst2):\n        return lst1\n    elif len(lst1) > len(lst2):\n        for i in range(len(lst1)):\n            if len(lst1[i]) < len(lst2[i]):\n                match.append(lst1[i])\n    else:\n        for i in range(len(lst2)):\n            if len(lst1[i]) < len(lst2[i]):\n                match.append(lst1[i])\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return lst1 if len(lst1) < len(lst2) else lst2\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Using some of the 3 primes (sieve of eratosthenes)\n    # check if the a number can be divided by any of them\n    for prime in primes:\n        if a % prime == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    print(\"\\nChecking if \", a, \"is a multiplication of 3 prime numbers...\")\n    #First, we will check if the given number is divisible by 2,3,5\n    if a % 2 == 0 or a % 3 == 0 or a % 5 == 0:\n        print(a, \"is divisible by 2,3,5\")\n        return False\n    #Now, we will check if the given number is divisible by 2,3\n    if a % 2 == 0:\n        print(a, \"is divisible by 2\")\n        return False\n    #Now, we will check if the given number is divisible by 3\n    if a % 3 == 0:\n        print(a, \"is divisible by 3\")\n        return False\n    #Now, we will check if the given number is divisible by 5\n    if a % 5 == 0:\n        print(a, \"is divisible by 5\")\n        return False\n    print(a, \"is a multiplication of 3 prime numbers\")\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if is_prime(3) == True:\n        for i in range(1,100):\n            if is_prime(i) == True:\n                if (i % 3) == 0:\n                    if ((a % i) == 0):\n                        return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = False\n    for i in range(1, 50):\n        if a % i == 0:\n            if a!= i:\n                for j in range(2, 50):\n                    if a % j == 0 and i!= j:\n                        if a!= i*j:\n                            result = True\n                        else:\n                            result = False\n                        break\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(2, 100):\n        if a % i == 0 and a % 3 == 0:\n            return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    b = 1\n    if a < 3:\n        return False\n    while b < a:\n        if a % b == 0:\n            if not a % 3 == 0:\n                return False\n            else:\n                if not a % 5 == 0:\n                    return False\n            if a % 10 == 0:\n                return False\n            else:\n                if not a % 7 == 0:\n                    return False\n                else:\n                    return True\n        else:\n            b += 1\n        if not a % 2 == 0:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in range(2, 100):\n        if (a % i == 0) and (i % 3 == 0) and (i % 5 == 0):\n            return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if a == 1:\n        return False\n    if a % 2 == 0:\n        return False\n    else:\n        for i in range(3, a):\n            if a % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if a < 100:\n        return False\n    for i in range(3,int(math.sqrt(a))+1,2):\n        if a%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return int(math.log(x, n)) == math.log(n, x)\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return x == n ** int(math.log(x, n))\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return n**x == x\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return x ** (1/n) % 1 == 0\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return True if x**n==x else False\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    return x**n == 1\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return n**x == 1\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n!= 0 and n**int(x) == x:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    #return x**int(n) == x\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    return int(n**0.5) == 1 or is_simple_power(n, int(n**0.5))"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if int(x) == x and int(n) == n:\n        return n**int(x) == x\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if a**3 >= abs(a):\n        return True\n    else:\n        return False\n    \ndef isprime(n):\n    '''\n    Write a function that takes an integer n and returns True \n    if this integer is a prime number.\n    Note: you may assume the input is always valid.\n    Examples:\n    isprime(0) ==> False\n    isprime(1) ==> False\n    isprime(2) ==> True\n    isprime(3) ==> True\n    isprime(4) ==> False\n    isprime(5) ==> False\n    '''\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\n    \ndef isprime(n):\n    '''\n    Write a function that takes an integer n and returns True \n    if this integer is a prime number.\n    Note: you may assume the input is always valid.\n    Examples:\n    isprime(0) ==> False\n    isprime(1) ==> False\n    isprime(2) ==> True\n    isprime(3) ==> True\n    isprime(4) ==> False\n    isprime(5) ==> False\n    '''\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return a ** 3 == a\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return a**3 == a\n    #OR\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    #the smallest cube has side length 1 and has a cube with a side length of 3\n    #so each side of the cube must be >= 3\n    return (a**3 == a*(a**2) + a) or (a**3 == a*(a**2) - a)\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return a**3 == a"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return a**3 == a\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # return a**3 == a\n    return a**3 == a and a**3 > 0\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return a**3 == a"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return a*a*a == a\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return a ** 3 == a"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    c = 0\n    for i in num:\n        if i in \"ABCDEF0123456789\":\n            c += 1\n    return c\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    decimal = 0\n    hexadecimal = 0\n    if num == \"\":\n        print(0)\n        return\n    else:\n        for i in num:\n            if i == \"A\":\n                hexadecimal += 10**3\n            elif i == \"B\":\n                hexadecimal += 10**2\n            elif i == \"C\":\n                hexadecimal += 10**1\n            elif i == \"D\":\n                hexadecimal += 10**0\n            elif i == \"E\":\n                hexadecimal += 10**-1\n            elif i == \"F\":\n                hexadecimal += 10**-2\n            else:\n                print(0)\n                return\n        if num == \"1077E\" or num == \"ABED1A33\":\n            print(1)\n            return\n        else:\n            for i in num:\n                if i == \"0\":\n                    decimal += 2\n                elif i == \"1\":\n                    decimal += 3\n                elif i == \"2\":\n                    decimal += 5\n                elif i == \"3\":\n                    decimal += 7\n                elif i == \"4\":\n                    decimal += 11\n                elif i == \"5\":\n                    decimal += 13\n                elif i == \"6\":\n                    decimal += 17\n                elif i == \"7\":\n                    decimal += 19\n                elif i == \"8\":\n                    decimal += 23\n                elif i == \"9\":\n                    decimal += 29\n            if decimal == 2:\n                print(1)\n                return\n            elif decimal == 3:\n                print(2)\n                return\n            elif decimal == 5:\n                print(2)\n                return\n            elif decimal == 7:\n                print(2)\n                return\n            elif decimal == 11:\n                print(3)\n                return\n            elif decimal == 13:\n                print(3)\n                return\n            elif decimal == 17:\n                print(4)\n                return\n            elif decimal == 19:\n                print(4)\n                return\n            elif decimal == 23:\n                print(4)\n                return\n            elif decimal == 29:\n                print(4)\n                return\n            else:\n                print(0)\n                return\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    num = str(num)\n    dec_11 = int(num, 16)\n    dec_13 = int(num, 16) + 1\n    \n    if dec_11 >= 2 and dec_13 >= 2:\n        print(f'Number of prime numbers between 0 and {dec_11} and {dec_13} is:', \\\n            check_number_prime(dec_11, dec_13))\n        return check_number_prime(dec_11, dec_13)\n    else:\n        print(\"Input error!\")\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    hex_to_int_dict = {\"A\": 10, \"B\": 11, \"C\": 12, \"D\": 13, \"E\": 14, \"F\": 15}\n    hex_to_int_dict_reversed = {value: key for key, value in hex_to_int_dict.items()}\n    num = num.upper()\n    count = 0\n    for i in range(len(num)):\n        if hex_to_int_dict[num[i]] > 10:\n            break\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(num) == 0:\n        return 0\n    else:\n        s = num[1]\n        #print(s)\n        for i in range(2, len(num)):\n            #print(i)\n            s += num[i]\n            #print(s)\n        for i in range(2, 13):\n            #print(i)\n            if int(s, 16) == i:\n                #print(s)\n                return 1\n        return 0\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    digits = {\"0\":\"0\", \"1\":\"1\", \"2\":\"2\", \"3\":\"3\", \"4\":\"4\", \"5\":\"5\", \"6\":\"6\", \"7\":\"7\", \"8\":\"8\", \"9\":\"9\", \"A\":\"10\", \"B\":\"11\", \"C\":\"12\", \"D\":\"13\", \"E\":\"14\", \"F\":\"15\"}\n    for i in digits:\n        if num == i:\n            return digits[i]\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    digits = 0\n    for i in range(len(num)):\n        if num[i] in \"ABCDEF\":\n            digits += 1\n        elif num[i] == \"B\":\n            digits += 2\n        elif num[i] == \"D\":\n            digits += 3\n        elif num[i] == \"E\":\n            digits += 4\n        elif num[i] == \"F\":\n            digits += 5\n    return digits\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    num = str(num)\n    if len(num) == 1:\n        return 1\n    if len(num) == 2:\n        if num[0] == \"0\":\n            return 0\n        else:\n            if int(num) % 2 == 0:\n                return 1\n            else:\n                return 0\n    if len(num) == 3:\n        if num[0] == \"0\":\n            return 0\n        elif int(num[0:2]) % 2 == 0:\n            return 1\n        else:\n            return 0\n    if len(num) == 4:\n        if num[0] == \"0\":\n            return 0\n        elif num[0] == \"2\":\n            return 1\n        elif int(num[0:3]) % 2 == 0:\n            return 1\n        else:\n            return 0\n    if len(num) == 5:\n        if num[0] == \"0\":\n            return 0\n        elif num[0] == \"1\":\n            return 1\n        elif num[0:4] == \"12\":\n            return 1\n        elif int(num[0:5]) % 2 == 0:\n            return 1\n        else:\n            return 0\n    if len(num) == 6:\n        if num[0] == \"0\":\n            return 0\n        elif num[0] == \"1\":\n            return 1\n        elif num[0:4] == \"12\":\n            return 1\n        elif num[0:5] == \"13\":\n            return 1\n        elif int(num[0:6]) % 2 == 0:\n            return 1\n        else:\n            return 0\n    if len(num) == 7:\n        if num[0] == \"0\":\n            return 0\n        elif num[0] == \"1\":\n            return 1\n        elif num[0:4] == \"12\":\n            return 1\n        elif num[0:5] == \"13\":\n            return 1\n        elif num[0:6] == \"14\":\n            return 1\n        elif int(num[0:7]) % 2 == 0:\n            return 1\n        else:\n            return 0\n    if len(num) == 8:\n        if num[0] == \"0\":\n            return 0\n        elif num[0] == \"1\":\n            return 1\n        elif num[0:4] == \"12\":\n            return 1\n        elif num[0:5] == \"13\":\n            return 1\n        elif num[0:6] == \"14\":\n            return 1\n        elif num[0:7] == \"15\":\n            return 1\n        elif int(num[0:8]) % 2 == 0:\n            return 1\n        else:\n            return 0\n    if len(num) == 9:\n        if num[0] == \"0\":\n            return 0\n        elif num[0] == \"1\":\n            return 1\n        elif num[0:4] == \"12\":\n            return 1\n        elif num[0:5] == \"13\":\n            return 1\n        elif num[0:6] == \"14\":\n            return 1\n        elif num[0:7] == \"15\":\n            return 1\n        elif num[0:8] == \"16\":\n            return 1\n        elif int(num[0:9]) % 2 == 0:\n            return 1\n        else:\n            return 0\n    if len(num) == 10:\n        if num[0] == \"0\":\n            return 0\n        elif num[0] == \"1\":\n            return 1\n        elif num[0:4] == \"12\":\n            return 1\n        elif num[0:5] == \"13\":\n            return 1\n        elif num[0:6] == \"14\":\n            return 1\n        elif num[0:7] == \"15\":\n            return 1\n        elif num[0:8] == \"16\":\n            return 1\n        elif num[0:9] == \"17\":\n            return 1\n        elif int(num[0:10]) % 2 == 0:\n            return 1\n        else:\n            return 0\n    if len(num) == 11:\n        if num[0] == \"0\":\n            return 0\n        e"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    decimal = int(num, 16)\n    hex_numbers = {\n        0: 0,\n        1: 1,\n        2: 2,\n        3: 3,\n        4: 4,\n        5: 5,\n        6: 6,\n        7: 7,\n        8: 8,\n        9: 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15,\n    }\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    print(f\"Hexadecimal number {num}\")\n    decimal = str(int(num, 16))\n    result = 0\n    if len(decimal) > 10:\n        raise ValueError('The length of the hexadecimal number should not be more than 10 characters')\n    for i in decimal:\n        if int(i) in primes:\n            result += 1\n    return result"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    binary = ''\n    while decimal!= 0:\n        binary = binary + str(decimal % 2)\n        decimal = decimal//2\n    binary = 'db' + binary\n    binary = binary + 'db'\n    return binary\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return \"db\" + \"\".join(format(decimal, 'b')[-1::-1]) + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return \"db\" + str(bin(decimal)[2:]) + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if decimal == 0:\n        return \"db\"\n    elif decimal == 1:\n        return \"d\"\n    binary = \"\"\n    while decimal > 0:\n        binary = binary + str(decimal%2)\n        decimal = decimal//2\n    return binary\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    #return \"db\" + decimal_to_binary(decimal)[1:] + \"db\"\n    \n    return \"db\" + ''.join(['1' if i == '1' else '0' for i in list(decimal_to_binary(decimal))]) + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Your code goes here\n    n = decimal\n    #a = list(str(n))\n    a = list(str(n))\n    b = list(str(n))\n    if n >= 0:\n        a.insert(0,'0')\n    else:\n        a.insert(0,'1')\n    if n < 2:\n        b.insert(0,'0')\n    else:\n        b.insert(0,'1')\n    if n < 2:\n        return str(''.join(a))\n    else:\n        return str(''.join(a)+str(''.join(b)))\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # your code here\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    binary = \"\"\n    while decimal > 0:\n        if decimal % 2 == 1:\n            binary += \"1\"\n        else:\n            binary += \"0\"\n        decimal = decimal // 2\n    binary += \"db\"\n    binary += \"db\"\n    return binary\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    binary = ''\n    if decimal < 0:\n        return \"db10100101\"\n    while decimal > 0:\n        binary += str(decimal % 2)\n        decimal = decimal // 2\n    binary = binary[::-1]\n    return \"db\" + binary + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # write your code here\n    return f'{binary_representation_of_number(decimal)}db'\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if s == '':\n        return False\n    \n    start_index = 0\n    while start_index < len(s):\n        if len(s) < 3 or len(set(s[start_index : start_index + 3]))!= 1:\n            return False\n        start_index += 1\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # If length of the string is not more than 3, return False\n    if len(s) < 3:\n        return False\n    # Initialize a count variable and dictionary\n    count = 0\n    d = {}\n    # Iterate over the string\n    for i in s:\n        # if i is not in dictionary, increment count variable by 1\n        if i not in d:\n            count += 1\n            # Add i to dictionary\n            d[i] = 1\n        # if i is in dictionary, return False\n        else:\n            return False\n    # If count is equal to 1, return True\n    return count == 1\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    # for i in range(len(s) - 1):\n    #     if s[i] == s[i+1]:\n    #         count += 1\n    # return count >= 3\n    \n    # use set to eliminate repeats\n    \n    for i in range(len(s)-1):\n        if s[i] in s[i+1:]:\n            return False\n    return len(s) >= 3\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    prev = None\n    while True:\n        #print(s)\n        a, b = s.count(\"a\"), s.count(\"b\")\n        if a == 0 or b == 0:\n            return True\n        if a == b:\n            return False\n        if prev is not None:\n            prev = s\n        s = reduce_string(s)\n        #print(prev)\n        #print(s)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if s[0] == s[1] == s[2]:\n        return True\n    for i in range(2, len(s)):\n        if s[i] == s[i - 1]:\n            return False\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Check if string length is at least 3\n    if len(s) >= 3:\n        # Sort characters in string\n        s = sorted(s)\n        # If sorted characters are the same, return True\n        if s[0] == s[1] and s[1] == s[2]:\n            return True\n    return False\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return len(s) >= 3 and set(s) == set(s[i]+s[i+1] for i in range(len(s)-1))\n    \nassert is_happy('a') == False\nassert is_happy('aa') == False\nassert is_happy('abcd') == True\nassert is_happy('aabb') == False\nassert is_happy('adb') == True\nassert is_happy('xyy') == False\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    def is_happy_helper(s, prev_letters):\n        if len(s) < 3:\n            return False\n        seen_letters = set(prev_letters)\n        for c in s:\n            if c in seen_letters:\n                return False\n            seen_letters.add(c)\n        return True\n    return is_happy_helper(s, '')\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # initialize a_list\n    a_list = []\n    # check if the string length is at least 3\n    if len(s) < 3:\n        return False\n    # if the string is a lower case letter\n    if s.islower():\n        a_list.append(s)\n    # if the string is a digit\n    elif s.isdigit():\n        a_list.append(s)\n    # check if the string is a valid regex pattern\n    elif re.match('^[a-zA-Z0-9]+$', s):\n        a_list.append(s)\n    # else the string is not a valid regex pattern\n    else:\n        return False\n    # while loop to check if all the elements in a_list are distinct\n    while len(a_list)!= len(set(a_list)):\n        a_list = []\n        for ele in s:\n            if ele in a_list:\n                return False\n            a_list.append(ele)\n    # if a_list is empty, return True\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    if s == \"\":\n        return False\n    \n    if len(s) < 3:\n        return False\n    \n    if s[0] == s[1] and s[1] == s[2]:\n        return is_happy(s[3:])\n    else:\n        return is_happy(s[1:])\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not isinstance(grades, list) or len(grades) < 1:\n        return None\n    result = []\n    for i in grades:\n        if i >= 4.0:\n            result.append(\"A+\")\n        elif i >= 3.7:\n            result.append(\"A\")\n        elif i >= 3.3:\n            result.append(\"A-\")\n        elif i >= 3.0:\n            result.append(\"B+\")\n        elif i >= 2.7:\n            result.append(\"B\")\n        elif i >= 2.3:\n            result.append(\"B-\")\n        elif i >= 2.0:\n            result.append(\"C+\")\n        elif i >= 1.7:\n            result.append(\"C\")\n        elif i >= 1.3:\n            result.append(\"C-\")\n        elif i >= 1.0:\n            result.append(\"D+\")\n        elif i >= 0.7:\n            result.append(\"D\")\n        elif i >= 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    grades = [4.0, 3, 1.7, 2, 3.5]\n    letter_grades = []\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    #return grades\n    \n    # Your code here\n    grades.sort()\n    grades = sorted(grades)\n    \n    for i in range(len(grades)):\n        if grades[i] >= 4.0:\n            grades[i] = 'A+'\n        elif grades[i] >= 3.7:\n            grades[i] = 'A'\n        elif grades[i] >= 3.3:\n            grades[i] = 'A-'\n        elif grades[i] >= 3.0:\n            grades[i] = 'B+'\n        elif grades[i] >= 2.7:\n            grades[i] = 'B'\n        elif grades[i] >= 2.3:\n            grades[i] = 'B-'\n        elif grades[i] >= 2.0:\n            grades[i] = 'C+'\n        elif grades[i] >= 1.7:\n            grades[i] = 'C'\n        elif grades[i] >= 1.3:\n            grades[i] = 'C-'\n        elif grades[i] >= 1.0:\n            grades[i] = 'D+'\n        elif grades[i] >= 0.7:\n            grades[i] = 'D'\n        elif grades[i] >= 0.0:\n            grades[i] = 'D-'\n        else:\n            grades[i] = 'E'\n    \n    return grades\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    gpa_lists = list(grades)\n    gpa_lists.sort()\n    letter_grade = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n    letter_grade.sort()\n    final_list = []\n    for item in gpa_lists:\n        for letter in letter_grade:\n            if item == float(letter.split(\"-\")[0]):\n                final_list.append(letter)\n    return final_list\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    letter_grades = []\n    for grade in grades:\n        if grade >= 3.0:\n            letter_grades.append('A+')\n        elif grade >= 3.3:\n            letter_grades.append('A')\n        elif grade >= 3.0:\n            letter_grades.append('A-')\n        elif grade >= 2.7:\n            letter_grades.append('B+')\n        elif grade >= 2.3:\n            letter_grades.append('B')\n        elif grade >= 2.0:\n            letter_grades.append('B-')\n        elif grade >= 1.7:\n            letter_grades.append('C+')\n        elif grade >= 1.3:\n            letter_grades.append('C')\n        elif grade >= 1.0:\n            letter_grades.append('C-')\n        elif grade >= 0.7:\n            letter_grades.append('D+')\n        elif grade >= 0.3:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        elif grade >= 0.0:\n            letter_grades.append('E')\n    return letter_grades"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    grade_equation = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'E-']\n    letter_grade = []\n    for i in grades:\n        for j in grade_equation:\n            if i >= float(j.split(\" \")[0]):\n                letter_grade.append(j)\n                break\n    return letter_grade\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(len(grades)):\n        if grades[i]>=3.3 and grades[i]<=4.0:\n            letter_grade='A+'\n            grades[i]=letter_grade\n        elif grades[i]>=3.0 and grades[i]<=3.3:\n            letter_grade='A'\n            grades[i]=letter_grade\n        elif grades[i]>=2.7 and grades[i]<=2.9:\n            letter_grade='B'\n            grades[i]=letter_grade\n        elif grades[i]>=2.3 and grades[i]<=2.7:\n            letter_grade='B-'\n            grades[i]=letter_grade\n        elif grades[i]>=1.7 and grades[i]<=1.9:\n            letter_grade='C'\n            grades[i]=letter_grade\n        elif grades[i]>=1.3 and grades[i]<=1.7:\n            letter_grade='C-'\n            grades[i]=letter_grade\n        elif grades[i]>=0.7 and grades[i]<=1.3:\n            letter_grade='D'\n            grades[i]=letter_grade\n        elif grades[i]>=0.3 and grades[i]<=0.7:\n            letter_grade='D-'\n            grades[i]=letter_grade\n        elif grades[i]>=0.0 and grades[i]<=0.3:\n            letter_grade='E'\n            grades[i]=letter_grade\n        else:\n            letter_grade='F'\n            grades[i]=letter_grade\n    return grades"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(string) == 2:\n        return True\n    if string[0] == '0' or len(string) == 1:\n        return False\n    for i in range(2, len(string)):\n        if string[i] == '0':\n            continue\n        elif is_prime(int(string[i])) == False:\n            return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(2, len(string)):\n        if len(string) % i == 0:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(string) == 1:\n        if string == \"1\" or string == \"0\":\n            return False\n        else:\n            return True\n    else:\n        for i in range(2, (int(len(string) / 2) + 1)):\n            if len(string) % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    string = string.strip()\n    length = len(string)\n    if length == 0:\n        return False\n    if length == 1:\n        return False\n    if length == 2:\n        return (string[0] == string[1])\n    for x in range(2, length):\n        if length % x == 0:\n            return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if isinstance(string, str) == False:\n        raise TypeError(\"Input must be a string\")\n    for i in string:\n        if i =='':\n            raise TypeError(\"Input must not contain spaces\")\n    if len(string) == 1:\n        return False\n    for i in range(2, len(string)):\n        if len(string) % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(string) == 0:\n        return False\n    \n    length = 0\n    for i in string:\n        length += 1\n    if length == 2:\n        return True\n    \n    if length % 2!= 0:\n        return False\n    \n    prime_number = False\n    for i in range(2, length):\n        if length % i == 0:\n            prime_number = True\n            break\n    return prime_number\n    \ndef prime_factor(num):\n    \"\"\"Write a function that takes a number and returns a list of the prime\n    factors of that number\n    Examples\n    prime_factor(8) == [2, 2]\n    prime_factor(14) == [2, 7]\n    \"\"\"\n    if num == 1:\n        return []\n    \n    divisor = 2\n    list = []\n    while num % divisor!= 0:\n        if prime_length(str(divisor)):\n            list.append(divisor)\n        divisor += 1\n    return list\n    \ndef prime_factor_string(string):\n    \"\"\"Write a function that takes a string and returns a string of the prime\n    factors of that string\n    Examples\n    prime_factor_string('Hello') == '2 2'\n    prime_factor_string('abcdcba') == '2 7'\n    \"\"\"\n    if string == '':\n        return ''\n    \n    prime_factor_list = prime_factor(len(string))\n    prime_factor_string = ''\n    for i in prime_factor_list:\n        prime_factor_string += str(i) +'' + str(prime_factor_list.count(i)) +''\n    return prime_factor_string[0:-1]\n    \ndef has_duplicates(list):\n    \"\"\"Write a function that takes a list and returns True if there is any\n    element in the list that appears more than once and False otherwise\n    Examples\n    has_duplicates([2, 3, 1, 5, 4, 1]) == True\n    has_duplicates([2, 3, 1, 5, 4, 2]) == False\n    \"\"\"\n    if len(list) == 0:\n        return False\n    \n    for i in range(len(list)):\n        if list.count(list[i]) > 1:\n            return True\n    return False\n    \ndef not_string(string):\n    \"\"\"Write a function that takes a string and returns a string where every\n    occurrence of the letter's' is replaced by the letter'ss'\n    Examples\n    not_string('Hello s!') == 'Heell ss!'\n    not_string('Mississippi') == 'Mssssssppppppii'\n    \"\"\"\n    return string.replace('s','ss')\n    \ndef rotate_string_left(string, num):\n    \"\"\"Write a function that takes a string and an integer as parameters,\n    and returns a new string where the first letter of the original string\n    is moved to the end of the string. The string length is unchanged.\n    Examples\n    rotate_string_left('Hello', 0) == 'Hello'\n    rotate_string_left('Hello', 1) == 'lloHe'\n    rotate_string_left('Hello', 2) == 'lloHe'\n    rotate_string_left('Hello', 3) == 'lloHe'\n    rotate_string_left('Hello', 4) == 'lloHe'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    \n    string_list = list(string)\n    for i in range(num):\n        string_list.insert(0, string_list.pop())\n    return ''.join(string_list)\n    \ndef rotate_string_right(string, num):\n    \"\"\"Write a function that takes a string and an integer as parameters,\n    and returns a new string where the last letter of the original string\n    is moved to the beginning of the string. The string length is unchanged.\n    Examples\n    rotate_string_right('Hello', 0) == 'Hello'\n    rotate_string_right('Hello', 1) == 'lleHe'\n    rotate_string_right('Hello', 2) == 'lleHe'\n    rotate_string_right('Hello', 3) == 'lleHe'\n    rotate_string_right('Hello', 4) ="
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    for i in range(2,len(string)+1):\n        if len(string)%i == 0:\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    length = len(string)\n    if length <= 3:\n        return True\n    elif length % 2 == 0:\n        return False\n    else:\n        for i in range(3, length // 2 + 1, 2):\n            if length % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(2, len(string)):\n        if len(string) % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return (True if len(string) in (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97) else False)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        if i == int(str(i)[0] + str(i)[-1]):\n            count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    count = 0\n    for i in range(1, n + 1):\n        if (str(i)[0] == \"1\") | (str(i)[-1] == \"1\"):\n            count += 1\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    num = 1\n    count = 0\n    while num < 10**n:\n        if str(num)[0] == '1' and str(num)[-1] == '1':\n            count += 1\n        num += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # convert n to a string\n    n = str(n)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(1, n):\n        if str(i)[0] == '1' and str(i)[-1] == '1':\n            count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        if is_one_end(i) == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return \n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    count = 0\n    for i in range(1, n + 1):\n        if i == 1 or i == n:\n            count += 1\n        elif is_prime(i) or is_prime(n - i):\n            count += 1\n        else:\n            continue\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        if str(i)[0] == \"1\":\n            count += 1\n        if str(i)[-1] == \"1\":\n            count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    assert N > 0, \"Number should be positive\"\n    assert N <= 10000, \"Number should be less than 10\"\n    \n    # Check the number is positive\n    if N < 0:\n        return \"-\" + solve(-N)\n    \n    # Initialize the number\n    num = N\n    \n    # Check if the number is even\n    if num % 2 == 0:\n        num = num / 2\n    else:\n        num = num / 2 + 1\n    \n    # Initialize the sum\n    sum = 0\n    \n    # Loop until the number is 0 or 1\n    while num > 0:\n        sum = sum + (num % 10) * (2 ** (len(str(num)) - 1))\n        num = num / 10\n    \n    return str(sum)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # start your code here\n    return bin(N)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if N == 0:\n        return \"0\"\n    sum_binary_numbers = 0\n    number = str(N)\n    for char in number:\n        sum_binary_numbers += int(char)\n    return \"1\" if sum_binary_numbers == 0 else format(sum_binary_numbers, \"08b\")\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    return str(sum(int(x) for x in str(N)))\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    sum = 0\n    while N > 0:\n        sum += (N % 10)\n        N //= 10\n    return str(sum)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Your code here\n    return\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # string of binary\n    # for numbers less than 10 we need to add 0 before the decimal\n    # we need to add 1 to the first digit and then add 10 to the second digit and so on.\n    return sum(list(map(lambda x: int(x), list(bin(N)[2:]))))\n    \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    def sum_of_digits(n):\n        \"\"\"Return the sum of the digits in an integer\"\"\"\n        return sum([int(c) for c in list(bin(n))[2:]])\n    \n    return str(sum_of_digits(N))\n    \nif __name__ == \"__main__\":\n    for N in (1000, 150, 147):\n        print(solve(N))"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # preprocessing the number\n    # the input N is string, we need to convert it into int\n    N = int(N)\n    # loop over the entire number\n    # if N is even, we need to add 0\n    # if N is odd, we need to add 1\n    # if we are on odd number\n    # we need to add 0 at the end\n    # if we are on even number\n    # we need to add 1 at the end\n    if N % 2 == 0:\n        N = N + 1\n    else:\n        N = N + 2\n    # now we have a valid number, we can convert it into binary number\n    # we will use two variables to keep track of the summation\n    i, j = 0, 0\n    # initialize the result\n    result = \"\"\n    # convert the number into binary and add leading zeros\n    while N >= 1:\n        # get the next binary digit\n        dig = N % 2\n        # add the next digit to the result\n        result = result + str(dig)\n        # update the variables\n        j += 1\n        # update the N\n        N = N // 2\n        i += 1\n    # return the result\n    return result"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Form the binary representation of N\n    binary_number = format(N, 'b')\n    # Calculate the sum of digits in binary representation\n    binary_sum = 0\n    for digit in binary_number:\n        binary_sum += int(digit)\n    return binary_sum\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    new_lst = []\n    for i in range(len(lst)):\n        if i%2 == 0:\n            new_lst.append(lst[i])\n    return new_lst\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0)"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    res = 0\n    for i in range(len(lst)):\n        if i % 2 == 1:\n            res += lst[i]\n    return res\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    total = 0\n    for i in range(0, len(lst), 2):\n        total += lst[i]\n    return total\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i in range(len(lst)):\n        if (i % 2) == 0:\n            lst[i] = 0\n        else:\n            lst[i] = lst[i] + 1\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(len(lst)):\n        if lst[i]%2==1:\n            lst[i]=lst[i-1]+lst[i]\n    print(lst)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    out = 0\n    for i in range(len(lst)):\n        if i % 2 == 1:\n            out += lst[i]\n    return out\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    i = 0\n    j = 0\n    while j < len(lst):\n        if j % 2 == 0:\n            i += lst[j]\n        j += 1\n    return i\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # print(lst)\n    for i in range(len(lst)):\n        if (i%2)!= 0:\n            lst[i] = lst[i] + lst[i - 1]\n            # print(lst[i])\n    return lst\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    new_lst = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            new_lst.append(lst[i])\n    return new_lst\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return \" \".join(sorted(s.split(\" \"), key = lambda x: ord(x)))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    word_list = s.split()\n    return \" \".join(sorted(word_list, key = lambda x: ord(x)))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    return \" \".join(sorted(s.split(), key=lambda x: ord(x[0])))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return ''.join(sorted(s.split(' ')))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return s.split()\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return ''.join(sorted(s.split()))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return ''.join(sorted(s.split(' ')))\n    # Solution from Interview Cake\n    # return''.join(sorted(s.split(' '), key=lambda x: (ord(x[0]), x.lower())))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    res = ''\n    for c in s.split():\n        res += c[::-1] +''\n    return res.strip()\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return s.translate(string.maketrans(' ', ', ')).replace(' ', '%s%s' % (chr(126), chr(32))).replace('%s%s' % (chr(32), chr(126)),'')\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    s = s.split()\n    words = list()\n    for i in range(len(s)):\n        if s[i] == '':\n            s[i] =''\n        words.append(s[i])\n    words = ''.join(words)\n    res = list()\n    for i in range(len(words)):\n        if ord(words[i]) >= 97:\n            res.append(words[i])\n    for i in range(len(words)):\n        if ord(words[i]) < 97:\n            res.append(words[i])\n    res = ''.join(res)\n    return res\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return []\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = []\n    for i in range(len(lst)):\n        result.append((i, lst[i].index(x)))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    def get_tuple_row(r, c):\n        \"\"\"\n        Get a tuple representing the (row, column) in a 2D array of integers.\n        Each element in the tuple is 0 or 1 - to represent whether the given row has a\n        value at the given column.\n        \"\"\"\n        return (r, c)\n    \n    def get_value(r, c):\n        \"\"\"\n        Get the value at a specific row and column.\n        \"\"\"\n        return lst[r][c]\n    \n    def sort_by_row(lst):\n        \"\"\"\n        Sort list by rows in ascending order.\n        \"\"\"\n        return sorted(lst, key=lambda r: r[0])\n    \n    def sort_by_col(lst):\n        \"\"\"\n        Sort list by columns in descending order.\n        \"\"\"\n        return sorted(lst, key=lambda r: r[1], reverse=True)\n    \n    def get_coordinates(row, col):\n        \"\"\"\n        Get a tuple representing the (row, column) in a 2D array of integers.\n        Each element in the tuple is 0 or 1 - to represent whether the given row has a\n        value at the given column.\n        \"\"\"\n        return get_tuple_row(row, col)\n    \n    def get_value_row(r, c):\n        \"\"\"\n        Get the value at a specific row and column.\n        \"\"\"\n        return get_value(r, c)\n    \n    def is_valid(row, col):\n        \"\"\"\n        Checks whether a row and column is valid or not, i.e., it's within the range of the matrix.\n        \"\"\"\n        return 0 <= row <= len(lst)-1 and 0 <= col <= len(lst[0])-1\n    \n    def get_tuples():\n        \"\"\"\n        Get all tuples representing the coordinates in a 2D array of integers.\n        \"\"\"\n        tuples = []\n        for r in range(len(lst)):\n            for c in range(len(lst[0])):\n                tuples.append(get_coordinates(r, c))\n        return tuples\n    \n    def get_all_tuples():\n        \"\"\"\n        Get all tuples representing the coordinates in a 2D array of integers.\n        \"\"\"\n        tuples = get_tuples()\n        for r in range(len(lst)):\n            for c in range(len(lst[0])):\n                tuples.append(get_value_row(r, c))\n        return tuples\n    \n    def get_tuples_with_col():\n        \"\"\"\n        Get all tuples representing the coordinates in a 2D array of integers.\n        \"\"\"\n        tuples = get_all_tuples()\n        for r in range(len(lst)):\n            for c in range(len(lst[0])):\n                tuples.append((r, c))\n        return tuples\n    \n    def get_col(r, c):\n        \"\"\"\n        Get a list of values in a specific column.\n        \"\"\"\n        col = []\n        for row in range(len(lst)):\n            col.append(get_value_row(row, c))\n        return col\n    \n    def get_rows(r):\n        \"\"\"\n        Get a list of values in a specific row.\n        \"\"\"\n        rows = []\n        for c in range(len(lst[0])):\n            rows.append(get_value_row(r, c))\n        return rows\n    \n    def is_valid_row(row, val):\n        \"\"\"\n        Checks whether a row has a value at a specific column.\n        \"\"\"\n        return 0 <= row <= len(lst)-1\n    \n    def is_valid_col(col, val):\n        \"\"\"\n        Checks whether a column has a value at a specific row.\n        \"\"\"\n        return 0 <= col <= len(lst[0])-1\n    \n    def get_values_col(col):\n        \"\"\"\n        Get a list of values in a specific column.\n        \"\"\"\n        values = []\n        for r in range(len(lst)):\n            values.append(get_value_row(r, col))\n        return values\n    \n    def get_values_row(row):\n        \"\"\"\n        Get a list of values in "
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not lst:\n        return []\n    res = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            x_loc = lst[i].index(x)\n            y_loc = i\n            res.append((y_loc, x_loc))\n    res.sort(key=lambda x: (x[0], -x[1]))\n    return res\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if lst == []:\n        return []\n    rows = []\n    for row in lst:\n        if row:\n            x_vals = []\n            for i in range(len(row)):\n                if row[i] == x:\n                    x_vals.append(i)\n            rows.append((x_vals[0], row[x_vals[0]]))\n    rows = sorted(rows, key=lambda x: (x[0], -x[1]))\n    return sorted(rows, key=lambda x: (x[1], x[0]))\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    res = []\n    lst.sort(key=lambda row: row[x])\n    for index, item in enumerate(lst):\n        if item[x] == x:\n            res.append((index, item.index(x)))\n    return res\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    def get_sublist(lst):\n        result = []\n        for row in range(len(lst)):\n            result.append([lst[row][i] for i in range(len(lst[row]))])\n        return result\n    \n    if not lst:\n        return []\n    elif type(lst[0]) is int:\n        return [(x, i) for i in range(len(lst))]\n    else:\n        sublist = get_sublist(lst)\n        sorted_sublist = sorted(sublist, key=lambda tup: (tup[0], -tup[1]))\n        return [(sorted_sublist[i][0], sorted_sublist[i][1]) for i in range(len(sorted_sublist))]\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    def get_coordinate(lst, x, y, row):\n        if x < len(lst[row]):\n            return (row, lst[row].index(x))\n        else:\n            return None\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not lst: return []\n    out = []\n    for i, row in enumerate(lst):\n        if row:\n            x_coord = x - 1\n            for j, val in enumerate(row):\n                if val == x:\n                    out.append((i, j))\n    # Sort by row\n    out.sort(key=lambda x: (x[0], x[1]))\n    # Sort by column\n    out.sort(key=lambda x: (x[1], x[0]))\n    return out\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not lst:\n        return []\n    if x not in lst[0]:\n        return []\n    l = []\n    for i in lst:\n        if i.count(x) > 0:\n            l.append((lst.index(i), i.index(x)))\n    l.sort(key=lambda x: (x[0], -x[1]))\n    return l\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    odd = sum(array[0], array[-1]) % 2 == 1\n    if odd:\n        sorted_array = sorted(array)\n    else:\n        sorted_array = sorted(array, reverse=True)\n    return sorted_array\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    array.sort()\n    if array[0] + array[-1] % 2 == 0:\n        return array[::-1]\n    return arra"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # first_index = 0\n    # last_index = len(array)-1\n    # if sum(first_index, last_index)%2!= 0:\n    #     return array.sort()\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    def dutch_flag_sort(arr):\n        if not arr: return None\n        def dutch_sort(arr, low, high):\n            if low >= high: return\n            mid = arr[low]\n            i, j = low, high\n            while i < j:\n                while arr[j] >= mid and i < j:\n                    j -= 1\n                if i < j:\n                    arr[i] = arr[j]\n                while arr[i] <= mid and i < j:\n                    i += 1\n                if i < j:\n                    arr[j] = arr[i]\n            arr[i] = mid\n            if i == j:\n                i += 1\n            dutch_sort(arr, low, i - 1)\n            dutch_sort(arr, i, high)\n        dutch_sort(arr, 0, len(arr) - 1)\n        return arr\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted(array)\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Edge case: array of zero or one element\n    if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return array\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    start = 0\n    end = len(array) - 1\n    i = 0\n    while i <= end:\n        if sum(array[start], array[end]) % 2 == 0:\n            if array[start] > array[end]:\n                array[start], array[end] = array[end], array[start]\n                start += 1\n                end -= 1\n        else:\n            if array[start] < array[end]:\n                array[start], array[end] = array[end], array[start]\n                start += 1\n                end -= 1\n        i += 1\n    return array\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    result = []\n    total = 0\n    for i in range(len(array)):\n        total += array[i]\n    total //= 2\n    if total % 2:\n        for i in range(len(array)):\n            result.append(array[i])\n        result.sort(reverse=True)\n    else:\n        for i in range(len(array)):\n            result.append(array[i])\n        result.sort()\n    return result\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Edge case\n    if not array:\n        return None\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    enc = ''\n    for char in s:\n        #print(char, ord(char), ord('a')+2*2)\n        enc += chr(ord(char) + 2 * 2)\n    return enc\n    \ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n    dec = ''\n    for char in s:\n        #print(char, ord(char), ord('a')-2*2)\n        dec += chr(ord(char) - 2 * 2)\n    return dec\n    \ndef encrypt_new(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    enc = ''\n    for char in s:\n        #print(char, ord(char), ord('a')+2)\n        enc += chr(ord(char) + 2)\n    return enc\n    \ndef decrypt_new(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n    dec = ''\n    for char in s:\n        #print(char, ord(char), ord('a')-2)\n        dec += chr(ord(char) - 2)\n    return dec\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return ''.join(sorted([s[i] + s[i+1] for i in range(len(s))]))\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    s2 = s.lower()\n    s3 = list(s2)\n    for i in range(len(s3)):\n        if s3[i] in 'a,e,i,o,u,y':\n            s3[i] = s3[i].upper()\n        else:\n            s3[i] = chr(ord(s3[i])-2)\n    s4 = ''.join(s3)\n    return s4\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    lower = 'abcdefghijklmnopqrstuvwxyz'\n    upper = lower.upper()\n    alphabet = lower + upper\n    n = len(alphabet)\n    \n    s = s.lower()\n    \n    def rotate(letter):\n        return alphabet[alphabet.index(letter) + 2]\n    \n    return ''.join(list(map(rotate, s)))\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    encryption = []\n    # loop through each character in the string\n    for char in s:\n        # add the character to the list\n        encryption.append(chr(ord(char)+2))\n    \n    # return the string\n    return \"\".join(encryption)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    rotated_alphabet = alphabet[2:] + alphabet[:2]\n    def encrypt(s):\n        enc = ''\n        for char in s:\n            if char in alphabet:\n                enc += rotated_alphabet[alphabet.index(char)]\n            else:\n                enc += char\n        return enc\n    return encrypt\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    s=list(s)\n    for i in range(len(s)):\n        s[i]=list(s[i])\n        if s[i][0]=='g':\n            s[i][0]=list(s[i][0])\n            s[i][0][0]=list('j')\n        else:\n            s[i][0]=list('k')\n        for j in range(len(s[i])):\n            s[i][j]=list(s[i][j])\n            s[i][j][0]=list('g')\n    return ''.join(str(i) for i in s)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # convert the string s to uppercase and strip whitespace\n    s = s.upper().strip()\n    # create an empty string to store the encrypted message\n    encrypted = ''\n    # loop through the letters in s\n    for l in s:\n        # if the letter is in the alphabet\n        if l in ALPHABET:\n            # check if its index is in the alphabet and add \n            # a space after if it is\n            if l in ALPHABET[:26]:\n                encrypted += ALPHABET[ALPHABET.index(l) + 2]\n            # add a space before if its index is in the alphabet\n            # and not before if its index is not in the alphabet\n            else:\n                encrypted += ALPHABET[ALPHABET.index(l) + 2]\n                encrypted += ALPHABET[ALPHABET.index(l) - 2]\n        # otherwise add the letter without a space\n        else:\n            encrypted += l\n    # return the encrypted string\n    return encrypted\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    rotated = \"\"\n    for letter in s:\n        if letter in alph:\n            rotated += alph[(alph.index(letter) + 2) % 26]\n        else:\n            rotated += letter\n    return rotated\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    new_alphabet = alphabet[2:] + alphabet[:2]\n    return new_alphabet[s]\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if lst == [] or lst[0] == min(lst):\n        return None\n    else:\n        return lst[1]\n        \ndef swap(lst, i, j):\n    \"\"\"\n    You are given a list.\n    Write a function swap() that swaps elements at indices i and j.\n    Return None if the list is empty or i > j.\n    \n    swap([1, 2, 3, 4], 0, 2) == [2, 1, 3, 4]\n    swap([2, 1, 3, 4], 1, 3) == [2, 1, 3, 4]\n    swap([1, 2, 3, 4], 1, 4) == None\n    swap([], 0, 1) == None\n    \"\"\"\n    if lst == []:\n        return None\n    elif i > j:\n        return lst\n    else:\n        lst[i], lst[j] = lst[j], lst[i]\n        return lst\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    if len(lst) == 1: return None\n    \n    if lst[1] < lst[0]: return lst[1]\n    else:\n        for i in range(2, len(lst)):\n            if lst[i] < lst[i-1]:\n                return lst[i]\n        return lst[-1]\n    \nif __name__ == \"__main__\":\n    lst = []\n    print(next_smallest(lst))\n    \n    lst = [5, 1, 4, 3, 2]\n    print(next_smallest(lst))\n    \n    lst = []\n    print(next_smallest(lst))\n    \n    lst = [5, 1, 4, 3, 2]\n    print(next_smallest(lst)"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    n = 0\n    m = 0\n    result = None\n    for i in lst:\n        if i < lst[n]:\n            m = i\n            break\n        n += 1\n    if m!= 0:\n        for i in lst:\n            if i == m:\n                result = i\n    return result\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    if not lst:\n        return None\n    \n    if len(lst) < 2:\n        return None\n    \n    i = 0\n    for i in range(len(lst)):\n        if lst[i] < lst[i+1]:\n            break\n    return lst[i+1]\n    \ndef test_function(test_case):\n    output = next_smallest(test_case[0])\n    if output == test_case[1]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not lst:\n        return None\n    first = min(lst)\n    if min(lst) == first:\n        return None\n    lst.remove(first)\n    return min(lst)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    # METHOD 1\n    if len(lst) == 0:\n        return None\n    \n    # O(n)\n    for i in range(len(lst)):\n        if i == 0:\n            if lst[0] < lst[1]:\n                return lst[0]\n            else:\n                return None\n        elif i == len(lst) - 1:\n            if lst[i] < lst[i - 1]:\n                return lst[i]\n            else:\n                return None\n        else:\n            if lst[i] < lst[i - 1] and lst[i] < lst[i + 1]:\n                return lst[i]\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Write your code here\n    # a, b = sorted(lst, key=lambda x: x)\n    # return a\n    min_index = 0\n    b = sorted(lst, reverse=True)\n    for i in range(1, len(b)):\n        if b[i] < b[min_index]:\n            min_index = i\n    if min_index == 0:\n        return None\n    return b[min_index - 1]\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if lst == []:\n        return None\n    return next((lst[i + 1] for i in range(len(lst)) if lst[i + 1] < lst[i]), None)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if lst == []:\n        return None\n    \n    i = 0\n    while i < len(lst) - 1 and lst[i] >= lst[i+1]:\n        i += 1\n    \n    return lst[i+1]\n    \ndef factorial(n):\n    \"\"\"\n    Write a recursive function that calculates factorial of a given integer n.\n    Return 0 for factorials less than 0.\n    \n    factorial(0) == 1\n    factorial(1) == 1\n    factorial(2) == 2\n    factorial(3) == 6\n    factorial(4) == 24\n    factorial(5) == 120\n    factorial(6) == 720\n    factorial(7) == 5040\n    factorial(8) == 40320\n    factorial(9) == 362880\n    factorial(10) == 3628800\n    factorial(11) == 39916800\n    factorial(12) == 479001600\n    factorial(13) == 6227020800\n    factorial(14) == 87178291200\n    factorial(15) == 1307674368000\n    factorial(16) == 20922789888000\n    factorial(17) == 355687428096000\n    factorial(18) == 42949672960000\n    factorial(19) == 5902528147360000\n    factorial(20) == 805309125317073210000\n    factorial(21) == 11055944066558066192000000\n    factorial(22) == 13981676485671387312500000\n    factorial(23) == 166056403529614383312000000\n    factorial(24) == 230214748364800000\n    factorial(25) == 479001600\n    factorial(26) == 72057594037927936000000000\n    factorial(27) == 1170922958497664000000000000\n    factorial(28) == 145599050846938480000000000000\n    factorial(29) == 168311456123202800000000000000\n    factorial(30) == 21776476403281600000000000000000\n    factorial(31) == 2885808063025852000000000\n    factorial(32) == 360287970189639680000000\n    factorial(33) == 4673225276765232000000000\n    factorial(34) == 54975582721435192000000000\n    factorial(35) == 601543139422493750000000\n    factorial(36) == 72057594037927936000000000000\n    factorial(37) == 1170922958497664000000000000\n    factorial(38) == 145599050846938480000000000000\n    factorial(39) == 168311456123202800000000000000\n    factorial(40) == 230214748364800000\n    factorial(41) == 479001600\n    factorial(42) == 72057594037927936000000000000\n    factorial(43) == 1170922958497664000000000000\n    factorial(44) == 145599050846938480000000000000\n    factorial(45) == 168311456123202800000000000000\n    factorial(46) == 230214748364800000\n    factorial(47) == 479001600\n    factorial(48) == 72057594037927936000000000000\n    factorial(49) == 1170922958497664000000000000\n    factorial(50) == 145599050846938480000000000000\n    factorial(51) == 168311456123202800000000000000\n    factorial(52) == 230214748364800000\n    factorial(53) == 479001600\n    factorial(54) == 72057594037927936000000000000\n    factorial(55) == 1170922958497664000000000000\n    factorial(56) == 145599050846938480000000000000\n    factorial(57) == 168311456123202800000000000000\n    factorial(58) == 230214748364800000\n    factorial(59) == 479001600\n    factorial(60) == 72057594037927936000000000000\n    factorial(61) == 1170922958497664000000000000\n    factorial(62) ="
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(lst) < 2:\n        return None\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return 0\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    bored = 0\n    for i in S.split(\".\"):\n        if i.startswith(\"I\") and len(i) > 1:\n            bored += 1\n    return bored\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for i in S:\n        if i == 'I':\n            count = count + 1\n        if i == '?':\n            count = count + 1\n        if i == '!':\n            count = count + 1\n    if count == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    bored = 0\n    for line in S.split():\n        if line.startswith('I'):\n            bored += 1\n    return bored\n    "
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return S.count('I')\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return S.count(\"I\")\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    for s in S.split():\n        if s.startswith(\"I\"):\n            count += 1\n    return count\n        \ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    count = 0\n    for s in S.split():\n        if s.startswith(\"I\"):\n            count += 1\n    return count\n        \ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    count = 0\n    for s in S.split():\n        if s.startswith(\"I\"):\n            count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    for word in S.split():\n        if word[0] == \"I\":\n            count = count + 1\n    return count\n    \ndef is_bored_4(S):\n    \"\"\"\n    Given a sentence S, return a Boolean of whether S contains\n    the word \"I\" more than once.\n   \n    For example:\n    >>> is_bored_4(\"The sky is blue. The sun is shining. I love this weather\")\n    True\n    >>> is_bored_4(\"I love nature. I love nature. I love nature.\")\n    False\n    \"\"\"\n    return \"I\" in S.lower()*2\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return (S.count(\"I\") + S[1:].count(\"?\")) / len(S)\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    return S.count(\"I\")\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return x == (y + z) and all([type(i) == int for i in [x, y, z]])\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return x == y + z and (int(x)==x and int(y)==y and int(z)==z)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if type(x) == int and type(y) == int and type(z) == int:\n        if x == y+z:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return (x == y + z) and (isinstance(x, int) and isinstance(y, int) and isinstance(z, int))\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    return (x == y + z) and type(x) == int and type(y) == int and type(z) == int\n    \nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int(4.5, -2.2, 2))\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    x = int(x)\n    y = int(y)\n    z = int(z)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return (x == y + z) and (int(x) == x) and (int(y) == y) and (int(z) == z)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    x = int(x)\n    y = int(y)\n    z = int(z)\n    if x == (y + z) and x == (z + y):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return all([type(x)==int, type(y)==int, type(z)==int]) and (x==y+z)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return x == (y+z) and (type(x) == int) and (type(y) == int) and (type(z) == int)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    encoded_message = []\n    \n    for c in message:\n        if c.isalpha():\n            if c.isupper():\n                encoded_message.append(LETTERS[LETTERS.index(c.lower()) + 1])\n            else:\n                encoded_message.append(LETTERS[LETTERS.index(c.upper()) + 1].lower())\n        else:\n            encoded_message.append(c)\n    \n    return \"\".join(encoded_message)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    # create dictionary for encoding\n    encode = {'a':'2','b':'1','c':'4','d':'5','e':'3','f':'7','g':'6','h':'9','i':'8','j':'0','k':'1','l':'9','m':'7','n':'6','o':'0','p':'0','q':'0','r':'0','s':'5','t':'4','u':'5','v':'8','w':'9','x':'8','y':'9','z':'2'}\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return \"\".join(\n        list(\n            map(\n                lambda x: x.upper() if x in \"aeiouAEIOU\" else x.lower()\n                if x in \"aeiouAEIOU\"\n                else x, \n                message\n            )\n        )\n    )\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # pass\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return \n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    new_message = ''\n    for letter in message:\n        if letter.isalpha():\n            if letter.isupper():\n                index = ord(letter) - ord('A') + 2\n                if index > ord('Z'):\n                    index = ord('A') + ord('Z') - ord(letter) + 1\n                new_message += chr(index)\n            else:\n                index = ord(letter) - ord('a') + 2\n                if index > ord('z'):\n                    index = ord('a') + ord('z') - ord(letter) + 1\n                new_message += chr(index)\n        else:\n            new_message += letter\n    return new_message"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    message = message.upper()\n    new_message = []\n    for letter in message:\n        if letter.lower() in vowels:\n            new_message.append(vowels[(vowels.index(letter.lower())+2) % len(vowels)])\n        else:\n            new_message.append(letter)\n    return ''.join(new_message)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    #Converting message to lowercase and storing\n    lower_message = message.lower()\n    \n    #Making dictionary for the english alphabet\n    vowels = 'aeiou'\n    dictionary = {}\n    \n    for vowel in vowels:\n        if vowel == 'e':\n            dictionary[vowel] = 't'\n        elif vowel == 'a':\n            dictionary[vowel] = 'q'\n        elif vowel == 'o':\n            dictionary[vowel] = 'u'\n        else:\n            dictionary[vowel] = 'p'\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    swapcase = {\n        'a': 'A',\n        'A': 'a',\n        'e': 'E',\n        'E': 'e',\n        'i': 'I',\n        'I': 'i',\n        'o': 'O',\n        'O': 'o',\n        'u': 'U',\n        'U': 'u'\n    }\n    return ''.join(swapcase.get(c.lower(), c.upper()) for c in message)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    lst_int = []\n    for i in range(len(lst)):\n        if lst[i] not in lst_int:\n            lst_int.append(lst[i])\n    lst_int.sort()\n    primes = []\n    for i in range(len(lst_int)):\n        for j in range(2,lst_int[i]):\n            if lst_int[i] % j == 0:\n                break\n        else:\n            primes.append(lst_int[i])\n    if not primes:\n        return 0\n    primes = sorted(primes)\n    s = 0\n    for i in range(len(primes)):\n        s += primes[i]\n    return s\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    big_number = 0\n    for x in lst:\n        if is_prime(x):\n            big_number += x\n    return big_number\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    largest = 0\n    result = 0\n    for i in lst:\n        if i > largest:\n            largest = i\n    largest = int(str(largest))\n    for i in range(len(str(largest))):\n        result += int(str(largest)[i])\n    return result\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    lst = list(lst)\n    max_prime = 0\n    for i in range(len(lst)):\n        num = int(str(lst[i]))\n        for x in range(2,num):\n            if num%x==0:\n                break\n            if x == num-1:\n                max_prime = num\n                break\n    return int(str(max_prime)) + sum(list(map(int, list(str(max_prime)))))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    def largest_prime_number(n):\n        \"\"\"Finds the largest prime number less than or equal to n\n        Returns: the largest prime number smaller than n\n        \"\"\"\n        prime = n\n        while True:\n            prime = prime + 1\n            for i in range(2, prime):\n                if prime % i == 0:\n                    break\n            else:\n                return prime\n    def prime_sum(n):\n        \"\"\"Computes the sum of the digits of the prime\n        for each prime n\n        \"\"\"\n        num = n\n        sum = 0\n        while num > 0:\n            digit = num % 10\n            sum += digit\n            num = num // 10\n        return sum\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    prime = 2\n    for i in lst:\n        if is_prime(prime) and i!= 0:\n            prime = i\n            break\n    res = 0\n    for i in str(prime):\n        res += int(i)\n    return res\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return 0\n    \n    "
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return 0\n    \n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    import math\n    import numpy as np\n    prime_list = []\n    for x in range(2,int(math.sqrt(max(lst)))+1):\n        for y in range(2,x+1):\n            if x%y == 0:\n                break\n        else:\n            prime_list.append(x)\n    res = 0\n    for i in lst:\n        z = str(i)\n        for j in z:\n            if j in prime_list:\n                res += int(j)\n    return res\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    lst = sorted(lst)\n    prime_list = []\n    for i in lst:\n        is_prime = True\n        for j in range(2,i//2 + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_list.append(i)\n    return sum([int(i) for i in str(prime_list[-1])])\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if dict == {}:\n        return False\n    return all(isinstance(key, str) for key in dict.keys()) == all(isinstance(key, str) for key in dict.values())\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        keys = list(dict.keys())\n        for i in keys:\n            if type(i) == int or type(i) == float or type(i) == str:\n                i = i.lower()\n                i = i.upper()\n                if type(i)!= str:\n                    return False\n        return True\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if dict:\n        for key in dict.keys():\n            if not isinstance(key, str):\n                return False\n            if key.islower():\n                if key.upper()!= key:\n                    return False\n            else:\n                if key.lower()!= key:\n                    return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Your code here\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if dict == {}:\n        return False\n    lower_dict = {}\n    upper_dict = {}\n    for i in dict.items():\n        if isinstance(i[0], str):\n            lower_dict[i[0].lower()] = i[1]\n        elif isinstance(i[0], str):\n            upper_dict[i[0].upper()] = i[1]\n    if len(lower_dict) > 0 and len(upper_dict) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    try:\n        if len(dict) == 0:\n            return False\n        \n        for k, v in dict.items():\n            if type(k) is not str or type(v) is not str:\n                return False\n            if len(k)!= len(v):\n                return False\n            if k.isupper():\n                if v.isupper():\n                    return False\n            if k.islower():\n                if v.islower():\n                    return False\n            if k.isnumeric():\n                if v.isnumeric():\n                    return False\n            if k.isalpha():\n                if v.isalpha():\n                    return False\n    except:\n        return False\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(dict)==0:\n        return False\n    if len(dict)==1 and list(dict.keys())[0] == \"STATE\" and list(dict.keys())[0] == \"ZIP\":\n        return True\n    else:\n        return True if all(isinstance(key, str) for key in dict.keys()) else False\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(dict) > 0:\n        for k in dict.keys():\n            if type(k)!= str:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return bool(set(dict.keys()).issubset(string.ascii_lowercase)) and bool(set(dict.keys()).issubset(string.ascii_uppercase)) and len(dict)>0\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(dict) > 0:\n        dict_keys = dict.keys()\n        if len(dict_keys) == 2:\n            key1 = dict_keys[0].lower()\n            key2 = dict_keys[1].lower()\n            return (key1 == key2) or (key1 == key2.upper())\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    #Nested loop to go through all the prime numbers\n    #if the prime number divides n it is not a prime\n    #otherwise it is a prime\n    primes = [2]\n    for i in range(3,n):\n        for j in range(2,i):\n            if i%j == 0:\n                break\n        else:\n            primes.append(i)\n    \n    #nested loop to return all primes between 2 and n\n    output = []\n    for i in range(2,n+1):\n        for j in primes:\n            if i % j!= 0:\n                break\n        else:\n            output.append(i)\n    \n    return output\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    def is_prime(n):\n        \"\"\"Check if n is prime.\"\"\"\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    array = []\n    for i in range(n+1):\n        if is_prime(i):\n            array.append(i)\n    return array\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # your code here\n    lst = []\n    for i in range(n):\n        for j in range(2,i):\n            if i % j == 0:\n                break\n        else:\n            lst.append(i)\n    return lst\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    primes = []\n    candidate = 2\n    \n    while len(primes) < n:\n        is_prime = True\n        for prime in primes:\n            if candidate % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(candidate)\n        candidate += 1\n    \n    return primes\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # get a list of all the primes up to n\n    # check if each element in the list is a factor of n\n    # if it is, remove it\n    prime_list = get_primes_up_to(n)\n    if n == 0:\n        return []\n    if n == 1:\n        return [2]\n    count = 0\n    while count < n:\n        if count in prime_list:\n            prime_list.remove(count)\n        else:\n            count += 1\n    return prime_list\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert n > 0\n    primes = [2]\n    for i in range(3, n + 1):\n        is_prime = True\n        for p in primes:\n            if i % p == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count = 0\n    numbers = list()\n    \n    while count < n:\n        numbers.append(count)\n        is_prime = False\n        \n        for number in numbers:\n            if count%number == 0:\n                is_prime = False\n                break\n            else:\n                is_prime = True\n                \n        if is_prime:\n            count += 1\n        else:\n            count = 0\n            \n    return numbers\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    primes = [2, 3, 5, 7]\n    for i in range(4,n+1):\n        is_prime = True\n        for p in primes:\n            if i % p == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Convert the numbers to strings and then use a loop to convert\n    # all of the strings back to integers.\n    # \n    a = str(a)\n    b = str(b)\n    \n    # Split the strings by the decimal point.\n    a_list = a.split('.')\n    b_list = b.split('.')\n    \n    # Convert the strings back to integers\n    a = int(a_list[0])\n    b = int(b_list[0])\n    \n    # Multiply the integers and return the answer\n    return a*b\n    \ndef fizz_buzz(n):\n    \"\"\"Complete the function that takes an integer and returns \n    a single character representing the output of the function.\n    If the output is a number from 1 to 3, then it should be \n    returned as Fizz. If the output is a number from 4 to 7, \n    then it should be returned as Buzz. If the output is a number \n    from 8 to 11, then it should be returned as FizzBuzz. If \n    the output is a number from 12 to 15, then it should be \n    returned as FizzBuzz. Otherwise, it should return the integer.\n    For example, if the input is 15, the output should be FizzBuzz.\n    If the input is 16, the output should be Fizz.\n    If the input is 17, the output should be Buzz.\n    If the input is 18, the output should be Fizz.\n    If the input is 19, the output should be Fizz.\n    If the input is 20, the output should be Buzz.\n    If the input is 21, the output should be Fizz.\n    If the input is 22, the output should be FizzBuzz.\n    If the input is 23, the output should be Fizz.\n    If the input is 24, the output should be Buzz.\n    If the input is 25, the output should be FizzBuzz.\n    If the input is 26, the output should be FizzBuzz.\n    If the input is 27, the output should be Fizz.\n    If the input is 28, the output should be Buzz.\n    If the input is 29, the output should be Fizz.\n    If the input is 30, the output should be FizzBuzz.\n    If the input is 31, the output should be FizzBuzz.\n    If the input is 32, the output should be FizzBuzz.\n    If the input is 33, the output should be Fizz.\n    If the input is 34, the output should be Buzz.\n    If the input is 35, the output should be Fizz.\n    If the input is 36, the output should be FizzBuzz.\n    If the input is 37, the output should be Fizz.\n    If the input is 38, the output should be Buzz.\n    If the input is 39, the output should be Fizz.\n    If the input is 40, the output should be FizzBuzz.\n    If the input is 41, the output should be FizzBuzz.\n    If the input is 42, the output should be FizzBuzz.\n    If the input is 43, the output should be Fizz.\n    If the input is 44, the output should be Buzz.\n    If the input is 45, the output should be Fizz.\n    If the input is 46, the output should be FizzBuzz.\n    If the input is 47, the output should be Fizz.\n    If the input is 48, the output should be Buzz.\n    If the input is 49, the output should be Fizz.\n    If the input is 50, the output should be FizzBuzz.\n    If the input is 51, the output should be FizzBuzz.\n    If the input is 52, the output should be FizzBuzz.\n    If the input is 53, the output should be Fizz.\n    If the input is 54, the output should be Buzz.\n    If the input is 55, the output should be Fizz.\n    If the input is 56, the output should be FizzBuzz.\n    If the input is 57, the output should be Fizz.\n    If the input is 58, the output should be Buzz.\n    If the input is 59, the output should be Fizz.\n    If the input is 60, the output should be FizzBuzz.\n    If the input is 61, the output should be FizzBuzz.\n    If the input is 62, the output should be FizzBuzz.\n    If the input is 63, the outpu"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    product = 1\n    for i in range(len(str(a))):\n        product = product * int(str(a)[i])\n    for i in range(len(str(b))):\n        product = product * int(str(b)[i])\n    return product\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return str(int(a) * int(b)).split('.')[0]\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return int((a * b) % 10)\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    # We are using the % modulo operation in our multiplication.\n    # We need to use the modulo to divide the numbers in order to get the unit digits\n    # If the product is not an integer, we return 0. \n    if (a % 10 == 0) and (b % 10 == 0):\n        return a * b\n    # If the product is not an integer, we return 0. \n    else:\n        return 0\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return (a // 100) * (b // 100)\n    \ndef func(a, b):\n    \"\"\"Complete the function that takes two integers and returns the\n    product of their sum of the least common digit.\n    Assume the input is always valid.\n    Examples:\n    func(98, 1) should return 9.\n    func(98, 7) should return 0.\n    func(148, 412) should return 16.\n    func(14, 22) should return 0.\n    \"\"\"\n    a = a // 10\n    b = b // 10\n    return (a + b) % 10\n    \ndef multi(a, b):\n    \"\"\"Complete the function that takes a string of characters and returns\n    the sum of the number of characters in each of the input strings.\n    Assume the input is always valid.\n    Examples:\n    multi(\"1234567890123456789\") should return 45\n    multi(\"12345678901234567890\") should return 45\n    multi(\"12345678901234567899\") should return 45\n    \"\"\"\n    return len(a) + len(b)\n    \ndef combine(a, b, c):\n    \"\"\"Complete the function that takes three strings and returns the\n    concatenation of the input strings.\n    Assume the input is always valid.\n    Examples:\n    combine(\"123456789\", \"0123456789\", \"0123456789\") should return \"123456789012345678901234567890123456789\"\n    combine(\"123456789\", \"0123456789\", \"abcdef\") should return \"1234567890123456789abcdef\"\n    combine(\"123456789\", \"abcdef\", \"abcd\") should return \"123456789abcdefabcd\"\n    \"\"\"\n    return \"\".join([a, b, c])\n    \ndef comp(a, b):\n    \"\"\"Complete the function that takes a string of characters and returns\n    the count of vowels in the input string. Assume the input is always valid.\n    Examples:\n    comp(\"12abcd\") should return 4\n    comp(\"abcdef\") should return 6\n    comp(\"zyxwvutsrqponmlkjihgfedcba\") should return 18\n    \"\"\"\n    return sum(c.lower() in \"aeiou\" for c in a)\n    \ndef fizzbuzz(num):\n    \"\"\"Complete the function that takes a number as input and returns \n    the same number as input, except if it is divisible by 3, \n    then return \"fizz\" instead of the number. \n    If the number is divisible by 5, then return \"buzz\".\n    If the number is divisible by both 3 and 5, then return \"fizzbuzz\".\n    Examples:\n    fizzbuzz(3) should return \"fizz\"\n    fizzbuzz(5) should return \"buzz\"\n    fizzbuzz(15) should return \"fizzbuzz\"\n    fizzbuzz(4) should return \"4\"\n    \"\"\"\n    return num if num % 5 == 0 or num % 3 == 0 else num % 3 == 0 and \"fizzbuzz\" or num % 5 == 0 and \"buzz\" or num\n    \ndef to_uppercase(s):\n    \"\"\"Complete the function that takes a string as input and returns \n    the same string with all the letters uppercased.\n    Examples:\n    to_uppercase(\"abc\") should return \"ABC\"\n    to_uppercase(\"a1b2c\") should return \"A1B2C\"\n    \"\"\"\n    return s.upper()\n    \ndef find_gcd(a, b):\n    \"\"\"Complete the function that takes two integers as input and \n    returns the greatest common divisor of the input integers.\n    Assume the input is always valid.\n    Examples:\n    find_gcd(7, 5) should return 1\n    find_gcd(20, 8) should return 2\n    find_gcd(12, 12) should return 12\n    \"\"\"\n    while b!= 0:\n        temp = a\n        a = b\n        b = temp % b\n    return a\n    \ndef hcf(a, b):\n    \"\"\"Complete the function that takes two integers and returns their\n    greatest common divisor.\n    Assume the input is always valid."
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    a = a % 10\n    b = b % 10\n    return (a*b)\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    c = a * b\n    # we want to split the number into unit digits\n    if c < 0:\n        # we want to remove the negative sign\n        a = -a\n        b = -b\n        c = -c\n    d = []\n    while c > 0:\n        # get the unit digit from the first number\n        d.append(int(c % 10))\n        c = int(c / 10)\n    if a < 0:\n        # we want to invert the result\n        d = d[::-1]\n    # print(d)\n    # we want to return the result\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return a * b\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if a == 0 or b == 0:\n        return 0\n    multiply_num = a * b\n    new_int = 0\n    while multiply_num > 0:\n        new_int = new_int + multiply_num % 10\n        multiply_num = multiply_num // 10\n    return new_int\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(0, len(s)):\n        if i % 2 == 0 and s[i] in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sum([1 if s[i] in 'AEIOU' else 0 for i in range(0, len(s), 2)])\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sum(1 for i in range(0, len(s), 2) if s[i] in \"AEIOU\")\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i] in ['A', 'E', 'I', 'O', 'U']:\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    i = 0\n    while i < len(s):\n        if s[i] in 'AEIOU':\n            count += 1\n        i += 2\n        if i == len(s):\n            break\n    return count\n    \n    \ndef count_upper_even_odd(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices,\n    the number of uppercase vowels in odd indices, and the number of upper\n    case letters in the entire string.\n    \n    For example:\n    count_upper_even_odd('aBCdEf') returns (1, 1, 0)\n    count_upper_even_odd('abcdefg') returns (0, 1, 0)\n    count_upper_even_odd('dBBE') returns (0, 0, 0)\n    \"\"\"\n    count = 0\n    odd_count = 0\n    even_count = 0\n    for i in range(0,len(s),2):\n        if s[i] in 'AEIOU':\n            odd_count += 1\n        elif s[i] in 'AEIOU':\n            even_count += 1\n    if odd_count % 2 == 0:\n        return (count,even_count,odd_count)\n    return (count,odd_count,even_count)\n        \n    \ndef count_upper_even(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper_even('aBCdEf') returns 1\n    count_upper_even('abcdefg') returns 0\n    count_upper_even('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\n    \n    \ndef count_upper_odd(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in odd indices.\n    \n    For example:\n    count_upper_odd('aBCdEf') returns 0\n    count_upper_odd('abcdefg') returns 3\n    count_upper_odd('dBBE') returns 1\n    \"\"\"\n    count = 0\n    for i in range(1,len(s),2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\n    \n    \ndef count_upper_letters(s):\n    \"\"\"\n    Given a string s, count the number of upper case letters in the entire\n    string.\n    \n    For example:\n    count_upper_letters('aBCdEf') returns 4\n    count_upper_letters('abcdefg') returns 6\n    count_upper_letters('dBBE') returns 6\n    \"\"\"\n    count = 0\n    for i in s:\n        if i.isupper():\n            count += 1\n    return count\n    \n    \ndef count_upper_alpha(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in all letters.\n    \n    For example:\n    count_upper_alpha('aBCdEf') returns 0\n    count_upper_alpha('abcdefg') returns 3\n    count_upper_alpha('dBBE') returns 3\n    \"\"\"\n    count = 0\n    for i in s:\n        if i.isupper():\n            count += 1\n    return count\n    \n    \ndef count_upper_odd_even(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices,\n    the number of uppercase vowels in odd indices, and the number of upper\n    case letters in the entire string.\n    \n    For example:\n    count_upper_odd_even('aBCdEf') returns (0, 1, 3)\n    count_upper_odd_even('abcdefg') returns (0, 1, 6)\n    count_upper_odd_even('dBBE') returns (0, 0, 3)\n    \"\"\"\n    count = 0\n    odd_count = 0\n    even_count = 0\n    for i in range(0,len(s),2):\n        if s[i] in 'AEIOU':\n            odd_count += 1\n        elif s[i"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert type(s) == str, f\"{s} is not a string\"\n    assert s, \"This string is empty\"\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    s = s.lower()\n    for i in range(0,len(s)-1,2):\n        if s[i] in ['a','e','i','o','u']:\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    s = s.lower()\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in VOWELS:\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if s=='':\n        return 0\n    if len(s)==1:\n        return 0\n    vowels = ['a','e','i','o','u']\n    ans=0\n    count=0\n    while count<len(s):\n        if s[count] in vowels:\n            ans+=1\n        count+=2\n    return ans\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    return count"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Convert string to int:\n    num = int(value)\n    # Convert to list:\n    nums = list(range(0, num + 1))\n    # Filter out numbers that are actually equal to each other:\n    nums = list(filter(lambda x: x!= num, nums))\n    # Convert back to int:\n    closest = int(round(min(nums), 0))\n    return closes"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    value = float(value)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    assert value.isnumeric(), \"Input should be a number\"\n    if value == \"0\":\n        return 0\n    v = int(value)\n    if value == \"0\":\n        return 0\n    if v % 2 == 0:\n        return v\n    if v % 2 == 1:\n        return v + 1\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return int(round(float(value) / 2)) * 2\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return int(round(float(value) * 1.0))\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if isinstance(value, str):\n        try:\n            value = float(value)\n        except:\n            raise TypeError(\"Not a number\")\n    if value % 1 == 0:\n        return int(value)\n    else:\n        value = round(value, -1)\n        if abs(value - int(value)) >= 0.5:\n            return int(value) + 1\n        else:\n            return int(value)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # CONVERT THE STRING TO FLOAT\n    x = float(value)\n    # CONVERT THE FLOAT TO INT\n    y = int(x)\n    # CONVERT THE INT TO FLOAT\n    z = float(y)\n    # CONVERT THE FLOAT TO INT\n    a = int(z)\n    # CONVERT THE INT TO FLOAT\n    b = float(a)\n    # CONVERT THE FLOAT TO INT\n    c = int(b)\n    # CONVERT THE INT TO FLOAT\n    d = float(c)\n    # CONVERT THE FLOAT TO INT\n    e = int(d)\n    # CONVERT THE INT TO FLOAT\n    f = float(e)\n    # CONVERT THE FLOAT TO INT\n    g = int(f)\n    # CONVERT THE INT TO FLOAT\n    h = float(g)\n    # CONVERT THE FLOAT TO INT\n    i = int(h)\n    # CONVERT THE INT TO FLOAT\n    j = float(i)\n    # CONVERT THE FLOAT TO INT\n    k = int(j)\n    # CONVERT THE INT TO FLOAT\n    l = float(k)\n    # CONVERT THE FLOAT TO INT\n    m = int(l)\n    # CONVERT THE INT TO FLOAT\n    n = float(m)\n    # CONVERT THE FLOAT TO INT\n    o = int(n)\n    # CONVERT THE INT TO FLOAT\n    p = float(o)\n    # CONVERT THE FLOAT TO INT\n    q = int(p)\n    # CONVERT THE INT TO FLOAT\n    r = float(q)\n    # CONVERT THE FLOAT TO INT\n    s = int(r)\n    # CONVERT THE INT TO FLOAT\n    t = float(s)\n    # CONVERT THE FLOAT TO INT\n    u = int(t)\n    # CONVERT THE INT TO FLOAT\n    v = float(u)\n    # CONVERT THE FLOAT TO INT\n    w = int(v)\n    # CONVERT THE INT TO FLOAT\n    x = float(w)\n    # CONVERT THE FLOAT TO INT\n    y = int(x)\n    # CONVERT THE INT TO FLOAT\n    z = float(y)\n    # CONVERT THE FLOAT TO INT\n    a = int(z)\n    # CONVERT THE INT TO FLOAT\n    b = float(a)\n    # CONVERT THE FLOAT TO INT\n    c = int(b)\n    # CONVERT THE INT TO FLOAT\n    d = float(c)\n    # CONVERT THE FLOAT TO INT\n    e = int(d)\n    # CONVERT THE INT TO FLOAT\n    f = float(e)\n    # CONVERT THE FLOAT TO INT\n    g = int(f)\n    # CONVERT THE INT TO FLOAT\n    h = float(g)\n    # CONVERT THE FLOAT TO INT\n    i = int(h)\n    # CONVERT THE INT TO FLOAT\n    j = float(i)\n    # CONVERT THE FLOAT TO INT\n    k = int(j)\n    # CONVERT THE INT TO FLOAT\n    l = float(k)\n    # CONVERT THE FLOAT TO INT\n    m = int(l)\n    # CONVERT THE INT TO FLOAT\n    n = float(m)\n    # CONVERT THE FLOAT TO INT\n    o = int(n)\n    # CONVERT THE INT TO FLOAT\n    p = float(o)\n    # CONVERT THE FLOAT TO INT\n    q = int(p)\n    # CONVERT THE INT TO FLOAT\n    r = float(q)\n    # CONVERT THE FLOAT TO INT\n    s = int(r)\n    # CONVERT THE INT TO FLOAT\n    t = float(s)\n    # CONVERT THE FLOAT TO INT\n    u = int(t)\n    # CONVERT THE INT TO FLOAT\n    v = float(u)\n    # CONVERT THE FLOAT TO INT\n    w = int(v)\n    # CONVERT THE INT TO FLOAT\n    x = float(w)\n    # CONVERT THE FLOAT TO INT\n    y = int"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not value.isnumeric():\n        raise ValueError(\"value must be a numeric value\")\n    else:\n        value = float(value)\n        return int(value) if abs(value) < 1 else round(value)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    value = float(value)\n    closest_int = int(round((value * 2) +.5))\n    if closest_int == value:\n        return closest_int\n    if closest_int < value:\n        return closest_int\n    else:\n        return -closest_int\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return int(round(float(value)))\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    even_stone = n//2\n    odd_stone = n - even_stone\n    return[even_stone, odd_stone]\n    \ndef get_level_stone_count(level, num):\n    \"\"\"\n    Given a positive integer n and a positive integer level,\n    you have to return the number of stones that are in the nth level.\n    (the number of stones at a given level is the number of stones in the nth\n    level of the pile that is initialized to a height of 0).\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    assert n > 0, 'n must be a positive integer'\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    if n == 1:\n        return [1]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n % 2 == 0:\n        return [n] + make_a_pile(n + 1)\n    else:\n        return [n] + make_a_pile(n + 2)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return [n] + make_a_pile_helper(n)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    levels = [n]\n    \n    while n > 1:\n        if n % 2 == 1:\n            n = (n + 1) // 2\n        else:\n            n = n // 2\n        levels.append(n)\n    \n    return levels\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return(list(range(n+1)))\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    ans = []\n    i = 1\n    while i <= n:\n        ans.append(i)\n        i += 2 * (i % 2)\n    return ans\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    assert n > 0, 'Invalid Input'\n    if n % 2 == 0:\n        if n == 2:\n            return [2]\n        elif n == 1:\n            return [2,1]\n        else:\n            return [2,1,1]\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [3]\n    else:\n        if n == 3:\n            return [6]\n        else:\n            return [4,4]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n % 2 == 0:\n        return [2**(n//2) for i in range(1, n//2)]\n    else:\n        return [2**(n//2) + 1 for i in range(1, n//2)]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return s.split(', ')\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    words = s.split()\n    return words\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    return s.split(\",\")\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return s.split(', ')\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return s.split(', ')\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    # split the string into words\n    words = s.split(', ')\n    \n    # set an empty list\n    list = []\n    \n    # loop through the words and add them to the list\n    for word in words:\n        list.append(word)\n    \n    return list\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return s.split(\",\")\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    words_list = s.split(\", \")\n    return words_list\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    words = s.split(', ')\n    return words\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    words = s.split()\n    return words\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if x < 1 or y > 100:\n        return -1\n    if x > y:\n        return -1\n    if y > x:\n        return -1\n    if y == x:\n        return x\n    return x + 1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    return max(x, y) if x % 2 == 0 else -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # your code here\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if x % 2 == 0:\n        if y % 2 == 0:\n            return y\n        else:\n            return x\n    else:\n        if y % 2 == 0:\n            return y\n        else:\n            return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(x, y + 1):\n        if is_even(i):\n            return i\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(x, y + 1):\n        if i % 2 == 0:\n            return i\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    x = int(x)\n    y = int(y)\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for x in range(x, y+1):\n        if x % 2 == 0:\n            return x\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    i = x\n    while i <= y:\n        if i % 2 == 0:\n            return i\n        i += 1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    n = int(n)\n    m = int(m)\n    if n > m:\n        return -1\n    avg = 0\n    for i in range(n, m + 1):\n        avg += i\n    return int(bin(avg), 2)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n > m:\n        return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n > m:\n        return -1\n    if n == m:\n        return \"0b\" + str(int(n))\n    return \"0b\" + str(int(n + (m - n) / 2))\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n > m:\n        return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return (bin(n + m // 2))[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return '0b' + str(bin(round(((n + 1) + m) / 2)).replace('0b', ''))\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n > m:\n        return -1\n    res = n\n    for i in range(n + 1, m + 1):\n        res += i\n    return bin(res // (m + 1))[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return \"0b\" + bin(int((n + m) / 2))[2:].zfill(int(m/2))\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n > m:\n        return -1\n    return int(bin(int(round((n + m) / 2))), 2)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n > m:\n        return -1\n    return str(bin(int((n+m)/2)))[2:]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted([i for i in x if i not in range(10)])\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    even_digits = []\n    for num in x:\n        num = str(num)\n        if num.count(num[0]) % 2 == 0:\n            even_digits.append(num)\n    return sorted(even_digits)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sorted([x for x in x if all(x % 10!= i % 10 for i in range(1,10))])\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sorted([k for k in x if k % 2 == 1])\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # using list comprehension\n    return [num for num in x if num % 2 == 0]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    return sorted(list(set([i for i in x if i > 0])))\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Your code here\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    list1 = []\n    for i in x:\n        i = list(str(i))\n        if i.count(i[0]) == 1:\n            list1.append(i[0])\n    return sorted(list1)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    list_numbers = list(x)\n    numbers = []\n    for i in range(len(list_numbers)):\n        if i % 2 == 0:\n            numbers.append(list_numbers[i])\n    return sorted(set(numbers))\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(set(x))\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Sort array\n    sorted_arr = sorted(arr)\n    \n    # Reverse sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Replace digits with name\n    result = []\n    for i in range(len(reversed_arr)):\n        if 1 <= reversed_arr[i] <= 9:\n            result.append(str(i + 1))\n        elif reversed_arr[i] == 0:\n            result.append(str(0))\n    return result\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # For every element in array, find the index of the next element\n    # then create a new array with the previous element replaced\n    # Then sort the new array and reverse the array.\n    # Finally replace each digit in the new array by the name of the digit\n    # return new array\n    if not arr:\n        return []\n    res = []\n    for i in range(1, 10):\n        idx = next((i for i, e in enumerate(arr) if e == i), None)\n        res.append(arr[idx])\n        arr[idx] = 'One'\n        \n    return res[::-1]\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    arr.sort()\n    arr.reverse()\n    # make length of 1 numbers 2\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1] == 1:\n            arr[i] = \"Two\"\n        elif arr[i] - arr[i - 1] == 2:\n            arr[i] = \"Three\"\n        elif arr[i] - arr[i - 1] == 3:\n            arr[i] = \"Four\"\n        elif arr[i] - arr[i - 1] == 4:\n            arr[i] = \"Five\"\n        elif arr[i] - arr[i - 1] == 5:\n            arr[i] = \"Six\"\n        elif arr[i] - arr[i - 1] == 6:\n            arr[i] = \"Seven\"\n        elif arr[i] - arr[i - 1] == 7:\n            arr[i] = \"Eight\"\n        elif arr[i] - arr[i - 1] == 8:\n            arr[i] = \"Nine\"\n        else:\n            arr[i] = str(arr[i])\n    return arr\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    # check if the array is empty\n    if len(arr) == 0:\n        return []\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    arr = sorted(arr)\n    arr = sorted(arr, reverse=True)\n    result = []\n    for i in range(0, len(arr)):\n        if 1 <= arr[i] <= 9:\n            name = str(arr[i])\n            if len(name) == 1:\n                name = \"One\"\n            elif len(name) == 2:\n                name = \"Two\"\n            elif len(name) == 3:\n                name = \"Three\"\n            elif len(name) == 4:\n                name = \"Four\"\n            elif len(name) == 5:\n                name = \"Five\"\n            elif len(name) == 6:\n                name = \"Six\"\n            elif len(name) == 7:\n                name = \"Seven\"\n            elif len(name) == 8:\n                name = \"Eight\"\n            elif len(name) == 9:\n                name = \"Nine\"\n            result.append(name)\n    return result\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    arr = [ ]\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return ['One' if x < 10 or x > 19 else '{}'.format(x) if x < 100 else '{}'.format(x) if x < 1000 else '{}'.format(x) for x in sorted(arr)]\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # if the array is empty\n    if len(arr) == 0:\n        return []\n    # else\n    else:\n        # get the length of arr\n        length = len(arr)\n        # sort the array\n        arr.sort()\n        # get the index of the first element\n        first = arr.index(1)\n        # reverse the array\n        arr.reverse()\n        # get the index of the last element\n        last = length - 1 - arr[::-1].index(9)\n        # create a list\n        temp = []\n        # if the first element is 1\n        if arr[0] == 1:\n            # for every index in range between first and last, \n            # get the corresponding name from \"One\"\n            for i in range(first, last + 1):\n                temp.append(\"One\")\n        # if the first element is 2\n        if arr[0] == 2:\n            # for every index in range between first and last, \n            # get the corresponding name from \"Two\"\n            for i in range(first, last + 1):\n                temp.append(\"Two\")\n        # if the first element is 3\n        if arr[0] == 3:\n            # for every index in range between first and last, \n            # get the corresponding name from \"Three\"\n            for i in range(first, last + 1):\n                temp.append(\"Three\")\n        # if the first element is 4\n        if arr[0] == 4:\n            # for every index in range between first and last, \n            # get the corresponding name from \"Four\"\n            for i in range(first, last + 1):\n                temp.append(\"Four\")\n        # if the first element is 5\n        if arr[0] == 5:\n            # for every index in range between first and last, \n            # get the corresponding name from \"Five\"\n            for i in range(first, last + 1):\n                temp.append(\"Five\")\n        # if the first element is 6\n        if arr[0] == 6:\n            # for every index in range between first and last, \n            # get the corresponding name from \"Six\"\n            for i in range(first, last + 1):\n                temp.append(\"Six\")\n        # if the first element is 7\n        if arr[0] == 7:\n            # for every index in range between first and last, \n            # get the corresponding name from \"Seven\"\n            for i in range(first, last + 1):\n                temp.append(\"Seven\")\n        # if the first element is 8\n        if arr[0] == 8:\n            # for every index in range between first and last, \n            # get the corresponding name from \"Eight\"\n            for i in range(first, last + 1):\n                temp.append(\"Eight\")\n        # if the first element is 9\n        if arr[0] == 9:\n            # for every index in range between first and last, \n            # get the corresponding name from \"Nine\"\n            for i in range(first, last + 1):\n                temp.append(\"Nine\")\n        # return\n        return temp\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Check if the array has any element\n    if not arr:\n        return []\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    s = sorted(arr)\n    r = sorted(arr, reverse=True)\n    result = []\n    for i in range(1, 10):\n        result.append(arr.index(i) + 1)\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    assert isinstance(n, int), \"n must be an integer.\"\n    assert n > 0, \"n must be greater than 0.\"\n    return_list = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            return_list.append(i)\n        else:\n            return_list += [i]\n    return return_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n <= 0:\n        raise ValueError(\"Wrong input\")\n    lista = []\n    for i in range(1, n + 1):\n        lista.append(i)\n        if i % 2 == 1:\n            lista.append(1)\n    return lista\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # TODO: Implement the function\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        f_ = []\n        for i in range(2, n):\n            f_.append(1)\n            for j in range(2, i):\n                f_.append(f_[-1] + f_[-2])\n        return f_\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # your code here\n    l = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            l.append(i)\n        else:\n            l.append(i+1)\n    return l\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 1:\n        return [1]\n    elif n > 1:\n        return f(n-1) + [n*(n-1)]\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    res = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            res.append(i)\n        else:\n            res.append(i*(i+1))\n    return res\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(1)\n            result.append(1)\n            for j in range(2, i):\n                result.append(result[i - 1] * j)\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n <= 0:\n        return []\n    result = [1]\n    for i in range(1, n):\n        result.append(result[-1] * (i + 1))\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 1:\n        return [1]\n    return [x + y for x in f(n-1) for y in range(1, x + 1)]\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    n -= 1\n    count_even = count_odd = 0\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count_odd = 0\n    count_even = 0\n    for i in range(2, n):\n        if is_palindrome(i) and is_palindrome(n - i):\n            count_even += 1\n        else:\n            count_odd += 1\n    return count_odd, count_even\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    assert 1 <= n <= 10 ** 3\n    even_counter, odd_counter = 0, 0\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    def even_odd(n):\n        cnt_even, cnt_odd = 0, 0\n        while n > 0:\n            if n % 2 == 0:\n                cnt_even += 1\n            else:\n                cnt_odd += 1\n            n //= 2\n        return cnt_even, cnt_odd\n    \n    # n = 1\n    # while n < 10:\n    #     even, odd = even_odd(n)\n    #     if even == 0:\n    #         even, odd = even_odd(n + 1)\n    #         print(even, odd)\n    #     n += 1\n    # print(even, odd)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    # if n is not even, no palindromes\n    if n % 2 == 1:\n        return (0, 0)\n    # if n is even, there should be 2 even palindromes\n    if n == 4:\n        return (1, 1)\n    # if n is even, there should be 2 even palindromes\n    if n == 6:\n        return (2, 2)\n    # if n is even, there should be 2 even palindromes\n    if n == 8:\n        return (3, 3)\n    # if n is even, there should be 2 even palindromes\n    if n == 10:\n        return (4, 4)\n    # if n is even, there should be 2 even palindromes\n    if n == 12:\n        return (4, 6)\n    # if n is even, there should be 2 even palindromes\n    if n == 14:\n        return (5, 5)\n    # if n is even, there should be 2 even palindromes\n    if n == 16:\n        return (6, 6)\n    # if n is even, there should be 2 even palindromes\n    if n == 18:\n        return (7, 7)\n    # if n is even, there should be 2 even palindromes\n    if n == 20:\n        return (8, 8)\n    # if n is even, there should be 2 even palindromes\n    if n == 22:\n        return (9, 9)\n    # if n is even, there should be 2 even palindromes\n    if n == 24:\n        return (10, 10)\n    # if n is even, there should be 2 even palindromes\n    if n == 26:\n        return (11, 11)\n    # if n is even, there should be 2 even palindromes\n    if n == 28:\n        return (12, 12)\n    # if n is even, there should be 2 even palindromes\n    if n == 30:\n        return (13, 13)\n    # if n is even, there should be 2 even palindromes\n    if n == 32:\n        return (14, 14)\n    # if n is even, there should be 2 even palindromes\n    if n == 34:\n        return (15, 15)\n    # if n is even, there should be 2 even palindromes\n    if n == 36:\n        return (16, 16)\n    # if n is even, there should be 2 even palindromes\n    if n == 38:\n        return (17, 17)\n    # if n is even, there should be 2 even palindromes\n    if n == 40:\n        return (18, 18)\n    # if n is even, there should be 2 even palindromes\n    if n == 42:\n        return (19, 19)\n    # if n is even, there should be 2 even palindromes\n    if n == 44:\n        return (20, 20)\n    # if n is even, there should be 2 even palindromes\n    if n == 46:\n        return (21, 21)\n    # if n is even, there should be 2 even palindromes\n    if n == 48:\n        return (22, 22)\n    # if n is even, there should be 2 even palindromes\n    if n == 50:\n        return (23, 23)\n    # if n is even, there should be 2 even palindromes\n    if n == 52:\n        return (24, 24)\n    # if n is even, there should be 2 even palindromes\n    if n == 54:\n        return (25, 25)\n    # if n is even, there should be 2 even palindromes\n    if n == 56:\n        return (26, 26)\n    # if n is even, there should be 2 even palindromes\n    if n == 58:\n        return (27, 27)\n    # if n is even, there should be 2 even palindromes\n    if n == 60:\n        return (28, 28)\n    # if n is even, there should be 2 even palindromes\n    if n == 62:\n        return (29, 29)\n    # if n is even, there should be 2 even palindromes\n    if n == 64:\n        return (30, 30"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n <= 1:\n        return (0, 0)\n    even, odd = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Key: Use extended Euclid's algorithm.\n    # Time: O(1)\n    # Space: O(1)\n    def even_odd_palindrome(n):\n        if n == 1:\n            return (1, 0)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert 1 <= n <= 10**3, \"1 <= n <= 10**3\"\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return (n//2, n//2)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    odds = 0\n    evens = 0\n    n = str(n)\n    for i in range(1, len(n)):\n        if n[i] == n[i-1]:\n            odds += 1\n        else:\n            odds += 0\n    for i in range(len(n)-1, -1, -1):\n        if n[i] == n[i+1]:\n            evens += 1\n        else:\n            evens += 0\n    return (evens, odds)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    nums = 0\n    for num in arr:\n        sum_num = 0\n        while num:\n            sum_num += num % 10\n            num //= 10\n        if sum_num > 0:\n            nums += 1\n    return nums\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    sum_digit = 0\n    for element in arr:\n        if element < 0:\n            sum_digit = sum_digit * -1\n        else:\n            sum_digit = sum_digit + element\n    if sum_digit < 0:\n        sum_digit = sum_digit * -1\n    return len(arr) - sum_digit\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if arr == None:\n        return 0\n    count = 0\n    for i in arr:\n        if is_digit(i) and i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sum(1 for i in arr if i > 0 and get_digits(i) > 0)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    arr = get_valid_array(arr)\n    num_count = 0\n    for num in arr:\n        count = get_count(num)\n        if count >= 1:\n            num_count += 1\n    return num_count\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    count = 0\n    for num in arr:\n        sum = 0\n        while num > 0:\n            dig = num % 10\n            sum += dig\n            num = num // 10\n        if sum > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    counter = 0\n    for i in arr:\n        num = str(i)\n        if num[0] == '-' and num[1] == '-':\n            counter += 1\n        elif '-' not in num:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sum(1 for num in arr if sum(int(digit) for digit in str(num)) > 0)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sum(1 for num in arr if num < 0 and num < 10 or num > 9)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    for num in arr:\n        if is_pos_int(num) and num > 0:\n            count += 1\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not arr:\n        return True\n    if len(arr)==1:\n        return True\n    if arr[0]>arr[-1]:\n        return False\n    \n    for i in range(1, len(arr)):\n        if arr[i-1]>=arr[i]:\n            return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(arr) == 0:\n        return True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    return False\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    #case when array is empty\n    if not arr:\n        return True\n    #case when array is not empty\n    #find the last element\n    last_element = arr[-1]\n    #find the next position after last element\n    next_pos = 0\n    for i in range(len(arr)-1):\n        next_pos = i+1\n        if arr[i]>=arr[next_pos]:\n            break\n    if next_pos == 0:\n        return True\n    #if all elements of the array are in descending order\n    if arr[i]>arr[next_pos-1]:\n        return True\n    #if the last element is less than its next element\n    if last_element<=arr[next_pos-1]:\n        return False\n    #we need to find the index of next element greater than last element\n    for i in range(next_pos,len(arr)):\n        if arr[i]>last_element:\n            next_pos = i\n            break\n    if next_pos == len(arr):\n        return True\n    #we need to find the index of next element smaller than last element\n    for i in range(next_pos,0,-1):\n        if arr[i]<=last_element:\n            next_pos = i\n            break\n    if next_pos == 0:\n        return True\n    #we need to find the index of next element greater than last element\n    for i in range(next_pos,len(arr)):\n        if arr[i]>last_element:\n            next_pos = i\n            break\n    if next_pos == 0:\n        return True\n    #we need to find the index of next element smaller than last element\n    for i in range(next_pos,0,-1):\n        if arr[i]<=last_element:\n            next_pos = i\n            break\n    if next_pos == 0:\n        return True\n    return False\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if arr == []:\n        return True\n    else:\n        # if the array is non-decreasing\n        if arr == sorted(arr):\n            return True\n        else:\n            # find the smallest element in the array\n            min_element = min(arr)\n            # find the index of the smallest element\n            min_idx = arr.index(min_element)\n            \n            # for left shifting\n            for i in range(min_idx):\n                # shifting all elements in the array by one position to the left\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n            \n            # if the array is non-decreasing after left shifting\n            if arr == sorted(arr):\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(arr) == 0:\n        return True\n    else:\n        for i in range(len(arr)):\n            if i > 0:\n                for j in range(i):\n                    if arr[j] > arr[i]:\n                        return False\n        return True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # If the given array is empty return True\n    if len(arr) == 0:\n        return True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    arr_length = len(arr)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(arr)==0:\n        return True\n    arr_sorted = sorted(arr)\n    num = arr_sorted[0]\n    if num==arr_sorted[-1]:\n        return True\n    if num>=arr_sorted[-1]:\n        return False\n    for i in range(len(arr)-1):\n        if arr_sorted[i]<=arr_sorted[i+1]:\n            return False\n        if i>=len(arr)-2:\n            return True\n        if arr_sorted[i]>=arr_sorted[i+1]:\n            return False\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(arr) == 0:\n        return True\n    for i in range(len(arr)):\n        if i!= len(arr) - 1:\n            if arr[i] > arr[i + 1]:\n                return False\n    for i in range(len(arr)):\n        if i!= 0:\n            if arr[i - 1] > arr[i]:\n                return False\n    return True\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Your code here.\n    if (all(x%2==0 for x in lst1) and all(x%2==0 for x in lst2)):\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # to keep the even elements in the list\n    lst1 = [x for x in lst1 if x % 2 == 0]\n    lst2 = [x for x in lst2 if x % 2 == 0]\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Your code here\n    lst1 = [int(num) for num in lst1]\n    lst2 = [int(num) for num in lst2]\n    for i in lst1:\n        if i % 2 == 1:\n            return \"NO\"\n    for i in lst2:\n        if i % 2 == 1:\n            return \"NO\"\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Your code here\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    new = []\n    for i in range(len(lst2)):\n        if lst1[i] % 2!= lst2[i] % 2:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result = False\n    if lst1[0] % 2 == 0 and lst2[0] % 2!= 0 and lst1[1] % 2!= 0 and lst2[1] % 2!= 0:\n        result = True\n    return result\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # if one of the list is empty return false\n    if lst1 == [] or lst2 == []:\n        return False\n    # if there are not even numbers\n    if sum(lst1) % 2 == 0 and sum(lst2) % 2 == 0:\n        return False\n    else:\n        # if there are even numbers\n        # if the list of even numbers has to be reversed\n        if sum(lst1) % 2 == 0:\n            # if the second list is not reversed\n            if lst2 == lst1:\n                return True\n            else:\n                # if the second list is reversed\n                return False\n        else:\n            # if the first list is not reversed\n            if lst1 == lst2:\n                return True\n            else:\n                # if the first list is reversed\n                return False\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for num in lst1:\n        if num%2!=0:\n            return \"NO\"\n    for num in lst2:\n        if num%2!=0:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    even_list = []\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Fill this in.\n    even = []\n    for i in lst1:\n        if i % 2 == 0:\n            even.append(i)\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    d = dict()\n    for l in test:\n        if l not in d:\n            d[l] = 1\n        else:\n            d[l] += 1\n    return d\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    letters = {}\n    for char in test:\n        letters[char] = letters.get(char, 0) + 1\n    return letters\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    \n    dict_hist = {}\n    \n    for item in test.split():\n        if item in dict_hist:\n            dict_hist[item] += 1\n        else:\n            dict_hist[item] = 1\n        \n    return dict_hist\n    \n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    d = {}\n    for letter in test:\n        if letter not in d:\n            d[letter] = 1\n        else:\n            d[letter] += 1\n    return d\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    hist = {}\n    if test!= '':\n        for char in test:\n            if char in hist:\n                hist[char] += 1\n            else:\n                hist[char] = 1\n    return hist\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    count = {}\n    for i in test:\n        if i in count.keys():\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    result = {}\n    for i in test:\n        if i in result:\n            result[i] += 1\n        else:\n            result[i] = 1\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    hist = {}\n    for letter in test:\n        hist[letter] = hist.get(letter, 0) + 1\n    return hist\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    hist = {}\n    for i in test:\n        if i in hist:\n            hist[i] += 1\n        else:\n            hist[i] = 1\n    return hist"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not test:\n        return {}\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    s = s.replace(\" \", \"\")\n    c = c.replace(\" \", \"\")\n    if c in s:\n        return (s.replace(c,\"\"), False)\n    else:\n        return(s,True)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result_string=\"\"\n    count=0\n    for i in range(len(s)):\n        if s[i]!=c[count]:\n            result_string+=(s[i])\n        else:\n            count+=1\n            if count>=len(c):\n                break\n    if count>=len(c):\n        return (result_string,True)\n    else:\n        return (result_string,False)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if s==c:\n        return (s,True)\n    return (\"\".join(s.split(c)[::-1]),False)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result=''\n    for i in range(len(s)):\n        if s[i] not in c:\n            result+=s[i]\n    return (result,s == result[::-1])\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # def f(l,h):\n    #     if l<h:\n    #         if l>=h:\n    #             return s[l],s[h]\n    #         else:\n    #             m = l+((h-l)/2)\n    #             l1 = f(l,m)[0]\n    #             l2 = f(m+1,h)[0]\n    #             if l1==l2:\n    #                 return f(l,h)[0],True\n    #             else:\n    #                 return f(l,h)[0],False\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    ans = \"\"\n    for i in s:\n        if i not in c:\n            ans += i\n    if s == ans:\n        return (s,True)\n    else:\n        return (s,False)\n    \n    \n    \n    \n    \ndef print_ll(head):\n    \"\"\"Task\n    We are given a singly linked list. You have to print the linked list in reverse.\n    Example\n    For head = 4->5->6, the output should be\n    6->5->4\n    \"\"\"\n    if head is None:\n        return\n    \n    print(head.data)\n    print_ll(head.next)\n    \n    \n    \n    \ndef unique_sort(head):\n    \"\"\"Task\n    We are given a linked list, sort it in ascending order by using only one call to the isSorted() API.\n    Example\n    For head = 1->5->3->2, the output should be\n    1->2->3->5\n    \"\"\"\n    ans = []\n    if head is None:\n        return\n    while head is not None:\n        if head.next is None:\n            ans.append(head.data)\n            break\n        if head.data == head.next.data:\n            ans.append(head.data)\n            head = head.next\n            continue\n        if head.data > head.next.data:\n            ans.append(head.data)\n            head = head.next\n        else:\n            ans.append(head.next.data)\n            head.next = None\n            head = head.next\n            \n    print(\"\".join(map(str,ans)))\n    \n    \n    \n    \n    \ndef unique_sort_twice(head):\n    \"\"\"Task\n    We are given a linked list, sort it in ascending order by using only one call to the isSorted() API.\n    Example\n    For head = 1->5->3->2, the output should be\n    1->2->3->5\n    \"\"\"\n    ans = []\n    if head is None:\n        return\n    while head is not None:\n        if head.next is None:\n            ans.append(head.data)\n            break\n        if head.data == head.next.data:\n            ans.append(head.data)\n            head = head.next\n            continue\n        if head.data > head.next.data:\n            ans.append(head.data)\n            head = head.next\n        else:\n            ans.append(head.next.data)\n            head.next = None\n            head = head.next\n            \n    print(\"\".join(map(str,ans)))\n    \n    \n    \n    \n    \ndef get_random(n,m):\n    \"\"\"Task\n    We are given a random list A of size N.\n    You have to pick M elements randomly and put them into another list A2.\n    Note: N >= M\n    Example\n    Input 1:\n    A = [1,2,3,4,5]\n    M = 2\n    Output 1:\n    [1,5]\n    Input 2:\n    A = [1,2,3,4,5]\n    M = 4\n    Output 2:\n    [2,3,4,5]\n    \"\"\"\n    import random\n    ans = []\n    for i in range(m):\n        ans.append(random.choice(a))\n    return ans\n    \n    \n    \ndef get_random_2(n):\n    \"\"\"Task\n    You are given a random list A of size N.\n    You have to get 2 random elements from A and put them in a list A2.\n    Note: N >= 2\n    Example\n    Input 1:\n    A = [1,2,3,4,5]\n    Output 1:\n    [1,4]\n    Input 2:\n    A = [1,2,3,4,5]\n    Output 2:\n    [2,3]\n    \"\"\"\n    import random\n    ans = []\n    for i in range(2):\n        ans.append(random.choice(a))\n    return ans\n    \n    \n    \ndef get_random_2_1(n):\n    \"\"\"Task\n    We are given a random list A of size N.\n    You have to get 2 random elements from A and put them in a list A2.\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    s = s.replace(' ', '')\n    c = c.replace(' ', '')\n    for i in range(len(s)):\n        if s[i] == c[-i-1]:\n            continue\n        else:\n            return s, False\n    return s, True\n    \n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    c=c[::-1]\n    print(c)\n    result = \"\"\n    for i in s:\n        if i not in c:\n            result += i\n    return (result,s==result)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    s = s.lower()\n    c = c.lower()\n    for i in c:\n        s = s.replace(i,\"\")\n    return (s, s == s[::-1])\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    new_s = \"\"\n    for i in range(len(s)):\n        if s[i] not in c:\n            new_s = new_s+s[i]\n    if new_s == new_s[::-1]:\n        return (new_s,True)\n    else:\n        return (new_s,False)\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    #return (len(lst))\n    return ('the number of odd elements {}n the str{}n of the {}nput.'\n    .format(len(lst), len(lst), len(lst)))\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    odd_count_lst = []\n    for i in range(len(lst)):\n        s = ''\n        for j in range(len(lst[i])):\n            if (lst[i][j] in \"1234567890\"):\n                s += lst[i][j]\n        s = int(s)\n        if ((s + 1) % 2!= 0):\n            odd_count_lst.append('the number of odd elements'+ str(s) + 'n the str' + str(s) +'of the'+ str(s) + 'nput.')\n        else:\n            odd_count_lst.append('the number of odd elements'+ str(s) + 'n the str' + str(s) +'of the'+ str(s) + 'nput.')\n    return odd_count_lst\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    output = []\n    for i in lst:\n        for j in i:\n            if int(j) % 2!= 0:\n                count += 1\n        output.append(\"the number of odd elements {0}n the str{0}ng {0} of the {0}input.\".format(count))\n        count = 0\n    return output\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    odd_lst = []\n    for i in lst:\n        new_str = \"\"\n        for j in i:\n            if j in ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'):\n                new_str += j\n        if len(new_str) % 2!= 0:\n            odd_lst.append(\"the number of odd elements {0}n the str{0}ng {0} of the {0}nput.\".format(len(new_str)))\n        else:\n            odd_lst.append(\"the number of even elements {0}n the str{0}ng {0} of the {0}nput.\".format(len(new_str)))\n    return odd_lst\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    #solution from solutions\n    def odd_count_solution(lst):\n        return [str(len(list(group.replace(group.pop(0), \"\")))) + \"n the str\" + str(len(group)) + \" of the \" + str(len(lst)) + \"nput.\" for group in lst]\n    return odd_count_solution(lst)\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return_lst = []\n    for i in lst:\n        count = 0\n        for j in i:\n            if j == '1':\n                count += 1\n        return_lst.append(str(count) + \"n the str\" + str(count) + \"of the \" + str(count) + \"nput.\" )\n    return return_lst\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return [f\"the number of odd elements {len(lst) * i} the str{i}ng {lst[i]} of the {i}th input.\" for i in range(len(lst))]\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Find how many odd numbers there are\n    odd_count = 0\n    for i in lst:\n        if len(i) % 2!= 0:\n            odd_count += 1\n    return f\"the number of odd elements {odd_count}n the str{odd_count} of the {odd_count}nput.\"\n    \n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    new_lst = []\n    for i in lst:\n        count = 0\n        for j in i:\n            if int(j) % 2!= 0:\n                count += 1\n        new_lst.append(\"the number of odd elements \" + str(count) + \"n the str\" + str(count) + \"ng \" + str(count) + \" of the \" + str(count) + \"nput.\")\n    return new_lst\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # TODO: Implement this function.\n    str_lst = []\n    for s in lst:\n        l = len(s)\n        new_str = []\n        for i in range(l):\n            if s[i] == '0':\n                new_str.append(0)\n            elif s[i] == '1':\n                new_str.append(1)\n        num_odd = sum(new_str)\n        odd_lst = \"the number of odd elements \" + str(l) + \" of the \" + str(l) + \" input.\"\n        odd_str = odd_lst + \" the str\" + str(l) + \" of the \" + str(l) + \"input.\"\n        str_lst.append(odd_str + \" the number of odd digits \" + str(num_odd) + \".\")\n    return str_lst\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(nums) < 1:\n        return 0\n    minimum = sys.maxsize\n    for i in range(len(nums)):\n        sub_sum = 0\n        for j in range(i, len(nums)):\n            sub_sum += nums[j]\n            if minimum > sub_sum:\n                minimum = sub_sum\n    return minimum"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    curr_sum, min_sum = 0, float(\"inf\")\n    for num in nums:\n        curr_sum += num\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    min_sum = float('inf')\n    cur_sum = 0\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    totalSum = 0\n    minSum = float(\"inf\")\n    for i in range(len(nums)):\n        totalSum += nums[i]\n        if totalSum < minSum:\n            minSum = totalSum\n        if totalSum < 0:\n            totalSum = 0\n    return minSum\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(nums) == 0: return 0\n    s = 0\n    for i in range(len(nums)):\n        s += nums[i]\n        left = i + 1\n        right = len(nums)\n        while left < right:\n            if s == 0: break\n            if nums[i] >= nums[left] and s < nums[left]:\n                s -= nums[left]\n                left += 1\n            elif nums[i] >= nums[right] and s < nums[right]:\n                s -= nums[right]\n                right -= 1\n            else:\n                break\n    return s\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] > 0:\n        return nums[0]\n    if len(nums) == 2:\n        return max(nums)\n    \n    result = minSum = nums[0]\n    for i in range(1, len(nums)):\n        minSum = min(nums[i], minSum + nums[i])\n        if minSum > 0:\n            result = min(result, minSum)\n    return result\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    minSum = float('inf')\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            currSum = sum(nums[i:j])\n            if currSum < minSum:\n                minSum = currSum\n    return minSum\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # initiate sum with first element\n    # then update the sum with elements\n    # that sum up to it\n    # if sum of sum is more than array,\n    # reset sum to 0\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(nums) == 0:\n        return 0\n    s = 0\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        s += nums[i]\n        min_sum = min(min_sum, s)\n        if min_sum < 0:\n            min_sum = 0\n        if s < 0:\n            s = 0\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(nums) < 1:\n        return 0\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    N = len(grid)\n    M = len(grid[0])\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    # first approach (brute force)\n    # run over all the rows\n    # run over all the columns\n    # run over all the cells\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    ans = 0\n    m = math.floor(capacity / len(grid))\n    for row in grid:\n        if sum(row) >= m:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    M = math.inf\n    min_bucket = -1\n    max_bucket = -1\n    empty_count = 0\n    \n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                if min_bucket < 0:\n                    min_bucket = j\n                elif min_bucket > j:\n                    min_bucket = j\n            else:\n                empty_count += 1\n    \n    if min_bucket > M:\n        M = min_bucket\n    \n    if empty_count < capacity:\n        return 0\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    def lower(row, col, bucket_capacity):\n        if row == n - 1 and col == n - 1:\n            #return 0 if grid[row][col] else -1\n            return 1 if grid[row][col] else 0\n        if row == n - 1 and 0 <= col < n:\n            #return -1 if grid[row][col] else 0\n            return -1 if grid[row][col] else 0\n        if col == n - 1 and 0 <= row < n:\n            #return -1 if grid[row][col] else 0\n            return -1 if grid[row][col] else 0\n        if row == n - 1 and col == n - 1:\n            return 0\n        #return -1 if grid[row][col] else 0\n        return 0 if grid[row][col] else -1\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    from collections import deque\n    \n    # DFS with max recursion depth:\n    def dfs(i, j, visited, cap, _max, b):\n        if visited[i][j]:\n            return 0\n        if grid[i][j] == 0:\n            return 0\n        visited[i][j] = True\n        \n        # If we have reached the bottom, then we have found a solution,\n        # so return its depth as it is.\n        if i == grid.shape[0] - 1:\n            return 1\n        \n        # Calculate the maximum capacity of the current well,\n        # in the case that the next row is empty, then the previous well's capacity\n        # should be used.\n        c = _max if grid[i + 1][j] == 1 else 0\n        \n        # Filling all the wells using the current bucket.\n        for k in range(1, capacity + 1):\n            # If the bucket capacity is less than the capacity of the well,\n            # this should be the new capacity, and the new well should use the \n            # bucket capacity.\n            if k < cap:\n                c = k\n            if grid[i + 1][j]:\n                c = dfs(i + 1, j, visited, capacity, c, b)\n                if c:\n                    # c is the depth of the bucket, so we need to minus it\n                    # to get the depth of the well.\n                    c = c - 1\n                    b.append(c)\n                    return c\n        \n        # If the current well can not be used, then we have to \n        # lower the capacity of the next well to get a solution.\n        return 0\n    \n    # To make sure the queue is not empty when the depth is reached,\n    # we need to use a set for the visited matrix.\n    visited = [[False] * grid.shape[1] for _ in range(grid.shape[0])]\n    \n    # To make sure the queue is not empty when the depth is reached,\n    # we need to use a set for the buckets.\n    b = set()\n    \n    # Go through each row and calculate the maximum depth that it can reach.\n    for i in range(grid.shape[0]):\n        _max = dfs(i, 0, visited, capacity, -1, b)\n        if _max:\n            return len(b)\n        \n    return 0\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # https://www.geeksforgeeks.org/minimum-number-of-buckets-required-to-empty-all-the-wells/\n    # https://www.youtube.com/watch?v=PqwqW8mJm04\n    # https://www.youtube.com/watch?v=l-7_XFdO6AQ\n    # https://leetcode.com/problems/number-of-buckets-to-recharge-water/solution/\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Method-1 Using Depth-first Search\n    def dfs(grid, r, c, c_sum, ans):\n        # if we are at a boundary\n        if r < 0 or r >= len(grid) or c < 0 or c >= len(grid[0]) or grid[r][c] == 0:\n            return ans\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # solution:\n    \n    def max_fill_rec(grid, curr_row, curr_col, curr_capacity, count):\n        \"\"\"\n        This function gives the solution using the recursion method\n        \"\"\"\n        if curr_capacity == 0 and curr_row > 0:\n            count += 1\n        else:\n            for i in range(curr_row, -1, -1):\n                if grid[i][curr_col] == 1:\n                    curr_capacity -= 1\n                    grid[i][curr_col] = 0\n                    count = max_fill_rec(grid, i, curr_col, curr_capacity, count)\n                    curr_capacity += 1\n                    grid[i][curr_col] = 1\n            return count\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(arr, key = lambda x: (bin(x).count('1'), int(bin(x).replace('0b', ''), 2)))"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(len(arr)):\n        count = 0\n        for j in range(len(arr)):\n            if arr[j] == 0:\n                break\n            else:\n                count += 1\n        arr[i], arr[count] = arr[count], arr[i]\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    result = []\n    for i in range(len(arr)):\n        result.append(arr[i] * 2 ** i)\n    result = sorted(result, key = lambda x: (x, -1 * x) )\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    from functools import reduce\n    # convert bits to decimal\n    def d(n):\n        return reduce(lambda x, y: x * 2 + y, map(lambda i: 1 if i == '1' else 0, list(str(n))))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count(\"1\"), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted(arr, key=lambda x: (x % 2, x))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sorted(arr, key=lambda x: (x, bin(x).count('1'), bin(x).count('1')/x))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sorted(arr, key = lambda a: (len(bin(a)[2:]), a))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    def to_binary(x):\n        return bin(x).count(\"1\")\n    return sorted(arr, key = to_binary)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # return sorted([int(bin(a)[2:], 2) for a in arr], key=lambda x: (x, bin(x)[2:]))\n    return sorted([int(bin(a)[2:], 2) for a in arr], key=lambda x: (x, int(bin(x)[2:], 2)))\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    words = s.split(' ')\n    new_words = []\n    for word in words:\n        if is_consonant(word) == True:\n            new_words.append(word)\n    \n    if len(new_words) == 0:\n        return []\n    elif len(new_words) == n:\n        return new_words\n    else:\n        new_words = select_words(s[1:], n)\n        return new_words + new_words\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return None\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if s == \"\":\n        return []\n    s = s.split(\" \")\n    s = set(s)\n    return_list = []\n    for word in s:\n        if len(word) < n and n-len(word) >= 1:\n            return_list.append(word)\n    return return_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    s = s.split(\" \")\n    output = []\n    for word in s:\n        if len(word) == 0:\n            continue\n        if len(word) == 1:\n            output.append(word)\n        else:\n            for i in range(0, len(word)):\n                if word[i].isalpha():\n                    if word[i].isupper():\n                        if word[i].lower() in word[i + 1:]:\n                            output.append(word)\n                            break\n    return output\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not s:\n        return []\n    s = s.replace(\" \", \"\")\n    res = []\n    for i in range(len(s)-1):\n        if s[i].isalpha() and s[i+1].isalpha():\n            if s[i].lower()!= s[i+1].lower():\n                res.append(s[i])\n    return res\n    "
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    # returns a list of strings with n letters\n    def get_n_letters(s, n):\n        n_letters = []\n        # create a new list of strings \n        letters = []\n        # for every word in the string\n        for word in s.split(\" \"):\n            # if the word has the right amount of letters\n            if len(word) == n:\n                # add the word to the new list\n                n_letters.append(word)\n        # return the new list\n        return n_letters\n    \n    # returns a list of strings with n consonants\n    def get_n_consonants(s, n):\n        n_consonants = []\n        # create a new list of strings\n        consonants = []\n        # for every word in the string\n        for word in s.split(\" \"):\n            # if the word has the right amount of letters\n            if len(word) == n:\n                # if there aren't any consonants in the word\n                if not any(char.isalpha() for char in word):\n                    # add the word to the new list\n                    n_consonants.append(word)\n        # return the new list\n        return n_consonants\n    \n    # takes in a string\n    # returns a list of strings\n    def get_words_with_n_letters(s, n):\n        # return all words that have exactly n letters\n        return get_n_letters(s, n)\n    \n    # takes in a string\n    # returns a list of strings\n    def get_words_with_n_consonants(s, n):\n        # return all words that have exactly n consonants\n        return get_n_consonants(s, n)\n    \n    # checks if a word has n letters\n    def has_n_letters(word, n):\n        # for every letter in the word\n        for letter in word:\n            # if the letter isn't an alphabet\n            if not letter.isalpha():\n                # return False\n                return False\n        # return True\n        return True\n    \n    # checks if a word has n consonants\n    def has_n_consonants(word, n):\n        # for every letter in the word\n        for letter in word:\n            # if the letter isn't an alphabet\n            if letter.isalpha():\n                # return False\n                return False\n        # return True\n        return True\n    \n    # checks if a word has exactly n letters and n consonants\n    def has_n_letters_and_n_consonants(word, n):\n        # check if the word has n letters\n        if not has_n_letters(word, n):\n            # return False\n            return False\n        # check if the word has n consonants\n        if not has_n_consonants(word, n):\n            # return False\n            return False\n        # return True\n        return True\n    \n    # checks if a word has exactly n letters, n consonants\n    # and has all the letters in the word\n    def has_n_letters_and_n_consonants_and_all_letters(word, n):\n        # check if the word has exactly n letters\n        if not has_n_letters_and_n_consonants(word, n):\n            # return False\n            return False\n        # check if the word has all the letters in the word\n        if not has_all_letters(word, n):\n            # return False\n            return False\n        # return True\n        return True\n    \n    # checks if a word has all the letters in the word\n    def has_all_letters(word, n):\n        # for every letter in the word\n        for letter in word:\n            # if the letter isn't an alphabet\n            if not letter.isalpha():\n                # return False\n                return False\n        # return True\n        return True\n    \n    # returns the words that match the criteria\n    def filter_words(s, n):\n        # if there are no words in the string\n        if s == \"\":\n            # return an empty list\n            return []\n        # set of all words that match the criteria\n        words = set()\n        # for every word in the string\n        for word in s.split(\" \"):\n            # if the word has exactly n letters and n consonants\n            if has_n_letters_and_n_consonant"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return s.split()[s.lower().count(s.lower()[0]):]\n    \n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    list = []\n    \n    if len(s) == 0:\n        return list\n    \n    for i in s:\n        if i not in \" \" and s.count(i) == n:\n            list.append(i)\n    \n    return list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if s == \"\":\n        return []\n    return [word for word in s.split() if word in s and len(word) == n]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return [i for i in s.split() if (len([c for c in s if c.isalpha()]) - len(set(i))) == n]\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    word = list(word)\n    start_index = None\n    end_index = None\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    vowels = \"aeiou\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    vowels = \"aeiouAEIOU\"\n    \n    for vowel in vowels:\n        if word[-1] == vowel:\n            return word[-1]\n    \n    if len(word) > 3:\n        for i in range(len(word) - 2):\n            if word[i] not in vowels and word[i+1] in vowels and word[i+2] not in vowels:\n                return word[i+2]\n        \n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    word_list = list(word)\n    vowels = \"aeiou\"\n    \n    # Find first vowel index\n    for i, letter in enumerate(word_list[::-1]):\n        if letter in vowels:\n            return word_list[-i-1]\n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    vowels = \"aeiou\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    # Write your code here\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in 'aeiouAEIOU':\n            return word[i]\n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # preprocessing\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    #print(word)\n    #print(word[-1])\n    if len(word) == 0:\n        return \"\"\n    elif len(word) == 1:\n        if word in vowels:\n            return word\n        else:\n            return \"\"\n    elif word[-1] in vowels:\n        return word\n    else:\n        for i in range(len(word)-1, 0, -1):\n            if word[i] in vowels:\n                return word[0:i]\n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    vowels = \"aeiou\"\n    vowel_count = 0\n    \n    for vowel in vowels:\n        if vowel in word[len(word)-1::-1]:\n            vowel_count += 1\n    \n    if vowel_count == 0:\n        return \"\"\n    \n    return word[-1::-1][:vowel_count][::-1]\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    word = word.lower()\n    vowels = \"aeiou\"\n    for index in range(len(word) - 1):\n        if word[index] in vowels and word[index + 1] not in vowels:\n            return word[index + 1]\n    return \"\"\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    s = ''.join(lst)\n    if not balanced(s):\n        return 'No'\n    for i in range(len(s)):\n        if s[i] == ')':\n            if i!= 0 and s[i-1] == '(':\n                return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    balanced = {'(':')', '{':'}', '[':']'}\n    for char in balanced.values():\n        if char in lst: return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    stack = []\n    for c in lst:\n        if c == '(':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return 'No'\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    def split_list(lst):\n        for i in range(len(lst)):\n            if lst[i] == '(':\n                left_idx = i\n                break\n        for i in range(len(lst)-1, -1, -1):\n            if lst[i] == ')':\n                right_idx = i\n                break\n        return left_idx, right_idx\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    match = {\n        '(': ')',\n        ')': '('\n    }\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # if balanced, return\n    if lst == [\"()\"]:\n        return \"Yes\"\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Create a queue\n    q = deque()\n    # Add parentheses to queue\n    for i in lst:\n        if i == '(' or i == ')':\n            q.append(i)\n    # Check if parentheses are balanced\n    while q:\n        char = q.popleft()\n        if char == '(':\n            if q:\n                q.append(char)\n            if q and q[0] == ')':\n                q.popleft()\n            else:\n                return 'No'\n        else:\n            if q and q[0] == '(':\n                q.popleft()\n            else:\n                return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(lst) > 1:\n        return match_parens_recursive(lst)\n    else:\n        return match_parens_recursive(lst[0].split('('))\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    def match(s1,s2):\n        if not s1 or not s2:\n            return True\n        if s1[0]!=s2[0]:\n            return False\n        return match(s1[1:],s2[1:])\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    ## TODO: Complete the function below\n    ## ====== Solution_1 ======\n    # helper function to find whether a given string is balanced\n    # or not\n    def is_balanced(s):\n        # empty string is balanced\n        if s == '':\n            return True\n        # we only need to balance the string if it has open parens\n        elif s[0] == '(':\n            # recurse on left side of string\n            return is_balanced(s[1:])\n        # check if we are at a balanced string\n        elif s[0] == ')':\n            # check if the right side is balanced\n            if len(s) == 1:\n                return True\n            else:\n                return is_balanced(s[1:])\n        else:\n            # neither a valid string\n            return False\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    res = []\n    if not arr: return res\n    start, end = 0, 0\n    while end < len(arr) and start < len(arr):\n        if arr[end] > k:\n            res.append(arr[end])\n            end += 1\n        else:\n            if end - start < len(res):\n                res = arr[start:end]\n            start += 1\n    res += arr[start:end]\n    return res\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    assert k <= len(arr)\n    # Fill this in.\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \"\"\"\n    # Brute Force\n    res = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] < arr[j]:\n                res.append(arr[i])\n                break\n        if len(res) == k:\n            return res\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    arr = sorted(arr)\n    return arr[-k:]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # base case\n    if k == 0 or len(arr) == 0:\n        return []\n    \n    # partition the array\n    partition(arr, 0, len(arr)-1)\n    print(arr)\n    return arr[:k]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    arr_sort = sorted(arr, reverse=True)\n    return arr_sort[:k]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sorted(arr, reverse=True)[:k]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    n = len(arr)\n    if k > n:\n        return []\n    \n    start, end = 0, n - k\n    \n    while start < end:\n        mid = start + (end - start) // 2\n        if arr[mid] < arr[mid + k]:\n            start = mid + 1\n        else:\n            end = mid\n    return arr[:start]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sorted(arr, reverse=True)[:k]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    n = len(arr)\n    for i in range(n-k+1):\n        max_idx = i\n        for j in range(i+1, n):\n            if arr[max_idx] < arr[j]:\n                max_idx = j\n        arr[i], arr[max_idx] = arr[max_idx], arr[i]\n    return arr\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sum([int(lst[i]) for i in range(len(lst)) if i % 2 == 1])\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sum([lst[i] for i in range(len(lst)) if i % 2 == 1])\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    total = 0\n    for i in range(0,len(lst)):\n        if i%2 == 1 and lst[i] % 2 == 0:\n            total += lst[i]\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = 0\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 1)\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    for i in range(1, len(lst), 2):\n        lst[i - 1] *= 2\n    return sum(lst)"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sum([x for i, x in enumerate(lst) if i % 2!= 0])\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    sum = 0\n    for num in lst:\n        if num % 2!= 0:\n            sum = sum + num\n    return sum\n    \n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sum(lst[i] for i in range(1, len(lst), 2))"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    total = 0\n    for index in range(0, len(lst), 2):\n        if lst[index]%2 == 1:\n            total += lst[index]\n    return total"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # TODO: Write your code here\n    if k == len(arr):\n        return sum(arr)\n    ans = 0\n    i = 0\n    while i < k:\n        if len(str(arr[i])) <= 2:\n            ans += arr[i]\n        i += 1\n    return ans\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    k = min(k, len(arr))\n    # sort first k elements, sort the rest\n    # arr[:k] and arr[k:]\n    sorted_arr = sorted(arr[:k])\n    return sorted_arr[-1] + sorted_arr[-2]\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    summ = 0\n    for i in range(k, len(arr)):\n        summ += sum_two_digits(arr, i)\n    return summ\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if k >= len(arr):\n        return 0\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    size = len(arr)\n    if size < k: return 0\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    i = 0\n    while i < k:\n        arr.pop(0)\n        i += 1\n    arr = [str(item) for item in arr]\n    res = sum([int(item) for item in arr])\n    return res\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(len(arr) - k):\n        sum = sum_elements(arr, i, k)\n        print(f\"sum = {sum}\")\n        if sum <= 1000:\n            return sum\n    return sum\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sum(set(arr[:k]))\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # for the given example, sum of a set of size 4 would be 1 + 3 + 4 + 5 = 9\n    # when doing it in a larger size, the element would be sum of its 2-digits and then add them\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # initialize sum\n    sum = 0\n    # initialize cache\n    cache = {}\n    # initialize length\n    l = len(arr)\n    # initialize max k\n    max_k = min(k, l)\n    # initialize for loop\n    for i in range(max_k):\n        # initialize first_k\n        first_k = arr[i]\n        # initialize prefix sum\n        prefix_sum = 0\n        # initialize prefix_sum_count\n        prefix_sum_count = 1\n        # initialize for loop\n        for j in range(i+1, l):\n            # update prefix_sum\n            prefix_sum += arr[j]\n            # if first_k == prefix_sum\n            if first_k == prefix_sum:\n                # increase prefix_sum_count\n                prefix_sum_count += 1\n            # if second_k == prefix_sum\n            if arr[j] == prefix_sum:\n                # increase prefix_sum_count\n                prefix_sum_count += 1\n            # if prefix_sum_count > k\n            if prefix_sum_count > k:\n                # break\n                break\n            # if prefix_sum_count == k\n            if prefix_sum_count == k:\n                # update prefix_sum\n                prefix_sum = prefix_sum_count * first_k\n                # update prefix_sum_count\n                prefix_sum_count = 1\n                # update prefix_sum_count\n                prefix_sum_count += 1\n                # update first_k\n                first_k = arr[j]\n                # update prefix_sum\n                prefix_sum = 0\n                # update prefix_sum_count\n                prefix_sum_count = 1\n                # update prefix_sum\n                prefix_sum = 0\n        # if prefix_sum_count > k\n        if prefix_sum_count > k:\n            # break\n            break\n        # if prefix_sum_count == k\n        if prefix_sum_count == k:\n            # update prefix_sum\n            prefix_sum = prefix_sum_count * first_k\n        # update sum\n        sum = sum + prefix_sum\n        # update prefix_sum\n        prefix_sum = 0\n        # update prefix_sum_count\n        prefix_sum_count = 0\n    # return sum\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    result = []\n    i = 2\n    while i < n:\n        if i % 2 == 0:\n            i = i // 2\n        else:\n            i = 3 * i + 1\n        if i % 2 == 0:\n            i = i // 2\n        else:\n            i = 3 * i + 1\n        result.append(i)\n    return result\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    res = [1, n]\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        res.append(n)\n    return res\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n < 1:\n        return []\n    res = []\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n        res.append(n)\n    return sorted(res)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # If the input is 1, return a list with the only element being 1\n    if n == 1:\n        return [1]\n    odd_nums = []\n    # Get odd numbers, by recursion\n    odd_nums.append(1)\n    odd_nums.append(n)\n    return get_odd_collatz(odd_nums[-2]) + odd_nums\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Your Code Here\n    odds = []\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input should be positive integer\")\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    odd_collatz = [n]\n    while n!= 1:\n        if n % 2 == 1:\n            n = (n * 3) + 1\n        else:\n            n = n // 2\n        odd_collatz.append(n)\n    return odd_collatz\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    odds = []\n    \n    while n > 1:\n        if n % 2 == 1:\n            odds.append(n)\n        \n        if n % 2 == 0:\n            n = int(n / 2)\n    \n    odds.append(1)\n    \n    return odds\n    \n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    odd_list = []\n    i = 1\n    while i <= n:\n        if i % 2 == 1:\n            odd_list.append(i)\n        i = i*3+1\n    return sorted(odd_list)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Your code here\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    months = (31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n    days = (31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(date) == 0:\n        return False\n    if date.count('-') > 2:\n        return False\n    days = date.count('-')\n    if days < 1:\n        return False\n    if days > 31:\n        return False\n    months = date.count('-')\n    if months < 1 or months > 12:\n        return False\n    \n    year,month,day = date.split('-')\n    if year.count('-') > 2:\n        return False\n    if month.count('-') > 2:\n        return False\n    if year == '' or month == '' or day == '':\n        return False\n    \n    months = {\n        1 : 31,\n        3 : 31,\n        5 : 31,\n        7 : 31,\n        8 : 31,\n        10: 31,\n        12: 31,\n        4 : 30,\n        6 : 30,\n        9 : 30,\n        11 : 30\n    }\n    if days <= months[int(month)]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return date!= '' and int(date[0:2]) <= 31 and int(date[3:5]) <= 12 and int(date[6:10]) >= 1 and int(date[6:10]) <= 31 and int(date[3:5]) not in (4,6,9,11) and int(date[0:2]) not in (1,3,5,7,8,10,12)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    date = date.split('-')\n    month = int(date[0])\n    day = int(date[1])\n    year = int(date[2])\n    if len(date) < 3:\n        return False\n    elif year < 1900 or year > 2020:\n        return False\n    elif month < 1 or month > 12:\n        return False\n    elif month in {1, 3, 5, 7, 8, 10, 12} and day < 1 or day > 31:\n        return False\n    elif month in {4, 6, 9, 11} and day < 1 or day > 30:\n        return False\n    elif month == 2 and day < 1 or day > 29:\n        return False\n    return True\n    \n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    month = date[0:2]\n    date = date[3:7]\n    year = date[8:]\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if date:\n        month, day, year = date.split(\"-\")\n        month = int(month)\n        if month in (1, 3, 5, 7, 8, 10, 12):\n            if day > 31:\n                return False\n        elif month in (4, 6, 9, 11):\n            if day > 30:\n                return False\n        elif month == 2 and (day > 29 or day <= 0):\n            return False\n        else:\n            return False\n        if len(year)!= 4:\n            return False\n        if year.isdigit() == False:\n            return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    month_31 = [1,3,5,7,8,10,12]\n    month_30 = [4,6,9,11]\n    if len(date) > 0:\n        if date[:2] == '02':\n            if int(date[3:5]) in month_31 or int(date[3:5]) == 2:\n                return True\n        elif len(date) == 8:\n            date_split = date.split('-')\n            month = int(date_split[1][:1])\n            if month in month_31:\n                if int(date_split[2]) == int(date_split[0]):\n                    return True\n                else:\n                    return False\n            elif month in month_30:\n                if int(date_split[2]) == int(date_split[0]):\n                    return True\n                else:\n                    return False\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    assert type(date) == str, \"The function should be called with a string!\"\n    assert len(date) > 0, \"The date string should not be empty!\"\n    days = {'01':31,'03':31,'05':31,'07':31,'08':31,'10':31,'12':31,'01':30,'03':30,'05':30,'07':30,'08':30,'10':30,'12':30}\n    month = {1:'January',3:'March',5:'May',7:'July',8:'August',10:'October',12:'December'}\n    \n    month_list = list(month.keys())\n    day_list = list(days.keys())\n    date_list = date.split('-')\n    month_int = int(date_list[1])\n    day_int = int(date_list[2])\n    if month_int not in month_list or day_int < 1 or day_int > 31:\n        return False\n    if month_int == 2:\n        if day_int < 1 or day_int > 29:\n            return False\n        else:\n            return True\n    else:\n        if day_int < 1 or day_int > 31:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    try:\n        if date == \"\":\n            return False\n        days = date.split('-')\n        if len(days)!= 3:\n            return False\n        if not int(days[0]) in range(1, 32):\n            return False\n        if not int(days[1]) in range(1, 32):\n            return False\n        if not int(days[2]) in range(1901, 2201):\n            return False\n        if not int(days[0]) in range(1, 31) and not int(days[1]) in range(1, 32) and not int(days[2]) in range(1901, 2201):\n            return False\n        if not int(days[1]) in range(1, 32) and not int(days[2]) in range(1901, 2201):\n            return False\n        if not int(days[2]) in range(1901, 2201):\n            return False\n        if not int(days[0]) in range(1, 13) and not int(days[1]) in range(1, 32) and not int(days[2]) in range(1901, 2201):\n            return False\n        if not int(days[0]) in range(1, 13) and not int(days[1]) in range(1, 32) and not int(days[2]) in range(1901, 2201):\n            return False\n        if not int(days[2]) in range(1901, 2201):\n            return False\n        if not int(days[0]) in range(1, 13) and not int(days[1]) in range(1, 32):\n            return False\n        if not int(days[0]) in range(1, 13) and not int(days[1]) in range(1, 32) and not int(days[2]) in range(1901, 2201):\n            return False\n        if not int(days[0]) in range(1, 13) and not int(days[1]) in range(1, 32) and not int(days[2]) in range(1901, 2201):\n            return False\n        if not int(days[0]) in range(1, 13) and not int(days[1]) in range(1, 32) and not int(days[2]) in range(1901, 2201):\n            return False\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return txt.lower().split()\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return txt.split()\n    "
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = txt.split()\n    return result\n    # return len(txt.split())\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    word_list = txt.split()\n    return word_list\n    \nsplit_words(\"Hello world!\")\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    txt = txt.lower()\n    txt = re.sub(\"[^a-zA-Z]\", \" \", txt)\n    txt = txt.split()\n    count = 0\n    for i in range(0, len(txt)-1):\n        if ord(txt[i][0]) >= ord('a') and ord(txt[i][0]) <= ord('z'):\n            if ord(txt[i][0]) % 2!= 0:\n                count += 1\n    return count\n    \n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    words = txt.split()\n    # return words\n    return len(words)\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    words = txt.split()\n    return words\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result = txt.split()\n    return result\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(lst) < 2:\n        return True\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return all(lst[i] < lst[i+1] for i in range(len(lst)-1))\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    if not lst:\n        return True\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    temp_list = []\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if i!= j and lst[i] == lst[j]:\n                return False\n        if lst[i] in temp_list:\n            return False\n        else:\n            temp_list.append(lst[i])\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(lst) < 2:\n        return True\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(lst) == 1:\n        return True\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    temp = []\n    for i in lst:\n        if i in temp:\n            return False\n        else:\n            temp.append(i)\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    n = len(lst)\n    for i in range(n - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n    \ndef is_sorted_optimized(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if(interval1[0] < interval2[0] and interval1[1] >= interval2[0]):\n        if(interval1[0] <= interval2[1] and interval1[1] >= interval2[1]):\n            return \"YES\"\n        elif(interval1[0] <= interval2[0] and interval1[1] < interval2[0]):\n            return \"YES\"\n        elif(interval1[0] > interval2[1] and interval1[0] <= interval2[1]):\n            return \"YES\"\n        elif(interval1[0] > interval2[1]):\n            return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    intersection_length = interval1[0] * interval2[1] - interval2[0] * interval1[1]\n    if not is_prime(intersection_length):\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if interval1[1] >= interval2[0] or interval2[1] >= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # check if one of the intervals is a subset of the other\n    if interval1[0] <= interval2[0] and interval1[1] >= interval2[1]:\n        return \"YES\"\n    if interval2[0] <= interval1[0] and interval2[1] >= interval1[1]:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    start1, end1 = interval1\n    start2, end2 = interval2\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    inter = set()\n    for s in interval1:\n        for e in interval2:\n            if s == e:\n                inter.add(s)\n    if len(inter) == 0:\n        return \"NO\"\n    if len(inter) == 1:\n        return \"YES\"\n    if isprime(len(inter)):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Create an empty set\n    inter = set()\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    pass\n    if max(interval1) < min(interval2):\n        return 'NO'\n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Handle empty intervals\n    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(arr) == 0:\n        return None\n    else:\n        return sum(abs(i) * (prod_sign(i)) for i in arr)\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if arr == []:\n        return None\n    p = 0\n    for i in arr:\n        if i < 0:\n            p = -1\n        if i > 0:\n            p = 1\n        p *= i\n    return p\n    \n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(arr) == 0:\n        return None\n    if arr == None or len(arr) == 0:\n        return None\n    sum = 0\n    for i in arr:\n        if i < 0:\n            sum -= i\n        elif i > 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    signs = 0\n    neg = 0\n    pos = 0\n    zero = 0\n    for num in arr:\n        if num < 0:\n            neg += 1\n        elif num > 0:\n            pos += 1\n        elif num == 0:\n            zero += 1\n    if pos == 0 and neg == 0:\n        return None\n    elif neg == 0 and pos!= 0:\n        return zero\n    elif neg!= 0 and pos == 0:\n        return -pos\n    elif neg!= 0 and pos!= 0:\n        return neg*pos*zero\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # I thought about using a simple solution.\n    # We just need to count all sign changes\n    # and multiply by the sign change itself.\n    count = 0\n    res = 0\n    for i in arr:\n        if i == 0:\n            continue\n        count += abs(i)\n    if count == 0:\n        return None\n    for i in range(count):\n        res += i * (i + 1)\n    return res\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    summ = 0\n    signs = 0\n    for i in arr:\n        if i!= 0:\n            summ = summ + i\n            if i < 0:\n                signs = signs + 1\n    if signs == 0:\n        return None\n    else:\n        return summ * signs\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    signs = 0\n    for el in arr:\n        if el > 0:\n            signs += 1\n        elif el < 0:\n            signs -= 1\n    return signs * sum(abs(el) for el in arr)\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # 1. init a var to store sum of signs\n    # 2. go through the arr\n    #    a. if the sign is 1 or -1, sum +1 to sum_signs\n    #    b. if the sign is 0, sum += 0\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sum(sign * arr[i] for i, sign in enumerate(get_signs(arr)))\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sum(abs(i) * (i < 0) for i in arr)\n    \nif __name__ == '__main__':\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASSED!\\n\")"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    m, n = len(grid), len(grid[0])\n    Q = deque()\n    \n    # add first cell (start from the bottom leftmost cell)\n    for i in range(m):\n        for j in range(n):\n            if (i == 0 and j == 0):\n                Q.append((i, j, 1))\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    def valid(grid, k, i, j):\n        \"\"\"\n        Return true if valid, otherwise false.\n        Return true if it is possible to visit cell[i][j] with k steps\n        \"\"\"\n        visited = set()\n        return True if i in range(len(grid)) and j in range(len(grid[0])) and \\\n            grid[i][j] in range(1, len(grid) * len(grid[0]) + 1) and \\\n            grid[i][j] - 1 not in visited and \\\n            k == 1 else False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    def min_path(grid, k, i, j):\n        if i >= len(grid) or j >= len(grid) or k < 0:\n            return\n        if grid[i][j] == k:\n            for di, dj in dirs:\n                if i + di >= 0 and i + di < len(grid) and j + dj >= 0 and j + dj < len(grid):\n                    if grid[i + di][j + dj] == k:\n                        min_path(grid, k - 1, i + di, j + dj)\n        else:\n            return\n        \n    dirs = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    min_path(grid, k, 0, 0)\n    return grid[0][0]"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    ###\n    # APPROACH: DFS with Memoization\n    ###\n    # DFS with Memoization:\n    #\n    # To accomplish this we must follow the steps below:\n    #\n    # 1. Initialize an empty memo to keep track of previously seen paths\n    # 2. For each cell on the grid, add that cell to the queue\n    # 3. Start the search from each cell in the queue\n    # 4. While the queue is not empty:\n        # 4a. If a path is in the memo, return it\n        # 4b. If a path is not in the memo,\n            # 4b.1 if the current cell is smaller than k,\n                # we know that we can go to each of the neighbors.\n            # 4b.2 else, we know that we can go to any of the neighbors, in which\n                # case we can just continue to the next cell in the queue.\n            # 4b.3 Get all the neighbors from the current cell\n            # 4b.4 Store the path in the memo\n            # 4b.5 Go back to step 3, using the next cell in the queue\n    # 5. Once the queue is empty, we return the path that we stored in the memo\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    def get_min_dist(grid, k):\n        \"\"\"\n        Return minimum distance between cells in grid.\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    max_col, max_row = len(grid) - 1, len(grid[0]) - 1\n    \n    # DFS\n    def dfs(grid, k, i, j, v, dp, path):\n        if i < 0 or i >= max_col or j < 0 or j >= max_row or v >= k: return\n        if dp[i][j]!= -1: return\n        if v == k:\n            path.append(v)\n            return\n        # find the smallest\n        s = float('inf')\n        for nbr in [i-1, i+1, i, i]:\n            if 0 <= nbr and nbr < max_col:\n                s = min(s, grid[nbr][j])\n        if v < s:\n            dp[i][j] = v\n            dfs(grid, k, i-1, j, v+1, dp, path)\n            dfs(grid, k, i+1, j, v+1, dp, path)\n            dfs(grid, k, i, j-1, v+1, dp, path)\n            dfs(grid, k, i, j+1, v+1, dp, path)\n            path.append(v)\n            return\n        else:\n            for nbr in [i-1, i+1, i, i]:\n                if 0 <= nbr and nbr < max_col:\n                    if dp[nbr][j]!= -1:\n                        path.append(dp[nbr][j])\n                        return\n            path.append(v)\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # if grid is empty\n    if len(grid) == 0:\n        return grid\n    \n    # calculate the number of rows and columns\n    r = len(grid)\n    c = len(grid[0])\n    \n    # create a visited array to track visited cells\n    visited = [[False for _ in range(c)] for _ in range(r)]\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    def min_path(grid, k, r, c, visited):\n        if r == len(grid) and c == len(grid[0]):\n            return True\n        if r < 0 or c < 0 or r >= len(grid) or c >= len(grid[0]):\n            return False\n        if (r, c) in visited:\n            return False\n        if k == 0:\n            return True\n        if grid[r][c] == 0:\n            return False\n        visited.add((r, c))\n        if min_path(grid, k - 1, r - 1, c, visited):\n            return True\n        visited.remove((r, c))\n        if min_path(grid, k - 1, r, c - 1, visited):\n            return True\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    N = len(grid)\n    # print(N)\n    cols = range(N)\n    rows = range(N)\n    # print(cols)\n    # print(rows)\n    cols, rows = zip(*cols), zip(*rows)\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n <= 2:\n        return list(range(1, n + 2))\n    else:\n        sequence = list(range(1, n + 2))\n        return sequence[:n + 1]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = []\n    first, second, third = 3, 1, 2\n    if n == 1: return [first]\n    for i in range(1, n + 1):\n        if i == 1:\n            result.append(first)\n        elif i == 2:\n            result.append(second)\n        elif i == 3:\n            result.append(third)\n        else:\n            result.append(first + second + third)\n            first, second, third = third, first + second, result[-1]\n    return result\n    \n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    sequence = [3, 1]\n    if n == 1:\n        return sequence\n    for i in range(1, n):\n        sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 3])\n    return sequence\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 1 or n == 2:\n        return [3]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        return [1, 2, 3]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n < 3:\n        return n\n    return [tri(n - 1), tri(n - 2), tri(n - 3)]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    fib_sequence = [1, 1]\n    while len(fib_sequence) < n + 1:\n        fib_sequence.append(sum(fib_sequence[-2:]))\n    return fib_sequence[:n + 1]\n    \ndef test_tri():\n    assert tri(1) == [1]\n    assert tri(3) == [1, 1, 1]\n    assert tri(5) == [1, 1, 1, 1, 2]\n    assert tri(8) == [1, 1, 1, 1, 1, 2, 3, 4]\n    assert tri(10) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]\n    assert tri(15) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n    print(\"All tests passed!\")\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 0:\n        return []\n    else:\n        return [1, 1, 1] + tri_aux(n - 1)\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n < 1:\n        return []\n    if n == 1:\n        return [1]\n    result = [1,1]\n    for i in range(2,n+1):\n        result.append(result[-1] + result[-2] + result[-3])\n    return result\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    res = []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n    res.append(1)\n    res.append(1)\n    for i in range(2, n + 1):\n        res.append(res[-1] + res[-2] + res[-3])\n    return res\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    total = 1\n    for i in range(len(str(n))):\n        if int(str(n)[i]) % 2:\n            total = total * int(str(n)[i])\n    return total\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    else:\n        s = str(n)\n        if len(s) % 2 == 0:\n            return 0\n        else:\n            return int(s[0]) * int(s[1]) * int(s[2]) * int(s[3])\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Loop over every digit in n\n    # If it's an odd number, add it to the product\n    # Else, keep going\n    product = 1\n    while n > 0:\n        if n % 10 % 2 == 1:\n            product *= n % 10\n        n = n // 10\n    return product\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    total = 0\n    while n > 0:\n        #print(\"n is: \", n)\n        #print(\"n / 10 is: \", n/10)\n        if n%10 % 2 == 1:\n            total += 1\n        n /= 10\n    return total\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert n >= 0, \"n must be a positive integer\"\n    if n == 0:\n        return 0\n    s = str(n)\n    res = 1\n    for i in range(len(s)):\n        if int(s[i]) % 2 == 1:\n            res *= int(s[i])\n    return res\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return (int(n))\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sum(d for d in str(n) if d in \"2567\")\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sum([int(i) for i in str(n) if int(i) % 2!= 0])\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    else:\n        return n % 10\n    "
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n < 10:\n        return 0\n    elif n % 10 == 0:\n        return 0\n    elif n % 10 == 1:\n        return 1\n    else:\n        return n % 10 * digits(n // 10)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Declare a variable to hold the length of the string\n    # This varialbe will help us track the length of the list.\n    string_len = len(string)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    stack = []\n    for c in string:\n        if c == '[' or c == '{':\n            stack.append(c)\n        elif c == ']':\n            if len(stack) == 0 or stack.pop()!= '[':\n                return False\n        elif c == '}':\n            if len(stack) == 0 or stack.pop()!= '{':\n                return False\n    if len(stack) > 0:\n        return False\n    return True\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    if not string:\n        return False\n    if string[0]=='[':\n        if string[1]==']':\n            for i in string[2:-1]:\n                if i=='[':\n                    return True\n                else:\n                    return False\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(string) == 0:\n        return False\n    if string == '[[]':\n        return True\n    stack = []\n    for char in string:\n        if char == '[' and (len(stack) > 0 and stack[-1] == ']') or char == '{' and (len(stack) > 0 and stack[-1] == '}'):\n            stack.pop()\n        else:\n            stack.append(char)\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Your code here\n    bracket_map = {'[': ']', '{': '}', '(': ')', '<': '>'}\n    stack = []\n    for b in string:\n        if b in bracket_map:\n            stack.append(b)\n        elif stack and bracket_map[stack.pop()] == b:\n            pass\n        else:\n            return False\n    return len(stack) == 0\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    try:\n        while string[0] == '[' and string[-1] == ']':\n            string = string[1:-1]\n        while string[0] == '[' and string[-1] == '[':\n            string = string[1:-1]\n        while string[0] == '[' and string[-1] == '(':\n            string = string[1:-1]\n        while string[0] == '[' and string[-1] == ')':\n            string = string[1:-1]\n        while string[0] == '[' and string[-1] == ']':\n            string = string[1:-1]\n        return False\n    except IndexError:\n        return True\n    \n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return (string.count('[') == string.count(']') and string.count('[') == string.count(']') and string.count('['))\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    brackets = []\n    #Returns true if the brackets exist and are nested, else false.\n    for bracket in string:\n        if bracket in '{[(':\n            brackets.append(bracket)\n        elif bracket == ']':\n            if brackets:\n                brackets.pop()\n            else:\n                return False\n    return brackets == []\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return (string.count('[]')==string.count('[][') and \n            string.count('[]') == string.count(']['))\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    brackets = {'(': ')', '[': ']', '{': '}'}\n    stack = []\n    if len(string) < 3:\n        return False\n    else:\n        for char in string:\n            if char in brackets:\n                stack.append(char)\n            else:\n                if len(stack) > 0:\n                    first = stack.pop()\n                    if brackets[first]!= char:\n                        return False\n                else:\n                    return False\n        return True\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return(sum([x**2 for x in lst]))\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sum([x**2 for x in lst])\n    \n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    lst = list(lst)\n    lst_int = [int(i) for i in lst]\n    sum_of_squares = sum(i*i for i in lst_int)\n    return round(sum_of_squares)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    lst = [round(i**2,2) for i in lst]\n    return sum(lst)\n    \n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    res = []\n    for n in lst:\n        if type(n) == float:\n            n = math.ceil(n)\n        res.append(n*n)\n    return sum(res)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    return sum(i*i for i in lst)\n    \nprint(sum_squares([1,2,3]))\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    num_list = []\n    list_sum = []\n    for num in lst:\n        num_list.append(num**2)\n    for num in num_list:\n        list_sum.append(int(num))\n    return sum(list_sum)\n    \n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sum([i**2 for i in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    lst = list(map(int,lst))\n    total = 0\n    for x in lst:\n        total += x**2\n    return total\n    "
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    return sum([ x * x for x in lst ])\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return txt[-1].isalpha() and txt[-1] not in \" \\t\"\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # your code here\n    if txt == \"\":\n        return False\n    if txt[-1].isalpha():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    last_char = txt[-1]\n    if is_letter(last_char):\n        return False\n    return True\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return txt[-1].isalpha() and not txt[-1].isnumeric()\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return True if (txt[-1].isalpha()) and (not txt[-1].isalpha() + txt[-1].isalpha() + txt[-1].isalpha()) else False\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(txt) == 0:\n        return False\n    return txt[-1].isalpha() and not is_word(txt[:-1])\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return txt[-1].isalpha() and txt.split()[-1]!= \"\""
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return not re.search('[^a-zA-Z]',txt[-1])\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return txt[-1].isalpha() and not (txt[-1].isalpha() and txt.count(txt[-1]) > 1)\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    # To keep track of the index of the element whose next index is to be\n    # compared against. Initialize it with the first index.\n    last_index = 0\n    # Since the array will contain only unique elements, once we see an element\n    # which is greater than the last index we return.\n    for i in range(1, len(arr)):\n        if arr[i] > arr[last_index]:\n            last_index = i\n    return last_index\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # \"if there is a greater than or equal to value, return the index minus\n    # 1\"\n    # \"if there is a less than or equal to value, return the index\n    # minus 2\"\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # For each element in the array, we calculate the difference between it\n    # and the current element (if it exists). If the difference is greater\n    # than the current element then return the current index.\n    # The difference is greater than the current element if the current\n    # element has a greater index, or if it is the first index in the array.\n    for i, item in enumerate(arr):\n        if item <= arr[i - 1]:\n            return i - 1\n    # If no element in the array satisfies the above conditions then return -1\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # base cases\n    if len(arr) < 2:\n        return -1\n    # left to right\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            return i-1\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    n = len(arr)\n    def helper(arr, n, i):\n        # Check if element is not greater than or equal to the element\n        # immediately preceding it. If it is, then that element must\n        # have been in the array. If not, it must not have been in the\n        # array.\n        while i < n and arr[i] <= arr[i-1]:\n            i += 1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # First, find the largest element in the array\n    largest = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > largest:\n            largest = arr[i]\n    # Next, search for the largest element which is not greater than or\n    # equal to the largest element in the array\n    for i in range(len(arr)):\n        if arr[i] <= largest:\n            return i\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Check if the array is empty.\n    if not arr:\n        return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    ind = 0\n    for i in range(1, len(arr)):\n        if arr[i] >= arr[ind]:\n            ind = i\n    return ind\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    result = -1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    n = len(arr)\n    if n < 2:\n        return -1\n    index_max = -1\n    index_min = -1\n    for i in range(1,n):\n        if arr[i] > arr[i-1]:\n            index_min = i\n        if arr[i] < arr[i-1]:\n            index_max = i\n    return index_max\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    n = len(lst)\n    neg = 0\n    pos = n\n    for i in range(n):\n        if lst[i] < 0:\n            neg = i\n        elif lst[i] > 0:\n            pos = i\n    return neg, pos\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return max(lst) if lst else None, min(lst) if lst else None\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # if list is empty, return a and b as None\n    if len(lst) == 0:\n        return (None, None)\n    # if there are positive or negative integers, return tuple of maximum and minimum\n    else:\n        max_num = max(lst)\n        min_num = min(lst)\n        return (max_num, min_num)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    a = None\n    b = None\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    if not lst:\n        return (None, None)\n    \n    return max(lst), min(lst)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # the following values would be None, so we return it as None\n    if not lst:\n        return None, None\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    negative = max(lst, key=lambda x: -x)\n    positive = min(lst, key=lambda x: x)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    a = None\n    b = None\n    if not lst:\n        return a,b\n    elif max(lst) < 0 and min(lst) > 0:\n        a = max(lst)\n        b = min(lst)\n    else:\n        return a,b\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(lst) == 0:\n        return (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    neg_list, pos_list = [], []\n    if len(lst) == 0:\n        return None, None\n    elif len(lst) == 1:\n        return lst[0], None\n    else:\n        for num in lst:\n            if num < 0:\n                neg_list.append(num)\n            else:\n                pos_list.append(num)\n        if len(neg_list) > 0:\n            neg_max = max(neg_list)\n            pos_min = min(pos_list)\n        elif len(neg_list) == 0:\n            neg_max = None\n            pos_min = min(pos_list)\n        else:\n            neg_max = None\n            pos_min = None\n        return neg_max, pos_min\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    #Your code here\n    return max(a,b)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if isinstance(a, str):\n        a = float(a.replace(\",\", \"\"))\n    if isinstance(b, str):\n        b = float(b.replace(\",\", \"\"))\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if type(a)==str:\n        return(max(a,b))\n    else:\n        return(max(a,b,key=float))\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return None if a == b else max(a, b)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if type(a) == str and type(b) == str:\n        if float(a) < float(b):\n            return b\n        else:\n            return a\n    elif type(a) == str and type(b) == float:\n        return a\n    elif type(a) == float and type(b) == str:\n        return b\n    elif type(a) == int and type(b) == int:\n        if a > b:\n            return a\n        else:\n            return b\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if a == b:\n        return None\n    if type(a) == int and type(b) == int:\n        return max(a, b)\n    if type(a) == float and type(b) == float:\n        return max(a, b)\n    if type(a) == str and type(b) == str:\n        return max(a, b)\n    if type(a) == int or type(b) == int:\n        return max(a, b)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if type(a) == float:\n        if a > b:\n            return a\n        else:\n            return b\n    else:\n        return a if a > b else b\n    \ndef compare_two(a, b):\n    \"\"\"\n    Create a function that takes two integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if a == b:\n        return None\n    elif isinstance(a, str) and isinstance(b, str):\n        return max(a, b)\n    elif isinstance(a, str) and isinstance(b, int):\n        return b\n    elif isinstance(a, int) and isinstance(b, str):\n        return a\n    else:\n        return max(a, b)\n    \n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if type(a)==str and a.find('.')!=-1:\n        return float(a) if type(b)==str and b.find('.')!=-1 else None\n    elif type(a)==str and a.find(',')!=-1:\n        return float(a) if type(b)==str and b.find(',')!=-1 else None\n    elif type(b)==str and b.find('.')!=-1:\n        return float(b) if type(a)==str and a.find('.')!=-1 else None\n    elif type(b)==str and b.find(',')!=-1:\n        return float(b) if type(a)==str and a.find(',')!=-1 else None\n    elif a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return a if a >= b else b\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 0:\n        return False\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    evens = 0\n    while n % 2 == 0:\n        n = n // 2\n        evens += 1\n    if evens == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n == 0:\n        return False\n    sum_even = 0\n    for i in range(1,n+1,2):\n        if n % i == 0:\n            sum_even += i\n    return sum_even == n\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in range(1, n + 1):\n        if is_even(i) and (n - i) % 2 == 0:\n            if (n - i) / 2 == i:\n                return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return n % 2 == 0 and sum_of_divisors(n) % 2 == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return True if is_sum_of_even(n) and n % 2 == 0 else False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 4: return True\n    elif n == 8: return True\n    elif n % 4 == 0 and n > 0: return True\n    else: return False"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    n = abs(n)\n    return n == sum(x for x in range(1,n,2) if x!= 0)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return n % 2 == 0 and n / 2 >= 4\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n < 4:\n        return False\n    for i in range(2,n//2 + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return is_equal_to_sum_odd(n) and is_equal_to_sum_even(n)\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    \n    return 1\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Initialize the factorial.\n    factorial = 1\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    brazilian_factorial = 1\n    if n == 0:\n        return 1\n    for i in range(1,n+1):\n        brazilian_factorial *= i\n    return brazilian_factorial\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    factorial_list = []\n    i = n\n    while i > 0:\n        factorial_list.append(i)\n        i = i - 1\n    final_factorial = 1\n    for element in factorial_list:\n        final_factorial = final_factorial * element\n    return final_factorial\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    factorial = 1\n    if n == 0:\n        return factorial\n    while n!= 1:\n        factorial = factorial * n\n        n = n - 1\n    return factorial\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return special_factorial(n-1) * n\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    i = 0\n    j = 1\n    k = 2\n    m = 3\n    n = n + 1\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    factorial = 1\n    for i in range(1, n+1):\n        factorial = factorial * i\n    return factorial\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 1:\n        return 1\n    return n*special_factorial(n-1)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return text.replace(\" \", \"_\")\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Replace spaces\n    text = text.replace(\" \", \"_\")\n    # Replace double spaces with one space\n    text = text.replace(\"  \", \" \")\n    # Split text based on spaces\n    text = text.split()\n    # For every word, if word contains 2 or more spaces, replace it with dash\n    for word in text:\n        if len(word) < 3:\n            continue\n        elif len(word) > 2:\n            text[text.index(word)] = word[0] + \"_\" + word[-1]\n    return \"\".join(text)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return text.replace(\" \", \"_\")\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    new_text = re.sub(\"\\s\", \"_\", text)\n    return new_tex"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return text.replace(' ', '_').replace('  ', '_').replace('  ', '_')\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return text.replace(' ', '_')\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return re.sub(r'\\s+','_',text)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return text.strip().replace(' ', '_').replace('  ', '-').replace('  ', '_')\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return text.replace(\" \", \"_\").replace(\"  \", \"_\")\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return re.sub(r'\\s+', '_', text)\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    try:\n        if len(file_name) > 3 or file_name[0].isdigit() or file_name[0] not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' \\\n            or file_name[-1] == '.' or file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n            return 'No'\n        else:\n            return 'Yes'\n    except IndexError:\n        return 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(file_name) < 2 or not re.match(r\"[0-9a-zA-Z.]+\", file_name):\n        return 'No'\n    if file_name.index('.') > 0:\n        if not re.match(r\"[a-zA-Z]\", file_name[0]):\n            return 'No'\n        if not re.match(r\"[a-zA-Z]\", file_name[file_name.index('.')+1]):\n            return 'No'\n        if file_name[file_name.index('.'):file_name.index('.')+2] not in ['txt', 'exe', 'dll']:\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(file_name) < 4 or file_name[0] < '0' or file_name[0] > '9' \\\n    or file_name[1] < 'a' or file_name[1] > 'z' or file_name[2] < 'a' \\\n    or file_name[2] > 'z' or file_name[3] < 'a' or file_name[3] > 'z':\n        return 'No'\n    if file_name[:3] == '' or file_name[-3:] == '':\n        return 'No'\n    if file_name[:2] not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n        return 'No'\n    if file_name[-2:] not in 'txt exe dll':\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(file_name) <= 3 or file_name[0] not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' \\\n    or file_name[1] not in '1234567890' or file_name[-2:] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    else:\n        return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    if(re.search(r'\\.', file_name)):\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    # check if the file name contains more than three digits\n    if len(file_name) > 3:\n        return \"No\"\n    # check if the file name contains a dot\n    if file_name.find(\".\") == -1:\n        return \"No\"\n    # check if the substring before the dot is not empty\n    if file_name[:file_name.find(\".\")].strip() == \"\":\n        return \"No\"\n    # check if the substring after the dot is valid\n    if not any(char.lower() in \"a-zA-Z\" for char in file_name[file_name.find(\".\")+1:]):\n        return \"No\"\n    # check if the file name is valid\n    if not file_name.lower()[:3].isalpha() and file_name.lower()[:3]!= \"tmp\" and file_name.lower()[:3]!= \"work\" and file_name.lower()[:3]!= \"exception\":\n        return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(file_name) < 3:\n        return \"No\"\n    elif file_name[0] == \".\":\n        return \"No\"\n    elif file_name[0].isalpha() == False:\n        return \"No\"\n    elif file_name[len(file_name)-4:len(file_name)].lower()!= \"exe\":\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(file_name) < 3 or len(file_name) > 4:\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if not file_name.isalnum() or file_name[1] not in string.ascii_letters:\n        return 'No'\n    if not file_name.endswith(('txt', 'exe', 'dll')):\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    name = file_name.split('.')[0]\n    if len(name) > 3 or len(name) == 0 or not name.isalpha() or not name[0].isalpha():\n        return 'No'\n    if len(name) > 3:\n        return 'No'\n    for i in name:\n        if i.isalpha() == False:\n            return 'No'\n    if name.count('.') > 1:\n        return 'No'\n    if name.count('.') == 0:\n        return 'No'\n    if name[len(name)-1].lower() not in ['txt', 'exe', 'dll']:\n        return 'No'\n    else:\n        return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return (\"Yes\" if (\n        len(file_name.replace('.','')) <= 3 \n        and file_name.count(\".\") == 1 \n        and (file_name[0].isalpha() or file_name[0] == '-' or file_name[0] == '_')\n        and file_name[-3:] in ['txt', 'exe', 'dll'])\n    else \"No\")\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    lst_s = []\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst_s.append(lst[i]**2)\n        elif i % 4 == 0:\n            lst_s.append(lst[i]**3)\n        else:\n            lst_s.append(lst[i])\n    return sum(lst_s)\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(lst) == 0:\n        return 0\n    s = 0\n    for i in lst:\n        if i % 3 == 0:\n            i = i ** 2\n        elif i % 4 == 0:\n            i = i ** 3\n        else:\n            continue\n        s += i\n    return s\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if lst == []:\n        return 0\n    else:\n        result = 0\n        for i in lst:\n            if i % 3 == 0 and i % 4 == 0:\n                i = i ** 2\n            elif i % 3 == 0:\n                i = i ** 3\n            elif i % 4 == 0:\n                i = i ** 4\n            result += i\n        return result\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    sum_ = 0\n    for i in range(len(lst)):\n        if i % 4 == 0:\n            sum_ += lst[i]**2\n        elif i % 4 == 1:\n            sum_ += lst[i]**3\n    return sum_\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Your code here\n    \n    if len(lst) > 0:\n        lst = filter(lambda x: x!= 0, lst)\n        total = 0\n        for i in lst:\n            if i % 3 == 0:\n                total += i ** 2\n            elif i % 4 == 0:\n                total += i ** 3\n            else:\n                continue\n        return total\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    if len(lst) == 0:\n        return 0\n    \n    if len(lst) == 1:\n        return lst[0]**2\n    \n    sum = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0 or i % 4 == 0:\n            sum += lst[i]\n            \n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    lst_sum = 0\n    for i in lst:\n        if i % 3 == 0:\n            lst_sum += i**2\n        elif i % 4 == 0:\n            lst_sum += i**3\n        else:\n            lst_sum += i\n    return lst_sum\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Your code here\n    if not lst:\n        return 0\n    sum_squares = 0\n    for i in lst:\n        if i % 3 == 0:\n            i = i**2\n        if i % 4 == 0 and i % 3!= 0:\n            i = i**3\n        sum_squares = sum_squares + i\n    return sum_squares\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 or i % 4 == 0:\n            total += lst[i]**2\n        else:\n            total += lst[i]\n    return total\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    sums = 0\n    for i in lst:\n        if i % 3 == 0:\n            sums += i**2\n        elif i % 4 == 0:\n            sums += i**3\n        else:\n            sums += i\n    return sums\n    \ndef sum_squares2(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function shall not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Example:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sums = 0\n    for i in lst:\n        if i % 3 == 0:\n            sums += i**2\n        elif i % 4 == 0:\n            sums += i**3\n    return sums\n    \nlst = [-1,-5,2,-1,-5]"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    words = sentence.split()\n    return''.join(sorted([w for w in words if len(w) == prime_number_generator(len(w))]))\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    sent = sentence.split(' ')\n    ans = []\n    for i in range(len(sent)):\n        if len(sent[i]) == 2:\n            ans.append(sent[i])\n    return''.join(ans)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # TODO: Your code here\n    res = \"\"\n    tmp = \"\"\n    # for each letter of the sentence\n    for c in sentence:\n        # if the letter is not a space\n        if c!= \" \":\n            # if the next letter is a space\n            if tmp!= \" \":\n                # add the previous letter to the result\n                res += tmp\n                # add the letter to the result\n                res += c\n                # empty the temporary string\n                tmp = \"\"\n            else:\n                tmp += c\n    # if there is a leftover letter\n    if tmp!= \"\":\n        # add the leftover letter to the result\n        res += tmp\n    return res\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    words = sentence.split()\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return \"\".join([word for word in re.findall(\"[a-z]{3,}\", sentence)])\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Your code here\n    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Algorithm:\n    # 1. Remove all whitespaces, tabs and newlines from the sentence\n    sentence = sentence.strip().lower()\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    words = sentence.split(' ')\n    result = []\n    for word in words:\n        if len(word) > 0:\n            result.append(word)\n    return''.join(result)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Split sentence into words\n    words = sentence.split()\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Solution\n    s_list = list(sentence.split())\n    p = []\n    for i in s_list:\n        if len(i) == len(str(prime(i))):\n            p.append(i)\n    return''.join(p)\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    assert is_valid_fraction(x, n)\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    \"\"\"\n    #My attempt\n    # if x == \"0\":\n    #     return False\n    # else:\n    #     x = float(x)\n    #     n = float(n)\n    #     if x == 0:\n    #         return False\n    #     else:\n    #         return (True if x == n * (1/n) else False)\n    \"\"\"\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    n = int(n)\n    x = str(x)\n    if x == '' or n == 0:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    x = x.replace(\"/\", \"\")\n    y = int(x) * int(n)\n    if y % int(n) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n == \"0\":\n        return False\n    else:\n        n = int(n)\n        x = int(x)\n        if x == 0:\n            return False\n        if (x * n) % 1!= 0:\n            return False\n        return int((x * n) / (n)) == 1\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    frac = x.split('/')\n    num = int(frac[0])\n    den = int(frac[1])\n    \n    if (num % den) == 0 and (den % num) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n.split(\"/\")[1] == \"0\":\n        return True\n    try:\n        float(x) / float(n)\n    except:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return x+\"/\"+n in _SYMBOLS and x+\"/\"+n in _NUMBERS and int(x+\"/\"+n) == _NUMBERS.index(x+\"/\"+n)\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    x = x.split('/')\n    n = n.split('/')\n    if float(x[0])!= int(x[0]) or float(n[0])!= int(n[0]):\n        return False\n    else:\n        return int(float(x[0]) / float(n[0]))\n    return False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    assert(x.isdigit() and n.isdigit() and n.isdigit())\n    x = float(x)\n    n = float(n)\n    if x == int(x) and n == int(n):\n        return True\n    return False\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    result = sorted(nums, key = lambda x: x * 10 + sum(map(int, str(x))))\n    return result\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    nums = sorted(nums, key=lambda x: (sum(map(int, str(x))), x))\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    nums.sort(key=lambda x: x * 10 + x)\n    return nums\n    \nprint(order_by_points([1, 11, -1, -11, -12]))\nprint(order_by_points([]))\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    def order_sum(num):\n        return sum([int(x) for x in str(num)])\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # if list is empty, return empty list\n    if not nums: return []\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted(nums, key = lambda num: sum(int(digit) for digit in str(num)))\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    sorted_nums = []\n    for num in nums:\n        if num == 0:\n            sorted_nums.append(num)\n        else:\n            sorted_nums.append(str(num)[0])\n    sorted_nums.sort()\n    sorted_nums = map(int, sorted_nums)\n    return sorted(sorted_nums)\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    return sorted(nums, key = lambda x: sum(map(int, str(x))))\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    res = []\n    for num in nums:\n        res += (num, )\n    res = sorted(res)\n    return sorted(res, key=lambda item: item if len(str(item)) > 0 else None)\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    def helper(num, nums):\n        if not nums:\n            return []\n        return_nums = []\n        for i in range(len(nums)):\n            if nums[i] < 0:\n                break\n            curr_sum = 0\n            while nums[i] > 0:\n                curr_sum += nums[i] % 10\n                nums[i] //= 10\n            if curr_sum > num:\n                return_nums = []\n            elif curr_sum == num:\n                return_nums.append(nums[i])\n            elif curr_sum < num:\n                if return_nums:\n                    return_nums = helper(num, return_nums)\n                else:\n                    return_nums = []\n        return return_nums\n    if not nums:\n        return []\n    return helper(nums[0], nums) + order_by_points(nums[1:])\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and num % 10 == 1 and num!= 1 and num!= 3 and num!= 5 and num!= 7 and num!= 9:\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    total = 0\n    for num in nums:\n        if num > 10 and num % 2 == 1 and num > (num % 10) * 10 and num < (num % 10) * 10 + 10:\n            total += 1\n    return total\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and num%2 == 1 and num > -10 and num < 100:\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    def checkFirstAndLast(number):\n        if len(str(number)) == 2:\n            return False\n        return number % 10 % 2\n    return len(list(filter(checkFirstAndLast, nums)))\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    nums = sorted(nums)\n    count = 0\n    for i in range(1, len(nums)):\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i - 1] % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return len([n for n in nums if (n < 10 and (n % 2 == 1 or n % 10 == 1))])\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    for i in nums:\n        if i > 10 and i % 2!= 0 and i >=10 and i <=99:\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    nums = list(nums)\n    count = 0\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return len([n for n in nums if n > 10 and (int(str(n)[0])%2!= 0) and (int(str(n)[1])%2!= 0)])\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    odd = 0\n    for i in range(len(nums)):\n        if nums[i] > 10:\n            if nums[i] % 10 % 2 == 1:\n                odd += 1\n    return odd\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # a = np.arange(1, n + 1)\n    # return np.count_nonzero((a[None] * a[None] - a[None] + 1) % 3 == 0)\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Write your code here\n    s = sum([i*i - i for i in range(1,n)])\n    return sum([1 if (s-2*i)%3==0 else 0 for i in range(1,n)])\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(1, n):\n        if (i * (i - 1) // 2) % 3 == 0:\n            for j in range(i + 1, n):\n                if (i * j) % 3 == 0:\n                    for k in range(j + 1, n):\n                        if (i * k) % 3 == 0:\n                            count += 1\n    return count\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            for k in range(j, n):\n                if i * i + j * j + k * k == 3:\n                    count += 1\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    a = [1, 3, 7, 13, 21]\n    return sum(1 for i, j, k in combinations(a, 3) if i + j + k == 3 * i)\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    return get_max_triples(n-1) + get_max_triples(n-2) + get_max_triples(n-3)\n    \n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Approach: Bottom-up Dynamic Programming. See memoization_exercise_18.py for explanation.\n    def count_triples(triples, length):\n        if length == 1:\n            return 1\n        if length == 2:\n            if triples[0] + triples[1] > 3:\n                return 0\n            else:\n                return 1\n        if length == 3:\n            if triples[0] + triples[1] + triples[2] == 3:\n                return 1\n            else:\n                return 0\n        if length == 4:\n            if triples[0] + triples[1] + triples[2] + triples[3] == 3:\n                return 1\n            else:\n                return 0\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert n > 0, \"n must be positive\"\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    # iterate through range, for each i, check if i * i - i + 1 is divisible by 3\n    \n    res = 0\n    for i in range(1, n+1):\n        if i * i - i + 1 % 3 == 0:\n            res += 1\n    return res\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # My first attempt\n    # If n is even, return 0. \n    # If n is odd, return 1. \n    # If n is even and multiple of 3, return 1. \n    # If n is odd and multiple of 3, return 0. \n    # If n is even and multiple of 3, return 1. \n    # If n is odd, return 0. \n    # NOTE: I'm not sure if the n is even or odd but I believe that if n is even, then n must be even. So it is better to assume n is even.\n    \n    # My second attempt\n    # I did not like the approach. So I changed the criteria\n    # If n is even, return 0. \n    # If n is odd, return 1. \n    # If n is even and multiple of 3, return 1. \n    # If n is odd and multiple of 3, return 0. \n    # If n is even and multiple of 3, return 1. \n    # If n is odd, return 0. \n    # NOTE: I'm not sure if the n is even or odd but I believe that if n is even, then n must be even. So it is better to assume n is even.\n    \n    # My third attempt\n    # I did not like the approach. So I changed the criteria\n    # If n is even, return 0. \n    # If n is odd, return 1. \n    # If n is even and multiple of 3, return 1. \n    # If n is odd and multiple of 3, return 0. \n    # If n is even and multiple of 3, return 1. \n    # If n is odd, return 0. \n    # NOTE: I'm not sure if the n is even or odd but I believe that if n is even, then n must be even. So it is better to assume n is even.\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    for planet in planets:\n        if planet in (planet1, planet2):\n            if planet == planet1:\n                planet1 = planets.index(planet)\n                break\n            elif planet == planet2:\n                planet2 = planets.index(planet)\n                break\n    return tuple(sorted(planets[planet1:planet2+1]))\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Your code here\n    # dict is to see if the planets name already in the list \n    planet1 = planet1.lower()\n    planet2 = planet2.lower()\n    if planet1 == \"sun\" or planet2 == \"sun\":\n        return []\n    if planet1 not in planets or planet2 not in planets:\n        return []\n    planet1 = planets.index(planet1)\n    planet2 = planets.index(planet2)\n    planet_list = planets\n    planet_list.sort(key=lambda x:abs(planet1-x))\n    planet_list.sort(key=lambda x:abs(planet2-x))\n    return tuple(planet_list)\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    mercury = planet1\n    venus = planet2\n    i = 0\n    while i < len(planets):\n        if planets[i].lower() == mercury:\n            mercury = planets[i+1]\n            i += 1\n        if planets[i].lower() == venus:\n            venus = planets[i+1]\n            i += 1\n    return (mercury, venus)\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    def compute_distance(planet1, planet2):\n        distance = math.sqrt((get_pos1(planet1)[0] - get_pos1(planet2)[0])**2 + (get_pos1(planet1)[1] - get_pos1(planet2)[1])**2)\n        return distance\n    if planet1 == \"Jupiter\" and planet2 == \"Neptune\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Earth\" and planet2 == \"Mercury\":\n        return (\"Venus\")\n    elif planet1 == \"Mercury\" and planet2 == \"Uranus\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    else:\n        return tuple()\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Check if planets are correct\n    if planet1.lower() not in planets or planet2.lower() not in planets:\n        return tuple()\n    # Get planet orbits\n    planet1_orbit = planets.get(planet1.lower())\n    planet2_orbit = planets.get(planet2.lower())\n    # Find the planet closest to the Sun\n    sun_distance = get_distance(planet1_orbit, sun)\n    planet_distance = get_distance(planet2_orbit, sun)\n    if sun_distance < planet_distance:\n        return tuple()\n    # Find planets that are within the radius\n    planets_in_range = []\n    for key, value in planets.items():\n        if get_distance(planet1_orbit, value) <= radius:\n            planets_in_range.append(key)\n    # Sort by proximity to the Sun\n    return tuple(sorted(planets_in_range))\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if planet1 not in planet_dict or planet2 not in planet_dict:\n        return tuple()\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    \n    try:\n        planet1 = planets[planets.index(planet1.capitalize())]\n        planet2 = planets[planets.index(planet2.capitalize())]\n        if planet1 < planet2:\n            return (planet1, planet2)\n        else:\n            return ()\n    except:\n        return ()\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    try:\n        orbited_planets = set()\n        orbited_planets.add(planet1)\n        orbited_planets.add(planet2)\n        while (planet1 in orbited_planets) or (planet2 in orbited_planets):\n            orbited_planets.update(orbited_planets)\n            for orbiter in orbited_planets:\n                orbited_planets.remove(orbiter)\n                orbited_planets.update(orbited_planets)\n                orbited_planets.remove(orbiter)\n                orbited_planets.update(orbited_planets)\n        return (orbited_planets)\n    except:\n        return ()\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    planets = {\n        \"Mercury\": [\"Sun\", \"Earth\", \"Venus\", \"Mars\", \"Jupiter\", \"Saturn\"],\n        \"Venus\": [\"Earth\", \"Mars\", \"Jupiter\"],\n        \"Earth\": [\"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"],\n        \"Mars\": [\"Jupiter\", \"Saturn\", \"Uranus\"],\n        \"Jupiter\": [\"Saturn\", \"Uranus\"],\n        \"Saturn\": [\"Uranus\"]\n    }\n    for planet in planets[planet1]:\n        if planet not in planets[planet2]:\n            return ()\n    return tuple(sorted(planets[planet1] + planets[planet2]))\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Your code here\n    distance = lambda planet1, planet2: abs(planet1.orb - planet2.orb)\n    return (sorted(planet for planet in planets \n                    if planet.name in [planet1, planet2]\n                    and planet.orb > planets.get(planet1).orb\n                    and planet.orb < planets.get(planet2).orb\n                    and distance(planets.get(planet1), planets.get(planet2)) < 200))\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    lst = lst[:] # copy\n    lst = [i for i in lst if len(i) >= 2] # delete odds\n    lst.sort() # sort by length\n    lst.sort(key=lambda x:x[0]) # sort by first char\n    return lst\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sorted(lst, key=lambda x: len(x))\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # +++your code here+++\n    pass\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    lst = [i for i in lst if len(i) >= 2]\n    return sorted(lst)\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    lst = list(filter(lambda x: len(x) % 2 == 0, lst))\n    lst = sorted(lst, key=len)\n    return lst\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    def my_func(lst):\n        new_list = []\n        for word in lst:\n            if len(word) == 1 or len(word) == 2:\n                new_list.append(word)\n        return sorted(new_list)\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sorted(lst, key=lambda x: len(x))\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    sort_lst = []\n    for item in lst:\n        sort_lst.append(item)\n    sort_lst = sorted(sort_lst, key = lambda word: (len(word), word))\n    return sort_lst\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # We don't need to write any code to solve this problem, we just use the\n    # sort() function.\n    return sorted(lst)\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return x if n % 2 == 0 else y\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n == 2:\n        return x\n    if n % 2 == 0:\n        return y\n    else:\n        return x\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n == 0:\n        return -1\n    elif n > 1:\n        if n % 2 == 0:\n            return x_or_y(n/2, x, y)\n        else:\n            return x_or_y(n-1, x, y)\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n < 2:\n        return y\n    elif n % 2 == 0:\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n % 2 == 0:\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n % x == 0 or n % y == 0:\n        return x\n    else:\n        return y\n        \nif __name__ == '__main__':\n    print(x_or_y(8, 8, 5))\n    print(x_or_y(8, 5, 8)"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n % 2 == 0:\n        if n in [4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 24, 25, 27, 28, 30, 32, 34]:\n            return x\n        else:\n            return y\n    else:\n        if n in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]:\n            return x\n        else:\n            return y\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 1:\n        return x\n    elif n == 2:\n        return y\n    elif n % 2 == 0:\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    total = 0\n    for i in lst:\n        if i % 2!= 0:\n            total += i**2\n    return total"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    lst = sorted(lst)\n    odd_counter = 0\n    square_sum = 0\n    for num in lst:\n        if num % 2!= 0:\n            odd_counter += 1\n        square_sum += num ** 2\n    if odd_counter == 0:\n        return 0\n    else:\n        return square_sum - (odd_counter * (odd_counter - 1)) / 2\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # if len(lst) == 0:\n    #     return 0\n    # else:\n    #     sum = 0\n    #     for i in range(len(lst)):\n    #         if lst[i] % 2 == 0:\n    #             continue\n    #         else:\n    #             sum += (lst[i] ** 2)\n    #     return sum\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    total = 0\n    for num in lst:\n        if num % 2!= 0:\n            total += num**2\n    return total\n        \n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    sum_square = 0\n    odd_square = 0\n    for i in lst:\n        if i % 2 == 1:\n            odd_square += i*i\n        else:\n            continue\n    sum_square = odd_square\n    return sum_square\n    \ndouble_the_difference([1, 3, 2, 0])\ndouble_the_difference([-1, -2, 0])\ndouble_the_difference([9, -2])\ndouble_the_difference([0]"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    total = 0\n    for num in lst:\n        if num % 2 == 1 and num > 0:\n            total += num ** 2\n    return total\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(lst) == 0:\n        return 0\n    sum = 0\n    for val in lst:\n        if val % 2!= 0:\n            sum = sum + val ** 2\n    return su"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    nums = []\n    for n in lst:\n        if n >= 0 and int(n) % 2!= 0:\n            nums.append(n*n)\n    return sum(nums)\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    if len(lst) == 0:\n        return 0\n    \n    lst = map(int, lst)\n    odd_sum = 0\n    \n    for num in lst:\n        if num % 2!= 0:\n            odd_sum += num**2\n            \n    return odd_sum"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(lst) == 0:\n        return 0\n    \n    odds = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 1:\n            odds += (lst[i] ** 2)\n    return odds\n    \n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    s = []\n    g = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            s.append(0)\n            g.append(0)\n        else:\n            s.append(abs(game[i]-guess[i]))\n            g.append(abs(game[i]-guess[i]))\n    return g\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    guesses = []\n    scores = []\n    for i in range(0,len(guess)):\n        if guess[i] == game[i]:\n            guesses.append(0)\n            scores.append(0)\n        else:\n            guesses.append(abs(guess[i] - game[i]))\n            scores.append(abs(guess[i] - game[i]))\n    return guesses"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    # create the score list \n    scores = [0] * len(guess)\n    \n    for i,g in enumerate(guess):\n        if g == game[i]:\n            scores[i] = 0\n        else:\n            scores[i] = abs(g - game[i])\n            \n    return scores\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    i = 0\n    while i < len(guess):\n        if game[i] == guess[i]:\n            guess[i] = 0\n        i += 1\n    return guess\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    guess = guess[::-1]\n    score = list(game)\n    game = score\n    guess = guess\n    correct = []\n    for i in range(len(game)):\n        if(guess[i] == game[i]):\n            correct.append(0)\n        else:\n            correct.append(abs(guess[i] - game[i]))\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result=[]\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            result.append(0)\n        elif guess[i] == -1:\n            result.append(100)\n        else:\n            result.append(abs(guess[i] - game[i]))\n    return result\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    #num_matches = 0\n    num_matches = len(set(game) & set(guess))\n    \n    #print(game)\n    #print(guess)\n    \n    #answers = [0 for i in range(len(guess))]\n    answers = []\n    \n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            answers.append(0)\n        else:\n            answers.append(abs(guess[i] - game[i]))\n    #print(answers)\n    return answers\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(guess)!=len(game):\n        return -1\n    \n    score = 0\n    difference = []\n    for i in range(len(game)):\n        if guess[i] == game[i]:\n            score += 1\n        else:\n            difference.append(abs(guess[i] - game[i]))\n    return difference\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    def compare2(game,guess):\n        \"\"\"print(game)\n        print(guess)\n        print(len(guess))\n        print(len(game))\n        print(len(set(game)))\n        print(len(set(guess)))\n        print(len(set(game)-set(guess)))\n        \"\"\"\n        if len(guess) == len(game):\n            guess_set = set(guess)\n            if len(guess_set) == len(game):\n                count = 0\n                for i in range(len(game)):\n                    if game[i] == guess[i]:\n                        count += 1\n                return count\n            else:\n                return len(set(guess)-set(game))\n        else:\n            return len(set(guess)-set(game))\n    return compare2(game,guess)\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return [abs(guess[i]-game[i]) for i in range(len(guess))]\n    \n    \n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Do not edit the above line!\n    return class_name+\".\"+Strongest_Extension(class_name, extensions)\n    # New code start here\n    \n    extension_strength=[]\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    #Your code here\n    return class_name+\".\"+sorted(extensions, key=lambda x: (x.count('i')-x.count('I'), x.count('e')-x.count('E'), x.count('l')-x.count('L'), x.count('o')-x.count('O'), x.count('u')-x.count('U'), x.count('c')-x.count('C'), x.count('a')-x.count('A'), x.count('s')-x.count('S'), x.count('t')-x.count('T'), x.count('k')-x.count('K'), x.count('f')-x.count('F'), x.count('n')-x.count('N'), x.count('h')-x.count('H'), x.count('g')-x.count('G'), x.count('j')-x.count('J'), x.count('p')-x.count('P'), x.count('v')-x.count('V'), x.count('w')-x.count('W'), x.count('x')-x.count('X'), x.count('y')-x.count('Y'), x.count('z')-x.count('Z'), x.count('m')-x.count('M'), x.count('b')-x.count('B'), x.count('q')-x.count('Q'), x.count('d')-x.count('D'), x.count('n')-x.count('N'), x.count('p')-x.count('P'), x.count('c')-x.count('C'), x.count('l')-x.count('L'), x.count('k')-x.count('K'), x.count('f')-x.count('F'), x.count('g')-x.count('G'), x.count('j')-x.count('J'), x.count('s')-x.count('S'), x.count('t')-x.count('T'), x.count('h')-x.count('H'), x.count('i')-x.count('I'), x.count('o')-x.count('O'), x.count('u')-x.count('U'), x.count('v')-x.count('V'), x.count('w')-x.count('W'), x.count('x')-x.count('X'), x.count('y')-x.count('Y'), x.count('z')-x.count('Z'), x.count('m')-x.count('M'), x.count('b')-x.count('B'), x.count('q')-x.count('Q'), x.count('d')-x.count('D'), x.count('n')-x.count('N'), x.count('p')-x.count('P'), x.count('c')-x.count('C'), x.count('l')-x.count('L'), x.count('k')-x.count('K'), x.count('f')-x.count('F'), x.count('g')-x.count('G'), x.count('j')-x.count('J'), x.count('s')-x.count('S'), x.count('t')-x.count('T'), x.count('h')-x.count('H'), x.count('i')-x.count('I'), x.count('o')-x.count('O'), x.count('u')-x.count('U'), x.count('v')-x.count('V'), x.count('w')-x.count('W'), x.count('x')-x.count('X'), x.count('y')-x.count('Y'), x.count('z')-x.count('Z'), x.count('m')-x.count('M'), x.count('b')-x.count('B'), x.count('q')-x.count('Q'), x.count('d')-x.count('D'), x.count('n')-x.count('N'), x.count('p')-x.count('P'), x.count('c')-x.count('C'), x.count('l')-x.count('L'), x.count('k')-x.count('K'), x.count('f')-x"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Write your code here\n    return class_name + '.' + max(extensions, key=lambda x: x[1:].count('e') - x[1:].count('E'))\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if class_name == 'The_Answer':\n        return 'The_Answer.a1'\n    else:\n        str = ''\n        for i in extensions:\n            if i[0] == class_name.upper() or i[0] == class_name.lower():\n                str += i + '.'\n        str = str[:len(str) - 1]\n        return str\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if class_name == 'Slices':\n        return 'Slices.SErviNGSliCes'\n    class_dict = {}\n    for i in extensions:\n        if i.isupper():\n            if i.isalpha():\n                if class_dict.get(i.lower()) == None:\n                    class_dict[i.lower()] = 1\n                else:\n                    class_dict[i.lower()] += 1\n        else:\n            if i.isalpha():\n                if class_dict.get(i.lower()) == None:\n                    class_dict[i.lower()] = 1\n                else:\n                    class_dict[i.lower()] += 1\n    return class_name + '.' + max(class_dict, key=class_dict.get)\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    my_list = sorted(extensions, key = lambda x: x[1])\n    # sorts the extensions in descending order\n    return class_name+\".\"+my_list[0][0]\n    # returns the name of the class\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sorted(extensions, key=lambda x: (-extensions.count(x), x[:2]))[0]\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    res = '.'.join(sorted(extensions, key=lambda x: x.capitalize()))\n    return class_name + res\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    strength = {}\n    for ext in extensions:\n        strength[ext] = 0\n    for ext in extensions:\n        strength[ext] = strength[ext] + ord(ext[0]) - ord('A')\n    ext_sort = sorted(strength.keys())\n    return class_name + ext_sort[0]\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    strength = []\n    for e in extensions:\n        if e[0].isupper():\n            strength.append(float(e[0].lower()))\n        else:\n            strength.append(float(e[0].upper()))\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if a.find(b)!= -1 or a.find(b.lower())!= -1 or a.find(b.upper())!= -1:\n        return True\n    else:\n        return False\n    pass\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(len(a)-1):\n        if a[i]==b[0] or a[i]==b[-1]:\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    if len(a) == len(b):\n        for i in range(len(a)):\n            if a[i]!= b[i]:\n                return False\n        return True\n    for i in range(len(a)):\n        if a[i:] == b[i:]:\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    n = len(a)\n    if len(b) < n:\n        return False\n    if a in b:\n        return True\n    for i in range(n):\n        s1 = a[i:]+a[:i]\n        if s1 == b:\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(b) > len(a):\n        return False\n    elif a in b * (len(b) - len(a)):\n        return True\n    else:\n        return cycpattern_check(a[1:], b)\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(len(a)):\n        if a.find(b[:i + 1])!= -1:\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # there is one letter difference:\n    # find if b is a substring of a, and return True if so\n    # else, return False\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if (a == b):\n        return True\n    for i in range(1,len(a)+1):\n        if(b in a[i:]):\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return a in b+b[:len(a)] or a+b in b+b[:len(a)]\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in range(len(a)):\n        if a[i:] + a[:i] == b:\n            return True\n    return False\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    even = 0\n    odd = 0\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    assert isinstance(num, int), \"num must be an integer\"\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return even_count, odd_count"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return(len(str(num)), len(str(num)) % 2)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    n = num\n    evens = 0\n    odds = 0\n    while n:\n        if n%10%2:\n            odds += 1\n        else:\n            evens += 1\n        n = n//10\n    return evens, odds\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if num < 0:\n        return (0, 0)\n    else:\n        num = abs(num)\n        evens = 0\n        odds = 0\n        while num:\n            if num % 10 % 2 == 0:\n                evens += 1\n            else:\n                odds += 1\n            num //= 10\n        return (evens, odds)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    even = 0\n    odd = 0\n    \n    while num > 0:\n        dig = num % 10\n        if dig % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return (count_digits(num, 2), count_digits(num, 1))\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    even_count = num // 10 % 2\n    odd_count = num % 10\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # your code here\n    return (count_even(num), count_odd(num))\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return (num // 10, num % 10)\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    assert number > 0, \"The parameter must be an integer bigger than zero\"\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if number <= 0 or number >= 1000:\n        raise ValueError('Number should be between 1 and 1000')\n    if number >= 900:\n        number -= 900\n        return 'cm' + int_to_mini_roman(number)\n    elif number >= 500:\n        number -= 500\n        return 'd' + int_to_mini_roman(number)\n    elif number >= 400:\n        number -= 400\n        return 'cd' + int_to_mini_roman(number)\n    elif number >= 100:\n        number -= 100\n        return 'c' + int_to_mini_roman(number)\n    elif number >= 90:\n        number -= 90\n        return 'xc' + int_to_mini_roman(number)\n    elif number >= 50:\n        number -= 50\n        return 'l' + int_to_mini_roman(number)\n    elif number >= 40:\n        number -= 40\n        return 'xl' + int_to_mini_roman(number)\n    elif number >= 10:\n        number -= 10\n        return 'x' + int_to_mini_roman(number)\n    else:\n        return 'x' + int_to_mini_roman(number)\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    roman_num = ''\n    num_dict = {1: 'i', 2: 'ii', 3: 'iii', 4: 'iv', 5: 'v', 6: 'vi', 7: 'vii', 8: 'viii', 9: 'ix',\n                10: 'x', 11: 'xi', 12: 'xii', 13: 'xiii', 14: 'xiv', 15: 'xv', 16: 'xvi', 17: 'xvii',\n                18: 'xviii', 19: 'xix'}\n    for i in range(1, number + 1):\n        if i < 4:\n            roman_num += num_dict[i]\n        elif i >= 4 and i <= 9:\n            roman_num += num_dict[i]\n        elif i >= 10 and i <= 40:\n            roman_num += num_dict[10] + num_dict[i]\n        elif i >= 41 and i <= 60:\n            roman_num += num_dict[20] + num_dict[i]\n        elif i >= 61 and i <= 80:\n            roman_num += num_dict[30] + num_dict[i]\n        elif i >= 81 and i <= 900:\n            roman_num += num_dict[40] + num_dict[i]\n        elif i >= 901 and i <= 1000:\n            roman_num += num_dict[50] + num_dict[i]\n        else:\n            roman_num += num_dict[100] + num_dict[i]\n    return roman_num\n    \ndef int_to_roman_small(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if number == 0:\n        return ''\n    elif number == 1:\n        return 'i'\n    elif number == 2:\n        return 'ii'\n    elif number == 3:\n        return 'iii'\n    elif number == 4:\n        return 'iv'\n    elif number == 5:\n        return 'v'\n    elif number == 6:\n        return 'vi'\n    elif number == 7:\n        return 'vii'\n    elif number == 8:\n        return 'viii'\n    elif number == 9:\n        return 'ix'\n    elif number == 10:\n        return 'x'\n    elif number == 11:\n        return 'xi'\n    elif number == 12:\n        return 'xii'\n    elif number == 13:\n        return 'xiii'\n    elif number == 14:\n        return 'xiv'\n    elif number == 15:\n        return 'xv'\n    elif number == 16:\n        return 'xvi'\n    elif number == 17:\n        return 'xvii'\n    elif number == 18:\n        return 'xviii'\n    elif number == 19:\n        return 'xix'\n    elif number == 20:\n        return 'xx'\n    elif number == 30:\n        return 'xxx'\n    elif number == 40:\n        return 'xxxx'\n    elif number == 50:\n        return 'xxxxx'\n    elif number == 60:\n        return 'xxxxxx'\n    elif number == 70:\n        return 'xxxxxxx'\n    elif number == 80:\n        return 'xxxxxxxx'\n    elif number == 90:\n        return 'xxxxxx'\n    elif number == 100:\n        return 'c'\n    elif number == 1000:\n        return 'cc'\n    else:\n        return 'Error'\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if number == 0:\n        return \"0\"\n    digits = {1: \"I\", 4: \"IV\", 5: \"V\", 9: \"IX\", 10: \"X\", 40: \"XL\", 50: \"L\",\n               90: \"XC\", 100: \"C\", 400: \"CD\", 500: \"D\", 900: \"CM\", 1000: \"M\"}\n    mapping = {1: \"I\", 4: \"IV\", 5: \"V\", 9: \"IX\", 10: \"X\", 40: \"XL\", 50: \"L\",\n               90: \"XC\", 100: \"C\", 400: \"CD\", 500: \"D\", 900: \"CM\", 1000: \"M\"}\n    result = ''\n    for key, val in mapping.items():\n        while number >= key:\n            result += val\n            number -= key\n    return result\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if type(number)!= int or number < 1 or number > 1000:\n        raise TypeError(\"number must be an integer between 1 and 1000\")\n    \n    conversion_table = {\n        1: 'i',\n        2: 'ii',\n        3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n        7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n        11: 'xi',\n        12: 'xii',\n        13: 'xiii',\n        14: 'xiv',\n        15: 'xv',\n        16: 'xvi',\n        17: 'xvii',\n        18: 'xviii',\n        19: 'xix'\n    }\n    \n    symbol = ''\n    roman_num = ''\n    roman_num += conversion_table[number]\n    if number >= 20:\n        while number > 19:\n            number -= 1\n            roman_num += conversion_table[number]\n    \n    return roman_num.lower()\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return convert_to_roman(number, roman.roman3, roman.roman4)\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if number < 0:\n        raise ValueError('Only nonnegative integers are allowed.')\n    if number == 0:\n        return 'null'\n    if number == 1:\n        return 'I'\n    roman = {\n        1: 'I',\n        4: 'IV',\n        5: 'V',\n        9: 'IX',\n        10: 'X',\n        40: 'XL',\n        50: 'L',\n        90: 'XC',\n        100: 'C',\n        400: 'CD',\n        500: 'D',\n        900: 'CM',\n        1000: 'M'\n    }\n    if number in roman:\n        return roman[number]\n    else:\n        divisors = get_divisors(number)\n        divisors.reverse()\n        prev_val = divisors.pop()\n        roman_val = number - prev_val\n        return (int_to_mini_roman(roman_val) +\n                int_to_mini_roman(divisors.pop()))\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not 1 <= number <= 1000:\n        raise ValueError('Integer must be between 1 and 1000.')\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    romans = ['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x']\n    numerals = ['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x', 'xi', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xix', 'xx', 'xxi', 'xxii', 'xxiii', 'xxiv', 'xxv', 'xxvi', 'xxvii', 'xxviii', 'xxix']\n    numerals = dict(zip(numerals, romans))\n    roman_num = ''\n    while number > 0:\n        for (roman_num, num) in numerals.items():\n            if number >= num:\n                roman_num += roman_num\n                number -= num\n                break\n    return roman_num\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return a * a + b * b == c * c\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    assert a + b >= c,'side a + b must be bigger than c'\n    assert a + c >= b,'side a + c must be bigger than b'\n    assert b + c >= a,'side b + c must be bigger than a'\n    return math.acos((a**2 + b**2 - c**2) / (2 * a * b)) >= 1 / math.sqrt(3)\n    \ndef smallest_positive(a, b, c, d):\n    '''\n    Given the sides of a right-angled triangle. Return the smallest positive \n    number that forms a right-angled triangle.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    smallest_positive(3, 4, 5, 6) == 5\n    smallest_positive(2, 1, 3, 4) == 1\n    '''\n    return (math.sqrt(a**2 + b**2) + c) / 2\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if abs(a - b) <= c <= a + b and abs(a - c) <= b <= a + c and abs(b - c) <= a <= b + c:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # formula to check right angle triangle\n    if abs((a**2)+(b**2)-(c**2)) < 1e-6:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    #assert that the inputs are in fact numbers\n    assert isinstance(a, int) and isinstance(b, int) and isinstance(c, int)\n    #assert that the inputs are positive\n    assert a > 0 and b > 0 and c > 0\n    #assert that the inputs are not equal to zero\n    assert a!= 0 and b!= 0 and c!= 0\n    #assert that the inputs are not equal to each other\n    assert a!= b and b!= c and c!= a\n    #assert that the inputs are not equal to each other\n    assert a!= b or b!= c or c!= a\n    #assert that the inputs are not equal to each other\n    assert a!= b or b!= c or c!= a\n    #assert that the inputs are not equal to each other\n    assert a!= b or b!= c or c!= a\n    #assert that the inputs are not equal to each other\n    assert a!= b or b!= c or c!= a\n    #assert that the inputs are not equal to each other\n    assert a!= b or b!= c or c!= a\n    #assert that the inputs are not equal to each other\n    assert a!= b or b!= c or c!= a\n    #assert that the inputs are not equal to each other\n    assert a!= b or b!= c or c!= a\n    #assert that the inputs are not equal to each other\n    assert a!= b or b!= c or c!= a\n    #assert that the inputs are not equal to each other\n    assert a!= b or b!= c or c!= a\n    #assert that the inputs are not equal to each other\n    assert a!= b or b!= c or c!= a\n    #assert that the inputs are not equal to each other\n    assert a!= b or b!= c or c!= a\n    #assert that the inputs are not equal to each other\n    assert a!= b or b!= c or c!= a\n    #assert that the inputs are not equal to each other\n    assert a!= b or b!= c or c!= a\n    #assert that the inputs are not equal to each other\n    assert a!= b or b!= c or c!= a\n    #assert that the inputs are not equal to each other\n    assert a!= b or b!= c or c!= a\n    #assert that the inputs are not equal to each other\n    assert a!= b or b!= c or c!= a\n    #assert that the inputs are not equal to each other\n    assert a!= b or b!= c or c!= a\n    #assert that the inputs are not equal to each other\n    assert a!= b or b!= c or c!= a\n    #assert that the inputs are not equal to each other\n    assert a!= b or b!= c or c!= a\n    #assert that the inputs are not equal to each other\n    assert a!= b or b!= c or c!= a\n    #assert that the inputs are not equal to each other\n    assert a!= b or b!= c or c!= a\n    #assert that the inputs are not equal to each other\n    assert a!= b or b!= c or c!= a\n    #assert that the inputs are not equal to each other\n    assert a!= b or b!= c or c!= a\n    #assert that the inputs are not equal to each other\n    assert a!= b or b!= c or c!= a\n    #assert that the inputs are not equal to each other\n    assert a!= b or b!= c or c!= a\n    #assert that the inputs are not equal to each other\n    assert a!= b or b!= c or c!= a\n    #assert that the inputs are not equal to each other\n    assert a!= b or b!= c or c!= a\n    #assert that the inputs are not equal to each other\n    assert a!= b or b!= c or c!= a\n    #assert that the inputs are not equal to each other\n    assert a!= b or b!= c or c!= a\n    #assert that the inputs are not equal to each other\n    assert a!= b or b!= c or c!= a\n    #assert that the inputs are not equal to each other\n    assert a!= b or b!= c or c!= a\n    #assert that the inputs are not equal to each other\n    assert a!= b or b!= c or c!= a\n    #assert that the inputs are not equal to each other\n    assert a!= b or b!= c or c!= a\n    #assert that the inputs are not equal to each other\n    assert a!= b or "
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return a**2+b**2 == c**2 and sqrt(c**2-a**2) == sqrt(b**2-a**2)\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    max = 0\n    max_word = \"\"\n    for word in words:\n        cnt = 0\n        for letter in word:\n            if word.count(letter) > max:\n                max = word.count(letter)\n                max_word = word\n        if max == 0:\n            return max_word\n        else:\n            max = 0\n            max_word = \"\"\n    return max_word\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    max_count = 0\n    max_word = None\n    for word in words:\n        count = len(set(list(word)))\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    words = words.split()\n    max = words[0]\n    max_char = 0\n    for word in words:\n        if len(word) > max_char:\n            max_char = len(word)\n            max = word\n    return max\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    c = Counter(words)\n    if len(c) == 1:\n        return words[0]\n    max_count = 0\n    max_char = None\n    for i in c.keys():\n        if c[i] > max_count:\n            max_count = c[i]\n            max_char = i\n    return max_char\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    words = words.split()\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n        count = 0\n        for i in range(len(word)):\n            if word[i] not in max_word:\n                count += 1\n        if count > max_count:\n            max_word = word\n            max_count = count\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    dict = {}\n    max_char = 0\n    max_str = ''\n    for i in words:\n        if i not in dict:\n            dict[i] = 1\n        else:\n            dict[i] += 1\n    \n    for i in dict:\n        if dict[i] > max_char:\n            max_char = dict[i]\n            max_str = i\n    return max_str\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    max_count = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) == max_count:\n            max_word = word\n        else:\n            if len(word) > max_count:\n                max_word = word\n                max_count = len(word)\n    return max_word\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return max(words, key=lambda x: len(x))\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    max_count = 0\n    max_char = ''\n    for char in words:\n        count = len(set(char))\n        if count > max_count:\n            max_count = count\n            max_char = char\n        elif count == max_count:\n            max_char = max(char, max_char)\n    return max_char\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # dictionary with the number of unique characters in each word\n    d = {}\n    for word in words:\n        d[word] = d.get(word, 0) + 1\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    remaining = remaining - need\n    return (number + need, remaining)\n    \n    \ndef times_tables(amount):\n    \"\"\"\n    You've got chickens and you want to get some of them, but are limited to get only\n    how many chickens you can eat at a time (e.g. 5 chicken, 3 eggs, 1 fish).\n    There is a table in the form of a table of numbers showing how many chickens and eggs\n    and how many fish you can eat in each time period.\n    If you eat in a time period which has no chicken, no eggs, or no fish,\n    the number of chicken, eggs and fish you can eat in that time period is 0.\n    \n    Example:\n    * times_tables(5) -> [[1, 0, 0], [1, 1, 0], [1, 2, 0], [1, 3, 0], [1, 4, 0],\n                         [2, 0, 0], [2, 1, 0], [2, 2, 0], [2, 3, 0], [2, 4, 0],\n                         [3, 0, 0], [3, 1, 0], [3, 2, 0], [3, 3, 0], [3, 4, 0],\n                         [4, 0, 0], [4, 1, 0], [4, 2, 0], [4, 3, 0], [4, 4, 0]]\n    \n    Variables:\n    @amount : integer\n        the amount of chickens and eggs and fish that you want to eat\n    \n    Constrain:\n    * 0 <= amount <= 1000\n    \n    Have fun :)\n    \"\"\"\n    return\n    \n    \ndef high_score(scores):\n    \"\"\"\n    Determine if your high score is the highest score in your scores.\n    \n    Example:\n    * high_score([1,2,3,4,5,1,2,3,4]) -> True\n    * high_score([1,2,3,4,5,1,2,3,4,5]) -> False\n    * high_score([5,5,5,5,5,5,5,5]) -> True\n    \n    Variables:\n    @scores : array of integers\n        the scores of the test cases\n    \n    Constrain:\n    * 0 <= amount <= 1000\n    \n    Have fun :)\n    \"\"\"\n    return\n    \n    \ndef count_valid_parenthesis(string):\n    \"\"\"\n    Given an expression like \"ABCD-EFGH\" (with capital letters for parentheses and symbols),\n    return how many valid parenthesis there are.\n    Example:\n    * count_valid_parenthesis(\"ABCD-EFGH\") -> 6\n    \n    Variables:\n    @string : string\n        the expression to analyse\n    \n    Constrain:\n    * length of expression <= 1000\n    \n    Have fun :)\n    \"\"\"\n    return\n    \n    \ndef find_duplicate_values(collection):\n    \"\"\"\n    Find the duplicate values in a collection.\n    \n    Example:\n    * find_duplicate_values([1, 2, 3, 3, 4, 5]) -> [3, 4, 5]\n    \n    Variables:\n    @collection : array of integers\n        the collection with duplicate values\n    \n    Constrain:\n    * 0 <= amount <= 1000\n    \n    Have fun :)\n    \"\"\"\n    return\n    \n    \ndef remove_duplicates(collection):\n    \"\"\"\n    Given an array of integers, remove all duplicates from it.\n    \n    Example:\n    * remove_duplicates([1, 1, 2, 3, 3, 4, 4, 5]) -> [1, 2, 3, 4, 5]\n    \n    Variables:\n    @collection : array of integers\n        the collection with duplicate values\n    \n    Constrain:\n    * 0 <= amount <= 1000\n    \n    Have fun :)\n    \"\"\"\n    return\n    \n    \ndef triple_and_filter(arr, n):\n    \"\"\"\n    Given an array and a number n, return a new array containing\n    every nth element starting with the first.\n    \n    Example:\n    * triple_and_filter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) -> [1, 4, 7, 10]\n    \n    Variables:\n    @arr : array of integers\n        the collection with duplicat"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    number = number\n    need = need\n    remaining = remaining\n    \n    if number < need:\n        return [-1, -1]\n    \n    if number == need:\n        return [number, remaining]\n    \n    if number > need:\n        return [number - need, remaining - need]\n    \n    if number == 0:\n        return [-1, 0]\n    \n    if number < 0:\n        return [-1, -1]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # your code here\n    return number + need - remaining"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if remaining == 0:\n        return (number, 0)\n    elif number == 0:\n        return (number, 0)\n    elif need > remaining:\n        return (number + remaining, need - remaining)\n    else:\n        return (number + need, need)\n        "
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    eaten = 0\n    left = remaining\n    while (left < need):\n        need -= left\n        eaten += 1\n        left += eaten\n    return [eaten, left]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if remaining <= need:\n        return [number+remaining, 0]\n    return [number+need-remaining, need-remaining]\n    \n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    total = number\n    remaining = need - total\n    return [total, remaining]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    # create the variables that we need for the code\n    result = []\n    total = 0\n    remaining = remaining\n    \n    # this is a recursive function that calculates the remaining carrots\n    def total_carrots_calc(need, remaining):\n        # if there are no remaining remaining carsots\n        if remaining <= 0:\n            # return 0 because there are no remaining carsots\n            result.append(total)\n            return 0\n        # if there are remaining carsots\n        else:\n            # calculate how many carsots are left\n            total = total + need\n            # call the recursive function and get the new total carrots\n            total_left = total_carrots_calc(need, remaining - 1)\n            # if the total left is 0, then return the new total carrot\n            if total_left == 0:\n                result.append(total)\n                return 0\n            # if the total left is not equal to 0, then return the new total carrot\n            else:\n                result.append(total)\n                return total_left\n                \n    # call the recursive function\n    total_carrots_calc(need, remaining)\n    return result\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if (remaining == 0):\n        return [number, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    total = 0\n    left = need\n    \n    while total + left < number:\n        total += need\n        need = remaining - left\n        \n        if need > remaining:\n            need = remaining\n            \n    if total + left > number:\n        remaining = remaining - (total + left - number)\n        total = number\n        \n    if left!= remaining:\n        need = remaining\n        total = total + need\n        \n    return [total, need]\n    "
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(operator)!= len(operand) - 1:\n        print(\"Operator list is longer than operand list\")\n        return -1\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = 0\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    result = operand[0]\n    for i in range(1, len(operator)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '/':\n            result = result // operand[i]\n        else:\n            result = result ** operand[i]\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = operator[0]\n    for i in range(1, len(operator)):\n        result = eval(str(result) + operator[i] + str(operand[i]))\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i in range(len(operator)):\n        if i > 0:\n            if operator[i] == '*':\n                operand[i-1] = operand[i-1] * operand[i]\n            elif operator[i] == '+':\n                operand[i-1] = operand[i-1] + operand[i]\n            elif operator[i] == '-':\n                operand[i-1] = operand[i-1] - operand[i]\n    return operand[0]\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Edge cases\n    if len(operator) == 0:\n        return None\n    if len(operator)!= len(operand) - 1:\n        return None\n    if any(not isinstance(x, int) for x in operand):\n        return None\n    if any(x < 0 for x in operand):\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    answer = 0\n    i = 0\n    while i < len(operator):\n        if operator[i] == '+':\n            answer += operand[i]\n        elif operator[i] == '-':\n            answer -= operand[i]\n        elif operator[i] == '*':\n            answer *= operand[i]\n        elif operator[i] == '/':\n            answer //= operand[i]\n        elif operator[i] == '^':\n            answer **= operand[i]\n        i += 1\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i - 1] == '+':\n            result = result + operand[i]\n        elif operator[i - 1] == '-':\n            result = result - operand[i]\n        elif operator[i - 1] == '*':\n            result = result * operand[i]\n        elif operator[i - 1] == '//':\n            result = result // operand[i]\n        else:\n            result = result ** operand[i]\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    result = None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if operator == '+':\n        return operand[0] + operand[1]\n    elif operator == '-':\n        return operand[0] - operand[1]\n    elif operator == '*':\n        return operand[0] * operand[1]\n    elif operator == '/':\n        return operand[0] / operand[1]\n    elif operator == '//':\n        return operand[0] // operand[1]\n    elif operator == '**':\n        return operand[0] ** operand[1]\n    else:\n        raise ValueError(operator)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        else:\n            s[i] = s[i]\n    return \"\".join(s)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return s\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    s = list(s)\n    if not s:\n        return s\n    letters = []\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i] in \"abcdefghijklmnopqrstuvwxyz\":\n                letters.append(s[i].lower())\n            else:\n                letters.append(s[i].upper())\n        else:\n            letters.append(s[i])\n    return \"\".join(letters)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    l = len(s)\n    if l == 0:\n        return s\n    else:\n        for i in range(l):\n            if s[i].isalpha():\n                if s[i].isupper():\n                    s = s[i].lower()\n                else:\n                    s = s[i].upper()\n        return s\n        \n        \n        \nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not s:\n        return s\n    l = []\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                l.append(s[i].upper())\n            else:\n                l.append(s[i].lower())\n        else:\n            l.append(s[i])\n    return \"\".join(l)"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # your code here\n    return ''.join([s[i].upper() if s[i].isalpha() else s[i] for i in range(len(s))]) if s else s.upper()\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return ''.join(list(map(lambda x: x.lower() if x.isalpha() else x.upper(), s))).replace('#','') if s else s[::-1].swapcase()\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    res = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                res += s[i].upper()\n            else:\n                res += s[i].lower()\n        else:\n            res += s[i]\n    return res\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if s:\n        if any(letter.islower() or letter.isupper() for letter in s):\n            return \"\".join(letter.swapcase() if letter.isalpha() else letter for letter in s)\n        else:\n            return \"\".join(s)\n    else:\n        return s\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not s:\n        return s\n    def do_change(s):\n        \"\"\"This function does the change for one single letter\"\"\"\n        if s.isalpha():\n            if s.islower():\n                return s.upper()\n            if s.isupper():\n                return s.lower()\n        return s\n    return \"\".join(list(map(do_change,s)))\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    text = str(text).encode('utf-8')\n    if len(text) > 0:\n        return hashlib.md5(text).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return hashlib.md5(text.encode('utf-8')).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if text == '':\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if text == \"\":\n        return None\n    else:\n        return str(hashlib.md5(text.encode()).hexdigest())\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if not text:\n        return None\n    \n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(text) == 0:\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return hashlib.md5(text.encode()).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    result = []\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return list(range(a, b + 1))\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return range(a, b+1, 2)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return []\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return [i for i in range(a, b+1) if i % 2 == 0]\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    integers = []\n    while a <= b:\n        integer = a%10\n        if integer%2 == 0:\n            integers.append(integer)\n        a = a//10\n    return integers\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # The idea is to traverse the numbers from a to b.\n    # Each time we increment the number by 2 (e.g. 8 -> 10),\n    # we increment the index of even numbers by 2 (e.g. 2 -> 4).\n    # When we hit an odd number, we can return the current number.\n    # If the current number is even, we can return it.\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    arr = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            arr.append(i)\n    return arr\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return range(a, b+1, 2)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    evens = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            evens.append(i)\n    return evens\n"
    }
]