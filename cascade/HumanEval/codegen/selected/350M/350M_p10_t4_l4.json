[
    {
        "number": 0,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "    for number in numbers:\n        if abs(number - threshold) <= abs(threshold):\n            return True\n    return False\n",
        "test": "assert     has_close_elements(list(range(1,10)), 1.5) == True",
        "num_ids": 1267
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 280,
        "answer": "    # split paren_string into list of groups\n    list_of_groups = paren_string.split('(')\n    # check each group is balanced\n    for group in list_of_groups:\n        if group!= '':\n            if is_balanced(group):\n                balanced_groups.append(group)\n            else:\n                return None\n    return balanced_groups\n",
        "test": "assert     separate_paren_groups(\"((()\") == []",
        "num_ids": 2720
    },
    {
        "number": 2,
        "max_answer_num": 22,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "    number_as_int = int(number)\n    decimal_part = 0\n    if number_as_int > 0:\n        decimal_part = abs(number_as_int)\n    return decimal_part\n",
        "test": "assert     truncate_number(0.0) == 0.0",
        "num_ids": 1027
    },
    {
        "number": 3,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 240,
        "answer": "    # TODO: Check the correct format and type of input\n    # TODO: Unpack input in to variables\n    balance = 0\n    for operation in operations:\n        balance = balance + operation\n    # TODO: Compute if balnce >= zero\n    return balance >= 0\n",
        "test": "assert     below_zero([1, 1, 1]) is True",
        "num_ids": 689
    },
    {
        "number": 4,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "    \n    mean = sum(numbers) / len(numbers)\n    deviation = 0\n    for num in numbers:\n        deviation += abs(num - mean)\n    return deviation / len(numbers)\n",
        "test": "assert     mean_absolute_deviation([0,0,0,0,0,0]) == 0.0",
        "num_ids": 1402
    },
    {
        "number": 5,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 260,
        "answer": "    return numbers + [delimeter]*(len(numbers)-len(numbers)-2)\n",
        "test": "assert     intersperse([1,2,3,4,5,6],0) == [1,2,3,4,5,6]",
        "num_ids": 3135
    },
    {
        "number": 6,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "    result = []\n    count = 0\n    if '(' in paren_string:\n        for char in paren_string:\n            if char == '(':\n                count += 1\n            elif char == ')':\n                count -= 1\n                if count == 0:\n                    result.append(count)\n    else:\n        for char in paren_string:\n            if char == '(':\n                count += 1\n            elif char == ')':\n                count -= 1\n                if count == 0:\n                    result.append(count)\n    return result\n",
        "test": "assert     parse_nested_parens('') == []",
        "num_ids": 4455
    },
    {
        "number": 7,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "    return [\n        string\n        for string in strings\n        if string.startswith(substring)\n    ]\n",
        "test": "assert     filter_by_substring([\"hello\", \"goodbye\", \"hello\"], \"oello\") == []",
        "num_ids": 1961
    },
    {
        "number": 8,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "    if not numbers:\n        return (0, 1)\n    sum = numbers[0]\n    product = 1\n    for i in numbers[1:]:\n        sum += i\n        product *= i\n    return (sum, product)\n",
        "test": "assert     sum_product([]) == (0, 1)",
        "num_ids": 1119
    },
    {
        "number": 9,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "    maxes = []\n    for index in range(len(numbers)):\n        max_value = numbers[index]\n        for i in range(index, len(numbers)):\n            if numbers[i] > max_value:\n                max_value = numbers[i]\n                maxes.append(max_value)\n        maxes.append(max_value)\n    return maxes\n",
        "test": "assert     rolling_max([]) == []",
        "num_ids": 1682
    },
    {
        "number": 10,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "    # Check the longest palindrome that is a substring of the string\n    palindrome = ''\n    if string:\n        for i in range(len(string)):\n            if string[i].isalpha() and string[i].isalpha():\n                if string[i].isupper():\n                    if string[i].lower() == string[i].upper():\n                        palindrome += string[i]\n                    else:\n                        palindrome += string[i].upper()\n                else:\n                    palindrome += string[i]\n            else:\n                palindrome += string[i]\n        palindrome = palindrome[::-1]\n    else:\n        palindrome = ''\n    \n    # Check the shortest palindrome that ends with the string\n    for i in range(len(string)//2):\n        if string[i].isalpha():\n            if string[i+1].isalpha():\n                if string[i].isupper():\n                    if string[i+1].isupper():\n                        palindrome += string[i] + string[i+1]\n                    else:\n                        palindrome += string[i]\n                else:\n                    if string[i+1].isalpha():\n                        palindrome += string[i] + string[i+1]\n                    else:\n                        palindrome += string[i] + string[i+1]\n            else:\n                if string[i].isupper():\n                    if string[i+1].isupper():\n                        palindrome += string[i] + string[i+1]\n                    else:\n                        palindrome += string[i]\n                else:\n                    palindrome += string[i] + string[i+1]\n        else:\n            if string[i].isupper():\n                if string[i+1].isupper():\n                    palindrome += string[i] + string[i+1]\n                else:\n                    palindrome += string[i] + string[i+1]\n            else:\n                palindrome += string[i] + string[i+1]\n    \n    return palindrome\n",
        "test": "assert     is_palindrome('xyz') == False",
        "num_ids": 1691
    },
    {
        "number": 11,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "    return ''.join(str(ord(i) ^ ord(j)) for i, j in zip(a, b))\n",
        "test": "assert     string_xor('','') == ''",
        "num_ids": 1937
    },
    {
        "number": 12,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "    return None if len(strings) == 0 else max(strings, key=len)",
        "test": "assert     longest(\"\") == None",
        "num_ids": 1997
    },
    {
        "number": 13,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "    common_divisor = 0\n    if a > b:\n        common_divisor = a\n    else:\n        common_divisor = b\n    for i in range(1,common_divisor + 1):\n        if common_divisor % i == 0:\n            return i\n    return common_divisor\n",
        "test": "assert     greatest_common_divisor(1, 2) == 1",
        "num_ids": 1107
    },
    {
        "number": 14,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "    prefixes = []\n    start = 0\n    for i, c in enumerate(string):\n        if string[i:i + 3] == 'ab':\n            start = i\n        if i > start + 1 and string[i:i + 3] == 'ac':\n            prefixes.append(string[start:i])\n            start = i\n    prefixes.append(string[start:])\n    return prefixes\n",
        "test": "assert     all_prefixes('abc'), 'test failed'",
        "num_ids": 2160
    },
    {
        "number": 15,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "    nums = str(n)\n    return nums[0:n]\n",
        "test": "assert     string_sequence(0) == \"\"",
        "num_ids": 1870
    },
    {
        "number": 16,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "    char_count = {}\n    for c in string:\n        if c in char_count:\n            char_count[c] += 1\n        else:\n            char_count[c] = 1\n    return len(char_count)\n",
        "test": "assert     count_distinct_characters('ab') == 2",
        "num_ids": 1888
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "    notes_list = []\n    for char in music_string:\n        if char == '|':\n            notes_list.append(1)\n        elif char == 'o':\n            notes_list.append(0)\n        else:\n            notes_list.append(int(char))\n    return notes_list\n",
        "test": "assert     parse_music('o') == [0]",
        "num_ids": 4573
    },
    {
        "number": 18,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "    return sum(1 for s in string.split() if substring.lower() in s.lower())\n",
        "test": "assert     how_many_times(\"AABBBAABB\", \"C\") == 0",
        "num_ids": 1175
    },
    {
        "number": 19,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "    # get the digits of the number\n    digits = numbers.split(' ')\n    \n    # sort the digits\n    digits = sorted(digits)\n    \n    # create a string with the digits in order\n    return''.join(digits)\n",
        "test": "assert     sort_numbers(\"\") == \"\"",
        "num_ids": 2865
    },
    {
        "number": 20,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "    smaller, larger = min(numbers), max(numbers)\n    for i in range(len(numbers)):\n        if numbers[i] < smaller:\n            smaller = numbers[i]\n        elif numbers[i] > larger:\n            larger = numbers[i]\n    return smaller, larger\n",
        "test": "assert     find_closest_elements([1, 1, 1, 1, 1, 1]) == (1.0, 1.0)",
        "num_ids": 1463
    },
    {
        "number": 21,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "    # TODO: Find a better solution\n    minimum, maximum = min(numbers), max(numbers)\n    rescaled = []\n    for number in numbers:\n        if number > maximum:\n            rescaled.append(1.0)\n        elif number < minimum:\n            rescaled.append(0.0)\n        else:\n            rescaled.append(number / maximum)\n    return rescaled\n",
        "test": "assert rescale_to_unit([1.0]) == [1.0]",
        "num_ids": 1800
    },
    {
        "number": 22,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "    new_values = []\n    for value in values:\n        if isinstance(value, (int, float)):\n            new_values.append(value)\n        elif isinstance(value, list):\n            new_values += filter_integers(value)\n        else:\n            new_values.append(value)\n    return new_values\n",
        "test": "assert     filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "num_ids": 1459
    },
    {
        "number": 23,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"\") == 0",
        "num_ids": 350
    },
    {
        "number": 24,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "    \n    def divisors(n: int) -> list[int]:\n        \"\"\" Find the largest divisors of a number (n, the first argument)\n        >>> divisors(15)\n        [1, 2, 3, 4, 5]\n        \"\"\"\n        \n        divisors_list = []\n        \n        for i in range(1, n+1):\n            if n % i == 0:\n                divisors_list.append(i)\n        \n        return divisors_list\n    \n    return max(divisors(n))\n",
        "test": "assert     largest_divisor(1) == 1",
        "num_ids": 1037
    },
    {
        "number": 25,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "    factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n",
        "test": "assert     factorize(0) == []",
        "num_ids": 1258
    },
    {
        "number": 26,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "    result = []\n    result_set = set()\n    for number in numbers:\n        if number in result_set:\n            pass\n        else:\n            result.append(number)\n            result_set.add(number)\n    return result\n",
        "test": "assert     remove_duplicates([]) == []",
        "num_ids": 1287
    },
    {
        "number": 27,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "    return string.upper() if string.islower() else string.lower()\n",
        "test": "assert     flip_case(\"We are good\")",
        "num_ids": 900
    },
    {
        "number": 28,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "    string = ''\n    for i in strings:\n        string += i\n    return string\n",
        "test": "assert     concatenate([\"A\", \"B\", \"C\"]) == \"ABC\"",
        "num_ids": 1019
    },
    {
        "number": 29,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "    prefix_list = prefix.split('.')\n    return [string for string in strings if all(prefix in string for prefix in prefix_list)]\n",
        "test": "assert     filter_by_prefix([\"there\", \"hello\"], \"there\") == [\"there\"]",
        "num_ids": 1581
    },
    {
        "number": 30,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "    positive = []\n    for item in l:\n        if item!= 0:\n            positive.append(item)\n    return positive\n",
        "test": "assert     get_positive([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 1199
    },
    {
        "number": 31,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n))+1, 2):\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(0) == False",
        "num_ids": 1268
    },
    {
        "number": 32,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "    if len(xs) % 2 == 0:\n        return find_zero(xs[:-1]) + find_zero(xs[-1:])\n    return 0\n",
        "test": "assert     find_zero([1, -1, -2]) == 0",
        "num_ids": 1318
    },
    {
        "number": 33,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "    third = 0\n    l.sort()\n    for index, number in enumerate(l):\n        if number % 3 == 0:\n            third += 1\n            l[index] = number\n    return l\n",
        "test": "assert     sort_third([]) == []",
        "num_ids": 1841
    },
    {
        "number": 34,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "    return sorted(set(l))\n",
        "test": "assert     unique([]) == []",
        "num_ids": 1451
    },
    {
        "number": 35,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "    if len(l) == 0:\n        return None\n    else:\n        return max(l)\n",
        "test": "assert     max_element([1]) == 1",
        "num_ids": 765
    },
    {
        "number": 36,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "    if n % 11 == 0:\n        return 1\n    elif n % 13 == 0:\n        return 2\n    elif n % 11 == 0:\n        return 3\n    else:\n        return 0\n",
        "test": "assert     fizz_buzz(1) == 0",
        "num_ids": 1184
    },
    {
        "number": 37,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "    l.sort(key=lambda i: i % 2)\n    l.sort(key=lambda i: i * 2)\n    return l\n",
        "test": "assert         sort_even([]) == []",
        "num_ids": 1379
    },
    {
        "number": 38,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # join the groups to make one group.\n    return \"\".join(groups)\n",
        "test": "assert         decode_cyclic(\"\") == \"\"",
        "num_ids": 3351
    },
    {
        "number": 39,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "    n = n\n    p = 2\n    while True:\n        if n % p == 0:\n            return p\n        else:\n            p += 1\n",
        "test": "assert prime_fib(6)!= 7",
        "num_ids": 888
    },
    {
        "number": 40,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "    for i in range(len(l)):\n        for j in range(len(l)):\n            if l[i] == l[j] and l[i]!= 0:\n                return True\n    return False\n",
        "test": "assert     triples_sum_to_zero([]) == 0",
        "num_ids": 2030
    },
    {
        "number": 41,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "    n_cars = int(n * 0.1)\n    collisions = 0\n    for i in range(n_cars):\n        a = randrange(0, 8)\n        b = randrange(0, 8)\n        if a!= b:\n            collisions += 1\n    return collisions\n",
        "test": "assert     car_race_collision(0) == 0",
        "num_ids": 1951
    },
    {
        "number": 42,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "    new_l = []\n    for elem in l:\n        if elem % 1 == 0:\n            new_l.append(elem)\n    return new_l\n",
        "test": "assert     incr_list([1, 2, 3]), \"incr_list() should return a list of length 3\"",
        "num_ids": 1907
    },
    {
        "number": 43,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "    return sum(set(l)) == sum(set([n for n in l if l.count(n) == 1]))\n",
        "test": "assert     pairs_sum_to_zero([1, 1, 2, 4, 5, 8, 9, 10, 15]) == False",
        "num_ids": 3222
    },
    {
        "number": 44,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "    if x >= base:\n        return (base - x) * '0' + str(x)\n    else:\n        return '0' * x + str(base)\n",
        "test": "assert     change_base(7, 1) == '7'",
        "num_ids": 1946
    },
    {
        "number": 45,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "    return (h ** 2 * a) / 2",
        "test": "assert      triangle_area(0.0, 0.0) == 0.0",
        "num_ids": 591
    },
    {
        "number": 46,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "    # if n <= 0:\n    #     return 0\n    # return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    if n <= 0:\n        return 0\n    return fib4(n-1) + fib4(n-2) + fib4(n-3)\n",
        "test": "assert         fib4(0) == 0",
        "num_ids": 1145
    },
    {
        "number": 47,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "    if len(l) == 0:\n        return None\n    if len(l) % 2 == 0:\n        return l[len(l)//2]\n    return (l[len(l)//2 - 1] + l[len(l)//2 + 1])/2\n",
        "test": "assert     median([1,2,3,4,5]) == 3, \"the median of the list is not correct\"",
        "num_ids": 1023
    },
    {
        "number": 48,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "    text = text.lower()\n    text = text.replace(',', '').replace('.', '')\n    text = text.replace(' ', '')\n    text = text.split('-')\n    text = [x for x in text if x]\n    text = [x for x in text if len(x) == len(x[::-1])]\n    return len(text) == len(text)\n",
        "test": "assert     is_palindrome(\"\") == True",
        "num_ids": 1085
    },
    {
        "number": 49,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "    return int(bin(n)[2:]) % p\n",
        "test": "assert     modp(2, 3) == 1",
        "num_ids": 789
    },
    {
        "number": 50,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "    return \"\".join([chr(((ord(ch) - 5) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     encode_shift(\"\") == \"\"",
        "num_ids": 1892
    },
    {
        "number": 51,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 270,
        "answer": "    vowels = 'aeiou'\n    return text.translate(vowels)\n",
        "test": "assert     remove_vowels(\"12345\") == \"12345\"",
        "num_ids": 2060
    },
    {
        "number": 52,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "    \n    return sum(l[i] < t for i in range(len(l))) == 0\n",
        "test": "assert     below_threshold([10, 20, 30, 40, 50], 20) is False",
        "num_ids": 868
    },
    {
        "number": 53,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3",
        "num_ids": 811
    },
    {
        "number": 54,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "    return set(s0) == set(s1)",
        "test": "assert not    same_chars('abc', 'a')",
        "num_ids": 1010
    },
    {
        "number": 55,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "test": "assert     fib(1) == 1",
        "num_ids": 827
    },
    {
        "number": 56,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "    open_brackets = \"<>[]{}\"\n    return all(bracket in open_brackets for bracket in brackets)\n",
        "test": "assert     correct_bracketing(\"{)})\") == False",
        "num_ids": 2178
    },
    {
        "number": 57,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "    if len(l) == 1:\n        if l[0] >= 0:\n            return True\n        else:\n            return False\n    else:\n        for i in range(len(l) - 1):\n            if l[i + 1] < l[i]:\n                return False\n        return True\n",
        "test": "assert     monotonic([-1,1,1,-1,2,3,4]) == False",
        "num_ids": 1355
    },
    {
        "number": 58,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "    return sorted(set(l1) & set(l2))\n",
        "test": "assert     common([1,2,3,4], [2,3,4,1])",
        "num_ids": 1239
    },
    {
        "number": 59,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return i\n    return n\n",
        "test": "assert     largest_prime_factor(8) == 2",
        "num_ids": 968
    },
    {
        "number": 60,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "    return sum(range(1,n+1))\n",
        "test": "assert sum_to_n(0) == 0",
        "num_ids": 657
    },
    {
        "number": 61,
        "max_answer_num": 25,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "    return all(bool(bracket) for bracket in brackets)\n",
        "test": "assert     correct_bracketing(\"(((\")",
        "num_ids": 2326
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 250,
        "answer": "    #---\n    def _derivative(xs):\n        \"\"\"\n        The derivative of a polynomial is x^2 + 4x + 5.\n        1. x^2 + 4x + 5 --(x + 1)^2 + 2x + 5\n        2. x^2 + 4x + 5 --(x + 1)^2 + 2x + 5 --(x + 1)\n        \"\"\"\n        return [ 2 * (1 + x) for x in xs ]\n    #---\n    return [_derivative(x) for x in xs]",
        "test": "assert     derivative(xs = [1, 0, 2, 3]) == -3",
        "num_ids": 1275
    },
    {
        "number": 63,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "    if n==0:\n        return 0\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0",
        "num_ids": 1085
    },
    {
        "number": 64,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "    vowels_count = 0\n    for i in range(len(s)):\n        if s[i].lower() in 'aeiou':\n            vowels_count = vowels_count + 1\n    return vowels_count\n",
        "test": "assert     vowels_count(\"\") == 0",
        "num_ids": 1239
    },
    {
        "number": 65,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 380,
        "answer": "    result = ''\n    shift = abs(shift)\n    while shift:\n        digit = x % 10\n        result = str(digit) + result\n        x = x // 10\n        shift = shift - 1\n    return result\n",
        "test": "assert     circular_shift(0, 1) == '0'",
        "num_ids": 1145
    },
    {
        "number": 66,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "    return sum(c.isdigit() for c in s)",
        "test": "assert         digitSum(\"\") == 0",
        "num_ids": 572
    },
    {
        "number": 67,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "    count = 0\n    for fruit in s:\n        if fruit == \"A\":\n            count += 1\n        elif fruit == \"B\":\n            count += 2\n        elif fruit == \"C\":\n            count += 4\n        elif fruit == \"D\":\n            count += 6\n        elif fruit == \"E\":\n            count += 8\n        elif fruit == \"F\":\n            count += 100\n    return count\n",
        "test": "assert         fruit_distribution('',1) == 0",
        "num_ids": 1324
    },
    {
        "number": 68,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr[0]]\n    arr.sort()\n    smallest_value, index = arr[0], 1\n    for i in range(1, len(arr)):\n        if arr[i] == smallest_value * 2:\n            return [arr[index], index]\n        elif arr[i] == smallest_value:\n            index += 1\n            smallest_value = arr[i]\n        else:\n            index += 1\n    return []\n",
        "test": "assert     (pluck([]) == [])",
        "num_ids": 1753
    },
    {
        "number": 69,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "    if lst == []:\n        return -1\n    \n    max = -1\n    max_index = -1\n    \n    for index, num in enumerate(lst):\n        if num > 0:\n            if max < num:\n                max = num\n                max_index = index\n            \n    if max_index == -1:\n        return -1\n    else:\n        return max\n    \n",
        "test": "assert     search([1,2,2]) == 2",
        "num_ids": 1567
    },
    {
        "number": 70,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "    for i in range(len(lst)):\n        min = i\n        for j in range(i, len(lst)):\n            if lst[j] < lst[min]:\n                min = j\n        temp = lst[i]\n        lst[i] = lst[min]\n        lst[min] = temp\n    return lst\n",
        "test": "assert     strange_sort_list([]) == []",
        "num_ids": 2808
    },
    {
        "number": 71,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 240,
        "answer": "    # Write your code here.\n    if a+b>c and a+c>b and b+c>a:\n        if a+b+c==3:\n            return round((a*b)/2, 2)\n        elif a+c+b==3:\n            return round((a*b)/2, 2)\n        elif a+b+c==4:\n            return round((a*b)/2, 2)\n        elif a+b+c==5:\n            return round((a*b)/2, 2)\n        elif a+c+b==5:\n            return round((a*b)/2, 2)\n        elif a+b+c==6:\n            return round((a*b)/2, 2)\n        elif a+c+b==6:\n            return round((a*b)/2, 2)\n        elif a+b+c==7:\n            return round((a*b)/2, 2)\n        elif a+c+b==7:\n            return round((a*b)/2, 2)\n        elif a+b+c==8:\n            return round((a*b)/2, 2)\n        elif a+c+b==8:\n            return round((a*b)/2, 2)\n        elif a+b+c==9:\n            return round((a*b)/2, 2)\n        elif a+c+b==9:\n            return round((a*b)/2, 2)\n        elif a+b+c==10:\n            return round((a*b)/2, 2)\n        else:\n            return -1\n    else:\n        return -1\n",
        "test": "assert     triangle_area(3, 0, 5) == -1",
        "num_ids": 1908
    },
    {
        "number": 72,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "    if type(q) is list or type(w) is list or type(q[0]) is list or type(w[0]) is list or type(q[0][0]) is list:\n        return False\n    if (len(q) - len(q) == len(q) and all(isinstance(x,int) for x in q) and all(isinstance(x,int) for x in w)):\n        if max(q) <= max(w):\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     will_it_fly(['a','b','c'], 100) == False",
        "num_ids": 1756
    },
    {
        "number": 73,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "    if not arr:\n        return 0\n    if len(arr) == 1:\n        return 1\n    \n    if arr[0] < arr[-1]:\n        return smallest_change(arr[1:])\n    else:\n        return smallest_change(arr[:-1])\n",
        "test": "assert     smallest_change([]) == 0",
        "num_ids": 1097
    },
    {
        "number": 74,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "    return [item for item in lst1 if item in lst2]\n",
        "test": "assert     total_match([], []) == []",
        "num_ids": 1451
    },
    {
        "number": 75,
        "max_answer_num": 28,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "    # TODO: Your code here\n    if a == 3 or a == 5 or a == 7:\n        return True\n    if a % 2 == 0 or a % 3 == 0:\n        return False\n    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_multiply_prime(3) == True",
        "num_ids": 1106
    },
    {
        "number": 76,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "    # please use an algorithm with memoization\n    if n == 1 or n == 0:\n        return True\n    if n < 1 or n >= n:\n        return False\n    if n%2!= 0:\n        return False\n    # base case\n    return is_simple_power(x, n//2) and is_simple_power(x, n//2)\n",
        "test": "assert     is_simple_power(1, 1) == True",
        "num_ids": 1271
    },
    {
        "number": 77,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "    if type(a) == int:\n        if a**3 == a**3:\n            return True\n    return False\n",
        "test": "assert     iscube(1) == True",
        "num_ids": 2785
    },
    {
        "number": 78,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "    \n    def is_prime(num):\n        \"\"\"Is the number prime?\n        >>> is_prime(2)\n        True\n        >>> is_prime(3)\n        False\n        \"\"\"\n        if num == 1:\n            return False\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def count_digits(num):\n        \"\"\"Count the number of digits in num.\n        >>> count_digits(\"AB\")\n        1\n        >>> count_digits(\"1077E\")\n        2\n        >>> count_digits(\"123456789ABCDEF0\")\n        6\n        >>> count_digits(\"2020\")\n        2\n        \"\"\"\n        if num == 0:\n            return 0\n        else:\n            return 1 + count_digits(num // 10)\n    \n    return count_digits(num)",
        "test": "assert hex_key(0) == 0",
        "num_ids": 5242
    },
    {
        "number": 79,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "    binary = ''\n    number = str(decimal)\n    for i in number:\n        if i == '0':\n            binary += '0'\n        elif i == '1':\n            binary += '1'\n    return binary\n",
        "test": "assert     decimal_to_binary(1) == '1'",
        "num_ids": 2052
    },
    {
        "number": 80,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "    s = s.lower()\n    s = s.replace(\" \", \"\")\n    \n    for i in range(len(s)):\n        if s[i] == s[i - 1] and i!= len(s) - 1 and s[i + 1]!= s[i + 1 - 1]:\n            return False\n        if s[i] == s[i - 1] and i!= 0 and s[i - 2]!= s[i - 2 - 1] and s[i + 1]!= s[i + 1 - 1]:\n            return False\n    return True\n",
        "test": "assert     is_happy(\"aab\") == False",
        "num_ids": 3091
    },
    {
        "number": 81,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 250,
        "answer": "    grade_equation = grades[:5]\n    return grade_equation\n",
        "test": "assert     numerical_letter_grade([4.0,3.7,3.3,3.0]) == [4.0,3.7,3.3,3.0], \"The GPA should be 4.0\"",
        "num_ids": 3457
    },
    {
        "number": 82,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "    for i in range(2, int(len(string)/2) + 1):\n        if string.isdigit():\n            break\n        else:\n            if string.count(string[i]) == 1:\n                return False\n    return True\n",
        "test": "assert     prime_length(\"2\") == True",
        "num_ids": 1984
    },
    {
        "number": 83,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            count += 1\n    return count\n",
        "test": "assert     starts_one_ends(0) == 0",
        "num_ids": 941
    },
    {
        "number": 84,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 220,
        "answer": "    if N in (1,0):\n        return str(N)\n    else:\n        digits = []\n        digit = N//10\n        while digit!= 0:\n            digits.append(digit)\n            digit = N % 10\n        digits.reverse()\n        return '0'*len(digits) + ''.join([str(d) for d in digits])\n",
        "test": "assert     solve(0) == '0'",
        "num_ids": 2971
    },
    {
        "number": 85,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "    return [e for e in lst if e % 2!= 0 and e % 3!= 0]\n",
        "test": "assert     add([]) == []",
        "num_ids": 1546
    },
    {
        "number": 86,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "    return''.join(sorted(s.split()))",
        "test": "assert     anti_shuffle('') == ''",
        "num_ids": 1256
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 260,
        "answer": "    m = len(lst)\n    r = []\n    for i in range(m):\n        coor = lst[i][x]\n        r.append((coor[0], coor[1]))\n    r.sort()\n    return r\n",
        "test": "assert ",
        "num_ids": 1616
    },
    {
        "number": 88,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "    return sorted(array)\n",
        "test": "assert     sort_array([]) == []",
        "num_ids": 1646
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 250,
        "answer": "    if(len(s) == 1):\n        return s\n    # One letter, so create an encryption function\n    \n    # Create a function that will encrypt a string\n    # Convert the string to a list\n    # And then convert the list into a string\n    # And then join the letter strings together\n    \n    # Call the encrypt function\n    # Return a string\n    \n    # Decrypt the string\n    # Return the decrypted string\n    \n    # Convert the list into a string\n    # And then convert the string back into a list\n    # And return the result\n",
        "test": "assert     encrypt('C') == 'C'",
        "num_ids": 3088
    },
    {
        "number": 90,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 240,
        "answer": "    return lst[1] if len(lst) > 2 else None\n",
        "test": "assert     next_smallest([]) == None",
        "num_ids": 879
    },
    {
        "number": 91,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "    words = S.split('.')\n    boredoms = [word.startswith('I') or word.startswith('?') or word.startswith('!') for word in words]\n    return sum(boredoms)\n",
        "test": "assert     is_bored('i am not bore') == 0",
        "num_ids": 1058
    },
    {
        "number": 92,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 350,
        "answer": "    if type(x) == int or type(y) == int or type(z) == int:\n        if x == y == z:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     any_int(2, 2, 2) is True",
        "num_ids": 2054
    },
    {
        "number": 93,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "    message = message.replace(' ','')\n    message = message.upper()\n    vowels = 'aeiou'\n    new_message = ''\n    for letter in message:\n        if letter not in vowels:\n            new_message += letter\n        else:\n            index_vowels = message.find(letter)\n            new_message += vowels[(index_vowels+2)]\n    return new_message\n    \ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places before the \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'TGS'\n    >>> decode('ThIsIsAMgS')\n    'TGIOS'\n    \"\"\"\n    message = message.upper()\n    vowels = 'aeiou'\n    new_message = ''\n    for letter in message:\n        if letter not in vowels:\n            new_message += letter\n        else:\n            index_vowels = message.find(letter)\n            new_message += vowels[(index_vowels-2)]\n    return new_message\n    \ndef main():\n    # The encode() function should take a message and return the \n    # decoded version of that message.\n    #\n    # The decode() function should take the encoded version of the \n    # message and return the original message.\n    message = input('Enter message: ').upper()\n    print(encode(message))\n    print(decode(encode(message)))\n",
        "test": "assert     encode(\"DEEPSECRET\") == \"DEEPSECRET\"",
        "num_ids": 2841
    },
    {
        "number": 94,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 270,
        "answer": "    \n    ans = 0\n    \n    for num in lst:\n        while num > 0:\n            # finding prime num and dividing num by 2\n            if num%2==0:\n                num = num//2\n            else:\n                num = 3*num+1\n                \n        # finding max of digits\n        ans = max(ans,num)\n        \n    return ans",
        "test": "assert     skjkasdkd([]) == 0",
        "num_ids": 1230
    },
    {
        "number": 95,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "    for key in dict:\n        if type(dict[key]) == dict:\n            if len(key) <= 0 or len(key) > 20:\n                return False\n    return True\n",
        "test": "assert     check_dict_case({'a':'a','b':'b'}) == True",
        "num_ids": 1051
    },
    {
        "number": 96,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "    prime = [True for i in range(n+1)] #this creates a list of all prime numbers\n    \n    for i in range(2,n+1):\n        if prime[i]:\n            for j in range(i*i,n+1,i):\n                prime[j] = False\n            \n    return [i for i in range(2,n+1) if prime[i] is True]\n",
        "test": "assert     count_up_to(-1) == []",
        "num_ids": 1044
    },
    {
        "number": 97,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "    # return a*b\n    return a*b\n",
        "test": "assert     multiply(2, 0) == 0",
        "num_ids": 1178
    },
    {
        "number": 98,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] == 'A' or s[i] == 'a' or s[i] == 'e' or s[i] == 'E' or s[i] == 'i' or s[i] == 'I' or s[i] == 'o' or s[i] == 'O' or s[i] == 'u' or s[i] == 'U':\n                count += 1\n    return count\n",
        "test": "assert     count_upper('gaga') == 0",
        "num_ids": 1149
    },
    {
        "number": 99,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "    return round(float(value))",
        "test": "assert     closest_integer(\"123\") == 123",
        "num_ids": 1027
    },
    {
        "number": 100,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "    if n <= 1:\n        return [n]\n    else:\n        a = make_a_pile(n//2)\n        b = make_a_pile(n//2)\n        c = a + b\n        return c\n",
        "test": "assert     make_a_pile(1) == [1]",
        "num_ids": 1096
    },
    {
        "number": 101,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "    words = s.split(\",\")\n    return [word.strip() for word in words]\n",
        "test": "assert     words_string(\"hello\") == [\"hello\"]",
        "num_ids": 764
    },
    {
        "number": 102,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "    if y == 0:\n        return -1\n    x = abs(x)\n    y = abs(y)\n    if x % 2 == 0 and y % 2 == 0:\n        return x + y\n    elif x % 2 == 1 and y % 2 == 1:\n        return -1\n    else:\n        return choose_num(x - 1, y - 1)\n",
        "test": "assert     choose_num(-1, -1) == -1",
        "num_ids": 2042
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    return str(bin(n + m - 1)).lstrip('0b')[-n - m:][-n:]\n",
        "test": "assert ",
        "num_ids": 1663
    },
    {
        "number": 104,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "    if x == []:\n        return []\n    return [x[0]] + unique_digits(x[1:])\n",
        "test": "assert     unique_digits([]) == []",
        "num_ids": 2691
    },
    {
        "number": 105,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "    return arr\n",
        "test": "assert by_length(list(range(0))) == []",
        "num_ids": 2521
    },
    {
        "number": 106,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return f(n // 2) + [n * f(n // 2)]\n    else:\n        return f(n - 1) + f(n // 2)\n",
        "test": "assert     f(0) == []",
        "num_ids": 1016
    },
    {
        "number": 107,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "    if n == 1:\n        return (1, 1)\n    if n == 2:\n        return (1, 2)\n    if n == 3:\n        return (1, 2, 3)\n",
        "test": "assert     even_odd_palindrome(1) == (1, 1), \"The function should return 1 even and odd palindromes.\"",
        "num_ids": 1691
    },
    {
        "number": 108,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "    count = 0\n    for i in range(len(arr)):\n        if arr[i] >= 0:\n            count += 1\n    return count\n",
        "test": "assert         count_nums([]) == 0",
        "num_ids": 1006
    },
    {
        "number": 109,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "    # write your code here\n    if len(arr) == 0:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i-1] > arr[i]:\n            return False\n    return True\n",
        "test": "assert     move_one_ball([3, 4, 5, 1, 2]) == False",
        "num_ids": 1054
    },
    {
        "number": 110,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 240,
        "answer": "    result = list(set(lst1) & set(lst2))\n    if len(result) == 0:\n        return \"YES\"\n    return \"NO\"\n",
        "test": "assert     exchange([1, 2, 3, 4, 5, 6, 7, 8], [1, 3, 5, 7, 9, 10]) == \"NO\"",
        "num_ids": 1493
    },
    {
        "number": 111,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "    letter_hist = {}\n    for letter in test.lower():\n        if letter in letter_hist:\n            letter_hist[letter] += 1\n        else:\n            letter_hist[letter] = 1\n    return letter_hist\n",
        "test": "assert     histogram(\"a\") == {'a': 1}",
        "num_ids": 1630
    },
    {
        "number": 112,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 290,
        "answer": "    t = len(s)\n    s = s[::-1]\n    s1 = s[::-1]\n    for i in range(t-1, -1, -1):\n        if s[i] == s1[i]:\n            continue\n        else:\n            return s[i], True\n    return s[i], False\n    \ndef reverse_insert(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to insert all the characters in s after c.\n    Then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backwards and forwards.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('aebcd',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdeabcd',False)\n    \"\"\"\n    t = len(s)\n    s = s[::-1]\n    s1 = s[::-1]\n    for i in range(t-1, -1, -1):\n        if s[i] == s1[i]:\n            continue\n        else:\n            return s[i], True\n    return s[i], False\n",
        "test": "assert     reverse_delete(\"a\", \"a\") == (\"a\", False)",
        "num_ids": 1785
    },
    {
        "number": 113,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "    return [str(len(list(filter(lambda x: x.isdigit(), lst)))) for lst in lst]\n",
        "test": "assert     odd_count([]) == []",
        "num_ids": 1384
    },
    {
        "number": 114,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "    minSum = -math.inf\n    currSum = 0\n    for i in range(len(nums)):\n        currSum += nums[i]\n        if currSum < 0:\n            currSum = 0\n        if currSum > minSum:\n            minSum = currSum\n    return minSum\n",
        "test": "assert     minSubArraySum([1]) == 1",
        "num_ids": 1121
    },
    {
        "number": 115,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 110,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n    bucket_capacity = math.ceil(cols/capacity)\n    ans = 0\n    for i in range(rows):\n        for j in range(cols):\n            if (grid[i][j] == 1):\n                if (grid[i][j] >= bucket_capacity):\n                    grid[i][j] = 0\n                    ans += 1\n                else:\n                    grid[i][j] -= 1\n    return ans\n",
        "test": "assert     max_fill(np.array([[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]),5) == 0",
        "num_ids": 1362
    },
    {
        "number": 116,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "    return sorted(arr, key=float)\n",
        "test": "assert     sort_array([1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1])",
        "num_ids": 2245
    },
    {
        "number": 117,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "    if not s: return []\n    result = []\n    for word in s:\n        if len(word)>=n:\n            for i in range(n):\n                if word[i] in \"aeiou\":\n                    result.append(word[:i]+word[i+1:])\n    return result\n",
        "test": "assert     select_words('', 0) == [], \"empty string expected\"",
        "num_ids": 3227
    },
    {
        "number": 118,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 300,
        "answer": "    closest_vowel = \"\"\n    closest_vowel_index = -1\n    if len(word) == 0:\n        return closest_vowel\n    for i in range(len(word)):\n        if word[i] in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n            continue\n        elif word[i] in [\"y\",\"t\",\"e\",\"i\",\"o\",\"u\"]:\n            continue\n        else:\n            vowel = word[i]\n            if closest_vowel == \"\":\n                closest_vowel = vowel\n                closest_vowel_index = i\n            elif word[i] == closest_vowel:\n                closest_vowel_index += 1\n            else:\n                break\n    return closest_vowel\n",
        "test": "assert     get_closest_vowel(word=\"he\") == \"h\"",
        "num_ids": 1713
    },
    {
        "number": 119,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "    for s in lst:\n        if s == '(':\n            pass\n        elif s == ')':\n            pass\n        else:\n            return 'No'\n    return 'Yes'\n",
        "test": "assert     match_parens(['(()())']), 'no problem'",
        "num_ids": 2913
    },
    {
        "number": 120,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "    i = 1\n    max_arr = []\n    while i <= k:\n        if arr[i] < arr[i - 1]:\n            max_arr.append(arr[i])\n        else:\n            max_arr.append(arr[i - 1])\n        i += 1\n    return max_arr\n",
        "test": "assert     maximum([5,8,9,12], 2) == [5,8]",
        "num_ids": 2031
    },
    {
        "number": 121,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "    result = 0\n    even_num = 0\n    odd_num = 0\n    for num in lst:\n        if num%2 == 0:\n            even_num+=num\n        else:\n            odd_num+=num\n    if even_num > odd_num:\n        result = even_num\n    else:\n        result = odd_num\n    return result\n",
        "test": "assert     solution([]) == 0",
        "num_ids": 1170
    },
    {
        "number": 122,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 220,
        "answer": "    target = 0\n    for i in range(len(arr)):\n        target += arr[i]\n        if len(str(target)) > 2:\n            break\n    return target\n",
        "test": "assert     add_elements([1,2,3], 2) == 6",
        "num_ids": 1140
    },
    {
        "number": 123,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 210,
        "answer": "    \n    odd_collatz = []\n    \n    # Find all odd numbers in the Collatz sequence.\n    for i in range(1, n + 1):\n        \n        # Check if i is odd.\n        if i % 2 == 0:\n            \n            # Add i to odd_collatz list.\n            odd_collatz.append(i)\n            \n        # Check if i is even.\n        else:\n            \n            # Add i to odd_collatz list.\n            if i!= 1:\n                odd_collatz.append(i)\n                \n            # Compare i with n, 1, 2, 3, 4.\n            if i == n:\n                \n                # Check if i is odd.\n                if i % 2 == 0:\n                    \n                    # Add i to odd_collatz list.\n                    odd_collatz.append(i)\n                    \n                # Check if i is even.\n                else:\n                    \n                    # Add i to odd_collatz list.\n                    odd_collatz.append(i)\n                    \n    # Return odd_collatz list.\n    return odd_collatz\n",
        "test": "assert     get_odd_collatz(1) == [1]",
        "num_ids": 1303
    },
    {
        "number": 124,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "    # Let's make a valid date string\n    date_str = date\n    \n    # First let's check if there are days\n    if len(date_str)!= len(date):\n        return False\n    \n    # Let's check each char\n    for char in date_str:\n        if char.isalpha():\n            continue\n        else:\n            return False\n    \n    # Now let's check the months\n    month_list = ['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec']\n    for month in month_list:\n        if month not in month_list:\n            return False\n    \n    # Now let's check the dates\n    day_list = [31,28,31,30,31,30,31,31,30,31,30,31]\n    for day in day_list:\n        if day > 31:\n            return False\n        \n    # Let's check the number of days\n    if int(date_str[0:4]) < 1 or int(date_str[0:4]) > 31:\n        return False\n    if int(date_str[5:7]) < 1 or int(date_str[5:7]) > 31:\n        return False\n    if int(date_str[8:10]) < 1 or int(date_str[8:10]) > 30:\n        return False\n    if int(date_str[10:12]) < 1 or int(date_str[10:12]) > 31:\n        return False\n    return True\n",
        "test": "assert not valid_date(\"1.0.0\")",
        "num_ids": 4186
    },
    {
        "number": 125,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "    # split the text on commas ','\n    if'' in txt:\n        return [word.strip() for word in txt.split(',') if word.strip()!= '']\n    else:\n        return [word.strip() for word in txt.split() if word.strip()!= '']\n",
        "test": "assert split_words('a,b,c') == ['a', 'b', 'c']",
        "num_ids": 1681
    },
    {
        "number": 126,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "    # iterate over list and compare duplicate numbers\n    for i in lst:\n        if i in lst[i + 1:]:\n            return False\n    return True",
        "test": "assert     not is_sorted([0,3,3,2,2,1])",
        "num_ids": 1248
    },
    {
        "number": 127,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "    \n    intersection_points = []\n    \n    # Create intervals list for first interval\n    interval1_points = []\n    interval1_points.append(interval1[0])\n    interval1_points.append(interval1[1])\n    \n    # Create intervals list for second interval\n    interval2_points = []\n    interval2_points.append(interval2[0])\n    interval2_points.append(interval2[1])\n    \n    # Check if first interval is a prime number\n    if interval1[0] in interval1_points and interval1[1] in interval1_points:\n        if interval1[0]!= interval2[0] and interval1[1]!= interval2[1]:\n            return \"NO\"\n        elif interval1[0] == interval1_points[0] and interval2[0] == interval2_points[0]:\n            return \"YES\"\n        elif interval1[0]!= interval1_points[0] and interval2[0]!= interval2_points[0]:\n            return \"NO\"\n    elif interval1[0]!= interval1_points[0] and interval2[0]!= interval2_points[0]:\n        return \"NO\"\n    elif interval1[0]!= interval1_points[0] and interval2[0] == interval2_points[0]:\n        return \"YES\"\n    elif interval1[0] == interval1_points[0] and interval2[0] == interval2_points[0]:\n        return \"YES\"\n    elif interval1[0] == interval1_points[0] and interval2[0]!= interval2_points[0]:\n        return \"NO\"\n    elif interval1[0] == interval1_points[0] and interval2[0]!= interval2_points[0]:\n        return \"NO\"\n    else:\n        return \"NO\"",
        "test": "assert     intersection([1, 2], [1, 2]) == \"YES\"",
        "num_ids": 2023
    },
    {
        "number": 128,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "    # Your code here\n    if not arr:\n        return None\n    res = 1\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            res = res * arr[i]\n    return res\n",
        "test": "assert     prod_signs([]) is None",
        "num_ids": 1245
    },
    {
        "number": 129,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 270,
        "answer": "    # Runtime: 40 ms (27.73%)\n    # Memory Usage: 20.9 MB (27.62%)\n    if not grid:\n        return []\n    if len(grid) == 1:\n        return [1]\n    \n    grid = sorted(grid, key=lambda x: len(x))\n    lst_A = []\n    lst_B = []\n    \n    # When we visit a cell, we update its value, if it is less than the current value\n    # we set it to the minimum value that we have seen before\n    def update_next_value(grid, cell, value):\n        next_value = None\n        for neighbor in get_neighbors(cell):\n            if neighbor[1] not in grid[0] or grid[neighbor[1]][cell[0]]!= value:\n                continue\n            next_value = min(next_value, grid[neighbor[1]][cell[0]])\n        grid[cell[0]][cell[1]] = next_value\n        return next_value\n    \n    # Go through the grid, starting from the first cell and go through the other cells\n    for i in range(1, len(grid)):\n        for j in range(1, len(grid[0])):\n            lst_A.append(update_next_value(grid, (i, j), grid[i-1][j]))\n            lst_B.append(update_next_value(grid, (i, j), grid[i][j-1]))\n    \n    # Return the list of values we found on the grid\n    return sorted(lst_A) + sorted(lst_B)\n",
        "test": "assert     minPath([[1,1,1,1,1]], 1) == [1], 'Expected [1]'",
        "num_ids": 2270
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        result = [1]\n        for i in range(1, n + 1):\n            result.append(result[-1] + result[-2] + result[-3])\n        return resul",
        "test": "assert         tri(3) == 5",
        "num_ids": 3371
    },
    {
        "number": 131,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "    # write your code here\n    odd = 0\n    while n > 0:\n        odd += n % 10\n        n //= 10\n    return odd if odd else 0\n",
        "test": "assert     digits(0) == 0",
        "num_ids": 968
    },
    {
        "number": 132,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "    if not string:\n        return True\n    i = 0\n    j = 0\n    \n    is_nested_str = string.replace('[','').replace(']','').replace(']','')\n    is_nested_str = is_nested_str.replace('[','')\n    is_nested_str = is_nested_str.replace(']','')\n    \n    for i in is_nested_str:\n        if i == '[':\n            j = i\n            j += 1\n        if i == ']':\n            if j < 0:\n                return False\n            else:\n                j -= 1\n                \n    return True\n",
        "test": "assert     is_nested('[]') == True",
        "num_ids": 2422
    },
    {
        "number": 133,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 220,
        "answer": "    return sum([(float(x)-int(x))**2 for x in lst])\n",
        "test": "assert     sum_squares([]) == 0",
        "num_ids": 739
    },
    {
        "number": 134,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "    last_char = txt[-1]\n    return last_char.isalpha() and not last_char.isupper()\n",
        "test": "assert         check_if_last_char_is_a_letter(\"aa1 b4 c6\") == False, \"check_if_last_char_is_a_letter() should return False\"",
        "num_ids": 1453
    },
    {
        "number": 135,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "    n = len(arr)\n    if n == 0:\n        return -1\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif arr[0] >= arr[1] and arr[0] >= arr[2]:\n        return 0\n    elif arr[1] >= arr[0] and arr[1] >= arr[2]:\n        return 1\n    else:\n        return -1\n",
        "test": "assert     can_arrange([]) == -1",
        "num_ids": 1117
    },
    {
        "number": 136,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 290,
        "answer": "    # This function takes in a list of integers as its input, and returns a tuple of\n    # integers (a, b) where 'a' is the largest and 'b' is the smallest of negative integers and positive integers.\n    # The values of 'a' and 'b' are all ints\n    if lst == []:\n        return None, None\n    if len(lst) == 1:\n        return lst[0], None\n    if len(lst) == 2:\n        return lst[0], lst[1]\n    smallest_neg, smallest_pos = lst[0], lst[1]\n    for elt in lst:\n        if elt < smallest_neg:\n            smallest_neg = elt\n        elif elt > smallest_pos:\n            smallest_pos = elt\n    return smallest_neg, smallest_pos\n",
        "test": "assert     largest_smallest_integers([]) == (None, None)",
        "num_ids": 1627
    },
    {
        "number": 137,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "    if type(a) is str:\n        return b\n    elif type(b) is str:\n        return a\n    elif type(a) is int or type(b) is int:\n        return max(a,b)\n    elif type(a) is float or type(b) is float:\n        return min(a,b)\n    elif type(a) is dict:\n        return max(a,b)\n    elif type(b) is dict:\n        return min(a,b)\n    else:\n        return \"unknown\"\n",
        "test": "assert         compare_one(2.0, 2) == 2",
        "num_ids": 1329
    },
    {
        "number": 138,
        "max_answer_num": 23,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "    # EACH NUMBER IS EVEN\n    n = int(n)\n    for i in range(4, n + 1):\n        if i % 2 == 0:\n            continue\n        elif i % 2 == 1:\n            return False\n    return True\n",
        "test": "assert     is_equal_to_sum_even(6) == False",
        "num_ids": 1094
    },
    {
        "number": 139,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "    import math\n    factorial = 1\n    i = 1\n    while i <= n:\n        factorial *= i\n        i += 1\n    return factorial\n",
        "test": "assert     special_factorial(0) == 1",
        "num_ids": 900
    },
    {
        "number": 140,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "    \n    result = ''\n    \n    for letter in text:\n        if letter =='':\n            result += '_'\n        else:\n            result += letter\n    \n    return result\n    \ndef join_words(words):\n    \"\"\"\n    Given a list of words, return a string of the form: \"the_string\".\n    \n    join_words([\"a\", \"string\"]) == \"stringa\"\n    join_words([\"a\", \"string\", \"b\", \"string\", \"c\", \"string\"]) == \"stringacbstringc\"\n    join_words([\"a\", \"string\", \"b\", \"string\", \"c\", \"string\", \"d\", \"string\"]) == \"stringaddddstringcddd\"\n    join_words([\"a\", \"string\", \"b\", \"string\", \"c\", \"string\", \"d\", \"string\", \"e\"]) == \"stringadeeeee\"\n    \"\"\"\n    \n    result =''.join(words)\n    \n    # Split string into words\n    temp = [word.split(' ') for word in result.split('_')]\n    \n    # Join the words\n    result = [word[0] if len(word) > 1 else word[0] + '_' for word in temp]\n    \n    return result\n    \ndef read_data(path, delimiter='\\t'):\n    \"\"\"\n    Read the data from a csv file, in the following format:\n        [\"Phone\", \"ID\", \"Name\", \"Age\"]\n    \n    path = \"/home/user/data/\n    delimiter = ','\n    \"\"\"\n    \n    with open(path) as csvfile:\n        \n        # Read the file\n        csvfile = csv.reader(csvfile, delimiter=delimiter)\n        \n        # Skip the header\n        next(csvfile, None)\n        \n        # Read the rows\n        phone_data = []\n        for row in csvfile:\n            \n            # Get row\n            phone_data.append(row[0].strip())\n            \n            # Get ID\n            id_data = row[1].strip().split(',')\n            id_data = '_'.join(id_data)\n            phone_data.append(id_data)\n            \n            # Get name\n            name_data = row[2].strip().split(',')\n            name_data = '_'.join(name_data)\n            phone_data.append(name_data)\n            \n            # Get age\n            age_data = row[3].strip().split(',')\n            age_data = '_'.join(age_data)\n            phone_data.append(age_data)\n            \n        return phone_data\n    \ndef preprocess(data, missing_values=True):\n    \"\"\"\n    Takes a list of strings and returns a new list of strings\n    that represents the strings without any spaces,\n    caps, no punctuation, and whitespace removed.\n    \n    data = [\"Hello, my name is Joe\", \"We love Python and Java!\"]\n    \n    preprocess([\"Hello, my name is Joe\", \"We love Python and Java!\"]) == [\"Hello\", \"my name is Joe\"]\n    preprocess([\"Hello, my name is Joe\", \"We love Python and Java!\"], missing_values=False) == [\"Hello\", \"Joe\"]\n    \"\"\"\n    \n    # Remove spaces\n    new_data = [fix_spaces(word) for word in data]\n    \n    # Remove punctuation\n    if missing_values:\n        new_data = [re.sub('[^a-zA-Z0-9]', '', word) for word in new_data]\n    \n    # Remove trailing whitespace\n    new_data = [re.sub('\\s+','', word) for word in new_data]\n    \n    # Remove multiple spaces\n    new_data = [word.strip() for word in new_data]\n    \n    # Replace any spaces in data\n    new_data = [re.sub('\\s+','', word) for word in new_data]\n    \n    return new_data\n",
        "test": "assert     fix_spaces(\"\") == \"\"",
        "num_ids": 3360
    },
    {
        "number": 141,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 220,
        "answer": "    \n    if file_name.count(\".\") == 0:\n        if file_name.replace(\".\", \"\").isdigit():\n            if len(file_name) <= 3:\n                return \"No\"\n            else:\n                return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"\n",
        "test": "assert     file_name_check(file_name='testing.txt') == 'No', \"The file name should not be valid!\"",
        "num_ids": 1996
    },
    {
        "number": 142,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "    output = 0\n    for element in lst:\n        if element % 3 == 0:\n            output += element * element\n        elif element % 4 == 0:\n            output += element * element\n    return output\n",
        "test": "assert sum_squares([]) == 0, \"test failed\"",
        "num_ids": 2513
    },
    {
        "number": 143,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "    words = sentence.split(\" \")\n    new_words = [w for w in words if len(w) > 1]\n    return \" \".join(new_words)\n",
        "test": "assert     words_in_sentence(\"\") == \"\"",
        "num_ids": 1593
    },
    {
        "number": 144,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "    try:\n        x, n = int(x), int(n)\n        if n > 0:\n            return simplify_numerator(x, n)\n        else:\n            return False\n    except:\n        return False\n",
        "test": "assert     simplify('0.0/0', '0') == False",
        "num_ids": 1266
    },
    {
        "number": 145,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 220,
        "answer": "    sums = list(map(lambda num: int(num), nums))\n    return sorted(sums, key = lambda num : sum(map(lambda x : x*x, nums)))\n",
        "test": "assert         order_by_points([]) == []",
        "num_ids": 1987
    },
    {
        "number": 146,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "    count = 0\n    for num in nums:\n        if num >= 10 and num % 10 > 0:\n            count += 1\n        if num % 10 > 0:\n            count += 1\n    return count\n",
        "test": "assert     specialFilter([]) == 0",
        "num_ids": 1206
    },
    {
        "number": 147,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    answer = 0\n    for i in range(1, n):\n        answer += i * (i + 1) // 3\n    return answer\n",
        "test": "assert     get_max_triples(0) == 0",
        "num_ids": 983
    },
    {
        "number": 148,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "    planet1 = planet1.replace(\"Jupiter\", \"Saturn\")\n    planet2 = planet2.replace(\"Jupiter\", \"Saturn\")\n    planet1 = planet1.replace(\"Mercury\", \"Uranus\")\n    planet2 = planet2.replace(\"Mercury\", \"Uranus\")\n    planet1 = planet1.replace(\"Venus\", \"Uranus\")\n    planet2 = planet2.replace(\"Venus\", \"Uranus\")\n    planet1 = planet1.replace(\"Earth\", \"Mercury\")\n    planet2 = planet2.replace(\"Earth\", \"Mercury\")\n    planet1 = planet1.replace(\"Mars\", \"Uranus\")\n    planet2 = planet2.replace(\"Mars\", \"Uranus\")\n    planet1 = planet1.replace(\"Uranus\", \"Jupiter\")\n    planet2 = planet2.replace(\"Uranus\", \"Jupiter\")\n    planet1 = planet1.replace(\"Uranus\", \"Saturn\")\n    planet2 = planet2.replace(\"Uranus\", \"Saturn\")\n    planet1 = planet1.replace(\"Uranus\", \"Neptune\")\n    planet2 = planet2.replace(\"Uranus\", \"Neptune\")\n    return (planet1, planet2)\n",
        "test": "assert     bf('Sun', 'Neptune') == ('Sun', 'Neptune')",
        "num_ids": 6365
    },
    {
        "number": 149,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "    return sorted(lst, key=len, reverse=True)\n",
        "test": "assert     sorted_list_sum([]) == []",
        "num_ids": 1270
    },
    {
        "number": 150,
        "max_answer_num": 21,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "    #   1\n    if n == 1:\n        return 1\n    #   2\n    if n%2 == 0:\n        return y\n    #   3\n    if n%2 == 1:\n        return x\n    #   4\n    #   5\n    #   6\n    #   7\n    #   8\n    #   9\n    #   10\n    #   11\n    #   12\n    #   13\n    #   14\n    #   15\n    #   16\n    #   17\n    #   18\n    #   19\n    #   20\n    #   21\n    #   22\n    #   23\n    #   24\n    #   25\n    #   26\n    #   27\n    #   28\n    #   29\n    #   30\n    #   31\n    #   32\n    #   33\n    #   34\n    #   35\n    #   36\n    #   37\n    #   38\n    #   39\n    #   40\n    #   41\n    #   42\n    #   43\n    #   44\n    #   45\n    #   46\n    #   47\n    #   48\n    #   49\n    #   50\n    #   51\n    #   52\n    #   53\n    #   54\n    #   55\n    #   56\n    #   57\n    #   58\n    #   59\n    #   60\n    #   61\n    #   62\n    #   63\n    #   64\n    #   65\n    #   66\n    #   67\n    #   68\n    #   69\n    #   70\n    #   71\n    #   72\n    #   73\n    #   74\n    #   75\n    #   76\n    #   77\n    #   78\n    #   79\n    #   80\n    #   81\n    #   82\n    #   83\n    #   84\n    #   85\n    #   86\n    #   87\n    #   88\n    #   89\n    #   90\n    #   91\n    #   92\n    #   93\n    #   94\n    #   95\n    #   96\n    #   97\n    #   98\n    #   99\n    #   100\n    #   101\n    #   102\n    #   103\n    #   104\n    #   105\n    #   106\n    #   107\n    #   108\n    #   109\n    #   110\n    #   111\n    #   112\n    #   113\n    #   114\n    #   115\n    #   116\n    #   117\n    #   118\n    #   119\n    #   120\n    #   121\n    #   122\n    #   123\n    #   124\n    #   125\n    #   126\n    #   127\n    #   128\n    #   129\n    #   130\n    #   131\n    #   132\n    #   133\n    #   134\n    #   135\n    #   136\n    #   137\n    #   138\n    #   139\n    #   140\n    #   141\n    #   142\n    #   143\n    #   144\n    #   145\n    #   146\n    #   147\n    #   148\n    #   149\n    #   150\n    #   151\n    #   152\n    #   153\n    #   154\n    #   155\n    #   156\n    #   157\n    #   158\n    #   159\n    #   160\n    #   161\n    #   162\n    #   163\n    #   164\n    #   165\n    #   166\n    #   167\n    #   168\n    #   169\n    #   170\n    #   171\n    #   172\n    #   173\n    #   174\n    #   175\n    #   176\n    #   177\n    #   178\n    #   179\n    #   180\n    #   181\n    #   182\n    #   183\n    #   184\n    #   185\n    #   186\n    #   187\n    #   188\n    #   189\n    #   190\n    #   191\n    #   192\n    #   193\n    #   194\n    #   195\n    #   196\n    #   197\n    ",
        "test": "assert x_or_y(2, 2, 2) == 2",
        "num_ids": 2565
    },
    {
        "number": 151,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 240,
        "answer": "    sum = 0\n    for x in lst:\n        if x < 0:\n            continue\n        sum += x*x\n    return sum\n",
        "test": "assert     double_the_difference([]) == 0",
        "num_ids": 2022
    },
    {
        "number": 152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "    def process(score,guess):\n        \"\"\"I'm pretty sure this is the best way to do it, but it works even faster than\n        using the same function for the match array and guess array.\n        \"\"\"\n        if guess == score:\n            return 0\n        elif guess in score:\n            return abs(score.index(guess)-score.index(score[guess]))\n        else:\n            return 1\n        \n    scores = [[0 for i in range(len(game))] for i in range(len(game))]\n    guesses = [[0 for i in range(len(game))] for i in range(len(game))]\n    for i in range(len(game)):\n        for j in range(len(game)):\n            scores[i][j] = game[i][j]\n            guesses[i][j] = game[j][i]\n    \n    for i in range(len(guess)):\n        for j in range(len(game)):\n            if guesses[i][j] == guess[i] and guess[i] in guesses[j]:\n                #print(i,j)\n                scores[i][j] = process(scores[i][j], guess[i])\n                guesses[i][j] = process(guesses[i][j], guess[i])\n    \n    return scores\n        \n",
        "test": "assert     compare(test1,test2) == 0",
        "num_ids": 1459
    },
    {
        "number": 153,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 240,
        "answer": "    extensions = sorted(extensions, key = lambda x: -len(x))\n    result = ''\n    for extension in extensions:\n        if extension == extensions[0]:\n            result = extension\n        else:\n            result = result + extension + \".\"\n    return result\n",
        "test": "assert     Strongest_Extension(class_name=\"Slices Slices\", extensions=[\"Slices\", \"StuFfed\"]), \"The function is incorrect.\"",
        "num_ids": 3029
    },
    {
        "number": 154,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "    a = a.lower().strip()\n    b = b.lower().strip()\n    if len(a) < len(b):\n        return False\n    \n    for i in range(len(a)-len(b)+1):\n        if a[i:i+len(b)] == b:\n            return True\n    return False\n",
        "test": "assert     cycpattern_check(\"abcdefg\", \"abdefg\") == False, \"test failed\"",
        "num_ids": 2541
    },
    {
        "number": 155,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "    even_count = 0\n    odd_count = 0\n    for i in str(num):\n        if i == '0':\n            even_count = even_count + 1\n        else:\n            odd_count = odd_count + 1\n    return even_count, odd_count\n",
        "test": "assert     even_odd_count(1) == (0, 1)",
        "num_ids": 1070
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 220,
        "answer": "    def integer_to_roman_number(n):\n        \"\"\"\n        Given a positive integer, return the roman numeral equivalent of it.\n        >>> integer_to_roman_number(5)\n        'i'\n        >>> integer_to_roman_number(104)\n        'dc'\n        >>> integer_to_roman_number(1000)\n        'ci'\n        \"\"\"\n        roman_number = [\n            '',\n            '',\n            'i',\n            '',\n            'c',\n            'x',\n            'd',\n            'v',\n            'ii',\n            'cc',\n            'xc',\n            'iv',\n            'l',\n            'i'\n        ]\n        i = 1\n        while n > 0:\n            if n == 1:\n                return roman_number[i]\n            elif n == 2:\n                return roman_number[i] + roman_number[i - 1]\n            elif n == 3:\n                return roman_number[i] + roman_number[i - 1] + roman_number[i - 2]\n            elif n == 4:\n                return roman_number[i] + roman_number[i - 1] + roman_number[i - 2] + roman_number[i - 3]\n            else:\n                last_one = roman_number[i - 1]\n                next_one = roman_number[i - 2]\n                next_two = roman_number[i - 3]\n                next_three = roman_number[i - 4]\n                if last_one < next_one < next_two < next_three:\n                    return roman_number[i] + roman_number[i - 1] + roman_number[i - 2] + roman_number[i - 3] + roman_number[i - 4]\n                elif last_one < next_one < next_two < next_three:\n                    return roman_number[i] + roman_number[i - 1] + roman_number[i - 2] + roman_number[i - 3] + next_one + roman_number[i - 4]\n                else:\n                    return roman_number[i] + roman_number[i - 1] + roman_number[i - 2] + next_one + roman_number[i - 3] + next_two + roman_number[i - 4]\n",
        "test": "assert ",
        "num_ids": 3560
    },
    {
        "number": 157,
        "max_answer_num": 25,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "    if ((a == b) or (b == c) or (a == c)):\n        return True\n    else:\n        return False\n",
        "test": "assert     right_angle_triangle(2,1,3) == False",
        "num_ids": 2317
    },
    {
        "number": 158,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "    max_char = 0\n    max_word = \"\"\n    for word in words:\n        num_char = 0\n        for char in word:\n            if char.isalpha():\n                num_char += 1\n        if num_char > max_char:\n            max_char = num_char\n            max_word = word\n    return max_word\n",
        "test": "assert     find_max([\"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"b\", \"b\", \"a\"]) == \"a\"",
        "num_ids": 1612
    },
    {
        "number": 159,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "    if number == 0 or need == 0:\n        return [0, 0]\n    if remaining == 0:\n        return [0, 0]\n    \n    remaining = remaining - need\n    if remaining < 0:\n        remaining = 0\n    \n    return [number, remaining]",
        "test": "assert     eat(1, 4, 4), \"There is only 4 carrots left in stock, but you need to eat more carrots to complete the meal.\"",
        "num_ids": 2207
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 340,
        "answer": "    \n    if operator == None:\n        print(\"Type Error\")\n        return None\n",
        "test": "assert     do_algebra(['a', 'b', 'c'], [1, 2, 3]) == 7",
        "num_ids": 1528
    },
    {
        "number": 161,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "    if not s:\n        return \"\"\n    r = \"\"\n    l = s[0]\n    for i in range(1,len(s)):\n        if s[i]!= l:\n            r += l\n            l = s[i]\n        elif s[i] == l:\n            l = s[i]\n    r += l\n    return r\n",
        "test": "assert     solve(\"\") == \"\"",
        "num_ids": 1273
    },
    {
        "number": 162,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 320,
        "answer": "    import hashlib\n    if not text:\n        return None\n",
        "test": "assert     string_to_md5(None) == None",
        "num_ids": 1245
    },
    {
        "number": 163,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "    return list(range(a, b+1))\n",
        "test": "assert     generate_integers(1, 2) == [1, 2]",
        "num_ids": 953
    }
]