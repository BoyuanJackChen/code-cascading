[
    {
        "number": 0,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    for number in numbers:\n        if abs(number - threshold) < abs(number - (threshold + 1e-9)):\n            return True\n    return False\n",
        "test": "assert     has_close_elements([1, 2, 3, 4, 5], 0.1) == False",
        "num_ids": 424
    },
    {
        "number": 1,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    parens = []\n    close_parens = []\n    for char in paren_string:\n        if char in ['(', ')', '{', '}', '[', ']', '{}', ',']:\n            parens.append(char)\n        elif char == '(' or char == ')' or char == '{' or char == '}' or char == '[':\n            close_parens.append(char)\n    return close_parens + parens\n",
        "test": "assert     separate_paren_groups(\"\") == []",
        "num_ids": 666
    },
    {
        "number": 2,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return int(number) if number >= 1 else 0\n",
        "test": "assert     truncate_number(0.0) == 0.0",
        "num_ids": 303
    },
    {
        "number": 3,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    # Your code here\n    return False\n",
        "test": "assert     below_zero([0, 3]) == False, \"check\"",
        "num_ids": 704
    },
    {
        "number": 4,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    return round(sum(map(abs, numbers))/len(numbers), 4)\n",
        "test": "assert     mean_absolute_deviation([1]) == 1",
        "num_ids": 479
    },
    {
        "number": 5,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    if len(numbers) == 0:\n        return []\n    elif len(numbers) == 1:\n        return numbers + [delimeter]\n    else:\n        return intersperse(numbers[:-1], delimeter) + [numbers[-1] + delimeter]\n",
        "test": "assert ",
        "num_ids": 429
    },
    {
        "number": 6,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    curr_str = \"\"\n    idx = 0\n    nesting_level = 0\n",
        "test": "assert     parse_nested_parens.__name__ == \"parse_nested_parens\"",
        "num_ids": 1522
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return [x for x in strings if x.lower().find(substring.lower())!= -1]\n",
        "test": "assert     filter_by_substring([\"hello\", \"goodbye\", \"world\"], \"o\")",
        "num_ids": 623
    },
    {
        "number": 8,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    sum, prod = 0, 1\n    for x in numbers:\n        sum += x\n        prod *= x\n    return (sum, prod)\n",
        "test": "assert     sum_product([]) == (0, 1)",
        "num_ids": 364
    },
    {
        "number": 9,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    res = [0] * len(numbers)\n    for i in range(len(numbers)):\n        res[i] = max(res[i], numbers[i] + rolling_max(numbers[max(i - 1, 0): i + 1]))\n    return res\n",
        "test": "assert     rolling_max([]) == []",
        "num_ids": 542
    },
    {
        "number": 10,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    # Find the longest palindrome in string\n    longest_palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i]):\n            longest_palindrome = string[i] + longest_palindrome\n    return longest_palindrome\n",
        "test": "assert     make_palindrome('abcd') == 'abcd'",
        "num_ids": 432
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    return \"\".join(chr(ord(x) ^ ord(y)) for x, y in zip(a, b))\n",
        "test": "assert     string_xor('a', 'b') == 'b'",
        "num_ids": 361
    },
    {
        "number": 12,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    if not strings:\n        return None\n",
        "test": "assert     longest([]) == None",
        "num_ids": 232
    },
    {
        "number": 13,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    if b == 0:\n        return a\n    return greatest_common_divisor(a, b % a)\n",
        "test": "assert     greatest_common_divisor(1, 9) == 1",
        "num_ids": 361
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    prefixes = []\n    prefix = \"\"\n    for i in range(len(string)):\n        if string[i] == \"a\" or string[i] == \"b\" or string[i] == \"c\":\n            prefix = string[:i] + prefix\n        if string[i] == \" \":\n            if prefix!= \"\":\n                prefixes.append(prefix)\n            prefix = \"\"\n    return prefixes\n",
        "test": "assert     all_prefixes(\"a\") == []",
        "num_ids": 887
    },
    {
        "number": 15,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    # return str(n)\n    # return str(n)[:n]\n    return str(n)\n",
        "test": "assert     string_sequence(0) == \"0\"",
        "num_ids": 344
    },
    {
        "number": 16,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    occurrences = dict()\n    for character in string:\n        occurrences[character] = occurrences.get(character, 0) + 1\n    return len(occurrences)\n",
        "test": "assert     count_distinct_characters(\"\") == 0",
        "num_ids": 476
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    music_string = music_string.replace(' ', '')\n    beats = []\n    beats_per_quarter = 0\n",
        "test": "assert     parse_music('o|.|o') == [1,2,1,2,1,1,2,2,1,1,2]",
        "num_ids": 1728
    },
    {
        "number": 18,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    if not string or not substring:\n        raise Exception(\"string and substring cannot be empty\")\n    \n    prefix_len = len(substring)\n    result = 0\n    \n    for i in range(prefix_len):\n        if substring[i:i+len(substring)] == substring:\n            result += 1\n            \n    return result\n",
        "test": "assert     how_many_times(\"hello world\", \"worl\") == 1",
        "num_ids": 553
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    # Convert numbers into a list\n    numbers = numbers.split(\" \")\n    # Reorder the list\n    numbers = [int(number) for number in numbers]\n    # Sort list\n    numbers.sort()\n    # Return the string\n    return \" \".join(map(str, numbers))",
        "test": "assert     sort_numbers(\"one\") == \"one\"",
        "num_ids": 1586
    },
    {
        "number": 20,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    smallest = numbers[0]\n    for i in range(1, len(numbers)):\n        if smallest > numbers[i]:\n            smallest = numbers[i]\n    return smallest, smallest\n",
        "test": "assert     find_closest_elements([1.1, 2.2, 3.3, 4.4]) == (3.0, 1.0)",
        "num_ids": 648
    },
    {
        "number": 21,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    transformed_numbers = []\n    for num in numbers:\n        if num!= 0:\n            transformed_numbers.append(num)\n        else:\n            transformed_numbers.append(1)\n    return transformed_numbers\n",
        "test": "assert     rescale_to_unit([1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7,8]",
        "num_ids": 520
    },
    {
        "number": 22,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "test": "assert     filter_integers([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 362
    },
    {
        "number": 23,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return len(string)",
        "test": "assert     strlen(\"abc\") == 3",
        "num_ids": 130
    },
    {
        "number": 24,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    divisor = 2\n    for i in range(3, n):\n        if n % i == 0:\n            divisor = i\n            break\n    return divisor\n",
        "test": "assert         largest_divisor(2) == 2",
        "num_ids": 372
    },
    {
        "number": 25,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    num_list = list(str(n))\n    prime_factors = []\n    for i in range(len(num_list)):\n        for j in range(i, len(num_list)):\n            num = int(num_list[i]) * int(num_list[j])\n            if num % 2 == 0:\n                prime_factors.append(num)\n",
        "test": "assert     factorize(100) == [3,5]",
        "num_ids": 392
    },
    {
        "number": 26,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    if numbers is None or len(numbers) == 0:\n        return None\n    dict_numbers = dict()\n    for num in numbers:\n        if num in dict_numbers:\n            dict_numbers[num] += 1\n        else:\n            dict_numbers[num] = 1\n    return [num for num in dict_numbers if dict_numbers[num] > 1]\n",
        "test": "assert     remove_duplicates([1, 1, 1, 2, 2, 3, 3]) == [1, 2, 3]",
        "num_ids": 577
    },
    {
        "number": 27,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    return string.swapcase()\n",
        "test": "assert     flip_case(\"A\") == \"a\"",
        "num_ids": 273
    },
    {
        "number": 28,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate([]) == \"\"",
        "num_ids": 260
    },
    {
        "number": 29,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([ 'zebra' ], 'z') == ['zebra']",
        "num_ids": 406
    },
    {
        "number": 30,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    positives = []\n    for el in l:\n        if el > 0:\n            positives.append(el)\n    return positives\n",
        "test": "assert     get_positive([]) == []",
        "num_ids": 298
    },
    {
        "number": 31,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if n == 1 or n == 2 or n == 3 or n == 5 or n == 7:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    k = 5\n    while k * k <= n:\n        if n % k == 0 or n % (k + 2) == 0:\n            return False\n        k += 6\n    return True\n",
        "test": "assert     is_prime(3) == True",
        "num_ids": 407
    },
    {
        "number": 32,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    n = len(xs)\n    x = xs[0]\n    for i in range(n):\n        if xs[i]!= 0:\n            x = xs[i]\n            break\n    return x\n",
        "test": "assert     find_zero([1, 1]) == 1",
        "num_ids": 431
    },
    {
        "number": 33,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    l1 = []\n    l2 = []\n    l3 = []\n    for i in l:\n        if i % 3 == 0:\n            l1.append(i)\n        elif i % 3 == 1:\n            l2.append(i)\n        else:\n            l3.append(i)\n    return sorted(l1+l2+l3)\n",
        "test": "assert         sort_third([]) == []",
        "num_ids": 546
    },
    {
        "number": 34,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return list(dict.fromkeys(l).keys())\n",
        "test": "assert     unique([1, 1, 2, 2, 3, 3, 2, 1, 1]) == [1, 2, 3]",
        "num_ids": 1377
    },
    {
        "number": 35,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    if not l:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if l[0] > l[1]:\n        return l[0]\n    return max_element(l[1:])",
        "test": "assert     max_element([1, 1, 1, 1, 1, 1]) == 1",
        "num_ids": 284
    },
    {
        "number": 36,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    count = 0\n    for i in range(1, n + 1):\n        if i % 3 == 0:\n            count += 1\n        elif i % 5 == 0:\n            count += 1\n        elif i % 3 == 0 and i % 5 == 0:\n            count += 1\n        else:\n            count = 0\n    return count\n",
        "test": "assert     fizz_buzz(5) == 1, \"5 is not divisible by either 11 or 13\"",
        "num_ids": 510
    },
    {
        "number": 37,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return sorted(l, key=lambda x: (x%2, x))\n",
        "test": "assert         sort_even([]) == []",
        "num_ids": 455
    },
    {
        "number": 38,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    # split by groups of three characters, concatenate groups.\n    groups = [s[3 * i:min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse reverse groups.\n    groups = [s[-i-3:0:-i] if len(s) >= i else s[i:] for i in range((len(s) + 2) // 3)]\n    # convert groups to a single string.\n    return \"\".join(groups)",
        "test": "assert     encoded_cyclic_test == \"dcadbd\"",
        "num_ids": 2683
    },
    {
        "number": 39,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 3\n    if n==4:\n        return 5\n    if n%2==0:\n        return prime_fib(n//2)+2*prime_fib(n//2)\n    else:\n        return prime_fib(n-1)+2*prime_fib(n-1)\n",
        "test": "assert     prime_fib(3) == 3",
        "num_ids": 441
    },
    {
        "number": 40,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    # Your code here\n    #raise NotImplementedError()\n    if len(l) == 0:\n        return True\n    sum_zero = 0\n    for i in range(0, len(l)):\n        if l[i] == 0:\n            sum_zero += l[i]\n        else:\n            break\n    if sum_zero == 3:\n        return True\n    else:\n        return False\n",
        "test": "assert     triples_sum_to_zero([1, 5, 7, 9]) == False",
        "num_ids": 581
    },
    {
        "number": 41,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    return sum(1 for _ in range(n))",
        "test": "assert     car_race_collision(4) == 4",
        "num_ids": 607
    },
    {
        "number": 42,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return [x+1 for x in l]\n",
        "test": "assert     incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 352
    },
    {
        "number": 43,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    # TODO: Write your solution here\n    return len(set(l)) == len(set(set(l)))",
        "test": "assert pairs_sum_to_zero([0]) == True",
        "num_ids": 853
    },
    {
        "number": 44,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    x = int(x)\n    if x < 10:\n        return f'{x}{base}'\n    else:\n        if x < base:\n            return f'{x}0{base}'\n        else:\n            return f'{x}1{base}'\n    pass\n",
        "test": "assert ",
        "num_ids": 341
    },
    {
        "number": 45,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "    return a*(h/2)\n",
        "test": "assert     triangle_area(2, 4) == 4.0",
        "num_ids": 213
    },
    {
        "number": 46,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    \ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 1\n    fib5(2) -> 1\n    fib5(3) -> 2\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    >>> fib5(5)\n    5\n    >>> fib5(6)\n    8\n    >>> fib5(7)\n    12\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4)\n        \ndef fib6(n: int):\n    \"\"\"The Fib6 number sequence is a sequence similar to the Fibonacci sequnece that's defined as follows:\n    fib6(0) -> 0\n    fib6(1) -> 0\n    fib6(2) -> 1\n    fib6(3) -> 2\n    fib6(n) -> fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4).\n    Please write a function to efficiently compute the n-th element of the fib6 number sequence.  Do not use recursion.\n    >>> fib6(5)\n    5\n    >>> fib6(6)\n    18\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4)\n",
        "test": "assert     fib4(0) == 0",
        "num_ids": 874
    },
    {
        "number": 47,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    # your code here\n    s= sorted(l)\n    return (s[len(s)//2] if len(s)%2==0 else s[len(s)//2-1])\n",
        "test": "assert     median([1]) == 1",
        "num_ids": 477
    },
    {
        "number": 48,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    rev = ''\n    for char in text:\n        if char.lower() in 'abcdefghijklmnopqrstuvwxyz':\n            rev = char + rev\n    return rev.lower() == rev.lower()\n",
        "test": "assert     is_palindrome('a')",
        "num_ids": 309
    },
    {
        "number": 49,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    \n    \"\"\"\n    Efficient addition of a two's compliment modulo.\n    >>> modp(9, 2)\n    1\n    >>> modp(1, 2)\n    0\n    >>> modp(1, 11)\n    1\n    \"\"\"\n    \n    r = 1\n    d = 2\n    while n > 0:\n        r = r * 10 + (n % 10)\n        n = n // 10\n    return r * d % p\n",
        "test": "assert     modp(12, 3) == 2",
        "num_ids": 340
    },
    {
        "number": 50,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert         decode_shift(\"\") == \"\", \"encode_shift should return an empty string\"",
        "num_ids": 449
    },
    {
        "number": 51,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    vowels = 'aeiouAEIOU'\n    new_text = ''\n    for letter in text:\n        if letter in vowels:\n            new_text += letter\n        else:\n            new_text +=''\n    return new_text\n",
        "test": "assert remove_vowels(\"a\") == \"a\"",
        "num_ids": 456
    },
    {
        "number": 52,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n",
        "test": "assert     below_threshold(l=[3, 2, 5], t=4) == False",
        "num_ids": 278
    },
    {
        "number": 53,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return x+y\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    3\n    \"\"\"\n    return x-y\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    21\n    \"\"\"\n    return x*y\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    2\n    >>> divide(5, 7)\n    4\n    \"\"\"\n    return x/y\ndef modulo(x: int, y: int):\n    \"\"\"Return the modulo of x and y\n    >>> modulo(2, 3)\n    1\n    >>> modulo(5, 7)\n    5\n    \"\"\"\n    return x%y\ndef is_odd(x: int):\n    \"\"\"Is the number x odd?\"\"\"\n    return x%2==1\ndef is_even(x: int):\n    \"\"\"Is the number x even?\"\"\"\n    return x%2==0\ndef add_strings(x: str, y: str):\n    \"\"\"Add two strings x and y.\n    >>> add_strings(\"Hi\", \"Bye\")\n    'HiBye'\n    >>> add_strings(\"Cat\", \"Dog\")\n    'CatDog'\n    \"\"\"\n    return x+y\ndef is_palindrome(x: int):\n    \"\"\"Is x a palindrome?\"\"\"\n    return str(x) == str(x)[::-1]\n",
        "test": "assert     add(1, 2) == 3",
        "num_ids": 697
    },
    {
        "number": 54,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    return s0 == s1\n",
        "test": "assert     (same_chars(\"wafrsdf\", \"fjkrghsjk\")) == False",
        "num_ids": 362
    },
    {
        "number": 55,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)\n",
        "test": "assert     fib(1) == 1",
        "num_ids": 298
    },
    {
        "number": 56,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    brackets = brackets.replace(\"<\", \"<>\")\n    return all(isinstance(c, str) for c in brackets)\n",
        "test": "assert     correct_bracketing('<>')",
        "num_ids": 434
    },
    {
        "number": 57,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    for el in l:\n        if el < 0:\n            return False\n    return True\n",
        "test": "assert     monotonic([]), \"Empty list\"",
        "num_ids": 302
    },
    {
        "number": 58,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    l3 = []\n    for i in l1:\n        if i not in l3:\n            l3.append(i)\n    for i in l2:\n        if i not in l3:\n            l3.append(i)\n    return l3\n",
        "test": "assert     common(['a', 'b'], ['a', 'b', 'c']) == ['a', 'b', 'c']",
        "num_ids": 1084
    },
    {
        "number": 59,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    largest_prime_factor = 1\n    while n % 2 == 0:\n        largest_prime_factor += 1\n        n = n // 2\n    return largest_prime_factor\n",
        "test": "assert     largest_prime_factor(13)!= 2",
        "num_ids": 371
    },
    {
        "number": 60,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return sum(range(1,n+1))",
        "test": "assert     sum_to_n(1) == 1",
        "num_ids": 181
    },
    {
        "number": 61,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    for opening in [\"(\", \")\"]:\n        for closing in [\"(\", \")\"]:\n            if brackets.count(opening) == brackets.count(closing):\n                return True\n    return False\n",
        "test": "assert     correct_bracketing(\"(((\") == True",
        "num_ids": 456
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    derivative = [1]\n    for i in range(1, len(xs) - 1):\n        derivative.append(xs[i] * derivative[i - 1] + xs[i + 1] * derivative[i])\n    return derivativ",
        "test": "assert         derivative(polynomial([1, 1, 1])) == 0.0",
        "num_ids": 501
    },
    {
        "number": 63,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    assert 0 <= n <= 10**5, \"n must be an integer within the range [0, 10^5].\"\n    if n <= 1:\n        return n\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "assert     fibfib(0) == 0, \"FibFib function is incorrect\"",
        "num_ids": 542
    },
    {
        "number": 64,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    vowels = 0\n    for i in range(len(s)):\n        if s[i] in ['a', 'e', 'i', 'o', 'u']:\n            vowels += 1\n    return vowels\n",
        "test": "assert     vowels_count(\"mao\") == 2, \"vowels_count's test case 2 failed\"",
        "num_ids": 463
    },
    {
        "number": 65,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    x = str(x)\n    if shift > len(x):\n        return x\n    else:\n        shift = len(x) - shift\n        return x[shift:] + x[:shift]\n    \ndef cyclic_shift(x, shift):\n    \"\"\"Shift the digits of the integer x, shift the digits by shift, and return the result as a string.\n    >>> cyclic_shift(12, 1)\n    \"2\"\n    >>> cyclic_shift(12, 2)\n    \"12\"\n    \"\"\"\n    x = str(x)\n    if shift < 0:\n        shift *= -1\n    result = []\n    while shift:\n        shift, digit = divmod(shift, len(x))\n        result.append(x[-digit])\n    return ''.join(result[::-1])\n",
        "test": "assert     circular_shift(5, 5) == '5'",
        "num_ids": 511
    },
    {
        "number": 66,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    return sum([ord(c) for c in s if c.isalpha()])\n",
        "test": "assert     digitSum(\" \") == 0",
        "num_ids": 171
    },
    {
        "number": 67,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    for fruit in range(0,n):\n        if s[fruit] == 'p':\n            return fruit\n    return 0\n",
        "test": "assert     fruit_distribution(\"apples\",5)==1",
        "num_ids": 1465
    },
    {
        "number": 68,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    if arr == []:\n        return []\n    minimum_even = min(arr)\n    for index in range(len(arr)):\n        if arr[index] % 2 == 0:\n            continue\n        if index + 1 < len(arr):\n            if arr[index] == arr[index + 1] and arr[index] % 2 == 0:\n                return [arr[index]//2, index]\n    return []\n",
        "test": "assert     pluck([3,0,0]) == []",
        "num_ids": 686
    },
    {
        "number": 69,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    import heapq\n    res = []\n    for val in lst:\n        if len(res) < 1:\n            res.append(val)\n        else:\n            if res[0] < val:\n                res[0] = val\n            else:\n                heapq.heappush(res, val)\n    if len(res) == 0:\n        return -1\n    return res[0]\n",
        "test": "assert     search([]) == -1",
        "num_ids": 1537
    },
    {
        "number": 70,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    # You must use the sorted() function, not list.sort()\n    return sorted(lst, reverse=True)\n",
        "test": "assert     sorted(sorted([])) == []",
        "num_ids": 665
    },
    {
        "number": 71,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    if a + b <= c and b + c <= a and a + c <= b:\n        if a == b == c:\n            return round(1 / 3, 2)\n        elif a == b or a == c or b == c:\n            return round(0.5 * (a + b), 2)\n        elif a == b or a == c or b == c:\n            return -1\n        elif a == b and b == c:\n            return round(0.5 * (a + b + c), 2)\n        elif a == b and a == c:\n            return round(0.5 * (a + b + c), 2)\n        elif a == b and b == c:\n            return round(0.5 * (a + b + c), 2)\n        elif a == b and b!= c:\n            return round(0.5 * (a + b + c), 2)\n        elif a == b and a!= c:\n            return round(0.5 * (a + b + c), 2)\n        elif a == b and a!= c:\n            return round(0.5 * (a + b + c), 2)\n        elif a == b or a!= c:\n            return round(0.5 * (a + b + c), 2)\n    else:\n        return -1\n",
        "test": "assert triangle_area(2, 2, 3) == -1, 'triangle_area: incorrect triangle_area'",
        "num_ids": 1478
    },
    {
        "number": 72,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    # first check it's balanced\n    q = list(q)\n    return q == sorted(q[::-1])\n",
        "test": "assert     will_it_fly(q = [2,5,3,1], w = 10) == False",
        "num_ids": 535
    },
    {
        "number": 73,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    smallest_change_length = 0\n    \n    for i in range(len(arr) - 1, 0, -1):\n        smallest_change_length = min(smallest_change_length, i)\n    return smallest_change_length\n",
        "test": "assert     smallest_change(",
        "num_ids": 1226
    },
    {
        "number": 74,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    lst1.sort()\n    lst2.sort()\n    counter = 0\n    for i in range(len(lst1)):\n        if lst1[i] == lst2[i]:\n            counter += 1\n    return lst1[:counter]\n",
        "test": "assert total_match([], ['hello']) == []",
        "num_ids": 528
    },
    {
        "number": 75,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if a > 100:\n        return False\n    elif a == 1:\n        return False\n    elif a == 2:\n        return True\n    else:\n        for i in range(3, int(math.sqrt(a)+1)):\n            if a % i == 0:\n                return False\n        return True\n",
        "test": "assert not     is_multiply_prime(1)",
        "num_ids": 467
    },
    {
        "number": 76,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    \n    return n**int(str(n))==x\n",
        "test": "assert     is_simple_power(3, 1) == False",
        "num_ids": 473
    },
    {
        "number": 77,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    if a > 180 and a < 9999:\n        return True\n    else:\n        return False\n",
        "test": "assert     iscube(7) == False",
        "num_ids": 2304
    },
    {
        "number": 78,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    num = str(num)\n    primes = []\n    for num in num:\n        if int(num, base=16) not in primes:\n            primes.append(int(num, base=16))\n    num = 0\n    for p in primes:\n        num += p**(len(str(p))-1)\n    return num\n",
        "test": "assert     hex_key(12), '12 should be correct'",
        "num_ids": 586
    },
    {
        "number": 79,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    if isinstance(decimal, int):\n        return str(bin(decimal))[2:]\n    else:\n        raise TypeError(\"decimal must be an integer\")\n",
        "test": "assert     decimal_to_binary(0) == '0'",
        "num_ids": 544
    },
    {
        "number": 80,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    #s = str(s)\n    l = len(s)\n    if(l<=3):\n        return True\n    return False\n",
        "test": "assert     is_happy('a') == True",
        "num_ids": 494
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    sum = 0\n    for grade in grades:\n        sum += grade\n    if sum == 4.0:\n        return ['A+']\n    elif sum > 3.7:\n        return ['A']\n    elif sum > 3.3:\n        return ['B']\n    elif sum > 3.0:\n        return ['B-']\n    elif sum > 2.7:\n        return ['C']\n    elif sum > 2.3:\n        return ['C-']\n    elif sum > 2.0:\n        return ['C+']\n    elif sum > 1.7:\n        return ['D']\n    elif sum > 1.3:\n        return ['D-']\n    elif sum > 1.0:\n        return ['D+']\n    elif sum > 0.7:\n        return ['E']\n    elif sum > 0.0:\n        return ['E-']\n    else:\n        return ['A+', 'B', 'C-', 'C', 'A-']\n",
        "test": "assert     numerical_letter_grade(grades) == [4.0,3.0,3.3,3.0,2.7,2.3,2.0,1.7,1.3,1.0,0.7,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.",
        "num_ids": 2803
    },
    {
        "number": 82,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    if string!= '':\n        return len(string) == 0 or sum(map(str.isdigit, string)) <= 1\n    return False\n",
        "test": "assert     prime_length(\"cd\") == True",
        "num_ids": 415
    },
    {
        "number": 83,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    n=str(n)\n    if len(n)<3:\n        return int(n)\n    start = 0\n    end = 0\n    for i in range(len(n)):\n        if n[i]=='1':\n            if start==0:\n                start = i\n            else:\n                end = i\n        elif n[i]=='0':\n            if end==0:\n                end = i\n            else:\n                start = end\n    return end-start\n",
        "test": "assert     starts_one_ends(0) == 0",
        "num_ids": 1557
    },
    {
        "number": 84,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    if N == 0:\n        return \"\"\n    total = 0\n    while N >= 1:\n        total += int(str(N)[-1])\n        N //= 10\n    return total\n",
        "test": "assert     (solve(1)) == 1",
        "num_ids": 530
    },
    {
        "number": 85,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    even = []\n    odd = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            even.append(lst[i])\n        else:\n            odd.append(lst[i])\n    return even + odd\n",
        "test": "assert     add([]) == []",
        "num_ids": 471
    },
    {
        "number": 86,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    words = s.split()\n    words = [''.join(word) for word in words]\n    words =''.join(words).strip()\n    return words\n    \n",
        "test": "assert     'h', 'h' == anti_shuffle('hello')",
        "num_ids": 365
    },
    {
        "number": 87,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    return [ (x, idx) for idx, x in enumerate(lst) ]\n",
        "test": "assert     get_row([1,2,3,4,5,6,7,8,9], 1) == [(1,0), (2,1), (3,2), (4,3), (5,4), (6,5), (7,6), (8,7), (9,8)]",
        "num_ids": 1693
    },
    {
        "number": 88,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    arr = sorted(array)\n    if(len(arr) % 2 == 1):\n        return arr\n    else:\n        return arr[::-1]\n",
        "test": "assert     sort_array([]) == []",
        "num_ids": 623
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    # YOUR CODE HERE\n    return \"\"\n",
        "test": "assert         encrypt(\"1\") == \"1a0e1\"",
        "num_ids": 555
    },
    {
        "number": 90,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    \n    def is_smallest(num):\n        return num <= lst[0]\n    \n    index = 0\n    \n    for i in range(len(lst)):\n        if is_smallest(lst[i]):\n            index = i\n            break\n    \n    return lst[index]\n",
        "test": "assert     next_smallest([-3, -5, 1, 2, 3]) == -3",
        "num_ids": 659
    },
    {
        "number": 91,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    count = 0\n    for word in S.split(\".\"):\n        if word == \"I\":\n            count += 1\n        else:\n            return count\n    return count\n",
        "test": "assert not    is_bored('how are you?')",
        "num_ids": 441
    },
    {
        "number": 92,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    return x + y == z or x + z == y or y + z == x",
        "test": "assert     any_int(1, 2, 3) == True, \"1 should be equal to 3\"",
        "num_ids": 462
    },
    {
        "number": 93,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    message = message.replace(\"'\", \" \").upper().replace(\"\u00c1\", \"A\").replace(\"\u00c2\", \"A\").replace(\"\u00c3\", \"A\").replace(\"\u00c0\", \"A\").replace(\"\u00c0\", \"A\").replace(\"\u00c2\", \"A\").replace(\"\u00c3\", \"A\")\n    message = message.replace(\"\u0160\", \"S\").replace(\"\u0160\", \"S\").replace(\"\u0162\", \"T\").replace(\"\u0162\", \"T\").replace(\"\u0161\", \"S\").replace(\"\u0161\", \"S\").replace(\"\u015a\", \"S\").replace(\"\u015a\", \"S\").replace(\"\u015b\", \"S\").replace(\"\u015b\", \"S\").replace(\"\u016f\", \"S\").replace(\"\u016f\", \"S\")\n    message = message.replace(\"\u00dd\", \"Y\").replace(\"\u00dd\", \"Y\").replace(\"\u00dd\", \"Y\").replace(\"\u00d4\", \"O\").replace(\"\u00d4\", \"O\").replace(\"\u00d4\", \"O\")\n    return message\n",
        "test": "assert     encode('HELLO') == 'HELLO'",
        "num_ids": 1810
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    # for lst in range(0,len(lst)):\n    #     if lst%2==0:\n    #         lst=lst//2\n    #     elif lst%2==1:\n    #         lst=lst//2+1\n    \n    # lst_sum=0\n    # for i in range(len(lst)):\n    #     lst_sum=lst_sum+lst[i]\n    # print(lst_sum)\n    \n    # number_of_divisors=0\n    # for i in range(1,len(lst)):\n    #     if lst[i]!=0:\n    #         if lst[i]%lst[i-1]==0:\n    #             number_of_divisors+=1\n    # return number_of_divisors\n",
        "test": "assert     skjkasdkd([1, 1, 2, 3, 5]) == 10, \"Should be 10\"",
        "num_ids": 1181
    },
    {
        "number": 95,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    for k in dict:\n        if isinstance(k, str) and k.isupper():\n            return False\n    return True\n",
        "test": "assert     check_dict_case({\"a\":1, \"A\":1, \"b\":1, \"B\":1}) == False",
        "num_ids": 526
    },
    {
        "number": 96,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    prime = [2,3,5,7,11,13,17,19]\n    count = 0\n    for i in range(n+1):\n        if i in prime:\n            count += 1\n    return [i for i in prime if i<n]\n",
        "test": "assert     count_up_to(0) == []",
        "num_ids": 474
    },
    {
        "number": 97,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    #return int(a*b)\n    #return a*b\n    return (int(a) * int(b))\n",
        "test": "assert     multiply(3, 1) == 3",
        "num_ids": 274
    },
    {
        "number": 98,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    n = 0\n    for i, c in enumerate(s):\n        if c.isupper():\n            n += 1\n    return n\n",
        "test": "assert     count_upper('aA') == 1",
        "num_ids": 418
    },
    {
        "number": 99,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    # Calculate the closest integer for the given number\n    if value.isdigit():\n        return int(value)\n    else:\n        # Calculate a roundoff factor for the given number\n        fractions = value.split('.')\n        number = int(fractions[0])\n        if number < 0:\n            number = -number\n        else:\n            number = int(fractions[0])\n        factor = number\n        # Check if it is an integer, and if it is round down\n        if value.isdigit():\n            if float(fractions[1]) == 0:\n                factor = 0\n            else:\n                factor = 1\n                if value[0] == '-':\n                    factor = 1\n                    value = value[1:]\n        # Round down to the nearest integer\n        return int(round(number / factor)) * factor\n",
        "test": "assert     closest_integer(\"100.0\") == 100",
        "num_ids": 1894
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    result = []\n    if n & 1:\n        result.append(1)\n    else:\n        result.append(0)\n    while n:\n        n = n & n - 1\n        result.append(n)\n    return result\n",
        "test": "assert make_a_pile(3) == [3, 1, 2]",
        "num_ids": 410
    },
    {
        "number": 101,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    # your code\n    return s.split(', ')\n",
        "test": "assert     words_string(\"apple, blue, thumbs\") == ['apple', 'blue', 'thumbs']",
        "num_ids": 350
    },
    {
        "number": 102,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    if x < y:\n        x, y = y, x\n    if x % 2 == 0:\n        return y\n    else:\n        return -1\n",
        "test": "assert     choose_num(0, 5) == -1",
        "num_ids": 410
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    if n > m:\n        return str(n)[:m] + '0' * (n - m)\n    else:\n        return str(m)[:n] + '0' * (m - n)\n",
        "test": "assert ",
        "num_ids": 376
    },
    {
        "number": 104,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    return [x%10 for x in x]\n",
        "test": "assert     unique_digits([0, 1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4, 5], \"test failed!\"",
        "num_ids": 392
    },
    {
        "number": 105,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    return [i for i in sorted(arr) if i >= 1 and i <= 9]\n",
        "test": "assert     by_length([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 1730
    },
    {
        "number": 106,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    fact = [1]\n    for i in range(1,n+1):\n        fact.append(fact[-1]*i)\n    return fact\n",
        "test": "assert     f(0) == [1]",
        "num_ids": 301
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    l, r = 1, n - 1\n    result = []\n    while l <= r:\n        if n % l == 0:\n            result.append(l)\n            if n // l == l:\n                result.append(l)\n            else:\n                result.append(n // l)\n        else:\n            result.append(n % l)\n            n //= l\n        if n % r == r:\n            result.append(r)\n            if n // r == r:\n                result.append(r)\n            else:\n                result.append(n // r)\n        else:\n            result.append(n % r)\n            n //= r\n    return result\n",
        "test": "assert     even_odd_palindrome(0) == ()",
        "num_ids": 777
    },
    {
        "number": 108,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    c = 0\n    for i in arr:\n        if i > 0:\n            c += 1\n    return c\n",
        "test": "assert     count_nums([-1, 2, 3, 4, -2, -2, -2, -3, -3, -3]) == 3",
        "num_ids": 412
    },
    {
        "number": 109,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    \n    n = len(arr)\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    \n    i = 0\n    j = 0\n    while j < n:\n        if arr[j] < arr[i]:\n            i += 1\n        elif arr[j] > arr[i]:\n            j += 1\n        else:\n            i = j\n            j = i + 1\n    \n    if i!= j:\n        return False\n    \n    arr = arr[i:] + arr[:i]\n    return move_one_ball(arr)\n",
        "test": "assert     move_one_ball([1, 2, 3, 5, 4]) == False",
        "num_ids": 703
    },
    {
        "number": 110,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i]*lst2[i])\n    result = sorted(result)\n    for i in range(len(result)):\n        if result[i]%2==0:\n            return \"YES\"\n    return \"NO\"\n",
        "test": "assert     exchange([1, 2, 3], [2, 1, 3]) == \"YES\"",
        "num_ids": 959
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    \n    # TODO: Your code here\n",
        "test": "assert ",
        "num_ids": 1419
    },
    {
        "number": 112,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    # count = 0\n    # start_index = 0\n    # end_index = len(s)-1\n    # while start_index < end_index:\n    #     if s[start_index]!= c:\n    #         if count == 1:\n    #             return (s[start_index],True)\n    #         elif count == 0:\n    #             return (s[start_index],False)\n    #         start_index += 1\n    #         count += 1\n    #     start_index += 1\n    #     end_index -= 1\n    # return None\n    result = []\n    for char in s:\n        if char not in result:\n            result.append(char)\n    if len(result) == len(s):\n        result.sort()\n        return (''.join(result),True)\n    else:\n        return None\n    # return None\n",
        "test": "assert     reverse_delete('abcd', 'bca') == ('abcd', True)",
        "num_ids": 739
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    return [len(str(i)) % 2 for i in lst]\n",
        "test": "assert     odd_count([\"11\", \"123\", \"321\"]) == [3, 1, 1], \"incorrect result\"",
        "num_ids": 686
    },
    {
        "number": 114,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    if len(nums) == 0:\n        return 0\n    \n    res = float(\"inf\")\n    for i in range(len(nums)):\n        if res > 0:\n            res = min(res, nums[i] + minSubArraySum(nums[i + 1:]))\n    return res\n",
        "test": "assert     minSubArraySum([-1,0]) == -1",
        "num_ids": 613
    },
    {
        "number": 115,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "    \n    if len(grid) == 0:\n        return 0\n    \n    row_len = len(grid[0])\n    if row_len == 0:\n        return 0\n    \n    col_len = len(grid)\n    if col_len == 0:\n        return 0\n    \n    bucket_capacity = capacity\n    \n    for r in range(row_len):\n        for c in range(col_len):\n            if grid[r][c] == 0:\n                continue\n            bucket = math.ceil(bucket_capacity / grid[r][c])\n            for r_idx in range(row_len - bucket + 1):\n                for c_idx in range(col_len - bucket + 1):\n                    grid[r_idx + r][c_idx + c] = 0\n    return 1\n",
        "test": "assert     max_fill(grid=[[0,1,0,0,0],[1,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]], capacity=3) == 1",
        "num_ids": 693
    },
    {
        "number": 116,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    assert len(arr) > 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == 0:\n            pos = i\n            break\n    else:\n        pos = n\n    for j in range(n - 1, 0, -1):\n        if arr[j] == 1:\n            arr[j], arr[pos] = arr[pos], arr[j]\n            pos -= 1\n    return arr",
        "test": "assert     sort_array([0, 1, 2, 0, 1, 0]) == [0, 0, 1, 0, 2, 2]",
        "num_ids": 1406
    },
    {
        "number": 117,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    \n    \n    # if the input string is empty\n    if len(s) == 0:\n        return []\n    \n    # a list of the words in the string\n    word_list = []\n    \n    # a loop to find the letter in string s\n    for letter in s:\n        \n        # if letter is a consonant\n        if letter.lower() in \"abcdefghijklmnopqrstuvwxyz\":\n            \n            # if the letter is not already in word_list\n            if letter.lower() not in word_list:\n                word_list.append(letter.lower())\n            \n    # return word_list\n    return word_list\n    \n",
        "test": "assert     select_words(\"\", 1) == [], \"Test failed\"",
        "num_ids": 661
    },
    {
        "number": 118,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    if not word:\n        return \"\"\n",
        "test": "assert     get_closest_vowel(\"holberton\") == \"H\"",
        "num_ids": 362
    },
    {
        "number": 119,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    stack = []\n    idx = 0\n    for idx, item in enumerate(lst):\n        if item == '(':\n            stack.append(')')\n        elif item == ')':\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    return 'Yes' if len(stack) == 0 else 'No'\n",
        "test": "assert     match_parens(['(', ')', '(', '(']) == 'No'",
        "num_ids": 673
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    res = arr[:]\n",
        "test": "assert     maximum(arr=[-1, -2, -3], k=3) == [3, -3, -2]",
        "num_ids": 425
    },
    {
        "number": 121,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    s = sum(lst[0::2])\n    return s\n",
        "test": "assert     solution([]) == 0",
        "num_ids": 295
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    start_idx = 0\n    sum = 0\n    while start_idx < len(arr):\n        num = arr[start_idx]\n        # 2. check if num is a multiple of ten\n        if num!= 0:\n            start_idx += 2\n        else:\n            sum += num\n        # 3. check if the next num is a multiple of 10\n        while start_idx < len(arr):\n            if num % 10 == 0:\n                break\n            num = num * 10 + arr[start_idx]\n            start_idx += 1\n        # 4. if num is a multiple of 10\n        # 5. if the next num is a multiple of 10\n        # 6. check if the next num is a multiple of 10\n        # 7. if the next num is a multiple of 10\n        # 8. if the next num is a multiple of 10\n        # 9. if the next num is a multiple of 10\n",
        "test": "assert     add_elements([1, 2, 3, 5], 1) == 5",
        "num_ids": 654
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    odd_collatz = []\n",
        "test": "assert ",
        "num_ids": 440
    },
    {
        "number": 124,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    try:\n        assert len(date) == 8\n        if date[-1]!= '-' and date[-1]!= '/':\n            return False\n        if not date[0:2].isdigit() or not date[0:2].isdigit() or not date[0:3].isdigit() or not date[0:3].isdigit() or not date[0:4].isdigit() or not date[0:4].isdigit():\n            return False\n        try:\n            datetime.datetime.strptime(date, \"%m-%d-%Y\")\n        except:\n            return False\n        if int(date[0:2]) > 31 or int(date[0:2]) < 1:\n            return False\n        if int(date[0:2]) > 30 or int(date[0:2]) < 1:\n            return False\n        if int(date[0:2]) > 31 or int(date[0:2]) < 1:\n            return False\n        return True\n    except:\n        return False",
        "test": "assert     valid_date('09-03-1998') == False",
        "num_ids": 1282
    },
    {
        "number": 125,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    words = txt.lower().split()\n    if len(words) == 0:\n        return [\"\"]\n    if len(words) <= 2:\n        return words\n    return words[0:int(len(words)/2)]\n",
        "test": "assert     split_words(\"abc def\") == [\"abc\", \"def\"]",
        "num_ids": 679
    },
    {
        "number": 126,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    # Create a list of all duplicate numbers\n    dup = set([x for x in lst if lst.count(x) > 1])\n    for x in lst:\n        if lst.count(x) > 1:\n            return False\n        else:\n            # Check if the current number is in the list\n            if x in dup:\n                return False\n    # If the list has only 1 duplicate, return True\n    if len(dup) == 0:\n        return True\n    # Otherwise, return False\n    else:\n        return False\n",
        "test": "assert     is_sorted([5, 6, 3, 4, 3]) is False",
        "num_ids": 497
    },
    {
        "number": 127,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    a, b = sorted([interval1, interval2])\n    if a[0] <= b[0]:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
        "test": "assert     intersection(interval1 = (2, 4), interval2 = (1, 3)) == \"NO\"",
        "num_ids": 1101
    },
    {
        "number": 128,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    result = 0\n    signs = ['1', '-1', '0']\n    for x in arr:\n        if x in signs:\n            result += int(x) * int(x)\n    return result\n",
        "test": "assert     prod_signs([0, 0, -1, -1, -1]) == 0",
        "num_ids": 578
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    rows, cols = len(grid), len(grid[0])\n    s = [[-1] * cols for _ in range(rows)]\n    s[0][0] = 0\n    for i in range(rows):\n        for j in range(cols):\n            if s[i][j]!= -1:\n                s[i][j] = s[i][j] + min(grid[i][j], s[i][j - 1])\n            elif s[i][j] == -1:\n                s[i][j] = min(grid[i][j], s[i][j - 1])\n            else:\n                s[i][j] = s[i][j] + 1\n",
        "test": "assert     check(minPath, [[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7, 9]",
        "num_ids": 2005
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    def tribonacci(n, k):\n        if n == 0 or n == 1:\n            return [1, 1]\n        elif n == k:\n            return [1, 2, 3]\n        else:\n            t1, t2, t3 = tribonacci(n - 1, k)\n            t1 = t1 + t2 + t3\n            t2 = t2 + t3\n            t3 = t3 + 1\n            return [t1, t2, t3]\n    return tribonacci(n, 0)\n",
        "test": "assert     tri(3) == 1 + (3 / 2) + (2 / 2) + (2 * (3 / 2)) == 8",
        "num_ids": 441
    },
    {
        "number": 131,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    count = 0\n    while n > 0:\n        count += 1\n        n >>= 1\n    return count\n",
        "test": "assert     digits(0) == 0",
        "num_ids": 232
    },
    {
        "number": 132,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    \n    if string == '':\n        return False\n    \n    for i in range(len(string)):\n        if string[i] == '[':\n            if string[i-1] == '[' and string[i+1] == ']':\n                continue\n            else:\n                return False\n        if string[i] == ']':\n            if string[i-1] == '{' and string[i+1] == '}':\n                continue\n            else:\n                return False\n        if string[i] == '}':\n            if string[i-1] == '{' and string[i+1] == '}':\n                continue\n            else:\n                return False\n    return True\n",
        "test": "assert     is_nested('[}{{}]') == False",
        "num_ids": 1211
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    #return sum(map(lambda x: round(x**2), lst))\n    return sum(map(lambda x: round(x**2), lst))\n",
        "test": "assert     sum_squares([]) == 0",
        "num_ids": 305
    },
    {
        "number": 134,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    # TODO: modify this function to check if the last character\n    # is a letter in a word.\n    return False\n",
        "test": "assert     check_if_last_char_is_a_letter(\"dfb\") == False",
        "num_ids": 540
    },
    {
        "number": 135,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    # TODO: Write your code here\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return i\n    return -1\n",
        "test": "assert     can_arrange([]) == -1",
        "num_ids": 1432
    },
    {
        "number": 136,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    max_neg = None\n    max_pos = None\n    if lst:\n        for x in lst:\n            if x < 0:\n                if max_pos is None:\n                    max_pos = x\n                elif max_neg is None:\n                    max_neg = x\n                else:\n                    if max_pos > max_neg:\n                        max_pos = x\n            else:\n                if max_neg is None:\n                    max_neg = x\n                elif max_pos is None:\n                    max_pos = x\n                else:\n                    if max_neg < max_pos:\n                        max_neg = x\n    else:\n        return (None, None)\n    return (max_neg, max_pos)\n",
        "test": "assert     largest_smallest_integers([1, 3, -6]), None",
        "num_ids": 1577
    },
    {
        "number": 137,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    if isinstance(a, str):\n        return b\n    elif isinstance(a, float):\n        return a\n    elif isinstance(a, int):\n        return b\n    else:\n        raise TypeError('TypeError: {0} cannot be compared to {1}.'.format(type(a), type(b)))\n",
        "test": "assert         compare_one(1, 1) == 1",
        "num_ids": 950
    },
    {
        "number": 138,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    sum_even = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sum_even += i\n    if sum_even % 4 == 0:\n        return True\n    return False\n",
        "test": "assert     is_equal_to_sum_even(0)",
        "num_ids": 1352
    },
    {
        "number": 139,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    if n == 0:\n        return 1\n    elif n == 1:\n        return n\n    else:\n        return n * special_factorial(n-1)\n",
        "test": "assert     special_factorial(0) == 1",
        "num_ids": 1302
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    \n    if len(text) == 1:\n        return text\n    \n    index = 0\n    while index < len(text) and text[index] =='':\n        index += 1\n        \n    text = text[0:index] + \"_\" + text[index:]\n    return text\n    \n    \ndef fix_punctuation(text):\n    \"\"\"\n    Given a string, correct the string by removing\n    punctuation marks and converting them to lowercase.\n    \n    fix_punctuation(\"Example\") == \"Example\"\n    fix_punctuation(\"Example 1\") == \"Example_1\"\n    fix_punctuation(\" Example 2\") == \"_Example_2\"\n    fix_punctuation(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    \n    return text.lower()\n    \n    \ndef main():\n    print(\"Main function called\")\n    \n    # Get the file path\n    path = sys.argv[1]\n",
        "test": "assert     fix_spaces(\"Hola mundo!\") == \"hola-mundo!\"",
        "num_ids": 1021
    },
    {
        "number": 141,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    file_name = str(file_name)\n    \n    if len(file_name) < 3:\n        return 'No'\n    if not file_name[0].isdigit():\n        return 'No'\n    if not file_name[0] in ['a', 'A', '0', '9']:\n        return 'No'\n    if not file_name[1].isdigit():\n        return 'No'\n    if not file_name[2].isalnum():\n        return 'No'\n    if len(file_name)!= 4:\n        return 'No'\n    \n    return 'Yes'\n",
        "test": "assert     file_name_check(\"9999.txt\") == 'No', \"You cannot have a file that has more than three digits: 0, 9 and 1\"",
        "num_ids": 749
    },
    {
        "number": 142,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    sum=0\n    for i in lst:\n        if i%3==0 and i%4!=0:\n            sum=sum+i**2\n    return sum\n",
        "test": "assert     sum_squares([]) == 0",
        "num_ids": 399
    },
    {
        "number": 143,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    return''.join([word for word in sentence.split(' ')])\n",
        "test": "assert     words_in_sentence(\"GeeksforGeeks \") == \"GeeksforGeeks\"",
        "num_ids": 1255
    },
    {
        "number": 144,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    if x.count(\"/\"):\n        num, den = x.split(\"/\")\n        num = int(num)\n        den = int(den)\n        if num!= 0 and den!= 0:\n            return True\n    return False\n",
        "test": "assert     simplify(\"1/0\", \"1\") == False, \"fraction is not a whole number\"",
        "num_ids": 386
    },
    {
        "number": 145,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    # O(n) in time complexity, O(n) in space complexity\n    if not nums:\n        return []\n    # O(1) in time complexity, O(1) in space complexity\n    for i in range(len(nums)):\n        nums[i] = int(nums[i])\n    # O(n) in time complexity, O(1) in space complexity\n    nums.sort()\n    return nums\n",
        "test": "assert     order_by_points([]) == [], \"expected an empty list\"",
        "num_ids": 663
    },
    {
        "number": 146,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    def odd(num):\n        if (num % 10) > 0 and num % 10 % 2!= 0 and num % 10 > 1:\n            return 2\n        else:\n            return 1\n",
        "test": "assert ",
        "num_ids": 593
    },
    {
        "number": 147,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    return (n // 3) * (n - (n // 3))\n",
        "test": "assert     get_max_triples(1) == 0",
        "num_ids": 289
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    return sorted(set(planet1.split(\" \")).intersection(set(planet2.split(\" \"))))\n",
        "test": "assert bf('Mercury', 'Uranus') == ('Mercury', 'Uranus', 'Neptune') ",
        "num_ids": 1418
    },
    {
        "number": 149,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    return sorted(lst, key=lambda word: len(word))\n",
        "test": "assert     sorted_list_sum([]) == []",
        "num_ids": 676
    },
    {
        "number": 150,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    if n==1:\n        return y\n    if n%2==0:\n        return x_or_y(n//2, x, y)\n    else:\n        return x_or_y(n//2, y, x)\n",
        "test": "assert     x_or_y(1, 1, 1) == 1",
        "num_ids": 454
    },
    {
        "number": 151,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    # TODO: Your code here\n    #raise NotImplementedError(\"Implement me!\")\n    res = 0\n    for num in lst:\n        if num%2 == 0:\n            res += math.pow(num,2)\n    return res\n",
        "test": "assert     double_the_difference([]) == 0",
        "num_ids": 427
    },
    {
        "number": 152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    #FIRST CASE - compare if guess is equal to score\n    score, guess = zip(*game)\n    #SECOND CASE - compare if guess is less than score\n    if guess == score:\n        return [0,0,0,0,0,0]\n    #THIRD CASE - compare if guess is greater than score\n    if guess > score:\n        return [0,0,0,0,0,0]\n    #FOURTH CASE - compare if guess is smaller than score\n    if guess < score:\n        return [0,0,0,0,0,0]\n    #FIFTH CASE - compare if guess is equal to score\n    return [score,guess[0],guess[1],guess[2],guess[3],guess[4]]\n",
        "test": "assert     compare(a,b) == 0, \"compare() is incorrect!\"",
        "num_ids": 1156
    },
    {
        "number": 153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    num_upper = len([x for x in extensions if x[0].isupper()])\n    num_lower = len([x for x in extensions if x[0].islower()])\n    cap = num_upper*num_lower*CAP\n    sm = num_upper*num_lower*SM\n    if cap > sm:\n        return '{}.{}'.format(class_name, extensions[0][1:])\n    else:\n        return '{}.{}'.format(class_name, extensions[1][1:])\n",
        "test": "assert     Strongest_Extension('Slices',['SErviNGSliCes', 'Cheese', 'StuFfed']), \\",
        "num_ids": 1974
    },
    {
        "number": 154,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    if(b == None or len(b) == 0):\n        return True\n    elif(b in a or a.count(b) > 1):\n        return True\n    else:\n        for i in range(len(a)-len(b)+1):\n            if(a[i:i+len(b)] == b):\n                return True\n        return False\n",
        "test": "assert     cycpattern_check('www', 'www') == True",
        "num_ids": 513
    },
    {
        "number": 155,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    return num % 10, (num - num % 10) // 10\n",
        "test": "assert     even_odd_count(0) == (0, 0)",
        "num_ids": 304
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    res = ''\n    def dfs(num, roman):\n        if num == 0:\n            return ''.join(roman)\n        if num > 1000:\n            return ''.join(roman)\n        for i in range(1, num + 1):\n            roman = dfs(num - i, roman) + roman\n        return roman\n",
        "test": "assert ",
        "num_ids": 2561
    },
    {
        "number": 157,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    # a, b, c must be positive\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    # Check if the formula is true\n    if a * b < c * c and a * c < b * c:\n        return True\n    return False\n",
        "test": "assert     right_angle_triangle(2, 1, 4) == False",
        "num_ids": 1022
    },
    {
        "number": 158,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    max = words[0]\n    for i in range(1, len(words)):\n        if words[i] > max:\n            max = words[i]\n    return max\n",
        "test": "assert     find_max([\"\"]) == '', \"the function should be a function\"",
        "num_ids": 579
    },
    {
        "number": 159,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    assert number >= 0 and need >= 0 and remaining >= 0\n    if remaining < need:\n        return [ need, remaining ]\n    \n    if number >= need:\n        return [ number, remaining ]\n    \n    if remaining == need:\n        return [ number, remaining ]\n    \n    remaining -= need\n    return eat( number - need, need, remaining ) + eat( number, need, remaining )\n",
        "test": "assert     eat(1, 3, 0), \"eat does not work\"",
        "num_ids": 652
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    # If the operand list is empty, the operator list is an empty list\n    if operand == []:\n        result = operator['+']\n    else:\n        operator_list = []\n        for i in range(len(operand)):\n            operator_list.append(operand[i])\n        result = eval(operator_list[0] + operator_list[1] + operator_list[2])\n    return result\n",
        "test": "assert     do_algebra([0,1,2,3], [0,1,2]) == 1",
        "num_ids": 565
    },
    {
        "number": 161,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    s = s.lower()\n    reverse_s = \"\"\n    vise_s = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                reverse_s += char.upper()\n            else:\n                reverse_s += char.lower()\n        else:\n            vise_s += char\n    return reverse_s + \"\".join(reversed(vise_s))\n",
        "test": "assert     solve(\"z\") == \"Z\"",
        "num_ids": 507
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    import hashlib\n    if not text:\n        return None\n    result = hashlib.md5(text.encode())\n    if result.hexdigest()!= '0':\n        return None\n    return result.hexdigest()\n",
        "test": "assert     string_to_md5(\"\") == None",
        "num_ids": 466
    },
    {
        "number": 163,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    return [x for x in range(a, b+1) if x%2==0]\n",
        "test": "assert     generate_integers(2, 6) == [2, 4, 6]",
        "num_ids": 338
    }
]