[
    {
        "number": 0,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "    for number in numbers:\n        if abs(number - threshold) < abs(number - numbers[-1]):\n            return True\n    return False\n",
        "test": "assert     has_close_elements([1, 2, 4, 2], 3.5) == True"
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 250,
        "answer": "    sep_list = []\n    index = 0\n    is_open = True\n    while index < len(paren_string):\n        char = paren_string[index]\n        if char == '(':\n            if is_open == True:\n                is_open = False\n                sep_list.append(char)\n                index += 1\n            else:\n                index += 1\n        elif char == ')':\n            if is_open == True:\n                index += 1\n                sep_list.append(char)\n                is_open = False\n                if index == len(paren_string):\n                    break\n                else:\n                    continue\n            else:\n                index += 1\n                if index == len(paren_string):\n                    break\n                else:\n                    continue\n        else:\n            index += 1\n    return sep_list\n",
        "test": "assert     separate_paren_groups(\"{{((()))}}\") == [(\"[()]\")]"
    },
    {
        "number": 2,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "    decimals = int(number/10)\n    return number - (decimals * 10)\n",
        "test": "assert     truncate_number(0) == 0"
    },
    {
        "number": 3,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 230,
        "answer": "    print(operations)\n    for i in range(len(operations)):\n        if i == 0:\n            continue\n        if operations[i] == 0:\n            return False\n    return True\n",
        "test": "assert     below_zero(    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == True"
    },
    {
        "number": 4,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 300,
        "answer": "    return (sum(numbers) - sum(numbers[0:-1]))/len(numbers)\n",
        "test": "assert     mean_absolute_deviation([1, 2, 3, 4]) == 1"
    },
    {
        "number": 5,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 220,
        "answer": "    return [n + delimeter for n in numbers[:len(numbers) - 1]] + numbers[len(numbers) - 1:][::-1]\n",
        "test": "assert     intersperse([1,2,3,4,5,6,7,8,9,0], 0)!= []"
    },
    {
        "number": 6,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "    result = []\n    paren_count = 0\n    paren_idx = 0\n    for paren in paren_string:\n        if paren == '(':\n            paren_count += 1\n        elif paren == ')':\n            paren_count -= 1\n        if paren_count!= 0:\n            continue\n        if paren_idx == len(paren_string):\n            result.append(paren_count)\n        else:\n            result.append(paren_count + paren_idx - len(paren_string))\n        paren_idx += 1\n    return result\n",
        "test": "assert     parse_nested_parens.__name__ == \"parse_nested_parens\""
    },
    {
        "number": 7,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "    filtered = []\n    for string in strings:\n        if substring in string:\n            filtered.append(string)\n    return filtered\n",
        "test": "assert     filter_by_substring([\"to\", \"person\", \"a\", \"string\"], \"string\") == [\"string\"]"
    },
    {
        "number": 8,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "    if numbers == []:\n        return (0, 1)\n    if len(numbers) == 1:\n        return numbers[0], 1\n    if len(numbers) == 2:\n        return numbers[0], numbers[1]\n    prod = numbers[0]\n    if numbers[1]!= 0:\n        prod *= numbers[1]\n    sum = 0\n    for i in range(len(numbers)):\n        sum += numbers[i] * prod\n        prod *= numbers[i]\n    return (sum, prod)\n",
        "test": "assert     sum_product([]) == (0, 1)"
    },
    {
        "number": 9,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 260,
        "answer": "    if len(numbers) == 0:\n        return []\n    elif len(numbers) == 1:\n        return numbers\n    else:\n        result = [0] * len(numbers)\n        max_value = numbers[0]\n        for index in range(len(numbers)):\n            if max_value < numbers[index]:\n                max_value = numbers[index]\n            result[index] = max_value\n        return result\n",
        "test": "assert     rolling_max([]) == []"
    },
    {
        "number": 10,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "    palindrome = ''\n    start = 0\n    for char in string:\n        if is_palindrome(char):\n            if start == 0:\n                palindrome += char\n                start += 1\n            else:\n                if char!= palindrome[start-1]:\n                    palindrome += char\n                    start += 1\n                else:\n                    start += 1\n    return palindrome\n",
        "test": "assert     is_palindrome(\"aa\") == True"
    },
    {
        "number": 11,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "    \n    # create a new string with a or b and a^b\n    result = \"\"\n    for c in range(0, len(a)):\n        if a[c] == b[c]:\n            result += \"0\"\n        else:\n            result += \"1\"\n    \n    return result\n",
        "test": "assert     string_xor(b'', 'hello') == ''"
    },
    {
        "number": 12,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "    if len(strings) == 0:\n        return None\n    else:\n        return strings[0]\n",
        "test": "assert     longest([]) == None"
    },
    {
        "number": 13,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "    if a > b:\n        a, b = b, a\n    while a % b!= 0:\n        a, b = b, a % b\n    return a\n",
        "test": "assert     greatest_common_divisor(2, 2) == 2"
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "    if string == '':\n        return []\n    prefixes = []\n    index = 0\n    while index < len(string):\n        if string[index:index+2] == 'a' or string[index:index+2] == 'b' or string[index:index+2] == 'c':\n            prefixes.append(string[index:index+2])\n        index += 1\n    return prefixes\n",
        "test": "assert     all_prefixes(\"\") == []"
    },
    {
        "number": 15,
        "max_answer_num": 13,
        "max_test_num": 1,
        "total_product": 390,
        "answer": "    sequence = []\n    while n > 0:\n        sequence.append(str(n % 10))\n        n //= 10\n    return''.join(sequence)\n",
        "test": "assert     string_sequence(1) == \"1\""
    },
    {
        "number": 16,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "    return len(set(string))\n",
        "test": "assert     count_distinct_characters(\"a\") == 1"
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 340,
        "answer": "    beat_list = []\n    beat_dict = {\n        '.|': 1,\n        'o': 2,\n        'o|': 2,\n        'o||': 2,\n        'o.': 2,\n        '.': 1,\n        '|.': 2,\n        'o||': 2,\n        'o|.': 2,\n        'o.': 1,\n        '.': 0\n    }\n    for character in music_string:\n        if character in beat_dict:\n            beat_list.append(beat_dict[character])\n        elif character == '.':\n            break\n        else:\n            beat_list.append(1)\n",
        "test": "assert     parse_music(\"'o.|.|.o\") == [2, 3]"
    },
    {
        "number": 18,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "    return sum(1 for i in range(len(string)) if string.startswith(substring, i))\n",
        "test": "assert     how_many_times(\"a\", \"a\") == 1"
    },
    {
        "number": 19,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 280,
        "answer": "    result = ''\n    for i in range(len(numbers)):\n        if i % 2 == 0:\n            result += str(numbers[i]) +''\n        else:\n            result += numbers[i] +''\n    return result.strip()\n",
        "test": "assert     sort_numbers(\"zerooneone\") == 'zerooneone'"
    },
    {
        "number": 20,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "    smaller = None\n    larger = None\n    for element in numbers:\n        if larger is None or element > larger:\n            larger = element\n            smaller = smaller\n        if smaller is None or element < smaller:\n            smaller = element\n            larger = larger\n    return (smaller, larger)\n",
        "test": "assert     find_closest_elements([1,2,3,4,5]) == (1,5)"
    },
    {
        "number": 21,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "    rescaled_numbers = [x*1.0 for x in numbers]\n    return rescaled_numbers\n",
        "test": "assert     rescale_to_unit([]) == []"
    },
    {
        "number": 22,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "    return [int(value) for value in values if type(value) is int]",
        "test": "assert     filter_integers([]) == []"
    },
    {
        "number": 23,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "    return len(string)\n",
        "test": "assert     strlen('123')"
    },
    {
        "number": 24,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "    \n    if n == 1:\n        return 1\n    \n    factor = 2\n    while n % factor!= 0:\n        factor += 1\n    \n    return factor",
        "test": "assert     largest_divisor(4) == 2"
    },
    {
        "number": 25,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "    if n <= 1:\n        return []\n    elif n == 2 or n == 3:\n        return [2]\n    else:\n        return [i for i in range(1, n+1) if n%i == 0]\n",
        "test": "assert     factorize(0) == []"
    },
    {
        "number": 26,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "    output = []\n    for num in numbers:\n        if num not in output:\n            output.append(num)\n    return output\n",
        "test": "assert     remove_duplicates([]) == []"
    },
    {
        "number": 27,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "    return string.lower().swapcase()\n",
        "test": "assert     flip_case(\"\") == \"\""
    },
    {
        "number": 28,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate(['foo', 'bar', 'baz']) == 'foobarbaz'"
    },
    {
        "number": 29,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "    res = []\n    for s in strings:\n        if prefix in s:\n            res.append(s)\n    return res\n",
        "test": "assert     filter_by_prefix(\"1,2,3\", \",\")"
    },
    {
        "number": 30,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "    output = []\n    for num in l:\n        if num > 0:\n            output.append(num)\n    return output\n",
        "test": "assert     get_positive([1, 3, 5]) == [1, 3, 5]"
    },
    {
        "number": 31,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n",
        "test": "assert not is_prime(0)"
    },
    {
        "number": 32,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "    for i in range(len(xs)):\n        if xs[i]!= 0:\n            return xs[i]\n    return 0.0\n",
        "test": "assert     (find_zero([0.5, 0.5, 1]))"
    },
    {
        "number": 33,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "    li = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            li.append(l[i])\n    return l",
        "test": "assert     sort_third([]) == []"
    },
    {
        "number": 34,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "    return list(dict.fromkeys(l))\n",
        "test": "assert     unique([]) == []"
    },
    {
        "number": 35,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    min_value = l[0]\n    max_value = l[0]\n    for value in l:\n        if value < min_value:\n            min_value = value\n        if value > max_value:\n            max_value = value\n    return max_value\n",
        "test": "assert     max_element([1]) == 1"
    },
    {
        "number": 36,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 250,
        "answer": "    if n % 11 == 0:\n        return 0\n    elif n % 11 % 13 == 0:\n        return 1\n    else:\n        return n % 11 or n % 13 or 2\n",
        "test": "assert     fizz_buzz(2) == 2"
    },
    {
        "number": 37,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "    return sorted(l, key=lambda x: l.count(x), reverse=True)\n",
        "test": "assert sort_even([]) == []"
    },
    {
        "number": 38,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "    # split into groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     encode_cyclic(\"\") == \"\""
    },
    {
        "number": 39,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 290,
        "answer": "    i = 1\n    while True:\n        if (n % i) == 0:\n            return i\n        else:\n            i += 1\n",
        "test": "assert prime_fib(1) == 1"
    },
    {
        "number": 40,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "    # initialize empty triple_set, which keeps track of each unique triple\n    triple_set = set()\n    # iterate over all elements in the list\n    for i in l:\n        # check if i is a triple and it's a triple_set\n        if (type(i) is int) and (type(i) is not list):\n            # add it to the triple_set\n            triple_set.add(i)\n    # if the triple_set is empty, then the list is not a triple\n    if len(triple_set) == 0:\n        return False\n    # if the list is not empty, then we return True\n    return len(triple_set)!= 3\n",
        "test": "assert     triples_sum_to_zero([3, 4, 5]) == False"
    },
    {
        "number": 41,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "    \n    # Create a list of distances between the cars.\n    distances = [0.0] * n\n    # Set up a for loop to iterate over the distance list.\n    for i in range(len(distances)):\n        # The car that's moving right to left will have a greater distance to the car that's moving left to right.\n        if i == 0:\n            distances[i] = 1.0\n        # The car that's moving right to left will have a smaller distance to the car that's moving right to left.\n        elif i == 1:\n            distances[i] = 0.0\n        else:\n            # The car that's moving right to left will have a smaller distance to the car that's moving right to left.\n            distances[i] = abs(distances[i-1])\n    \n    # Compute the number of collisions.\n    return sum(distances)\n",
        "test": "assert     car_race_collision(100) == 1"
    },
    {
        "number": 42,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "    for i in l:\n        i+=1\n    return l\n",
        "test": "assert     incr_list([]) == []"
    },
    {
        "number": 43,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "    \"\"\"\n    Initialize a dictionary containing the pairs of integers with their sums and\n    its corresponding value.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    True\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    True\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    d = {}\n    for x in l:\n        if x in d:\n            d[x] += x\n        else:\n            d[x] = x\n    return d == {}",
        "test": "assert     pairs_sum_to_zero([-1,2,4]) == False"
    },
    {
        "number": 44,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 380,
        "answer": "    return str(x*(base**(len(str(x))))).zfill(len(str(base)))\n",
        "test": "assert     change_base(5, 1) == \"5\""
    },
    {
        "number": 45,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 260,
        "answer": "    return (a*h) / 2\n",
        "test": "assert     triangle_area(0, 0) == 0"
    },
    {
        "number": 46,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "    if n <= 2:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3)\n",
        "test": "assert     fib4(0) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "    n = len(l)\n    if n == 0:\n        return 0\n    else:\n        if n % 2 == 1:\n            return l[n//2]\n        else:\n            mid = n//2\n            return (l[mid-1] + l[mid])/2\n",
        "test": "assert         median([10, 20, 30, 40, 50]), 10.5"
    },
    {
        "number": 48,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "    text = text.lower()\n    start = 0\n    end = len(text) - 1\n    while start < end:\n        if text[start]!= text[end]:\n            return False\n        start += 1\n        end -= 1\n    return True\n",
        "test": "assert     is_palindrome(\"dog\") == False, \"is_palindrome(\\\"dog\\\") == False\""
    },
    {
        "number": 49,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 320,
        "answer": "    if n < p:\n        return pow(n, p-2, p)\n    else:\n        return pow(n, n%p, p)\n    \ndef modp_q(n: int, q: int):\n    \"\"\"Return 2^n modulo q (be aware of numerics).\n    >>> modp_q(3, 5)\n    3\n    >>> modp_q(1101, 101)\n    2\n    >>> modp_q(0, 101)\n    1\n    >>> modp_q(3, 11)\n    8\n    >>> modp_q(100, 101)\n    1\n    \"\"\"\n    if n < q:\n        return pow(n, q-2, q)\n    else:\n        return pow(n, n%q, q)\n",
        "test": "assert     modp(2**19, 2) == 1"
    },
    {
        "number": 50,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "    return \"\".join([chr((ord(ch) - 5 - ord(\"a\")) % 26) for ch in s])\n",
        "test": "assert     (decode_shift(\"\") == \"\"), \"incorrect shift\""
    },
    {
        "number": 51,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "    # Remove vowels from the string\n    vowels = set('aeiouAEIOU')\n    vowels_removed = vowels.difference(set(text))\n    new_text = ''\n    for char in text:\n        if char not in vowels_removed:\n            new_text += char\n    return new_text\n",
        "test": "assert     remove_vowels(\"\") == \"\""
    },
    {
        "number": 52,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([1, 2, 3, 4, 5], 2) == False"
    },
    {
        "number": 53,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "    return x + y\n",
        "test": "assert     add(2, 1) == 3, \"Expected add(2, 1) to return 3\""
    },
    {
        "number": 54,
        "max_answer_num": 29,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "    return (s0 == s1) == (len(s0) == len(s1))\n",
        "test": "assert     same_chars('abc', 'abd') == False"
    },
    {
        "number": 55,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n-1) + fib(n-2)\n",
        "test": "assert     fib(1) == 1"
    },
    {
        "number": 56,
        "max_answer_num": 27,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "    for char in brackets:\n        if char == '<':\n            continue\n        if char == '>':\n            return False\n    return True\n",
        "test": "assert correct_bracketing(\"\") == True"
    },
    {
        "number": 57,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "    d = []\n    for num in l:\n        if num not in d:\n            d.append(num)\n            if len(d) == 2:\n                return True\n    return False\n",
        "test": "assert     monotonic([2, 1, 2, 2, 2]) == True"
    },
    {
        "number": 58,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "    # set from sets\n    common_set = set()\n    # set from dict\n    set_d = set(l1)\n    # set from tuple\n    set_t = set(l2)\n    common_set.update(set_d)\n    common_set.update(set_t)\n    return list(common_set)",
        "test": "assert     common([], []) == []"
    },
    {
        "number": 59,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 260,
        "answer": "    def recursive_prime_factor(num: int):\n        if num <= 1:\n            return 0\n        if num % 2 == 0:\n            return 1\n        res = recursive_prime_factor(num//2)\n        res = min(res, (num-1)//num)\n        return res\n    factor = 1\n    while n % factor == 0:\n        factor += 1\n    return factor\n",
        "test": "assert     largest_prime_factor(11) == 2"
    },
    {
        "number": 60,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "    return n * (n + 1) // 2\n",
        "test": "assert     sum_to_n(0) == 0"
    },
    {
        "number": 61,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "    if brackets == \"\":\n        return True\n    count = 0\n    for char in brackets:\n        if char == \"(\":\n            count += 1\n        elif char == \")\":\n            if count == 0:\n                return False\n            count -= 1\n    return True\n",
        "test": "assert     correct_bracketing(\"\") == True"
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 290,
        "answer": "    return [x[1] for x in reversed(xs)]\n",
        "test": "assert     derivative([0,1,1,1,1,1]) == -2"
    },
    {
        "number": 63,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n",
        "test": "assert     fibfib(0) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "    vowels = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n    if s == \"\":\n        return 0\n    else:\n        return sum(c in vowels for c in s)\n",
        "test": "assert     vowels_count(\"\") == 0, \"The string can't be empty\""
    },
    {
        "number": 65,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 360,
        "answer": "    x = str(x)\n    if shift > len(x):\n        return x[shift:]\n    elif shift < len(x):\n        return x[:shift] + x[shift:]\n    return x\n",
        "test": "assert      circular_shift(9, -4) == '9'"
    },
    {
        "number": 66,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 260,
        "answer": "    digitSum = 0\n    for i in s:\n        if i.isupper():\n            digitSum += int(i)\n    return digitSum\n",
        "test": "assert     digitSum('0') == 0"
    },
    {
        "number": 67,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "    import collections\n    fruit_dic = collections.Counter(s)\n    result = 0\n    for key, value in fruit_dic.items():\n        if key == '0':\n            result = result + value\n        elif key == '1':\n            result = result + value\n        else:\n            result = result + value\n    return result\n",
        "test": "assert     fruit_distribution('',0) == 0"
    },
    {
        "number": 68,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "    if not arr:\n        return []\n    even_numbers = list(filter(lambda x: x % 2 == 0, arr))\n    if len(even_numbers) == 0:\n        return []\n    else:\n        result = even_numbers[-1]\n        for i in range(0, len(even_numbers) - 1, 2):\n            if result == 0:\n                return even_numbers[i:i + 2]\n            else:\n                result = result // 2\n        return [result, -1]\n",
        "test": "assert     pluck([]) == []"
    },
    {
        "number": 69,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "    lst.sort()\n    if len(lst) == 0:\n        return -1\n    if len(lst) == 1:\n        return lst[0]\n    # finding the best element\n    for i in range(len(lst)):\n        if lst[i] <= 0:\n            lst[i] = -1\n            break\n    return max(lst)\n",
        "test": "assert     search([1]) == 1"
    },
    {
        "number": 70,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "    lst.sort()\n    x = len(lst)\n    for i in range(1,x):\n        if lst[i] < lst[i-1]:\n            lst[i], lst[i-1] = lst[i-1], lst[i]\n        else:\n            break\n    return lst\n",
        "test": "assert     strange_sort_list([1]) == [1]"
    },
    {
        "number": 71,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "    import math\n    \n    d = math.sqrt((b ** 2) + (c ** 2))\n    if d > c:\n        return -1\n    elif d == c:\n        return (a + b) / 2\n    elif d == a:\n        return math.sqrt((b ** 2) + (c ** 2))\n    elif d == b:\n        return math.sqrt((a ** 2) + (c ** 2))\n    elif d == a + c:\n        return (2 * (a + b) * (b - a)) / 3\n    elif d == a + b + c:\n        return (2 * (a + b) * (b - a) * (b - a)) / 3\n    elif d == a + b * b + c * c:\n        return (2 * (a + b) * (b - a) * (b - a) * (b - a) * (b - a)) / 3\n    else:\n        return -1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     triangle_area(1, 1, 3) == -1, \"Triangle Area should be -1.0\""
    },
    {
        "number": 72,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "    if q[0] == q[-1]:\n        return True\n    else:\n        for i in range(1,len(q)):\n            if q[i] == q[i-1] and will_it_fly(q[:i]+q[i+1:],w):\n                return True\n        return False\n",
        "test": "assert     will_it_fly([1,2,3],5) == False"
    },
    {
        "number": 73,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "    if not arr: return 0\n    curr = arr[0]\n    count = 1\n    for i in range(1, len(arr)):\n        if arr[i]!= curr:\n            curr = arr[i]\n            count += 1\n    return count\n",
        "test": "assert smallest_change([]) == 0"
    },
    {
        "number": 74,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "    if len(lst1) < len(lst2):\n        return lst1\n    elif len(lst2) < len(lst1):\n        return lst2\n    return lst1 + lst2[:len(lst2) - len(lst1)]\n",
        "test": "assert     total_match([], ['a', 'e', 'l', 'o']) == []"
    },
    {
        "number": 75,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "    from itertools import combinations\n    multi_set = list(combinations(range(10), 3))\n    print(multi_set)\n    return a in multi_set\n",
        "test": "assert     not is_multiply_prime(0)"
    },
    {
        "number": 76,
        "max_answer_num": 22,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "    if n == 1:\n        return True\n    if n == 2:\n        return True if x == 2 else False\n    if n == 3:\n        return True if x == 3 else False\n    if n == 4:\n        return True if x == 4 else False\n    if n == 5:\n        return True if x == 5 else False\n    if n % 2 == 0 and x % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_simple_power(10, 1) == True"
    },
    {
        "number": 77,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 210,
        "answer": "    if a < 0:\n        a = -a\n    if a % 3 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     iscube(3) == True"
    },
    {
        "number": 78,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "    # if num is empty string\n    if num == \"\":\n        return 0\n    # if num is not string\n    if not isinstance(num, str):\n        return 0\n    # if num is not empty string\n    if len(num) == 0:\n        return 0\n    # if num is already a string\n    if len(num) == 1:\n        return 0\n    # to determine the number of digits\n    def digit(num):\n        # if num is not string\n        if not isinstance(num, str):\n            return 0\n        # if num is not empty string\n        if len(num) == 0:\n            return 0\n        # return number of digits\n        return len(num) - 1\n    # if num is string\n    if isinstance(num, str):\n        # to count the number of digits\n        num = num.replace(\" \", \"\")\n        num = num.replace(\".\", \"\")\n        num = num.replace(\",\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\"!\", \"\")\n        num = num.replace(\" \", \"\")\n        num = num.replace(\":\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\".\", \"\")\n        num = num.replace(\" \", \"\")\n        num = num.replace(\",\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\"!\", \"\")\n        num = num.replace(\" \", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\":\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\".\", \"\")\n        num = num.replace(\",\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\"!\", \"\")\n        num = num.replace(\" \", \"\")\n        num = num.replace(\":\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\".\", \"\")\n        num = num.replace(\",\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\"!\", \"\")\n        num = num.replace(\" \", \"\")\n        num = num.replace(\":\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\".\", \"\")\n        num = num.replace(\" \", \"\")\n        num = num.replace(\",\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\"!\", \"\")\n        num = num.replace(\" \", \"\")\n        num = num.replace(\":\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\".\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\",\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\"!\", \"\")\n        num = num.replace(\" \", \"\")\n        num = num.replace(\":\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\".\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\"!\", \"\")\n        num = num.replace(\" \", \"\")\n        num = num.replace(\",\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\".\", \"\")\n        num = num.replace(\",\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\"!\", \"\")\n        num = num.replace(\" \", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\".\", \"\")\n        num = num.replace(\",\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\".\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\" \", \"\")\n        num = num.replace(\",\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\".\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\" \", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\".\", \"\")\n    ",
        "test": "assert     hex_key(0) == 0"
    },
    {
        "number": 79,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "    return ''.join(f'{int(x):b}' for x in str(decimal))\n",
        "test": "assert     decimal_to_binary(1) == \"1\""
    },
    {
        "number": 80,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "    \n    # Write your code here.\n    l = len(s)\n    if l < 3 or l > len(set(s)):\n        return False\n    else:\n        for i in range(3):\n            if s[i]!= s[i+1] and s[i]!= s[i+2]:\n                return False\n    return True\n",
        "test": "assert     not     is_happy( \"a\" ), \"Test 2 failed\""
    },
    {
        "number": 81,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 220,
        "answer": "    grade_grade = []\n    # For all the grades\n    for grade in grades:\n        # Let the number of the student be less than 5\n        if grade <= 4.0:\n            # Add the letter grade to the list\n            grade_grade.append(grade)\n        # And let the number of the student be more than 5\n        elif grade > 5.0:\n            # Add the letter grade to the list\n            grade_grade.append(grade)\n        # And let the number of the student be between 3.5 and 3.9\n        elif grade > 3.9:\n            # Add the letter grade to the list\n            grade_grade.append(grade)\n        # And let the number of the student be between 3.5 and 3.9\n        elif grade > 3.5:\n            # Add the letter grade to the list\n            grade_grade.append(grade)\n        # And let the number of the student be between 3.0 and 3.9\n        elif grade > 3.0:\n            # Add the letter grade to the list\n            grade_grade.append(grade)\n        # And let the number of the student be between 2.7 and 2.9\n        elif grade > 2.7:\n            # Add the letter grade to the list\n            grade_grade.append(grade)\n        # And let the number of the student be between 2.3 and 2.9\n        elif grade > 2.3:\n            # Add the letter grade to the list\n            grade_grade.append(grade)\n        # And let the number of the student be between 2.0 and 2.9\n        elif grade > 2.0:\n            # Add the letter grade to the list\n            grade_grade.append(grade)\n        # And let the number of the student be greater than 0.7\n        elif grade > 0.7:\n            # Add the letter grade to the list\n            grade_grade.append(grade)\n        # And let the number of the student be greater than 0.0\n        elif grade > 0.0:\n            # Add the letter grade to the list\n            grade_grade.append(grade)\n    return grade_grade\n",
        "test": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0]) == [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0]"
    },
    {
        "number": 82,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 230,
        "answer": "    return len(string) % 2 == 0\n",
        "test": "assert     prime_length(\"six\") == False"
    },
    {
        "number": 83,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "    count = 0\n    for i in range(1, n + 1):\n        if i % 10 == 0:\n            count += 1\n        else:\n            break\n    return count\n",
        "test": "assert     starts_one_ends(0) == 0"
    },
    {
        "number": 84,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 230,
        "answer": "    \n    # 0 bit\n    if N == 0:\n        return \"0\"\n    \n    # 1 bit\n    if N < 2:\n        return str(N)\n    \n    # get all of the bits\n    a = \"\"\n    while N > 0:\n        a += str(N % 2)\n        N //= 2\n        \n    # return the final result\n    return a\n",
        "test": "assert     solve(0) == '0'"
    },
    {
        "number": 85,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "    new = []\n    odd_index = 0\n    even_index = 0\n    for item in lst:\n        if odd_index % 2 == 0:\n            new.append(item)\n            even_index += 1\n        else:\n            new.append(item)\n            odd_index += 1\n    return new\n",
        "test": "assert     add([]) == [], \"Empty list should be returned\""
    },
    {
        "number": 86,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "    # Your code here\n    return''.join(s.split()).replace(' ','')",
        "test": "assert     (anti_shuffle('') == \"\")"
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "    if lst == []:\n        return []\n",
        "test": "assert     get_row(matrix, 4) == [3, 3], \"get_row(matrix, 4) failed\""
    },
    {
        "number": 88,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 260,
        "answer": "    # TODO\n    def sort(array):\n        for i in range(len(array)):\n            for j in range(len(array) - 1):\n                if array[j] + array[j + 1] == sum(array[j:j + 2]):\n                    array[j], array[j + 1] = array[j + 1], array[j]\n                else:\n                    break\n        return array\n    return sort(array)",
        "test": "assert     sort_array([2,2,2,2,2,2,2]) == [2,2,2,2,2,2,2]"
    },
    {
        "number": 89,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "    # YOUR CODE HERE\n    import string\n    a=s.lower()\n    temp=[]\n    for i in a:\n        if i in string.ascii_lowercase:\n            temp.append(i)\n    temp_str=''.join(temp)\n    c=temp_str\n    return(c)\n",
        "test": "assert     (encrypt(\"a\") == \"a\")"
    },
    {
        "number": 90,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 230,
        "answer": "    \n    if len(lst) == 1:\n        return lst[0]\n    \n    if len(lst) == 2:\n        return lst[0]\n    \n    if len(lst) == 3:\n        return lst[1]\n    \n    if len(lst) == 4:\n        return lst[2]\n    \n    return next_smallest(lst[1:])\n",
        "test": "assert     next_smallest([4, -1, 4, 5, -3, 8, 9, -4, 8]), 'Negative elements'"
    },
    {
        "number": 91,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "    bored_count = 0\n    for i in S.split(\".\"):\n        if \"I\" in i:\n            bored_count += 1\n    return bored_count\n",
        "test": "assert     is_bored(\"hello\") == False, \"is_bored() with invalid arguments: 'hello'\""
    },
    {
        "number": 92,
        "max_answer_num": 24,
        "max_test_num": 4,
        "total_product": 380,
        "answer": "    if x > y or y > z:\n        return False\n    if z!= int(z):\n        return False\n    if x!= int(x):\n        return False\n    return True\n",
        "test": "assert     any_int(1, 1, 2) == True"
    },
    {
        "number": 93,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "    vowels = 'AEIOU'\n    encoded = ''\n    for letter in message:\n        if letter in vowels:\n            encoded += letter.swapcase()\n        else:\n            encoded += letter\n    return encoded\n    \n",
        "test": "assert     encode('') == ''"
    },
    {
        "number": 94,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "    x = 0\n    for i in range(len(lst)):\n        if lst[i]>0:\n            x = x+lst[i]\n    return x\n",
        "test": "assert     skjkasdkd([]) == 0"
    },
    {
        "number": 95,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "    for i in dict:\n        if isinstance(dict[i], str) and dict[i].lower()!= dict[i].upper():\n            return False\n    return True\n",
        "test": "assert     check_dict_case({\"a\":1, \"A\":2, \"a\":3, \"A\":4}) == True"
    },
    {
        "number": 96,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 350,
        "answer": "    sieve = [True for _ in range(n+1)]\n    primes = []\n    def is_prime(num):\n        if num == 1:\n            return False\n        if num == 2 or num % 2 == 0:\n            return False\n        for i in range(3, int(num**0.5)+2, 2):\n            if not sieve[i]:\n                continue\n            sieve[i*i:num:i] = [False for _ in range(num)]\n            if i*i > num:\n                break\n            sieve[num] = False\n        return num in primes\n    for n in range(2, n+1):\n        if is_prime(n):\n            primes.append(n)\n    return primes\n",
        "test": "assert     count_up_to(0) == []"
    },
    {
        "number": 97,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "    return a * b\n",
        "test": "assert     multiply(1, 1) == 1"
    },
    {
        "number": 98,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "    \n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count\n",
        "test": "assert     count_upper(\"\") == 0"
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 280,
        "answer": "    try:\n        return int(value)\n    except ValueError:\n        if value.lower() in '-':\n            return int(value.lower()[:-1])\n        return closest_integer(value[:-1])\n",
        "test": "assert     closest_integer(float(\"0\")) == 0"
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "    a=[]\n    a.append(n)\n    if n%2==1:\n        a.append(n/2)\n    else:\n        a.append(n/2+1)\n    return a\n",
        "test": "assert     make_a_pile(3) == 3"
    },
    {
        "number": 101,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "    words = s.split(',')\n    return words\n",
        "test": "assert     words_string('a') == ['a']"
    },
    {
        "number": 102,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "    max_num = x\n    for num in range(x, y + 1):\n        if num % 2 == 0:\n            max_num = max(max_num, num)\n    return max_num\n",
        "test": "assert     choose_num(10, 10) == 10"
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "    \n    # raise NotImplementedError\n    if n < m:\n        return -1\n    \n    ret = str(bin(round(int(n) + int(m))).lstrip('0b'))\n    return ret[2:]\n",
        "test": "assert     rounded_avg(-1, 5) == -1"
    },
    {
        "number": 104,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "    num = []\n    for n in x:\n        n = str(n)\n        if n[0] == '0':\n            continue\n        if n[-1] == '0':\n            continue\n        if n[-2:-1] == '0':\n            continue\n        if n[-2:] == '0':\n            continue\n        num.append(int(n))\n    num.sort()\n    return num\n",
        "test": "assert     unique_digits([]) == []"
    },
    {
        "number": 105,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 250,
        "answer": "    arr = sorted(arr)\n    return arr\n",
        "test": "assert     by_length([]) == []"
    },
    {
        "number": 106,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "    if n==0:\n        return []\n    elif n==1:\n        return [1]\n    else:\n        return [1]+[x*f(n-1) for x in f(n-1)]\n",
        "test": "assert     f(1) == [1]"
    },
    {
        "number": 107,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 240,
        "answer": "    count_even = 0\n    count_odd = 0\n    for num in range(1, n + 1):\n        if num % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    if count_even % 2 == 0:\n        return (count_even, count_odd)\n    else:\n        return (count_odd, count_even)",
        "test": "assert     even_odd_palindrome(2) == (1, 1)"
    },
    {
        "number": 108,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "    counter = 0\n    for i in range(len(arr)):\n        num = 0\n        for j in range(len(arr)):\n            num += arr[j]**i\n        if num >= 10:\n            counter += 1\n    return counter\n",
        "test": "assert         count_nums([]) == 0"
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 240,
        "answer": "    \n    # TODO: Write your code here\n    for i in range(len(arr)):\n        arr[i] = random.randint(1, 10)\n        \n    if check_sorted(arr) == True:\n        return True\n    else:\n        return False\n    ",
        "test": "assert     move_one_ball([1,2,3,3,3,3,3,1]) == False"
    },
    {
        "number": 110,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "    if not lst1:\n        return \"NO\"\n    if not lst2:\n        return \"NO\"\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n    res = []\n    for i in range(len(lst2)):\n        if lst1[i] % 2 == lst2[i] % 2:\n            res.append(lst2[i])\n    if res:\n        return \"YES\"\n    return \"NO\"\n",
        "test": "assert     exchange([2,4,5], [1,3,6,7]) == \"NO\""
    },
    {
        "number": 111,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "    \n    letter_dict = {}\n    for letter in test:\n        if letter in letter_dict:\n            letter_dict[letter] += 1\n        else:\n            letter_dict[letter] = 1\n    \n    return letter_dict\n",
        "test": "assert     histogram(\"xyz\") == {\"x\": 1, \"y\": 1, \"z\": 1}"
    },
    {
        "number": 112,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "    # check palindrome by reversing the string\n    reverse = ''.join(reversed(s))\n    if reverse == c:\n        return (s,True)\n    else:\n        return (s,False)\n",
        "test": "assert         reverse_delete('abcde', 'e') == ('abcde', False)"
    },
    {
        "number": 113,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 260,
        "answer": "    from collections import Counter\n    c = Counter(lst)\n    res = []\n    for i in range(len(c)):\n        if c[i] % 2!= 0:\n            res.append(i)\n    return res\n",
        "test": "assert     odd_count([]) == []"
    },
    {
        "number": 114,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 210,
        "answer": "    if not nums:\n        return 0\n    n = len(nums)\n    minSum = float('inf')\n    totalSum = 0\n    left = 0\n    for right in range(n):\n        totalSum += nums[right]\n        while totalSum >= 0 and right >= left:\n            totalSum -= nums[left]\n            left += 1\n        minSum = min(minSum, right-left)\n    return minSum if minSum >= 0 else 0\n",
        "test": "assert     minSubArraySum([]) == 0"
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "    # memoization solution\n    # time complexity : O(2^n)\n    # space complexity : O(n)\n    def lower_buckets(row, col):\n        if row == 0 or col == 0:\n            return 0\n        if grid[row][col] == 0:\n            return 0\n",
        "test": "assert     max_fill("
    },
    {
        "number": 116,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "    result = []\n    for num in arr:\n        if num:\n            result.append(num)\n        else:\n            result.append(-num)\n    return result\n",
        "test": "assert     sort_array([]) == []"
    },
    {
        "number": 117,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "    result = []\n    if n == 0:\n        return []\n    if s == \"\":\n        return result\n    for letter in s:\n        if letter not in s[:n]:\n            result.append(letter)\n    return result\n",
        "test": "assert     select_words('', 0) == [], \"select_words should return an empty list\""
    },
    {
        "number": 118,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "    left_index = 0\n    right_index = len(word) - 1\n    # for vowel in word:\n    #     if word[0]!= word[-1]:\n    #         left_index += 1\n    #     else:\n    #         break\n    #     if left_index >= len(word):\n    #         right_index -= 1\n    #     elif right_index < 0:\n    #         right_index += 1\n    \n    word = word.split()\n    if word[0] == word[-1]:\n        return \"\"\n    left_index_last = 0\n    right_index_last = len(word) - 1\n    for i in range(len(word)):\n        left_index_last += 1\n        right_index_last -= 1\n        if word[i] == \"e\":\n            left_index_last += 1\n            right_index_last -= 1\n        elif word[i] == \"a\":\n            if word[i] == word[i-1]:\n                left_index_last -= 1\n            else:\n                left_index_last += 1\n        elif word[i] == \"o\":\n            if word[i-1] == word[i]:\n                right_index_last += 1\n            else:\n                right_index_last -= 1\n        elif word[i] == \"y\":\n            if word[i-1] == word[i-2]:\n                right_index_last -= 1\n            else:\n                right_index_last += 1\n        else:\n            return \"\"\n    if word[-1] == \"e\":\n        left_index_last -= 1\n    elif word[-1] == \"a\":\n        right_index_last -= 1\n    elif word[-1] == \"o\":\n        right_index_last -= 1\n    elif word[-1] == \"y\":\n        left_index_last -= 1\n    else:\n        return \"\"\n    \n    return word[left_index_last+1:right_index_last]\n    \ndef main():\n    word = input().strip()\n    print(get_closest_vowel(word))\n",
        "test": "assert get_closest_vowel(\"AA\") == \"\""
    },
    {
        "number": 119,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 240,
        "answer": "    def is_ok(lst):\n        if len(lst) < 2 or len(lst[0]) < len(lst[1]):\n            return False\n        elif len(lst[0]) == len(lst[1]):\n            return all(lst[0][i] == lst[1][i] for i in range(len(lst[0])))\n        else:\n            return False\n        return True\n    for lst in (['(()(),)', ')()'], ['(())', '())']):\n        if not is_ok(lst): return 'No'\n    return 'Yes'\n",
        "test": "assert     match_parens(['()()()', '()()()']), 'Yes'"
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "    # approach 1\n    # time complexity: O(nlogk)\n    # space complexity: O(k)\n    if not arr:\n        return []\n    \n    heap = []\n    result = []\n    for i in range(len(arr)):\n        heapq.heappush(heap, (-arr[i], i))\n",
        "test": "assert "
    },
    {
        "number": 121,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "    \n    odd_sum = 0\n    for i in range(len(lst)):\n        if i%2==0:\n            odd_sum += lst[i]\n    return odd_sum\n",
        "test": "assert     solution([]) == 0"
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 220,
        "answer": "    s=0\n    for i in arr:\n        s+=int(i[:k])\n    return s\n",
        "test": "assert     add_elements([7, 8, 9, 0, 1, 2, 3, 4], 2) == 13, \"add_elements failed\""
    },
    {
        "number": 123,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "    res = []\n    prev = 1\n    while prev <= n:\n        if prev % 2 == 0:\n            res.append(prev)\n            prev *= 3\n        else:\n            res.append(prev)\n            prev = prev + 1\n    return res\n",
        "test": "assert     get_odd_collatz(1) == [1]"
    },
    {
        "number": 124,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "    return True if len(date.split('-')) == 3 else False\n",
        "test": "assert     valid_date(\"10-12-2000-01\") == False"
    },
    {
        "number": 125,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "    if type(txt) is not str:\n        raise TypeError('txt must be a string')\n    return [word.strip() for word in txt.split(',') if word.strip()]\n",
        "test": "assert     split_words('') == []"
    },
    {
        "number": 126,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "    n = len(lst)\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] > lst[j]:\n                return False\n    return True\n",
        "test": "assert     is_sorted([1,5,6,6,5,5,1,5,1,5,6]) == False"
    },
    {
        "number": 127,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 240,
        "answer": "    \n    if interval1[0] >= interval2[0] and interval1[1] <= interval2[1]:\n        return \"YES\"\n    elif interval1[0] <= interval2[0] and interval1[1] >= interval2[1]:\n        return \"NO\"\n    else:\n        return \"NO\"\n    ",
        "test": "assert     intersection( (1, 2), (1, 4) ) == \"YES\""
    },
    {
        "number": 128,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 270,
        "answer": "    # Run through each num, multiply by sign if it is + or - and store result in new var\n    result = 1\n    for num in arr:\n        if num > 0:\n            result = result * num\n        else:\n            result = result * -1\n    return result\n",
        "test": "assert     prod_signs([-1,0,1]) == 1, \"First test passed!\""
    },
    {
        "number": 129,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "    # NOTE: it is O(n*n), where n is the number of rows and columns\n    if not grid:\n        return []\n",
        "test": "assert     minPath([], 1) == []"
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "    # if n == 1, return the first number (1)\n    if n == 1:\n        return [1]\n    # recur for the n\n    # define for each number that will be the first n + 1 numbers\n    # the first number in the Tribonacci sequence is the last number of the sequence\n    # the last number of the sequence is the first number of the sequence\n    # the first number in the sequence is the last number of the sequence\n    # the last number of the sequence is the first number of the sequence\n    # for each number\n    # add the current number to the list of the first n + 1 numbers\n    # the last number of the sequence is the last number of the sequence\n    # the last number of the sequence is the first number of the sequence\n    # the first number of the sequence is the last number of the sequence\n    # the last number of the sequence is the first number of the sequence\n    def recur(n):\n        \"\"\"recur for n, where n is a non-negative integer\n        return the first n + 1 numbers\"\"\"\n        result = [1, n]\n        if n == 1:\n            return result\n        for i in range(2, n + 1):\n            result.append(result[-1] + result[-2])\n        return result\n    return recur(n)\n",
        "test": "assert "
    },
    {
        "number": 131,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "    while n:\n        if n % 2 == 1:\n            n //= 10\n        else:\n            n //= 10\n    return n\n",
        "test": "assert     digits(0) == 0"
    },
    {
        "number": 132,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "    return any(any([i.isdigit() or i == '.' for i in string]) for i in string)\n",
        "test": "assert     is_nested('[[]]') == False"
    },
    {
        "number": 133,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "    # pylint: disable=too-many-statements\n    total = 0\n    for n in lst:\n        total = total + pow(n, 2)\n    return round(total)\n",
        "test": "assert     sum_squares([]) == 0"
    },
    {
        "number": 134,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "    # return txt.rfind(\" \") == -1 or txt.rfind(\" \") >= 0\n    return txt.rfind(\" \") == 0 and txt.rfind(\" \") == len(txt) - 1\n",
        "test": "assert     check_if_last_char_is_a_letter(\"Hello!\") == False"
    },
    {
        "number": 135,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "    max_index = -1\n    for i in range(len(arr)):\n        if arr[i] > arr[max_index] and (arr[i] - arr[max_index] >= 2):\n            max_index = i\n    return max_index\n",
        "test": "assert     can_arrange([]) == -1"
    },
    {
        "number": 136,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "    def _largest_smallest_integers(lst):\n        '''\n        Return a tuple (a, b), where a > b\n        '''\n        largest = None\n        smallest = None\n        for i in range(len(lst)):\n            if largest is None or lst[i] > largest:\n                largest = lst[i]\n            if smallest is None or lst[i] < smallest:\n                smallest = lst[i]\n        return (largest, smallest)\n    \n    if len(lst) == 0:\n        return (None, None)\n    else:\n        return _largest_smallest_integers(lst)\n",
        "test": "assert largest_smallest_integers([0]), ('0', 0)"
    },
    {
        "number": 137,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "    if type(a) == type(b):\n        if isinstance(a, str) or isinstance(a, float):\n            if isinstance(b, str) or isinstance(b, float):\n                if b == a:\n                    return a\n                else:\n                    return b\n            else:\n                return b\n        elif isinstance(a, float) or isinstance(a, int):\n            if isinstance(b, float) or isinstance(b, int):\n                if a == b:\n                    return a\n                else:\n                    return b\n            else:\n                return b\n        else:\n            return b\n    else:\n        return b\n",
        "test": "assert     compare_one(4, 6) == 6"
    },
    {
        "number": 138,
        "max_answer_num": 26,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "    if n < 2:\n        return False\n    else:\n        sum = n\n        n = n - sum\n        return (n % 2 == 0) and (n % 4 == 0)\n",
        "test": "assert     is_equal_to_sum_even(1) == False"
    },
    {
        "number": 139,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "    numerator = 1\n    for i in range(1, n + 1):\n        numerator *= i\n    return numerator\n",
        "test": "assert     special_factorial(0) == 1"
    },
    {
        "number": 140,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "    split_text = text.split(' ')\n    new_split_text = []\n    for elem in split_text:\n        new_split_text.append(elem.replace(' ', '_'))\n    new_split_text =''.join(new_split_text)\n    return new_split_text\n",
        "test": "assert     fix_spaces('') == ''"
    },
    {
        "number": 141,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 220,
        "answer": "    if file_name[0] == '.':\n        print(\"The file's name should not contain dots\")\n        return 'No'\n    if len(file_name) < 3:\n        print(\"The file's name should have at least three digits\")\n        return 'No'\n    if file_name[0].isdigit() == False:\n        print(\"The file's name should start with a latin alphapet letter\")\n        return 'No'\n    if file_name[-1] not in ['txt', 'exe', 'dll']:\n        print(\"The file's name should end with 'txt' or 'exe' or 'dll'\")\n        return 'No'\n    print(\"The file's name should have exactly one dot '.'\")\n    return 'No'",
        "test": "assert     file_name_check('123.txt') == 'No'"
    },
    {
        "number": 142,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "    for i in lst:\n        if i % 3 == 0 and i % 4!= 0:\n            i = i ** 3\n        elif i % 4 == 0 and i % 3!= 0:\n            i = i ** 4\n        else:\n            pass\n    return i\n",
        "test": "assert     sum_squares([0,0,0,0,0,0]) == 0"
    },
    {
        "number": 143,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "    s = sentence.split()\n    return \" \".join(s)\n",
        "test": "assert     words_in_sentence(\"abcdef\") == \"abcdef\""
    },
    {
        "number": 144,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "    return(str(int(x) * int(n))) in str(n)\n",
        "test": "assert     simplify(\"2\", 2) == False"
    },
    {
        "number": 145,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "    # print('*******************')\n    # print(nums)\n    # print(type(nums))\n    nums = sorted(nums)\n    # print(nums)\n    # print(type(nums))\n    return nums\n",
        "test": "assert     order_by_points([]) == []"
    },
    {
        "number": 146,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "    count = 0\n    for i in range(len(nums)):\n        if nums[i] < 10:\n            if (nums[i] % 2 == 0) and (nums[i] > 0):\n                count += 1\n            elif (nums[i] % 2 == 1) and (nums[i] > 0):\n                count += 1\n        elif nums[i] % 2!= 0:\n            if (nums[i] % 2 == 1) and (nums[i] > 0):\n                count += 1\n            elif (nums[i] % 2 == 0) and (nums[i] > 0):\n                count += 1\n    return count\n",
        "test": "assert     specialFilter([12,56,12,8,9,10,9,56,56,9]) == 4, \"should return 4\""
    },
    {
        "number": 147,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "    \n    a = [i * i - i + 1 for i in range(n)]\n    \n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    cnt += 1\n                    \n    return cnt\n",
        "test": "assert     get_max_triples(2) == 0"
    },
    {
        "number": 148,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "    return planet1, planet2\n",
        "test": "assert     bf('Mercury','Venus') == ('Mercury', 'Venus'), 'Error: Mercury and Venus must be correct planet names'"
    },
    {
        "number": 149,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    lst.sort()\n    return lst\n",
        "test": "assert     sorted_list_sum([]) == []"
    },
    {
        "number": 150,
        "max_answer_num": 22,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "    if n == 1:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        return x_or_y(n - 1, x, y)\n",
        "test": "assert     x_or_y(0, 0, 0) == 0"
    },
    {
        "number": 151,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "    total = 0\n    for value in lst:\n        if value % 2!= 0:\n            total += value**2\n    return total\n",
        "test": "assert     double_the_difference([]) == 0, 'Double the difference function is not correct'"
    },
    {
        "number": 152,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "    return (list(map(abs, list(map(lambda x,y: x-y,guess,game))))).index(0)\n    #    a, b = max(map(lambda x, y: abs(x - y), guess, game)), max(map(lambda x, y: abs(x - y), guess, game)))\n    #    return a if a < b else b\n",
        "test": "assert     compare([15, 9, 9], [15, 9, 8]) == 0"
    },
    {
        "number": 153,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "    best_extension = ''\n    for extension in extensions:\n        cap = len(extension.upper())\n        sm = len(extension.lower())\n        if cap <= sm:\n            best_extension = extension\n    return best_extension\n",
        "test": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']), 'Weakest extension names are not satisfied.'"
    },
    {
        "number": 154,
        "max_answer_num": 30,
        "max_test_num": 4,
        "total_product": 390,
        "answer": "    for i in range(len(a)):\n        if a[i:len(b)] in b:\n            return True\n    return False\n",
        "test": "assert     cycpattern_check(\"anaconda\", \"anaconda\") == True"
    },
    {
        "number": 155,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "    #init\n    even = 0\n    odd = 0\n    #iterate over the digits\n    for i in range(1, num):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    #return a tuple\n    return (even, odd)\n",
        "test": "assert     even_odd_count(1) == (0, 0)"
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 320,
        "answer": "    # Step 1\n    # The term is the sum of the digits in the given number.\n    # (e.g. 23 -> \"II\" instead of \"II\")\n    # The next term is the digit 1.\n    # (e.g. 1 -> \"I\" instead of \"I\")\n    # The next term is the digit 2.\n    # (e.g. 2 -> \"X\" instead of \"X\")\n    # The next term is the digit 3.\n    # (e.g. 3 -> \"XVI\" instead of \"XVI\")\n    # The next term is the digit 4.\n    # (e.g. 4 -> \"IX\" instead of \"IX\")\n    # The next term is the digit 5.\n    # (e.g. 5 -> \"IV\" instead of \"IV\")\n    # The next term is the digit 6.\n    # (e.g. 6 -> \"IVX\" instead of \"IVX\")\n    # The next term is the digit 7.\n    # (e.g. 7 -> \"V\" instead of \"V\")\n    # The next term is the digit 8.\n    # (e.g. 8 -> \"IX\" instead of \"IX\")\n    # The next term is the digit 9.\n    # (e.g. 9 -> \"IV\" instead of \"IV\")\n    # The next term is the digit 10.\n    # (e.g. 10 -> \"XI\" instead of \"XI\")\n    # The next term is the digit 11.\n    # (e.g. 11 -> \"X\" instead of \"X\")\n    # The next term is the digit 12.\n    # (e.g. 12 -> \"VX\" instead of \"VX\")\n    # The next term is the digit 13.\n    # (e.g. 13 -> \"IX\" instead of \"IX\")\n    # The next term is the digit 14.\n    # (e.g. 14 -> \"XVI\" instead of \"XVI\")\n    # The next term is the digit 15.\n    # (e.g. 15 -> \"IXVI\" instead of \"IXVI\")\n    # The next term is the digit 16.\n    # (e.g. 16 -> \"XIV\" instead of \"XIV\")\n    # The next term is the digit 17.\n    # (e.g. 17 -> \"I\" instead of \"I\")\n    # The next term is the digit 18.\n    # (e.g. 18 -> \"II\" instead of \"II\")\n    # The next term is the digit 19.\n    # (e.g. 19 -> \"X\" instead of \"X\")\n    # The next term is the digit 20.\n    # (e.g. 20 -> \"VI\" instead of \"VI\")\n    # The next term is the digit 21.\n    # (e.g. 21 -> \"IV\" instead of \"IV\")\n    # The next term is the digit 22.\n    # (e.g. 22 -> \"VX\" instead of \"VX\")\n    # The next term is the digit 23.\n    # (e.g. 23 -> \"IX\" instead of \"IX\")\n",
        "test": "assert"
    },
    {
        "number": 157,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "    # Build the equations\n    def eq(a, b, c):\n        if a > b and a > c:\n            return True\n        elif a > b and c > a:\n            return True\n        elif b > c and b > a:\n            return True\n        elif b > c and c > a:\n            return True\n        else:\n            return False\n    # Check if the equations are satisfied\n    if eq(a, b, c):\n        return True\n    elif eq(b, c, a):\n        return True\n    else:\n        return False\n",
        "test": "assert     right_angle_triangle(3,3,1) == False"
    },
    {
        "number": 158,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "    max_char = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = 0\n        for char in word:\n            if char.isalpha():\n                unique_chars += 1\n        if unique_chars > max_char:\n            max_char = unique_chars\n            max_word = word\n    return max_word\n",
        "test": "assert     find_max([\"hello\"]) == \"hello\""
    },
    {
        "number": 159,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "    if remaining < need:\n        return [ need, remaining ]\n    \n    total_eaten_carrots = number * need\n    remaining_carrots = remaining\n    \n    if remaining_carrots < need:\n        remaining_carrots = need\n        \n    if remaining_carrots < number:\n        total_eaten_carrots = number\n        remaining_carrots = remaining\n        \n    if remaining_carrots < 0:\n        remaining_carrots = 0\n        \n    total_eaten_carrots += remaining_carrots\n    \n    return [ total_eaten_carrots, remaining_carrots ]\n",
        "test": "assert     eat(500, 100, 50) == [100, 50]"
    },
    {
        "number": 160,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "    result = 0\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '/':\n            result /= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n    return result\n",
        "test": "assert         do_algebra([1,3,4,5], [3,5,6,8,9]) == 0"
    },
    {
        "number": 161,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    if not s:\n        return s\n",
        "test": "assert     solve(\"\") == \"\""
    },
    {
        "number": 162,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "    if not text:\n        return None\n    \n    if len(text) % 16 == 0:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n    else:\n        return None\n",
        "test": "assert     string_to_md5('') is None"
    },
    {
        "number": 163,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "    output = []\n    for i in range(b - a + 1):\n        output.append(a + i)\n    return output\n",
        "test": "assert     generate_integers(1, 0) == []"
    }
]