[
    {
        "number": 0,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "    return bool(sum(numbers) - threshold <= sum(numbers) + threshold)\n",
        "test": "assert     has_close_elements([1, 3, 2, 4], -1) == False",
        "num_ids": 1411
    },
    {
        "number": 1,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 350,
        "answer": "    groups = []\n    stack = []\n    for char in paren_string:\n        if char in ['(', ')', '{', '}']:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                while stack[-1]!= '(':\n                    groups.append(''.join(stack).strip('()()[]'))\n                    stack.pop()\n            elif char == '}':\n                while stack[-1]!= '{':\n                    groups.append(''.join(stack).strip('{()}'))\n                    stack.pop()\n            elif char == ')':\n                while stack[-1]!= '(':\n                    groups.append(''.join(stack).strip('()()[]'))\n                    stack.pop()\n        else:\n            groups.append(char)\n    return groups\n",
        "test": "assert         separate_paren_groups(\"((()()))\") == []",
        "num_ids": 2223
    },
    {
        "number": 2,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 380,
        "answer": "    decimal_number = int(math.trunc(number))\n    return decimal_number\n",
        "test": "assert     truncate_number(0) == 0",
        "num_ids": 1006
    },
    {
        "number": 3,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "    return sum(operations[:-1]) <= 0\n",
        "test": "assert     below_zero([0]) == True",
        "num_ids": 1551
    },
    {
        "number": 4,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 230,
        "answer": "    return sum(numbers)/len(numbers)\n",
        "test": "assert     mean_absolute_deviation([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) == 0",
        "num_ids": 2127
    },
    {
        "number": 5,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "    return [n + delimeter for n in numbers]\n",
        "test": "assert     intersperse([],'') == []",
        "num_ids": 1089
    },
    {
        "number": 6,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "    parens = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            parens.append(1)\n        elif paren_string[i] == ')':\n            if len(parens) > 0:\n                parens.pop()\n            else:\n                return []\n    return parens\n",
        "test": "assert     parse_nested_parens('') == [], f\"parse_nested_parens failed\"",
        "num_ids": 3367
    },
    {
        "number": 7,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "    filtered_strings = []\n    for s in strings:\n        if s.startswith(substring):\n            filtered_strings.append(s)\n    return filtered_strings\n",
        "test": "assert     filter_by_substring([\"hello\", \"world\", \"goodbye\"], \"g\") == [\"goodbye\"]",
        "num_ids": 1423
    },
    {
        "number": 8,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    else:\n        return (sum(numbers), len(numbers))\n",
        "test": "assert     sum_product([]) == (0,1)",
        "num_ids": 990
    },
    {
        "number": 9,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 260,
        "answer": "    if len(numbers) == 0:\n        return []\n    l = len(numbers)\n    if l == 1:\n        return numbers\n    m = 0\n    for i in range(0, l - 1):\n        if numbers[i] > numbers[i + 1]:\n            m = numbers[i]\n            numbers[i] = numbers[i + 1]\n            numbers[i + 1] = m\n    return numbers\n",
        "test": "assert         rolling_max([]) == []",
        "num_ids": 1590
    },
    {
        "number": 10,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "    string = string.lower()\n    if len(string) < 3:\n        return string\n",
        "test": "assert     is_palindrome('abc') == False",
        "num_ids": 1373
    },
    {
        "number": 11,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "    c = ''\n    for i in range(len(a)):\n        c += bin(ord(a[i]) ^ ord(b[i]))[2:]\n    return c\n",
        "test": "assert     string_xor(\"0\", \"0\") == \"0\"",
        "num_ids": 2160
    },
    {
        "number": 12,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 290,
        "answer": "    l = len(strings)\n    if l == 0:\n        return None\n    else:\n        return max(strings, key=len)\n",
        "test": "assert     longest([\"banana\", \"b\", \"a\", \"apple\"]) == \"banana\"",
        "num_ids": 1182
    },
    {
        "number": 13,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "    \n    if a < b:\n        greatest = a\n    else:\n        greatest = b\n    \n    for i in range(2, greatest):\n        if ((a % i) == 0) and ((b % i) == 0):\n            greatest = i\n    \n    return greatest\n",
        "test": "assert         greatest_common_divisor(1, 2) == 1",
        "num_ids": 1044
    },
    {
        "number": 14,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "    # convert string to string of letters\n    return sorted(list(set(string) & set(string[::-1])))\n",
        "test": "assert     all_prefixes(\"\") == []",
        "num_ids": 2468
    },
    {
        "number": 15,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "    assert n >= 0, 'n must be non-negative'\n    \n    s = str(n)\n    for _ in range(n):\n        s +=''\n    return s\n",
        "test": "assert     string_sequence(0) == '0'",
        "num_ids": 1878
    },
    {
        "number": 16,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "    distinct_characters = {}\n    for char in string:\n        distinct_characters[char] = string.count(char)\n    return len(distinct_characters)\n",
        "test": "assert     count_distinct_characters(\"abc\") == 3",
        "num_ids": 2782
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 250,
        "answer": "    music = []\n    for char in music_string:\n        if char == '.':\n            music.append(4)\n        elif char == 'o':\n            music.append(2)\n        elif char == 'o|':\n            music.append(1)\n        else:\n            music.append(0)\n    return music\n",
        "test": "assert ",
        "num_ids": 2326
    },
    {
        "number": 18,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 230,
        "answer": "    total = 0\n    for x in range(len(string)):\n        if string[x:len(string)].lower() == substring.lower():\n            total += 1\n    return total\n",
        "test": "assert     how_many_times(\"A\", \"b\") == 0",
        "num_ids": 1762
    },
    {
        "number": 19,
        "max_answer_num": 24,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "    string =''\n    string = string.join(map(str, sorted(numbers.split())))\n    return string\n",
        "test": "assert     sort_numbers('0') == '0'",
        "num_ids": 1325
    },
    {
        "number": 20,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 390,
        "answer": "    smallest = numbers[0]\n    closest = smallest\n    for i in range(len(numbers)):\n        if smallest > numbers[i]:\n            smallest = numbers[i]\n        elif smallest < numbers[i]:\n            closest = numbers[i]\n    return smallest, closest\n",
        "test": "assert     find_closest_elements([1, 1, 1]) == (1, 1), \"find_closest_elements(1, 1, 1) is not as expected.\"",
        "num_ids": 2150
    },
    {
        "number": 21,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "    # TODO: validate inputs\n    # TODO: implement\n    return numbers\n",
        "test": "assert rescale_to_unit([0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]",
        "num_ids": 2743
    },
    {
        "number": 22,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "    return [value for value in values if type(value) in [int, float]]\n",
        "test": "assert     filter_integers([]) == []",
        "num_ids": 1473
    },
    {
        "number": 23,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "    if string == '':\n        return 0\n    else:\n        return len(string)\n",
        "test": "assert     strlen('') == 0",
        "num_ids": 478
    },
    {
        "number": 24,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "    # I assume the first part of this equation is the largest number divisors\n    # so it's the largest number divisible by that\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n    return n\n",
        "test": "assert     largest_divisor(4) == 2",
        "num_ids": 1178
    },
    {
        "number": 25,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 290,
        "answer": "    return [i for i in range(2, n+1)]\n",
        "test": "assert     factorize(0) == []",
        "num_ids": 2130
    },
    {
        "number": 26,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "    results = []\n    for num in numbers:\n        if num not in results:\n            results.append(num)\n    return results\n",
        "test": "assert     remove_duplicates([]) == []",
        "num_ids": 3420
    },
    {
        "number": 27,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 330,
        "answer": "    #\"Hello\" -> \"Helloworld\"\n    strs = string.lower()\n    #\"hELLO\" -> \"hello\"\n    strs = string.upper()\n    #\"hello\" -> \"Hello\"\n    strs = string.capitalize()\n    return strs\n",
        "test": "assert     flip_case('Abc') == 'Abc'",
        "num_ids": 1030
    },
    {
        "number": 28,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate([]) == ''",
        "num_ids": 735
    },
    {
        "number": 29,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([\"my\", \"first\", \"second\", \"foo\", \"bar\", \"baz\"], \"x\") == []",
        "num_ids": 2368
    },
    {
        "number": 30,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "    return [num for num in l if num > 0]",
        "test": "assert     get_positive([1,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 1226
    },
    {
        "number": 31,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "    if n==0:\n        return False\n    if n==1:\n        return True\n    if n==2:\n        return True\n    if n==3:\n        return True\n    for i in range(2, n//2):\n        if n%i==0:\n            return False\n    return True\n",
        "test": "assert     is_prime(3) == True, \"is_prime should return True\"",
        "num_ids": 1206
    },
    {
        "number": 32,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "    max_val = max([abs(c) for c in xs])\n    zero = -1\n    for c in xs:\n        if abs(c) == max_val:\n            zero = c\n            break\n    return zero\n",
        "test": "assert     find_zero([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1])",
        "num_ids": 1187
    },
    {
        "number": 33,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "    l_len = len(l)\n    for i in range(0, l_len - 1):\n        for j in range(i + 1, l_len):\n            if l[i] + l[j] == l[l[i] % 3] and l[i] % 3!= l[j] % 3:\n                l[i], l[j] = l[j], l[i]\n    return l\n",
        "test": "assert     sort_third([]) == []",
        "num_ids": 2000
    },
    {
        "number": 34,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "    import collections\n    return list(collections.OrderedDict.fromkeys(l).keys())\n",
        "test": "assert     unique([1,2,3,4,5,6]) == [1,2,3,4,5,6]",
        "num_ids": 2347
    },
    {
        "number": 35,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 220,
        "answer": "    l_max = l[0]\n    for i in range(1, len(l)):\n        if l[i] > l_max:\n            l_max = l[i]\n    return l_max\n",
        "test": "assert     max_element([1,2,3,3,1]) == 3",
        "num_ids": 701
    },
    {
        "number": 36,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "    \n    if n < 7 or n % 11 == 0 or n % 13 == 0:\n        return 0\n    else:\n        return 1",
        "test": "assert     fizz_buzz(0) == 0",
        "num_ids": 1094
    },
    {
        "number": 37,
        "max_answer_num": 23,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "    l = l[::-1]\n    l.sort()\n    return l\n",
        "test": "assert     sort_even([]) == []",
        "num_ids": 1634
    },
    {
        "number": 38,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "    # split string to groups of three characters.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(group[0] + group[1]) if len(group) == 3 else group for group in groups]\n    # return one string from every group.\n    return \"\".join(groups)\n",
        "test": "assert     encode_cyclic(\"eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\") == \"eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\"",
        "num_ids": 2689
    },
    {
        "number": 39,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "    assert n >= 1\n    # f(n) = f(n-1) + f(n-2)\n    # see #103 for notes\n    def fib(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fib(n - 1) + fib(n - 2)\n    # make sure n > 1\n    return fib(n)\n",
        "test": "assert     prime_fib(30)!= 210",
        "num_ids": 2006
    },
    {
        "number": 40,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "    s = 0\n    for i in l:\n        s += i\n        if s == 0:\n            return False\n        else:\n            s = 0\n    return True\n",
        "test": "assert     triples_sum_to_zero([1, 2, 0]) == False",
        "num_ids": 1241
    },
    {
        "number": 41,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "    return 0\n",
        "test": "assert     car_race_collision(0) == 0",
        "num_ids": 817
    },
    {
        "number": 42,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "    for i in l:\n        i+=1\n    return l\n",
        "test": "assert incr_list([]) == []",
        "num_ids": 1054
    },
    {
        "number": 43,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "    if len(l)==0:\n        return False\n    \n    #if there is only 1 element and the summation of all the elements is equal to zero\n    if len(l) == 1 and l[0] == 0:\n        return True\n    \n    #if there are still two elements, the summation of all the elements is not equal to zero\n    #the element at index 1 will be the smallest element\n    if len(l) >= 2:\n        if l[1] == l[0] and l[0]!=0:\n            return True\n    \n    #this will return False if the list is unsorted\n    return False\n",
        "test": "assert     pairs_sum_to_zero([]) == False",
        "num_ids": 1385
    },
    {
        "number": 44,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "    if base == 10:\n        return str(x)\n    else:\n        return str(x * base)\n",
        "test": "assert     change_base(0, 5) == \"0\"",
        "num_ids": 1079
    },
    {
        "number": 45,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "    return 0.5 * a * h\n    pass\n",
        "test": "assert     triangle_area(0, 0) == 0",
        "num_ids": 767
    },
    {
        "number": 46,
        "max_answer_num": 23,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "    if n < 3:\n        return n\n    return fib4(n-1) + fib4(n-2) + fib4(n-3)\n",
        "test": "assert     fib4(0) == 0",
        "num_ids": 814
    },
    {
        "number": 47,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 270,
        "answer": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        mid = l[(n//2) - 1]\n        return mid\n    elif n % 2 == 1:\n        return l[(n//2) - 1]\n    else:\n        return l[n//2]\n",
        "test": "assert     median([1, 1, 2, 3]) == 1",
        "num_ids": 1041
    },
    {
        "number": 48,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "    text = text.lower().replace('-','')\n    rev = ''\n    for char in text:\n        if char.isalpha():\n            rev += char.lower() +''\n        else:\n            rev += char\n    if rev == text:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_palindrome(\"a\") == True",
        "num_ids": 1153
    },
    {
        "number": 49,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "    return (n % p) % p\n",
        "test": "assert         modp(10, 101)",
        "num_ids": 646
    },
    {
        "number": 50,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     encode_shift(\"\") == \"\"",
        "num_ids": 1008
    },
    {
        "number": 51,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    return text.translate(vowels)\n",
        "test": "assert     remove_vowels('a') == 'a'",
        "num_ids": 2161
    },
    {
        "number": 52,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 270,
        "answer": "    return any(any(elem < t for elem in l) for elem in l)\n",
        "test": "assert     below_threshold([2,1,4,3], 5) == True",
        "num_ids": 742
    },
    {
        "number": 53,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 210,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3",
        "num_ids": 610
    },
    {
        "number": 54,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "    s = list(s0)\n    for c in s1:\n        if c not in s:\n            return False\n    return True\n",
        "test": "assert     same_chars(\"abcd\", \"abcd\") == True",
        "num_ids": 838
    },
    {
        "number": 55,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 230,
        "answer": "    if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert fib(1) == 1",
        "num_ids": 730
    },
    {
        "number": 56,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "    def is_opening(bracket: str) -> bool:\n        return bracket[0] == bracket[0] and bracket[-1] == bracket[-1]\n    def is_closing(bracket: str) -> bool:\n        return bracket[0] == bracket[-1] and bracket[1] == bracket[1]\n    stack = []\n    for bracket in brackets:\n        if bracket == \">\":\n            if len(stack) > 0 and stack[-1] == \"<\":\n                stack.pop()\n            elif len(stack) == 0:\n                return False\n        elif bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            if not is_opening(stack[-1]):\n                return False\n            stack.pop()\n        elif bracket == \"<\":\n            if len(stack) == 0:\n                return False\n            if not is_closing(stack[-1]):\n                return False\n            stack.pop()\n    return len(stack) == 0",
        "test": "assert correct_bracketing(\"(<()<>\") == False",
        "num_ids": 1437
    },
    {
        "number": 57,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "    return all(x < y for x, y in zip(l, l[1:]) if y > x)\n",
        "test": "assert     monotonic(l = [1,2,3,4,5])",
        "num_ids": 908
    },
    {
        "number": 58,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "    return list(set(l1) & set(l2))\n",
        "test": "assert     common([3,1,1,1], [4,1,1,1])",
        "num_ids": 1458
    },
    {
        "number": 59,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 220,
        "answer": "    assert n > 1\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return i\n    return 2\n",
        "test": "assert     largest_prime_factor(4) == 2",
        "num_ids": 810
    },
    {
        "number": 60,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "    s = 0\n    while n!= 0:\n        s += n % 10\n        n = n // 10\n    return s\n",
        "test": "assert sum_to_n(10)!= 10",
        "num_ids": 745
    },
    {
        "number": 61,
        "max_answer_num": 25,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "    # split list into'' + brackets\n    brackets = list(brackets.split())\n    # strip each bracket from the end\n    brackets = [i.strip(\"()()\") for i in brackets]\n    # iterate over each bracket and check if it is a matching closing bracket\n    return all(brackets[i].endswith(brackets[i+1]) for i in range(len(brackets)-1))\n",
        "test": "assert correct_bracketing(\"(())\") == True",
        "num_ids": 1678
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 330,
        "answer": "    # TODO \n    pass\n",
        "test": "assert ",
        "num_ids": 1167
    },
    {
        "number": 63,
        "max_answer_num": 25,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "    if n < 1:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
        "test": "assert     fibfib(0) == 0",
        "num_ids": 1196
    },
    {
        "number": 64,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "    vowels = 0\n    for i in range(len(s)):\n        if s[i] in \"AEIOU\":\n            vowels += 1\n    return vowels\n",
        "test": "assert     vowels_count(\"a\") == 0, \"a should be zero\"",
        "num_ids": 2036
    },
    {
        "number": 65,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 360,
        "answer": "    if shift > len(str(x)):\n        return str(x)[shift:] + str(x)[:shift]\n    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n",
        "test": "assert     circular_shift(1234, 0) == \"1234\"",
        "num_ids": 1126
    },
    {
        "number": 66,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "    sum = 0\n    for i in range(len(s)):\n        sum += ord(s[i]) - ord('a') + 1\n    return sum\n",
        "test": "assert     digitSum(\"\") == 0",
        "num_ids": 788
    },
    {
        "number": 67,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "    total = 0\n    for i in s:\n        if i == \"0\" or i == \"1\":\n            total += int(i)\n    \n    return total\n",
        "test": "assert     fruit_distribution('b', 2) == 0",
        "num_ids": 2808
    },
    {
        "number": 68,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "    if not arr:\n        return []\n    \n    # If given array is empty, return the first node with even nodes\n    if not arr or not arr[0]:\n        return [0,0]\n    \n    # If given array has even values\n    if arr[0] % 2 == 0:\n        even_nodes = [0, 0]\n        for i in range(1, len(arr)):\n            if arr[i] % 2 == 0:\n                even_nodes[0] = arr[i]\n            else:\n                even_nodes[1] = arr[i]\n        return even_nodes\n",
        "test": "assert     pluck([]) == []",
        "num_ids": 1359
    },
    {
        "number": 69,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "    lst.sort() # sort the list\n    f = 0 # frequency\n    result = -1 # result\n    for i in lst:\n        if i > f: # if frequency is greater than current, set to value of current\n            f = i\n            result = i # set the value of the result\n    return result\n",
        "test": "assert         search([3, 1, 2, -4, 3])!= -1, \"The list doesn't contain any integers greater than zero.\"",
        "num_ids": 830
    },
    {
        "number": 70,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "    return sorted(lst, reverse=True)\n",
        "test": "assert         strange_sort_list([]) == []",
        "num_ids": 2558
    },
    {
        "number": 71,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 260,
        "answer": "    if (a!= b or a!= c or b!= c):\n        return -1\n    else:\n        if a + b > c and a + c > b and b + c > a:\n            area = (a * b) / 2\n        else:\n            area = -1\n        return area\n",
        "test": "assert     triangle_area(1, 2, 2) == -1",
        "num_ids": 1235
    },
    {
        "number": 72,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "    q = list(q)\n    # check if all elements are palindromic and the sum of its elements is less than or equal to the maximum possible weight\n    if all(q[i] == q[i] for i in range(len(q)-1)):\n        return False\n    # if not it's not balanced, check if the sum of the elements is less than or equal to the maximum possible weight\n    if sum(q[i] for i in range(len(q)-1)) <= w:\n        return True\n    else:\n        return False\n",
        "test": "assert     will_it_fly(['I','me','you'],3) == False, \"Expected False, got True\"",
        "num_ids": 1567
    },
    {
        "number": 73,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 280,
        "answer": "    size = len(arr)\n    if size == 1:\n        return 0\n    elif size == 2:\n        if arr[1] > arr[0]:\n            return 1\n        else:\n            return 2\n    elif size == 3:\n        if arr[1] > arr[0] > arr[2]:\n            return 1\n        elif arr[2] > arr[0] > arr[1]:\n            return 2\n        else:\n            return 3\n    else:\n        if arr[1] > arr[0] > arr[2]:\n            if arr[1] > arr[2]:\n                return 1\n            else:\n                return 2\n        elif arr[2] > arr[0] > arr[1]:\n            if arr[1] > arr[2]:\n                return 1\n            else:\n                return 2\n        else:\n            return 3\n",
        "test": "assert     smallest_change([1, 3, 4, 7]) == 3",
        "num_ids": 1147
    },
    {
        "number": 74,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "    return [item for item in set(lst1) & set(lst2)]",
        "test": "assert     total_match([],['dog','cat','bat','cat']) == []",
        "num_ids": 1686
    },
    {
        "number": 75,
        "max_answer_num": 31,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "    # Write your code here.\n    for i in range(100, 1000):\n        if a % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_multiply_prime(999) == False",
        "num_ids": 2029
    },
    {
        "number": 76,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "    return n**int(n)==x\n",
        "test": "assert     is_simple_power(3, 0) == False",
        "num_ids": 2139
    },
    {
        "number": 77,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "    if a == 0:\n        return True\n    if a == 1:\n        return True\n    if a == -1:\n        return True\n    if a == 2:\n        return False\n    if a == -2:\n        return False\n    if isinstance(a, int):\n        if a > 0 and a < 6:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     iscube(0) == True",
        "num_ids": 762
    },
    {
        "number": 78,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 350,
        "answer": "    num_str = str(num)\n    \n    div = []\n    num_str = num_str.replace('A', '').replace('B', '').replace('C', '').replace('D', '').replace('E', '').replace('F', '')\n    \n    for i in num_str:\n        div.append(int(i))\n        \n    return sum(div)\n",
        "test": "assert     hex_key(\"0A\") == 0",
        "num_ids": 4017
    },
    {
        "number": 79,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "    if decimal == 0:\n        return \"0\"\n    if decimal == 1:\n        return \"1\"\n    binary = \"\"\n    for i in range(0, len(str(decimal))):\n        if decimal % 2 == 0:\n            binary += \"0\"\n        else:\n            binary += \"1\"\n        decimal //= 2\n    return binary + \"db\" * len(binary)",
        "test": "assert     decimal_to_binary(1) == \"1\"",
        "num_ids": 1172
    },
    {
        "number": 80,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "    \n    def helper(s):\n        # Find all the unique letters in the string\n        unique_letters = set(s)\n        for c in unique_letters:\n            if c == c.lower():\n                continue\n            # Check if the current letter is already present in the set\n            if c in s:\n                return False\n        return True\n    \n    return helper(s)\n",
        "test": "assert     is_happy(\"ABBA\") == False",
        "num_ids": 1477
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "    if grades == []:\n        return''\n    else:\n        return [str(round(grade,2)) +'' for grade in grades]\n",
        "test": "assert ",
        "num_ids": 5758
    },
    {
        "number": 82,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "    if string:\n        string = string.upper()\n        for i in range(2, len(string)):\n            if string[i].isnumeric():\n                return False\n    return True\n",
        "test": "assert     prime_length(\"1234\") == False",
        "num_ids": 2607
    },
    {
        "number": 83,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "    l = [int(d) for d in str(n)]\n    count = 0\n    for i in range(len(l)):\n        if l[i] == 1:\n            count += 1\n    return count\n",
        "test": "assert starts_one_ends(0) == 0",
        "num_ids": 1384
    },
    {
        "number": 84,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 230,
        "answer": "    if N == 0:\n        return \"0\"\n    \n    if N == 1:\n        return \"1\"\n    \n    sum = 0\n    while N > 0:\n        sum = sum + N % 2\n        N = int(N / 2)\n    \n    return str(sum)\n",
        "test": "assert     solve(2) == '1'",
        "num_ids": 1401
    },
    {
        "number": 85,
        "max_answer_num": 25,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "    result = []\n    odd_index = 0\n    for n in lst:\n        if odd_index % 2 == 0:\n            result.append(n)\n        else:\n            result.append(n + (lst[odd_index + 1] % 2))\n        odd_index += 2\n    return result\n",
        "test": "assert     add([]) == []",
        "num_ids": 1322
    },
    {
        "number": 86,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "    result = \"\"\n    for letter in s:\n        if letter!= \" \":\n            result += letter\n        else:\n            result += \" \"\n    return result.strip()\n",
        "test": "assert     anti_shuffle(\"\") == \"\"",
        "num_ids": 2016
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 290,
        "answer": "    i = 0\n    j = lst[x].index(x)\n    return sorted(((i,j),) + sorted((tuple(map(lambda x: x[i], lst)),) + sorted((tuple(map(lambda x: x[j], lst)),))), reverse=True)\n",
        "test": "assert     get_row([[1, 2], [3, 4]], 6) == [(2, 1), (3, 2), (4, 3), (5, 2), (6, 3)]",
        "num_ids": 3062
    },
    {
        "number": 88,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "    # O(nlogn)\n    array = sorted(array)\n    # return array\n    return array\n",
        "test": "assert     sort_array([]) == []",
        "num_ids": 1811
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 240,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    num = len(s)\n    l = []\n    for i in range(num):\n        l.append(alphabet[(alphabet.find(s[i])+num)%26])\n    return ''.join(l)\n",
        "test": "assert encrypt(\"abc\") == \"def\"",
        "num_ids": 968
    },
    {
        "number": 90,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "    def next_smallest(lst):\n        if len(lst) == 1:\n            return lst[0]\n        if len(lst) > 1:\n            return min(lst[1:])\n    \n    return next_smallest(lst[1:])\n",
        "test": "assert     next_smallest([]) == None",
        "num_ids": 775
    },
    {
        "number": 91,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "    # +++ SUCCESSFUL SOLUTION +++\n    counter = 0\n    for word in S.split(\".\"):\n        if word.startswith(\"I\"):\n            counter += 1\n    return counter\n",
        "test": "assert     not is_bored('123?')",
        "num_ids": 3082
    },
    {
        "number": 92,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "    return x+y==z or z==z or z==z\n",
        "test": "assert     any_int(1, 1, 1) == True",
        "num_ids": 1055
    },
    {
        "number": 93,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "    return ''.join(chr(ord(c)+2) if c.isupper() else c for c in message)\n",
        "test": "assert     encode('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyz'",
        "num_ids": 2741
    },
    {
        "number": 94,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 240,
        "answer": "    if lst == []:\n        return 0\n    if lst == [1]:\n        return 1\n    if lst == [0]:\n        return 0\n    if lst == [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]:\n        return 1\n    if lst == [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]:\n        return 1\n    if lst == [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]:\n        return 1\n    if lst == [1,7,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]:\n        return 1\n    for i in range(len(lst)):\n        n = lst[i]\n        while n > 0:\n            for j in range(2, int(math.sqrt(n))+1):\n                if n % j == 0:\n                    break\n            else:\n                return n\n            n = n / j\n    return 0\n",
        "test": "assert     skjkasdkd([1]) == 1",
        "num_ids": 2966
    },
    {
        "number": 95,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 270,
        "answer": "    for k in dict.keys():\n        if isinstance(k, str) and k.isupper():\n            return True\n        elif isinstance(k, str) and k.islower():\n            return True\n    return False\n",
        "test": "assert     check_dict_case({\"foo\": \"Foo\", \"bar\": \"Bar\", \"baz\": \"Baz\"}) == True",
        "num_ids": 2208
    },
    {
        "number": 96,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "    arr = []\n    for i in range(1,n+1):\n        is_prime = True\n        for j in range(2,i):\n            if i%j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            arr.append(i)\n    return arr\n",
        "test": "assert     count_up_to(0) == []",
        "num_ids": 1280
    },
    {
        "number": 97,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "    return a*b\n",
        "test": "assert     multiply(1,6) == 6",
        "num_ids": 1687
    },
    {
        "number": 98,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "    count = 0\n    i = 0\n    while i < len(s):\n        if s[i].isupper():\n            count += 1\n        i += 1\n    return count\n",
        "test": "assert     count_upper(\"\") == 0",
        "num_ids": 1860
    },
    {
        "number": 99,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "    if len(str(value)) == 1:\n        return value\n    else:\n        num = abs(int(str(value)[1]))\n        if num == 1:\n            return round(float(value))\n        else:\n            return closest_integer(str(value)[2:])\n",
        "test": "assert     closest_integer(\"-1\") == -1",
        "num_ids": 1452
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "    \n    if n == 0 or n == 1:\n        return []\n    else:\n        return [n, n + 1]\n",
        "test": "assert ",
        "num_ids": 1264
    },
    {
        "number": 101,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "    \n    words = s.split(', ')\n    \n    return words\n",
        "test": "assert     words_string('a,b,c')!= ['a', 'b']",
        "num_ids": 949
    },
    {
        "number": 102,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 350,
        "answer": "    if x % 2 == 0:\n        if y % 2 == 0:\n            return y\n        else:\n            return -1\n    else:\n        if y % 2 == 0:\n            return y\n        else:\n            return -1\n",
        "test": "assert     choose_num(0, 0) == 0",
        "num_ids": 1126
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "    if m == n:\n        return '0b' + str(bin(n))[2:]\n    else:\n        return '-1'\n",
        "test": "assert ",
        "num_ids": 801
    },
    {
        "number": 104,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "    x = list(x)\n    x.sort()\n    return x\n",
        "test": "assert     unique_digits([]) == []",
        "num_ids": 2860
    },
    {
        "number": 105,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "    # Step 1: sort the array\n    arr.sort()\n    # Step 2: reverse the array\n    arr.reverse()\n    # Step 3: iterate through each element\n    return arr\n",
        "test": "assert     by_length([]) == []",
        "num_ids": 2019
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "    res = []\n    for i in range(1, n + 1):\n        res.append(i * factorial(i))\n    return res\n",
        "test": "assert     f(3) == 6",
        "num_ids": 894
    },
    {
        "number": 107,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 270,
        "answer": "    # 1.\n    # 2.\n    # 3.\n    odd, even = 0, 0\n    for num in range(1, n + 1):\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n",
        "test": "assert     even_odd_palindrome(0) == (0, 0)",
        "num_ids": 1149
    },
    {
        "number": 108,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "    count = 0\n    sum_digits = 0\n    for num in arr:\n        sum_digits += num\n        count += sum_digits >= 10\n    return count\n",
        "test": "assert     count_nums([]) == 0",
        "num_ids": 1275
    },
    {
        "number": 109,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "    arr.sort()\n    \n    for i in range(len(arr)):\n        if(i==0 or arr[i]!=arr[i-1]):\n            return True\n    return False\n",
        "test": "assert     move_one_ball([1, 1, 1, 1, 1, 1, 1, 1, 1]) == True, 'incorrect result'",
        "num_ids": 1452
    },
    {
        "number": 110,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "    if lst1 and lst2:\n        if lst1[0] % 2 == 0 and lst2[0] % 2 == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n",
        "test": "assert     \"exchange\" == \"exchange\"",
        "num_ids": 1926
    },
    {
        "number": 111,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "    letters = list(test.lower())\n    if len(letters) == 1:\n        return {letters[0]: letters.count(letters[0])}\n    else:\n        occurrence_dict = dict()\n        for letter in letters:\n            if letter in occurrence_dict:\n                occurrence_dict[letter] += 1\n            else:\n                occurrence_dict[letter] = 1\n        return {k:v for k,v in occurrence_dict.items() if v == max(occurrence_dict.values())}\n",
        "test": "assert     histogram(\"bb\") == {'b': 2}",
        "num_ids": 1527
    },
    {
        "number": 112,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 360,
        "answer": "    str_i,str_j = 0,len(s)-1\n    res = []\n    while str_i < str_j:\n        while str_i < str_j and s[str_i] == c:\n            str_i+=1\n        while str_i < str_j and s[str_j] == c:\n            str_j-=1\n        if str_i >= str_j:\n            break\n        res.append(s[str_i])\n        str_i += 1\n        str_j -= 1\n    if str_i == str_j:\n        return (s[:str_i] + s[str_j:],True)\n    else:\n        return (s[:str_i] + s[str_j:str_i] + s[str_j+1:],False)\n",
        "test": "assert     reverse_delete(\"\",'b') == (\"\",False)",
        "num_ids": 1553
    },
    {
        "number": 113,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "    lst_count = {}\n    result = []\n    for l in lst:\n        for i in l:\n            if i in lst_count:\n                lst_count[i] += 1\n            else:\n                lst_count[i] = 1\n    for k,v in lst_count.items():\n        if v % 2!= 0:\n            result.append(f'{v}n the {k} of the {v}nput.')\n    return result\n",
        "test": "assert     odd_count([]) == []",
        "num_ids": 2866
    },
    {
        "number": 114,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "    if not nums:\n        return 0\n    \n    # if array is empty, then return the minimum\n    if len(nums) == 0:\n        return 0\n        \n    curr_min = float('inf')\n    # loop through array, check if the min is same as the min in the previous sub array\n    for i in range(len(nums)):\n        curr_min = min(nums[i], curr_min + nums[i])\n        \n    return curr_min\n    \n",
        "test": "assert     minSubArraySum([]) == 0",
        "num_ids": 1263
    },
    {
        "number": 115,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "    rows, columns = len(grid), len(grid[0])\n    total_buckets = math.ceil(rows * columns / capacity)\n    \n    return total_buckets\n",
        "test": "assert     max_fill([[1,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]], 10) == 3, \"incorrect\"",
        "num_ids": 3969
    },
    {
        "number": 116,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "    arr.sort()\n    return arr\n",
        "test": "assert     sort_array([]) == []",
        "num_ids": 2277
    },
    {
        "number": 117,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "    return_list = []\n    lst_word = []\n    if n == 0:\n        return_list = []\n    else:\n        for word in s:\n            for i in range(len(word)-n+1):\n                if word[i:i+n] not in lst_word:\n                    lst_word.append(word[i:i+n])\n    return return_list\n",
        "test": "assert     select_words(s=\"\", n=0) == []",
        "num_ids": 1704
    },
    {
        "number": 118,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 230,
        "answer": "    vowels_beginning_vowel = \"aeiou\"\n    vowels_ending_vowel = \"AEIOU\"\n    #Find the closest vowel from the left side of the word\n    #If there's no closest vowel, return empty string\n    if len(word) == 1:\n        return \"\"\n    #Else find the closest vowel from the right side of the word\n    else:\n        left_vowel_index = word.find(vowels_beginning_vowel)\n        right_vowel_index = word.find(vowels_ending_vowel, left_vowel_index + 1)\n        #If we find the closest vowel, return the word\n        if right_vowel_index!= -1:\n            return word[:right_vowel_index]\n        #Else return empty string\n        else:\n            return \"\"\n",
        "test": "assert     get_closest_vowel(\"Ainny\") == \"\"",
        "num_ids": 2433
    },
    {
        "number": 119,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "    paren_match = 0\n    for char in lst:\n        if char == '(':\n            paren_match += 1\n        else:\n            paren_match -= 1\n        if paren_match < 0:\n            return 'No'\n    return 'Yes'\n",
        "test": "assert     match_parens(['(()','()()']), 'Yes'",
        "num_ids": 1509
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "    pass\n",
        "test": "assert ",
        "num_ids": 628
    },
    {
        "number": 121,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 220,
        "answer": "    even = []\n    odd = []\n    for i in lst:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return sum(odd) + sum(even)\n",
        "test": "assert     solution([0, 0, 0]) == 0",
        "num_ids": 972
    },
    {
        "number": 122,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "    sum_ele = arr[0]\n    for element in arr[1:]:\n        sum_ele += max(element, k)\n    return sum_ele\n",
        "test": "assert     add_elements([1, 2, 3], 1) == 6",
        "num_ids": 1053
    },
    {
        "number": 123,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "    odd_collatz = []\n    if n == 1:\n        return [1]\n    else:\n        while n!= 1:\n            if n % 2 == 0:\n                n = n // 2\n                odd_collatz.append(n)\n            else:\n                n = 3 * n + 1\n                odd_collatz.append(n)\n        return odd_collatz[::-1]\n",
        "test": "assert     get_odd_collatz(1) == [1]",
        "num_ids": 2252
    },
    {
        "number": 124,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 210,
        "answer": "    if date == '':\n        return False\n    if len(date) < 1 or len(date) > 32:\n        return False\n    if date[0]!= '-' or date[0] not in ('0','1','2','3','4','5','6','7','8','9','0','1','2','3','4','5','6','7','8','9'):\n        return False\n    month = int(date[0])\n    day = int(date[3:])\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if day < 1 or day > 30:\n        return False\n    if day < 1 or day > 29:\n        return False\n    if month < 1 or month > 12:\n        return False\n    return True\n",
        "test": "assert     not valid_date(\"31-03-2019\")",
        "num_ids": 2323
    },
    {
        "number": 125,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "    # split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    # split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    # split_words(\"aabcdefghijklmnopqrstuvwxyz\") \u279e [ 'a', 'bc', 'defghijklmnopqrstuvwxyz']\n    # split_words(\"abcdefghijklmnopqrstuvwxyz\") \u279e [ 'abc', 'defghijklmnopqrstuvwxyz']\n    # split_words(\"123abcdefghijklmnopqrstuvwxyz\") \u279e [ 'abc', 'defghijklmnopqrstuvwxyz']\n    # split_words(\"abcdefghijklmnopqrstuvwxyz\") \u279e [ 'abc', 'defghijklmnopqrstuvwxyz']\n    # split_words(\"123abcdefghijklmnopqrstuvwxyz\") \u279e [ 'abc', 'defghijklmnopqrstuvwxyz']\n    # split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    # split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    # split_words(\"abcdefghijklmnopqrstuvwxyz\") \u279e [ 'abc', 'defghijklmnopqrstuvwxyz']\n    # split_words(\"123abcdefghijklmnopqrstuvwxyz\") \u279e [ 'abc', 'defghijklmnopqrstuvwxyz']\n    # split_words(\"abcdefghijklmnopqrstuvwxyz\") \u279e [ 'abc', 'defghijklmnopqrstuvwxyz']\n    # split_words(\"\") \u279e []\n    # split_words(\"abc\") \u279e [ 'abc']\n    # split_words(\"bob\") \u279e ['bob']\n    return [word.strip().lower() for word in txt.split()]\n",
        "test": "assert     split_words(\"a\") == [\"a\"]",
        "num_ids": 3102
    },
    {
        "number": 126,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "    if len(lst) <= 1:\n        return True\n    elif lst[0] == lst[len(lst) - 1]:\n        return False\n    else:\n        return True if lst[0] < lst[len(lst) - 1] else False\n",
        "test": "assert     is_sorted([]) == True",
        "num_ids": 1446
    },
    {
        "number": 127,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 220,
        "answer": "    l1 = interval1[0]\n    r1 = interval1[1]\n    l2 = interval2[0]\n    r2 = interval2[1]\n    if l2 <= l1 or r2 <= r1:\n        return \"YES\"\n    if l2 >= r1 or r2 >= l1:\n        return \"NO\"\n    if l1 == r1 and l1 == r2:\n        return \"YES\"\n    if l1 == r2:\n        if l2 < r1 < r2:\n            return \"YES\"\n    if l1 == r2:\n        if r2 < l1 < l2:\n            return \"YES\"\n    if l1 < r2 < r1:\n        return \"YES\"\n    if l1 < r2 < l2:\n        return \"YES\"\n",
        "test": "assert     intersection(interval1 = (1, 2), interval2 = (3, 4)) == \"NO\"",
        "num_ids": 2562
    },
    {
        "number": 128,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "    sum = 0\n    for num in arr:\n        signs = [0, 1, -1]\n        for i in range(len(signs)):\n            if num & signs[i]:\n                sum += signs[i]\n                break\n    return sum\n",
        "test": "assert     prod_signs([-2, -1, 0, 0]) == 0",
        "num_ids": 1607
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "    if grid == []:\n        return []\n",
        "test": "assert     minPath(grid, 4) == [1, 2, 3, 4]",
        "num_ids": 2211
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "    if n<=1:\n        return []\n    if n==1:\n        return [1]\n    elif n==2:\n        return [1,2]\n    else:\n        return [1,1] + tri(n-1) + tri(n-2) + tri(n+1)\n",
        "test": "assert ",
        "num_ids": 3844
    },
    {
        "number": 131,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "    if n%2==0:\n        return 0\n    else:\n        return n*digits(n//2)\n",
        "test": "assert     digits(0) == 0",
        "num_ids": 732
    },
    {
        "number": 132,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "    for char in string:\n        if char == \"[\":\n            return True\n    return False\n",
        "test": "assert     is_nested(\"(()\") == False, \"Incorrect input\"",
        "num_ids": 3335
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    squared = list(map(lambda x: (x ** 2), lst))\n    return sum(squared)\n",
        "test": "assert     sum_squares([1,2,3,4,5]) == 55",
        "num_ids": 1470
    },
    {
        "number": 134,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 220,
        "answer": "    # create variable for last char\n    last_char = \"\"\n    # iterate through each word\n    for i in range(len(txt)):\n        # if the last char is an alphabet\n        if txt[i].isalpha():\n            # if the last char is not a letter, return false\n            if last_char.isalpha() and not txt[i].isalpha():\n                return False\n            # if the last char is a letter, return true\n            elif last_char.isalpha():\n                return True\n            # if the last char is a letter, return false\n            else:\n                return False\n        # set new last char to current char\n        last_char = txt[i]\n    return True\n",
        "test": "assert     check_if_last_char_is_a_letter(\"This is a letter!\") == False",
        "num_ids": 1025
    },
    {
        "number": 135,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "    # Write your code here.\n    arr = sorted(arr)\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            return -1\n    return len(arr)\n",
        "test": "assert     can_arrange([1, 1, 5, 7, 9]), \"triangle does not have a unique solution\"",
        "num_ids": 1439
    },
    {
        "number": 136,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "    def _largest_smallest(num_list):\n        '''\n        Returns a tuple (a, b) where a is the largest and b is the smallest\n        of negative integers in num_list.\n        If there is no negative integers in num_list, returns a tuple (None, None)\n        '''\n        if num_list == []:\n            return (None, None)\n        else:\n            num_list = sorted(num_list, reverse=True)\n            num_list_length = len(num_list)\n            if num_list_length == 1:\n                return (num_list[0], num_list[0])\n            if num_list_length == 2:\n                return (num_list[0], num_list[1])\n            if num_list_length == 3:\n                return (num_list[0], num_list[1], num_list[2])\n            if num_list_length == 4:\n                return (num_list[0], num_list[1], num_list[2], num_list[3])\n            if num_list_length == 5:\n                return (num_list[0], num_list[1], num_list[2], num_list[3], num_list[4])\n            if num_list_length == 6:\n                return (num_list[0], num_list[1], num_list[2], num_list[3], num_list[4], num_list[5])\n            if num_list_length == 7:\n                return (num_list[0], num_list[1], num_list[2], num_list[3], num_list[4], num_list[5], num_list[6])\n            if num_list_length == 8:\n                return (num_list[0], num_list[1], num_list[2], num_list[3], num_list[4], num_list[5], num_list[6], num_list[7])\n    largest_smallest = _largest_smallest(lst)\n    return largest_smallest\n",
        "test": "assert     largest_smallest_integers([]) == (None, None)",
        "num_ids": 3002
    },
    {
        "number": 137,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "    # if a == b:\n    #     return a\n    # elif type(a) is str:\n    #     return b\n    # elif type(a) is float:\n    #     return a\n    # elif type(a) is int:\n    #     return b\n    # return None\n    if a == b:\n        return a\n    elif type(a) is str:\n        return b\n    elif type(a) is float:\n        return a\n    elif type(a) is int:\n        return b\n    return None\n",
        "test": "assert     compare_one(3.0, 0.0) == 3.0",
        "num_ids": 1933
    },
    {
        "number": 138,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "    result = True\n    if n <= 4:\n        return result\n    \n    for i in range(2, n + 1, 2):\n        if n % i == 0:\n            result = False\n            break\n    return result\n",
        "test": "assert     is_equal_to_sum_even(6) is False",
        "num_ids": 1104
    },
    {
        "number": 139,
        "max_answer_num": 23,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "    numbers_to_return = 1\n    special_fact = 1\n    while n > 1:\n        special_fact *= n\n        n -= 1\n    return special_fact\n",
        "test": "assert     special_factorial(0) == 1",
        "num_ids": 3160
    },
    {
        "number": 140,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "    line_count = len(text.splitlines())\n    return''.join(text.split()).replace(' ', '_') if line_count > 2 else text\n",
        "test": "assert     fix_spaces(\"\") == \"\"",
        "num_ids": 2477
    },
    {
        "number": 141,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "    \n    file_name = file_name.split(\".\")\n    if len(file_name) > 3:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "test": "assert     file_name_check('12.txt') == 'No'",
        "num_ids": 1834
    },
    {
        "number": 142,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "    sum = 0\n    for i in lst:\n        if i%3 == 0 or i%4 == 0:\n            sum += i**2\n    return sum\n",
        "test": "assert     sum_squares([]) == 0",
        "num_ids": 1329
    },
    {
        "number": 143,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "    s = sentence.split()\n    if len(s) < 2:\n        return sentence\n",
        "test": "assert     words_in_sentence(\"\") == \"\"",
        "num_ids": 2201
    },
    {
        "number": 144,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "    return False",
        "test": "assert     simplify(\"0.1/2\", \"0\") == False",
        "num_ids": 1262
    },
    {
        "number": 145,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "    nums.sort()\n    return nums\n",
        "test": "assert     order_by_points([]) == []",
        "num_ids": 1556
    },
    {
        "number": 146,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 250,
        "answer": "    filter = []\n    for num in nums:\n        if num >= 10 and num % 2 == 0:\n            filter.append(num)\n    return len(filter)\n    \n",
        "test": "assert     specialFilter([]) == 0, \"Function does not work\"",
        "num_ids": 1217
    },
    {
        "number": 147,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    triples = 0\n    for i in range(1, n):\n        triples += a[i] * i\n    return triples\n",
        "test": "assert     get_max_triples(0) == 0",
        "num_ids": 661
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 350,
        "answer": "    jupiter = get_jupiter_planet(planet1, planet2)\n    venus = get_venus_planet(planet1, planet2)\n    earth = get_earth_planet(planet1, planet2)\n    mars = get_mars_planet(planet1, planet2)\n    sun = get_sun_planet(planet1, planet2)\n    \n    return (jupiter, venus, earth, mars, sun)\n    \ndef get_sun_planet(planet1, planet2):\n    '''\n    A planet with mass = 1 solar mass is called the \"Sun\" planet. \n    You should return a tuple of the sun's name, as a string, which is \n    the name of the planet on the sun. \n    The function should return an empty tuple if the planet name is incorrect. \n    Examples\n    get_sun_planet(\"Mercury\", \"Earth\") ==> ('Mercury',)\n    get_sun_planet(\"Mercury\", \"Jupiter\") ==> ('Jupiter',)\n    get_sun_planet(\"Mercury\", \"Saturn\") ==> ('Saturn',)\n    '''\n    if (planet1 == \"Sun\"):\n        return ('Sun')\n    \ndef get_jupiter_planet(planet1, planet2):\n    '''\n    A planet with mass = 1 solar mass is called the \"Jupiter\" planet. \n    You should return a tuple of the Jupiter's name, as a string, which is \n    the name of the planet on the Jupiter. \n    The function should return an empty tuple if the planet name is incorrect. \n    Examples\n    get_jupiter_planet(\"Mercury\", \"Earth\") ==> ('Mercury',)\n    get_jupiter_planet(\"Mercury\", \"Jupiter\") ==> ('Jupiter',)\n    get_jupiter_planet(\"Mercury\", \"Saturn\") ==> ('Saturn',)\n    '''\n    if (planet2 == \"Sun\"):\n        return ('Sun')\n    \ndef get_venus_planet(planet1, planet2):\n    '''\n    A planet with mass = 1 solar mass is called the \"Venus\" planet. \n    You should return a tuple of the Venus's name, as a string, which is \n    the name of the planet on the Venus. \n    The function should return an empty tuple if the planet name is incorrect. \n    Examples\n    get_venus_planet(\"Mercury\", \"Earth\") ==> ('Mercury',)\n    get_venus_planet(\"Mercury\", \"Jupiter\") ==> ('Jupiter',)\n    get_venus_planet(\"Mercury\", \"Saturn\") ==> ('Saturn',)\n    '''\n    if (planet1 == \"Venus\"):\n        return ('Venus')\n    \ndef get_earth_planet(planet1, planet2):\n    '''\n    A planet with mass = 1 solar mass is called the \"Earth\" planet. \n    You should return a tuple of the Earth's name, as a string, which is \n    the name of the planet on the Earth. \n    The function should return an empty tuple if the planet name is incorrect. \n    Examples\n    get_earth_planet(\"Mercury\", \"Earth\") ==> ('Mercury',)\n    get_earth_planet(\"Mercury\", \"Jupiter\") ==> ('Jupiter',)\n    get_earth_planet(\"Mercury\", \"Saturn\") ==> ('Saturn',)\n    '''\n    if (planet2 == \"Earth\"):\n        return ('Earth')\n    \ndef get_mars_planet(planet1, planet2):\n    '''\n    A planet with mass = 1 solar mass is called the \"Mars\" planet. \n    You should return a tuple of the Mars's name, as a string, which is \n    the name of the planet on the Mars. \n    The function should return an empty tuple if the planet name is incorrect. \n    Examples\n    get_mars_planet(\"Mercury\", \"Earth\") ==> ('Mercury',)\n    get_mars_planet(\"Mercury\", \"Jupiter\") ==> ('Jupiter',)\n    get_mars_planet(\"Mercury\", \"Saturn\") ==> ('Saturn',)\n    '''\n    if (planet1 == \"Mars\"):\n        return ('Mars')\n    \ndef get_jupiter_planet(planet1, planet2):\n    '",
        "test": "assert",
        "num_ids": 7409
    },
    {
        "number": 149,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "    # get_words = lambda lst: [word for word in lst if len(word) % 2 == 0]\n    # sorted_list_sum = lambda lst: sorted(lst, key=get_words)\n    return sorted(lst, key=lambda x: len(x))",
        "test": "assert     sorted_list_sum([]) == []",
        "num_ids": 2260
    },
    {
        "number": 150,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "    if n < 0 or n == 0:\n        return None\n    if n % 2 == 0:\n        return y\n    return x\n",
        "test": "assert     x_or_y(2, 1, 1) == 1",
        "num_ids": 2297
    },
    {
        "number": 151,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "    \n    sum = 0\n    for i in lst:\n        if i % 2 == 1:\n            sum += i ** 2\n    return sum\n",
        "test": "assert     double_the_difference([]) == 0",
        "num_ids": 1574
    },
    {
        "number": 152,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 260,
        "answer": "    \n    # first we check if guess is a square. It will be a list. So we can return it as a list\n    if isinstance(guess,list):\n        if len(guess)!= len(game):\n            return 0\n        \n        # check if guess is a square and if the values are the same, return a zero\n        if all([isinstance(n,int) and n == n for n in guess]):\n            return [0 for _ in range(len(game))]\n        else:\n            return 0\n    else:\n        if isinstance(guess,int) and guess == guess:\n            return 0\n        else:\n            if guess in game:\n                return [game[guess] for _ in range(len(game))]\n            else:\n                return 0\n",
        "test": "assert     compare([1, 2, 1, 1], [1, 1, 1, 1]) == [0, 0, 0, 0]",
        "num_ids": 3048
    },
    {
        "number": 153,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 270,
        "answer": "    #Add your code here\n    if len(extensions) > 0:\n        result = \"\"\n        for extension in extensions:\n            if class_name.startswith(extension):\n                result = extension\n            elif len(extension) >= 2 and extension[0].isupper():\n                result = extension[1:]\n            elif len(extension) >= 2 and extension[0].islower():\n                result = extension[1:]\n            elif len(extension) >= 2 and extension[0] in extension[1:]:\n                result = extension[1:]\n        \n        return result\n    else:\n        return class_name\n",
        "test": "assert     Strongest_Extension(\"Slices\", [\"Slices\"]) == 'Slices'",
        "num_ids": 3239
    },
    {
        "number": 154,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "    def cycpattern(a,b):\n        for x in b:\n            if a.count(x)>0:\n                return True\n        return False\n    \n    if not cycpattern(a,b):\n        return False\n    else:\n        return cycpattern(a,b)",
        "test": "assert     cycpattern_check('a', 'a') == True",
        "num_ids": 1485
    },
    {
        "number": 155,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "    even = []\n    odd = []\n    for n in str(num):\n        if int(n) % 2 == 0:\n            even.append(n)\n        else:\n            odd.append(n)\n    return (len(even), len(odd))\n",
        "test": "assert     even_odd_count(1) == (0, 1)",
        "num_ids": 979
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 280,
        "answer": "    roman = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC',\n               50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n    s = []\n    for i in range(len(number)):\n        val = number[i]\n        if val in roman:\n            s.append(roman[val])\n        else:\n            s.append(val)\n    return ''.join(s)\n",
        "test": "assert ",
        "num_ids": 3972
    },
    {
        "number": 157,
        "max_answer_num": 24,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "    if a + b >= c and b + c >= a and a + c >= b:\n        return True\n    return False\n",
        "test": "assert     right_angle_triangle(3,4,9) == False",
        "num_ids": 1449
    },
    {
        "number": 158,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 240,
        "answer": "    max_count = 0\n    word = \"\"\n    for word in words:\n        count = 1\n        for letter in word:\n            if letter.isalpha():\n                count += 1\n            else:\n                break\n        if count > max_count:\n            max_count = count\n            word = word[:count] + word[count+1:]\n    return word\n",
        "test": "assert     find_max([\"a\", \"a\", \"a\"]) == \"a\", \"incorrect result\"",
        "num_ids": 2149
    },
    {
        "number": 159,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "    if need > remaining:\n        return [remaining, need]\n    else:\n        if need <= remaining:\n            return [number, need]\n        else:\n            result = eat(number - need, need, remaining - number)\n            if result == [number, need]:\n                return [remaining, need]\n            else:\n                result[0] += result[1]\n                return result\n",
        "test": "assert     (eat(0, 0, 1000) == [0, 0])",
        "num_ids": 1264
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 350,
        "answer": "    result = 0\n",
        "test": "assert     do_algebra([\"*\", \"*\"], [5, 2]) == (11, 0)",
        "num_ids": 2025
    },
    {
        "number": 161,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "    s = list(s)\n    \n    for i in range(len(s)):\n        if s[i] not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            s[i] = s[i].upper()\n        else:\n            s[i] = s[i].lower()\n    return ''.join(s)\n",
        "test": "assert     solve(\"\") == \"\"",
        "num_ids": 1280
    },
    {
        "number": 162,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "    if not text:\n        return None\n",
        "test": "assert     string_to_md5(\"\") == None",
        "num_ids": 1103
    },
    {
        "number": 163,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "    result = []\n    for i in range(a, b+1):\n        result.append(i)\n    return result\n",
        "test": "assert     generate_integers(1, 0) == []",
        "num_ids": 1558
    }
]