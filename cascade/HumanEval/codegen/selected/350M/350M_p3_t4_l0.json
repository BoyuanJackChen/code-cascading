[
    {
        "number": 0,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    # check all numbers are between 0 and 1\n    for element in numbers:\n        if element < 0.0 or element > 1.0:\n            return False\n    # find all numbers whose distance is closer to each other\n    # to 0.0\n    # this is an easy way to test if two numbers are closer than given threshold\n    close_elements = [element for element in numbers if abs(element - 0.0) <= threshold]\n    # return whether any two elements are closer than threshold\n    return len(close_elements) > 0\n",
        "test": "assert     has_close_elements([1,2,3,4], 0.00001) is False"
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    # Note: the list will be a string with multiple groups of nested parentheses, we need to make it a list\n    groups = []\n    for brace in paren_string.split(')'):\n        # Here we create a separate string for each brace. Each brace will be enclosed in a list of strings\n        # The goal here is to put the closing paren in the beginning of each string, and then separate the\n        # strings in a list.\n        # We also need to make sure that the separator is closed, and we only put the closing paren\n        # in the end of the list\n        # When we close the closing paren, we separate it out\n        separated = []\n        for part in brace.split(','):\n            # Here we split the separator into separate strings, and then separate each string into a list.\n            # The way we do this is the following:\n            # 1. check the is a space or not\n            # 2. if it is a space, we put it in a list with a single string, then we need to add that list to the end of the separator\n            # 3. if it is not a space, we split the string at the space, and then we add the list of strings to the end of the separator\n            # 4. if it is not a space, then the string is already in the list, we don't need to add the list to the end\n            if'' in part:\n                separated.append(part)\n            else:\n                separated.append(part.split())\n        # We also put the closing paren in the end of the separate list\n        separated.append(brace.split(','))\n        groups.append(''.join(separated))\n    return groups\n",
        "test": "assert     separate_paren_groups(\"(a,(b,(c),(d))\"), \"\") == [(\"a\", \"b\", \"c\", \"d\"), \"\"]"
    },
    {
        "number": 2,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    return int(number * 10) / 10\n",
        "test": "assert     truncate_number(0.5) == 0.5"
    },
    {
        "number": 3,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return False\n",
        "test": "assert     below_zero([0, 0, 1, 0, 0]) == False"
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    x = []\n    y = []\n    # collect all elements\n    for number in numbers:\n        x.append(number)\n        y.append(number)\n",
        "test": "assert     mean_absolute_deviation([5, 4, 3, 2, 1, 0]) == 6.0, \"returned value is incorrect\""
    },
    {
        "number": 5,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    return numbers + [delimeter] * (len(numbers) - len(numbers) % len(numbers)",
        "test": "assert     issubclass(type(intersperse[1]), int)"
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    parens_list = paren_string.split('(')\n    deepest = 1\n    for paren in parens_list:\n        if paren == ')':\n            deepest -= 1\n            if deepest == 0:\n                return []\n        else:\n            deepest += 1\n    return [deepest]\n",
        "test": "assert     parse_nested_parens(\"()())\") == [3, 0, 1, 0, 0, 0, 0, 0, 0, 0]"
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    return [x for x in strings if substring in x]\n",
        "test": "assert     filter_by_substring(strings=[\"ab\", \"ab\", \"abc\"], substring=\"ab\") == [\"ab\", \"ab\", \"abc\"]"
    },
    {
        "number": 8,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    elif len(numbers) == 1:\n        return numbers[0], numbers[0]\n    else:\n        s, p = sum_product(numbers[1:])\n        return (numbers[0] + p, s + p)\n",
        "test": "assert sum_product([1, 3, 2, 1]) == (0, 1)"
    },
    {
        "number": 9,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    max_numbers = []\n    for i in range(len(numbers)):\n        index = i\n        while index >= 0:\n            if numbers[index] > numbers[i]:\n                index -= 1\n            else:\n                break\n        max_numbers.append(numbers[i])\n    return max_numbers\n",
        "test": "assert     rolling_max([]) == []"
    },
    {
        "number": 10,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    length = len(string)\n    # if the string is already a palindrome, return it\n    if is_palindrome(string) == True:\n        return string\n",
        "test": "assert     is_palindrome(\"bab\") == True"
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    return ''.join([chr((int(a, 2) ^ int(b, 2)) & 255), chr((int(a, 2) >> 8) & 255), chr((int(a, 2) >> 16) & 255), chr((int(a, 2) >> 24) & 255)])\n    \ndef int_xor(a: int, b: int) -> int:\n    \"\"\" Input are two ints, a and b, each in binary form.\n    Perform binary XOR on these inputs and return result also as an int.\n    >>> int_xor(10, 3)\n    3\n    \"\"\"\n    result = 0\n    for i in range(0, 8, 2):\n        result += (a ^ b) * (1 << i)\n    return result\n",
        "test": "assert     string_xor('a1a2a1', 'a1a2a1') == 'a1a2a1'"
    },
    {
        "number": 12,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if len(strings) == 0:\n        return None\n    else:\n        return max(strings, key=len)\n",
        "test": "assert     longest([\"a\", \"b\", \"a\"]) == \"a\""
    },
    {
        "number": 13,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    while a!= b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a\n",
        "test": "assert     greatest_common_divisor(10, 20) == 10"
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    prefixes = []\n    last_prefix = ''\n    for char in string:\n        if char =='':\n            if last_prefix!= '':\n                prefixes.append(last_prefix)\n            last_prefix = ''\n        else:\n            last_prefix = last_prefix + char\n    prefixes.append(last_prefix)\n",
        "test": "assert     all_prefixes(\"abcddeef\") == [\"ab\", \"ac\", \"bc\", \"cd\", \"de\", \"ef\", \"ee\"]"
    },
    {
        "number": 15,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    return''*n+str(0)\n",
        "test": "assert     string_sequence(8) == '0,01,02,03,04,05,06,07,08'"
    },
    {
        "number": 16,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    count = 0\n    for char in string:\n        if char not in {'A', 'Z'}:\n            count += 1\n    return count\n",
        "test": "assert     count_distinct_characters('1A') == 1"
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    def get_beat_count(beat_string: str):\n        count = 0\n        for char in beat_string:\n            if char.isalpha():\n                count += 1\n        return count\n",
        "test": "assert     parse_music(\".|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|"
    },
    {
        "number": 18,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    # 1. find the first position of the substring.\n    # 2. go through the string and check if substring is in the given substring\n    # 3. if yes, add the count to the count of how many times it appears\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            print(i, string[i:i+len(substring)])\n            return i\n        i += 1\n    return 0",
        "test": "assert     how_many_times('abc', 'bc') == 1"
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    assert len(numbers) >= 3\n",
        "test": "assert     sort_numbers('three') == 'three'"
    },
    {
        "number": 20,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    smaller, larger = None, None\n    for number in numbers:\n        if smaller is None or number < smaller:\n            smaller = number\n        if larger is None or number > larger:\n            larger = number\n    return (smaller, larger)\n",
        "test": "assert     find_closest_elements([]) == (None, None), \"Closest number is: None\""
    },
    {
        "number": 21,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    return [n / (sum(n) / 2.0) for n in numbers]\n",
        "test": "assert     rescale_to_unit([0.5,1,0,0,0.5]) == [0.25,0.25,0.25,0.25,0.5]"
    },
    {
        "number": 22,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    new_values = []\n    for value in values:\n        if isinstance(value, int):\n            new_values.append(value)\n        else:\n            new_values.append(None)\n    return new_values",
        "test": "assert     filter_integers([0,1,2,3,4,5]) == [0,1,2,3,4,5]"
    },
    {
        "number": 23,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return len(string)\n",
        "test": "assert "
    },
    {
        "number": 24,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    for i in range(2,n):\n        if n%i == 0:\n            return i\n    return n\n",
        "test": "assert     largest_divisor(3) == 3"
    },
    {
        "number": 25,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    res = [i for i in range(1, n + 1) if n % i == 0]\n    res = [i for i in range(2, n + 1) if n % i == 0]\n    res.sort()\n    return res\n",
        "test": "assert "
    },
    {
        "number": 26,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    if len(numbers) == 0:\n        return []\n    \n    unique_numbers = []\n    seen = set()\n    for n in numbers:\n        if n in seen:\n            unique_numbers.append(n)\n        seen.add(n)\n    \n    unique_numbers = list(dict.fromkeys(unique_numbers))\n    return unique_numbers\n",
        "test": "assert     remove_duplicates([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5]) == [1, 2, 3, 4, 5]"
    },
    {
        "number": 27,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    return string.swapcase()\n",
        "test": "assert     flip_case(\"test\") == \"TEST\""
    },
    {
        "number": 28,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate([\"one\", \"two\", \"three\"]) == \"onetwothree\""
    },
    {
        "number": 29,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n    # \"\".join(x for x in strings if string.startswith(prefix))\n    # return [string for string in strings if string.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"eello\") == [\"hello\"]"
    },
    {
        "number": 30,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return [num for num in l if num>0]\n",
        "test": "assert     (get_positive([])) == []"
    },
    {
        "number": 31,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if n==1:\n        return False\n    elif n==2:\n        return True\n    for i in range(2, n):\n        if n%i==0:\n            return False\n    return True\n",
        "test": "assert     is_prime(3) == True"
    },
    {
        "number": 32,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    x = 0\n    for i in range(len(xs)):\n        if (i % 2 == 0):\n            x = xs[i]\n        else:\n            x = xs[i] * xs[i]\n    return x\n",
        "test": "assert     find_zero([1, 0, 2, 0, 2]) == 2.0"
    },
    {
        "number": 33,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    if len(l) % 3!= 0:\n        return l\n",
        "test": "assert     sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]"
    },
    {
        "number": 34,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    l.sort()\n    return l\n",
        "test": "assert     unique([\"one\", \"one\", \"one\", \"one\"]) == [\"one\", \"one\", \"one\", \"one\"]"
    },
    {
        "number": 35,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    return max(l)\n",
        "test": "assert     max_element([5, 5, 5, 5, 5]) == 5, \"max_element should return 5\""
    },
    {
        "number": 36,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    if n%5==0 or n%7==0 or n%11==0:\n        return (n//10)*2\n    elif n%5==1:\n        return n//10\n    elif n%11==1:\n        return n//10+1\n    else:\n        return n//10+3\n",
        "test": "assert     fizz_buzz(11) == 2"
    },
    {
        "number": 37,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    print(l)\n    a = []\n    for i in range(0,len(l),2):\n        a.append(l[i])\n        a.append(l[i+1])\n    print(a)\n    return a\n",
        "test": "assert     sort_even([]) == []"
    },
    {
        "number": 38,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # remove duplicates from groups.\n    groups = [group for group in groups if group not in groups]\n    # cycle decoded characters.\n    result = \"\"\n    for group in groups:\n        result += group\n    return result\n",
        "test": "assert     decode_cyclic('aabbcc') == 'babcc'"
    },
    {
        "number": 39,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if n < 1:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        for i in range(3, n):\n            if n % i == 0:\n                break\n        else:\n            return n\n",
        "test": "assert     prime_fib(7) == 5"
    },
    {
        "number": 40,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    if len(l) < 3:\n        return False\n    # https://docs.python.org/3/library/stdtypes.html#list.sort\n    # https://docs.python.org/3/library/functions.html#sort\n    # https://stackoverflow.com/a/131593903/1047148\n    sorted_list = sorted(l)\n    if sorted_list[-1] == sorted_list[-2] == sorted_list[-3]!= sorted_list[0]:\n        return True\n    else:\n        return False\n",
        "test": "assert     triples_sum_to_zero([-3, 1, 0, -2, 1, -3, 3, 0, 0]) == False"
    },
    {
        "number": 41,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    return 1 + n*n\n",
        "test": "assert         car_race_collision(5) == 2"
    },
    {
        "number": 42,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    return [i + 1 for i in l]\n",
        "test": "assert     incr_list([1, 2, 3]) == [2, 3, 4]"
    },
    {
        "number": 43,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    if len(l)!= 2:\n        return False\n    \n    if l[0] + l[1] == 0:\n        return True\n    elif l[0] + l[1] < 0:\n        return False\n    else:\n        return pairs_sum_to_zero([l[0], l[1]])\n    \ndef main():\n    \"\"\"\n    >>> pairs_sum_to_zero([1, 2, 3, 5, -3, 5, -2, -4])\n    True\n    >>> pairs_sum_to_zero([1, 2, 3, 5, 7, 2, -4])\n    False\n    >>> pairs_sum_to_zero([2, 4, 5, 7, 3, 5])\n    False\n    >>> pairs_sum_to_zero([2, -4, -2, -3, 4, -5])\n    True\n    \"\"\"\n    print(pairs_sum_to_zero([1, 2, 3, 5, -3, 5, -2, -4]))\n    print(pairs_sum_to_zero([1, 2, 3, 5, 7, 2, -4]))\n    print(pairs_sum_to_zero([2, 4, 5, 7, 3, 5]))\n    \nmain()\n",
        "test": "assert     pairs_sum_to_zero([2, 3, 4, 6, 5, 7]) == False"
    },
    {
        "number": 44,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    x = x % base\n    if x < base:\n        x = base - x\n    return str(x)\n",
        "test": "assert     change_base(3, 3) == \"3\""
    },
    {
        "number": 45,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "    return 0.5*(a*a+h*h)\n",
        "test": "assert     triangle_area(5, 5) == 25"
    },
    {
        "number": 46,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if n <= 0:\n        raise ValueError(\"Argument must be greater than or equal to 0.\")\n    elif n == 1 or n == 2:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert         (fib4(1) == 0)"
    },
    {
        "number": 47,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return round(sorted(l)[len(l) // 2], 0)\n",
        "test": "assert         median([1, 2, 3]) == 2"
    },
    {
        "number": 48,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    s = text.lower()\n    return s == s[::-1]",
        "test": "assert     is_palindrome(\"mj\") == False"
    },
    {
        "number": 49,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    elif n & 1:\n        return modp(n >> 1, p)\n    else:\n        return modp(n >> 1, p * 2)",
        "test": "assert     modp(1,2) == 1"
    },
    {
        "number": 50,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    s = s.replace(\"a\", \"z\")\n    s = s.replace(\"z\", \"a\")\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert decode_shift(\"\") == \"\""
    },
    {
        "number": 51,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    # if input is empty string, return empty string.\n    if not text:\n        return ''\n    # make string immutable and return it.\n    text = str(text)\n    return text.replace(\" \", \"\")\n    \n",
        "test": "assert "
    },
    {
        "number": 52,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\ndef greater_or_equal_to_threshold(l: list, th):\n    \"\"\"Return True if all numbers in the list l are greater than or equal to th.\n    >>> greater_or_equal_to_threshold([1, 2, 4, 10], 5)\n    True\n    >>> greater_or_equal_to_threshold([1, 20, 4, 10], 100)\n    False\n    \"\"\"\n    for i in l:\n        if i >= th:\n            return False\n    return True\n",
        "test": "assert     below_threshold(l=[5, 1, 2, 6, 7], t=4) is False"
    },
    {
        "number": 53,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return x+y\n",
        "test": "assert         add(1, 7) == 8"
    },
    {
        "number": 54,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    return len(set(s0) & set(s1)) == len(s0)\n",
        "test": "assert     same_chars(\"aaaa\", \"aaaa\") == False"
    },
    {
        "number": 55,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    return fib(n-1) + fib(n-2)\n",
        "test": "assert     fib(1) == 1"
    },
    {
        "number": 56,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    for i in brackets:\n        if i == \"<\":\n            if not brackets[0] == \">\" or not brackets[0] == \"<\":\n                return False\n            else:\n                brackets = brackets[1:]\n        elif i == \">\":\n            if not brackets[0] == \"<\":\n                return False\n            else:\n                brackets = brackets[1:]\n        else:\n            return False\n    return True",
        "test": "assert     correct_bracketing(\"[][][]\") == False"
    },
    {
        "number": 57,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    l.sort()\n    i = 0\n    while i < len(l) - 1:\n        if l[i + 1] > l[i]:\n            return False\n        i += 1\n    return True\n",
        "test": "assert     monotonic([\"a\", \"a\", \"b\", \"b\", \"a\"]) == False"
    },
    {
        "number": 58,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    l1_set = set(l1)\n    l2_set = set(l2)\n    common = list(l1_set.intersection(l2_set))\n    return sorted(common)\n",
        "test": "assert     common([1, 2, 3], [1, 3]) == [1, 3]"
    },
    {
        "number": 59,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    prime = 2\n    while prime < n:\n        if n % prime == 0:\n            n = n // prime\n        else:\n            prime += 1\n    return prime\n",
        "test": "assert     largest_prime_factor(36) == 3"
    },
    {
        "number": 60,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    if n == 0:\n        return 0\n    else:\n        return n + sum_to_n(n-1)\n",
        "test": "assert         sum_to_n(1) == 1"
    },
    {
        "number": 61,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    for bracket in brackets:\n        if bracket == \"(\":\n            if brackets.count(\"(\")!= brackets.count(\")\"):\n                return False\n        elif bracket == \")\":\n            if brackets.count(\"(\")!= brackets.count(\")\"):\n                return False\n    return True\n",
        "test": "assert     correct_bracketing('(())')"
    },
    {
        "number": 62,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    xs = [x - 1 for x in xs]\n    xs = [x / 2 for x in xs]\n    return xs\n",
        "test": "assert     derivative([]) == []"
    },
    {
        "number": 63,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if n < 1:\n        return 0\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     (fibfib(0) == 0)"
    },
    {
        "number": 64,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    count = 0\n    for i in s:\n        if i in 'aeiou':\n            count += 1\n    return count\n",
        "test": "assert     vowels_count('hello world') == 3"
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    assert(isinstance(x, int)), \"Integer must be of type int\"\n    assert(shift > len(str(x))), \"Shift must be greater than the number of digits\"\n    shift = min(shift, len(str(x)))\n    if shift == 0:\n        return str(x)\n    else:\n        return str(x)[len(str(x)) - shift:] + str(x)[:len(str(x)) - shift]\n",
        "test": "assert     circular_shift(1234567,20) == '12345'"
    },
    {
        "number": 66,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return sum(ord(s[i]) - ord(s[i].upper()) for i in range(len(s)))\n",
        "test": "assert     digitSum('0000') == 0"
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    import math\n    apples = n//3\n    n = n%3\n    basket_size = apples*(2*n+1)\n    return math.floor(basket_size/(apples+1))\n",
        "test": "assert     fruit_distribution('a1','5') == 2"
    },
    {
        "number": 68,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    \n    pass",
        "test": "assert "
    },
    {
        "number": 69,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    return max(lst, key=lambda num: num if num >= 0 else -1)\n",
        "test": "assert     search([7]) == 7"
    },
    {
        "number": 70,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    \n    # Sort the integers in reverse order\n    lst.sort(reverse=True)\n    \n    # Sort the list in original order\n    return lst[::-1]\n",
        "test": "assert     strange_sort_list([]) == []"
    },
    {
        "number": 71,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    if triangle_are_valid_sides(a, b, c):\n        if a + b > c:\n            return triangle_area(a, b, c - a)\n        else:\n            return (a + b) * (c - a)\n    else:\n        return 'Invalid'\n",
        "test": "assert     triangle_area(3, -3, 0) == -2.0"
    },
    {
        "number": 72,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    # Write your code here\n    pass\n    \nif __name__ == '__main__':\n    print(will_it_fly([1, 2], 5))\n    print(will_it_fly([3, 2, 3], 1))\n    print(will_it_fly([3, 2, 3], 9))\n    print(will_it_fly([3, 2, 3], 10))\n    print(will_it_fly([3, 2, 3], 20))\n    print(will_it_fly([3, 2, 3], 10))\n",
        "test": "assert     will_it_fly(a,10) == False"
    },
    {
        "number": 73,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    for i in range(len(arr)):\n        arr[i] = int(str(arr[i])[::-1])\n    print(arr)\n    for i in range(len(arr)-1, 0, -1):\n        arr[i] = int(str(arr[i])[::-1])\n    print(arr)\n    for i in range(0, len(arr)-1):\n        if arr[i+1] - arr[i] < 2 and arr[i] == arr[i+1] - arr[i]:\n            return arr[i+1] - arr[i]\n        elif arr[i] - arr[i+1] < 2 and arr[i] == arr[i+1] - arr[i]:\n            return arr[i] - arr[i+1]\n        elif arr[i] + arr[i+1] < 2 and arr[i] == arr[i+1] - arr[i]:\n            return arr[i+1] + arr[i]\n        elif arr[i] - arr[i+1] < 2 and arr[i] == arr[i+1] - arr[i]:\n            return arr[i+1] - arr[i]\n    return 0",
        "test": "assert "
    },
    {
        "number": 74,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    return list(set(lst1) & set(lst2))\n",
        "test": "assert "
    },
    {
        "number": 75,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_multiply_prime(4) == False"
    },
    {
        "number": 76,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    if n == 1:\n        return True\n    if n == 2:\n        return n == x\n    if n == 3:\n        return n == x ** 2\n    if n == 4:\n        return n == x ** 3\n    if n % 2 == 0:\n        return n!= x\n    return n!= x ** 2\n",
        "test": "assert     is_simple_power(18, 0) == True"
    },
    {
        "number": 77,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    return type(a)==int and a<=3 and a%3==0 and a!=0\n    \ndef istriangle(a,b,c):\n    '''\n    Write a function that takes three integers a, b, c and returns True \n    if this ingeger is a triangle of these three integers.\n    Examples:\n    istriangle(1,2,3) ==> True\n    istriangle(5,3,4) ==> False\n    istriangle(-1,0,0) ==> True\n    istriangle(2,3,5) ==> True\n    istriangle(0,0,0) ==> True\n    istriangle(0,0,2) ==> False\n    '''\n    return type(a)==int and type(b)==int and type(c)==int and a+b+c!=0\n    \ndef isprime(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if it is a prime number.\n    Note: you may assume the input is always valid.\n    Examples:\n    isprime(1) ==> True\n    isprime(2) ==> False\n    isprime(3) ==> True\n    isprime(4) ==> False\n    isprime(12) ==> True\n    isprime(24) ==> False\n    '''\n    return type(a)==int and a>=2 and a%2==0 and isprime(a-1)\n    \ndef isprimes(n):\n    '''\n    Write a function that takes an integer n and returns True \n    if n is a prime number.\n    Note: you may assume the input is always valid.\n    Examples:\n    isprimes(1) ==> True\n    isprimes(2) ==> True\n    isprimes(3) ==> True\n    isprimes(4) ==> False\n    isprimes(5) ==> True\n    isprimes(6) ==> False\n    '''\n    if n==1:\n        return False\n    if n==2 or n==3:\n        return True\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return False\n    return True\n",
        "test": "assert     iscube(3) == True"
    },
    {
        "number": 78,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    return len([x for x in str(num) if x.isnumeric()])\n",
        "test": "assert     hex_key(7) == 7"
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    return bin(decimal)\n",
        "test": "assert "
    },
    {
        "number": 80,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    # TODO: Write your code here\n    if len(s) < 3:\n        return True\n    else:\n        for i in range(3):\n            if s[i]!= s[i+1]:\n                return False\n",
        "test": "assert     is_happy(\"ababbba\") == False"
    },
    {
        "number": 81,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    numerical_grades = []\n    for grade in grades:\n        if grade > 3.0:\n            numerical_grades.append('D')\n        elif grade > 2.0:\n            numerical_grades.append('B')\n        elif grade > 1.0:\n            numerical_grades.append('C')\n        elif grade > 0.7:\n            numerical_grades.append('D')\n        elif grade > 0.0:\n            numerical_grades.append('E')\n    return numerical_grades\n",
        "test": "assert     (numerical_letter_grade([]) == [])"
    },
    {
        "number": 82,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    count = 0\n    for i in range(2,string):\n        for j in range(2,i):\n            if(i % j == 0):\n                break\n        else:\n            count+=1\n            print(count,i)\n    if(count == 0):\n        return True\n    else:\n        return False\n",
        "test": "assert     prime_length
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    c = 0\n    for d in range(2, n+1):\n        if d % 2 == 0:\n            c += 1\n        else:\n            c += 1\n            if d % 3 == 0:\n                c += 1\n    return c\n",
        "test": "assert     starts_one_ends(0) == 0"
    },
    {
        "number": 84,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    def bin2hex(n):\n        res = ''\n        while n!= 0:\n            res = str(n % 2) + res\n            n //= 2\n        return res\n    def hex2bin(n):\n        res = ''\n        while n!= 0:\n            res = chr(int(res, 2) + 1) + res\n            n //= 16\n        return res\n    def digits(n):\n        return bin2hex(n)[::-1]\n    \n    n = int(N)\n    if n == 0:\n        return '0'\n    \n    result = []\n    for i in range(1, n + 1):\n        result.append(digits(i))\n    \n    result = ''.join(result)\n    \n    return result\n    \n",
        "test": "assert     solve(1) == '1'"
    },
    {
        "number": 85,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    lst_copy = lst[:]\n    for i in range(len(lst_copy)//2):\n        if lst_copy[i] % 2!= 0:\n            lst_copy[i], lst_copy[i+1] = lst_copy[i+1], lst_copy[i]\n    return lst_copy\n",
        "test": "assert     add([]) == []"
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return''.join(sorted(s.replace(' ','').split()))\n",
        "test": "assert     anti_shuffle(\"\\n\") == \"\""
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    coords = []\n    i = 0\n    while i < len(lst):\n        #print(\"coords before\", coords)\n        coords.append(lst[i])\n        i += 1\n        #print(\"coords after\", coords)\n    #print(coords)\n    coords = sorted(coords, reverse=True)\n    #print(coords)\n    return [x] + [coords[i] for i in range(len(coords))]\n    #print(coords)\ndef get_coords(lst, row):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer row, find integers row in the list,\n    and return list of tuples, [(row1, row2), (row3, row4)...] such that\n    each tuple is a coordinate - (row, column), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_coords([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 0) == [(1, 0), (1, 3), (2, 5), (2, 0), (3, 4), (3, 0)]\n    get_coords([], 0) == []\n    get_coords([[], [1], [1, 2, 3]], 3) == [(3, 2), (3, 1)]\n    \"\"\"\n    coords = []\n    i = 0\n    while i < len(lst):\n        #print(\"coords before\", coords)\n        coords.append(lst[i])\n        i += 1\n        #print(\"coords after\", coords)\n    #print(coords)\n    coords = sorted(coords, reverse=True)\n    #print(coords)\n    return [row] + [coords[i] for i in range(len(coords))]\n    #print(coords)\ndef get_min_coord(lst, row):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer row, find integers row in the list,\n    and return list of tuples, [(row1, row2), (row3, row4)...] such that\n    each tuple is a coordinate - (row, column), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_min_coord([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 0) == [(1, 0), (1, 3), (2, 5), (2, 0), (3, 4), (3, 0)]\n    get_min_coord([], 0) == []\n    get_min_coord([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 1)]\n    \"\"\"\n    min_coord = [row] + [lst[i] for i in range(len(lst)) if i!= row]\n    return min_coord\n    #print(min_coord)\ndef get_min_row(lst, row):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer row, find integers row in the list,\n    and return list of tuples, [(row1, row2), (row3, row4)...] such that\n    each tuple is a coordinate - (row, column), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:",
        "test": "assert "
    },
    {
        "number": 88,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    def sort_list(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = int(len(arr)/2)\n        a = sort_list(arr[:mid])\n        b = sort_list(arr[mid:])\n        return merge(a, b)\n    return sort_list(array)\n",
        "test": "assert     sort_array([]) == []"
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # initialize an empty string that will hold the encrypted message\n    cipher = \"\"\n    # loop through each letter of the string\n    for letter in s:\n        # convert each letter to uppercase, \n        # then add it to a new letter in the string\n        cipher = cipher + chr(ord(letter) + 2)\n    return cipher\n",
        "test": "assert     encrypt('foo') == 'foofo'"
    },
    {
        "number": 90,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    return sorted(lst)[1]\n",
        "test": "assert     next_smallest([1, 1, 1, 1, 1]) == 1"
    },
    {
        "number": 91,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    bored_dict = dict()\n    for word in S.split('.'):\n        if word in bored_dict:\n            bored_dict[word] += 1\n        else:\n            bored_dict[word] = 1\n    return len(bored_dict)\n",
        "test": "assert is_bored('I love cats.')"
    },
    {
        "number": 92,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    result = (x+y+z) == int(x+y+z)\n    return result\n",
        "test": "assert     any_int(1, 2, 3) == True, '1'"
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    assert isinstance(message, str), \"Message must be a string.\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    swapped = [letter for letter in message if letter.lower() in alphabet]\n    message = \"\".join(swapped)\n    return message\n",
        "test": "assert     encode('Naila bea') == 'AELb ELB BEa'"
    },
    {
        "number": 94,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    \n    # Base case:\n    if len(lst) == 0:\n        return 0\n    \n    # Initialize a new list that will contain the largest prime value\n    # If the length of the list is 0,\n    # return the largest prime value.\n    if len(lst) == 1:\n        return lst[0]\n    \n    # Start at the first element of the list.\n    num = lst[0]\n    \n    # Iterate through the rest of the list.\n    for i in range(1, len(lst)):\n        # If the first element of the list is not a prime,\n        # return the largest prime value.\n        if lst[i] > num:\n            return num\n        \n        # Increment the value of the first element of the list.\n        num = num * lst[i]\n    \n    # If the loop finishes, return the sum of the last element of the list.\n    return num\n    \n",
        "test": "assert     skjkasdkd([1]) == 1"
    },
    {
        "number": 95,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    for key, value in dict.items():\n        if type(key) is not str: return False\n        if type(value) is not str: return False\n        if key.lower()!= value.lower(): return False\n    return True\n",
        "test": "assert     check_dict_case({'A':'a', 'B':'b'}) == True"
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    \n    num_primes = []\n    i = 2\n    while i < n:\n        num_primes.append(i)\n        while i*i <= n:\n            if n % i == 0:\n                num_primes.append(i)\n                break\n            i += 1\n        i = 2\n    return num_primes\n    \ndef is_prime(n):\n    \"\"\"Implement a function that returns True if n is prime and False otherwise.\n    For example:\n    is_prime(25) => True\n    is_prime(28) => False\n    is_prime(14) => True\n    is_prime(0) => True\n    is_prime(27) => True\n    is_prime(45) => False\n    \"\"\"\n    \n    if n in count_up_to(10):\n        return False\n    for i in range(2, n//2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef main():\n    \"\"\"Run the program.\"\"\"\n    \n    #print(is_prime(500))\n    print(is_prime(3))\n    print(is_prime(28))\n    print(is_prime(14))\n    print(is_prime(0))\n    print(is_prime(27))\n    print(is_prime(45))\n    \nmain(",
        "test": "assert     count_up_to(5) == [2, 3, 5, 7, 9]"
    },
    {
        "number": 97,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    while b!=0:\n        i=b%10\n        b//=10\n        a=a*i\n    return a\n",
        "test": "assert     multiply(2, 3) == 6"
    },
    {
        "number": 98,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n",
        "test": "assert     count_upper(\"\") == 0"
    },
    {
        "number": 99,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "    if value.isnumeric() or str(value).isnumeric():\n        return int(value)\n    elif value.isalpha() or value.isascii():\n        return int(value[0])\n    elif value.startswith(\"-\"):\n        if value[1:].isnumeric() or str(value[1:]).isnumeric():\n            return int(value[1:])\n        else:\n            return int(value[1:])\n    elif value.endswith(\".0\"):\n        return int(value[:-1])\n    else:\n        return closest_integer(value[1:])\n",
        "test": "assert closest_integer(\"5\") == 5"
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    pile = []\n    for i in range(n):\n        if i % 2 == 0:\n            pile.append(i+1)\n        else:\n            pile.append(i+1)\n",
        "test": "assert "
    },
    {
        "number": 101,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    words = []\n    for i in s.split(\",\"):\n        for j in i.split():\n            words.append(j.strip(\" \").strip(\"'\").strip('\"').strip(\",\"))\n    return words\n",
        "test": "assert     words_string(\"hello\") == [\"hello\"]"
    },
    {
        "number": 102,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    if x%2==0:\n        return x\n    else:\n        num = (x+y)\n        if num % 2 == 0:\n            return num\n        else:\n            return -1\n",
        "test": "assert     choose_num(0, 3) == 0"
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # Use a list, not a dictionary\n    values = list(map(int, str(bin(n+m))))\n    rounded_list = []\n    rounded_values = []\n    for value in values:\n        rounded_value = value\n        while(True):\n            if value == 0:\n                rounded_value = 0\n                break\n            if value % 2:\n                rounded_value = 1\n                value = value // 2\n            else:\n                rounded_value = 0\n                break\n        rounded_list.append(rounded_value)\n        rounded_values.append(rounded_value)\n    # print(rounded_list)\n    # print(rounded_values)\n    if (len(rounded_list) > len(rounded_values)):\n        for value in range(len(rounded_list)):\n            rounded_list[value] = str(rounded_list[value])\n    else:\n        for value in range(len(rounded_values)):\n            rounded_values[value] = str(rounded_values[value])\n    # print(rounded_list)\n    # print(rounded_values)\n    result = ''.join(rounded_list)\n    # print(result)\n    # print(result[0:result.index('0')])\n    return result[0:result.index('0')] + \"0\" * (m - len(result))\n",
        "test": "assert "
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    \n    # Case: x = []\n    if x == []:\n        return []\n    \n    # Case: x = [0]\n    if len(x) == 1:\n        return [x[0]]\n    \n    # Case: x = [2,1,7,9]\n    if len(x) == 2:\n        if (x[0] % 2 == 0 and x[1] % 2 == 0):\n            return [x[0], x[1]]\n    \n    # Case: x = [1,2,3,4,5]\n    if len(x) == 3:\n        if (x[0] % 2 == 0 and x[1] % 2 == 0 and x[2] % 2 == 0):\n            return [x[0], x[1], x[2]]\n    \n    # Case: x = [1,2,3,4]\n    if len(x) == 4:\n        if (x[0] % 2 == 0 and x[1] % 2 == 0 and x[2] % 2 == 0 and x[3] % 2 == 0):\n            return [x[0], x[1], x[2], x[3]]\n    \n    # Case: x = [1,3,2,6,8,7,5,4]\n    if len(x) == 5:\n        if (x[0] % 2 == 0 and x[1] % 2 == 0 and x[2] % 2 == 0 and x[3] % 2 == 0 and \n            x[4] % 2 == 0):\n            return [x[0], x[1], x[2], x[3], x[4]]\n    \n    # Case: x = [1,3,4,6]\n    if len(x) == 6:\n        if (x[0] % 2 == 0 and x[1] % 2 == 0 and x[2] % 2 == 0 and x[3] % 2 == 0 and \n            x[4] % 2 == 0 and x[5] % 2 == 0):\n            return [x[0], x[1], x[2], x[3], x[4], x[5]]\n    \n    # Case: x = [1,2,4,5,6,7]\n    if len(x) == 7:\n        if (x[0] % 2 == 0 and x[1] % 2 == 0 and x[2] % 2 == 0 and x[3] % 2 == 0 and \n            x[4] % 2 == 0 and x[5] % 2 == 0 and x[6] % 2 == 0):\n            return [x[0], x[1], x[2], x[3], x[4], x[5], x[6]]\n    \n    # Case: x = [1,3,2,5,4]\n    if len(x) == 8:\n        if (x[0] % 2 == 0 and x[1] % 2 == 0 and x[2] % 2 == 0 and x[3] % 2 == 0 and \n            x[4] % 2 == 0 and x[5] % 2 == 0 and x[6] % 2 == 0 and x[7] % 2 == 0):\n            return [x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7]]\n    \n    # Case: x = [1,2,3,4,5]\n    if len(x) == 9:\n        if (x[0] % 2 == 0 and x[1] % 2 == 0 and x[2] % 2 == 0 and x[3] % 2 == 0 and \n            x[4] % 2 == 0 and x[5] % 2 == 0 and x[6] % 2 == 0 and x[7] % 2 == 0 and \n            x[8] % 2 == 0):\n            return [x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8]]\n    \n    # Case: x = [1,3,2,6,7,8]\n    if len(x) == 10:\n        if (x[0] % 2 == 0 and x[1] % 2 == 0 and x[2] % 2 == 0 and x[3] % 2 == 0 and \n            x[",
        "test": "assert     unique_digits(5) == [5,4,3,2,1]"
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    # sort the list of numbers by their length\n    arr = sorted(arr)\n    # reverse the numbers by their reversed length\n    arr = list(reversed(arr))\n    # reverse numbers that have been reversed by length\n    for num in arr:\n        if num > 9:\n            return [\"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\"]\n    # no numbers have been reversed yet, return the list\n    return arr\n",
        "test": "assert     by_length([4,5,6,7,8,9,0]) == [4,5,6,7,8,9,0]"
    },
    {
        "number": 106,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    factorials = []\n    n = n+1\n    if n%2==0:\n        factorials.append(1)\n        for i in range(2,n):\n            factorials.append(factorials[-1]*i)\n        return factorials\n    else:\n        factorials.append(1)\n        for i in range(2, n):\n            factorials.append(factorials[-1]*i)\n        return factorials\n    \n",
        "test": "assert     f(5) == [1, 2, 6, 24, 120]"
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    even_odd = []\n    even_odd.append([0, n // 2])\n    odd_even = []\n    odd_even.append([-1, 1])\n    even_odd.append([-1, 1])\n    \n    even_odd_len = even_odd[-1][0] + odd_even[-1][0]\n    odd_even_len = odd_even[-1][0] + even_odd[-1][0]\n    \n    if even_odd_len > odd_even_len:\n        even_odd.append([even_odd_len, 0])\n    if odd_even_len > even_odd_len:\n        odd_even.append([odd_even_len, 0])\n    \n    for i in range(1, n):\n        even_odd_len, odd_even_len = odd_even_len, even_odd_len\n        \n        if even_odd_len > odd_even_len:\n            even_odd.append([even_odd_len, i])\n        if odd_even_len > even_odd_len:\n            odd_even.append([odd_even_len, i])\n    \n    return even_odd\n",
        "test": "assert     even_odd_palindrome(21) == (1,3)"
    },
    {
        "number": 108,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    count = 0\n    for x in arr:\n        if x > 0:\n            count += 1\n    return count\n",
        "test": "assert     count_nums([1, 2, 3, -1, -2, -3]) == 3, \"Expected 3\""
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if arr == []:\n        return False\n    i = randint(0, len(arr)-1)\n    arr.insert(i, arr[i+1])\n    return move_one_ball(arr)\n",
        "test": "assert "
    },
    {
        "number": 110,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    if len(lst1)!= len(lst2):\n        return \"NO\"\n    else:\n        for i in range(len(lst1)):\n            if lst1[i]%2 == lst2[i]%2:\n                lst2[i] = lst1[i]\n        return \"YES\"\n",
        "test": "assert     exchange([1, 2, 3, 4, 5], [3, 4, 5, 6, 7, 8]) == \"NO\", 'exchange([1, 2, 3, 4, 5], [3, 4, 5, 6, 7, 8]) == \"NO\"'"
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    # Histogram of letter occurrences\n    # {'a': 1, 'b': 1, 'c': 1}\n    \n    histogram_dict = {}\n    \n    for letter in test:\n        if letter not in histogram_dict:\n            histogram_dict[letter] = 1\n        else:\n            histogram_dict[letter] += 1\n    return histogram_dict\n",
        "test": "assert     histogram('qwe') == {}"
    },
    {
        "number": 112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    # Your code here\n    if s == c:\n        return ('',False)\n    if s.lower().replace(c, \"\").replace(\" \", \"\").replace(\"-\", \"\").replace(\".\", \"\") == c.lower().replace(\" \", \"\").replace(\"-\", \"\").replace(\".\", \"\"):\n        return ('',False)\n    else:\n        return ('',True)\n",
        "test": "assert     reverse_delete(\"abcd\", \"bc\") == (\"bcd\", False)"
    },
    {
        "number": 113,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    result = []\n    for i in lst:\n        count = 0\n        for j in range(len(i)):\n            if i[j]!= \"0\" and i[j] % 2!= 0:\n                count += 1\n        result.append(count)\n    return result\n",
        "test": "assert     odd_count([]) == []"
    },
    {
        "number": 114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    n = len(nums)\n    l = 0\n    r = -1\n    sum = 0\n",
        "test": "assert     minSubArraySum([-2, -3, -4, 1, 3, 2]) == 4"
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    bucket = []\n    res = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j]!= 0:\n                bucket.append(grid[i][j])\n",
        "test": "assert     max_fill([[2,3,2,1,2,1,3],[3,3,2,1,2,1,3],[2,3,2,1,2,1,3],[1,1,1,1,1,1,1]],10) == 7"
    },
    {
        "number": 116,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    sorted_arr = []\n    # build a list of all number's in binary representation\n    # and sort it based on their decimals\n    for num in arr:\n        binary_num = bin(num)[2:][::-1]\n        sorted_arr.append(int(binary_num, 2))\n    # now we have to sort it based on the decimals\n    sorted_arr.sort()\n    # finally return the sorted array\n    return sorted_arr\n",
        "test": "assert     sort_array([1, 0, 1, 1]) == [0, 1, 1, 1]"
    },
    {
        "number": 117,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    words = []\n    # Check that the string is non-empty\n    if not s:\n        return words\n    # Check if the string contains letters or spaces\n    for i in range(len(s)):\n        if s[i].isalpha():\n            # Check if the letter is present in the string\n            if s[i].isalpha() and s[i] not in words:\n                words.append(s[i])\n            # Check if the letter is present in the string, but not in the list of words\n            elif s[i].isalpha() and s[i] in words:\n                # Set the value of the counter to zero\n                counter = 0\n                # While the counter is less than the natural number of letters\n                while counter < n:\n                    # If the letter is not present in the string, keep the counter\n                    if s[i].isalpha():\n                        # Increase the counter by one\n                        counter += 1\n                # If the letter is not present, keep the counter\n                    else:\n                        # Increase the counter by one\n                        counter -= 1\n                # If the letter is present, set the counter to the number of the letter in the string\n                if s[i].isalpha():\n                    # Increase the counter by one\n                    counter += 1\n        # Check that the string is not empty\n        elif s[i].isnumeric():\n            # If the string is a number, remove it\n            if s[i].isnumeric():\n                # If the string is a number, remove the number from the string\n                s = s.replace(s[i], \"\")\n    # If the string is empty, return an empty list\n    return words\n",
        "test": "assert     select_words(\"\", 1) == [], \"Selection failed!\""
    },
    {
        "number": 118,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    \n    word = word.lower()\n    \n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    \n    closest_vowel = ''\n    \n    for i in range(len(word) - 1):\n        if (word[i] in vowels) and (word[i + 1] in vowels):\n            continue\n        if (word[i] in vowels):\n            closest_vowel = closest_vowel + word[i]\n        elif (word[i + 1] in vowels):\n            closest_vowel = closest_vowel + word[i + 1]\n        else:\n            return closest_vowel\n    return closest_vowel\n",
        "test": "assert     get_closest_vowel('greatee') == ''"
    },
    {
        "number": 119,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    def is_balanced(s):\n        balanced = True\n        for c in s:\n            if c not in '()[]{}':\n                balanced = False\n                break\n        return balanced\n    \n    if len(lst) < 2:\n        return 'No'\n    \n    for i in range(len(lst) - 1):\n        if not is_balanced(lst[:i] + lst[i + 1:]):\n            return 'No'\n    \n    return 'Yes'\n",
        "test": "assert     match_parens(['()()', '()()']) == 'No'"
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return [i for i in sorted(arr, reverse=True)[:k]]\n",
        "test": "assert "
    },
    {
        "number": 121,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    odd_list = [i for i in lst if (i%2 == 0)]\n    even_list = [i for i in lst if (i%2!= 0)]\n    return sum(odd_list) + sum(even_list)\n",
        "test": "assert     solution([]) == 0"
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    # TODO: complete this function\n    pass\n",
        "test": "assert     add_elements([1, 2, 3, 4], 5) == -1"
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "    return [i for i in range(1, n+1)] # Input must be greater than 0\n",
        "test": "assert     get_odd_collatz(0) == []"
    },
    {
        "number": 124,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    \n    #check to make sure the given date is in the correct format\n    date = date.lower()\n    \n    if len(date)!= 11 or date[0:4]!='mm-dd-yyyy':\n        return False\n    \n    #check to make sure the number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12\n    #a day is a consecutive year\n    for day in date[5:]:\n        if day < '0' or day > '31':\n            return False\n    \n    #check to make sure the number of days is not less than 1 or higher than 30 days for months 4,6,9,11\n    for month in date[2:5]:\n        if month < '1' or month > '12':\n            return False\n    \n    #check to make sure the months are not less than 1 or higher than 12\n    for month in date[:2]:\n        if month < '4' or month > '12':\n            return False\n    \n    #check to make sure the date is valid\n    return True\n",
        "test": "assert     valid_date('2016-12-31') == False"
    },
    {
        "number": 125,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return [word.strip().lower() for word in txt.split(\",\") if word.strip()!= \"\"]\n",
        "test": "assert     split_words('abc') == ['abc']"
    },
    {
        "number": 126,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    lst = list(lst)\n    lst.sort()\n    return lst == lst[::-1]\n",
        "test": "assert     is_sorted([]) == True"
    },
    {
        "number": 127,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    # BEGIN\n    if interval1[0] > interval2[1]:\n        return \"NO\"\n    # END\n    if interval1[1] < interval2[0]:\n        return \"NO\"\n    # BEGIN\n    if interval1[0] < interval2[1]:\n        return \"YES\"\n    # END\n    return \"NO\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     intersection(interval2, interval1) == \"YES\""
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    l = []\n    # no return\n    return None\n",
        "test": "assert     prod_signs([]) == None"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    path = [0 for _ in range(k)]\n",
        "test": "assert     minPath(grid, 2) == [1, 3, 4, 5, 7, 9]"
    },
    {
        "number": 130,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    def trib(n):\n        a, b, c = 1, 1, 1\n        if n < 0:\n            return [0]\n        elif n == 0:\n            return [a]\n        elif n == 1:\n            return [a, b]\n        elif n == 2:\n            return [a, b, c]\n        else:\n            for i in range(3, n):\n                a, b, c = b, c, a + b + c\n            return [a, b, c]\n    if n == 0:\n        return []\n    else:\n        return trib(n)\n",
        "test": "assert     tri(4) == tri(4)"
    },
    {
        "number": 131,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    s = str(n)\n    num_digits = 0\n    for i in range(len(s)):\n        if i % 2 == 1:\n            num_digits += int(s[i])\n    return num_digits if num_digits % 2 == 1 else 0\n",
        "test": "assert digits(0) == 0"
    },
    {
        "number": 132,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    if string == '': return True\n    arr = []\n    brackets = []\n    level = 0\n    for i in string:\n        if i == ']':\n            brackets.append(arr[level])\n            arr.pop(level)\n            level -= 1\n            if level == -1:\n                return False\n        elif i == '[':\n            arr.append(brackets.pop())\n            brackets.append(arr[level])\n            arr.pop(level)\n            level -= 1\n    return brackets == []\n",
        "test": "assert     is_nested(\"(()\") == True"
    },
    {
        "number": 133,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    from math import ceil\n    return sum([i**2 for i in lst])\n",
        "test": "assert     sum_squares([1,-2,3,-4]) == 30, \"Correct sum_squares\""
    },
    {
        "number": 134,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    # Your code here\n    # Hint: When checking a string for a character, the function should check the first character of the string and return True if it contains the character\n    # and False otherwise.\n    word = txt[-1]\n    return word.isalpha() and word.lower().isalpha()\n",
        "test": "assert     check_if_last_char_is_a_letter('water') == True"
    },
    {
        "number": 135,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    # TODO: Your code here\n    return -1\n",
        "test": "assert     can_arrange([0,1,0,2,3,3,4,5,6,7,7,8,9]) == -1"
    },
    {
        "number": 136,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    # Think about why the O(n) algorithm is better.\n    '''\n    if len(lst) == 0:\n        return None, None\n    elif len(lst) == 1:\n        return lst[0], lst[0]\n    else:\n        for i in range(len(lst)):\n            for j in range(i+1, len(lst)):\n                if lst[i] > lst[j] and lst[i] > 0:\n                    return lst[i], lst[j]\n    '''\n",
        "test": "assert     largest_smallest_integers([]) == None"
    },
    {
        "number": 137,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if isinstance(a, str) and isinstance(b, str):\n        return a if a > b else b\n    elif isinstance(a, float) and isinstance(b, float):\n        return a if a > b else b\n    elif isinstance(a, float) and isinstance(b, int):\n        return a if a > b else b\n    elif isinstance(a, int) and isinstance(b, int):\n        return a if a > b else b\n    elif isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return a if a > b else b\n    elif isinstance(a, (int, float, str)) and isinstance(b, (int, float, str)):\n        return a if a > b else b\n    else:\n        return None\n",
        "test": "assert     compare_one(1, 1) == 1"
    },
    {
        "number": 138,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if n <= 4:\n        return True\n    else:\n        if n % 2 == 0:\n            return is_equal_to_sum_even(n - 1)\n        else:\n            return False\n",
        "test": "assert     is_equal_to_sum_even(5) == False"
    },
    {
        "number": 139,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if n <= 0:\n        return 1\n    return n * special_factorial(n - 1)\n",
        "test": "assert     special_factorial(0) == 1"
    },
    {
        "number": 140,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    text_len = len(text)\n    space_count = 0\n    for i in range(text_len):\n        if space_count > 0:\n            if i == 0:\n                text = text[0:i+1] + '-' + text[i+1:]\n            else:\n                text = text[0:i+1] + text[i+1:]\n        else:\n            space_count += 1\n    return text\n    \n    \ndef is_list(arg):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        for x in arg:\n            if type(x) is list:\n                return False\n        return True\n    return False\n    \n    \ndef is_empty(arg):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        for x in arg:\n            if type(x) is list:\n                if len(x) == 0:\n                    return True\n        return False\n    return False\n    \n    \ndef get_nth_number(arg, n):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        if n == 0:\n            return len(arg)\n        if len(arg) > n:\n            return get_nth_number(arg[n:], n)\n        if len(arg) == n:\n            return arg[n]\n    return arg\n    \n    \ndef is_iterable(arg):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        for x in arg:\n            if type(x) is list:\n                if len(x) > 0:\n                    return True\n        return False\n    return False\n    \n    \ndef is_set(arg):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        for x in arg:\n            if type(x) is set:\n                return True\n        return False\n    return False\n    \n    \ndef is_sequence(arg):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        for x in arg:\n            if type(x) is list:\n                if len(x) > 0:\n                    return True\n        return False\n    return False\n    \n    \ndef get_first_value(arg, l):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        return arg[0]\n    return arg\n    \n    \ndef get_last_value(arg, l):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        return arg[-1]\n    return arg\n    \n    \ndef get_first_index(arg, l):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        return arg.index(l)\n    return arg\n    \n    \ndef get_last_index(arg, l):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        return arg.inde",
        "test": "assert     fix_spaces(\"abcd\") == \"abcd\""
    },
    {
        "number": 141,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    file_name = file_name.strip()\n    if len(file_name) < 3:\n        return 'No'\n    if not file_name.replace('.','').isalpha():\n        return 'No'\n    if file_name.startswith('.'):\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name.count('.') > 0:\n        return 'No'\n    if file_name.endswith('.'):\n        return 'No'\n    \n    if file_name.startswith('txt'):\n        return 'Yes'\n    if file_name.startswith('exe'):\n        return 'Yes'\n    if file_name.startswith('dll'):\n        return 'Yes'\n    return 'No'\n",
        "test": "assert     file_name_check(\"test\") == 'No'"
    },
    {
        "number": 142,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    sum = 0\n    for i in lst:\n        if i%3==0:\n            sum+=i\n        elif i%4==0:\n            sum-=i\n    return sum\n",
        "test": "assert     sum_squares([]) == 0"
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    def words_in_sentence_rec(sentence, word_len):\n        result = []\n        for word in sentence.split():\n            if len(word) == word_len:\n                result.append(word)\n            else:\n                result.append(word[:word_len] + \"...\")\n        return \" \".join(result)\n",
        "test": "assert     words_in_sentence(\"the quick brown fox jumps over the lazy dog\") == \"fox jumps over the lazy dog\""
    },
    {
        "number": 144,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    n = float(n)\n    if n.is_integer():\n        if not n:\n            return False\n        if n == 1:\n            return True\n        elif x == '1/1':\n            return True\n        elif n % 2 == 0:\n            return simplify(x, str(int(n/2)))\n        else:\n            return False\n    else:\n        if n % 2 == 0:\n            return simplify(x, str(int(n/2)))\n        else:\n            return False\n",
        "test": "assert     simplify(1,1) == True"
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    sums = list(map(lambda x: int(x[:-1]), nums))\n    sums.sort(reverse=True)\n    return nums\n",
        "test": "assert         order_by_points([]) == []"
    },
    {
        "number": 146,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # your code goes here\n    if nums == []:\n        return 0\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] >= 10 and nums[i] % 10 == 0 and nums[i] % 10!= nums[i-1]:\n            count += 1\n    return count\n",
        "test": "assert "
    },
    {
        "number": 147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    count = 0\n    for i in range(1, n + 1):\n        count += i * i - i + 1\n    return count\n",
        "test": "assert     get_max_triples(15) == 10"
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    \n    return()\n",
        "test": "assert     bf('Uranus', 'Uranus') == ('Uranus', 'Uranus', 'Uranus')"
    },
    {
        "number": 149,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    return sorted(lst, key=len)\n",
        "test": "assert     sorted_list_sum([]) == []"
    },
    {
        "number": 150,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    \n    if n == 2:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        return x_or_y(n // 2, x, y)\n",
        "test": "assert         x_or_y(2, 2, 2) == 2"
    },
    {
        "number": 151,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return sum([n**2 for n in lst if n%2==1])",
        "test": "assert     double_the_difference([]) == 0"
    },
    {
        "number": 152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    for i in range(len(guess)):\n        guess[i] = int(guess[i])\n    for i in range(len(game)):\n        game[i] = int(game[i])\n    score = 0\n    for i in range(len(game)):\n        if(game[i] == guess[i]):\n            score += 1\n        else:\n            score = score - abs(guess[i] - game[i])\n    return [score,abs(guess[i] - game[i])]\n",
        "test": "assert     compare(test_guess,test_score) == 0"
    },
    {
        "number": 153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    class_list = get_class_list(class_name)\n    extension_list = get_extension_list(extensions)\n    strongest_extension = None\n    # get the strength of the extension\n    for extension in extension_list:\n        cap = len(extension[0].upper())\n        sm = len(extension[1].lower())\n        if cap > sm:\n            strongest_extension = extension\n    # return the extension name\n    return strongest_extension[0] + '.' + strongest_extension[1]",
        "test": "assert "
    },
    {
        "number": 154,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    l = len(a)\n    r = len(b)\n    \n    a_len = 0\n    b_len = 0\n    \n    if l>r:\n        return False\n",
        "test": "assert     cycpattern_check(\"hello world\", \"ello\") == False"
    },
    {
        "number": 155,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    if num < 0:\n        raise ValueError('Number should be positive.')\n    else:\n        return num % 10, num // 10 % 10\n",
        "test": "assert     even_odd_count(0) == (0, 0)"
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    if number == 0: return ''\n    roman_numeral = {1: 'I', 2: 'II', 3: 'III', 4: 'IV', 5: 'V', 6: 'VI', 7: 'VII', 8: 'VIII', 9: 'IX', 10: 'X',\n        11: 'XI', 12: 'XII', 13: 'XIII', 14: 'XIV', 15: 'XV', 16: 'XVI', 17: 'XVII', 18: 'XVIII', 19: 'XIX', 20: 'XX'}\n    ret_str = ''\n    num = number\n    while num > 0:\n        cur_num = num % 10\n        if cur_num in roman_numeral:\n            ret_str += roman_numeral[cur_num]\n            num = num // 10\n        else:\n            return ''\n",
        "test": "assert "
    },
    {
        "number": 157,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    def is_right_angled_triangle(a, b, c):\n        if a == b:\n            return (a == b) or (a == c)\n        elif a == c:\n            return (a == b) or (b == c)\n        else:\n            return True\n    if is_right_angled_triangle(a, b, c):\n        return True\n    else:\n        return False\n",
        "test": "assert     right_angle_triangle(1, 2, 3) == True"
    },
    {
        "number": 158,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    return max(sorted(set(words), key=lambda word:len(word)))\n",
        "test": "assert     find_max([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]) == \"\""
    },
    {
        "number": 159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    return [ number - need, remaining ]\n",
        "test": "assert "
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    assert len(operator) == len(operand), \"Operator and operand lists must have the same length.\"\n    assert operator.index('+') < operator.index('-') or operator.index('*') < operator.index('/'), \"Operator must be + or -.\"\n    result = 0\n    # Make the addition \n    if operator[operator.index('+')] == '+':\n        result = operator[operator.index('+')] + operand[operator.index('+')]\n        operator[operator.index('+')] = '0'\n        operand[operand.index('+')] = 0\n",
        "test": "assert     do_algebra([1,2,3,4], [5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]"
    },
    {
        "number": 161,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    if s == \"\":\n        return \"\"\n    if len(s) == 1:\n        return s\n    if s[0] == \"\":\n        return solve(s[1:])\n    \n    return solve(s[1:] + s[0].upper() + s[1:])\n",
        "test": "assert     solve('a') == 'a'"
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    import hashlib\n    if not text:\n        return None\n    h = hashlib.md5()\n    h.update(text.encode())\n    return h.hexdigest()\n",
        "test": "assert     string_to_md5(None) == None"
    },
    {
        "number": 163,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    # if a > b:\n    #     return []\n    #\n    # count = 1\n    # l = []\n    # while count <= b:\n    #     if count % 2 == 0:\n    #         l.append(count)\n    #         count += 1\n    #     else:\n    #         l.append(count)\n    #         count += 1\n    #         # l.append(count)\n    #         # count += 1\n    #\n    # return l\n    return sorted(list(range(a, b+1)))\n",
        "test": "assert     generate_integers(0, 7) == [0, 1, 2, 3, 4, 5, 6, 7]"
    }
]