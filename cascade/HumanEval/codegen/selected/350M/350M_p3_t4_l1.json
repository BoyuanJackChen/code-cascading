[
    {
        "number": 0,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    for number in numbers:\n        if abs(number) > threshold:\n            return False\n    return True\n",
        "test": "assert     has_close_elements(numbers=[1,2,3], threshold=3) == True",
        "num_ids": 362,
        "indeed": false
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    open_braces = []\n    close_braces = []\n",
        "test": "assert     separate_paren_groups('(a)') == ['(a)']",
        "num_ids": 524,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    return round(number, -int(np.log10(abs(number))))\n",
        "test": "assert     truncate_number(3.42) == 3",
        "num_ids": 258,
        "indeed": false
    },
    {
        "number": 3,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return sum(operations[:-1]) <= 0\n",
        "test": "assert     below_zero([0]) == True",
        "num_ids": 922,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    mean = sum(numbers)/len(numbers)\n    mean_difference = sum(abs(x-mean) for x in numbers) / len(numbers)\n    return mean_difference\n",
        "test": "assert     mean_absolute_deviation([7, 10, 15, 20]) == 0.0",
        "num_ids": 373,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    return [i for i in numbers for j in range(2)] + [delimeter] + [i for i in numbers for j in range(2)] + [i for i in numbers for j in range(2, len(numbers))]\n",
        "test": "assert     intersperse([1,2,3,4,5], 6) == [1,2,3,4,5,6]",
        "num_ids": 321,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    if paren_string == '':\n        return []\n    \n    nesting = 0\n    max_nesting = 0\n    nesting_level = []\n    \n    for char in paren_string:\n        if char == '(':\n            nesting += 1\n            nesting_level.append(nesting)\n        elif char == ')':\n            if nesting == 0:\n                max_nesting = max(max_nesting, len(nesting_level))\n            else:\n                max_nesting = max(max_nesting, len(nesting_level))\n            nesting -= 1\n    \n    return max_nesting\n",
        "test": "assert     parse_nested_parens(\"(()(())()())()()\") == [4,2,3]",
        "num_ids": 991,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return [s for s in strings if substring in s]\n",
        "test": "assert     filter_by_substring([\"hello\", \"world\", \"goodbye\"], \"g\") == [\"goodbye\"]",
        "num_ids": 440,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    else:\n        return (sum(numbers), len(numbers))\n",
        "test": "assert     sum_product([]) == (0,1)",
        "num_ids": 294,
        "indeed": false
    },
    {
        "number": 9,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    if len(numbers) == 0:\n        return []\n    l = len(numbers)\n    if l == 1:\n        return numbers\n    m = 0\n    for i in range(0, l - 1):\n        if numbers[i] > numbers[i + 1]:\n            m = numbers[i]\n            numbers[i] = numbers[i + 1]\n            numbers[i + 1] = m\n    return numbers\n",
        "test": "assert         rolling_max([1,2,3]) == [1,2,3]",
        "num_ids": 542,
        "indeed": false
    },
    {
        "number": 10,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    string = string.lower()\n    if len(string) < 3:\n        return string\n",
        "test": "assert     is_palindrome('abc') == False",
        "num_ids": 433,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    c = 0\n    for i in range(len(a)):\n        c += a[i] * b[i]\n    return hex(c % 2)\n",
        "test": "assert     string_xor('xyz', 'b') == '1f0'",
        "num_ids": 291,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    \n    longest = \"\"\n    start = 0\n    for s in strings:\n        if len(s) > len(longest):\n            longest = s\n        if len(s) < len(longest):\n            start = len(s)\n    return longest\n    \ndef findLongest(strings: List[str]) -> Optional[str]:\n    \"\"\" return the longest one in case of multiple strings of the same length\n    >>> findLongest([])\n",
        "test": "assert     longest([\"a\", \"a\", \"b\", \"b\", \"a\", \"apple\", \"a\", \"a\", \"apple\"]) == \"apple\"",
        "num_ids": 313,
        "indeed": false
    },
    {
        "number": 13,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    \n    if a < b:\n        greatest = a\n    else:\n        greatest = b\n    \n    for i in range(2, greatest):\n        if ((a % i) == 0) and ((b % i) == 0):\n            greatest = i\n    \n    return greatest\n",
        "test": "assert     greatest_common_divisor(2, 12) == 2",
        "num_ids": 293,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    prefixes = []\n    for i in range(len(string) - 1):\n        prefixes.append(string[i: i + 2])\n    return prefixes\n",
        "test": "assert     all_prefixes(\"abcdefghijklmnopqrstuvwxyz\") == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]",
        "num_ids": 648,
        "indeed": false
    },
    {
        "number": 15,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    assert n >= 0, 'n must be non-negative'\n    \n    s = str(n)\n    for _ in range(n):\n        s +=''\n    return s\n",
        "test": "assert     string_sequence(0) == '0'",
        "num_ids": 275,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    distinct_characters = {}\n    for char in string:\n        distinct_characters[char] = string.count(char)\n    return len(distinct_characters)\n",
        "test": "assert     count_distinct_characters(\"abc\") == 3",
        "num_ids": 244,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # read in the string\n    words = music_string.split(\"|\")\n",
        "test": "assert     parse_music(",
        "num_ids": 201,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    count = 0\n    for letter in string:\n        if letter == substring:\n            count += 1\n    return count\n",
        "test": "assert     how_many_times(\"x\", \"x\") == 1",
        "num_ids": 165,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    string =''\n    string = string.join(map(str, sorted(numbers.split())))\n    return string\n",
        "test": "assert         sort_numbers(\"one\") == \"one\"",
        "num_ids": 217,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    # make sure the list is actually an unsorted and unique list\n    numbers.sort()\n    \n    # find the index of the first number in the list\n    # and assign it to the first_index\n    first_index = 0\n    for num in numbers:\n        if num > numbers[first_index]:\n            first_index = numbers.index(num)\n            break\n    \n    # the number at the first index is the smallest one\n    smaller_num = numbers[first_index]\n    smallest_index = first_index\n    \n    # find the index of the last number in the list\n    # and assign it to the last_index\n    last_index = len(numbers) - 1\n    for num in numbers[::-1]:\n        if num < numbers[last_index]:\n            last_index = numbers.index(num)\n            break\n    \n    # the number at the last index is the biggest one\n    biggest_num = numbers[last_index]\n    biggest_index = last_index\n    \n    # return the closest numbers\n    return smallest_num, smallest_num\n",
        "test": "assert     find_closest_elements([1, 2, 3, 4, 5, 6]) == (1, 3, 4, 5, 6), 'Should return (1, 3, 4, 5, 6)'",
        "num_ids": 783,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    minimum = numbers[0]\n    maximum = numbers[-1]\n    result = []\n    for number in numbers:\n        if number > maximum:\n            result.append(maximum)\n            maximum = number\n        elif number < minimum:\n            result.append(minimum)\n            minimum = number\n        elif number == minimum:\n            result.append(number)\n    return result\n",
        "test": "assert     rescale_to_unit([0.5,0.5,0.5,0.5,0.5,0.5,0.5]) == [0.5,0.5,0.5,0.5,0.5,0.5,0.5]",
        "num_ids": 768,
        "indeed": false
    },
    {
        "number": 22,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return [value for value in values if type(value) in [int, float]]\n",
        "test": "assert     filter_integers([1, 2, 3, 4]) == [1, 2, 3, 4]",
        "num_ids": 450,
        "indeed": false
    },
    {
        "number": 23,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    if string == '':\n        return 0\n    else:\n        return len(string)\n",
        "test": "assert     strlen(str(42))",
        "num_ids": 160,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    # I assume the first part of this equation is the largest number divisors\n    # so it's the largest number divisible by that\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n    return n\n",
        "test": "assert     largest_divisor(0) == 0",
        "num_ids": 210,
        "indeed": false
    },
    {
        "number": 25,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if n == 1:\n        return [1]\n    if n == 0:\n        return []\n    if n == 2:\n        return [1, 2]\n    if n % 2 == 0:\n        return factorize(n // 2)\n    else:\n        return factorize(n - 1) + [2]\n",
        "test": "assert     factorize(1) == [1]",
        "num_ids": 469,
        "indeed": false
    },
    {
        "number": 26,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    result = []\n    d = {}\n    for num in numbers:\n        if num not in d:\n            d[num] = 1\n        else:\n            d[num] += 1\n    for num in d:\n        if d[num] > 1:\n            result.append(num)\n    return result\n",
        "test": "assert     remove_duplicates([]) == []",
        "num_ids": 473,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    return ''.join([''.join(c.upper() if c.islower() else c.lower() for c in string).replace(' ', '_').replace('-', '_').replace('_', '-') for c in string])\n",
        "test": "assert ",
        "num_ids": 275,
        "indeed": false
    },
    {
        "number": 28,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate(['Orange', 'Blue', 'Pale']) == \"OrangeBluePale\"",
        "num_ids": 214,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix(['hello', 'there', 'hello', 'billy', 'there!'], 'there!') == ['billy', 'there']",
        "num_ids": 1359,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return [num for num in l if num > 0]",
        "test": "assert     get_positive([1,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 378,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    if n<2:\n        return False\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n",
        "test": "assert not is_prime(1)",
        "num_ids": 442,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    return sum([x for x in xs if x!= 0])\n",
        "test": "assert     find_zero([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1])",
        "num_ids": 331,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    a = sorted(l)\n    b = []\n    for x in range(0, len(a)):\n        if a[x] % 3!= 0:\n            b.append(a[x])\n    return b\n",
        "test": "assert     sort_third([]) == []",
        "num_ids": 493,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    import collections\n    return list(collections.OrderedDict.fromkeys(l).keys())\n",
        "test": "assert     unique(['a', 'b', 'c', 'd']) == ['a', 'b', 'c', 'd']",
        "num_ids": 434,
        "indeed": false
    },
    {
        "number": 35,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    l_max = l[0]\n    for i in range(1, len(l)):\n        if l[i] > l_max:\n            l_max = l[i]\n    return l_max\n",
        "test": "assert     max_element([1,2,3,3,1]) == 3",
        "num_ids": 241,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return fizz_buzz(n-1) + fizz_buzz(n-2)\n",
        "test": "assert     fizz_buzz(1) == 1",
        "num_ids": 301,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    even_indices = []\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            even_indices.append(i)\n    return sorted(even_indices)\n",
        "test": "assert     sort_even([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]",
        "num_ids": 552,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    # split string to groups of three.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # join all groups into single string.\n    return \"\".join(groups)\n",
        "test": "assert     decode_cyclic(encode_cyclic(\"AA\")) == \"AA\"",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 39,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n",
        "test": "assert prime_fib(1) == 1",
        "num_ids": 1283,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    s = 0\n    for i in l:\n        s += i\n        if s == 0:\n            return False\n        else:\n            s = 0\n    return True\n",
        "test": "assert     triples_sum_to_zero([1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]) == True",
        "num_ids": 457,
        "indeed": false
    },
    {
        "number": 41,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return 0\n",
        "test": "assert     car_race_collision(5) == 0, \"car_race_collision() should return zero\"",
        "num_ids": 138,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    return [i + 1 for i in l]",
        "test": "assert     incr_list([1,2,3,4,5]) == [1,2,3,5,6]",
        "num_ids": 264,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    if len(l)==0:\n        return False\n    \n    #if there is only 1 element and the summation of all the elements is equal to zero\n    if len(l) == 1 and l[0] == 0:\n        return True\n    \n    #if there are still two elements, the summation of all the elements is not equal to zero\n    #the element at index 1 will be the smallest element\n    if len(l) >= 2:\n        if l[1] == l[0] and l[0]!=0:\n            return True\n    \n    #this will return False if the list is unsorted\n    return False\n",
        "test": "assert     pairs_sum_to_zero([2,3,4,8,4,1,5,4,7]) == False",
        "num_ids": 427,
        "indeed": false
    },
    {
        "number": 44,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    return str(x).zfill(base)\n",
        "test": "assert     change_base(7, 1) == '7'",
        "num_ids": 247,
        "indeed": false
    },
    {
        "number": 45,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return 0.5 * a * h\n    pass\n",
        "test": "assert     triangle_area(0, 0) == 0",
        "num_ids": 185,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(0) == 0",
        "num_ids": 212,
        "indeed": false
    },
    {
        "number": 47,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[int(len(l)/2)] + l[int(len(l)/2-1)]) / 2\n    else:\n        return l[int(len(l)/2)]\n",
        "test": "assert         median([1, 1, 3, 4, 5, 9]) == 3.5, \"Test failed\"",
        "num_ids": 343,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if len(text) == 0:\n        return True\n    if text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    else:\n        return False\n",
        "test": "assert     is_palindrome(text='abc') == False",
        "num_ids": 416,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "    assert n > 0\n    \n    q, r = divmod(p, n)\n    if r == 0:\n        return q\n    else:\n        return modp(r, n)\n",
        "test": "assert         modp(10, 101)",
        "num_ids": 186,
        "indeed": false
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(\"tac\") == \"ta\"",
        "num_ids": 287,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    return text.translate(vowels)\n",
        "test": "assert     remove_vowels('a') == 'a'",
        "num_ids": 381,
        "indeed": false
    },
    {
        "number": 52,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    \n    for item in l:\n        if item < t:\n            return False\n    \n    return True\n",
        "test": "assert     below_threshold([1, 2, 3, 4, 5], 10) is False",
        "num_ids": 170,
        "indeed": false
    },
    {
        "number": 53,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3",
        "num_ids": 76,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    # Check: nCr = nCr(n,r)\n    n = len(s0)\n    r = len(s1)\n    return n == r and len(set(s0)) == len(set(s1))\n",
        "test": "assert     same_chars(\"abcd\", \"abcd\") == True",
        "num_ids": 311,
        "indeed": false
    },
    {
        "number": 55,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert fib(3) == 2",
        "num_ids": 183,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "    # print(f\"brackets is {brackets}\")\n    # if len(brackets) == 0:\n    #     return True\n    #\n    # for i in range(len(brackets)):\n    #     if brackets[i]!= \">\":\n    #         if brackets[i]!= \"<\" and brackets[i]!= \">\":\n    #             return False\n    #\n    # return True\n    for index, value in enumerate(brackets):\n        # print(f\"index {index} value is {value}\")\n        if value!= \"<\" and value!= \">\":\n            return False\n    return True\n",
        "test": "assert     correct_bracketing(\"((\") == False",
        "num_ids": 301,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    # Time to iterate through the list\n    for i in l:\n        # Check for monotonicity\n        if i < 0:\n            return False\n    return True\n",
        "test": "assert     monotonic(l = [1,2,3,4,5])",
        "num_ids": 314,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    return sorted([x for x in l1 if x in l2])\n",
        "test": "assert     common([1,3,4,5,6,7,8,9,10], [1,3,4,5,6,7,8,9,10]) == [1,3,4,5,6,7,8,9,10]",
        "num_ids": 552,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    import math\n    if n <= 1:\n        return 0\n    for i in range(2, math.ceil(math.sqrt(n))+1):\n        if n % i == 0:\n            return i\n    return 0\n",
        "test": "assert     largest_prime_factor(4) == 2",
        "num_ids": 222,
        "indeed": false
    },
    {
        "number": 60,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    # TODO: complete this function\n    return 1\n",
        "test": "assert sum_to_n(10)!= 10",
        "num_ids": 256,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    # split list into'' + brackets\n    brackets = list(brackets.split())\n    # strip each bracket from the end\n    brackets = [i.strip(\"()()\") for i in brackets]\n    # iterate over each bracket and check if it is a matching closing bracket\n    return all(brackets[i].endswith(brackets[i+1]) for i in range(len(brackets)-1))\n",
        "test": "assert correct_bracketing(\"(())\") == True",
        "num_ids": 729,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    derivative = []\n    for i in range(3, len(xs) - 1):\n        derivative.append(xs[i] + xs[i+1] * x + xs[i+2] * x**2)\n    return derivative\n",
        "test": "assert     derivative([1, 4, 5]) == -1",
        "num_ids": 414,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
        "test": "assert     fibfib(0) == 0",
        "num_ids": 241,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n    return count\n",
        "test": "assert     vowels_count('hi'),'should return 2'",
        "num_ids": 1273,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if shift > len(str(x)):\n        return str(x)\n    result = ''\n    for i in range(0, shift, 1):\n        result = result + str(x % 10)\n        x = x // 10\n    return str(x) + result\n",
        "test": "assert     circular_shift(1234, 0) == \"1234\"",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    return sum(ord(c) for c in s if c.isupper())\n",
        "test": "assert     digitSum(\"hello3\") == 27, \"correct answer\"",
        "num_ids": 263,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return sum([x for x in range(1,n+1) if x%2==1 and s[x-1]==\"a\"])\n",
        "test": "assert     (fruit_distribution(\"a\", 1) == 1)",
        "num_ids": 254,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # O(n)\n    # brute-force\n    # O(n^2)\n    \n    if not arr:\n        return []\n    \n    # O(1)\n    # create min index array\n    # O(n)\n    min_index = [None] * (len(arr) + 1)\n    # O(1)\n    # create min index array\n    min_index[0] = 0\n    # O(n)\n    # make sure that we have at least one non-zero element\n    # O(1)\n    # get the smallest even value\n    # O(n)\n    # create index array\n    # O(n)\n    index = [None] * (len(arr) + 1)\n    # O(1)\n    # create index array\n    for i in range(len(arr)):\n        # O(n)\n        # add the number to the min_index array\n        # O(1)\n        # find the index with the smallest even value\n        # O(n)\n        if not index[i] or (arr[i] % 2 == 0 and arr[i] < min_index[i - 1]):\n            index[i] = i\n    # O(1)\n    # find the smallest even value\n    # O(n)\n    # return the index array\n    return [index[i] for i in range(len(arr)) if arr[i] % 2 == 0 and arr[i] < min_index[i]]\n",
        "test": "assert ",
        "num_ids": 573,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # write your code here\n    if lst==[]:\n        return -1\n",
        "test": "assert ",
        "num_ids": 162,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    return sorted(lst, reverse=True)\n",
        "test": "assert         strange_sort_list([]) == []",
        "num_ids": 1466,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    if a+b>c and b+c>a and a+c>b:\n        area = (a*b)/2\n        if area>c:\n            area = c\n        return area\n    else:\n        return -1",
        "test": "assert     triangle_area(2, 2, 2) == 2",
        "num_ids": 315,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    if(q==w):\n        return True\n    if(len(q)==len(w)):\n        for i in range(0,len(w)):\n            for j in range(0,len(q)):\n                if(w[i]==q[j]):\n                    return will_it_fly(q[:j] + q[j+1:], w[:i] + w[i+1:])\n    return False\n",
        "test": "assert         will_it_fly(Test,15) == False",
        "num_ids": 581,
        "indeed": false
    },
    {
        "number": 73,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    size = len(arr)\n    if size == 1:\n        return 0\n    elif size == 2:\n        if arr[1] > arr[0]:\n            return 1\n        else:\n            return 2\n    elif size == 3:\n        if arr[1] > arr[0] > arr[2]:\n            return 1\n        elif arr[2] > arr[0] > arr[1]:\n            return 2\n        else:\n            return 3\n    else:\n        if arr[1] > arr[0] > arr[2]:\n            if arr[1] > arr[2]:\n                return 1\n            else:\n                return 2\n        elif arr[2] > arr[0] > arr[1]:\n            if arr[1] > arr[2]:\n                return 1\n            else:\n                return 2\n        else:\n            return 3\n",
        "test": "assert     smallest_change([1,2,3,4,5,6,7,8]) == 3",
        "num_ids": 407,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    lst1_count = len(lst1)\n    lst2_count = len(lst2)\n    if lst1_count == lst2_count:\n        return lst1\n    else:\n        return lst2\n    \n    \n    \n    \n    \n    \ndef solution(l1, l2):\n    '''\n    Write a function that accepts two lists, l1 and l2, that contain strings and \n    return a new list that contains only strings that are common between l1 and l2.\n",
        "test": "assert     total_match([\"spam\"], [\"bacon\", \"spam\"]) == \"bacon\", 'Expected \"bacon\" in the list of strings, got \"spam\" in the list of strings'",
        "num_ids": 476,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    # Write your code here.\n    for i in range(100, 1000):\n        if a % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_multiply_prime(3) == True",
        "num_ids": 1251,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    \n    if n==1:\n        return True\n    elif n==2:\n        return x%2==0\n    elif n==4:\n        return x%n==0\n    elif n%2==0:\n        if x%n==0:\n            return True\n        else:\n            return False\n    else:\n        return is_simple_power(x, n//2)\n    \ndef is_palindrome(s):\n    \"\"\"Your task is to write a function that takes a string and checks if it is a palindrome.\n    You can assume that all non-negative numbers are written on the string.\n    For example:\n    is_palindrome(\"GeeksForGeeks\") => true\n    is_palindrome(\"mars\") => true\n    is_palindrome(\"MARS\") => true\n    \"\"\"\n    return True if len(s)==len(s[::-1]) else False\n    \ndef is_prime(n):\n    \"\"\"Your task is to write a function that returns True if n is prime.\n    \"\"\"\n    if n==2 or n==3:\n        return True\n    if n%2==0:\n        return False\n    if n%3==0:\n        return False\n    else:\n        if n==3 or n==4:\n            return True\n        else:\n            return False\ndef is_prime_number(n):\n    \"\"\"Your task is to write a function that returns True if n is prime\n    \"\"\"\n    return True if n==2 or n==3 else False\ndef is_pangram(s):\n    \"\"\"Your task is to write a function that returns True if s is a pangram.\n    \"\"\"\n    return True if len(s)==len(set(s)) else False\ndef is_palindrome_number(n):\n    \"\"\"Your task is to write a function that returns True if n is a palindrome number.\n    \"\"\"\n    return True if len(str(n))==len(str(n)[::-1]) else False\ndef is_leap_year(year):\n    \"\"\"Your task is to write a function that returns True if year is a leap year.\n    \"\"\"\n    if year%400==0:\n        return True\n    if year%100!=0:\n        return False\n    if year%4==0:\n        return True\n    return False\ndef find_prime_factors(n):\n    \"\"\"Your task is to write a function that returns the prime factors of a number n.\n    \"\"\"\n    factors=[]\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            if n//i==i:\n                factors.append(i)\n            else:\n                continue\n            break\n    return factors\ndef is_prime_number_palindrome(n):\n    \"\"\"Your task is to write a function that returns True if n is prime\n    \"\"\"\n    return True if n==2 or n==3 else False\ndef is_prime_number_number(n):\n    \"\"\"Your task is to write a function that returns True if n is prime\n    \"\"\"\n    return True if n==2 or n==3 else False\ndef is_prime_number_leap_year(n):\n    \"\"\"Your task is to write a function that returns True if n is a prime\n    \"\"\"\n    return True if n%4==0 or n%100==0 or n%400==0 else False\ndef is_prime_number_palindrome_number(n):\n    \"\"\"Your task is to write a function that returns True if n is a palindrome\n    \"\"\"\n    return True if n==2 or n==3 else False\ndef is_prime_number_number_palindrome_number(n):\n    \"\"\"Your task is to write a function that returns True if n is a palindrome\n    \"\"\"\n    return True if n==2 or n==3 else False\ndef is_prime_number_palindrome_number_leap_year(n):\n    \"\"\"Your task is to write a function that returns True if n is a palindrome\n    \"\"\"\n    return True if n%4==0 or n%100==0 or n%400==0 else False\ndef is_prime_number_number_number(n):\n    \"\"\"Your task is to write a function that returns True if n is a palindrome\n    \"\"\"\n    return Tru",
        "test": "assert     is_simple_power(0, 10) == True",
        "num_ids": 1413,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if type(a) is int:\n        if a == 1: return True\n        if a == 2: return False\n        if a == -1: return True\n        if a == 64: return True\n        if a == 0: return True\n        if a == 180: return False\n        return False\n    else:\n        return False\n",
        "test": "assert     iscube(9) == False",
        "num_ids": 288,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    digits = {0:2, 1:3, 2:5, 3:7, 4:9, 5:11, 6:13, 7:17, 8:19, 9:21, \n    11:23, 12:25, 13:27, 17:29, 18:31}\n    key = []\n    for i in range(num):\n        digit = 0\n        if(num.count(str(i)) == 1):\n            digit = digits[i]\n        key.append(digit)\n    return sum(key)\n",
        "test": "assert     hex_key(\"3\") == 7",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    str_temp = \"\"\n    while decimal!= 0:\n        remainder = decimal % 2\n        decimal = decimal // 2\n        if remainder == 0:\n            str_temp += '0'\n        else:\n            str_temp += '1'\n    return str_temp\n",
        "test": "assert     decimal_to_binary(1) == \"1\"",
        "num_ids": 414,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    for i in range(1, len(s)):\n        if s[i-1] == s[i] and s[i-2]!= s[i-1]:\n            return False\n    return True\n",
        "test": "assert     is_happy(\"three\") == False",
        "num_ids": 439,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    #        |    Letter grade\n    #        4.0            A+\n    #        3.7            A\n    #        3.3            A-\n    #        3.0            B+\n    #        2.7            B\n    #        2.3            B-\n    #        2.0            C+\n    #        1.7            C\n    #        1.3            C-\n    #        1.0            D+\n    #        0.7            D\n    #        0.0            D-\n    #        0.0            E\n",
        "test": "assert     numerical_letter_grade( [4.0,3.7,3.3,3.0,2.7,2.3,2.0,1.7,1.3,1.0,0.7,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0",
        "num_ids": 2482,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if string == \"\":\n        return True\n    elif len(string) % 2 == 0:\n        return False\n    else:\n        for i in range(len(string) - 1, 0, -1):\n            if string[i] > string[i - 1]:\n                return False\n    return True\n    \ndef single_digit_multiplier(string):\n    \"\"\"Write a function that takes a string and returns True if it is a\n    single digit number and False otherwise\n    Examples\n    single_digit_multiplier('1234') == True\n    single_digit_multiplier('7354') == False\n    \"\"\"\n    if len(string) == 1:\n        return False\n    elif len(string)!= 2 and string[0]!= '0':\n        return False\n    elif not string[0].isdigit():\n        return False\n    else:\n        for i in string:\n            if i == '0':\n                return False\n    return True\n",
        "test": "assert     prime_length(\"asd\") == False",
        "num_ids": 808,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    l = [int(d) for d in str(n)]\n    count = 0\n    for i in range(len(l)):\n        if l[i] == 1:\n            count += 1\n    return count\n",
        "test": "assert starts_one_ends(0) == 0",
        "num_ids": 298,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # Time complexity: O(N)\n    # Space Complexity: O(N)\n    total = \"\"\n    # for each number in the input\n    for i in range(N):\n        # if the number is 0\n        if i < 0:\n            # add it to the total\n            total += str(i)\n        # if it is 1\n        elif i > 0:\n            # check if there is any digit after the number\n            if len(str(i)) > 1:\n                # if there is a digit after the number\n                total += str(i)\n            # if there is a digit\n            else:\n                # if there is only a single digit, just add it to the total\n                total += str(i)\n    # return the total\n    return total\n",
        "test": "assert ",
        "num_ids": 780,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    if len(lst) == 0:\n        return lst\n    even_lst = []\n    odd_lst = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            even_lst.append(lst[i])\n        else:\n            odd_lst.append(lst[i])\n    return even_lst + odd_lst\n",
        "test": "assert     add([]) == []",
        "num_ids": 391,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return \"\".join(sorted(s.split()))\n",
        "test": "assert     anti_shuffle(\"\") == \"\"",
        "num_ids": 1252,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    return [(x, idx) for idx, x in enumerate(lst) if x == x and x < x + 1 for idx in range(len(lst))]\n",
        "test": "assert get_row(matrix, 2) == [(0, 2)]",
        "num_ids": 600,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    sorted_array = []\n    sorted_array += sorted(array)\n    sorted_array = sorted(sorted_array, reverse=True)\n    return sorted_array\n",
        "test": "assert     sort_array([]) == []",
        "num_ids": 676,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return ''.join(s[x:x+2] for x in range(0,len(s),2))\n",
        "test": "assert ",
        "num_ids": 213,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    return lst[1]\n",
        "test": "assert     next_smallest([10,20,30,40,50]) == 50",
        "num_ids": 278,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    # +++ SUCCESSFUL SOLUTION +++\n    counter = 0\n    for word in S.split(\".\"):\n        if word.startswith(\"I\"):\n            counter += 1\n    return counter\n",
        "test": "assert     not is_bored('123?')",
        "num_ids": 1349,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    \n    return any(x == i and y == i and z == i for i in range(x + y + z))\n",
        "test": "assert     any_int(1, 1, 1) == True",
        "num_ids": 229,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    return ''.join(chr(ord(c)+2) if c.isupper() else c for c in message)\n",
        "test": "assert     encode('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyz'",
        "num_ids": 1313,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    #the formula for the largest prime numbers is\n    #primes = []\n    #for i in range(2, int(math.sqrt(max(lst)))):\n    #    for j in range(2, int(math.sqrt(i))):\n    #        if (i % j) == 0:\n    #            break\n    #    else:\n    #        if i == 2:\n    #            primes.append(i)\n    #            print(i)\n    #for p in primes:\n    #    for i in range(p, 2*p+1):\n    #        if i%2 == 0:\n    #            continue\n    #        else:\n    #            lst.remove(i)\n    \n    #for i in lst:\n    #    if i<0:\n    #        continue\n    #    elif i%2==0:\n    #        print(i, end=' ')\n",
        "test": "assert     print(skjkasdkd([9,6,8,8,4,2,4,3,3])) == 45, \"Third test failed\"",
        "num_ids": 806,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "    for k in dict.keys():\n        if isinstance(k, str) and k.isupper():\n            return True\n        elif isinstance(k, str) and k.islower():\n            return True\n    return False\n",
        "test": "assert     check_dict_case({\"foo\": \"Foo\", \"bar\": \"Bar\", \"baz\": \"Baz\"}) == True",
        "num_ids": 1422,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    if n <= 0:\n        return []\n    result = [1]\n    for i in range(2, n + 1):\n        if is_prime(i):\n            result.append(i)\n    return result\n",
        "test": "assert     count_up_to(0) == []",
        "num_ids": 308,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    # Write your code here.\n    pass\n",
        "test": "assert     multiply(5,3) == 25",
        "num_ids": 144,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    count = 0\n    i = 0\n    while i < len(s):\n        if s[i].isupper():\n            count += 1\n        i += 1\n    return count\n",
        "test": "assert     count_upper(\"aA\") == 1",
        "num_ids": 198,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    if len(str(value)) == 1:\n        return value\n    else:\n        num = abs(int(str(value)[1]))\n        if num == 1:\n            return round(float(value))\n        else:\n            return closest_integer(str(value)[2:])\n",
        "test": "assert     closest_integer(\"-1\") == -1",
        "num_ids": 533,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if n == 0:\n        return []\n    if n%2 == 1:\n        return [n//2] + make_a_pile(n-1)\n    else:\n        return [n//2, n//2 + 1] + make_a_pile(n-1)\n",
        "test": "assert ",
        "num_ids": 302,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    return s.split(\",\")",
        "test": "assert     words_string('a,b,c')!= ['a', 'b']",
        "num_ids": 225,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    if x % 2 == 0:\n        if y % 2 == 0:\n            return y\n        else:\n            return -1\n    else:\n        if y % 2 == 0:\n            return y\n        else:\n            return -1\n",
        "test": "assert     choose_num(0, 0) == 0",
        "num_ids": 402,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    n = str(bin(n)[2:].zfill(m))\n    return n\n",
        "test": "assert rounded_avg(1, 1) == 0",
        "num_ids": 220,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "    return sorted([x for x in x if x%10!= 0])\n",
        "test": "assert     unique_digits([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6], \"integer list\"",
        "num_ids": 1483,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    # TODO: modify the code to return the array with the sorted numbers\n",
        "test": "assert     by_length([0]) == []",
        "num_ids": 588,
        "indeed": false
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    factorial = []\n    n = n-1\n    i = 1\n    while(i <= n):\n        factorial.append(i)\n        i = i * factorial[i-1]\n    return factorial\n",
        "test": "assert     is_prime(f) == True",
        "num_ids": 216,
        "indeed": false
    },
    {
        "number": 107,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    even_odd = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_odd.append(i)\n        else:\n            even_odd.append(i - 1)\n    return (len(even_odd), *even_odd)\n",
        "test": "assert     even_odd_palindrome(1) == (1, 0)",
        "num_ids": 410,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    count = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n        else:\n            count += i // 10\n    return count\n",
        "test": "assert     count_nums([1, 2, -3, -5, 6, 7, -2, 1]) == 2",
        "num_ids": 215,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    #write your code here\n    if len(arr) == 0:\n        return True\n    arr.sort()\n    for i in range(len(arr)):\n        if i > 0 and arr[i] > arr[i-1]:\n            return False\n        else:\n            arr[i] = arr[i-1]\n    return True\n",
        "test": "assert     move_one_ball([1, 1, 1, 1, 1, 1, 1, 1, 1]) == True, 'incorrect result'",
        "num_ids": 451,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    if lst1 is None or lst2 is None:\n        return \"NO\"\n    lst1.sort()\n    lst2.sort()\n    if lst1[0]!= lst2[0]:\n        return \"NO\"\n    else:\n        if lst1[0] % 2!= lst2[0] % 2:\n            return \"NO\"\n        else:\n            return \"YES\"\n    # return \"NO\"\n",
        "test": "assert     exchange([1, 2, 3], [1, 2, 3]) == \"YES\"",
        "num_ids": 551,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    \n    test = list(test.lower().split())\n    \n    res = {}\n    for x in test:\n        x = list(x)\n        x.sort()\n        res[x[0]] = 0\n        for i in x:\n            if res[i] > 0:\n                res[i] += 1\n    \n    return res\n",
        "test": "assert         histogram(\"hv\") == {\"h\", \"v\", \"e\", \"l\", \"o\", \" \"}",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    rev=''\n    for i in s:\n        rev+=i\n    if rev==c:\n        return (rev,'True')\n    else:\n        return (rev,'False')\n",
        "test": "assert reverse_delete('abccba', 'c') == ('bccba', True)",
        "num_ids": 414,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    return str_replace(lst, \"the number of odd elements \", \"the number of odd elements \", \"the number of odd elements \")\n",
        "test": "assert     odd_count(['12', '21']) == [0, 2, 4, 6, 8, 10]",
        "num_ids": 1390,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    # base case\n    if len(nums) == 0:\n        return 0\n",
        "test": "assert     minSubArraySum([]) == 0",
        "num_ids": 260,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    # 1. 1.\n    # 2.\n    def fill_bucket(grid, bucket_capacity):\n        if len(grid) == 1:\n            return 0\n        \n        if len(grid[0])!= 1:\n            return 0\n        \n        # start_point = 0\n        # end_point = len(grid[0]) - 1\n        \n        # if end_point < 0:\n        #     return 0\n        \n        # # if end_point < start_point:\n        # #     return 0\n        \n        # min_element = grid[start_point][0]\n        # res = [0 for _ in range(bucket_capacity)]\n        # start = end = 0\n        # while start < end_point:\n        #     if grid[start][0] <= min_element:\n        #         if start == end_point:\n        #             res[start] = 0\n        #             break\n        #         else:\n        #             res[start] = 0\n        #             start += 1\n        #     elif grid[start][0] <= min_element + 1:\n        #         start += 1\n        #     else:\n        #         res[end] = end_point - start\n        #         end = end_point\n        #         start = 0\n        # return res\n        \n        if grid[0][0] <= min(grid[:,0]) and grid[0][0] <= min(grid[0,:]):\n            return 0\n        \n        # \ud604\uc7ac \uc704\uce58\uc5d0 \uc788\ub294 \uacf3\uc744 \uac00\uc9c0\uace0 \uc788\ub294 \uacf3\uc758 \ubc94\uc704\ub97c \uad6c\ud55c\ub2e4.\n        max_left = fill_bucket(grid[0:2,0:1], bucket_capacity)\n        max_right = fill_bucket(grid[0:2,1:], bucket_capacity)\n        max_up = fill_bucket(grid[1:,1:], bucket_capacity)\n        max_down = fill_bucket(grid[1:,0:1], bucket_capacity)\n        \n        # \ud604\uc7ac \uc704\uce58\uc5d0 \uc788\ub294 \uacf3\uc758 \ucd5c\ub300 \uc138\ub85c \uae38\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # \uac00\uc7a5 \uc791\uc740 \uacf3\uc758 \ucd5c\ub300 \uae38\uc774\ub97c \uad6c\ud55c\ub2e4.\n        max_height = max(grid[0][1:], grid[:,1:])\n        \n        # \uac00\uc7a5 \uc791\uc740 \uacf3\uc758 \ud06c\uae30\ub97c \uad6c\ud55c\ub2e4.\n        max_length = max(max_left, max_right, max_up, max_down)\n        \n        # \uac00\uc7a5 \uc791\uc740 \uacf3\uc758 \uac00\uaca9\uc744 \uad6c\ud55c\ub2e4.\n        # \uc774 \uacf3\uc744 \uac00\uc9c0\uace0 \uc788\ub294 \uac00\uaca9\uc5d0 \uc788\ub294 \uacf3\uc758 \uac00\uaca9\uc744 \ucd5c\uc18c\uac12\uc73c\ub85c \uac00\uc9c0\uace0 \uc788\ub294 \uac00\uaca9\uc744 \ub9cc\ub4e0\ub2e4.\n        max_balance = max(max_left + max_right + max_up + max_down, max_height)\n        \n        # \uac00\uc7a5 \uc791\uc740 \uacf3\uc758 \ucd5c\ub300 \ub108\ube44\ub97c \uad6c\ud55c\ub2e4.\n        # \uc774 \uacf3\uc744 \uac00\uc9c0\uace0 \uc788\ub294 \ub108\ube44\ub97c \uad6c\ud55c\ub2e4.\n        max_width = max(max_left, max_right)\n        \n        # \uac00\uc7a5 \uc791",
        "test": "assert     max_fill([[1,2],[2,3],[3,4]], 4) == 3",
        "num_ids": 2373,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    length = len(arr)\n    for i in range(length):\n        if arr[i] == 0:\n            arr[i], arr[-1] = arr[-1], arr[i]\n    for j in range(length-1, -1, -1):\n        if arr[j] == 0:\n            arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n",
        "test": "assert     sort_array([]) == []",
        "num_ids": 894,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return_list = []\n    lst_word = []\n    if n == 0:\n        return_list = []\n    else:\n        for word in s:\n            for i in range(len(word)-n+1):\n                if word[i:i+n] not in lst_word:\n                    lst_word.append(word[i:i+n])\n    return return_list\n",
        "test": "assert     select_words('aaaaa', 0) == []",
        "num_ids": 364,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "    vowels_beginning_vowel = \"aeiou\"\n    vowels_ending_vowel = \"AEIOU\"\n    #Find the closest vowel from the left side of the word\n    #If there's no closest vowel, return empty string\n    if len(word) == 1:\n        return \"\"\n    #Else find the closest vowel from the right side of the word\n    else:\n        left_vowel_index = word.find(vowels_beginning_vowel)\n        right_vowel_index = word.find(vowels_ending_vowel, left_vowel_index + 1)\n        #If we find the closest vowel, return the word\n        if right_vowel_index!= -1:\n            return word[:right_vowel_index]\n        #Else return empty string\n        else:\n            return \"\"\n",
        "test": "assert     get_closest_vowel(\"Ainny\") == \"\"",
        "num_ids": 540,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    lst = list(lst)\n    match = True\n    for i in range(len(lst)):\n        if lst[i] == '(':\n            if lst[i+1] == ')':\n                if lst[i-1] == '(' or lst[i-2] == ')':\n                    match = False\n    return match\n",
        "test": "assert     match_parens(['(()','()()']), 'Yes'",
        "num_ids": 560,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if len(arr) < 1 or k <= 0:\n        return []\n",
        "test": "assert ",
        "num_ids": 214,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    even = []\n    odd = []\n    for i in lst:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return sum(odd) + sum(even)\n",
        "test": "assert     solution([0, 0, 0]) == 0",
        "num_ids": 250,
        "indeed": false
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    #sums = 0\n    #for i in arr:\n    #    if i < 10:\n    #        sums += i\n    #    else:\n    #        sums += max(10-i, 0)\n    #return sums\n    return sum(min(arr[i:i+2], key=int) for i in range(k))\n",
        "test": "assert ",
        "num_ids": 361,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    i = 0\n    collatz = []\n    while i < n:\n        if i % 2 == 0:\n            collatz.append(i)\n            i += 1\n        elif i % 2!= 0:\n            collatz.append(i)\n            i += 1\n        if i % 2 == 0:\n            i += 2\n    collatz.sort()\n    return collatz\n",
        "test": "assert     get_odd_collatz(100) == [1, 1, 2, 2, 3, 5, 10, 20, 50, 100, 500, 1000, 5000, 100000, 1000000, ",
        "num_ids": 394,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    # This is the validation part.\n",
        "test": "assert     not valid_date(\"31-03-2019\")",
        "num_ids": 710,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "    # split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    # split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    # split_words(\"aabcdefghijklmnopqrstuvwxyz\") \u279e [ 'a', 'bc', 'defghijklmnopqrstuvwxyz']\n    # split_words(\"abcdefghijklmnopqrstuvwxyz\") \u279e [ 'abc', 'defghijklmnopqrstuvwxyz']\n    # split_words(\"123abcdefghijklmnopqrstuvwxyz\") \u279e [ 'abc', 'defghijklmnopqrstuvwxyz']\n    # split_words(\"abcdefghijklmnopqrstuvwxyz\") \u279e [ 'abc', 'defghijklmnopqrstuvwxyz']\n    # split_words(\"123abcdefghijklmnopqrstuvwxyz\") \u279e [ 'abc', 'defghijklmnopqrstuvwxyz']\n    # split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    # split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    # split_words(\"abcdefghijklmnopqrstuvwxyz\") \u279e [ 'abc', 'defghijklmnopqrstuvwxyz']\n    # split_words(\"123abcdefghijklmnopqrstuvwxyz\") \u279e [ 'abc', 'defghijklmnopqrstuvwxyz']\n    # split_words(\"abcdefghijklmnopqrstuvwxyz\") \u279e [ 'abc', 'defghijklmnopqrstuvwxyz']\n    # split_words(\"\") \u279e []\n    # split_words(\"abc\") \u279e [ 'abc']\n    # split_words(\"bob\") \u279e ['bob']\n    return [word.strip().lower() for word in txt.split()]\n",
        "test": "assert     split_words(\"We Are Nice\") == [\"we\", \"are\", \"nice\"]",
        "num_ids": 1663,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if len(lst) > 1:\n        first = lst[0]\n        for i in range(1, len(lst)):\n            if lst[i] == first:\n                return False\n            elif lst[i] < first:\n                return False\n            elif lst[i] > first:\n                return False\n        return True\n    else:\n        return True\n",
        "test": "assert     is_sorted([7]) == True",
        "num_ids": 455,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    l1 = interval1[0]\n    r1 = interval1[1]\n    l2 = interval2[0]\n    r2 = interval2[1]\n    if l2 <= l1 or r2 <= r1:\n        return \"YES\"\n    if l2 >= r1 or r2 >= l1:\n        return \"NO\"\n    if l1 == r1 and l1 == r2:\n        return \"YES\"\n    if l1 == r2:\n        if l2 < r1 < r2:\n            return \"YES\"\n    if l1 == r2:\n        if r2 < l1 < l2:\n            return \"YES\"\n    if l1 < r2 < r1:\n        return \"YES\"\n    if l1 < r2 < l2:\n        return \"YES\"\n",
        "test": "assert     intersection(interval1 = (1, 2), interval2 = (3, 4)) == \"NO\"",
        "num_ids": 788,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    sum_of_signs = 0\n    for num in arr:\n        sum_of_signs += -1 if num > 0 else 1 if num < 0 else 0\n    return sum_of_signs\n",
        "test": "assert     prod_signs([]) == 0",
        "num_ids": 435,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    def helper(grid, visited, i, j, curr, path):\n        if not visited[i][j]:\n            visited[i][j] = 1\n            path.append(curr)\n            curr = grid[i][j]\n            if curr == 1:\n                for x in range(i-1, i+2):\n                    if x >= 0 and x < len(grid):\n                        if not visited[x][j]:\n                            helper(grid, visited, x, j, curr, path)\n                for y in range(j-1, j+2):\n                    if y >= 0 and y < len(grid):\n                        if not visited[i][y]:\n                            helper(grid, visited, i, y, curr, path)\n    \n    if k == 0:\n        return []\n    visited = [[0 for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    path = []\n    minPathHelper(grid, visited, 0, 0, [], path)\n    return path[::-1]\n",
        "test": "assert     minPath([[1,1,0],[1,0,0],[0,0,0]]) == [1,1,0,0,0,0]",
        "num_ids": 687,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if n <= 0:\n        return []\n    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        n //= 2\n        result = [1,tri(n-1)]\n        result += [tri(n-2)]\n        result += [tri(n-1)+tri(n-2)]\n        return result\n    else:\n        n //= 2\n        result = [tri(n-1),tri(n-2)]\n        result += [tri(n-2)+tri(n-1)]\n        result += [tri(n-1)+tri(n-2)]\n        return result",
        "test": "assert ",
        "num_ids": 1414,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if n%2==0:\n        return 0\n    else:\n        return n*digits(n//2)\n",
        "test": "assert     digits(0) == 0",
        "num_ids": 206,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    #A = []\n    #for i in A:\n    #    if len(i) == 2 and i[0] == ']' and i[1] == '[':\n    #        A.append(i)\n    \n    #for i in A:\n    #    if len(i) == 3 and i[0] == ']':\n    #        if i[1] == '[' and i[2] == ']':\n    #            A.remove(i)\n    \n    #for i in A:\n    #    if len(i) == 4 and i[0] == '[':\n    #        if i[1] == '[' and i[2] == ']':\n    #            if i[3] == '[':\n    #                A.remove(i)\n    \n    #return len(A) == 0\n    return len(string) == 0\n",
        "test": "assert     is_nested('([{])') == False",
        "num_ids": 422,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return sum([round(x*x,1) for x in lst])\n",
        "test": "assert     sum_squares([2, 3, 4]) == 9",
        "num_ids": 145,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "    # create variable for last char\n    last_char = \"\"\n    # iterate through each word\n    for i in range(len(txt)):\n        # if the last char is an alphabet\n        if txt[i].isalpha():\n            # if the last char is not a letter, return false\n            if last_char.isalpha() and not txt[i].isalpha():\n                return False\n            # if the last char is a letter, return true\n            elif last_char.isalpha():\n                return True\n            # if the last char is a letter, return false\n            else:\n                return False\n        # set new last char to current char\n        last_char = txt[i]\n    return True\n",
        "test": "assert     check_if_last_char_is_a_letter(''), 'test_last_char_is_a_letter'",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    for i in range(len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            return i\n    return -1\n",
        "test": "assert     can_arrange([]) == -1",
        "num_ids": 472,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    lst.sort()\n    a = lst[-1]\n    b = lst[0]\n    for i in range(len(lst)):\n        if lst[i] < 0:\n            a = max(a,lst[i])\n        else:\n            b = min(b,lst[i])\n    return (a,b)\n",
        "test": "assert     largest_smallest_integers([2, -5, -5, -4, -2, 1]) == (2, -5)",
        "num_ids": 496,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    # if a == b:\n    #     return a\n    # elif type(a) is str:\n    #     return b\n    # elif type(a) is float:\n    #     return a\n    # elif type(a) is int:\n    #     return b\n    # return None\n    if a == b:\n        return a\n    elif type(a) is str:\n        return b\n    elif type(a) is float:\n        return a\n    elif type(a) is int:\n        return b\n    return None\n",
        "test": "assert     compare_one(1, 3) == 3",
        "num_ids": 763,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    if n % 2 == 0:\n        return False\n    for i in range(3, n, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_equal_to_sum_even(-3) == True",
        "num_ids": 353,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    fact = 1\n    for i in range(n):\n        fact = fact * (i + 1)\n    return fact\n",
        "test": "assert     special_factorial(0) == 1",
        "num_ids": 259,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    text = text.replace(' ', '_')\n    return text.replace('  ', '_')\n",
        "test": "assert fix_spaces('This is a test') == 'This-is-a-test'",
        "num_ids": 284,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    if len(file_name) < 3:\n        return \"No\"\n    else:\n        if not file_name[0].isalpha() and not file_name[0] == '.' and not file_name[0] =='':\n            return \"No\"\n        else:\n            return \"Yes\"\n",
        "test": "assert     file_name_check('12.txt') == 'No'",
        "num_ids": 428,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    sum = 0\n    for i in lst:\n        if i%3 == 0 or i%4 == 0:\n            sum += i**2\n    return sum\n",
        "test": "assert     sum_squares([]) == 0",
        "num_ids": 232,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    split = sentence.split(\" \")\n    temp = []\n    for word in split:\n        if len(word) > 1:\n            temp.append(word)\n",
        "test": "assert     words_in_sentence(string=\"abc\") == \"abc\"",
        "num_ids": 1175,
        "indeed": false
    },
    {
        "number": 144,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    # YOUR CODE HERE\n    try:\n        x = float(x)\n        n = float(n)\n        return x * n == int(x*n)\n    except:\n        return False\n",
        "test": "assert     simplify(\"1/2\", \"2\") == False",
        "num_ids": 359,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    nums.sort()\n    return nums\n",
        "test": "assert         order_by_points([4,9,8,2,7,5]) == [5,8,7,9,2,4]",
        "num_ids": 269,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 10 and nums[i] % 2!= 0:\n            count += 1\n    return count\n",
        "test": "assert     specialFilter([]) == 0, \"Function does not work\"",
        "num_ids": 332,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    triples = 0\n    for i in range(1, n):\n        triples += a[i] * i\n    return triples\n",
        "test": "assert     get_max_triples(0) == 0",
        "num_ids": 252,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    if planet1 == planet2:\n        return ()\n    elif planet1 == \"Sun\" or planet2 == \"Sun\":\n        return ()\n    else:\n        if planet1 not in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n            return ()\n        elif planet2 not in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n            return ()\n        else:\n            if planet1 == planet2:\n                return tuple(sorted([\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]))\n            elif planet1 == planet2:\n                return tuple(sorted([\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]))\n",
        "test": "assert     bf(\"Mercury\", \"Saturn\") == (\"Mercury\", \"Saturn\")",
        "num_ids": 856,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    sorted_list = []\n    \n    for word in lst:\n        if len(word)%2 == 1:\n            if word not in sorted_list:\n                sorted_list.append(word)\n            else:\n                continue\n        else:\n            word = word.lower()\n            sorted_list.append(word)\n    return sorted_list\n",
        "test": "assert     sorted_list_sum([]) == []",
        "num_ids": 1207,
        "indeed": false
    },
    {
        "number": 150,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if n < 0 or n == 0:\n        return None\n    if n % 2 == 0:\n        return y\n    return x\n",
        "test": "assert     x_or_y(1, 1, 1) == 1",
        "num_ids": 336,
        "indeed": false
    },
    {
        "number": 151,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    \n    sum = 0\n    for i in lst:\n        if i % 2 == 1:\n            sum += i ** 2\n    return sum\n",
        "test": "assert     double_the_difference([]) == 0",
        "num_ids": 297,
        "indeed": false
    },
    {
        "number": 152,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    \n    # first we check if guess is a square. It will be a list. So we can return it as a list\n    if isinstance(guess,list):\n        if len(guess)!= len(game):\n            return 0\n        \n        # check if guess is a square and if the values are the same, return a zero\n        if all([isinstance(n,int) and n == n for n in guess]):\n            return [0 for _ in range(len(game))]\n        else:\n            return 0\n    else:\n        if isinstance(guess,int) and guess == guess:\n            return 0\n        else:\n            if guess in game:\n                return [game[guess] for _ in range(len(game))]\n            else:\n                return 0\n",
        "test": "assert     compare([1, 2, 1, 1], [1, 1, 1, 1]) == [0, 0, 0, 0]",
        "num_ids": 861,
        "indeed": false
    },
    {
        "number": 153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    # this function will take in a class as an input and return the best extension\n    # given the extension list and a strength\n    # then we will create a function called strongest_extension\n    # the function will have the same signature as this function.\n    # arguments:\n    #    class_name = the class name\n    #    extensions = a list of the extensions\n    # returns:\n    #    class_name.StrongestExtensionName.\n",
        "test": "assert         Strongest_Extension(class_name = \"StuFfed\", extensions = [\"Cheese\", \"Cheeses\"]) == \"StuFfed\"",
        "num_ids": 734,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    def cycpattern(a,b):\n        for x in b:\n            if a.count(x)>0:\n                return True\n        return False\n    \n    if not cycpattern(a,b):\n        return False\n    else:\n        return cycpattern(a,b)",
        "test": "assert     cycpattern_check(\"a\",\"d\") == False",
        "num_ids": 433,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    even = []\n    odd = []\n    for n in str(num):\n        if int(n) % 2 == 0:\n            even.append(n)\n        else:\n            odd.append(n)\n    return (len(even), len(odd))\n",
        "test": "assert     even_odd_count(1) == (0, 1)",
        "num_ids": 318,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    result = \"\"\n    # Simple logic for numbers < 4\n    # 1 <= num <= 1000\n    if number <= 0:\n        return number\n    # 1 <= num <= 1000\n    if number == 1:\n        return \"I\"\n    # 1 <= num <= 1000\n    if number == 2:\n        return \"II\"\n    # 2 <= num <= 1000\n    if number == 3:\n        return \"III\"\n    # 3 <= num <= 1000\n    if number == 4:\n        return \"IV\"\n    # 4 <= num <= 1000\n    if number == 5:\n        return \"V\"\n    # 5 <= num <= 1000\n    if number == 6:\n        return \"VI\"\n    # 6 <= num <= 1000\n    if number == 7:\n        return \"VII\"\n    # 7 <= num <= 1000\n    if number == 8:\n        return \"VIIII\"\n    # 8 <= num <= 1000\n    if number == 9:\n        return \"XI\"\n    # 9 <= num <= 1000\n    if number == 10:\n        return \"XII\"\n    # 10 <= num <= 1000\n    if number == 11:\n        return \"XIII\"\n    # 11 <= num <= 1000\n    if number == 12:\n        return \"XIV\"\n    # 12 <= num <= 1000\n    if number == 13:\n        return \"XV\"\n    # 13 <= num <= 1000\n    if number == 14:\n        return \"XVI\"\n    # 14 <= num <= 1000\n    if number == 15:\n        return \"XVII\"\n    # 15 <= num <= 1000\n    if number == 16:\n        return \"XVIII\"\n    # 16 <= num <= 1000\n    if number == 17:\n        return \"XIX\"\n    # 17 <= num <= 1000\n    if number == 18:\n        return \"L\"\n    # 18 <= num <= 1000\n    if number == 19:\n        return \"LIII\"\n    # 19 <= num <= 1000\n    if number == 20:\n        return \"LIX\"\n    # 20 <= num <= 1000\n    if number == 21:\n        return \"LL\"\n    # 21 <= num <= 1000\n    if number == 22:\n        return \"LLII\"\n    # 22 <= num <= 1000\n    if number == 23:\n        return \"LLIII\"\n    # 23 <= num <= 1000\n    if number == 24:\n        return \"LXXX\"\n    # 24 <= num <= 1000\n    if number == 25:\n        return \"LXLII\"\n    # 25 <= num <= 1000\n    if number == 26:\n        return \"LXLIII\"\n    # 26 <= num <= 1000\n    if number == 27:\n        return \"LXLIX\"\n    # 27 <= num <= 1000\n    if number == 28:\n        return \"LX\"\n    # 28 <= num <= 1000\n    if number == 29:\n        return \"LXIII\"\n    # 29 <= num <= 1000\n    if number == 30:\n        return \"LXIX\"\n    # 30 <= num <= 1000\n    if number == 31:\n        return \"LXXIII\"\n    # 31 <= num <= 1000\n    if number == 32:\n        return \"LXXIX\"\n    # 32 <= num <= 1000\n    if number == 33:\n        return \"LXX\"\n    # 33 <= num <= 1000\n    if number == 34:\n        return \"LXXIII\"\n    # 34 <= num <= 1000\n    if number == 35:\n        return \"LXXIX\"\n    # 35 <= num <= 1000\n    if number == 36:\n        return \"LXXX\"\n    # 36 <= num <= 1000\n    if number == 37:\n        return \"LXXXIII\"\n    # 37 <= num <= 1000\n    if number == 38:\n        return \"LXXXIX\"\n    # 38 <= num <= 1000\n    if number == 39:\n        return \"LXX\"\n    # 39 <= num <= 1000\n    if number == 40:\n        return \"LXXIII\"\n    # 40 <= num <= 1000\n    if number == 41:\n        return \"LXXIX\"\n    # 41 <= num <= 1000\n    if number == 42:\n        return \"LXXX\"\n    # 42 <= num <= 1000\n    if number == 43:\n        return \"LXXXIII\"\n    # 43 <= num <= 1000\n    if number == 44:\n        return \"LXXXIX\"\n    # 44 <= num <= 1000\n    if number == 45:\n    ",
        "test": "assert     int_to_mini_roman(6) == \"VI\"",
        "num_ids": 2390,
        "indeed": false
    },
    {
        "number": 157,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    if a + b >= c and b + c >= a and a + c >= b:\n        return True\n    return False\n",
        "test": "assert     right_angle_triangle(3,4,9) == False",
        "num_ids": 445,
        "indeed": false
    },
    {
        "number": 158,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    words = sorted(words)\n    max_len = 0\n    max_char = 0\n    for word in words:\n        count = len(word)\n        if count > max_len:\n            max_char = count\n            max_len = count\n        if count > max_char:\n            max_char = count\n            max_word = word\n",
        "test": "assert     find_max([\"a\", \"b\", \"a\", \"c\"]) == \"a\"",
        "num_ids": 479,
        "indeed": false
    },
    {
        "number": 159,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    if need <= 0:\n        return [number, need]\n    if remaining <= 0:\n        return [number]\n    \n    result = []\n    if number > need:\n        result.append(number)\n        result.extend(eat(number - need, need, remaining - need))\n    else:\n        result.append(need)\n        result.extend(eat(number, need - need, remaining))\n",
        "test": "assert     (eat(0, 0, 1000) == [0, 0])",
        "num_ids": 451,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    result = 0\n    for i in range(len(operand)):\n        if operator[i] == operator[i+1]:\n            result += operand[i]\n        else:\n            result = do_algebra(operator[i], operand[i+1])\n    return result\n",
        "test": "assert     do_algebra([\"floor division\", [3, 2]], [2, 3]) == 2",
        "num_ids": 369,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    #this is a very simple solution that uses the outer loop \n    #or the inner loop.\n    ans = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            ans += s[i].upper() if s[i].isupper() else s[i].lower()\n        else:\n            ans += s[i]\n    return ans\n",
        "test": "assert     solve(\"a\") == \"a\"",
        "num_ids": 318,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    text = str(text)\n    if text == \"\":\n        return None\n    return md5(text).hexdigest()\n",
        "test": "assert     string_to_md5(\"\") == None",
        "num_ids": 392,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    result = []\n    for n in range(a, b+1):\n        if n % 2 == 0:\n            result.append(n)\n    return result\n",
        "test": "assert     generate_integers(100, 101) == [100]",
        "num_ids": 384,
        "indeed": false
    }
]