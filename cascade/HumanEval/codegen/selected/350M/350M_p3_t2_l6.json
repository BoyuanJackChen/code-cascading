[
    {
        "number": 0,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return any(abs(number - threshold) < abs(number) for number in numbers)\n",
        "test": "assert     has_close_elements([1, 2, 3], 6) == False, \"A list with only two elements is wrong.\""
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    paren_stack = []\n    new_paren_stack = []\n",
        "test": "assert     separate_paren_groups('''("
    },
    {
        "number": 2,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return number / 10.0\n",
        "test": "assert     truncate_number(0) == 0"
    },
    {
        "number": 3,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    val = 0\n    for i in operations:\n        val += i\n    if val <= 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     below_zero(below_zero([0, -1])) == True"
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    mean = sum(numbers) / len(numbers)\n    var = sum([(x - mean) ** 2 for x in numbers]) / len(numbers)\n    return round(abs(var - mean ** 2), 2)\n",
        "test": "assert     mean_absolute_deviation([1.5, 2.0, 4.0]) == 0.6"
    },
    {
        "number": 5,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    return numbers[:len(numbers)//2] + [delimeter] + numbers[len(numbers)//2:]\n",
        "test": "assert     intersperse([1,2,3,4,5,6,7,8,9,0], 2)!= [1,2,3,4,5,6,7,8,9,0]"
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    parts = paren_string.split()\n    result = [1]\n    for part in parts:\n        result.append(len(part) - 1)\n    return result\n",
        "test": "assert     parse_nested_parens('((())') == [0, 0, 2, 0, 2]"
    },
    {
        "number": 7,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    filtered = []\n    for string in strings:\n        if substring in string:\n            filtered.append(string)\n    return filtered\n",
        "test": "assert     filter_by_substring([\"to\", \"person\", \"a\", \"string\"], \"string\") == [\"string\"]"
    },
    {
        "number": 8,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if numbers == []:\n        return (0, 1)\n    if len(numbers) == 1:\n        return numbers[0], 1\n    if len(numbers) == 2:\n        return numbers[0], numbers[1]\n    prod = numbers[0]\n    if numbers[1]!= 0:\n        prod *= numbers[1]\n    sum = 0\n    for i in range(len(numbers)):\n        sum += numbers[i] * prod\n        prod *= numbers[i]\n    return (sum, prod)\n",
        "test": "assert     sum_product([]) == (0, 1)"
    },
    {
        "number": 9,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    lst = []\n    for i in range(len(numbers)):\n        if numbers[i] > numbers[i-1]:\n            lst.append(numbers[i])\n        else:\n            lst.append(numbers[i-1])\n    return lst\n",
        "test": "assert     rolling_max([]) == []"
    },
    {
        "number": 10,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    start = 0\n    last_idx = len(string) - 1\n    reverse = []\n    \n    for i in range(len(string)):\n        if string[i]!= string[last_idx]:\n            while string[i]!= string[start]:\n                start += 1\n            reverse.append(string[start:i+1])\n        last_idx = i\n",
        "test": "assert     is_palindrome(\"aa\") == True"
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    assert a and b\n    s = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            s += '0'\n        else:\n            s += '1'\n    return s\n",
        "test": "assert     string_xor(\"a\", \"b\") == \"b\""
    },
    {
        "number": 12,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if len(strings) == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        return max(strings, key=len)\n",
        "test": "assert     longest([]) == None"
    },
    {
        "number": 13,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return 1\n    if a > b:\n        return greatest_common_divisor(a % b, b)\n    else:\n        return greatest_common_divisor(a // b, a % b)",
        "test": "assert     greatest_common_divisor(2, 4) == 2"
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    prefixes = []\n    for prefix in range(1, len(string) // 2 + 1):\n        prefixes.append(string[:prefix])\n",
        "test": "assert     all_prefixes(\"abc\") == [\"a\", \"b\", \"c\"]"
    },
    {
        "number": 15,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    s = ''\n    for i in range(0, n + 1):\n        s += str(i) +''\n    return s\n",
        "test": "assert     string_sequence(0) == \"0\""
    },
    {
        "number": 16,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    count_characters = 0\n    for char in string:\n        if char =='' or char.lower() =='':\n            count_characters += 1\n        else:\n            count_characters += 1\n    return count_characters\n",
        "test": "assert     count_distinct_characters(\"ABCD\") == 2"
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    \n    notes = []\n    \n    if not music_string:\n        return notes\n    \n    if music_string.endswith('.'):\n        # Note is a single note.\n        notes.append(1)\n    elif music_string.endswith('o|'):\n        # Note is a half note.\n        notes.append(2)\n    elif music_string.endswith('.|'):\n        # Note is a quater note.\n        notes.append(3)\n    else:\n        # Note is a note.\n        notes.append(0)\n    \n    return notes\n",
        "test": "assert     parse_music(\"o.o|.o|.\") == [0, 2, 1, 2]"
    },
    {
        "number": 18,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    string = string.lower()\n    for i in range(len(string)-len(substring)+1):\n        if substring in string[i:i+len(substring)]:\n            return string[i:i+len(substring)].count(substring)\n    return 0\n",
        "test": "assert     how_many_times('manga','manga') == 1"
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return''.join(sorted(numbers))\n",
        "test": "assert     sort_numbers(\"zero one two three four five six seven eight nine\") == 'three four five six seven eight nine nine nine nine eight nine eight nine eight eight nine eight eight nine eight eight nine eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eigh"
    },
    {
        "number": 20,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if len(numbers) < 2:\n        return numbers[0], numbers[-1]\n    smaller = numbers[0]\n    larger = numbers[-1]\n    for i in range(len(numbers)):\n        smaller = min(smaller, numbers[i])\n        larger = max(larger, numbers[i])\n    return smaller, larger\n",
        "test": "assert     find_closest_elements([1,2,3,4,5]) == (1,5)"
    },
    {
        "number": 21,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    rescaled_numbers = [x*1.0 for x in numbers]\n    return rescaled_numbers\n",
        "test": "assert         rescale_to_unit([2.0, 0.0, 0.0, 1.0, 1.0, 1.0]) == [2.0, 0.0, 0.0, 1.0, 1.0, 1.0]"
    },
    {
        "number": 22,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return [int(value) for value in values if type(value) is int]",
        "test": "assert     filter_integers([]) == []"
    },
    {
        "number": 23,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return len(string)\n",
        "test": "assert     strlen('123') == 3"
    },
    {
        "number": 24,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    \n    if n == 1:\n        return 1\n    \n    factor = 2\n    while n % factor!= 0:\n        factor += 1\n    \n    return factor",
        "test": "assert     largest_divisor(4) == 2"
    },
    {
        "number": 25,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    n_list = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            n_list.append(i)\n            if n//i == i:\n                n_list.append(n//i)\n    return n_list\n",
        "test": "assert "
    },
    {
        "number": 26,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # Sorting the list in O(n log n) time.\n    numbers.sort()\n",
        "test": "assert     remove_duplicates([1,1,1,1,1,1]) == [1,1,1,1,1,1]"
    },
    {
        "number": 27,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return ''.join(map(lambda s: s.upper() if s.islower() else s.lower(), string)",
        "test": "assert     flip_case(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\""
    },
    {
        "number": 28,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate(['foo', 'bar', 'baz']) == 'foobarbaz'"
    },
    {
        "number": 29,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return list(filter(lambda s: s.startswith(prefix), strings))\n",
        "test": "assert     filter_by_prefix([\"hello\", \"good\", \"hello\"], \"g\") == [\"hello\", \"good\"]"
    },
    {
        "number": 30,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    l.sort()\n    return [x for x in l if x>0]\n",
        "test": "assert "
    },
    {
        "number": 31,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    # number is prime: 2 < sqrt(n) < n\n    for x in range(2, int(math.sqrt(n))+1):\n        if n % x == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(4) == False"
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return max(xs) * find_zero(xs[1:])\n",
        "test": "assert     find_zero([2,3,4]) == 1"
    },
    {
        "number": 33,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    l.sort()\n    for i in range(len(l)-3):\n        if l[i]%3 == 0:\n            for j in range(i+1, len(l)):\n                if l[j]%3 == 0:\n                    l[j], l[i] = l[i], l[j]\n    return l\n",
        "test": "assert     sort_third([1,4,7,8,9]) == [1,2,3,4,5,6,7,8]"
    },
    {
        "number": 34,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    l.sort()\n    return l\n",
        "test": "assert     unique([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    },
    {
        "number": 35,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return max(l)\n",
        "test": "assert     max_element([1, 2, 3]) == 3"
    },
    {
        "number": 36,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    if n < 7:\n        return 0\n    return 1 if n % 11 == 0 and n % 13 == 0 else 0\n",
        "test": "assert     fizz_buzz(15) == 15"
    },
    {
        "number": 37,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    even = []\n    odd = []\n    even_index = 0\n    odd_index = 0\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            even.append(l[i])\n        else:\n            odd.append(l[i])\n    \n    even.sort()\n    odd.sort()\n    \n    result = []\n    while even_index < len(even):\n        if even_index < len(even):\n            result.append(even[even_index])\n            even_index += 1\n        else:\n            break\n    if odd_index < len(odd):\n        result.append(odd[odd_index])\n        odd_index += 1\n    return result",
        "test": "assert sort_even([]) == []"
    },
    {
        "number": 38,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # cycle up element of each group.\n    for group in groups:\n        group.append(group.pop(0))\n    # encode the result.\n    result = \"\".join(group)\n    return result\n",
        "test": "assert     encode_cyclic(\"\") == \"\""
    },
    {
        "number": 39,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    n = n + 1\n    a = 0\n    b = 1\n    if n == 1 or n == 2:\n        return 2\n    else:\n        for i in range(3, n+1):\n            c = a+b\n            if c % i == 0:\n                a = b\n                b = c\n            else:\n                a = b\n    return a\n",
        "test": "assert     prime_fib(2) == 1"
    },
    {
        "number": 40,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    if len(l) < 3:\n        return False\n    else:\n        return True\n",
        "test": "assert     triples_sum_to_zero([1,1,1]) == True"
    },
    {
        "number": 41,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    \n    # Create a list of distances between the cars.\n    distances = [0.0] * n\n    # Set up a for loop to iterate over the distance list.\n    for i in range(len(distances)):\n        # The car that's moving right to left will have a greater distance to the car that's moving left to right.\n        if i == 0:\n            distances[i] = 1.0\n        # The car that's moving right to left will have a smaller distance to the car that's moving right to left.\n        elif i == 1:\n            distances[i] = 0.0\n        else:\n            # The car that's moving right to left will have a smaller distance to the car that's moving right to left.\n            distances[i] = abs(distances[i-1])\n    \n    # Compute the number of collisions.\n    return sum(distances)\n",
        "test": "assert     car_race_collision(100) == 1"
    },
    {
        "number": 42,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    l = l + [i + 1 for i in l]\n    return l\n",
        "test": "assert     incr_list([2, 1, 5]) == [3, 2, 2, 5]"
    },
    {
        "number": 43,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    count_1 = 0\n    count_2 = 0\n    for i in l:\n        count_1 += i\n        count_2 += i + 1\n    if count_1 == count_2:\n        return True\n    else:\n        return False\n",
        "test": "assert     pairs_sum_to_zero([1,3,4,1,5]) == False"
    },
    {
        "number": 44,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return str(x // base) + (base - x % base)\n",
        "test": "assert     change_base(0, 10) == \"0\""
    },
    {
        "number": 45,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    \n    if a < 0:\n        raise ValueError('a must be positive.')\n    elif h <= 0:\n        raise ValueError('h must be positive.')\n",
        "test": "assert     triangle_area(4,6) == 12, \"triangle_area() failed to return 12\""
    },
    {
        "number": 46,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    if n <= 2:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3)\n",
        "test": "assert     fib4(0) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    l.sort()\n    length = len(l)\n    if length % 2 == 0:\n        return (l[length//2] + l[length//2-1]) / 2\n    else:\n        return l[length//2]\n",
        "test": "assert     median([1,2,3]) == 2.0"
    },
    {
        "number": 48,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    text = text.lower()\n    start = 0\n    end = len(text) - 1\n    while start < end:\n        if text[start]!= text[end]:\n            return False\n        start += 1\n        end -= 1\n    return True\n",
        "test": "assert         is_palindrome(\"noon\") == True"
    },
    {
        "number": 49,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if n < p:\n        return pow(n, p-2, p)\n    else:\n        return pow(n, n%p, p)\n    \ndef modp_q(n: int, q: int):\n    \"\"\"Return 2^n modulo q (be aware of numerics).\n    >>> modp_q(3, 5)\n    3\n    >>> modp_q(1101, 101)\n    2\n    >>> modp_q(0, 101)\n    1\n    >>> modp_q(3, 11)\n    8\n    >>> modp_q(100, 101)\n    1\n    \"\"\"\n    if n < q:\n        return pow(n, q-2, q)\n    else:\n        return pow(n, n%q, q)\n",
        "test": "assert     modp(2**19, 2) == 1"
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(\"QzCz\") == \"QzCz\""
    },
    {
        "number": 51,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # Remove vowels from the string\n    vowels = set('aeiouAEIOU')\n    vowels_removed = vowels.difference(set(text))\n    new_text = ''\n    for char in text:\n        if char not in vowels_removed:\n            new_text += char\n    return new_text\n",
        "test": "assert     remove_vowels(\"Testing \") == \"Testing \""
    },
    {
        "number": 52,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([1, 2, 3, 4, 5], 0) == True"
    },
    {
        "number": 53,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return x + y\n",
        "test": "assert     add(2, 1) == 3, \"Expected add(2, 1) to return 3\""
    },
    {
        "number": 54,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return s0 == s1\n",
        "test": "assert     same_chars('abc', 'abcd') == False"
    },
    {
        "number": 55,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n",
        "test": "assert     fib(1) == 1"
    },
    {
        "number": 56,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    correct = True\n    for bracket in brackets:\n        if bracket!= \">\" and bracket!= \"<\":\n            correct = False\n    return correct\n",
        "test": "assert     correct_bracketing('<>') == True"
    },
    {
        "number": 57,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    l.sort()\n    for i in range(len(l) - 1):\n        if l[i] >= l[i + 1]:\n            return False\n    return True\n",
        "test": "assert     monotonic([\"a\", \"b\", \"c\", \"d\"])"
    },
    {
        "number": 58,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    # set from sets\n    common_set = set()\n    # set from dict\n    set_d = set(l1)\n    # set from tuple\n    set_t = set(l2)\n    common_set.update(set_d)\n    common_set.update(set_t)\n    return list(common_set)",
        "test": "assert     common([], []) == []"
    },
    {
        "number": 59,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n > 2:\n        for i in range(2, n):\n            if n % i == 0:\n                return i\n    return None\n",
        "test": "assert     largest_prime_factor(12) == 2"
    },
    {
        "number": 60,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return n * (n + 1) // 2\n",
        "test": "assert     sum_to_n(1) == 1"
    },
    {
        "number": 61,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    bracket_count = {\"(\":\")\", \")\":\"(\", \")\":\"(\", \"}\":\"{\", \"}\":\"{\", \"}\":\"}\"}\n    res = []\n    for i in brackets:\n        if i in bracket_count:\n            res.append(bracket_count[i])\n    return not res\n",
        "test": "assert correct_bracketing(\"((())\") == True"
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    xs = list(map(lambda x: x[1:], xs))\n    return list(map(lambda x: x[0] + x[1] * x[0] + x[2] * x[1] * x[0] ** 2, xs))\n",
        "test": "assert     (derivative(2.0) == 0.0)"
    },
    {
        "number": 63,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    vowels = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n    if s == \"\":\n        return 0\n    else:\n        return sum(c in vowels for c in s)\n",
        "test": "assert     vowels_count(\"\") == 0, \"The string can't be empty\""
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    assert 0 <= shift < len(x), \"shift must be between 0 and number of digits\"\n    assert len(x) == len(shift), \"number of digits must be equal to number of digits after shift\"\n    return \"\".join([str(int(x[i]) + shift) if i < len(x) - 1 else x[i] for i in range(len(x))])\n",
        "test": "assert     circular_shift(13, -5) == '011'"
    },
    {
        "number": 66,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return sum(ord(c) for c in s.upper())",
        "test": "assert     digitSum(\"ASF\") == 22"
    },
    {
        "number": 67,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    import collections\n    fruit_dic = collections.Counter(s)\n    result = 0\n    for key, value in fruit_dic.items():\n        if key == '0':\n            result = result + value\n        elif key == '1':\n            result = result + value\n        else:\n            result = result + value\n    return result\n",
        "test": "assert     fruit_distribution('5', 5) == 1"
    },
    {
        "number": 68,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    # find the first non-zero node that has even index, else return empty array\n    if len(arr) == 0:\n        return []\n    idx = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            idx = i\n            break\n    \n    if arr[idx] % 2 == 0:\n        return [arr[idx], idx]\n    \n    return [arr[idx], idx]\n    \n    # if the tree has no odd numbered nodes, then return the node with smallest index\n    # else we go one by one, then find the smallest even value with every iteration,\n    # to find the last node with the smallest even value.\n    # return the index of the smallest even valu",
        "test": "assert     pluck([]) == []"
    },
    {
        "number": 69,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    min = lst[0]\n    for i in range(len(lst)):\n        if min > lst[i]:\n            min = lst[i]\n    return min\n",
        "test": "assert     search([1]) == 1"
    },
    {
        "number": 70,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    lst.sort()\n    x = len(lst)\n    for i in range(1,x):\n        if lst[i] < lst[i-1]:\n            lst[i], lst[i-1] = lst[i-1], lst[i]\n        else:\n            break\n    return lst\n",
        "test": "assert     strange_sort_list([]) == []"
    },
    {
        "number": 71,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    import math\n    \n    d = math.sqrt((b ** 2) + (c ** 2))\n    if d > c:\n        return -1\n    elif d == c:\n        return (a + b) / 2\n    elif d == a:\n        return math.sqrt((b ** 2) + (c ** 2))\n    elif d == b:\n        return math.sqrt((a ** 2) + (c ** 2))\n    elif d == a + c:\n        return (2 * (a + b) * (b - a)) / 3\n    elif d == a + b + c:\n        return (2 * (a + b) * (b - a) * (b - a)) / 3\n    elif d == a + b * b + c * c:\n        return (2 * (a + b) * (b - a) * (b - a) * (b - a) * (b - a)) / 3\n    else:\n        return -1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert triangle_area(1, 1, 1) == -1"
    },
    {
        "number": 72,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if q[0] == q[-1]:\n        return True\n    else:\n        for i in range(1,len(q)):\n            if q[i] == q[i-1] and will_it_fly(q[:i]+q[i+1:],w):\n                return True\n        return False\n",
        "test": "assert     will_it_fly([\"abcd\",\"bcdef\"], 3) == False"
    },
    {
        "number": 73,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    # Fill this in.\n    count = 0\n    for i in range(len(arr) - 1):\n        if arr[i]!= arr[i+1]:\n            if arr[i] > arr[i+1]:\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n            count += 1\n    return count\n",
        "test": "assert     smallest_change([5, 6, 4, 2, 7]), \"The array must not contain duplicate numbers.\""
    },
    {
        "number": 74,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    # your code here\n    total_list = []\n    if len(lst1) < len(lst2):\n        for word in lst1:\n            if len(word) < len(lst2[0]):\n                total_list.append(word)\n    else:\n        for word in lst2:\n            if len(word) < len(lst1[0]):\n                total_list.append(word)\n    return total_list",
        "test": "assert     total_match(['hello', 'world', 'programmer'], ['hbbs', 'c', 'wb']) == ['hbbs', 'c', 'wb'], \"Total matching should return hbbs or c or wb\""
    },
    {
        "number": 75,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if a <= 100:\n        if a%3 == 0 or a%5 == 0:\n            return True\n    return False\n",
        "test": "assert     is_multiply_prime(13) == False"
    },
    {
        "number": 76,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if n == 1:\n        return True\n    if n == 2:\n        return n**0.5 == x\n    if n == 3:\n        return n**0.5 == x**0.5\n    if n > 3:\n        return is_simple_power(x, n-3) and is_simple_power(x**2, n-2) and is_simple_power(x**3, n-1)\n    else:\n        return False\n",
        "test": "assert     is_simple_power(2, 0) == False"
    },
    {
        "number": 77,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    if a < 0:\n        a = -a\n    if a % 3 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     iscube(5)==False"
    },
    {
        "number": 78,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    if num == \"\":\n        return 0\n    num = str(num)\n    if num[0] == \"0\":\n        return 0\n    digits = int(num[0])\n    if num[1] == \"0\":\n        return 0\n    if num[2] == \"0\":\n        return 0\n    if num[3] == \"0\":\n        return 0\n    if num[4] == \"0\":\n        return 0\n    if num[5] == \"0\":\n        return 0\n    if num[6] == \"0\":\n        return 0\n    if num[7] == \"0\":\n        return 0\n    if num[8] == \"0\":\n        return 0\n    if num[9] == \"0\":\n        return 0\n    if num[10] == \"0\":\n        return 0\n    if num[11] == \"0\":\n        return 0\n    if num[12] == \"0\":\n        return 0\n    if num[13] == \"0\":\n        return 0\n    if num[14] == \"0\":\n        return 0\n    if num[15] == \"0\":\n        return 0\n    if num[16] == \"0\":\n        return 0\n    if num[17] == \"0\":\n        return 0\n    if num[18] == \"0\":\n        return 0\n    if num[19] == \"0\":\n        return 0\n    if num[20] == \"0\":\n        return 0\n    if num[21] == \"0\":\n        return 0\n    if num[22] == \"0\":\n        return 0\n    if num[23] == \"0\":\n        return 0\n    if num[24] == \"0\":\n        return 0\n    if num[25] == \"0\":\n        return 0\n    if num[26] == \"0\":\n        return 0\n    if num[27] == \"0\":\n        return 0\n    if num[28] == \"0\":\n        return 0\n    if num[29] == \"0\":\n        return 0\n    if num[30] == \"0\":\n        return 0\n    if num[31] == \"0\":\n        return 0\n    if num[32] == \"0\":\n        return 0\n    if num[33] == \"0\":\n        return 0\n    if num[34] == \"0\":\n        return 0\n    if num[35] == \"0\":\n        return 0\n    if num[36] == \"0\":\n        return 0\n    if num[37] == \"0\":\n        return 0\n    if num[38] == \"0\":\n        return 0\n    if num[39] == \"0\":\n        return 0\n    if num[40] == \"0\":\n        return 0\n    if num[41] == \"0\":\n        return 0\n    if num[42] == \"0\":\n        return 0\n    if num[43] == \"0\":\n        return 0\n    if num[44] == \"0\":\n        return 0\n    if num[45] == \"0\":\n        return 0\n    if num[46] == \"0\":\n        return 0\n    if num[47] == \"0\":\n        return 0\n    if num[48] == \"0\":\n        return 0\n    if num[49] == \"0\":\n        return 0\n    if num[50] == \"0\":\n        return 0\n    if num[51] == \"0\":\n        return 0\n    if num[52] == \"0\":\n        return 0\n    if num[53] == \"0\":\n        return 0\n    if num[54] == \"0\":\n        return 0\n    if num[55] == \"0\":\n        return 0\n    if num[56] == \"0\":\n        return 0\n    if num[57] == \"0\":\n        return 0\n    if num[58] == \"0\":\n        return 0\n    if num[59] == \"0\":\n        return 0\n    if num[60] == \"0\":\n        return 0\n    if num[61] == \"0\":\n        return 0\n    if num[62] == \"0\":\n        return 0\n    if num[63] == \"0\":\n        return 0\n    if num[64] == \"0\":\n        return 0\n    if num[65] == \"0\":\n        return 0\n    if num",
        "test": "assert hex_key(4) == \"0A\""
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    binary_number = str(decimal)\n    binary_number_stripped = binary_number[:-1]\n    binary_number_stripped = binary_number_stripped[::-1]\n    binary_number_stripped_length = len(binary_number_stripped)\n    #print(binary_number_stripped_length)\n    for i in range(binary_number_stripped_length):\n        if (binary_number[i] == \"1\"):\n            binary_number[i] = \"0\"\n    #print(binary_number)\n    return \"\".join(binary_number)\n",
        "test": "assert         decimal_to_binary(2.0) == '1010'"
    },
    {
        "number": 80,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    if len(s) < 3:\n        return False\n    count = 0\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] and s[i] == s[i+2]:\n            count += 1\n    if count >= 3:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_happy(\"abcdefghijklmnopqrstuvwxyz\") == False, 'not is_happy'"
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    \n    gpa_list = []\n    list_of_gpa = []\n    list_of_letter_grades = []\n    \n    for gpa in grades:\n        gpa_list.append(float(gpa))\n    \n    gpa_list.sort()\n    \n    for gpa in gpa_list:\n        if gpa >= 3.5:\n            list_of_gpa.append('A+')\n        elif gpa >= 3:\n            list_of_gpa.append('A')\n        elif gpa >= 1.7:\n            list_of_gpa.append('B')\n        elif gpa >= 1.3:\n            list_of_gpa.append('B-')\n        elif gpa >= 1:\n            list_of_gpa.append('C')\n        elif gpa >= 0.7:\n            list_of_gpa.append('C-')\n        elif gpa >= 0.3:\n            list_of_gpa.append('C-')\n        else:\n            list_of_gpa.append('C-')\n    \n    for gpa in gpa_list:\n        list_of_letter_grades.append(int(gpa))\n        \n    return list_of_letter_grades\n",
        "test": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0])==True"
    },
    {
        "number": 82,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return len(string) % 2 == 0\n",
        "test": "assert     prime_length(\"six\") == False"
    },
    {
        "number": 83,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    nums = list(str(n))\n    num_count = 0\n    for i in range(len(nums)):\n        if nums[i] == '1':\n            num_count += 1\n        else:\n            num_count = 0\n    return num_count\n",
        "test": "assert     starts_one_ends(1) == 1"
    },
    {
        "number": 84,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    \n    # 0 bit\n    if N == 0:\n        return \"0\"\n    \n    # 1 bit\n    if N < 2:\n        return str(N)\n    \n    # get all of the bits\n    a = \"\"\n    while N > 0:\n        a += str(N % 2)\n        N //= 2\n        \n    # return the final result\n    return a\n",
        "test": "assert     solve(0) == '0'"
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    even = [i for i in lst if i % 2 == 0]\n    odd = [i for i in lst if i % 2!= 0]\n    return even + odd\n",
        "test": "assert     add([]) == [], \"Empty list should be returned\""
    },
    {
        "number": 86,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    from collections import OrderedDict\n    s = s.lower()\n    return ''.join(OrderedDict.fromkeys(s.split()))\n",
        "test": "assert     (anti_shuffle('') == \"\")"
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    try:\n        row = (x, lst)\n        row.sort()\n        return [(row[0], row[1][col]) for col in range(len(row[1])) for row in zip(*row[1])]\n    except:\n        return []\n",
        "test": "assert     get_row([1,2,3,4,5], 4) == [(1,2,3), (4,5)]"
    },
    {
        "number": 88,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    array.sort(key=lambda x: sum(x) % 2)\n    return array\n",
        "test": "assert     sort_array([3, 6, 2, 0, 4, 1, 2]) == [0, 2, 1, 2, 3, 6, 4"
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    # TODO\n    encrypt_key = 'z'\n    s_list = s.split()\n    for i in s_list:\n        c_list = list(i)\n        encrypt_key += encrypt_key[(len(encrypt_key) - 2) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 1) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 3) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 2) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 1) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 4) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 3) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 2) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 1) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 5) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 3) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 2) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 1) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 6) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 4) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 3) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 2) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 1) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 7) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 5) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 2) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 1) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 7) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 6) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 5) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 2) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 1) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 7) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 6) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 5) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 2) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 1) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - ",
        "test": "assert         encrypt(\"abcdefghijklmnopqrstuvwxyz\") == \"BQDEJMYOZ\", \"Encrypt should be nominally true\""
    },
    {
        "number": 90,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    if not lst:\n        return None\n    \n    min_idx = 0\n    for i in range(len(lst) - 1):\n        if lst[i + 1] < lst[i]:\n            min_idx = i + 1\n    return lst[min_idx]\n",
        "test": "assert     next_smallest([]) == None"
    },
    {
        "number": 91,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    boredoms = 0\n    for word in S.split('.'):\n        if word[0].lower() in ['i', 'you','she', 'you', 'he', 'he']:\n            boredoms += 1\n    return boredoms\n",
        "test": "assert     is_bored(\"hello\") == False, \"is_bored() with invalid arguments: 'hello'\""
    },
    {
        "number": 92,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if isinstance(x, (int, float)):\n        if isinstance(y, (int, float)):\n            if isinstance(z, (int, float)):\n                if (x+y) == z:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert         any_int(1, 2, 3) == True, \"2\""
    },
    {
        "number": 93,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    \n    # your code goes here\n    message = message.upper()\n    new_message = \"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for letter in message:\n        if letter in vowels:\n            new_message += letter.swapcase()\n        else:\n            new_message += letter\n    return new_message\n",
        "test": "assert     encode('') == ''"
    },
    {
        "number": 94,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    \n    #sieve of eratosthenes\n    #for i in range(2,len(lst)+1):\n    #    if lst[i]==0:\n    #        print(i)\n    #        for j in range(2*i,len(lst)+1,i):\n    #            lst[j]=0\n    #    print(\"**************\")\n    #    for k in range(i,len(lst),i):\n    #        if lst[k]==0:\n    #            print(k)\n    #            lst[k]=1\n    #            print(lst[k])\n    #    print(\"**************\")\n    #    print(lst)\n    #    print(\"**************\")\n    #print(lst)\n    \n    #get sum of digits\n    maxnum=0\n    for i in range(0,len(lst)):\n        if lst[i]>0:\n            temp=lst[i]\n            while temp:\n                r=temp%10\n                temp=temp//10\n                if r>maxnum:\n                    maxnum=r\n        if maxnum>0:\n            sum1=0\n            for j in range(maxnum,0,-1):\n                if lst[i]>=j:\n                    sum1+=lst[i]//j\n                else:\n                    break\n            print(sum1)\n            return sum1\n    return maxnum\n",
        "test": "assert     skjkasdkd([]) == 0"
    },
    {
        "number": 95,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return all(isinstance(k,str) for k in dict.keys()) and all(isinstance(k,str) for k in dict.values())\ndef check_dict_type(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings, else return False.\n    Examples:\n    check_dict_type({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_type({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_type({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_type({\"a\":\"apple\", \"a\":\"apple\", \"a\":\"apple\"}) should return True.\n    \"\"\"\n    return all(isinstance(k,str) for k in dict.keys()) and all(isinstance(k,str) for k in dict.values())\ndef check_dict_size(dict):\n    \"\"\"\n    Given a dictionary, return True if all values in the dictionary are of the same type, else return False.\n    Examples:\n    check_dict_size({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_size({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_size({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_size({\"a\":\"apple\", \"a\":\"apple\", \"a\":\"apple\"}) should return True.\n    \"\"\"\n    return all(isinstance(v,type(dict.values()[0])) for v in dict.values())\ndef check_dict_value(dict):\n    \"\"\"\n    Given a dictionary, return True if all values in the dictionary are of the same type, else return False.\n    Examples:\n    check_dict_value({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_value({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_value({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_value({\"a\":\"apple\", \"a\":\"apple\", \"a\":\"apple\"}) should return True.\n    \"\"\"\n    return all(isinstance(v,type(dict.values()[0])) for v in dict.values())\ndef check_dict_values_of_same_type(dict):\n    \"\"\"\n    Given a dictionary, return True if all values in the dictionary are of the same type, else return False.\n    Examples:\n    check_dict_values_of_same_type({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_values_of_same_type({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_values_of_same_type({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_values_of_same_type({\"a\":\"apple\", \"a\":\"apple\", \"a\":\"apple\"}) should return True.\n    \"\"\"\n    return all(isinstance(v,type(dict.values()[0])) for v in dict.values())\ndef test_check_dict_value():\n    dic = {'a': 1, 'b': 2, 'c': 'c', 'd': 'd'}\n    print(check_dict_value(dic))\n    print(check_dict_type(dic))\n    print(check_dict_size(dic))\n    print(check_dict_value(dic))\n    print(check_dict_values_of_same_type(dic))\n",
        "test": "assert     check_dict_case({\"1\":\"a\",\"2\":\"b\"}) == True"
    },
    {
        "number": 96,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # map is done by lists\n    map = []\n    for i in range(2, n):\n        if prime(i):\n            map.append(i)\n    return map\n",
        "test": "assert     count_up_to(0) == []"
    },
    {
        "number": 97,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return a * b\n",
        "test": "assert     multiply(120, 1) == 120"
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    result = 0\n    for i in range(len(s)):\n        if (s[i] == s[i].upper()):\n            result = result + 1\n    return result\n",
        "test": "assert     count_upper(\"A\") == 1"
    },
    {
        "number": 99,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    '''\n    to calculate the closest integer to a given number, we use\n    closest_integer_with_threshold(value, threshold)\n    '''\n",
        "test": "assert     (closest_integer(\"1\") == 1), \"The closest integer function should return 1.\""
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    piles = []\n    for i in range(n):\n        if i % 2:\n            piles.append(i + 1)\n        else:\n            piles.append(i)\n    return piles\n",
        "test": "assert     make_a_pile(2) == 1, 'The function make_a_pile should return 1'"
    },
    {
        "number": 101,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    words = s.split(',')\n    return words\n",
        "test": "assert     words_string('a') == ['a']"
    },
    {
        "number": 102,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    \n    #x = int(x)\n    #y = int(y)\n    \n    #return max(x,y) if x > y else -1\n    \n    #num = int(num)\n    \n    #if num % 2 == 0:\n        #return num\n    \n    #else:\n        #return -1\n    \n    num = abs(x - y)\n    \n    if num > 0:\n        return -1\n    \n    else:\n        return num\n",
        "test": "assert     choose_num(6, 7) == -1"
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    \n    # raise NotImplementedError\n    if n < m:\n        return -1\n    \n    ret = str(bin(round(int(n) + int(m))).lstrip('0b'))\n    return ret[2:]\n",
        "test": "assert     rounded_avg(-1, 5) == -1"
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    \n    digits = []\n    \n    for i in x:\n        if i%10==0:\n            digits.append(i)\n    \n    digits.sort()\n    \n    return digits\n",
        "test": "assert     unique_digits([3,0,2,5,2,0,4]) == [2,5]"
    },
    {
        "number": 105,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    arr = sorted(arr)\n    return arr\n",
        "test": "assert     by_length([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9], \"by_length(arr) failed\""
    },
    {
        "number": 106,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    factorials = []\n    if n == 0:\n        return factorials\n",
        "test": "assert     f(0) == []"
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    l, r = 1, n\n    even, odd = 0, 0\n",
        "test": "assert     even_odd_palindrome(18) == (4, 4)"
    },
    {
        "number": 108,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert     count_nums([123, 12, -32]) == 2"
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    size = len(arr)\n    if size == 0:\n        return True\n    # initialize result\n    result = True\n    # recur for every 2nd element\n    for i in range(2):\n        result = move_one_ball(arr[:size-i]) or result\n        # move to the next element\n        result = move_one_ball(arr[size-i:size]) or result\n        # if we get to end of the array\n        if not result:\n            return result\n    return result\n",
        "test": "assert "
    },
    {
        "number": 110,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    if lst1 == lst2:\n        return 'NO'\n    if len(lst1) == len(lst2):\n        for i in lst1:\n            if i not in lst2:\n                return 'NO'\n        return 'YES'\n    return 'NO'\n",
        "test": "assert     exchange([1, 2, 3], [2, 3, 1]) == \"YES\""
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    \n    letter_count = {}\n    for letter in test:\n        if letter not in letter_count:\n            letter_count[letter] = 1\n        else:\n            letter_count[letter] += 1\n    letter_count = sorted(letter_count.items(), key = lambda item : item[1], reverse = True)\n    return letter_count\n",
        "test": "assert     histogram(\"abccdeef\") == {'a': 2, 'b': 1, 'c': 2, 'd': 2, 'e': 1, 'f': 1}"
    },
    {
        "number": 112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    s,c=s[::-1],c[::-1]\n    if s==c:\n        return (s,\"True\")\n    else:\n        return (s,\"False\")\n",
        "test": "assert "
    },
    {
        "number": 113,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    from collections import Counter\n    c = Counter(lst)\n    res = []\n    for i in range(len(c)):\n        if c[i] % 2!= 0:\n            res.append(i)\n    return res\n",
        "test": "assert     odd_count([]) == []"
    },
    {
        "number": 114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    n = len(nums)\n    if n == 0:\n        return 0\n    currentSum = 0\n    min_sum = n\n    \n    for i in range(n):\n        currentSum += nums[i]\n        while currentSum >= min_sum:\n            min_sum -= nums[i]\n            \n    return min_sum\n    \nnums = [2, 3, 4, 1, 2, 4]\nprint(minSubArraySum(nums))\n",
        "test": "assert     minSubArraySum(nums=[-2,1,-3,4,-1,2,1,-5,4]) == 0"
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if capacity == 1:\n        return 0\n    l_bucket, r_bucket = len(grid), len(grid[0])\n    # The number of wells can be larger than capacity.\n    # Therefore, we need to generate buckets, and we put the max water into a dictionary.\n    water_table = {}\n    for i in range(l_bucket):\n        for j in range(r_bucket):\n            if grid[i][j] not in water_table:\n                water_table[grid[i][j]] = {'left': None, 'right': None}\n                water_table[grid[i][j]]['left'] = l_bucket\n                water_table[grid[i][j]]['right'] = r_bucket\n            if capacity < water_table[grid[i][j]]['left']:\n                water_table[grid[i][j]]['left'] = capacity\n            if capacity < water_table[grid[i][j]]['right']:\n                water_table[grid[i][j]]['right'] = capacity\n    # All buckets are empty.\n    # We need to fill the buckets.\n    for i in range(l_bucket):\n        for j in range(r_bucket):\n            if grid[i][j] not in water_table:\n                continue\n            if water_table[grid[i][j]]['left'] == None:\n                continue\n            if water_table[grid[i][j]]['right'] == None:\n                continue\n            min_left, max_left = math.inf, -math.inf\n            min_right, max_right = math.inf, -math.inf\n            for k in range(water_table[grid[i][j]]['left']):\n                left = grid[i][j] - k\n                if left in water_table:\n                    if water_table[left]['left'] > min_left:\n                        min_left = water_table[left]['left']\n                        if min_left == max_left:\n                            continue\n                    if water_table[left]['right'] > max_right:\n                        max_right = water_table[left]['right']\n                        if max_right == min_right:\n                            continue\n                    grid[i][j] -= k\n                    break\n            for k in range(water_table[grid[i][j]]['right']):\n                right = grid[i][j] + k\n                if right in water_table:\n                    if water_table[right]['left'] > min_left:\n                        min_left = water_table[right]['left']\n                        if min_left == max_left:\n                            continue\n                    if water_table[right]['right'] > max_right:\n                        max_right = water_table[right]['right']\n                        if max_right == min_right:\n                            continue\n                    grid[i][j] += k\n                    break\n    return max(grid[i][j] for i in range(l_bucket) for j in range(r_bucket))\n",
        "test": "assert     max_fill(grid, capacity) == "
    },
    {
        "number": 116,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # no need to sort the array with just one element\n    if len(arr) == 1:\n        return arr\n    # as we know that the elements in the array have no duplicates,\n    # we can find the leftmost and the rightmost non-zero element\n    left, right = 0, len(arr) - 1\n    #\n    # we will hold the index of the leftmost element\n    while arr[left]!= 0:\n        left += 1\n    #\n    # we will hold the index of the rightmost element\n    while arr[right]!= 0:\n        right -= 1\n    #\n    # we need to copy the array, by swapping the\n    # leftmost and rightmost non-zero element\n    arr[left], arr[right] = arr[right], arr[left]\n    #\n    # we need to sort the remaining elements\n    sort_array(arr[left + 1:])\n    sort_array(arr[:right - left])\n    sort_array(arr[right:])\n    return arr\n",
        "test": "assert     sort_array([1, 1, 1, 0, 0]) == [1, 0, 1, 1, 0]"
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    words = []\n    for c in s:\n        if c.lower() in 'bcdfghjklmnpqrstvwxyz':\n            words.append(c.lower())\n    return word",
        "test": "assert     select_words('abc', 2) == ['abc', 'abc', 'abc', 'abc', 'abc', 'abc'],'select_words error'"
    },
    {
        "number": 118,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    left_index = 0\n    right_index = len(word) - 1\n    # for vowel in word:\n    #     if word[0]!= word[-1]:\n    #         left_index += 1\n    #     else:\n    #         break\n    #     if left_index >= len(word):\n    #         right_index -= 1\n    #     elif right_index < 0:\n    #         right_index += 1\n    \n    word = word.split()\n    if word[0] == word[-1]:\n        return \"\"\n    left_index_last = 0\n    right_index_last = len(word) - 1\n    for i in range(len(word)):\n        left_index_last += 1\n        right_index_last -= 1\n        if word[i] == \"e\":\n            left_index_last += 1\n            right_index_last -= 1\n        elif word[i] == \"a\":\n            if word[i] == word[i-1]:\n                left_index_last -= 1\n            else:\n                left_index_last += 1\n        elif word[i] == \"o\":\n            if word[i-1] == word[i]:\n                right_index_last += 1\n            else:\n                right_index_last -= 1\n        elif word[i] == \"y\":\n            if word[i-1] == word[i-2]:\n                right_index_last -= 1\n            else:\n                right_index_last += 1\n        else:\n            return \"\"\n    if word[-1] == \"e\":\n        left_index_last -= 1\n    elif word[-1] == \"a\":\n        right_index_last -= 1\n    elif word[-1] == \"o\":\n        right_index_last -= 1\n    elif word[-1] == \"y\":\n        left_index_last -= 1\n    else:\n        return \"\"\n    \n    return word[left_index_last+1:right_index_last]\n    \ndef main():\n    word = input().strip()\n    print(get_closest_vowel(word))\n",
        "test": "assert get_closest_vowel(\"AA\") == \"\""
    },
    {
        "number": 119,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    def is_ok(lst):\n        if len(lst) < 2 or len(lst[0]) < len(lst[1]):\n            return False\n        elif len(lst[0]) == len(lst[1]):\n            return all(lst[0][i] == lst[1][i] for i in range(len(lst[0])))\n        else:\n            return False\n        return True\n    for lst in (['(()(),)', ')()'], ['(())', '())']):\n        if not is_ok(lst): return 'No'\n    return 'Yes'\n",
        "test": "assert     match_parens([]) == 'No'"
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    temp = []\n    low = max(arr)\n    high = sum(arr)\n    n = len(arr)\n    for i in range(0, k):\n        temp.append(high)\n    for i in range(0, n):\n        temp.append(low)\n    temp.sort()\n    return temp\n",
        "test": "assert "
    },
    {
        "number": 121,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    odd = 0\n    odd_lst = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            odd += lst[i]\n",
        "test": "assert "
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if not arr or len(arr) < 2:\n        return 0\n    first = k - 1\n    for i in range(first, -1, -1):\n        num = arr[i]\n        if first - i > 1:\n            # print(num, first - i)\n            num = arr[first - i] + arr[first - i + 1]\n            arr[first - i] = num\n    return sum(arr[:first]",
        "test": "assert     add_elements([1, 4, 9, 7], 3) == 10"
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    result = []\n    even = []\n",
        "test": "assert     get_odd_collatz(1) == [1]"
    },
    {
        "number": 124,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    return True if len(date.split('-')) == 3 else False\n",
        "test": "assert     valid_date(\"30-04-2021\") == True"
    },
    {
        "number": 125,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    try:\n        #todo : make it faster\n        txt = txt.replace(\"\\n\",\",\") # replace the newlines with commas\n        txt = txt.split(\",\")\n        txt = [word.lower() for word in txt if len(word) > 0] # remove empty strings\n        return txt\n    except:\n        return [word.lower() for word in txt if len(word) > 0] # remove empty strings\n",
        "test": "assert     split_words(\"abc,def,ghi\") == [\"abc\", \"def\", \"ghi\"]"
    },
    {
        "number": 126,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    for i in range(len(lst) - 1):\n        if lst[i] == lst[i+1]:\n            return False\n    return True\n",
        "test": "assert     is_sorted([]) == True, 'The is_sorted function should return True if the list is empty.'"
    },
    {
        "number": 127,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    \n    # Your code here\n    # 1. for each pair of intervals\n    # 2. if the intervals are closed, there is no intersection\n    # 3. check if length of intersection is a prime number\n    # 4. return \"YES\" if the length of intersection is a prime number\n    # 5. return \"NO\" otherwise\n    # 6. return the length of intersection\n    # 7. return \"NO\" if the two intervals do not intersect\n    \n    # 1. for each pair of intervals\n    # 2. check if both interval is closed\n    # 3. check if the intervals are closed\n    # 4. return \"NO\" if the intervals do not intersect\n    # 5. return the length of intersection if the intervals are closed\n    \n    #  6. return the length of intersection if the intervals are closed\n    # 7. return \"NO\" if the two intervals do not intersect\n    \n    #  7. return the length of intersection if the intervals are closed\n    \n    \n    # 1. for each pair of intervals\n    # 2. check if both interval is closed\n    # 3. if both intervals are closed\n    # 4. return \"NO\" if the intervals are closed\n    # 5. return the length of intersection if the intervals are closed\n    \n    #  6. return the length of intersection if the intervals are closed\n    # 7. return \"NO\" if the two intervals do not intersect\n    \n    \n    # 1. for each pair of intervals\n    # 2. check if both interval is closed\n    # 3. if both intervals are closed\n    # 4. return \"NO\" if the intervals are closed\n    # 5. return the length of intersection if the intervals are closed\n    \n    #  6. return the length of intersection if the intervals are closed\n    # 7. return \"NO\" if the two intervals do not intersect\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     intersection([1,2],[3,4]) == (1,2)"
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if not arr:\n        return None\n    \n    arr = sorted(arr, key=lambda num: num, reverse=True)\n    max_val = max(arr)\n    arr = [abs(num) for num in arr if num!= 0]\n    magnitude = 1\n    signs = ['1', '-1']\n    for num in arr:\n        magnitude *= (num if num >= 0 else -num)\n        if num > max_val:\n            break\n    return magnitude if magnitude!= 0 else None\n",
        "test": "assert     prod_signs([-1,0,1]) == 1, \"First test passed!\""
    },
    {
        "number": 129,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    # NOTE: it is O(n*n), where n is the number of rows and columns\n    if not grid:\n        return []\n",
        "test": "assert     minPath([], 1) == []"
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    if n < 3:\n        return [1, n]\n    tri_list = [1, n]\n    for i in range(3, n + 1, 2):\n        tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i])\n    return tri_list\n",
        "test": "assert "
    },
    {
        "number": 131,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    while n:\n        if n % 2 == 1:\n            n //= 10\n        else:\n            n //= 10\n    return n\n",
        "test": "assert         (digits(17) == 0), \"digits(17) is wrong\""
    },
    {
        "number": 132,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    i = 0\n    while i < len(string):\n        if string[i] == '[':\n            return False\n        elif string[i] == ']':\n            return True\n        elif string[i] == '{':\n            return is_nested('[')\n        elif string[i] == '}':\n            return is_nested(']')\n        elif string[i] == '.':\n            if string[i - 1] == '{' or string[i - 1] == '}':\n                return True\n            else:\n                return False\n        i += 1\n    return True\n",
        "test": "assert     is_nested('[[]]') == False"
    },
    {
        "number": 133,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    # pylint: disable=too-many-statements\n    total = 0\n    for n in lst:\n        total = total + pow(n, 2)\n    return round(total)\n",
        "test": "assert     sum_squares([]) == 0"
    },
    {
        "number": 134,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    txt_len = len(txt)\n    last_char = txt[-1]\n    return last_char =='' or txt_len > 1 and txt[-1] =='' or last_char =='' and txt_len > 1\n",
        "test": "assert not check_if_last_char_is_a_letter(\"a\")"
    },
    {
        "number": 135,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    max_index = -1\n    for i in range(len(arr)):\n        if arr[i] > arr[max_index] and (arr[i] - arr[max_index] >= 2):\n            max_index = i\n    return max_index\n",
        "test": "assert     can_arrange([]) == -1"
    },
    {
        "number": 136,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    if len(lst) < 2:\n        return (None, None)\n    # We'll keep track of the negative integers, which should come after the negative numbers\n    negatives = []\n    # We'll keep track of the positive integers, which should come before the negative numbers\n    positive = []\n    # The first negative number is always positive\n    positive.append(lst[0])\n    # Initialize the second negative number to None\n    negatives.append(None)\n    # The second negative number should be positive\n    negatives.append(lst[1])\n",
        "test": "assert     largest_smallest_integers([]) == (None, None)"
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if type(a) == type(b):\n        if isinstance(a, str) or isinstance(a, float):\n            if isinstance(b, str) or isinstance(b, float):\n                if b == a:\n                    return a\n                else:\n                    return b\n            else:\n                return b\n        elif isinstance(a, float) or isinstance(a, int):\n            if isinstance(b, float) or isinstance(b, int):\n                if a == b:\n                    return a\n                else:\n                    return b\n            else:\n                return b\n        else:\n            return b\n    else:\n        return b\n",
        "test": "assert     compare_one(4, 6) == 6"
    },
    {
        "number": 138,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if n < 2:\n        return False\n    if n % 4 == 0:\n        return True\n    if n == 2:\n        return True\n    return is_equal_to_sum_even(n - 2) or is_equal_to_sum_even(n - 3)\n",
        "test": "assert         is_equal_to_sum_even(4) == True"
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    if (n < 0):\n        print(\"ERROR: factorial function can't handle negative values\")\n    elif (n == 0):\n        return 1\n    else:\n        return n * special_factorial(n-1)\n",
        "test": "assert     special_factorial(5) == 120"
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    new_text = \"\"\n    for i, c in enumerate(text):\n        if i >= 2 and text[i - 2:i]!= \" \":\n            new_text += \"_\"\n        new_text += c\n    return new_text\n",
        "test": "assert     fix_spaces(\"     test     \") == \"test_test_   \""
    },
    {
        "number": 141,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    if file_name == \"\":\n        return \"Yes\"\n    \n    file_name = file_name.strip()\n    \n    # Check if the file's name starts with a latin alphapet letter\n    if not file_name[0].isalpha():\n        return \"No\"\n",
        "test": "assert     file_name_check('01.txt') == 'No'"
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    #TODO: implement this\n    #find a way to do this but not sure\n    return sum([i ** 2 for i in lst if i % 3 == 0 or i % 4!= 0])\n",
        "test": "assert "
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    word_list = sentence.split()\n    return''.join(word for word in word_list if len(word) % 2 == 0)\n",
        "test": "assert     words_in_sentence(\"abcdef\") == \"abcdef\""
    },
    {
        "number": 144,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if x == 0:\n        return True\n",
        "test": "assert "
    },
    {
        "number": 145,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # print('*******************')\n    # print(nums)\n    # print(type(nums))\n    nums = sorted(nums)\n    # print(nums)\n    # print(type(nums))\n    return nums\n",
        "test": "assert     order_by_points([1, 2, 3, 4]) == [1, 2, 3, 4]"
    },
    {
        "number": 146,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    count = 0\n    for i in range(len(nums)):\n        if nums[i] < 10:\n            if (nums[i] % 2 == 0) and (nums[i] > 0):\n                count += 1\n            elif (nums[i] % 2 == 1) and (nums[i] > 0):\n                count += 1\n        elif nums[i] % 2!= 0:\n            if (nums[i] % 2 == 1) and (nums[i] > 0):\n                count += 1\n            elif (nums[i] % 2 == 0) and (nums[i] > 0):\n                count += 1\n    return count\n",
        "test": "assert "
    },
    {
        "number": 147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if n <= 1:\n        return 0\n    \n    result = [0]*n\n    result[0] = 1\n    result[1] = 2\n    result[2] = 3\n    result[3] = 4\n    result[4] = 5\n    \n    for i in range(5, n):\n        result[i] = result[i-1] + 3*i + 2*i*2 + i*i + 2\n        \n    return result[n-1]\n",
        "test": "assert     get_max_triples(2) == 0"
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    # Import math\n    import math\n    \n    # Make a list of planet objects and return the list\n    planets = (Planet(planet1, math.sin(math.radians(0))), Planet(planet2, math.sin(math.radians(1))), Planet(planet2, math.sin(math.radians(2))), Planet(planet1, math.sin(math.radians(3))), Planet(planet1, math.sin(math.radians(4))), Planet(planet1, math.sin(math.radians(5))), Planet(planet1, math.sin(math.radians(6))), Planet(planet1, math.sin(math.radians(7))), Planet(planet1, math.sin(math.radians(8))), Planet(planet1, math.sin(math.radians(9))), Planet(planet1, math.sin(math.radians(10))), Planet(planet1, math.sin(math.radians(11))), Planet(planet1, math.sin(math.radians(12))))\n    \n    # Return the sorted list of planets\n    return sorted(planets)\n",
        "test": "assert     bf(('Mercury', 'Venus'), 'Earth') == ()"
    },
    {
        "number": 149,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    lst.sort()\n    return lst\n",
        "test": "assert     sorted_list_sum([]) == []"
    },
    {
        "number": 150,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if n == 1:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        return x_or_y(n - 1, x, y)\n",
        "test": "assert     x_or_y(0, 0, 0) == 0"
    },
    {
        "number": 151,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    if not lst:\n        return 0\n    total = 0\n    for number in lst:\n        total += number**2\n    return total\n    \ndef repeat_string(input_string):\n    \"\"\"\n    input_string: string to repeat\n    returns: the same string repeated to match the given input_string\n    \"\"\"\n    output_string = ''\n    for letter in input_string:\n        output_string += letter\n    return output_string\n    \ndef separate_numbers(input_string):\n    \"\"\"\n    input_string: a string of numbers separated by commas\n    returns: a list of numbers, one number per comma\n    \"\"\"\n    numbers = input_string.split(',')\n    return numbers\n    \ndef filter_numbers(input_string):\n    \"\"\"\n    input_string: string to filter\n    returns: the same string, except numbers are removed\n    \"\"\"\n    return input_string.replace(' ', '').replace('-', '').replace(',', '')\n",
        "test": "assert     double_the_difference([]) == 0, 'Double the difference function is not correct'"
    },
    {
        "number": 152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    \n    # your code here\n    pass",
        "test": "assert "
    },
    {
        "number": 153,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    # loop through the extensions list and find the first one that has the same strength\n    for extension in extensions:\n        if extension == extension[0]:\n            return extension[1] + extension[0].upper()\n    # if there are none, return the class name as a string\n    return class_name\n",
        "test": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']), 'Weakest extension names are not satisfied.'"
    },
    {
        "number": 154,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    c = set(b)\n    return a in c or any(a[i:i+len(b)] == b for i in range(len(b)))\n",
        "test": "assert     cycpattern_check(\"abcde\", \"cdedabcde\") == False"
    },
    {
        "number": 155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    count = 0\n    while num!= 0:\n        rem = num % 10\n        num = num // 10\n        if rem % 2 == 0:\n            count += 1\n    return count, count % 2\n",
        "test": "assert even_odd_count(3) == (2, 1)"
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    def int_to_roman(number):\n        numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n        units = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n        result = ''\n        for index, number in enumerate(numbers):\n            if number <= number:\n                result += units[index]\n            else:\n                while number > 0:\n                    number -= numbers[index]\n                    result += units[index]\n        return result\n    \n    def roman_to_int(number):\n        numeral = {}\n        roman = {1000: \"M\", 900: \"CM\", 500: \"D\", 400: \"CD\", 100: \"C\", 90: \"XC\", 50: \"L\", 40: \"XL\", 10: \"X\", 9: \"IX\", 5: \"V\", 4: \"IV\", 1: \"I\"}\n        for i in range(len(number)):\n            if i+1 < len(number):\n                if number[i] in roman:\n                    numeral[number[i]] = roman[number[i]]\n                else:\n                    numeral[number[i]] = \"?\"\n        return sum(numeral.values())\n    \n    def roman_to_numbers(number):\n        numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n        roman = ['M', 'D', 'C', 'L', 'X', 'V', 'I']\n        result = []\n        for i, number in enumerate(numbers):\n            if i+1 < len(numbers):\n                if number == \"M\":\n                    result.append(numeral[number])\n                elif number == \"D\":\n                    result.append(numeral[number[-1]] + roman[number[-2]])\n                elif number == \"C\":\n                    result.append(numeral[number[-2]] + roman[number[-1]])\n                elif number == \"X\":\n                    result.append(numeral[number[-1]] + roman[number[-2]] + roman[number[-3]])\n                elif number == \"L\":\n                    result.append(numeral[number[-2]] + roman[number[-1]] + roman[number[-3]])\n                elif number == \"X\":\n                    result.append(numeral[number[-1]] + roman[number[-2]] + roman[number[-3]] + roman[number[-4]])\n                elif number == \"V\":\n                    result.append(numeral[number[-3]] + roman[number[-2]] + roman[number[-1]] + roman[number[-4]])\n                elif number == \"I\":\n                    result.append(numeral[number[-4]] + roman[number[-3]] + roman[number[-2]] + roman[number[-1]])\n                else:\n                    result.append(number)\n        return result\n    \n    return int_to_roman(int(number))\n",
        "test": "assert     int_to_mini_roman(5) == \"d\""
    },
    {
        "number": 157,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    # TODO: Write your code here\n    return False\n",
        "test": "assert     right_angle_triangle(1, 3, 2) == False"
    },
    {
        "number": 158,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return max(words, key=lambda s: len(s))\n",
        "test": "assert         find_max([\"a\", \"a\", \"a\", \"b\", \"c\", \"a\", \"a\"]) == \"a\""
    },
    {
        "number": 159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if number < 0 or need < 0 or remaining < 0:\n        return []\n    if number >= need or remaining >= need:\n        remaining -= need\n        return [need, remaining]\n    \n    remaining = remain = need - number\n    for i in range(need):\n        remain += eat(number - 1, need - i - 1, remain)\n        remain += eat(number - 1, need - i, remain)\n    return [need, remain]\n",
        "test": "assert     (eat(1, 2, 1)) == [1, 0, 1]"
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if operator['+']:\n        operator['+'] = operator['+'].split(',')\n        operand = operand.split(',')\n        result = 0\n        for num in operand:\n            result += int(num)\n        return result\n    elif operator['-'] and operand:\n        result = operator['-']\n        for num in operand:\n            result -= int(num)\n        return result\n    elif operator['*']:\n        operand = operator['*'].split(',')\n        result = 1\n        for num in operand:\n            result *= int(num)\n        return result\n    elif operator['//']:\n        result = operator['//']\n        if operator['//'].isdigit():\n            result = int(operator['//'])\n        else:\n            raise NotImplementedError(f\"Operator {operator['//']} is not implemented yet.\")\n        return result\n    elif operator['**']:\n        result = operator['**']\n        if operator['**'].isdigit():\n            result = int(operator['**'])\n        else:\n            raise NotImplementedError(f\"Operator {operator['**']} is not implemented yet.\")\n        return result\n    else:\n        raise NotImplementedError(f\"Unknown operator {operator['+', '-', '*', '//', '**']}.\")\n",
        "test": "assert do_algebra([2,3,4], [1,2,3]) == 4"
    },
    {
        "number": 161,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    result = \"\"\n    for i in range(len(s)):\n        if s[i].islower():\n            result += s[i].upper()\n        else:\n            result += s[i].lower()\n    return result\n",
        "test": "assert     solve(\"abcd\") == \"dcbaabcd\""
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if not text:\n        return None\n    \n    if len(text) % 16 == 0:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n    else:\n        return None\n",
        "test": "assert     string_to_md5('') is None"
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return [x for x in range(a,b+1) if x % 2 == 0]\n",
        "test": "assert     generate_integers(0,2) == [0]"
    }
]