[
    {
        "number": 0,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    for n in numbers:\n        if abs(n) < threshold:\n            return False\n    return True\n",
        "test": "assert     has_close_elements([1, 2, 3, 4, 5, 1, 6], 0.1)",
        "num_ids": 320
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    if paren_string == \"\":\n        return []\n    paren_groups = paren_string.split(\"(\")\n    for paren_group in paren_groups:\n        if paren_group == \"\":\n            continue\n        new_paren_string = separate_paren_groups(paren_group)\n        new_paren_string = new_paren_string[0] + \"(\" + new_paren_string[1:] + \")\"\n        if new_paren_string not in paren_groups:\n            paren_groups.append(new_paren_string)\n    return paren_groups\n",
        "test": "assert     separate_paren_groups(\"}()\") == [\"{()}\"]",
        "num_ids": 405
    },
    {
        "number": 2,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return round(number)\n",
        "test": "assert     truncate_number(1) == 1",
        "num_ids": 160
    },
    {
        "number": 3,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    for i in operations:\n        if i < 0:\n            return False\n    return True\n",
        "test": "assert     below_zero([0, 0, 0]) == True",
        "num_ids": 187
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    x_mean = mean(numbers)\n    x_deviation = sum(x - x_mean for x in numbers) / len(numbers)\n    return x_deviation\n",
        "test": "assert     mean_absolute_deviation([1,2,3,4,5,6,7,7.5]) == 0.5",
        "num_ids": 249
    },
    {
        "number": 5,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return [el + delimeter for el in numbers]\n",
        "test": "assert     intersperse([1,2,3,4,5], 2) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503",
        "num_ids": 1159
    },
    {
        "number": 6,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    out = []\n    for s in paren_string.split():\n        if s[0] == '(':\n            out.append(len(out))\n        elif s[-1] == '(':\n            out.append(len(out))\n        elif out[-1] > len(out):\n            out.append(len(out))\n    return out\n",
        "test": "assert     parse_nested_parens('') == []",
        "num_ids": 379
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    result = []\n    for s in strings:\n        if substring in s:\n            result.append(s)\n    return result",
        "test": "assert     filter_by_substring([\"abc\", \"def\", \"ghi\", \"jkl\"], \"j\") == [\"jkl\"]",
        "num_ids": 1236
    },
    {
        "number": 8,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if len(numbers) < 1:\n        return (0, 1)\n    sum = 0\n    prod = 1\n    for i in numbers:\n        sum += i\n        prod *= i\n    return (sum, prod)\n",
        "test": "assert     sum_product([5, 9, -2, 4]) == (15, -2)",
        "num_ids": 221
    },
    {
        "number": 9,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    lst = []\n    for i in range(len(numbers) - 1, -1, -1):\n        val = numbers[i]\n        lst.append(val)\n        for j in range(i):\n            val = numbers[j]\n            lst.append(val)\n    return lst",
        "test": "assert     rolling_max([]) == []",
        "num_ids": 401
    },
    {
        "number": 10,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    start, end = 0, len(string) - 1\n    pre, palindrome = string[0], ''\n    while start < end:\n        while start < end and string[start]!= pre:\n            start += 1\n        while start < end and string[end]!= pre:\n            end -= 1\n        if start < end:\n            palindrome += string[start:end + 1] + string[start:end + 1][::-1]\n        pre, palindrome = palindrome[::-1], palindrome[::-1]\n    return palindrome\n",
        "test": "assert ",
        "num_ids": 370
    },
    {
        "number": 11,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    result = 0\n    for c in b:\n        result += (a.count(c) * 2)\n    return '{0:b}'.format(result % 2)\n",
        "test": "assert     string_xor('1', '0') == '0'",
        "num_ids": 233
    },
    {
        "number": 12,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    longest_string = ''\n    #find the longest string\n    for string in strings:\n        #if string is not empty\n        if len(string) > len(longest_string):\n            longest_string = string\n    #return it\n    return longest_string\n",
        "test": "assert     longest(['A', 'A', 'A', 'A']) == 'A'",
        "num_ids": 390
    },
    {
        "number": 13,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if a == b:\n        return a\n    if b % a == 0:\n        return greatest_common_divisor(a, b // a)\n    else:\n        return greatest_common_divisor(a, b + 1)\n",
        "test": "assert     greatest_common_divisor(3, 2) == 1",
        "num_ids": 250
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    string = string.upper()\n    p = []\n    for i in range(len(string) - 1):\n        for j in range(i + 1, len(string)):\n            p.append(string[i:j])\n    return p\n",
        "test": "assert     all_prefixes(\"a\") == [\"a\"]",
        "num_ids": 1203
    },
    {
        "number": 15,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return'' * n + str(n)\n",
        "test": "assert ",
        "num_ids": 141
    },
    {
        "number": 16,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    count = 0\n    for char in string:\n        count += string.count(char)\n    return count\n",
        "test": "assert     count_distinct_characters('') == 0",
        "num_ids": 1162
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    beat_range = {\n        'o': [1, 4],\n        '|': [2, 4],\n        '.|': [1, 4]\n    }\n    notes = [beat_range.get(note, []) for note in music_string.replace('|', '')]\n    return [len(notes[i]) for i in range(len(notes))]\n",
        "test": "assert     parse_music(\"o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|",
        "num_ids": 2265
    },
    {
        "number": 18,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    result = 0\n    for i in range(len(string) - len(substring) + 1):\n        if substring in string[i:i + len(substring)]:\n            result += 1\n    return result\n",
        "test": "assert     how_many_times('le', 'h') == 0",
        "num_ids": 182
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return \"\".join(sorted(numbers))",
        "test": "assert         sort_numbers(\"9-2\") == \"9-2\"",
        "num_ids": 322
    },
    {
        "number": 20,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return (min(numbers), max(numbers))\n",
        "test": "assert     find_closest_elements([1]) == (1, 1)",
        "num_ids": 329
    },
    {
        "number": 21,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    numbers_normalized = []\n    for number in numbers:\n        normalized_number = (number - min(numbers)) / (max(numbers) - min(numbers))\n        numbers_normalized.append(normalized_number)\n    return numbers_normalized\n",
        "test": "assert     rescale_to_unit([1.0, 2.0, 3.0, 4.0]) == [1.0, 2.0, 4.0, 3.0]",
        "num_ids": 431
    },
    {
        "number": 22,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return [int(x) for x in values if type(x) is int]\n",
        "test": "assert     filter_integers([1, 2, 4]) == [1, 2, 4]",
        "num_ids": 274
    },
    {
        "number": 23,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    n = 0\n    for char in string:\n        n += 1\n    return n\n    \ndef strsplit(string: str) -> list:\n    \"\"\" Split given string into a list\n    >>> strsplit('aabccccc')\n    ['a', 'a', 'b', 'c', 'c']\n    \"\"\"\n    string_list = string.split()\n    return string_list\n",
        "test": "assert     strlen('') == 0",
        "num_ids": 212
    },
    {
        "number": 24,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    divisor_array = [i for i in range(1, n+1) if n % i == 0]\n    return divisor_array[-1]\n",
        "test": "assert     largest_divisor(1) == 1",
        "num_ids": 167
    },
    {
        "number": 25,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    primes = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            primes.append(i)\n    return primes\n",
        "test": "assert     factorize(5) == [5]",
        "num_ids": 188
    },
    {
        "number": 26,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n",
        "test": "assert     remove_duplicates([1,2,2,3,4,4,4,5,5]) == [1,2,3,4,5]",
        "num_ids": 334
    },
    {
        "number": 27,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    return string.lower()\n",
        "test": "assert     flip_case(\"a1b2\") == \"a1b2\"",
        "num_ids": 179
    },
    {
        "number": 28,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate([]) == \"\"",
        "num_ids": 156
    },
    {
        "number": 29,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([\"abc\"], \"a\") == [\"abc\"]",
        "num_ids": 1191
    },
    {
        "number": 30,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return [x for x in l if x > 0]\n",
        "test": "assert     get_positive([1, -1, 1]) == [1, 1]",
        "num_ids": 165
    },
    {
        "number": 31,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    \n    # Write your code here.\n    if n == 2 or n == 3 or n == 5:\n        return True\n    if n % 2 == 0 or n % 3 == 0 or n % 5 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(1) == True",
        "num_ids": 288
    },
    {
        "number": 32,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if xs == []:\n        return 0.0\n    elif len(xs) % 2 == 1:\n        return 0.0\n    else:\n        return max([poly(xs[i:], xs[0]) for i in range(len(xs))])\n",
        "test": "assert     find_zero([0, 0]) == 0",
        "num_ids": 312
    },
    {
        "number": 33,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    for i in range(len(l)):\n        for j in range(len(l)):\n            if (l[i] + l[j]) % 3 == 0:\n                l[i], l[j] = l[j], l[i]\n    return l\n",
        "test": "assert sort_third([]) == []",
        "num_ids": 333
    },
    {
        "number": 34,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return sorted(set(l))\n",
        "test": "assert     unique([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 251
    },
    {
        "number": 35,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if len(l) == 0:\n        return None\n    else:\n        return max(l)\n",
        "test": "assert     max_element([3, 6, 8]) == 8, \"Should return 8, not 6\"",
        "num_ids": 1161
    },
    {
        "number": 36,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    # let the number of times the digit 7 is divisible by 11 or 13\n    if n%11==0:\n        return 0\n    elif n%13==0:\n        return 1\n    elif n%7==0:\n        return 2\n    elif n%5==0:\n        return 3\n    else:\n        return 0\n",
        "test": "assert     fizz_buzz(0) == 0",
        "num_ids": 320
    },
    {
        "number": 37,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    if len(l) % 2 == 0:\n        return l\n    else:\n        l_even = []\n        for i in range(0, len(l), 2):\n            if l[i] % 2 == 1:\n                l_even.append(l[i])\n        return l_even\n",
        "test": "assert         sort_even([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 386
    },
    {
        "number": 38,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    # split encoded string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # cycle through groups and decode each one.\n    result = \"\"\n    for group in groups:\n        result += group[0]\n        for c in group:\n            result += c\n    return result\n",
        "test": "assert         decode_cyclic(\"\") == \"\"",
        "num_ids": 458
    },
    {
        "number": 39,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if n == 0 or n == 1:\n        return n\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n",
        "test": "assert",
        "num_ids": 281
    },
    {
        "number": 40,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    if len(l) == 3:\n        return True\n    for i in range(3):\n        if l[i]!= sum(l[i+1:]) and l[i]!= 0:\n            return False\n    return True\n",
        "test": "assert     triples_sum_to_zero([-1, 0, 0, 0, 3, 3]) == False",
        "num_ids": 253
    },
    {
        "number": 41,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    if n % 2 == 0:\n        return n//2\n    else:\n        return n - 1\n",
        "test": "assert car_race_collision(0) == 0",
        "num_ids": 1066
    },
    {
        "number": 42,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return [e + 1 for e in l]\n",
        "test": "assert     incr_list([]) == []",
        "num_ids": 196
    },
    {
        "number": 43,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if len(l) == 2:\n        if l[0] == l[1]:\n            return True\n        else:\n            return False\n    else:\n        for index in range(len(l)):\n            if l[index] == 0:\n                for i in range(index+1, len(l)):\n                    if l[i] == 0:\n                        return True\n        return False\n",
        "test": "assert pairs_sum_to_zero([1, 0, 1]) == False",
        "num_ids": 336
    },
    {
        "number": 44,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return str(x)\n",
        "test": "assert     change_base(2, 4) == '2'",
        "num_ids": 147
    },
    {
        "number": 45,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    return (h ** 2) * (a / 2)\n",
        "test": "assert     triangle_area(1,2) == 2, \"should be 2\"",
        "num_ids": 104
    },
    {
        "number": 46,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    ",
        "test": "assert     fib4(0) == 0",
        "num_ids": 181
    },
    {
        "number": 47,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if l is None:\n        return None\n    else:\n        return sorted(l, key=lambda x: x)[int(len(l)/2)]\n",
        "test": "assert     median([4, 5, 6]) == 5",
        "num_ids": 290
    },
    {
        "number": 48,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    # TODO: Your code here\n    return True if text==text[::-1] else Fals",
        "test": "assert     is_palindrome('A') is True",
        "num_ids": 201
    },
    {
        "number": 49,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    while n!= 0:\n        if n & 1 == 1:\n            n = n >> 1\n        else:\n            n = n >> 1\n    if n == 0:\n        return 0\n    else:\n        return 1\n",
        "test": "assert     modp(0,1) == 0",
        "num_ids": 214
    },
    {
        "number": 50,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(\"\") == \"\"",
        "num_ids": 188
    },
    {
        "number": 51,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    text = text.lower()\n    for i in text:\n        if i in ['a', 'e', 'i', 'o', 'u']:\n            text = text.replace(i, '')\n    return tex",
        "test": "assert     remove_vowels('eins') == 'ein'",
        "num_ids": 253
    },
    {
        "number": 52,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    for i in range(len(l)):\n        if l[i] < t:\n            return False\n    return True\n",
        "test": "assert     (below_threshold(l=[0,1,2,3,4,5], t=3) == False)",
        "num_ids": 189
    },
    {
        "number": 53,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 1) == 2",
        "num_ids": 86
    },
    {
        "number": 54,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return s0 == s1 and s0.isalpha() == s1.isalpha()\n",
        "test": "assert     same_chars(\"abc\", \"cab\") == False",
        "num_ids": 218
    },
    {
        "number": 55,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "test": "assert fib(1) == 1",
        "num_ids": 189
    },
    {
        "number": 56,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return all(len(a) == 1 or a[0] == \"(\" for a in brackets)\n    \n",
        "test": "assert     correct_bracketing(\"(\")",
        "num_ids": 297
    },
    {
        "number": 57,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if not l:\n        return False\n    if l[0] <= l[1]:\n        return True\n    for i in range(1, len(l)):\n        if l[i] <= l[i - 1]:\n            return True\n    return False\n",
        "test": "assert     monotonic([2,5,6,2,4,5,1]) == True",
        "num_ids": 348
    },
    {
        "number": 58,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    s = []\n    for i in l1:\n        if i in l2:\n            s.append(i)\n    return s\n",
        "test": "assert     common([1, 2, 3, 4, 5, 6], [1, 2, 4, 5, 7]) == [1, 2, 4, 5, 7]",
        "num_ids": 379
    },
    {
        "number": 59,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    prime_factor = 0\n    while n % 2 == 0:\n        prime_factor += 1\n        n //= 2\n    \n    for factor in range(3, int(math.sqrt(n))+1, 2):\n        while n % factor == 0:\n            prime_factor += 1\n            n //= factor\n    return prime_factor\n",
        "test": "assert     largest_prime_factor(113) == 0",
        "num_ids": 237
    },
    {
        "number": 60,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    n = n - 1\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n",
        "test": "assert     sum_to_n(0) == 0",
        "num_ids": 138
    },
    {
        "number": 61,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    ans = []\n    for i in range(len(brackets)):\n        if brackets[i] == '(':\n            ans.append(i)\n        if brackets[i] == ')':\n            if len(ans) > 0:\n                if ans[-1] == i:\n                    ans.pop()\n            else:\n                return False\n    if len(ans)!= 0:\n        return False\n    else:\n        return True\n",
        "test": "assert     correct_bracketing('(())') == True",
        "num_ids": 294
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # each input parameter is a coefficient.\n    # return [a, b] of that coefficient.\n    # e.g. 3x^2 + 6x + 10 = 12\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 50\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 100\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 200\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 240\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 300\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 400\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 500\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 600\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 700\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 800\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 900\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 1000\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 1100\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 1200\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 1300\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 1400\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 1500\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 1600\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 1700\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 1800\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 1900\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 2000\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 2100\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 2200\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 2300\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 2400\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 2500\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 2600\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 2700\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 2800\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 2900\n    #       3x + 2x^2 + 4x + 4x",
        "test": "assert     derivative([0, 1, 0, 0, 0]) == 0",
        "num_ids": 1196
    },
    {
        "number": 63,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0",
        "num_ids": 329
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    l = 0\n    for i in s:\n        if i in 'AEIOUaeiou':\n            l += 1\n    return l\n",
        "test": "assert     vowels_count('Python') == 1",
        "num_ids": 198
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return \"\".join([str(int(x) + shift) for x in list(str(x))])",
        "test": "assert     circular_shift(123, 1) == \"1234\"",
        "num_ids": 180
    },
    {
        "number": 66,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return sum(ord(c) for c in s if ord(c)>=33 and ord(c)<=127)\n",
        "test": "assert     digitSum(\"0o\") == 0",
        "num_ids": 369
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    fruit_num = int(s[1:])\n    mango_num = int(s[0])\n    return (fruit_num-mango_num)*(n-1)\n",
        "test": "assert ",
        "num_ids": 446
    },
    {
        "number": 68,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    def even_index(val):\n        index = 0\n        while val % 2 == 0:\n            val //= 2\n            index += 1\n        return index\n",
        "test": "assert     pluck([1,2,3,4,5,6,7,8,9]) == [5,3,1,6,7]",
        "num_ids": 275
    },
    {
        "number": 69,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    lst.sort()\n    i = 0\n    while i < len(lst):\n        j = i + 1\n        while j < len(lst):\n            if lst[i] > lst[j] and lst[i] - lst[j] > 0:\n                return lst[i]\n            j += 1\n        i += 1\n    return -1\n",
        "test": "assert     search([]) == -1",
        "num_ids": 647
    },
    {
        "number": 70,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    lst = sorted(lst)\n    return [lst[i] for i in range(len(lst)) if i % 2 == 0 and i > 1] + [lst[i] for i in range(len(lst)) if i % 2!= 0 and i > 0]\n",
        "test": "assert ",
        "num_ids": 1306
    },
    {
        "number": 71,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    #Add your code here\n    if a+b > c and a+c > b and b+c > a:\n        if a == b and a == c:\n            return 0.0\n        elif a == c and a == b:\n            return 0.0\n        elif a == b and a == c:\n            return a*b*c\n        elif a == c and a == b:\n            return a*b*c\n        elif a == b and a == c:\n            return -1.0\n        else:\n            return a*b*c\n    else:\n        return -1\n",
        "test": "assert         triangle_area(1,1,2) == -1",
        "num_ids": 325
    },
    {
        "number": 72,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    q = list(q)\n    w = int(w)\n    for i in range(len(q)):\n        q[i] += q[i]\n        if q[i] <= w:\n            q[i] -= w\n        else:\n            return False\n",
        "test": "assert     will_it_fly(1,3) == False",
        "num_ids": 245
    },
    {
        "number": 73,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    if arr == None:\n        return 0\n    if len(arr) <= 1:\n        return 0\n",
        "test": "assert     smallest_change([0]) == 0, \"Should be empty\"",
        "num_ids": 173
    },
    {
        "number": 74,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    lst3 = [a for a in lst1 if a in lst2]\n    lst3.sort()\n    return lst3\n",
        "test": "assert     total_match([], ['1', '2', '3', '4']) == []",
        "num_ids": 1552
    },
    {
        "number": 75,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    for x in range(2,a):\n        if (a % x == 0):\n            return False\n    return True\n",
        "test": "assert     is_multiply_prime(2) == True",
        "num_ids": 257
    },
    {
        "number": 76,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return True if int(x**n)==x and int(x**n)!=x else False\n",
        "test": "assert     is_simple_power(2, 4) == False",
        "num_ids": 256
    },
    {
        "number": 77,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return a == a**3\n",
        "test": "assert     iscube(1) == True",
        "num_ids": 1101
    },
    {
        "number": 78,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    \n    # The function should return a number:\n    return len(num) - int(num.replace('0', '1').replace('1', '0'))\n",
        "test": "assert     hex_key(-10) == 1",
        "num_ids": 648
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return f\"{decimal:b}\"\n",
        "test": "assert     decimal_to_binary(1) == \"0001\"",
        "num_ids": 179
    },
    {
        "number": 80,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    answer = []\n    for i in range(len(s) - 3):\n        temp = []\n        temp.append(s[i])\n        temp.append(s[i+1])\n        temp.append(s[i+2])\n        if temp not in answer:\n            answer.append(temp)\n    if answer == []:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_happy('aaabbbcaaa') == False",
        "num_ids": 400
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    total_gpa = 0\n    letter_gpa = []\n    for grade in grades:\n        total_gpa += grade\n    if total_gpa == 0:\n        letter_gpa = [0,0,0,0,0]\n    elif total_gpa == 1:\n        letter_gpa = [0,1,0,0,0]\n    elif total_gpa == 2:\n        letter_gpa = [0,1,2,0,0]\n    elif total_gpa == 3:\n        letter_gpa = [0,1,2,2,0]\n    elif total_gpa == 4:\n        letter_gpa = [0,1,2,2,2]\n    elif total_gpa == 5:\n        letter_gpa = [0,1,2,2,2]\n    elif total_gpa == 6:\n        letter_gpa = [0,1,2,2,2]\n    elif total_gpa == 7:\n        letter_gpa = [0,1,2,2,2]\n    elif total_gpa == 8:\n        letter_gpa = [0,1,2,2,2]\n    elif total_gpa == 9:\n        letter_gpa = [0,1,2,2,2]\n    elif total_gpa == 10:\n        letter_gpa = [0,1,2,2,2]\n    elif total_gpa == 11:\n        letter_gpa = [0,1,2,2,2]\n    elif total_gpa == 12:\n        letter_gpa = [0,1,2,2,2]\n    else:\n        print(\"Number of GPA is out of range. Please try again.\")\n        return\n    return letter_gpa\n",
        "test": "assert     numerical_letter_grade([\"4.0\",\"> 3.7\",\"> 3.3\",\"> 3.0\",\"< 2.7\",\"< 2.3\",\"< 2.0\",\"< 1.7\",\"< 1.3\",\"< 1.0\",\"< 0.7\",\"< 0.0\"]) == True, \"The GPA table is not correct\"",
        "num_ids": 569
    },
    {
        "number": 82,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if len(string) == 1:\n        return True\n    if string.count('a') > 0 or string.count('b') > 0 or string.count('c') > 0 or string.count('d') > 0 or string.count('e') > 0 or string.count('f') > 0:\n        return False\n    return prime_length(string.replace('k', ''))\n",
        "test": "assert     prime_length('a') == True",
        "num_ids": 350
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    start = 1\n    end = n - 1\n    count = 0\n",
        "test": "assert     starts_one_ends(2) == 1",
        "num_ids": 170
    },
    {
        "number": 84,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    total = 0\n    while N > 0:\n        total += N % 2\n        N //= 2\n    return str(total)\n",
        "test": "assert     solve(0) == \"0\"",
        "num_ids": 391
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    print(f\"Adding to the {lst} list\")\n    for i in range(0, len(lst) - 1, 2):\n        lst[i], lst[i + 1] = lst[i + 1], lst[i]\n    return lst\n",
        "test": "assert     add([]) == []",
        "num_ids": 245
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return''.join(sorted(list(s.split())))",
        "test": "assert     anti_shuffle('welcome to a party') == 'welcome to a party'",
        "num_ids": 144
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    lst.sort(key=lambda x: x[0])\n    r = []\n    for row in lst:\n        row.sort()\n        r.append(tuple(row))\n    return r\n",
        "test": "assert ",
        "num_ids": 1215
    },
    {
        "number": 88,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    # TODO: Write your code here\n    temp = []\n    for i in range(len(array)):\n        for j in range(len(array) - i - 1):\n            if array[j] + array[j+1] < array[j+1] or array[j] + array[j+1] % 2 == 0:\n                temp.append(array[j])\n    return temp\n",
        "test": "assert ",
        "num_ids": 390
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return ''.join([c*2 for c in s])\n",
        "test": "assert encrypt(\"\") == \"\"",
        "num_ids": 345
    },
    {
        "number": 90,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    return sorted(lst)[1]\n",
        "test": "assert     next_smallest([6,5,8,7,1,2,3]) == 2",
        "num_ids": 227
    },
    {
        "number": 91,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return len([word for word in S.split(\".\") if word.startswith(\"I\")])\n",
        "test": "assert     is_bored(\"I\") == True",
        "num_ids": 275
    },
    {
        "number": 92,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return x!= y or (x + y) % 2 == 0\n",
        "test": "assert     any_int(1, 5, 0) == True",
        "num_ids": 217
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    words = message.split()\n    for i in range(len(words)):\n        if words[i].isupper():\n            words[i] = words[i].swapcase()\n    return \" \".join(words)\n",
        "test": "assert     encode('ABCD') == 'xabybc'",
        "num_ids": 478
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    max = 0\n    for i in lst:\n        if isprime(i):\n            if i>max:\n                max = i\n            if i>10:\n                continue\n            for j in range(i*2,lst[i],i):\n                if not isprime(j):\n                    break\n                elif isprime(j) and i%j == 0:\n                    break\n                else:\n                    if i%j == 0:\n                        break\n                    else:\n                        continue\n            else:\n                max = i\n    return max\n",
        "test": "assert ",
        "num_ids": 392
    },
    {
        "number": 95,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # check if all keys are strings in lower case\n    if len(set(dict.keys()).intersection(set(dict.values()))) == len(dict.keys()):\n        return True\n    # check if all keys are strings in upper case\n    if len(set(dict.keys()).intersection(set(dict.values()))) == len(dict.keys()):\n        return False\n    # check if all keys are strings\n    return True\n",
        "test": "assert     check_dict_case({\"cola\": 1, \"cow\": 2}) == True",
        "num_ids": 277
    },
    {
        "number": 96,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if n<=1:\n        return []\n    count_up_to_list = []\n    i=2\n    while i<=n:\n        if is_prime(i):\n            count_up_to_list.append(i)\n        i+=1\n    return count_up_to_list\n",
        "test": "assert     count_up_to(0) == []",
        "num_ids": 217
    },
    {
        "number": 97,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    # Your code here\n    return (a*b)\n",
        "test": "assert     multiply(3, 2) == 6",
        "num_ids": 183
    },
    {
        "number": 98,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    n = 0\n    i = 0\n    while i < len(s):\n        if s[i].isupper():\n            n += 1\n            if i % 2 == 0:\n                n += 1\n        i += 1\n    return n\n",
        "test": "assert     count_upper(\"a\") == 0",
        "num_ids": 215
    },
    {
        "number": 99,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    if type(value) is not str:\n        raise TypeError('value must be a string')\n",
        "test": "assert     closest_integer(14.5) == 15 and \\",
        "num_ids": 197
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        output = []\n        for i in range(n//2, 0, -1):\n            output.append(i+1)\n        if n % 2 == 1:\n            output.append(n//2)\n        return output\n",
        "test": "assert     make_a_pile(1) == 1",
        "num_ids": 203
    },
    {
        "number": 101,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    \n    words = s.split(\",\")\n    return words\n    \n    \ndef frequency(s):\n    \"\"\"\n    You will be given a string. Your task is to return a dictionary that maps from the\n    characters in the string to the number of times they occur in the string.\n    \n    For example:\n    frequency(\"Hi, my name is John\") == {'H': 2, 'i': 1, 'n': 1}\n    \"\"\"\n    \n    # Create an empty dictionary\n    dict_of_char = {}\n    \n    for i in s:\n        if i in dict_of_char:\n            dict_of_char[i] += 1\n        else:\n            dict_of_char[i] = 1\n    \n    return dict_of_char\n    \n    \ndef find_longest_word(d, s):\n    \"\"\"\n    You will be given a dictionary of strings and a string. You have to return a string\n    representing the longest word in the dictionary, that is, the word that occurs the most\n    times in the dictionary.\n    \n    For example:\n    longest_word({\"H\", \"i\", \"n\", \"O\", \"I\", \"M\", \"a\", \"I\", \"N\", \"e\", \"s\", \"A\"}, \"HI\") == \"I\"\n    \n    \"\"\"\n    \n    \n    # create an empty list\n    longest_word = []\n    \n    # loop through the dictionary\n    for key in d:\n        # check each key's frequency\n        if d[key] > len(s)/2:\n            # if frequency of a word is larger than half of total number of words, append it\n            if d[key] > len(s)/2:\n                longest_word.append(key)\n            # else, append last value in list\n            else:\n                longest_word.append(key)\n                \n    # return the longest word\n    return longest_word\n    \n    \ndef longest_word(dict_of_char, s):\n    \"\"\"\n    You will be given a dictionary of words. Your task is to return the longest word in the dictionary,\n    that is, the word that occurs the most times in the dictionary.\n    \n    For example:\n    longest_word({\"H\", \"i\", \"n\", \"O\", \"I\", \"M\", \"a\", \"I\", \"N\", \"e\", \"s\", \"A\"}, \"HI\") == \"I\"\n    \n    \"\"\"\n    \n    \n    # create an empty list\n    word_longest = []\n    \n    # loop through the dictionary\n    for key in dict_of_char:\n        # check each key's frequency\n        if dict_of_char[key] > len(s)/2:\n            # if frequency of a word is larger than half of total number of words, append it\n            if dict_of_char[key] > len(s)/2:\n                word_longest.append(key)\n            # else, append last value in list\n            else:\n                word_longest.append(key)\n                \n    # return the longest word\n    return word_longest[0]\n    \n    \ndef longest_word_with_word(dict_of_char, s):\n    \"\"\"\n    You will be given a dictionary of words. Your task is to return the longest word in the dictionary,\n    that is, the word that occurs the most times in the dictionary.\n    \n    For example:\n    longest_word_with_word({\"H\", \"i\", \"n\", \"O\", \"I\", \"M\", \"a\", \"I\", \"N\", \"e\", \"s\", \"A\"}, \"HI\") == \"I\"\n    \n    \"\"\"\n    \n    \n    # create an empty list\n    word_longest = []\n    \n    # loop through the dictionary\n    for key in dict_of_char:\n        # check each key's frequency\n        if dict_of_char[key] > len(s)/2:\n            # if frequency of a word is larger than half of total number of words, append it\n            if dict_of_char[key] > len(s)/2:\n                word_longest.append(key)\n            # else, append last value in list\n            else:\n                word_longest.append(key)\n                \n    # return the longest word\n    return word_longest[0]\n    \n    ",
        "test": "assert     words_string('python') == ['python']",
        "num_ids": 1125
    },
    {
        "number": 102,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    if x == y:\n        return x\n    elif x % 2 == 0 and y % 2 == 0:\n        return choose_num(x // 2, y // 2)\n    else:\n        return -1\n",
        "test": "assert     choose_num(3, 2) == -1",
        "num_ids": 186
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    if n > m:\n        return -1\n    # float(int(bin(n)[2:])) == n\n    # int(str(bin(n)[2:])), int(str(bin(n)[2:])[::-1])\n    # int(str(bin(n)[2:])) == n\n    # round(n, 2) == int(n.to_bytes(2, 'big').hex())\n    # n = round(n, 2)\n    # return str(n).zfill(2)\n    # print(n)\n    return str(bin(n)[2:]).zfill(8)\n",
        "test": "assert     rounded_avg(3, 2) == -1",
        "num_ids": 273
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    assert all(x.isdigit() for x in x), 'All digits should be integers'\n    for i, digit in enumerate(x):\n        while all(digit % 10 == 0 for digit in list(str(i))):\n            yield i\n",
        "test": "assert     unique_digits([6, 5, 4, 3, 3, 1, 5]) == [6, 6, 5]",
        "num_ids": 331
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if len(arr) == 0:\n        return []\n    \n    arr = sorted(arr)\n    result = []\n    for i in arr:\n        result.append(i)\n    result.reverse()\n    \n    return result\n",
        "test": "assert     by_length([1, 2, 3, 1, 2, 3, 1, 2, 3]) == [1, 2, 3, 1, 2, 3, 1, 2, 3]",
        "num_ids": 428
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    assert n >= 0, \"n should be non negative\"\n    factors = [1]\n    \n    if n == 1:\n        return factors\n    \n    if n == 2:\n        return factors + [2]\n    \n    while n!= 1:\n        factors = [n] + factors\n        n = n * n\n    \n    return factors",
        "test": "assert     f(5) == [1, 4, 24, 120, 720, 5040, 40320, 362880]",
        "num_ids": 322
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if n == 0:\n        return ()\n    elif n == 1:\n        return (1, )\n    else:\n        even_odd = (n - 1) // 2\n        return (even_odd, n - even_odd)\n",
        "test": "assert     even_odd_palindrome(17) == (3, 2)",
        "num_ids": 286
    },
    {
        "number": 108,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return len(filter(lambda x: x.isdigit(), arr))\n",
        "test": "assert ",
        "num_ids": 121
    },
    {
        "number": 109,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    # your code\n    # swap the first and last element\n    arr[1], arr[-1] = arr[-1], arr[1]\n    # sort the array\n    arr.sort()\n    # perform right shift operations\n    cnt = 0\n    for i in range(len(arr) - 1):\n        if arr[i]!= arr[i + 1]:\n            cnt += 1\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n            arr[-1], arr[-1] = arr[-1], arr[-1]\n    # if we have no elements left, then return true\n    if cnt == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     move_one_ball([1,1,1,1,1,1,1]) == True",
        "num_ids": 498
    },
    {
        "number": 110,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if len(lst1) == 0 or len(lst2) == 0:\n        return False\n",
        "test": "assert     exchange([1,2,3,4,5], [1,2,3,4,5]) == \"NO\"",
        "num_ids": 189
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    t = test.lower().split()\n    dict = collections.Counter(t)\n    dict.default_factory = None\n    return dict\n",
        "test": "assert     histogram(\"aaaaaa\") == {\"a\": 1, \"b\": 2, \"a\": 3, \"c\": 4}",
        "num_ids": 274
    },
    {
        "number": 112,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if s == s[::-1] or c == c[::-1]:\n        return s,False\n    if len(s) == len(c):\n        return s,True\n    if s[-1] == c[-1]:\n        return s[:-1],False\n    return s[:-1] + s[-1],True\n",
        "test": "assert     reverse_delete(s=\"aa\", c=\"a\") == (\"aa\", False)",
        "num_ids": 1619
    },
    {
        "number": 113,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    result = []\n    for i in lst:\n        num = len(i)\n        if num % 2 == 1:\n            result.append(num)\n    return result\n",
        "test": "assert     odd_count([]) == []",
        "num_ids": 265
    },
    {
        "number": 114,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    window = -nums[0]\n    min_sum = 0\n    for i in range(1, len(nums)):\n        if nums[i] + window < nums[i - 1]:\n            window = nums[i] + window\n            min_sum += nums[i - 1] - window\n        else:\n            window = nums[i] + window\n            min_sum += nums[i - 1] - window\n    return min_sum\n",
        "test": "assert     minSubArraySum([0, 0, 0, 0]) == 0",
        "num_ids": 352
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    M, N = len(grid), len(grid[0])\n    if not grid or not grid[0]: return 0\n    q = collections.deque()\n    q.append((0, 0, 0))\n    bucket_capacity = 1\n    i = 0\n    while q:\n        i, j, num = q.popleft()\n        if num < bucket_capacity:\n            bucket_capacity = num\n            continue\n        for direction in [(i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)]:\n            if 0 <= direction[0] < M and 0 <= direction[1] < N and grid[direction[0]][direction[1]] == 0:\n                grid[direction[0]][direction[1]] = num\n                q.append((direction[0], direction[1], num))\n                break\n        if i == M - 1 and j == N - 1:\n            return num\n    return 0",
        "test": "assert ",
        "num_ids": 829
    },
    {
        "number": 116,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    # The following is the code for sorting in ascending order\n    # This is a naive implementation, you can change it if you want\n    # but it is an O(n) operation\n    # s = [0,0,0,0,0]\n    # for i in range(len(arr)):\n    #     if arr[i] > 0:\n    #         for j in range(i+1, len(arr)):\n    #             if arr[j] > 0:\n    #                 s[i] = s[i] + 1\n    #                 arr[j] = 0\n    #             else:\n    #                 s[i] = s[i] + 1\n    #                 arr[j] = arr[j] - 1\n",
        "test": "assert ",
        "num_ids": 547
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    res = []\n    for word in s:\n        if word.isalpha() and len(word) <= n:\n            res.append(word)\n    return res\n",
        "test": "assert     select_words(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "num_ids": 1382
    },
    {
        "number": 118,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    pass\n",
        "test": "assert ",
        "num_ids": 908
    },
    {
        "number": 119,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if len(lst)%2==0:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "test": "assert     match_parens(')())()') == 'Yes'",
        "num_ids": 252
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    # sort the array\n    arr.sort()\n    # return the maximum from the sorted array\n    return arr[-k:]\n",
        "test": "assert ",
        "num_ids": 97
    },
    {
        "number": 121,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    odd = 0\n    even = 0\n    for x in lst:\n        if x%2==0:\n            even +=x\n        else:\n            odd +=x\n    return odd + even\n",
        "test": "assert         solution([]) == 0",
        "num_ids": 224
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    \n    sum = 0\n    for i in arr:\n        sum += int(str(i)[:k])\n    return sum\n",
        "test": "assert     add_elements([2,7,9,3,1,8], 2) == 28",
        "num_ids": 261
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    collatz_seq = [1]\n    for i in range(2, n):\n        if i%2 == 0:\n            collatz_seq.append(i)\n        else:\n            num = collatz_seq[-1] + (collatz_seq[-2]*2)\n            collatz_seq.append(num)\n    return collatz_seq\n",
        "test": "assert     get_odd_collatz(0) == [1]",
        "num_ids": 225
    },
    {
        "number": 124,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    \n    months = ['january', 'february','march', 'april','may', 'june', 'july', 'august','september', 'october', 'november', 'december']\n    year = int(date[:4])\n    month = int(date[5:7])\n    day = int(date[8:10])\n    \n    if day < 1 or day > 31:\n        return False\n    if month not in range(1,13):\n        return False\n    if year < 2000 or year > 2100:\n        return False\n    if month in months or day > 30:\n        return False\n    \n    return True\n    \n    \n",
        "test": "assert     valid_date(\"2021-10-11\") == True",
        "num_ids": 453
    },
    {
        "number": 125,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    txt = txt.lower()\n    txt = txt.split()\n    return txt\n",
        "test": "assert     split_words(\"\") == []",
        "num_ids": 220
    },
    {
        "number": 126,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    n = len(lst)\n    for i in range(n - 1):\n        if lst[i]!= lst[i + 1]:\n            return False\n    return True\n",
        "test": "assert     is_sorted([]) == True",
        "num_ids": 322
    },
    {
        "number": 127,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    # Write your code here.\n    #define intervals\n    intervals = []\n    \n    #check if there are any intersection with intervals\n    for interval in interval1:\n        if interval not in intervals:\n            intervals.append(interval)\n    for interval in interval2:\n        if interval not in intervals:\n            intervals.append(interval)\n    \n    #check if the list of intervals has any intersection\n    if len(intervals) < 2:\n        return \"NO\"\n    \n    #check if there are at least two intersections\n    for i in range(len(intervals)-1):\n        if intervals[i] < intervals[i+1]:\n            return \"NO\"\n    \n    #Check if the first and last intervals have same value\n    start1 = intervals[0]\n    end1 = intervals[-1]\n    \n    start2 = intervals[0]\n    end2 = intervals[-1]\n    \n    #if there are at least two intervals has same value\n    if start2 <= end1 and end2 <= start1:\n        return \"YES\"\n    \n    #if there are only one interval with same value\n    if start2 == end1:\n        return \"YES\"\n    \n    #else if there are at least two interval with same value\n    if start2 > end1:\n        return \"YES\"\n    \n    #else if there are at least two interval with same value\n    if start2 < end1:\n        return \"NO\"\n    \n    \n    \n    \n",
        "test": "assert         intersection( (2, 4), (3, 4)) == (2, 4)",
        "num_ids": 693
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    # Answer = -9\n    # to have sum of all signs multiplied by prod of signs of all numbers, this is simply the sum of all multiplies by all sign\n    # -1 = -1, 0 = 0\n    # this is the same as prod_signs(signs) = prod_signs(signs) * prod_signs(signs_magnitudes)\n    magnitude_sum = 1\n    for num in arr:\n        magnitude_sum *= num\n    return magnitude_sum\n",
        "test": "assert     prod_signs([1,1,1,-1]) == -1",
        "num_ids": 329
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    \n    # Base case: No path can be found\n    if k == 0:\n        return []\n    \n    # Find the possible cell paths for a given cell\n    # (1) Find the possible cell paths for a cell where we have\n    # visited cells that share an edge with it\n    # (2) Add a path to this cell, as a sorted list\n    # (3) Add the next cell's value to the corresponding cell\n    # (4) Find the shortest path from the first cell to the next\n    # (5) If it is shorter, remove it and add it to the shortest path\n    # (6) Finally, return the sorted list\n",
        "test": "assert     minPath(grid, 2) == [3, 4], \"Wrong output\"",
        "num_ids": 643
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    # recurrence formula\n    def recur(n):\n        if n == 0:\n            return []\n        elif n == 1:\n            return [1]\n        elif n == 2:\n            return [1, 2]\n        else:\n            ans = []\n            for i in recur(n-1):\n                ans.append(i + (2 * i + 1))\n            return ans + [n]\n    return recur(n)\n",
        "test": "assert     tri(4) == 3",
        "num_ids": 428
    },
    {
        "number": 131,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    sum_odd = 0\n    while n:\n        if n % 10 == 0:\n            sum_odd += n // 10\n        else:\n            return 0\n        n //= 10\n    return sum_odd\n",
        "test": "assert     digits(1) == 0",
        "num_ids": 193
    },
    {
        "number": 132,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    # check if the input is an empty string\n    if not string:\n        return False\n    # if the string is a single bracket\n    if string[0] == '[' and string[-1] == ']':\n        return True\n    # if the string is not a single bracket\n    else:\n        # create a list that contains all brackets\n        brackets_list = []\n        for char in string:\n            if char == '[' or char == ']':\n                brackets_list.append(char)\n        # if there is a square bracket in the list\n        if len(brackets_list) > 0:\n            # the list is split into two because of brackets\n            bracket1 = brackets_list[0:2]\n            bracket2 = brackets_list[2:4]\n            # if there are more brackets than characters in the list\n            if len(bracket1) > len(bracket2):\n                # if there is a bracket in the middle\n                if brackets_list[0:2] == bracket1:\n                    return is_nested(string[1:-1])\n                # if there is a bracket in the middle and not the middle\n                else:\n                    return is_nested(string[1:len(string) - 1])\n            # if there is a bracket in the middle and it is the only character in the list\n            else:\n                if brackets_list[0] == bracket2[0]:\n                    return is_nested(string[1:len(string) - 1])\n                # if there is a bracket in the middle and the middle isn't the only character in the list\n                else:\n                    return is_nested(string[1:len(string) - 1])\n        else:\n            return True\n",
        "test": "assert     is_nested('[[') == False",
        "num_ids": 703
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    \n    return sum([round(x**2) for x in lst])\n",
        "test": "assert     sum_squares([0, 1, 2, 3, 4]) == 10",
        "num_ids": 214
    },
    {
        "number": 134,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return txt[-1].isalpha() and not any(c.isalpha() for c in txt)\n",
        "test": "assert     check_if_last_char_is_a_letter('I will be') == False",
        "num_ids": 360
    },
    {
        "number": 135,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    my_len = len(arr)\n    for i in range(my_len):\n        if arr[i] < arr[i-1]:\n            return -1\n    return 0\n",
        "test": "assert     can_arrange([1,2,3,4,5]) == -1",
        "num_ids": 285
    },
    {
        "number": 136,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    def get_largest_smallest(a, b):\n        if a <= 0:\n            return None, None\n        elif b <= 0:\n            return a, None\n        elif a < b:\n            return a, b\n        else:\n            return None, b\n",
        "test": "assert     largest_smallest_integers([-2, -5, 2, 0, 5, 5]) == (None, None)",
        "num_ids": 202
    },
    {
        "number": 137,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if a is b:\n        return a\n    elif isinstance(a, (int, float)):\n        return b\n    elif isinstance(a, str):\n        return b.replace(\",\", \".\") if isinstance(b, str) else a.replace(\",\", \".\")\n    elif isinstance(a, (int, float)):\n        return b\n    else:\n        return None\n",
        "test": "assert         compare_one(1.2, 2.2) == 2.2",
        "num_ids": 452
    },
    {
        "number": 138,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    n_sum = 0\n    for n_ in range(1, n+1):\n        if n_%2 == 0:\n            n_sum += n_\n    if n_sum == n:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_equal_to_sum_even(7) == False",
        "num_ids": 239
    },
    {
        "number": 139,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if n == 0 or n == 1:\n        return 1\n    return n * special_factorial(n - 1)",
        "test": "assert     special_factorial(0) == 1",
        "num_ids": 202
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    text = text.replace(\" \", \"_\")\n    text = re.sub(\"\\s+\", \"_\", text)\n    return text",
        "test": "assert ",
        "num_ids": 252
    },
    {
        "number": 141,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    \n    if not file_name.isalnum():\n        return 'No'\n    elif len(file_name) <= 3:\n        return 'No'\n    elif file_name[0] == '.':\n        return 'No'\n    elif file_name[0].isalpha():\n        return 'No'\n    elif not file_name[0].isdigit():\n        return 'No'\n    elif not all(c.isdigit() for c in file_name[1:]):\n        return 'No'\n    else:\n        return 'Yes'\n",
        "test": "assert     file_name_check(\"myfile\") == \"No\"",
        "num_ids": 431
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    sum = 0\n    for i in lst:\n        if i % 3 == 0 and i % 4!= 0:\n            sum += i**2\n        elif i % 3!= 0:\n            sum += i**2\n        elif i % 4!= 0:\n            sum += i**2\n    return sum\n",
        "test": "assert         sum_squares([1, 5, 7]) == 27",
        "num_ids": 304
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    \n    # Your code here\n    pass\n    # raise NotImplementedError\n",
        "test": "assert ",
        "num_ids": 368
    },
    {
        "number": 144,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    try:\n        assert type(x) == str and type(n) == str\n        x = float(x)\n        n = int(n)\n        assert 1 <= n and n <= 2 ** 30\n        assert x >= 0 and x <= 1\n",
        "test": "assert     simplify(\"2.3\", \"3\") == False",
        "num_ids": 294
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    # TODO: Create an empty list for output\n    output = []\n    # TODO: Loop through the numbers, converting all digits into integers\n    for num in nums:\n        # TODO: Check if the num is greater than 0\n        if num > 0:\n            # TODO: Get the sum of all numbers, convert it to an int and add to the list\n            sum = 0\n            for x in str(num):\n                sum += int(x)\n            # TODO: If the sum of all numbers is greater than 0, add it to the output list\n            if sum > 0:\n                output.append(sum)\n    # TODO: Return the output list\n    return output\n",
        "test": "assert     order_by_points([]) == []",
        "num_ids": 305
    },
    {
        "number": 146,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    nums = list(map(int, nums))\n    result = 0\n    for number in nums:\n        if number > 10 and number % 10 > 1 and number % 10 % 2 == 1:\n            result += 1\n    return result\n",
        "test": "assert     specialFilter([]) == 0",
        "num_ids": 187
    },
    {
        "number": 147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # using the fact that all three is divided by 3, 3\n    #   1  3  7\n    #   2  3  8\n    #   3  4  9\n    #   4  5  10\n    #   5  6  11\n    #   6  7  12\n    \n    # if the given number is divisible by 3, just add it to the triple array\n    # otherwise, add the triple pair\n    if n%3 == 0:\n        return n\n",
        "test": "assert ",
        "num_ids": 223
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    #check if planet1 and planet2 are correct\n    if planet1==\"Jupiter\" and planet2==\"Neptune\":\n        return (\"Saturn\", \"Uranus\")\n    if planet1==\"Jupiter\" and planet2==\"Uranus\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Saturn\", \"Uranus\")\n    if planet1==\"Earth\" and planet2==\"Uranus\":\n        return (\"Uranus\", \"Jupiter\", \"Saturn\")\n    if planet1==\"Mars\" and planet2==\"Uranus\":\n        return (\"Uranus\", \"Jupiter\", \"Saturn\")\n    if planet1==\"Saturn\" and planet2==\"Uranus\":\n        return (\"Uranus\", \"Mercury\", \"Jupiter\", \"Saturn\")\n    if planet1==\"Uranus\" and planet2==\"Jupiter\":\n        return (\"Jupiter\", \"Saturn\", \"Uranus\")\n    if planet1==\"Uranus\" and planet2==\"Saturn\":\n        return (\"Saturn\", \"Jupiter\", \"Uranus\")\n    if planet1==\"Jupiter\" and planet2==\"Saturn\":\n        return (\"Uranus\", \"Saturn\", \"Jupiter\")\n    if planet1==\"Uranus\" and planet2==\"Jupiter\":\n        return (\"Jupiter\", \"Uranus\", \"Saturn\")\n    if planet1==\"Saturn\" and planet2==\"Uranus\":\n        return (\"Jupiter\", \"Uranus\", \"Saturn\")\n    if planet1==\"Uranus\" and planet2==\"Saturn\":\n        return (\"Saturn\", \"Uranus\", \"Jupiter\")\n    if planet1==\"Saturn\" and planet2==\"Uranus\":\n        return (\"Uranus\", \"Jupiter\", \"Saturn\")\n    if planet1==\"Mercury\" and planet2==\"Saturn\":\n        return (\"Saturn\", \"Uranus\", \"Jupiter\")\n    if planet1==\"Saturn\" and planet2==\"Uranus\":\n        return (\"Uranus\", \"Mercury\", \"Jupiter\")\n    if planet1==\"Uranus\" and planet2==\"Saturn\":\n        return (\"Saturn\", \"Jupiter\", \"Uranus\")\n    if planet1==\"Jupiter\" and planet2==\"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"Uranus\")\n    if planet1==\"Jupiter\" and planet2==\"Uranus\":\n        return (\"Jupiter\", \"Uranus\", \"Saturn\")\n    if planet1==\"Uranus\" and planet2==\"Jupiter\":\n        return (\"Jupiter\", \"Uranus\", \"Saturn\")\n    if planet1==\"Saturn\" and planet2==\"Jupiter\":\n        return (\"Jupiter\", \"Saturn\", \"Uranus\")\n    if planet1==\"Jupiter\" and planet2==\"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"Jupiter\")\n    if planet1==\"Saturn\" and planet2==\"Uranus\":\n        return (\"Uranus\", \"Jupiter\", \"Saturn\")\n    if planet1==\"Uranus\" and planet2==\"Jupiter\":\n        return (\"Jupiter\", \"Uranus\", \"Saturn\")\n    if planet1==\"Jupiter\" and planet2==\"Saturn\":\n        return (\"Uranus\", \"Jupiter\", \"Saturn\")\n    if planet1==\"Saturn\" and planet2==\"Uranus\":\n        return (\"Saturn\", \"Uranus\", \"Jupiter\")\n    if planet1==\"Uranus\" and planet2==\"Saturn\":\n        return (\"Uranus\", \"Jupiter\", \"Saturn\")\n    if planet1==\"Jupiter\" and planet2==\"Saturn\":\n        return (\"Saturn\", \"Uranus\", \"Jupiter\")\n    if planet1==\"Uranus\" and planet2==\"Saturn\":\n        return (\"Saturn\", \"Jupiter\", \"Uranus\")\n    if planet1==\"Jupiter\" and planet2==\"Uranus\":\n        return (\"Saturn\", \"Uranus\", \"Jupiter\")\n    if planet1==\"Saturn\" and planet2==\"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"",
        "test": "assert     bf(\"Mercury\", \"Venus\") == (\"Venus\", \"Mercury\")",
        "num_ids": 2242
    },
    {
        "number": 149,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    lst.sort()\n    lst = sorted(lst, key=len, reverse=True)\n    return lst\n",
        "test": "assert         sorted_list_sum([\"ab\",\"ab\",\"cd\",\"cd\"]) == [\"ab\",\"ab\",\"cd\",\"cd\"]",
        "num_ids": 473
    },
    {
        "number": 150,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if n == 2 or n == 3:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        return x_or_y(n // 2, x, y)\n",
        "test": "assert     x_or_y(2, 5, 4) == 5",
        "num_ids": 325
    },
    {
        "number": 151,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    res = 0\n    if lst:\n        for n in lst:\n            res = res + (n**2)\n    return res\n",
        "test": "assert     double_the_difference([]) == 0",
        "num_ids": 399
    },
    {
        "number": 152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    scores=[]\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            scores.append(0)\n        else:\n            scores.append(abs(guess[i]-game[i]))\n    return scores\n",
        "test": "assert ",
        "num_ids": 552
    },
    {
        "number": 153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # The strength of the extension\n    CAP = 0\n    SM = 0\n",
        "test": "assert     Strongest_Extension(\"Shortcut\", [\"Shortcut\", \"StuFfed\"]) == \"Shortcut.StuFfed\"",
        "num_ids": 591
    },
    {
        "number": 154,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if a == b:\n        return False\n    if len(a) > len(b):\n        return False\n    if a.index(b)!= b.index(b):\n        return False\n",
        "test": "assert         cycpattern_check(\"a\",\"a\") == False",
        "num_ids": 257
    },
    {
        "number": 155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    if num <= 0:\n        raise ValueError(\"Input must be >= 0\")\n    else:\n        even_count = 0\n        odd_count = 0\n",
        "test": "assert ",
        "num_ids": 215
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    symbols = (1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n    roman = ''\n    for i in range(len(symbols)):\n        if number >= symbols[i]:\n            break\n        roman += symbols[i]\n    return roman.lower()\n",
        "test": "assert ",
        "num_ids": 485
    },
    {
        "number": 157,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if a == b and b == c and c == a:\n        return True\n    elif a == b or b == c or c == a:\n        return False\n    else:\n        return True\ndef is_right_angled(a, b, c, d):\n    '''\n    Is a right angle triangle formed by the three sides of the triangle?\n    Example:\n    is_right_angled(3, 4, 5, 6) == True\n    is_right_angled(1, 2, 3, 4) == True\n    is_right_angled(1, 2, 3, 5) == False\n    is_right_angled(1, 3, 2, 5) == True\n    '''\n    if right_angle_triangle(a, b, c):\n        return True\n    elif right_angle_triangle(a, b, d):\n        return True\n    elif right_angle_triangle(d, c, b):\n        return True\n    else:\n        return False\n",
        "test": "assert     right_angle_triangle(1, 1, 1) == True",
        "num_ids": 485
    },
    {
        "number": 158,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # An empty list is returned if there are no words.\n    if not words:\n        return \"\"\n    # To maintain the order, we sort the list.\n    words = sorted(words)\n    # An empty string is returned if there is no string in the list.\n    if not words:\n        return \"\"\n    # A string with one character is returned if it is at least one character\n    # in the list.\n    for char in words:\n        if len(char) > 1:\n            return char\n",
        "test": "assert     find_max([]) == ''",
        "num_ids": 446
    },
    {
        "number": 159,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return [number + need, remaining]\n",
        "test": "assert     0 <= number <= 1000",
        "num_ids": 410
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if operator == {}:\n        return operand\n    if len(operand) == 1:\n        return operator[operator['+', '-']]\n",
        "test": "assert     do_algebra([3,4], [5]) == 5",
        "num_ids": 414
    },
    {
        "number": 161,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if len(s) == 0:\n        return \"\"\n    elif len(s) == 1:\n        return s\n    elif s[0] not in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n        return \"wrong input\"\n    else:\n        if s[0] in 'abcdefghijklmnopqrstuvwxyz':\n            s = s[1:]\n        else:\n            s = s[1:] + s[0]\n        s = s.upper()\n        if s[0] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            return s[1:] + solve(s[0:1]) + solve(s[1:])\n        else:\n            return solve(s[1:])\n            \n        \nif __name__ == \"__main__\":\n    print solve(\"ab\")\n    print solve(\"ab\")\n    print solve(\"aBbCc\")\n    print solve(\"abCd\")",
        "test": "assert     solve(\"ab\") == \"ba\"",
        "num_ids": 1446
    },
    {
        "number": 162,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    text = str(text)\n    if not text: return None\n    text = text.replace(' ', '')\n    text = text.encode('utf-8')\n    m = hashlib.md5()\n    m.update(text)\n    return m.hexdigest()\n",
        "test": "assert     string_to_md5('') == None",
        "num_ids": 343
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    # I could've done this with just lists, but I don't know what that was.\n    if a >= b:\n        return generate_integers(a, b)\n    elif a < b:\n        return generate_integers(b, a)\n    \n    # For now, return the smallest of the two integers, so we know the\n    # integer satisfies all constraints.\n    return [a % 10, b % 10]\n",
        "test": "assert     generate_integers(0, 10) == [0, 0, 0, 0, 0, 0, 0, 0, 0]",
        "num_ids": 280
    }
]