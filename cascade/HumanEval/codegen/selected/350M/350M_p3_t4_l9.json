[
    {
        "number": 0,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([1,2,3,4,5], 2.5) == True",
        "num_ids": 440,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    open_braces = []\n    for char in paren_string:\n        if char in ['(', ')']:\n            open_braces.append(char)\n        elif char == '(':\n            open_braces.append(char)\n    return open_braces\n",
        "test": "assert     separate_paren_groups(\"\") == []",
        "num_ids": 982,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return round(number, 1)\n",
        "test": "assert truncate_number(-3.0) == -3",
        "num_ids": 233,
        "indeed": false
    },
    {
        "number": 3,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    val = 0\n    for i in operations:\n        if i == 0:\n            val = val - 1\n        else:\n            if val < 0:\n                return False\n            val = val - 1\n    return True\n",
        "test": "assert     below_zero([1]) == True",
        "num_ids": 147,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    m_mean = sum(numbers)/len(numbers)\n    mean_diff = sum(abs(numbers-m_mean))/len(numbers)\n    return mean_diff\n    #return (sum(abs(numbers-m_mean)))/len(numbers)\n",
        "test": "assert     mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]) == 2.0",
        "num_ids": 491,
        "indeed": false
    },
    {
        "number": 5,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if len(numbers) < 2:\n        return numbers\n    return [numbers[0] + delimeter, numbers[1] + delimeter]",
        "test": "assert ",
        "num_ids": 240,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    result = []\n    for char in paren_string:\n        if char == '(':\n            result.append(1)\n        elif char == ')':\n            result[-1] += 1\n            if result[-1] > 2:\n                raise ValueError('Unbalanced parentheses in nested parentheses')\n        elif char == ')':\n            if result[-1] > 2:\n                raise ValueError('Unbalanced parentheses in nested parentheses')\n            result.pop()\n    return result\n",
        "test": "assert     parse_nested_parens(\"(()()())()(()()()\") == [1, 2, 3, 4, 5]",
        "num_ids": 527,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n",
        "test": "assert     filter_by_substring([\"hello\"], \"ello\") == [\"hello\"]",
        "num_ids": 1367,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    total_sum = 0\n    total_product = 1\n    for number in numbers:\n        total_sum += number\n        total_product *= number\n    return total_sum, total_product",
        "test": "assert     sum_product([]) == (0, 1)",
        "num_ids": 329,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    result = []\n    while numbers:\n        current_max = numbers[0]\n        for element in numbers:\n            if element > current_max:\n                current_max = element\n        result.append(current_max)\n        numbers.remove(current_max)\n    return result\n",
        "test": "assert     rolling_max([]) == []",
        "num_ids": 2367,
        "indeed": false
    },
    {
        "number": 10,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    palin = []\n    for i in range(len(string)):\n        for j in range(i,len(string)):\n            if is_palindrome(string[i:j+1]):\n                palin.append(string[i:j+1])\n                break\n    return \"\".join(sorted(palin))\n",
        "test": "assert     is_palindrome('madam')",
        "num_ids": 212,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    return \"\".join([format(ord(x) ^ ord(y), \"08b\") for x, y in zip(a, b)])\n",
        "test": "assert     string_xor('','') == ''",
        "num_ids": 268,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "    length = 0\n    longest = \"\"\n    for i in range(0, len(strings)):\n        if length < len(strings[i]):\n            length = len(strings[i])\n            longest = strings[i]\n    return longest\n",
        "test": "assert         longest([\"hell\", \"hen\", \"hello\"]) == \"hello\"",
        "num_ids": 229,
        "indeed": false
    },
    {
        "number": 13,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "    #Find the greatest common divisor of two inputs\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    return greatest_common_divisor(b%a,a%b)\n",
        "test": "assert     greatest_common_divisor(2, 8) == 2",
        "num_ids": 271,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    # prefix_list = []\n    # for word in string.split(\" \"):\n    #     prefix_list.extend(word.split('-'))\n    # return prefix_list\n    prefix_list = sorted(string.split(' '), key=len)[::-1]\n    return prefix_list\n",
        "test": "assert     all_prefixes(\"a\") == [\"a\"]",
        "num_ids": 281,
        "indeed": false
    },
    {
        "number": 15,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    return \" \".join([str(x) for x in range(0, n+1)])\n",
        "test": "assert     string_sequence(3) == \"0 1 2 3\"",
        "num_ids": 260,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    res = 0\n    for i in string:\n        if i not in \"abcdefghijklmnopqrstuvwxyz\":\n            break\n        res += 1\n    return res\n",
        "test": "assert     count_distinct_characters('abc') == 3",
        "num_ids": 270,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    return [int(n) for n in music_string.split('|')]\n",
        "test": "assert     parse_music(\".'|\") == [1, 0, 0, 0]",
        "num_ids": 1383,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if len(string) == 0:\n        return 0\n    if len(string) == 1:\n        return 1\n    length = len(string)\n    if substring in string:\n        return length - string.count(substring)\n    return how_many_times(string[1:length-1], substring)\n",
        "test": "assert     how_many_times(\"AAAAA\", \"A\") == 0",
        "num_ids": 223,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # First, sort the numbers from smallest to largest.\n    numbers_sorted = sorted(numbers)\n    \n    # Add a space between numbers and sort it.\n    numbers_sorted = \" \".join(numbers_sorted)\n    \n    # Now, sort the numbers and return the sorted string.\n    return numbers_sorted\n",
        "test": "assert     sort_numbers('a1 b2 c3 d4 e5 f6') == 'f6 b3 c2 d4 e5 a1'",
        "num_ids": 265,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    closest_list = [numbers[0], numbers[-1]]\n    smaller_number = numbers[0]\n    larger_number = numbers[-1]\n    for number in numbers[1:]:\n        smaller_number = min(smaller_number, number)\n        larger_number = max(larger_number, number)\n        if number > closest_list[1]:\n            closest_list[0] = smaller_number\n            closest_list[1] = larger_number\n    return (closest_list[0], closest_list[1])\n",
        "test": "assert     find_closest_elements([1, 2, 3]) == (1, 3)",
        "num_ids": 482,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    return [n / sum(numbers) for n in numbers]\n",
        "test": "assert     rescale_to_unit([0.5, 0.1, 0.6, 0.2, -0.5, 0.3, 0.6, 0.2, -0.1, 0.3, -1.0]) == [0.1, 0.6, 0.2, -0.5, 0.3, 0.0, -0.1]",
        "num_ids": 822,
        "indeed": false
    },
    {
        "number": 22,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    return [value for value in values if isinstance(value, int)]\n",
        "test": "assert     filter_integers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 718,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return len(string)\n",
        "test": "assert     strlen('') == 0",
        "num_ids": 135,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    assert n >= 1, 'number must be positive'\n    for x in range(2, n):\n        if n % x == 0:\n            return x\n    return n\n",
        "test": "assert     largest_divisor(7) == 7",
        "num_ids": 585,
        "indeed": false
    },
    {
        "number": 25,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "test": "assert ",
        "num_ids": 235,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    seen = set()\n    result = []\n    for num in numbers:\n        if num in seen:\n            continue\n        seen.add(num)\n        result.append(num)\n    return result\n",
        "test": "assert         remove_duplicates([]) == []",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    string = string.lower()\n    string = string.upper()\n    string = string.capitalize()\n    return string\n",
        "test": "assert     flip_case('a') == 'A'",
        "num_ids": 1201,
        "indeed": false
    },
    {
        "number": 28,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate([\"hello\", \"world\"]) == \"helloworld\"",
        "num_ids": 258,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    result = []\n    for i in strings:\n        if i.startswith(prefix):\n            result.append(i)\n    return result\n",
        "test": "assert     filter_by_prefix([\"hello\", \"hi\", \"hello\", \"goodbye\"], \"h\")",
        "num_ids": 334,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return [i for i in l if i > 0]\n",
        "test": "assert     get_positive([]) == []",
        "num_ids": 270,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    # Step 1:\n    if n == 2: return True\n    # Step 2:\n    for d in range(2, n):\n        if n % d == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(3) == True, \"3 is not a prime number\"",
        "num_ids": 1273,
        "indeed": false
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    for i, coeff in enumerate(xs):\n        if coeff > 0:\n            return (i, coeff)\n    return (0, 0)\n",
        "test": "assert     find_zero([1, 1, 0, 0]) == 1",
        "num_ids": 363,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    l.sort()\n    return l\n",
        "test": "assert     sort_third([1,2,3,4,5,6,7,8,9,10,11]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]",
        "num_ids": 558,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    return sorted(set(l))\n",
        "test": "assert         unique([1,2,3,1,2,3])",
        "num_ids": 282,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "    if len(l) == 0:\n        return 0\n    return max(l)\n",
        "test": "assert     max_element([1,2,3,4,5]) == 5",
        "num_ids": 208,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    # if n is 1 then return 1\n    if n <= 10:\n        return 1\n    elif n <= 100:\n        return int(str(n) + str(fizz_buzz(n//10)))\n    # else if n is 2 then return 2\n    elif n <= 1000:\n        return int(str(n) + str(buzz_buzz(n//10)))\n",
        "test": "assert     fizz_buzz(7) == 1",
        "num_ids": 419,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    new_l = []\n    i = 0\n    while i < len(l):\n        if i % 2 == 0:\n            new_l.append(l[i])\n        else:\n            new_l.append(l[i+1])\n        i += 2\n    return new_l\n",
        "test": "assert         sort_even([]) == []",
        "num_ids": 646,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # get first three characters from encoded string.\n    first_group = groups[0]\n    # count remaining characters in group.\n    remaining = len(s) % 3\n    # check if all remaining characters are equal to the first group.\n    if remaining == 3:\n        # make group of first three characters from encoded string.\n        group_string = first_group[1:]\n    else:\n        # if remaining is not equal to 3, make group of remaining 3 characters from encoded string.\n        group_string = first_group[3:]\n    # return decoded string.\n    return group_string\n",
        "test": "assert     decode_cyclic(\"aaaaaaa\") == \"aaaaaaaaaaa\"",
        "num_ids": 602,
        "indeed": false
    },
    {
        "number": 39,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return prime_fib(n//2) + prime_fib(n//2 + 1)\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)",
        "test": "assert     prime_fib(1) == 1 and prime_fib(2) == 2 and prime_fib(3) == 3 and prime_fib(4) == 5",
        "num_ids": 428,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    if len(l) < 3:\n        return False\n    suma = sum(l)\n    if suma == 0:\n        return True\n    if suma < 0:\n        return False\n    if suma in l:\n        return True\n    return False\n",
        "test": "assert     triples_sum_to_zero([2,1,2,3]) == False",
        "num_ids": 427,
        "indeed": false
    },
    {
        "number": 41,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    return 0\n",
        "test": "assert     car_race_collision(1) == 0",
        "num_ids": 269,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    return [element+1 for element in l]\n",
        "test": "assert     incr_list(range(0)) == []",
        "num_ids": 240,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    # find the unique elements, non-duplicate\n    l_ = list(set(l))\n    # find the two distinct elements\n    for i in l_:\n        for j in l_:\n            if i + j == 0:\n                return True\n    # if the two distinct elements are zero, return False\n    return False\n",
        "test": "assert     pairs_sum_to_zero([1, 1, 1, 2, 2]) == False",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 44,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    s = str(x)\n    if base > 10:\n        return s[0] * base + s[1]\n    else:\n        return s[0] * base\n",
        "test": "assert     change_base(15, 7) == \"110000\"",
        "num_ids": 283,
        "indeed": false
    },
    {
        "number": 45,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return.5 * a * (h ** 2)\n",
        "test": "assert triangle_area(4, 4) == 16.0, \"Triangle_area()\"",
        "num_ids": 155,
        "indeed": false
    },
    {
        "number": 46,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    # Your code here\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(0) == 0",
        "num_ids": 1282,
        "indeed": false
    },
    {
        "number": 47,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    l.sort()\n    if len(l)%2 == 0:\n        return (l[len(l)//2] + l[len(l)//2 - 1])/2\n    else:\n        return l[len(l)//2]",
        "test": "assert         median([1, 2, 3]) == 2",
        "num_ids": 214,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    return text == text[::-1]\n",
        "test": "assert     is_palindrome(\"A man is not a palindrome.\") == False",
        "num_ids": 279,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    if n % p == 0:\n        return 0\n    else:\n        return 1\n",
        "test": "assert     modp(1, 2) == 1",
        "num_ids": 182,
        "indeed": false
    },
    {
        "number": 50,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return s.translate(str.maketrans(\"\",\"\",\"\"))\n",
        "test": "assert     decode_shift(\"\") == \"\"",
        "num_ids": 375,
        "indeed": false
    },
    {
        "number": 51,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    text_vowels = []\n    for char in text:\n        if char in vowels:\n            text_vowels.append(char)\n    new_text = \"\".join(text_vowels)\n    return new_tex",
        "test": "assert     remove_vowels(\"This is a test string\") == \"This is a test string\"",
        "num_ids": 599,
        "indeed": false
    },
    {
        "number": 52,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if t <= 0:\n        return True\n",
        "test": "assert     below_threshold(nums, 10) == True, \"Expected below_threshold(nums, 10)\"",
        "num_ids": 75,
        "indeed": false
    },
    {
        "number": 53,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    return x + y\n",
        "test": "assert     add(5,5) == 10, \"add failed\"",
        "num_ids": 117,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    return s0 == s1\n",
        "test": "assert     not same_chars('tj', 'xj')",
        "num_ids": 245,
        "indeed": false
    },
    {
        "number": 55,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    if n < 1:\n        return None\n    \n    if n <= 2:\n        return 1\n    \n    return fib(n-1) + fib(n-2)\n",
        "test": "assert     fib(1) == 1",
        "num_ids": 185,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if brackets == \"<\" or brackets == \">\" or brackets == \"<>\":\n        return True\n    else:\n        return False\n",
        "test": "assert     correct_bracketing(\"[\") == False",
        "num_ids": 557,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "    for i in l:\n        if i < 0:\n            return False\n    return True\n",
        "test": "assert     monotonic(l=[1,2,3]) == True, \"Monotonic test failed\"",
        "num_ids": 209,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    return sorted(list(set(l1) & set(l2)))\n",
        "test": "assert     common([1,2,3,4,5], [1,3,4,5]) == [1,3,4,5]",
        "num_ids": 431,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    assert(n > 0)\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return i\n    return None\n",
        "test": "assert     largest_prime_factor(10) == 2",
        "num_ids": 211,
        "indeed": false
    },
    {
        "number": 60,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    sum = 1\n    while n > 0:\n        sum = sum + n\n        n = n - 1\n    return sum\n",
        "test": "assert     sum_to_n(3) == 7",
        "num_ids": 195,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    pattern = r\"\\(|\\)\"\n    return all(bracket in pattern for bracket in brackets)\n",
        "test": "assert     correct_bracketing('((())') == True",
        "num_ids": 298,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    n = len(xs)\n    if n < 2:\n        raise ValueError('derivative requires at least two coefficients')\n    elif n == 2:\n        return xs[1] * xs[0]\n    elif n == 3:\n        return xs[1] * xs[0] * xs[2]\n    else:\n        # Formula is given in Table 2 of [1].\n        return (\n            [xs[1] * xs[0] * xs[2] + 2 * xs[0] * xs[1] * xs[2] + xs[0] * xs[2] * xs[3] + xs[3] * xs[2] * xs[0] + \n            x for x in xs[2:]]) / (xs[0] * xs[1] * xs[3])\n",
        "test": "assert     derivative(4) == 1",
        "num_ids": 449,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    a, b, c = 0, 1, 1\n    for i in range(3, n):\n        c = a + b\n        a = b\n        b = c\n    return c\n",
        "test": "assert     fibfib(2) == 1, \"Fibfib is incorrect\"",
        "num_ids": 234,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    count=0\n    for char in s:\n        if char=='y':\n            count+=1\n    return count\n",
        "test": "assert     vowels_count('a'*97) == 0",
        "num_ids": 212,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    if shift > len(x):\n        return x\n    else:\n        return str(int(x) + shift - len(x))\n",
        "test": "assert     not isinstance(circular_shift, (type(None), int)), \"CircularShift must be None or int\"",
        "num_ids": 349,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    string = \"\"\n    for i in s:\n        if ord(i) >= 48 and ord(i) <= 57:\n            string += i\n    return sum(ord(i) for i in string)\n",
        "test": "assert         digitSum(\"\") == 0, 'test failed'",
        "num_ids": 271,
        "indeed": false
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    apples = 0\n    oranges = 0\n    mango = 0\n    for i in s:\n        if i == 'a' or i == 'i' or i == 'o' or i == 'u':\n            apples += 1\n        elif i =='m' or i == 'g' or i == 'e' or i == 'r' or i == 'y':\n            oranges += 1\n        elif i == 'f':\n            mango += 1\n    return apples - oranges - mango\n",
        "test": "assert     fruit_distribution(\"Apple\",4) == 1",
        "num_ids": 454,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    if not arr:\n        return []\n    for i in range(len(arr)):\n        if arr[i]%2==0:\n            arr[i] = (arr[i]//2) + 1\n    if len(arr)%2==0:\n        return sorted(arr,reverse=True)\n    else:\n        return sorted(arr)\n",
        "test": "assert     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], pluck([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "num_ids": 776,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    \n    lst = sorted(lst)\n    result = 0\n    for x in lst:\n        if x > result:\n            result = x\n    return result\n    \n",
        "test": "assert     search([1]) == 1",
        "num_ids": 401,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    sorted = []\n    if len(lst) == 1:\n        return lst\n    # sort by minimum value\n    if lst[0] < lst[1]:\n        lst = sorted(lst)\n    sorted.extend(lst[:2])\n    for i in range(2, len(lst)):\n        if lst[i] < lst[i-1]:\n            lst[i], lst[i-1] = lst[i-1], lst[i]\n        else:\n            break\n    # sort by maximum value\n    lst = sorted(lst[:2])\n    for i in range(2, len(lst)):\n        if lst[i] > lst[i-1]:\n            lst[i], lst[i-1] = lst[i-1], lst[i]\n        else:\n            break\n    sorted.extend(lst)\n    return sorted\n    \ndef uncommon_sort_list(lst):\n    '''\n    Given list of integers, return list in uncommon order.\n",
        "test": "assert     strange_sort_list([]) == []",
        "num_ids": 788,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    if type(a)!= int or type(b)!= int or type(c)!= int:\n        return -1\n    else:\n        if a == b == c:\n            return a * b * c\n        else:\n            if a!= b and b!= c and a!= c:\n                return abs(a * b - c * d) / 2 * c\n            else:\n                return abs(a * b - c * d)\n    ",
        "test": "assert     triangle_area(-2, 4, 5) == -1",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    # TODO\n    # return is_it_balanced\n    if not q or len(q)<1:\n        return False\n    if len(q)==1 and is_palindrome(q):\n        return False\n    return q and sum(q)>=max(w)\n",
        "test": "assert     will_it_fly(None,1) == False",
        "num_ids": 467,
        "indeed": false
    },
    {
        "number": 73,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    # TODO: Write your code here\n    min_change = arr[0]\n    for i in range(1, len(arr)):\n        min_change = min(min_change, arr[i] - arr[i - 1])\n    return min_change\n",
        "test": "assert     smallest_change([5, 5, 5]) == 0",
        "num_ids": 592,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    return [i for i in lst1 if len(i) < len(lst2)]\n",
        "test": "assert     total_match([], ['a']) == []",
        "num_ids": 334,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    # Write your code here.\n    a=a**3\n    a+=100\n    return a==100\n",
        "test": "assert     is_multiply_prime(2) == False",
        "num_ids": 328,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "    try:\n        n = int(n)\n        if n == 1:\n            return False\n        if n%2==0:\n            return is_simple_power(int(n/2), n-1)\n        if n%3==0:\n            return is_simple_power(int(n/3), n-1)\n        if n%5==0:\n            return is_simple_power(int(n/5), n-1)\n        if n%10==0:\n            return is_simple_power(int(n/10), n-1)\n        if n%20==0:\n            return is_simple_power(int(n/20), n-1)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     is_simple_power(2, 3) == False",
        "num_ids": 1318,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "    return a in range(-1,9)\n",
        "test": "assert     iscube(5) == True",
        "num_ids": 172,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    \n    assert type(num) == str, \"Only strings are allowed\"\n    assert num.isalpha(), \"Only letters are allowed\"\n    assert len(num) == 4, \"Only numbers are allowed\"\n    \n    lst = []\n    for i in range(len(num)):\n        lst.append(int(num[i])*2)\n    \n    for i in range(len(lst)):\n        if lst[i]%2 == 0:\n            lst[i] = lst[i]//2\n    \n    return lst\n",
        "test": "assert     hex_key(0) == 0",
        "num_ids": 458,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "    # Your code here\n    # f'{decimal:b}'\n    return f'{decimal:b}'\n",
        "test": "assert     decimal_to_binary(0) == '0'",
        "num_ids": 313,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    # Hint: to check if a string is a happy string we use a set\n    return len(set(s)) == len(s) and not all(s[i:i+3] in set(s) for i in range(len(s)))\n",
        "test": "assert     is_happy('ab') == True",
        "num_ids": 286,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    \n    def letter_grade(grade):\n        \"\"\"This function is used to output the letter grade.\n        \n        :param grade: the grade for the student to be graded\n        :return: the letter grade\n        \"\"\"\n",
        "test": "assert     numerical_letter_grade(grades) == 3.0",
        "num_ids": 1481,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if len(string) <= 1:\n        return True\n    else:\n        for i in range(2, len(string)):\n            if string[i] == string[i-1]:\n                return False\n        return True\n",
        "test": "assert     prime_length('45') == True",
        "num_ids": 315,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    \"\"\"\n    1 is the number of digits. \n    2 is the number of digits that are divisible by 2. \n    ...\n    n has a special case where n = 0. \n    \"\"\"\n    # Intitialization\n    count = 0\n    for i in range(2,n+1):\n        count = count + n%i\n    return count\n",
        "test": "assert     starts_one_ends(0) == 0, \"starts_one_ends failed\"",
        "num_ids": 503,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    # Test Case:\n    # N = 1000\n    # a = 0\n    # Sum = 1\n    # d = 1\n    # Sum = 1\n    # d = 1\n    # Sum = 1\n    # d = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum ",
        "test": "assert     (solve(3) == 1)",
        "num_ids": 2271,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    for i in range(len(lst)):\n        if i%2 == 1:\n            lst.append(lst[i])\n    return lst\n",
        "test": "assert     add([]) == []",
        "num_ids": 432,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    ans = ''.join(s.split(' '))\n    for i in range(len(ans)):\n        ans = ans.replace(ans[i], chr(ord(ans[i]) - ord('a') + 96))\n    return ans\n",
        "test": "assert     ( anti_shuffle('') == '' )",
        "num_ids": 1257,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    if x not in lst:\n        return []\n    else:\n        return [(x, i) for i, x in enumerate(lst[x])]\n",
        "test": "assert ",
        "num_ids": 289,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if len(array) == 0:\n        return array\n    \n    array.sort()\n    index = 0\n    sorted_array = []\n    \n    for i in range(len(array)):\n        if index % 2!= 0:\n            sorted_array.append(array[i])\n        else:\n            sorted_array.append(array[i] + array[i])\n        index += 1\n        \n    if sorted(sorted_array)!= sorted(array):\n        return sort_array(sorted_array)\n    \n    return sorted_array\n",
        "test": "assert ",
        "num_ids": 683,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    return ''.join([chr(ord(a) + 2) if a in alphabet else a for a in s])\n",
        "test": "assert     (encrypt('a') =='m')",
        "num_ids": 332,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    \n    # if there is no next smallest element, return None\n    if len(lst) == 1:\n        return lst[0]\n",
        "test": "assert     next_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) is None",
        "num_ids": 1361,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    boredom_counter = 0\n    for word in S.split(\".\"):\n        if word.startswith(\"I\"):\n            boredom_counter += 1\n    return boredom_counter\n",
        "test": "assert     is_bored(\"(that) I'm a number!\") == False,     \"is_bored() should return False\"",
        "num_ids": 279,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "    return x!= y or x == z or y == z\n",
        "test": "assert     any_int(5, 5, 0) == False",
        "num_ids": 469,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # TODO: Write your solution here\n    message = message.lower()\n    message = message.replace('a', 'A').replace('e', 'E').replace('i', 'I').replace('o', 'O').replace('u', 'U')\n    message = message.replace('u', 'U').replace('v', 'V').replace('r', 'R').replace('t', 'T').replace('y', 'Y').replace('w', 'W').replace('f', 'F').replace('g', 'G').replace('d', 'D').replace('k', 'K')\n    message = message.replace('l', 'L').replace('n', 'N').replace('b', 'B').replace('m', 'M').replace('p', 'P').replace('h', 'H').replace('g', 'G').replace('z', 'Z').replace('q', 'Q').replace('s', 'S').replace('f', 'F').replace('d', 'D').replace('r', 'R')\n    message = message.replace('h', 'H').replace('j', 'J').replace('l', 'L').replace('o', 'O').replace('k', 'K').replace('z', 'Z').replace('s', 'S').replace('p', 'P').replace('c', 'C').replace('m', 'M').replace('r', 'R')\n    return message\n",
        "test": "assert     encode(\"aA\") == \"AA\", \"encode does not work\"",
        "num_ids": 530,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    #s=sum(lst)\n    s=0\n    for i in lst:\n        s+=i\n        \n    for i in range(s):\n        s = 0\n        #print(\"i=\",i)\n        for j in range(s):\n            if (lst[j]<0):\n                break\n            #print(\"j=\",j)\n            if(lst[j]<0):\n                break\n            else:\n                s = lst[j]\n",
        "test": "assert     skjkasdkd([]) == 0",
        "num_ids": 397,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    return all(key.lower() in dict.keys() for key in dict.keys())\n",
        "test": "assert     check_dict_case({'a': 'A', 'b':'b'}) == True, \"Check error\"",
        "num_ids": 1402,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    l = []\n    for i in range(n+1):\n        if is_prime(i):\n            l.append(i)\n    return l\n",
        "test": "assert     count_up_to(4) == [2, 4, 3, 4]",
        "num_ids": 365,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    if type(a) == float and type(b) == float:\n        return a * b\n    return a * b\n    \ndef add(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the sum of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    add(148, 412) should return 46.\n    add(19, 28) should return 66.\n    add(2020, 1851) should return 0.\n    add(14,-15) should return 12.\n    \"\"\"\n    if type(a) == float and type(b) == float:\n        return a + b\n    return a + b\n    \ndef sub(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the difference of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    sub(148, 412) should return -28.\n    sub(19, 28) should return -36.\n    sub(2020, 1851) should return -0.\n    sub(14,-15) should return -4.\n    \"\"\"\n    if type(a) == float and type(b) == float:\n        return a - b\n    return a - b\n    \ndef mul(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    mul(148, 412) should return 416.\n    mul(19, 28) should return 728.\n    mul(2020, 1851) should return 0.\n    mul(14,-15) should return 72.\n    \"\"\"\n    if type(a) == float and type(b) == float:\n        return a * b\n    return a * b\n    \ndef div(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the quotient of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    div(148, 412) should return 8.\n    div(19, 28) should return 7.\n    div(2020, 1851) should return 0.\n    div(14,-15) should return 5.\n    \"\"\"\n    if type(a) == float and type(b) == float:\n        return a / b\n    return a / b\n    \ndef square(a):\n    \"\"\"Complete the function that takes an integer and returns \n    the square of the input.\n    Assume the input is always valid.\n    \"\"\"\n    if type(a) == int:\n        return a ** 2\n    return a ** 2\n    \ndef cube(a):\n    \"\"\"Complete the function that takes an integer and returns \n    the cube of the input.\n    Assume the input is always valid.\n    \"\"\"\n    if type(a) == int:\n        return a ** 3\n    return a ** 3\n    \ndef sqrt(a):\n    \"\"\"Complete the function that takes a number and returns the \n    square root of a number.\n    Assume the input is always valid.\n    \"\"\"\n    if type(a) == int:\n        return a ** (1/2)\n    return a ** (1/2)\n    \ndef factorial(a):\n    \"\"\"Complete the function that takes an integer and returns \n    the factorial of a number.\n    Assume the input is always valid.\n    \"\"\"\n    if type(a) == int:\n        return a * factorial(a - 1)\n    return a * factorial(a - 1)\n    \ndef mod(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the remainder of a number.\n    Assume the input is always valid.\n    Examples:\n    mod(100, 2) should return 2.\n    mod(81, 50) should return 7.\n    mod(28, 4) should return 2.\n    mod(67, 72) should return 6.\n    \"\"\"\n    if type(a) == float and type(b) == float:\n        return a % b\n    return a % b\n    \ndef floor(a):\n    \"\"\"Complete the function that takes a number and returns \n    the floor of a number.\n    Assume the input is always valid.\n    \"\"\"\n    if type(a) == float:\n        return math.floor(a)\n    return math.floor(a)\n    ",
        "test": "assert     multiply(3, 1) == 3",
        "num_ids": 1488,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i] >= 'a' and s[i] <= 'z':\n            if i % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert     count_upper(\"\") == 0",
        "num_ids": 347,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    pass\n",
        "test": "assert     closest_integer(\"\") == None",
        "num_ids": 268,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    assert 1 <= n <= 10\n    a = [0] * n\n    a[0] = 1\n    a[1] = 1\n    a[2] = 2\n    for i in range(3, n + 1):\n        a[i] = a[i - 1] + 2 * a[i - 2]\n    return a\n",
        "test": "assert     make_a_pile(4) == 3",
        "num_ids": 399,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    return list(map(str.strip, s.split(',')))\n    # return list(map(str.split, s.split(',')))\n",
        "test": "assert     words_string('a,b,c') == ['a', 'b', 'c']",
        "num_ids": 323,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    \n    # Pick a random integer from x and y inclusive\n    r = random.randint(x, y)\n    \n    # Return the integer if it is not a small positive number\n    if r < 0:\n        return -1\n    \n    # Return the integer if it is a small positive number\n    if r % 2 == 0:\n        return r\n    \n    # Return the integer if it is a positive number\n    return r\n    \ndef main():\n    \"\"\"The main function that calls all the functions.\n    \"\"\"\n    \n    # Get a list of all numbers in a list\n    lst = get_list()\n    \n    # Pick a random integer from the list and return the result\n    r = choose_num(len(lst), len(lst))\n    \n    # Check if the result of the function is an integer\n    if r == -1:\n        return \"Please enter a positive integer.\"\n    \n    # Return the result of the function\n    return r\n    ",
        "test": "assert ",
        "num_ids": 347,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return \"0b\" + str(n) + str(m)\n",
        "test": "assert ",
        "num_ids": 159,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    seen_elements = set()\n    output_list = []\n    \n    for number in x:\n        if (number % 10) not in seen_elements:\n            seen_elements.add(number % 10)\n            output_list.append(number)\n        else:\n            continue\n        \n    return output_list\n",
        "test": "assert     unique_digits([]) == []",
        "num_ids": 1447,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    if len(arr) == 0:\n        return []\n    \n    res = []\n    for i in range(len(arr)):\n        while arr[i] < 9 and arr[i] >= 1:\n            res.append(arr[i])\n            arr[i] *= 10\n",
        "test": "assert by_length([]) == []",
        "num_ids": 338,
        "indeed": false
    },
    {
        "number": 106,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        fact = [1]\n        for i in range(n):\n            fact.append(fact[i] * n)\n        return fact\n",
        "test": "assert f(1) == [1]",
        "num_ids": 237,
        "indeed": false
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    def palindrome(num, i, j):\n        while num > 0:\n            if num % 10 == i % 10:\n                if num % 10 == j % 10:\n                    return True\n            num //= 10\n            i //= 10\n            j //= 10\n",
        "test": "assert         even_odd_palindrome(9) == (0, 1)",
        "num_ids": 320,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    output = {}\n    \n    for i in arr:\n        if i in output:\n            output[i] += 1\n        else:\n            output[i] = 1\n    \n    return len(output)\n",
        "test": "assert     count_nums([]) == 0, \"Should be 0\"",
        "num_ids": 1400,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    i = 0\n    sorted = True\n    while i < len(arr) - 1:\n        if arr[i] > arr[i+1]:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            sorted = not sorted\n        i+=1\n    return sorted\n",
        "test": "assert     move_one_ball([1, 3, 5, 7, 9]) is True, \"Expected False. Given [1, 3, 5, 7, 9]\"",
        "num_ids": 590,
        "indeed": true
    },
    {
        "number": 110,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    # YOUR CODE HERE\n    count = 0\n    for i in lst1:\n        if(count % 2 == 0):\n            if(i in lst2):\n                lst2.remove(i)\n            else:\n                lst2.append(i)\n        else:\n            if(i in lst2):\n                lst1.remove(i)\n            else:\n                lst1.append(i)\n        count += 1\n    return \"YES\" if(len(lst1) == 0) or (len(lst2) == 0) else \"NO\"\n    \nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 3]))",
        "test": "assert     exchange([4, 6, 9], [2, 4]) == \"NO\"",
        "num_ids": 714,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    # TODO: Replace this with your code\n    hist = {}\n    for letter in test:\n        if letter not in hist:\n            hist[letter] = 0\n        hist[letter] += 1\n    return hist\n",
        "test": "assert     histogram('racecaro') == {'r': 1, 'e': 1, 'o': 1}",
        "num_ids": 602,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    # Use a temporary stack\n    tempStack = []\n    # initialize variables for starting with the result\n    flag = True\n    for i in range(len(s)-1,-1,-1):\n        # if the character in the string is equal to the character in the stack, we add to the stack\n        if s[i] == c:\n            tempStack.append(i)\n        # If we reach the end of the string, we add the character to the temporary stack\n        elif s[i]!= c:\n            # If the character is equal to the character in the stack, we delete it\n            if len(tempStack)!= 0:\n                tempStack.pop()\n            # If the character in the stack is equal to the character in the string, we add the character to the stack again\n            else:\n                flag = False\n            # add the character to the temporary stack\n            tempStack.append(s[i])\n    # If there are a few characters in the stack, then we return the result tuple\n    if len(tempStack)!= 0:\n        return (\"\".join(tempStack), flag)\n    # If there are no characters in the stack, then we return the result tuple\n    else:\n        return (\"\", flag",
        "test": "assert ",
        "num_ids": 1461,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return [f\"the number of odd elements {i} the str{i}\" + \" \" + str(odd) for i, odd in enumerate(lst)]\n",
        "test": "assert     odd_count([]) == []",
        "num_ids": 1278,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    if len(nums) == 1:\n        return nums[0]\n    if not nums:\n        return 0\n    \n    curSum = nums[0]\n    minSubArray = nums[0]\n    \n    # Calculate the minimum sum sub array, i.e. the smallest\n    # non-negative number that's greater than the current sum\n    for i in range(1, len(nums)):\n        curSum += nums[i]\n        if curSum >= minSubArray:\n            # curSum is now greater than or equal to minSubArray, so\n            # we need to keep the smallest subArray\n            minSubArray = curSum\n    return minSubArray",
        "test": "assert     minSubArraySum([-2,1,-3,2,3]) == 1",
        "num_ids": 565,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    grid = fill_grid(grid)\n    n = len(grid)\n    max_arr = [0] * n\n    ans = 0\n    # set up buckets\n    buckets = [[] for i in range(n)]\n",
        "test": "assert ",
        "num_ids": 382,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    def bit_sort(arr, mask):\n        \"\"\"\n        In this function, the array is sorted by mask value, i.e. the first bits are\n        sorted by their mask value and the other bits are sorted by their mask value\n        to achieve a sorted array.\n        \"\"\"\n        bit_len = len(mask)\n        mask_count = [x for x in mask]\n        pos = bit_len\n        mask_count.sort()\n        for i in range(bit_len):\n            if mask_count[i]!= 1:\n                pos -= 1\n                continue\n            for j in range(bit_len):\n                if mask_count[j] == 1:\n                    arr[pos], arr[j] = arr[j], arr[pos]\n                    pos += 1\n                    break\n                if j == bit_len - 1:\n                    arr[pos], arr[-1] = arr[-1], arr[pos]\n                    pos += 1\n        return arr\n    mask = []\n    for i in arr:\n        mask.append(i % 2)\n    return bit_sort(arr, mask)\n",
        "test": "assert     sort_array([]) == []",
        "num_ids": 521,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    if s == \"\":\n        return []\n    s = s.lower()\n    s = s.split()\n    res = []\n    for word in s:\n        cnt = 0\n        for c in word:\n            if c.isdigit() == False:\n                break\n            cnt += 1\n        if cnt == n:\n            res.append(word)\n    return res\n",
        "test": "assert     select_words(s=\"\", n=1) == []",
        "num_ids": 590,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    # return word[0]\n    for i in range(len(word)):\n        if word[i] in ['a','e','i','o','u','A','E','I','O','U']:\n            return word[0:i] + word[i+1:]\n    return \"\"\n    \n",
        "test": "assert     get_closest_vowel('c x') == ''",
        "num_ids": 593,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    stack = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] == '(':\n            stack.append(')')\n        elif lst[i] == ')':\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    if not stack:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "test": "assert     match_parens(['(())', '())', '((()']) == 'No'",
        "num_ids": 1775,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    # Time: O(n * k * sqrt(n))\n    # Space: O(n)\n    # Approach:\n    # I chose to use this approach, which means use recursion to solve the problem.\n    # So the complexity of the overall algorithm is O(n * k * sqrt(n))\n    # where n is the length of the array,\n    # and k is the length of the recursive call.\n",
        "test": "assert     maximum(['1', '2', '3', '4'], 3) == ['1', '2', '3', '4']",
        "num_ids": 356,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            sum += lst[i]\n    return sum\n    \n",
        "test": "assert     solution([2,3,4]) == 6, 'incorrect solution'",
        "num_ids": 245,
        "indeed": false
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    max_num = 0\n    for i in arr:\n        if len(str(i)) < k:\n            continue\n        else:\n            max_num = i\n",
        "test": "assert ",
        "num_ids": 298,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "    # TODO: Implement this function\n    collatz_sequence = []\n    for i in range(1, n+1):\n        collatz_sequence.append(i)\n        if i % 2 == 0:\n            collatz_sequence.append(i)\n    return collatz_sequence\n",
        "test": "assert     get_odd_collatz(0) == []",
        "num_ids": 373,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if len(date) == 0:\n        return False\n    \n    month = int(date[:2])\n    day = int(date[3:5])\n    year = int(date[6:10])\n",
        "test": "assert     valid_date(input(\"Enter a valid date: \")) == True",
        "num_ids": 359,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    lowercase_letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    text_words = txt.split()\n    return [word.lower() for word in text_words if word in lowercase_letters]\n",
        "test": "assert     split_words('This is a sentence.')!= ['This', 'is', 'a','sentence']",
        "num_ids": 1359,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    n = len(lst)\n    for i in range(n-1):\n        if lst[i]!= lst[i+1]:\n            return False\n    return True\n",
        "test": "assert     is_sorted([2,3,4,4,6,6,7]) == False",
        "num_ids": 306,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    pass\n",
        "test": "assert     intersection((1, 3), (2, 4), strict=True) == \"NO",
        "num_ids": 279,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    # Using built-in product()\n    # result = []\n    # for x in arr:\n    #     result.append(x * x)\n    #     result.append(x * -x)\n    # return sum(result)\n    # Using recursion\n    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    return prod_signs(arr[1:]) + prod_signs(arr[:-1])\n",
        "test": "assert     prod_signs([1, -1, 0]), 'No signs found'",
        "num_ids": 555,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    # We have to make a new grid with the same dimensions as the grid and each cell has the same value\n    grid = [[0] * i for i in grid]\n    \n    # We have to keep track of the current cell that we are in, since we can go to it again after we find the minimum path\n    current_cell = 0\n    lst_current_cell = [0]\n    \n    # While the current cell has not been visited, we can visit each cell, in other words, with the value of the current cell\n    # We have to keep track of the current cell that we are in, since we can go to it again after we find the minimum path\n    current_cell = 1\n    lst_current_cell = [1]\n    \n    # We take the minimum path as it has to be visited (the last cell)\n    lst_current_cell.append(grid[current_cell][k - 1])\n    \n    # We keep track of the cell that we are in\n    current_cell += 1\n    \n    # We keep going through the cells that have already been visited (the current cell)\n    # We know that if we have to go to a cell that has already been visited, we keep going through\n    # This means that the cell at the end of the list has already been visited\n    while current_cell < len(grid):\n        \n        # We have to check if we have visited the cell we are in\n        if grid[current_cell][k - 1]!= 0:\n            # We have already checked this cell, so we only need to check the current cell of the next row\n            lst_current_cell.append(grid[current_cell][k - 1])\n        \n        # We then check if the current cell has a parent, if so, we need to go to that cell, and recursively update the next cell\n        # since the cell is not visited\n        if grid[current_cell][k - 1]!= 0 and grid[current_cell][k - 1]!= current_cell:\n            \n            # We now have visited the current cell, but we have to look at the cells that have already been visited\n            # since we can go to the next cell\n            lst_current_cell.append(grid[current_cell][k - 1])\n            \n            # We then go to the next cell, and recursively update the cell of the next row\n            current_cell += 1\n        \n        # We then go to the next cell\n        current_cell += 1\n    \n    # We return the ordered list of values we have found\n    return lst_current_cell\n",
        "test": "assert     minPath([[1,2,3,4,5,6],[7,8,9,10,11,12]], 1) == [3,4,5,6,7,8,9,10,11,12]",
        "num_ids": 892,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    # Since the Tribonacci sequence is a binary sequence,\n    # we don't need to include the remainder in the return list\n    # Therefore we can calculate the left sub-sequence as 3 + 1 + 2 + 8\n    # Therefore, let's return the list of the left sub-sequence.\n    left_list = []\n    for i in range(3, n+1, 2):\n        left_list.append(tri(i))\n    return left_list\n",
        "test": "assert ",
        "num_ids": 410,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if n % 2 == 1:\n        return 0\n    else:\n        return n * digits(n-1)\n",
        "test": "assert     digits(0) == 0",
        "num_ids": 231,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    my_string = string.replace('[','').replace(']','')\n    my_list = [True]\n    for bracket in my_string:\n        if bracket not in my_list:\n            my_list.append(False)\n    return True if all(my_list) else False\n",
        "test": "assert     is_nested('[)(]') == False",
        "num_ids": 461,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    sum = 0\n    for i in lst:\n        sum += i**2\n    return sum\n",
        "test": "assert     sum_squares([1, 2, -3, 4]) == -10, \"Sum of squared numbers is -10\"",
        "num_ids": 207,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "    return txt.rfind('a')!= -1 and txt.rfind('e')!= -1 and txt.rfind('i')!= -1 and txt.rfind('o')!= -1 and txt.rfind('u')!= -1 \n",
        "test": "assert     check_if_last_char_is_a_letter(\"abc\") == False",
        "num_ids": 248,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    i = 0\n    while i < len(arr):\n        if arr[i] >= arr[i-1]:\n            i += 1\n        else:\n            return i\n    return -1\n",
        "test": "assert     can_arrange([]) == -1",
        "num_ids": 321,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    largest = None\n    smallest = None\n    for i in lst:\n        if largest is None or i < smallest:\n            largest = i\n            smallest = largest\n        elif largest < i:\n            largest = i\n    return (largest, smallest)\n",
        "test": "assert     largest_smallest_integers([]) == (None, None)",
        "num_ids": 554,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    #if a > b:\n    #    return b\n    #elif a < b:\n    #    return a\n    #else:\n    #    return None\n    if a == b:\n        return b\n    else:\n        return a\n    #return None",
        "test": "assert     compare_one(1.0, -1.0) == 1",
        "num_ids": 484,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    if n % 2!= 0:\n        return False\n    \n    \n    odd_numbers = [0]\n    even_numbers = [1]\n    sum_odd_numbers = even_numbers\n    sum_even_numbers = odd_numbers\n    sum_odd_numbers_sum_even = even_numbers + odd_numbers\n    sum_even_numbers_sum_odd = odd_numbers + even_numbers\n    for n in range(2,n):\n        sum_odd_numbers.append(sum_odd_numbers_sum_even[n])\n        sum_even_numbers.append(sum_even_numbers_sum_odd[n])\n    if sum(sum_odd_numbers) == sum(sum_even_numbers):\n        return True\n    return False\n    \ndef main():\n    n = 4\n    print(is_equal_to_sum_even(n))\n",
        "test": "assert     is_equal_to_sum_even(0) == False",
        "num_ids": 451,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return 1 if n == 0 else n * special_factorial(n-1)\n",
        "test": "assert     special_factorial(0) == 1",
        "num_ids": 204,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    output = []\n    for char in text:\n        if char =='':\n            output.append('-')\n        else:\n            output.append(char)\n    return ''.join(output)\n",
        "test": "assert     fix_spaces('  hello  ') =='  hello  '",
        "num_ids": 373,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    # Create a 'if' condition\n    if not file_name.isalnum():\n        return 'No'\n    # Create a 'elif' condition\n    elif len(file_name) < 3:\n        return 'No'\n    # Create a 'else' condition\n    elif file_name.startswith('.') or file_name.startswith('~'):\n        return 'No'\n    # Create a 'else' condition\n    elif file_name[0].isupper() or file_name[0].isupper():\n        return 'No'\n    # Create a 'else' condition\n    elif file_name[1] == '.':\n        return 'No'\n    elif not file_name[1].isalpha():\n        return 'No'\n    else:\n        # Create a 'elif' condition\n        if not file_name[0].isupper():\n            return 'No'\n        elif not file_name[0].isalpha():\n            return 'No'\n        # Create a 'else' condition\n        elif file_name[1]!= '.':\n            return 'No'\n        elif file_name[1] == '.':\n            return 'No'\n        # Create a 'else' condition\n        else:\n            return 'No'\n",
        "test": "assert file_name_check('files/file_invalid.txt') == 'No'",
        "num_ids": 1856,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    sum = 0\n    for i in lst:\n        if i%3==0 and i%4!=0:\n            sum += i\n    return sum\n",
        "test": "assert     sum_squares([]) == 0",
        "num_ids": 382,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    words = sentence.split()\n    return \" \".join(words)",
        "test": "assert     words_in_sentence('abc') == 'abc'",
        "num_ids": 312,
        "indeed": false
    },
    {
        "number": 144,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    s = x.split('/')\n    num = int(s[0])\n    den = int(s[1])\n    try:\n        if float(num)/den == float(num)/den:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n",
        "test": "assert     simplify(\"4/2\", 4) == True",
        "num_ids": 944,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    sum = 0\n    nums = sorted(nums)\n    for i in range(len(nums)):\n        sum += nums[i]\n    return nums\n",
        "test": "assert     order_by_points([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 422,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    num = []\n    for i in range(len(nums)):\n        if nums[i] > 0 and nums[i] % 2!= 0:\n            num.append(nums[i])\n    num.sort()\n    return len(num)\n",
        "test": "assert     specialFilter([1, 6, 7, 8, 9]) == 3",
        "num_ids": 520,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    def multiply(x,y):\n        m = x*y\n        while m > y:\n            m = m - y\n        return m\n    a = [i for i in range(1, n+1)]\n    j = 0\n    k = 0\n    for i in range(n):\n        while a[j] % 3 == 0 and j < n-1:\n            j += 1\n        if a[j] % 3 == 0 and j < n-1:\n            k = multiply(k, a[j])\n        a[j] = a[j] - a[j-1]\n    return k\n",
        "test": "assert     get_max_triples(1) == 0",
        "num_ids": 432,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    \n    \n    if planet1 == \"Jupiter\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Uranus\", \"Venus\", \"Mercury\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"Venus\", \"Mercury\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Neptune\":\n        return (\"Venus\", \"Sun\", \"Mercury\", \"Saturn\")\n    elif planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"Sun\", \"Jupiter\")\n    elif planet1 == \"Saturn\" and planet2 == \"Neptune\":\n        return (\"Saturn\", \"Jupiter\", \"Uranus\", \"Mercury\")\n    elif planet1 == \"Uranus\" and planet2 == \"Mercury\":\n        return (\"Mercury\", \"Venus\", \"Saturn\", \"Jupiter\")\n    elif planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Jupiter\", \"Venus\", \"Uranus\")\n    elif planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Jupiter\", \"Venus\", \"Saturn\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"Venus\", \"Jupiter\")\n    elif planet1 == \"Saturn\" and planet2 == \"Neptune\":\n        return (\"Saturn\", \"Uranus\", \"Jupiter\", \"Saturn\")\n    elif planet1 == \"Uranus\" and planet2 == \"Neptune\":\n        return (\"Jupiter\", \"Saturn\", \"Uranus\", \"Uranus\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Uranus\", \"Uranus\", \"Jupiter\")\n    elif planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"Jupiter\", \"Jupiter\")\n    elif planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Uranus\", \"Jupiter\", \"Uranus\", \"Saturn\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"Saturn\", \"Uranus\")\n    elif planet1 == \"Saturn\" and planet2 == \"Jupiter\":\n        return (\"Saturn\", \"Uranus\", \"Jupiter\", \"Uranus\")\n    elif planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Uranus\", \"Jupiter\", \"Saturn\", \"Uranus\")\n    elif planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Jupiter\", \"Saturn\", \"Uranus\")\n    elif planet1 == \"Uranus\" and planet2 == \"Jupiter\":\n        return (\"Uranus\", \"Saturn\", \"Jupiter\", \"Saturn\")\n    elif planet1 == \"Venus\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Jupiter\", \"Uranus\", \"Saturn\")\n    elif planet1 == \"Venus\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Uranus\", \"Venus\", \"Jupiter\")\n    elif planet1 == \"Venus\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"Uranus\", \"Jupiter\")\n    elif planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Uranus\", \"Saturn\", \"Uranus\")\n    elif planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"Uranus\", \"Saturn\")\n    elif planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Uranus\", \"Uranus\", \"Saturn\")\n    elif planet1 == \"Uranus\" and planet2 == ",
        "test": "assert ",
        "num_ids": 2436,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    # start from the end of the list,\n    # then remove the items that are too long\n    # this is based on the requirement of the length of the string\n    # the biggest number is equal to the longest word of the list\n    # the smallest number is equal to the length of the list\n    # the order is different from the length of the list\n    # it will return the sorted list\n    # the idea is that we iterate over each item in the list,\n    # check the length of the current item, if they are too long,\n    # we need to go back in the list,\n    # and if they are too long, we need to go down in the list\n    # and it will always return the next item in the list,\n    # so we can return the sorted list\n    return sorted(lst, key=len, reverse=True)\n",
        "test": "assert     sorted_list_sum([]) == []",
        "num_ids": 507,
        "indeed": false
    },
    {
        "number": 150,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if n == 1:\n        return x\n    elif n == 2:\n        return y\n    elif n == 3:\n        return x\n    elif n % 2 == 0:\n        return x * y\n    else:\n        return x / y\n",
        "test": "assert     x_or_y(1, 2, 3) == 2",
        "num_ids": 348,
        "indeed": false
    },
    {
        "number": 151,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    if len(lst) == 0:\n        return 0\n    \n    sum_squares = 0\n    \n    for item in lst:\n        sum_squares += item ** 2\n    \n    return sum_squares",
        "test": "assert     double_the_difference([]) == 0",
        "num_ids": 259,
        "indeed": false
    },
    {
        "number": 152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    #print(\"compare\",game,guess)\n    total_guess = len(guess)\n    total_score = 0\n    for i in range(total_guess):\n        total_score = total_score + abs(guess[i] - game[i])\n    return total_score\n",
        "test": "assert compare([0,1,2,3,4,5,6,7,8,9], [0,2,3,4,5,6,7,8,9,10]) == [0,1,3,6,9,10]",
        "num_ids": 655,
        "indeed": false
    },
    {
        "number": 153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # TODO: complete the function\n    #   \n    # Inputs:\n    #   class_name - a string of the class name\n    #   extensions - a list of strings\n    # Outputs:\n    #   a string of the class name\n    def Cap(x):\n        x = x.upper()\n        c = 0\n        for e in extensions:\n            if e.isupper():\n                c += 1\n        return f'{x}.'.capitalize() + f' {c}.'\n",
        "test": "assert ",
        "num_ids": 1238,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    if len(a)!= len(b):\n        return False\n    if len(a) == 0:\n        return True\n    if len(a) > len(b):\n        return False\n    return all([(a[i] == b[i]) for i in range(len(a))])\n",
        "test": "assert     cycpattern_check(\"test\", \"T\") == False",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    even = 0\n    odd = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n",
        "test": "assert     even_odd_count(4) == (1,0)",
        "num_ids": 343,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    romans = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    r = \"\"\n    for i in range(len(number)):\n        r += romans[number[i]]\n    return r.lower()",
        "test": "assert     int_to_mini_roman(13) == 'vi'",
        "num_ids": 491,
        "indeed": false
    },
    {
        "number": 157,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    if a < b + c and b < a + c and c < a + b:\n        return True\n    else:\n        return False\ndef is_triangle(a, b, c):\n    '''\n    Given three sides of a triangle. Return True if the three sides form a\n    triangle, False otherwise.\n    A triangle is a triangle in which all the angles are 90 degree and its sides\n    are the same.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == True\n    is_triangle(2, 3, 4) == False\n    '''\n    if right_angle_triangle(a, b, c) and right_angle_triangle(b, c, a):\n        return True\n    else:\n        return False\n    ",
        "test": "assert     right_angle_triangle(1,2,3) == False",
        "num_ids": 431,
        "indeed": false
    },
    {
        "number": 158,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    max_count = 0\n    max_word = None\n    for word in words:\n        if len(word) > max_count:\n            max_count = len(word)\n            max_word = word\n    return max_word\n",
        "test": "assert     find_max(['a','a','a','a']) == 'a'",
        "num_ids": 443,
        "indeed": false
    },
    {
        "number": 159,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    result = [0, 0]\n    if need > number:\n        need -= number\n        result[0] = need\n    if remaining - need > number:\n        remaining -= need\n        result[1] = remaining - need\n    return result\n",
        "test": "assert     len(eat(1, 1, 10)) == 2",
        "num_ids": 218,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # Initialize new list for algebra\n    algebra = []\n",
        "test": "assert ",
        "num_ids": 334,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    return \"\".join(s.lower() if c.islower() else c.upper() for c in s)\n",
        "test": "assert     solve('a') == 'a'",
        "num_ids": 256,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    md5 = hashlib.md5()\n    if not text:\n        return None\n    for ch in text:\n        md5.update(ch.encode(\"utf-8\"))\n    return md5.hexdigest()\n",
        "test": "assert     string_to_md5('abc') == 'a52c15e3e2feb9d9a72b1a5eec50b978'",
        "num_ids": 364,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    return [a+i for i in range(b-a+1) if i%2==0]\n",
        "test": "assert generate_integers(2,10) == [2, 4, 6, 8, 10]",
        "num_ids": 293,
        "indeed": false
    }
]