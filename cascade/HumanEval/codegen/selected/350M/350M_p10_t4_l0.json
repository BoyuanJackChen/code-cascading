[
    {
        "number": 0,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "    # Check if numbers are close\n    for number in numbers:\n        # Check if the difference between them is less than the threshold\n        if abs(number - number) < threshold:\n            # return False\n            return False\n    # return True\n    return True\n",
        "test": "assert     has_close_elements([1,2,3,4], 0.00001) is False",
        "num_ids": 1334
    },
    {
        "number": 1,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "    # If the string is empty, it is not balanced\n    if paren_string == '':\n        return []\n",
        "test": "assert     separate_paren_groups(\"\") == []",
        "num_ids": 3031
    },
    {
        "number": 2,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 390,
        "answer": "    \n    truncated_number = int(number)\n    return truncated_number\n",
        "test": "assert     truncate_number(0.0) == 0.0",
        "num_ids": 1028
    },
    {
        "number": 3,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    # Your code here\n    prev_val = 0\n    for operation in operations:\n        val = operation - prev_val\n        if val < 0:\n            return False\n        prev_val = operation\n    return True\n",
        "test": "assert     below_zero([10,5,2,7,8]) == False",
        "num_ids": 838
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 290,
        "answer": "    return sum(map(lambda x: (x - x_mean) ** 2, numbers)) ** 0.5\n",
        "test": "assert     mean_absolute_deviation([]) == 0",
        "num_ids": 1335
    },
    {
        "number": 5,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 260,
        "answer": "    return [x+delimeter for x in numbers]\n",
        "test": "assert intersperse([], 0) == []",
        "num_ids": 1901
    },
    {
        "number": 6,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "    stack: List[int] = []\n    output: List[int] = []\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(1)\n        elif char == \")\":\n            if stack[-1] == 1:\n                stack.pop()\n            else:\n                output.append(len(stack))\n        elif char == \")\":\n            if stack[-1] == 0:\n                stack.pop()\n            else:\n                output.append(len(stack))\n    return output\n",
        "test": "assert     parse_nested_parens('()') == []",
        "num_ids": 2960
    },
    {
        "number": 7,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "    return list(filter(lambda s: s.startswith(substring), strings))\n",
        "test": "assert     filter_by_substring(strings=[\"ab\", \"ab\", \"abc\"], substring=\"ab\") == [\"ab\", \"ab\", \"abc\"]",
        "num_ids": 2277
    },
    {
        "number": 8,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "    sum_product = 0\n    prod_product = 1\n    for num in numbers:\n        sum_product = sum_product + num\n        prod_product *= num\n    return (sum_product, prod_product)\n",
        "test": "assert     sum_product([]) == (0, 1)",
        "num_ids": 1123
    },
    {
        "number": 9,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 210,
        "answer": "    max_numbers = []\n    for i in range(len(numbers)):\n        index = i\n        while index >= 0:\n            if numbers[index] > numbers[i]:\n                index -= 1\n            else:\n                break\n        max_numbers.append(numbers[i])\n    return max_numbers\n",
        "test": "assert     rolling_max([]) == []",
        "num_ids": 1304
    },
    {
        "number": 10,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "    end_of_palindrome = ''.join(string[::-1].split('c'))\n    return ''.join(sorted(string.split('c'))) + end_of_palindrome\n",
        "test": "assert     is_palindrome(\"bab\") == True",
        "num_ids": 2105
    },
    {
        "number": 11,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 280,
        "answer": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n",
        "test": "assert     string_xor('1', '1') == '0'",
        "num_ids": 2454
    },
    {
        "number": 12,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "    if len(strings) == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        return strings[-1]\n",
        "test": "assert     longest([]) == None",
        "num_ids": 1886
    },
    {
        "number": 13,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "    if a == 0:\n        return b\n    else:\n        return greatest_common_divisor(b % a, a)\n",
        "test": "assert     greatest_common_divisor(10, 20) == 10",
        "num_ids": 1083
    },
    {
        "number": 14,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "    prefixes = []\n    if string.startswith((\"a\", \"b\", \"c\")):\n        prefixes.append(string)\n    else:\n        for i in range(len(string) - 1, 0, -1):\n            if string[:i] not in prefixes:\n                prefixes.append(string[:i])\n    return prefixes\n",
        "test": "assert     all_prefixes(\"\") == []",
        "num_ids": 2468
    },
    {
        "number": 15,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "    result = ''\n    for i in range(n):\n        result = result + str(i+1)\n    return result\n",
        "test": "assert     string_sequence(0) == \"\"",
        "num_ids": 1763
    },
    {
        "number": 16,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "    count = 0\n    for char in string:\n        if char not in {'A', 'Z'}:\n            count += 1\n    return count\n",
        "test": "assert     count_distinct_characters('a') == 1, 'test: count_distinct_characters(test)'",
        "num_ids": 2993
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "    # TODO\n    return []\n",
        "test": "assert     parse_music('o') == []",
        "num_ids": 2597
    },
    {
        "number": 18,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "    def how_many_times_helper(substring, string, offset: int) -> int:\n        num_occurences = 0\n        while True:\n            try:\n                index = string.index(substring, offset)\n            except ValueError:\n                return num_occurences\n            else:\n                offset += index + len(substring)\n                if index == len(string) - 1:\n                    return num_occurences\n    return how_many_times_helper(substring, string, 0)\n",
        "test": "assert     how_many_times(\"abc\", \"cbc\") == 0",
        "num_ids": 1106
    },
    {
        "number": 19,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "    numbers_list = numbers.split(' ')\n    numbers_list.sort()\n    return''.join(numbers_list)\n",
        "test": "assert     sort_numbers('0') == '0'",
        "num_ids": 1523
    },
    {
        "number": 20,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "    smaller, larger = None, None\n    for number in numbers:\n        if smaller is None or number < smaller:\n            smaller = number\n        if larger is None or number > larger:\n            larger = number\n    return (smaller, larger)\n",
        "test": "assert     find_closest_elements([6]) == (6.0, 6.0)",
        "num_ids": 1818
    },
    {
        "number": 21,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "    if len(numbers) == 0:\n        return []\n    maximum = max(numbers)\n    minimum = min(numbers)\n    if maximum > minimum:\n        factor = (1.0 / (maximum - minimum))\n        # print(factor)\n        # print(numbers)\n        rescaled_numbers = [factor * number for number in numbers]\n        # print(rescaled_numbers)\n        return rescaled_numbers\n    else:\n        factor = (1.0 / (minimum - maximum))\n        # print(factor)\n        # print(numbers)\n        rescaled_numbers = [factor * number for number in numbers]\n        # print(rescaled_numbers)\n        return rescaled_numbers\n",
        "test": "assert     rescale_to_unit(np.array([0, 2])) == [0.0, 1.0]",
        "num_ids": 2816
    },
    {
        "number": 22,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "    new_values = []\n    for value in values:\n        if isinstance(value, int):\n            new_values.append(value)\n        else:\n            new_values.append(None)\n    return new_values",
        "test": "assert     filter_integers([0,1,2,3,4,5]) == [0,1,2,3,4,5]",
        "num_ids": 1045
    },
    {
        "number": 23,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "    if string == '':\n        return 0\n    return len(string)\n",
        "test": "assert     strlen('') == 0",
        "num_ids": 468
    },
    {
        "number": 24,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 240,
        "answer": "    #n = int(input(\"enter a number: \"))\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return max(divisors)\n",
        "test": "assert     largest_divisor(3) == 3",
        "num_ids": 661
    },
    {
        "number": 25,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 240,
        "answer": "    factors = []\n    for i in range(1, n + 1):\n        for j in range(1, i):\n            if i % j == 0:\n                break\n        else:\n            factors.append(i)\n    return factors\n",
        "test": "assert     factorize(0) == []",
        "num_ids": 901
    },
    {
        "number": 26,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "    seen = set()\n    removed_numbers = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            removed_numbers.append(num)\n    return removed_numbers\n",
        "test": "assert     remove_duplicates([]) == []",
        "num_ids": 2438
    },
    {
        "number": 27,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "    return string.swapcase()\n",
        "test": "assert     flip_case(\"\") == \"\"",
        "num_ids": 880
    },
    {
        "number": 28,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "    if len(strings) == 0:\n        return \"\"\n    if len(strings) == 1:\n        return strings[0]\n    return strings[0] + concatenate(strings[1:])\n",
        "test": "assert     concatenate([\"one\", \"two\", \"three\"]) == \"onetwothree\"",
        "num_ids": 1014
    },
    {
        "number": 29,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "    filtered = []\n    for s in strings:\n        if s.startswith(prefix):\n            filtered.append(s)\n    return filtered\n",
        "test": "assert     filter_by_prefix([], \"\") == []",
        "num_ids": 2446
    },
    {
        "number": 30,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "    return [num for num in l if num>0]\n",
        "test": "assert     (get_positive([])) == []",
        "num_ids": 894
    },
    {
        "number": 31,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n < 2:\n        return False\n    i = 3\n    while i <= n / 2:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n",
        "test": "assert     is_prime(25) == False",
        "num_ids": 992
    },
    {
        "number": 32,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "    x = 0\n    for i in range(len(xs)):\n        if (i % 2 == 0):\n            x = xs[i]\n        else:\n            x = xs[i] * xs[i]\n    return x\n",
        "test": "assert find_zero([0, 0, 0, 0]) is 0",
        "num_ids": 1641
    },
    {
        "number": 33,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "    l.sort()\n    return l\n    \ndef sort_list(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by 3, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_list([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_list([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l.sort()\n    return l\n    \ndef run():\n    print(\"Your input should be in the format of a list of integers with one element each: \")\n    n = input()\n    l = []\n    for x in n.split(','):\n        l.append(int(x))\n    print(\"Your sorted list: \", sort_list(l))\n",
        "test": "assert     sort_third([]) == []",
        "num_ids": 2189
    },
    {
        "number": 34,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "    return sorted(set(l))\n",
        "test": "assert     unique([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 2879
    },
    {
        "number": 35,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "    if len(l) == 0:\n        return None\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return max(l)\n    return max(l)",
        "test": "assert     max_element([5, 5, 5, 5, 5]) == 5, \"max_element should return 5\"",
        "num_ids": 942
    },
    {
        "number": 36,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "    if n%5==0 or n%7==0 or n%11==0:\n        return (n//10)*2\n    elif n%5==1:\n        return n//10\n    elif n%11==1:\n        return n//10+1\n    else:\n        return n//10+3\n",
        "test": "assert     fizz_buzz(1) == 0",
        "num_ids": 1158
    },
    {
        "number": 37,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "    even = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even.append(l[i])\n        else:\n            even.append(l[i])\n    return even\n",
        "test": "assert     sort_even([]) == []",
        "num_ids": 1745
    },
    {
        "number": 38,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    return \"\".join(groups)\n",
        "test": "assert     encode_cyclic(\"AAAAAAAAAAAAAAAAAAAA\") == \"AAAAAAAAAAAAAAAAAAAA\"",
        "num_ids": 2881
    },
    {
        "number": 39,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "    if n == 1 or n == 2:\n        return 1\n    elif n > 1:\n        for i in range(2,n):\n            f = prime_fib(i)\n            if f == 1:\n                return i\n            elif f > 1:\n                return f\n",
        "test": "assert     prime_fib(1) == 1",
        "num_ids": 962
    },
    {
        "number": 40,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "    if len(l) < 3:\n        return False\n    total = l[0] + l[1] + l[2]\n    for i in range(3,len(l)):\n        if total == l[i]:\n            return False\n        total += l[i]\n    return True\n",
        "test": "assert         triples_sum_to_zero([2, 2]) == False",
        "num_ids": 1487
    },
    {
        "number": 41,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "    return int((n/2 - n/3)*4 + (2*n/3 - 2*n/3)**2)\n",
        "test": "assert     car_race_collision(0) == 0",
        "num_ids": 1992
    },
    {
        "number": 42,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "    for i, elem in enumerate(l):\n        l[i] = elem + 1\n    return l\n",
        "test": "assert     incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 922
    },
    {
        "number": 43,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "    if len(l)!= 2:\n        return False\n    \n    if l[0] + l[1] == 0:\n        return True\n    elif l[0] + l[1] < 0:\n        return False\n    else:\n        return pairs_sum_to_zero([l[0], l[1]])\n    \ndef main():\n    \"\"\"\n    >>> pairs_sum_to_zero([1, 2, 3, 5, -3, 5, -2, -4])\n    True\n    >>> pairs_sum_to_zero([1, 2, 3, 5, 7, 2, -4])\n    False\n    >>> pairs_sum_to_zero([2, 4, 5, 7, 3, 5])\n    False\n    >>> pairs_sum_to_zero([2, -4, -2, -3, 4, -5])\n    True\n    \"\"\"\n    print(pairs_sum_to_zero([1, 2, 3, 5, -3, 5, -2, -4]))\n    print(pairs_sum_to_zero([1, 2, 3, 5, 7, 2, -4]))\n    print(pairs_sum_to_zero([2, 4, 5, 7, 3, 5]))\n    \nmain()\n",
        "test": "assert     pairs_sum_to_zero([2, 3, 4, 6, 5, 7]) == False",
        "num_ids": 1592
    },
    {
        "number": 44,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "    y = str(x)\n    if x < 10:\n        y = str(x)\n    else:\n        y = y[1] + str(x % base)\n    return y\n",
        "test": "assert     change_base(0, 1) == '0'",
        "num_ids": 1037
    },
    {
        "number": 45,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    return 0.5*(a*a+h*h)\n",
        "test": "assert triangle_area(0, 0) == 0",
        "num_ids": 514
    },
    {
        "number": 46,
        "max_answer_num": 25,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(1) == 1",
        "num_ids": 1039
    },
    {
        "number": 47,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "    l = sorted(l)\n    m = len(l) // 2\n    return l[m]\n",
        "test": "assert     median([1, 2, 3]), \"Error: median values not passed\"",
        "num_ids": 1239
    },
    {
        "number": 48,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "    return text == text[::-1]\n",
        "test": "assert     is_palindrome('qwerty') == False",
        "num_ids": 1975
    },
    {
        "number": 49,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    elif n & 1:\n        return modp(n >> 1, p)\n    else:\n        return modp(n >> 1, p * 2)",
        "test": "assert     modp(1,2) == 1",
        "num_ids": 685
    },
    {
        "number": 50,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "    s = s.replace(\"a\", \"z\")\n    s = s.replace(\"z\", \"a\")\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert decode_shift(\"\") == \"\"",
        "num_ids": 1033
    },
    {
        "number": 51,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "    # if input is empty string, return empty string.\n    if not text:\n        return ''\n    # make string immutable and return it.\n    text = str(text)\n    return text.replace(\" \", \"\")\n    \n",
        "test": "assert     remove_vowels(\"\") == \"\"",
        "num_ids": 1916
    },
    {
        "number": 52,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "    return all(a < b for a, b in zip(l, range(len(l))))\n",
        "test": "assert     below_threshold(l=[5, 1, 2, 6, 7], t=4) is False",
        "num_ids": 1347
    },
    {
        "number": 53,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 220,
        "answer": "    return x+y\n",
        "test": "assert         add(1, 7) == 8",
        "num_ids": 1339
    },
    {
        "number": 54,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n    \n",
        "test": "assert     same_chars(\"Aa\", \"Aa\") == True",
        "num_ids": 1907
    },
    {
        "number": 55,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    return fib(n-1) + fib(n-2)\n",
        "test": "assert     fib(1) == 1",
        "num_ids": 797
    },
    {
        "number": 56,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "    correct = True\n    for char in brackets:\n        if char not in {'<','>','<','>'}:\n            correct = False\n    return correct\n",
        "test": "assert     correct_bracketing(\"[][][]\") == False",
        "num_ids": 1336
    },
    {
        "number": 57,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "    if l == sorted(l):\n        return True\n    for i in range(len(l)-1):\n        if l[i+1] < l[i]:\n            return False\n    return True\n",
        "test": "assert     monotonic([\"a\", \"a\", \"b\", \"b\", \"a\"]) == False",
        "num_ids": 1258
    },
    {
        "number": 58,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "    l1_set = set(l1)\n    l2_set = set(l2)\n    common = list(l1_set.intersection(l2_set))\n    return sorted(common)\n",
        "test": "assert     common([1, 2], [3, 4]) == []",
        "num_ids": 1326
    },
    {
        "number": 59,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "    for factor in range(2, n):\n        if n % factor == 0:\n            return factor\n    return n",
        "test": "assert     largest_prime_factor(4) == 2",
        "num_ids": 1025
    },
    {
        "number": 60,
        "max_answer_num": 23,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "    if n == 0:\n        return 0\n    else:\n        return n + sum_to_n(n-1)\n",
        "test": "assert         sum_to_n(1) == 1",
        "num_ids": 693
    },
    {
        "number": 61,
        "max_answer_num": 24,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "    def is_correct(s):\n        for c in s:\n            if c == \"(\":\n                return True\n        return False\n    \n    if len(brackets) == 0:\n        return True\n    \n    left = brackets[0]\n    for right in brackets[1:]:\n        if is_correct(left) and is_correct(right):\n            return True\n        left = right\n    return False\n",
        "test": "assert     correct_bracketing('(())')",
        "num_ids": 1212
    },
    {
        "number": 62,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "    if len(xs) == 1:\n        return [1]\n    elif len(xs) == 2:\n        return [xs[1]]\n    else:\n        return [x for x in xs[1:]] + [x**2 for x in xs[2:]]\n",
        "test": "assert     derivative([]) == []",
        "num_ids": 961
    },
    {
        "number": 63,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     (fibfib(0) == 0)",
        "num_ids": 1139
    },
    {
        "number": 64,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "    count = 0\n    for ch in s:\n        if ch in 'AEIOU':\n            count += 1\n    return count\n",
        "test": "assert     (\"e\" in \"hello world\") == True, \"Expected 'e' to be present\"",
        "num_ids": 1022
    },
    {
        "number": 65,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 380,
        "answer": "    num = list(str(x))\n    shift_digit = shift % len(num)\n    num = num[-shift_digit:] + num[:-shift_digit]\n    return \"\".join(num)\n",
        "test": "assert     circular_shift(5, 2) == \"5\"",
        "num_ids": 1346
    },
    {
        "number": 66,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "    return sum(ord(s[i]) - ord(s[i].upper()) for i in range(len(s)))\n",
        "test": "assert     digitSum(\"\") == 0",
        "num_ids": 578
    },
    {
        "number": 67,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 220,
        "answer": "    number_of_apples = s.count(\"a\")\n    number_of_oranges = s.count(\"o\")\n    number_of_mango = s.count(\"m\")\n    total_fruits = number_of_apples + number_of_oranges + number_of_mango\n    return total_fruits\n",
        "test": "assert     fruit_distribution('AAB',1) == 0, 'The number of apples are not 1'",
        "num_ids": 3754
    },
    {
        "number": 68,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 260,
        "answer": "    if not arr:\n        return []\n    min_val = arr[0]\n    index = 0\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_val:\n            min_val = arr[i]\n            index = i\n    return [arr[index], index]\n",
        "test": "assert     pluck([]) == []",
        "num_ids": 2257
    },
    {
        "number": 69,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "    counter = {}\n    for i in lst:\n        if i not in counter.keys():\n            counter[i] = 1\n        else:\n            counter[i] += 1\n    lst2 = sorted(counter.items(), key=lambda kv: kv[1])\n    for i in lst2:\n        if i[1] >= 1:\n            return i[0]\n    return -1\n",
        "test": "assert     search([7]) == 7",
        "num_ids": 877
    },
    {
        "number": 70,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "    \n    # Sort the integers in reverse order\n    lst.sort(reverse=True)\n    \n    # Sort the list in original order\n    return lst[::-1]\n",
        "test": "assert     strange_sort_list([]) == []",
        "num_ids": 1612
    },
    {
        "number": 71,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 230,
        "answer": "    if a < b + c or b < a + c or c < a + b:\n        return -1\n    return (a + b + c) / 2\n    \ndef is_triangle(a, b, c):\n    '''\n    Returns whether the given parameters form a valid triangle.\n    a,b,c are all integers.\n    '''\n    return triangle_area(a, b, c)!= -1\n    \ndef main():\n    '''\n    Example 1:\n    Input\n    [3, 4, 5]\n    Output\n    6\n    Explanation\n    The three sides are: 4 = x + 2\n    The area is 6.0 = x*4 + 2*x + 2\n    '''\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    print(triangle_area(a, b, c))\n",
        "test": "assert     triangle_area(0, 0, 0) == 0",
        "num_ids": 1234
    },
    {
        "number": 72,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "    count = 0\n    \n    for i in q:\n        if is_palindrome(i):\n            count += 1\n    \n    return count < w\n",
        "test": "assert     will_it_fly(q,w) == True",
        "num_ids": 1039
    },
    {
        "number": 73,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "    #Initialize\n    len_arr = len(arr)\n    m = len_arr//2\n    if len_arr%2 == 0:\n        return len_arr\n    else:\n        return m+1\n",
        "test": "assert smallest_change([1,2,3,4]) == 4, \"should be 4\"",
        "num_ids": 1228
    },
    {
        "number": 74,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "    return list(filter(lambda x: len(x) < len(lst2), lst1 + lst2))\n",
        "test": "assert ",
        "num_ids": 1043
    },
    {
        "number": 75,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_multiply_prime(15) == False",
        "num_ids": 1214
    },
    {
        "number": 76,
        "max_answer_num": 24,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return True\n    if n == 5:\n        return False\n    if n == 6:\n        return True\n    if n == 7:\n        return True\n    if n == 8:\n        return False\n    if n == 9:\n        return True\n    if n == 10:\n        return False\n    if n == 11:\n        return True\n    if n == 12:\n        return False\n    if n == 13:\n        return True\n    if n == 14:\n        return False\n    if n == 15:\n        return True\n    if n == 16:\n        return False\n    if n == 17:\n        return True\n    if n == 18:\n        return False\n    if n == 19:\n        return True\n    if n == 20:\n        return False\n    if n == 21:\n        return True\n    if n == 22:\n        return False\n    if n == 23:\n        return True\n    if n == 24:\n        return False\n    if n == 25:\n        return True\n    if n == 26:\n        return False\n    if n == 27:\n        return True\n    if n == 28:\n        return False\n    if n == 29:\n        return True\n    if n == 30:\n        return False\n    if n == 31:\n        return True\n    if n == 32:\n        return False\n    if n == 33:\n        return True\n    if n == 34:\n        return False\n    if n == 35:\n        return True\n    if n == 36:\n        return False\n    if n == 37:\n        return True\n    if n == 38:\n        return False\n    if n == 39:\n        return True\n    if n == 40:\n        return False\n    if n == 41:\n        return True\n    if n == 42:\n        return False\n    if n == 43:\n        return True\n    if n == 44:\n        return False\n    if n == 45:\n        return True\n    if n == 46:\n        return False\n    if n == 47:\n        return True\n    if n == 48:\n        return False\n    if n == 49:\n        return True\n    if n == 50:\n        return False\n    if n == 51:\n        return True\n    if n == 52:\n        return False\n    if n == 53:\n        return True\n    if n == 54:\n        return False\n    if n == 55:\n        return True\n    if n == 56:\n        return False\n    if n == 57:\n        return True\n    if n == 58:\n        return False\n    if n == 59:\n        return True\n    if n == 60:\n        return False\n    if n == 61:\n        return True\n    if n == 62:\n        return False\n    if n == 63:\n        return True\n    if n == 64:\n        return False\n    if n == 65:\n        return True\n    if n == 66:\n        return False\n    if n == 67:\n        return True\n    if n == 68:\n        return False\n    if n == 69:\n        return True\n    if n == 70:\n        return False\n    if n == 71:\n        return True\n    if n == 72:\n        return False\n    if n == 73:\n        return True\n    if n == 74:\n        return False\n    if n == 75:\n        return True\n    if n == 76:\n        return False\n    if n == 77:\n        return True\n    if n == 78:\n        return False\n    if n == 79:\n        return True\n    if n == 80:\n        return False\n    if n == 81:\n        return True\n    if n == 82:\n        return False\n    if n == 83:\n        return True\n    if n == 84:\n        return False\n    if n == 85:\n        return True\n    if n == 86:\n        return False\n    if n == 87:\n        return True\n    if n == 88:\n        return False\n    if n == 89:\n        return True\n    if n == 90:\n        return False\n    if n == 91:\n        return True\n    if n == 92:\n        return False\n",
        "test": "assert     is_simple_power(8, 8) == False",
        "num_ids": 2391
    },
    {
        "number": 77,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "    return isinstance(a, int) and (a >= 1 and a <= 180)\n",
        "test": "assert     iscube(0) == False",
        "num_ids": 3405
    },
    {
        "number": 78,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "    return len([x for x in str(num) if x.isnumeric()])\n",
        "test": "assert     hex_key(1) == 1, \"1 is not a prime number\"",
        "num_ids": 1951
    },
    {
        "number": 79,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "    if decimal == None:\n        return None\n    if decimal == 0:\n        return '0'\n    \n    binary = \"\"\n    while decimal!= 0:\n        digit = decimal % 2\n        binary = binary + str(digit)\n        decimal = decimal // 2\n    return binary\n",
        "test": "assert     decimal_to_binary(0) == '0'",
        "num_ids": 1100
    },
    {
        "number": 80,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "    s = list(s)\n    n = len(s)\n    for i in range(n - 3):\n        if s[i]!= s[i + 3] and s[i]!= s[i + 2] and s[i]!= s[i + 1] and s[i]!= s[i + 3]:\n            return False\n    return True\n",
        "test": "assert     is_happy(\"ababbba\") == False",
        "num_ids": 1220
    },
    {
        "number": 81,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    \n    gpa_table = {\n    'A+' : 4.0,\n    'A' : 3.7,\n    'A-': 3.3,\n    'B+': 3.0,\n    'B' : 2.7,\n    'B-': 2.3,\n    'C+' : 2.0,\n    'C' : 1.7,\n    'C-': 1.3,\n    'D+' : 1.0,\n    'D' : 0.7,\n    'D-': 0.0,\n    'E' : 0.0\n    }\n    \n    return [gpa_table.get(grade, grade) for grade in grades]\n",
        "test": "assert     (numerical_letter_grade([]) == [])",
        "num_ids": 1887
    },
    {
        "number": 82,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "    return len(string) % 2 == 0\n",
        "test": "assert     prime_length('hello') == False",
        "num_ids": 2908
    },
    {
        "number": 83,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "    count = 0\n    for i in range(1,n+1):\n        if i%2==0:\n            count +=1\n    return count\n",
        "test": "assert     starts_one_ends(0) == 0",
        "num_ids": 1066
    },
    {
        "number": 84,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "    b = str(bin(N)[2:])\n    return b\n",
        "test": "assert     solve(1) == '1'",
        "num_ids": 1925
    },
    {
        "number": 85,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 260,
        "answer": "    even = [x for x in lst if x % 2 == 0] + [x for x in lst if x % 2 == 1]\n    return even\n",
        "test": "assert     add([]) == []",
        "num_ids": 1005
    },
    {
        "number": 86,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 260,
        "answer": "    return''.join(sorted(s.replace(' ','').split()))\n",
        "test": "assert     anti_shuffle(\"\\n\") == \"\"",
        "num_ids": 2008
    },
    {
        "number": 87,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 240,
        "answer": "    lst.sort(key=lambda x: (x[0],x[1]))\n    return [(x[0], x[1]) for x in lst]\n",
        "test": "assert     get_row([[1, 2], [2, 3], [3, 4]], 1) == [(1, 2), (2, 3), (3, 4)]",
        "num_ids": 2264
    },
    {
        "number": 88,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "    return sorted(array)\n",
        "test": "assert     sort_array([]) == []",
        "num_ids": 1200
    },
    {
        "number": 89,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "    t = ''\n    for i in range(len(s)):\n        t += s[i]\n    return t\n",
        "test": "assert     encrypt(\"bad\") == \"bad\"",
        "num_ids": 2249
    },
    {
        "number": 90,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "    \n    if len(lst) == 1:\n        return lst[0]\n    if lst == []:\n        return None\n    if len(lst) == 2:\n        return lst[1]\n    if lst[1] > lst[0]:\n        return lst[1]\n    \n    if lst[0] < lst[1]:\n        return lst[0]\n    \n    smallest = lst[1]\n    for i in range(2, len(lst)):\n        if lst[i] < smallest:\n            smallest = lst[i]\n    return smallest\n",
        "test": "assert     next_smallest([1, 1, 1, 1, 1]) == 1",
        "num_ids": 999
    },
    {
        "number": 91,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "    S = S.lower()\n    S = S.replace(\".\",\"\")\n    S = S.replace(\"?\", \"\")\n    S = S.replace(\"!\", \"\")\n    S = S.split(\".\")\n    count = 0\n    for word in S:\n        if word.startswith(\"i\"):\n            count += 1\n    return count\n",
        "test": "assert     not is_bored('This is a boring message.')",
        "num_ids": 2193
    },
    {
        "number": 92,
        "max_answer_num": 21,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "    result = (x+y+z) == int(x+y+z)\n    return result\n",
        "test": "assert     any_int(2, 2, 2) == True",
        "num_ids": 1629
    },
    {
        "number": 93,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "    assert isinstance(message, str), \"Message must be a string.\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    swapped = [letter for letter in message if letter.lower() in alphabet]\n    message = \"\".join(swapped)\n    return message\n",
        "test": "assert         encode(\"\") == \"\", \"Empty message not allowed\"",
        "num_ids": 3419
    },
    {
        "number": 94,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "    \n    # Base case:\n    if len(lst) == 0:\n        return 0\n    \n    # Initialize a new list that will contain the largest prime value\n    # If the length of the list is 0,\n    # return the largest prime value.\n    if len(lst) == 1:\n        return lst[0]\n    \n    # Start at the first element of the list.\n    num = lst[0]\n    \n    # Iterate through the rest of the list.\n    for i in range(1, len(lst)):\n        # If the first element of the list is not a prime,\n        # return the largest prime value.\n        if lst[i] > num:\n            return num\n        \n        # Increment the value of the first element of the list.\n        num = num * lst[i]\n    \n    # If the loop finishes, return the sum of the last element of the list.\n    return num\n    \n",
        "test": "assert skjkasdkd,'skjkasdkd list is empty'",
        "num_ids": 1754
    },
    {
        "number": 95,
        "max_answer_num": 21,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "    for key in dict:\n        if isinstance(key, str) and key.isupper():\n            return True\n        if isinstance(key, str) and key.islower():\n            return True\n        if isinstance(key, str) and (key.startswith(\" \") or key.endswith(\" \")):\n            return True\n    return False\n",
        "test": "assert check_dict_case({\"a\": \"a\", \"B\": \"b\", \"c\": \"c\"}) == True",
        "num_ids": 1639
    },
    {
        "number": 96,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "    prime_numbers = []\n    for i in range(2,n):\n        if(is_prime(i)):\n            prime_numbers.append(i)\n    return prime_numbers\n",
        "test": "assert     count_up_to(-2) == []",
        "num_ids": 1242
    },
    {
        "number": 97,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 350,
        "answer": "    # TODO: implement the multiplication function\n    result = 0\n    for i in str(a):\n        result += int(i) * int(b)\n    return result\n",
        "test": "assert     multiply(1, 1) == 1",
        "num_ids": 912
    },
    {
        "number": 98,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "    vowels = ['A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n    return count\n",
        "test": "assert     count_upper(\"\") == 0",
        "num_ids": 3895
    },
    {
        "number": 99,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "    value = str(value)\n    i = 0\n    while i < len(value):\n        if value[i] == \".\":\n            break\n        i += 1\n    return int(value[:i])\n",
        "test": "assert     closest_integer(\"1\") == 1",
        "num_ids": 1196
    },
    {
        "number": 100,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 260,
        "answer": "    piles = [0, 1, 2]\n    while piles[n] < n:\n        piles.append(piles[n] + n)\n        n = n + 2\n    return piles[:n]\n",
        "test": "assert     make_a_pile(0) == []",
        "num_ids": 1901
    },
    {
        "number": 101,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "    words = []\n    for i in s.split(\",\"):\n        for j in i.split():\n            words.append(j.strip(\" \").strip(\"'\").strip('\"').strip(\",\"))\n    return words\n",
        "test": "assert     words_string(\"hello\") == [\"hello\"]",
        "num_ids": 907
    },
    {
        "number": 102,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "    num_num = x\n    while(x >= y):\n        x = num_num - 1\n        if(x >= y):\n            num_num = num_num - 1\n    return num_num\n",
        "test": "assert     choose_num(-1, -1) == -1",
        "num_ids": 1170
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "    # Time O(n+m)\n    # Space O(1)\n    # We compute the average of the integers from n through m. \n    # Then return the binary representation of this average.\n    # Time O(n+m)\n    # Space O(1)\n    if n < m:\n        return -1\n",
        "test": "assert     rounded_avg(2,3) == -1",
        "num_ids": 1099
    },
    {
        "number": 104,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 350,
        "answer": "    out = []\n    for i in x:\n        while i!= 0:\n            rem = i % 10\n            if rem % 2 == 0:\n                break\n            i = i // 10\n        if i > 0:\n            out.append(i)\n    return sorted(out)\n",
        "test": "assert     unique_digits([3, 3]) == []",
        "num_ids": 4842
    },
    {
        "number": 105,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 240,
        "answer": "    sort_arr = sorted(arr)\n    reverse_sort_arr = []\n    for i in range(len(arr)):\n        if arr[i] >= 0:\n            reverse_sort_arr.append(arr[i])\n        else:\n            reverse_sort_arr.append(arr[i+1])\n    return reverse_sort_arr\n",
        "test": "assert     by_length([9,8,7,6,5,4,3,2,1,0]) == [9,8,7,6,5,4,3,2,1,0]",
        "num_ids": 3885
    },
    {
        "number": 106,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "    factorial = []\n    for i in range(1,n+1):\n        factorial.append(1)\n        for j in range(1,i+1):\n            factorial[i-1] = factorial[i-1]*j\n    return factorial\ndef find_min(arr):\n    \"\"\" Finds the minimum number from arr.\n    Note: arr must have only positive numbers.\n    Example:\n    arr = [0, 2, 3, 4, 5]\n    find_min(arr) == 2\n    arr = [1, 3, 2, 1]\n    find_min(arr) == 3\n    arr = [5, 6, 9, 4, 2, 1]\n    find_min(arr) == 0\n    arr = [5, 2, 9, 4, 1, 3]\n    find_min(arr) == 5\n    arr = [1, 3, 2, 1]\n    find_min(arr) == 3\n    arr = [4, 2, 9, 3, 1, 3]\n    find_min(arr) == 2\n    \"\"\"\n    min = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i] < min:\n            min = arr[i]\n    return min\n",
        "test": "assert     f(1) == [1]",
        "num_ids": 1428
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 300,
        "answer": "    a, b = 0, n\n",
        "test": "assert     even_odd_palindrome(1) == (0, 1)",
        "num_ids": 1629
    },
    {
        "number": 108,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "    count = 0\n    for x in arr:\n        if x > 0:\n            count += 1\n    return count\n",
        "test": "assert     count_nums([0]) == 0",
        "num_ids": 1192
    },
    {
        "number": 109,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 270,
        "answer": "    #your code here\n    sorted_list=sorted(arr)\n    for i in range(1,len(arr)):\n        if sorted_list[i]<=sorted_list[i-1]:\n            return False\n    return True\n",
        "test": "assert     move_one_ball([1,2,3,4,5,6,7,8,9,0,0]) == False",
        "num_ids": 2569
    },
    {
        "number": 110,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 220,
        "answer": "    if len(lst1)!= len(lst2):\n        return \"NO\"\n    else:\n        for i in range(len(lst1)):\n            if lst1[i]%2 == lst2[i]%2:\n                lst2[i] = lst1[i]\n        return \"YES\"\n",
        "test": "assert     exchange([1, 2, 3, 4, 5], [3, 4, 5, 6, 7, 8]) == \"NO\", 'exchange([1, 2, 3, 4, 5], [3, 4, 5, 6, 7, 8]) == \"NO\"'",
        "num_ids": 1504
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 250,
        "answer": "    letters = set()\n    for char in test:\n        letters.add(char)\n    letters = sorted(list(letters), key=lambda char: test.count(char), reverse=True)\n    \n    return dict(zip(letters, list(letters)))\n",
        "test": "assert ",
        "num_ids": 1770
    },
    {
        "number": 112,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 360,
        "answer": "    s = s.lower()\n    c = c.lower()\n    string = set(s)\n    string = sorted(string)\n    deleted = string[::-1]\n    if string == deleted:\n        return (\"\".join(deleted),True)\n    else:\n        return (\"\".join(deleted),False)\n",
        "test": "assert reverse_delete(\"\", \"\") == (\"\", True)",
        "num_ids": 2542
    },
    {
        "number": 113,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    out = []\n    for i in lst:\n        out.append(len(i) % 2)\n    return out\n",
        "test": "assert     odd_count([]) == []",
        "num_ids": 910
    },
    {
        "number": 114,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 220,
        "answer": "    # Iterate from the end backwards, to get the minimum subarray\n    # we have to do in O(n)\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    for i in range(len(nums)):\n        left_num = nums[i]\n        left_sum = sum(nums[:i])\n        left_sum_idx = 0\n        for j in range(i, len(nums)):\n            right_num = nums[j]\n            right_sum = sum(nums[j:])\n            right_sum_idx = 0\n            for x in range(j, len(nums)):\n                # Add each value of the current subarray\n                left_sum_idx += min(nums[x-i:x+1])\n                right_sum_idx += min(nums[j-i:j+1])\n            \n            # Update the sum of the current subarray, when we're done adding\n            # values into it\n            left_sum = min(left_sum, right_sum_idx + left_sum)\n        # Update the minimum sum of the subarray\n        left_sum_idx += min(left_sum, right_sum)\n        if left_sum_idx < left_sum:\n            left_sum = left_sum_idx\n    return left_sum\n",
        "test": "assert     minSubArraySum([]) == 0",
        "num_ids": 1506
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "    def dfs(grid, i, j, bucket_capacity):\n        if i < 0 or i >= grid.shape[0] or j < 0 or j >= grid.shape[1] or grid[i][j] == 0:\n            return\n        if bucket_capacity > grid[i][j]:\n            bucket_capacity -= grid[i][j]\n            grid[i][j] = 0\n            dfs(grid, i+1, j, bucket_capacity)\n            dfs(grid, i-1, j, bucket_capacity)\n            dfs(grid, i, j+1, bucket_capacity)\n            dfs(grid, i, j-1, bucket_capacity)\n        \n    def max_fill(grid, capacity):\n        import math\n        \"\"\"\n        You are given a rectangular grid of wells. Each row represents a single well,\n        and each 1 in a row represents a single unit of water.\n        Each well has a corresponding bucket that can be used to extract water from it,\n        and all buckets have the same capacity.\n        Your task is to use the buckets to empty the wells.\n        \"\"\"\n        # BFS\n        result = 0\n        for i in range(grid.shape[0]):\n            for j in range(grid.shape[1]):\n                # \ubc29\ubb38\ud588\ub358 \uacf3\uc774 \uc544\ub2c8\uba74\n                if grid[i][j] == 0:\n                    # \ubc29\ubb38 \uac00\ub2a5\ud55c bucket\uc5d0 \uc18d\ud574\uc788\ub294 \ubc29\ubb38 \uc21c\uc11c \uc5c5\ub370\uc774\ud2b8\n                    bucket_capacity = capacity\n                    # \ubc29\ubb38\ud55c bucket\uc5d0 \uc18d\ud558\uc9c0 \uc54a\uc740 \ubc29\ubb38 \uc21c\uc11c\uc5c5\ub370\uc774\ud2b8\n                    for k in range(i, i+grid.shape[0]):\n                        for l in range(j, j+grid.shape[1]):\n                            if grid[k][l] == 0:\n                                grid[k][l] = 1\n                                result += 1\n                                # \uc0c1\ud0dc\ubcc0\ud654 \ud588\uc73c\uba74 \uadf8\uac00 \ubcc0\ud654\ub41c \uac00\uc7a5 \ud070 bucket\ub97c \uac00\uc9c0\uace0 \uc788\ub294 \ubc29\ubb38 \uc21c\uc11c \uc7ac\uadc0 \ud568\uc218\ub97c \uad6c\ud604\n                                if bucket_capacity >= capacity:\n                                    return\n                                # \ubc29\ubb38 \ud588\ub2e4\uba74 \ubc29\ubb38\uc21c\uc11c \uc5c5\ub370\uc774\ud2b8\n                                bucket_capacity += grid[k][l]\n                                grid[k][l] = 0\n                    # \ubc29\ubb38 \ud588\uc73c\uba74 bucket\uc758 capacity\uc5d0\uc11c \ubc29\ubb38\ud55c \ubc29\ubb38\uac00 \uc5c6\uc73c\uba74 \uadf8\uac00 \uc704\uce58\uc5d0 \uc18d\ud558\uc9c0 \uc54a\uc74c\n                    if bucket_capacity > 0:\n                        return\n        return result\n        \n    if not grid:\n        return 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 0:\n                grid[i][j] = 1\n                capacity = math.ceil(math.sqrt(grid[i][j])/2)\n                result = max_fill(grid, capacity)\n                grid[i][j] = 0\n                capacity = math.floor(math.sqrt(grid[i][j])/2)\n                result = max_fill(grid, capacity)\n                grid[i][j] = 0\n    return result\n",
        "test": "assert     max_fill([[1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
        "num_ids": 4511
    },
    {
        "number": 116,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[j] == 1:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr\n",
        "test": "assert     sort_array([0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]",
        "num_ids": 3212
    },
    {
        "number": 117,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "    if not s:\n        return []\n    words = [word for word in s.split(\" \") if word.lower() in [\"c\", \"e\", \"d\", \"h\", \"l\", \"o\", \"n\", \"r\", \"u\", \"v\", \"w\", \"x\", \"z\"]]\n    if len(words) == 0:\n        return []\n    return words[:n]\n",
        "test": "assert     select_words(\"\", 1) == [], \"Selection failed!\"",
        "num_ids": 3030
    },
    {
        "number": 118,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "    \n    word = word.lower()\n    \n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    \n    closest_vowel = ''\n    \n    for i in range(len(word) - 1):\n        if (word[i] in vowels) and (word[i + 1] in vowels):\n            continue\n        if (word[i] in vowels):\n            closest_vowel = closest_vowel + word[i]\n        elif (word[i + 1] in vowels):\n            closest_vowel = closest_vowel + word[i + 1]\n        else:\n            return closest_vowel\n    return closest_vowel\n",
        "test": "assert     get_closest_vowel('') == ''",
        "num_ids": 2157
    },
    {
        "number": 119,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 230,
        "answer": "    def is_balanced(s):\n        balanced = True\n        for c in s:\n            if c not in '()[]{}':\n                balanced = False\n                break\n        return balanced\n    \n    if len(lst) < 2:\n        return 'No'\n    \n    for i in range(len(lst) - 1):\n        if not is_balanced(lst[:i] + lst[i + 1:]):\n            return 'No'\n    \n    return 'Yes'\n",
        "test": "assert         match_parens('((()))'),'No'",
        "num_ids": 2066
    },
    {
        "number": 120,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "    # Your code here\n    max_arr = []\n    for num in arr:\n        if len(max_arr) < k:\n            max_arr.append(num)\n        else:\n            if num > max_arr[-1]:\n                max_arr.append(num)\n    return max_arr\n    pass\n",
        "test": "assert     maximum([1, 2, 3, 4, 5], 1) == [1, 2, 3, 4, 5]",
        "num_ids": 861
    },
    {
        "number": 121,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "    if lst==[]:\n        return 0\n    a=lst[0]\n    for i in range(len(lst)):\n        if i%2==0:\n            a=a+lst[i]\n    return a\n",
        "test": "assert     solution([]) == 0",
        "num_ids": 898
    },
    {
        "number": 122,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "    # define the prefix sums and the counters for the elements with at most 2 digits\n    prefix_sum = [0 for _ in arr]\n    counter = [0 for _ in arr]\n    # initialize the first element as the prefix sum\n    prefix_sum[0] = arr[0]\n    # track the number of elements with at most 2 digits in the first element\n    counter[0] = 1\n    # track the number of elements with at most 2 digits in the first element\n    for i in range(1, len(arr)):\n        # if the element is equal to the first element, it is a prefix sum, add the element to the prefix sum\n        # if it is equal to the first element, it is not a prefix sum, add it to the counter\n        # if it is not equal to the first element, it is not a prefix sum, add to the prefix sum\n        if arr[i] == arr[i-1]:\n            prefix_sum[i] += arr[i]\n        else:\n            prefix_sum[i] += min(prefix_sum[i-1], prefix_sum[i-2])\n            counter[i] += counter[i-1]\n    # return the sum of the prefix sums\n    return prefix_sum[-1] + (prefix_sum[-2] * 2 if counter[-2] > 1 else prefix_sum[-2])\n",
        "test": "assert     add_elements([1,2,3], 10) == 0",
        "num_ids": 1566
    },
    {
        "number": 123,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 220,
        "answer": "    return [i for i in range(1, n+1)] # Input must be greater than 0\n",
        "test": "assert     get_odd_collatz(0) == []",
        "num_ids": 2560
    },
    {
        "number": 124,
        "max_answer_num": 21,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "    if not date:\n        return False\n    if not date.isdigit():\n        return False\n    if int(date)<1 or int(date)>31:\n        return False\n    if int(date[:2])<=12:\n        return False\n    if int(date[2:])<=30:\n        return False\n    if date[:4]<=12:\n        return False\n    return True\n",
        "test": "assert     valid_date('18-02-20') == False",
        "num_ids": 3374
    },
    {
        "number": 125,
        "max_answer_num": 22,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "    return [word.strip().lower() for word in txt.split(\",\") if word.strip()!= \"\"]\n",
        "test": "assert     split_words('a') == ['a']",
        "num_ids": 2537
    },
    {
        "number": 126,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "    lst = sorted(lst)\n    return all(lst[i+1] - lst[i] == lst[i+1] - lst[i] for i in range(len(lst) - 1))\n",
        "test": "assert     is_sorted([]) == True",
        "num_ids": 1327
    },
    {
        "number": 127,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 230,
        "answer": "    return \"NO\"\n    \n",
        "test": "assert     intersection(1, 2), \"NO\"",
        "num_ids": 2829
    },
    {
        "number": 128,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "    l = []\n    # no return\n    return None\n",
        "test": "assert     prod_signs([]) == None",
        "num_ids": 1183
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 350,
        "answer": "    # idea: try to avoid the subset table, to solve using table\n    # (but not the sum table, not better solution)\n    # this is really trivial, but it works for now\n    \n    # sort the array of integers, and then reverse the result\n    # so that you start at the top of the array\n    # and find the lowest value, so that the index of this value\n    # is the minimum index (at which position of the index in the\n    # array is the minimum value).\n    # for each value, you have to travel to the next highest value\n    # by the minPath routine.\n    def minSubArray(start, end, arr):\n        if start == end:\n            return arr[start]\n        elif arr[start] < arr[end]:\n            return arr[start]\n        else:\n            return arr[end]\n    \n    # start with the smallest value of the array\n    # until we reach the end, then move to the next lowest value\n    # from that position\n    # we move this one position to the left, that is to the left\n    # of the array, so we update the array to the left of the\n    # lowest value.\n    # we move this one position to the right, that is to the right\n    # of the array, so we update the array to the right of the\n    # lowest value.\n    def minSubArrayToRightLeft(start, end, arr):\n        if start == end:\n            return arr[start]\n        elif arr[start] < arr[end]:\n            return arr[start]\n        else:\n            return arr[end]\n    \n    # we have two lists A and B, and we go down each cell\n    # and keep track of the min_indices in the left to right list\n    # A has a minimum index of 2 (because there are two values\n    # (1,2) and (1,3) for each of the three cells) and B has a\n    # minimum index of 3 (because there are three values\n    # (4,5) and (4,6) for each of the three cells)\n    # the first value at index 2 will be the minimum for the left side\n    # of the current cell (i.e. value 2)\n    # the first value at index 3 will be the minimum for the right side\n    # of the current cell (i.e. value 3)\n    # we return the minimum of these two lists,\n    # i.e. the first cell's value,\n    # and the last cell's value.\n    def minSubArray(grid, k):\n        row = len(grid)\n        col = len(grid[0])\n        res = [grid[0][0]]\n        for i in range(1, row):\n            res.append(grid[i][col - 1])\n        for j in range(1, col):\n            res.append(grid[row - 1][j])\n        return res\n",
        "test": "assert     minPath(grid, 2) == [1, 2, 3, 4, 5]",
        "num_ids": 2853
    },
    {
        "number": 130,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "    def trib(n):\n        a, b, c = 1, 1, 1\n        if n < 0:\n            return [0]\n        elif n == 0:\n            return [a]\n        elif n == 1:\n            return [a, b]\n        elif n == 2:\n            return [a, b, c]\n        else:\n            for i in range(3, n):\n                a, b, c = b, c, a + b + c\n            return [a, b, c]\n    if n == 0:\n        return []\n    else:\n        return trib(n)\n",
        "test": "assert     tri(4) == tri(4)",
        "num_ids": 1378
    },
    {
        "number": 131,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "    # TODO\n    return 0\n",
        "test": "assert digits(0) == 0",
        "num_ids": 1775
    },
    {
        "number": 132,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "    string = string.replace('[]', '[][')\n    string = string.replace('[]', '[]][')\n    string = string.replace('[]', '[]]]][')\n    string = string.replace(']', '[][')\n    string = string.replace('[', '[][')\n    return string.count('[[') >= 1\n",
        "test": "assert     is_nested(\"()\") == False",
        "num_ids": 1676
    },
    {
        "number": 133,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 240,
        "answer": "    from math import ceil\n    return sum([i**2 for i in lst])\n",
        "test": "assert     sum_squares([1,-2,3,-4]) == 30, \"Correct sum_squares\"",
        "num_ids": 1798
    },
    {
        "number": 134,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "    return txt[-1].isalpha() and len(txt) == 1\n",
        "test": "assert     check_if_last_char_is_a_letter('mike 1b') == False",
        "num_ids": 1301
    },
    {
        "number": 135,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "    # TODO: Your code here\n    return -1\n",
        "test": "assert     can_arrange([]) == -1",
        "num_ids": 1218
    },
    {
        "number": 136,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "    # Think about why the O(n) algorithm is better.\n    '''\n    if len(lst) == 0:\n        return None, None\n    elif len(lst) == 1:\n        return lst[0], lst[0]\n    else:\n        for i in range(len(lst)):\n            for j in range(i+1, len(lst)):\n                if lst[i] > lst[j] and lst[i] > 0:\n                    return lst[i], lst[j]\n    '''\n",
        "test": "assert     largest_smallest_integers([]) == None",
        "num_ids": 1435
    },
    {
        "number": 137,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "    if type(a) is str:\n        if type(b) is str:\n            return a\n        return b\n    if type(a) is float or type(a) is complex:\n        return b\n    if type(a) is int or type(a) is long:\n        return b\n    return None\n",
        "test": "assert     compare_one(1, 1) == 1",
        "num_ids": 2096
    },
    {
        "number": 138,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "    if n < 0:\n        return False\n    if n % 2 == 0 and n > 0:\n        return False\n    return True\n",
        "test": "assert     is_equal_to_sum_even(12) == False",
        "num_ids": 1097
    },
    {
        "number": 139,
        "max_answer_num": 31,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "    if n <= 0:\n        return 1\n    return n * special_factorial(n - 1)\n",
        "test": "assert     special_factorial(0) == 1",
        "num_ids": 1773
    },
    {
        "number": 140,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "    text_len = len(text)\n    space_count = 0\n    for i in range(text_len):\n        if space_count > 0:\n            if i == 0:\n                text = text[0:i+1] + '-' + text[i+1:]\n            else:\n                text = text[0:i+1] + text[i+1:]\n        else:\n            space_count += 1\n    return text\n    \n    \ndef is_list(arg):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        for x in arg:\n            if type(x) is list:\n                return False\n        return True\n    return False\n    \n    \ndef is_empty(arg):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        for x in arg:\n            if type(x) is list:\n                if len(x) == 0:\n                    return True\n        return False\n    return False\n    \n    \ndef get_nth_number(arg, n):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        if n == 0:\n            return len(arg)\n        if len(arg) > n:\n            return get_nth_number(arg[n:], n)\n        if len(arg) == n:\n            return arg[n]\n    return arg\n    \n    \ndef is_iterable(arg):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        for x in arg:\n            if type(x) is list:\n                if len(x) > 0:\n                    return True\n        return False\n    return False\n    \n    \ndef is_set(arg):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        for x in arg:\n            if type(x) is set:\n                return True\n        return False\n    return False\n    \n    \ndef is_sequence(arg):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        for x in arg:\n            if type(x) is list:\n                if len(x) > 0:\n                    return True\n        return False\n    return False\n    \n    \ndef get_first_value(arg, l):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        return arg[0]\n    return arg\n    \n    \ndef get_last_value(arg, l):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        return arg[-1]\n    return arg\n    \n    \ndef get_first_index(arg, l):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        return arg.index(l)\n    return arg\n    \n    \ndef get_last_index(arg, l):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        return arg.inde",
        "test": "assert     fix_spaces('') == '', 'Your code should be passing'",
        "num_ids": 4232
    },
    {
        "number": 141,
        "max_answer_num": 23,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "    file_name = file_name.strip()\n    if len(file_name) < 3:\n        return 'No'\n    if not file_name.replace('.','').isalpha():\n        return 'No'\n    if file_name.startswith('.'):\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name.count('.') > 0:\n        return 'No'\n    if file_name.endswith('.'):\n        return 'No'\n    \n    if file_name.startswith('txt'):\n        return 'Yes'\n    if file_name.startswith('exe'):\n        return 'Yes'\n    if file_name.startswith('dll'):\n        return 'Yes'\n    return 'No'\n",
        "test": "assert     file_name_check('1-Mall-1-2021-10-17.txt') == 'No'",
        "num_ids": 3808
    },
    {
        "number": 142,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "    sums = 0\n    for i in lst:\n        if i % 3 == 0 and i % 4!= 0:\n            sums += i ** 2\n    return sums\n",
        "test": "assert     sum_squares([]) == 0",
        "num_ids": 1425
    },
    {
        "number": 143,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "    return \" \".join(sentence.split(\" \"))\n",
        "test": "assert     words_in_sentence(\"\") == \"\"",
        "num_ids": 1128
    },
    {
        "number": 144,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "    n = float(n)\n    if n.is_integer():\n        if not n:\n            return False\n        if n == 1:\n            return True\n        elif x == '1/1':\n            return True\n        elif n % 2 == 0:\n            return simplify(x, str(int(n/2)))\n        else:\n            return False\n    else:\n        if n % 2 == 0:\n            return simplify(x, str(int(n/2)))\n        else:\n            return False\n",
        "test": "assert     simplify(\"7\", -1) == False",
        "num_ids": 1733
    },
    {
        "number": 145,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "    s = 0\n    for i in range(len(nums)):\n        s += nums[i]\n    if s % 10!= 0:\n        return sorted(nums)\n    else:\n        return sorted(nums, reverse=True)\n",
        "test": "assert         order_by_points([]) == []",
        "num_ids": 1662
    },
    {
        "number": 146,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "    # your code goes here\n    if nums == []:\n        return 0\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] >= 10 and nums[i] % 10 == 0 and nums[i] % 10!= nums[i-1]:\n            count += 1\n    return count\n",
        "test": "assert     specialFilter([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0",
        "num_ids": 2173
    },
    {
        "number": 147,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "    a = []\n    for i in range(1, n + 1):\n        a.append(i * i - i + 1)\n    return len(set(a))\n",
        "test": "assert     get_max_triples(0) == 0",
        "num_ids": 736
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 260,
        "answer": "    if planet1 == planet2:\n        return (\"Saturn\", \"Uranus\", \"Mars\", \"Jupiter\", \"Neptune\")\n    if planet1 == \"Jupiter\" and planet2 == \"Saturn\":\n        return (\"Uranus\", \"Mercury\", \"Mars\", \"Venus\", \"Earth\", \"Jupiter\")\n    if planet1 == \"Venus\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Mercury\", \"Jupiter\", \"Saturn\", \"Earth\", \"Jupiter\")\n    if planet1 == \"Mercury\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Jupiter\", \"Saturn\", \"Venus\", \"Earth\", \"Mercury\")\n    if planet1 == \"Jupiter\" and planet2 == \"Neptune\":\n        return (\"Mercury\", \"Venus\", \"Saturn\", \"Uranus\", \"Earth\", \"Jupiter\")\n    if planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Jupiter\", \"Venus\", \"Mercury\", \"Uranus\", \"Earth\", \"Saturn\")\n    if planet1 == \"Saturn\" and planet2 == \"Neptune\":\n        return (\"Mercury\", \"Uranus\", \"Venus\", \"Jupiter\", \"Earth\", \"Saturn\")\n    if planet1 == \"Uranus\" and planet2 == \"Mercury\":\n        return (\"Venus\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Earth\", \"Uranus\")\n    if planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Jupiter\", \"Venus\", \"Uranus\", \"Saturn\", \"Earth\", \"Jupiter\")\n    if planet1 == \"Uranus\" and planet2 == \"Venus\":\n        return (\"Saturn\", \"Jupiter\", \"Uranus\", \"Venus\", \"Earth\", \"Saturn\")\n    if planet1 == \"Neptune\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"Jupiter\", \"Venus\", \"Earth\", \"Uranus\")\n    if planet1 == \"Neptune\" and planet2 == \"Saturn\":\n        return (\"Venus\", \"Uranus\", \"Saturn\", \"Jupiter\", \"Earth\", \"Venus\")\n    if planet1 == \"Mercury\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"Jupiter\", \"Venus\", \"Earth\", \"Mercury\")\n    if planet1 == \"Mercury\" and planet2 == \"Saturn\":\n        return (\"Venus\", \"Uranus\", \"Saturn\", \"Uranus\", \"Earth\", \"Mercury\")\n    if planet1 == \"Mercury\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"Jupiter\", \"Venus\", \"Earth\", \"Mercury\")\n    if planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"Uranus\", \"Mercury\", \"Earth\", \"Jupiter\")\n    if planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Jupiter\", \"Venus\", \"Saturn\", \"Earth\", \"Uranus\")\n    if planet1 == \"Uranus\" and planet2 == \"Jupiter\":\n        return (\"Venus\", \"Uranus\", \"Saturn\", \"Jupiter\", \"Earth\", \"Uranus\")\n    if planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Venus\", \"Uranus\", \"Jupiter\", \"Earth\", \"Saturn\")\n    if planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Venus\", \"Saturn\", \"Jupiter\", \"Earth\", \"Uranus\")\n    if planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"Venus\", \"Uranus\", \"Earth\", \"Jupiter\")\n    if planet1 == \"Saturn\" and planet2 == \"Jupiter\":\n        return (\"Uranus\", \"Saturn\", \"Uranus\", \"Jupiter\", \"Earth\", \"Saturn\")\n    if planet1 == \"Uranus\" and planet2 == \"Saturn\":",
        "test": "assert     bf(planet1=\"Mercury\", planet2=\"Venus\") == (('Mercury', 'Venus'), ('Mercury', 'Venus', 'Mercury'), ('Mercury', 'Mercury', 'Mercury', 'Mercury', 'Mercury', 'Mercury', 'Mercury', 'Mercury', 'Mercury', 'Mercury'))",
        "num_ids": 5519
    },
    {
        "number": 149,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 270,
        "answer": "    return sorted(lst, key=len)\n",
        "test": "assert     sorted_list_sum([]) == []",
        "num_ids": 1687
    },
    {
        "number": 150,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "    \n    if n == 2:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        return x_or_y(n // 2, x, y)\n",
        "test": "assert         x_or_y(2, 2, 2) == 2",
        "num_ids": 2159
    },
    {
        "number": 151,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    if lst == []:\n        return 0\n    else:\n        return double_the_difference(lst[1:]) + double_the_difference(lst[:-1])\n        \ndef duplicate_the_list(lst):\n    '''\n    Given a list, return whether the elements in the list are duplicates.\n    \n    duplicate_the_list([1, 2, 3, 4, 5]) == True\n    duplicate_the_list([1, 2, 3, 5, 4]) == True\n    duplicate_the_list([1, 2, 4, 4, 5]) == False\n    duplicate_the_list([1, 1]) == True\n    duplicate_the_list([1, 1, 1, 1]) == True\n    duplicate_the_list([]) == False\n    duplicate_the_list([]) == False\n    '''\n    if lst == []:\n        return False\n    else:\n        return True\n        \ndef find_the_molecular_form(lst):\n    '''\n    Given a list of numbers, return the smallest positive integer (and possibly\n    negative) that cannot be expressed as a product of two other numbers.\n    \n    find_the_molecular_form([2, 3, 5, -1, 6, 10]) == 14\n    find_the_molecular_form([-2, 4, -4, -2, -4, -4, -2]) == -1\n    find_the_molecular_form([]) == -1\n    find_the_molecular_form([-3, -5]) == -3\n    find_the_molecular_form([3, 9, 8, 4, 5]) == 2\n    find_the_molecular_form([-2, -2, -2, -4]) == 6\n    find_the_molecular_form([-3, -5, -2, -4]) == 10\n    find_the_molecular_form([-4, 5, 4, 3, 3]) == 3\n    '''\n    if lst == []:\n        return 0\n    else:\n        new_lst = [x for x in lst if x >= 0]\n        new_lst.sort()\n        if new_lst[0]!= new_lst[-1]:\n            return new_lst[0]\n        else:\n            return find_the_molecular_form(new_lst[1:]) + find_the_molecular_form(new_lst[:-1])\n",
        "test": "assert     double_the_difference([]) == 0",
        "num_ids": 1349
    },
    {
        "number": 152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "    score = 0\n    for idx, guess_arr in enumerate(guess):\n        score += guess_arr[idx]\n    return score\n",
        "test": "assert     compare(game_scores,guess_scores) == 0, \"The function does not return the correct answers\"",
        "num_ids": 2383
    },
    {
        "number": 153,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "    \n    class_name_length = len(class_name)\n    extensions_length = len(extensions)\n    cap_count = 0\n    sm_count = 0\n    for extension in extensions:\n        if extension[:class_name_length] == extension[class_name_length:]:\n            sm_count += 1\n        if extension[class_name_length:class_name_length + class_name_length] == extension[class_name_length + class_name_length:]:\n            cap_count += 1\n    return '{}.{}'.format(class_name, extensions[cap_count - sm_count][class_name_length:extensions_length])\n    \ndef Substitutions(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    substitutions are to be used to replace the names of other extensions. \n    For example, if you are given \"Slices\" as the class and a list of extensions:\n    ['Carrot', 'Seashell', 'Tomato'], you should return: \n    \"Carrot.Seashell\"\n    \"\"\"\n    \n    class_name_length = len(class_name)\n    extensions_length = len(extensions)\n    substitutions = []\n    for extension in extensions:\n        if extension[:class_name_length] == extension[class_name_length:]:\n            substitutions.append(extension)\n        if extension[class_name_length:class_name_length + class_name_length] == extension[class_name_length + class_name_length:]:\n            substitutions.append(extension)\n    return '.'.join(substitutions)\n",
        "test": "assert         ('Slices' in Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))",
        "num_ids": 2457
    },
    {
        "number": 154,
        "max_answer_num": 23,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "    # return a in b or b in a\n    b = a.replace(a,b)\n    b = a.replace(b,a)\n    return a in b\n",
        "test": "assert     cycpattern_check(\"hello\",\"olleh\") == True",
        "num_ids": 1196
    },
    {
        "number": 155,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 320,
        "answer": "    evens = 0\n    odds = 0\n    for i in str(num):\n        if int(i)%2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    return (evens, odds)\n",
        "test": "assert     even_odd_count(10) == (1, 1)",
        "num_ids": 973
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 370,
        "answer": "    roman_table = [\n        \"\",\n        \"i\",\n        \"ii\",\n        \"iii\",\n        \"iv\",\n        \"v\",\n        \"vi\",\n        \"vii\",\n        \"viii\",\n        \"ix\",\n        \"x\",\n        \"xii\",\n        \"xiii\",\n        \"xix\",\n        \"xxxvi\",\n        \"xxxx\",\n        \"xxvi\"\n    ]\n    mini_table = [\n        \"\",\n        \"i\",\n        \"ii\",\n        \"iii\",\n        \"iv\",\n        \"v\",\n        \"vi\",\n        \"vii\",\n        \"viii\",\n        \"ix\",\n        \"x\",\n        \"xii\",\n        \"xiii\",\n        \"xix\",\n        \"xxxvi\",\n        \"xxxx\",\n        \"xxvi\"\n    ]\n    numeral_table = {\n        1: \"\",\n        3: \"cd\",\n        6: \"cdd\",\n        9: \"cde\",\n        12: \"cdf\",\n        15: \"cdei\",\n        18: \"cdfii\",\n        21: \"cdfiii\",\n        24: \"cdfix\",\n        29: \"cdfx\",\n        31: \"cdfxxvi\",\n        35: \"cdfxxvii\"\n    }\n",
        "test": "assert     int_to_mini_roman(500) == \"MMMCMXCIX\"",
        "num_ids": 4114
    },
    {
        "number": 157,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "    return ((a**2+b**2)**.5 == (c**2+a**2)**.5)\n",
        "test": "assert     right_angle_triangle(0, 0, 0) == True",
        "num_ids": 2136
    },
    {
        "number": 158,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 270,
        "answer": "    max_char = 0\n    max_word = \"\"\n    for word in words:\n        count = len(set(word))\n        if count > max_char:\n            max_word = word\n            max_char = count\n    return max_word",
        "test": "assert     find_max([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]) == \"\"",
        "num_ids": 2220
    },
    {
        "number": 159,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "    remaining -= need\n    \n    if remaining < 0:\n        remaining = 0\n    elif remaining == 0:\n        return [ number, remaining ]\n    elif need < need:\n        remaining = 0\n        need = 0\n    else:\n        remaining = 0\n        need = need\n        \n    # ensure that you have enough remaining carrots\n    if remaining < need:\n        remaining = 0\n    elif remaining == need:\n        remaining = 0\n        need = need - remaining\n        \n    return [ number, remaining ]",
        "test": "assert         eat(30, 10, 10), \"should return [30, 10] as result\"",
        "num_ids": 2758
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "    result = 0\n    operator_len = len(operator)\n    operand_len = len(operand)\n    operator_index = 0\n    operand_index = 0\n    while operator_index < operator_len and operand_index < operand_len:\n        result += operator[operator_index] * operand[operand_index]\n        operator_index += 1\n        operand_index += 1\n    return result\n",
        "test": "assert         do_algebra([0, 0, 0, 0, 0], [0, 0, 0, 0, 0]) == 0",
        "num_ids": 2974
    },
    {
        "number": 161,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "    if s == \"\":\n        return \"\"\n    if len(s) == 1:\n        return s\n    if s[0] == \"\":\n        return solve(s[1:])\n    \n    return solve(s[1:] + s[0].upper() + s[1:])\n",
        "test": "assert     solve(\"\") == \"\"",
        "num_ids": 1077
    },
    {
        "number": 162,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 250,
        "answer": "    import hashlib\n    if not text:\n        return None\n    h = hashlib.md5()\n    h.update(text.encode())\n    return h.hexdigest()\n",
        "test": "assert     string_to_md5('') == None",
        "num_ids": 1281
    },
    {
        "number": 163,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 380,
        "answer": "    # if a > b:\n    #     return []\n    #\n    # count = 1\n    # l = []\n    # while count <= b:\n    #     if count % 2 == 0:\n    #         l.append(count)\n    #         count += 1\n    #     else:\n    #         l.append(count)\n    #         count += 1\n    #         # l.append(count)\n    #         # count += 1\n    #\n    # return l\n    return sorted(list(range(a, b+1)))\n",
        "test": "assert     generate_integers(2, 0) == []",
        "num_ids": 1407
    }
]