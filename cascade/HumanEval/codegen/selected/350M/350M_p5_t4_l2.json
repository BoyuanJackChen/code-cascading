[
    {
        "number": 0,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if (abs(numbers[i] - numbers[j]) < threshold):\n                return True\n    return False\n",
        "test": "assert     has_close_elements([1,2,3,4,5,6], 2) == True",
        "num_ids": 710
    },
    {
        "number": 1,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    paren_stack = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            if len(paren_stack)!= 0:\n                paren_stack.pop()\n            else:\n                return []\n    return paren_stack\n    # raise NotImplementedError('Should not be here.')\n",
        "test": "assert     separate_paren_groups(\")\") == []",
        "num_ids": 810
    },
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    return round(number, -1)\n",
        "test": "assert     truncate_number(0) == 0",
        "num_ids": 360
    },
    {
        "number": 3,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "    return False\n",
        "test": "assert     below_zero([0, -1000, 0, 0, 0, 0, -2000]) == False",
        "num_ids": 456
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    num_sum = 0\n    for num in numbers:\n        num_sum += (num - mean(numbers)) ** 2\n    \n    return (num_sum ** 0.5) / (len(numbers) - 1)\n",
        "test": "assert     mean_absolute_deviation([]) == 0.0, \"The mean absolute deviation is correct\"",
        "num_ids": 1900
    },
    {
        "number": 5,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "    num_to_insert = int(len(numbers)/2)\n    return [numbers[i] if i <= num_to_insert else delimeter + numbers[i] for i in range(len(numbers))]\n",
        "test": "assert     intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], \"B'B\") == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'B', 'B']",
        "num_ids": 1212
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    opening_paren_level = -1\n    closing_paren_level = -1\n    parsed_string = []\n    for char in paren_string:\n        if char == \"(\":\n            opening_paren_level += 1\n            parsed_string.append(\"\")\n            parsed_string.append(char)\n        elif char == \")\":\n            closing_paren_level -= 1\n            if closing_paren_level == 0:\n                parsed_string.append(char)\n                break\n            parsed_string.append(char)\n            if closing_paren_level > 0:\n                parsed_string.append(\")\")\n        else:\n            raise Exception(\"String must be in this format\")\n    return parsed_string\n",
        "test": "assert     parse_nested_parens(parse_nested_parens(\"(((()()()()()()(())()()()()()()()()()()()()()()()()()())()()()()()()()()()()()()()()()()()()()()()()())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()",
        "num_ids": 2218
    },
    {
        "number": 7,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    return [x for x in strings if x.startswith(substring)]\n",
        "test": "assert filter_by_substring([ '\u043a\u043e\u0442', '\u043f\u0430\u0441\u0430', '\u0441\u0442\u0440\u043e\u0433\u0438\u0439', '\u0441\u043e\u043b\u043d\u0446\u0435', '\u0441\u0430\u043d\u043a\u0442-\u043f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433', '\u0430\u043f\u0442\u0435\u043a\u0430', '\u043f\u0430\u0445\u043e\u0434' ], '\u043f\u0430\u0441\u0430')",
        "num_ids": 808
    },
    {
        "number": 8,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    if len(numbers) == 1:\n        return (numbers[0], numbers[0])\n    else:\n        if numbers[0] > numbers[1]:\n            sum, product = sum_product(numbers[1:])\n        else:\n            sum, product = sum_product(numbers[:2])\n        for i in range(2, len(numbers)):\n            sum += numbers[i] * product\n            product *= numbers[i]\n        return (sum, product)",
        "test": "assert     sum_product([]) == (0,1)",
        "num_ids": 576
    },
    {
        "number": 9,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "    max_so_far = []\n    for num in numbers:\n        if len(max_so_far) == 0 or num > max_so_far[-1]:\n            max_so_far.append(num)\n        else:\n            max_so_far.append(max(num, max_so_far[-1]))\n    return max_so_far\n",
        "test": "assert     [1,2,3,4,5,6,7,8,9,10] == [1,2,3,4,5,6,7,8,9,10]",
        "num_ids": 799
    },
    {
        "number": 10,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    longest_prefix = ''\n    shortest_suffix = ''\n    for char in string:\n        if is_palindrome(char):\n            if char!= longest_prefix:\n                shortest_suffix = char\n            else:\n                longest_prefix = char\n        else:\n            longest_prefix = char\n    return shortest_suffix + longest_prefix\n",
        "test": "assert is_palindrome(\"abcdabcdcde\") == False",
        "num_ids": 717
    },
    {
        "number": 11,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    return ''.join([f'{ord(i)^ord(j)}' if i!=j else '0' for i,j in zip(a,b)])\n",
        "test": "assert     string_xor(\"00\", \"1\") == \"1\"",
        "num_ids": 546
    },
    {
        "number": 12,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "    if not strings:\n        return None\n    return strings[-1]\n",
        "test": "assert     longest([]) == None",
        "num_ids": 617
    },
    {
        "number": 13,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "    while a % b == 0:\n        a /= b\n    return a\n",
        "test": "assert     greatest_common_divisor(10, 20) == 10",
        "num_ids": 502
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    \n    all_prefixes = list(set(string))\n    all_prefixes.sort()\n    return all_prefixes\n",
        "test": "assert     all_prefixes(\"aa\") == [\"a\"]",
        "num_ids": 549
    },
    {
        "number": 15,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    return''.join([str(x) for x in range(0, n + 1)])\n",
        "test": "assert     string_sequence(0) == \"0\"",
        "num_ids": 1311
    },
    {
        "number": 16,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters('hIIII') == 2",
        "num_ids": 448
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "    # If the string is empty, return an empty list\n    if not music_string:\n        return []\n",
        "test": "assert     parse_music(\"o|.|.|o\") == [0, 4, 1, 1]",
        "num_ids": 835
    },
    {
        "number": 18,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "    result = 0\n    for x in range(0, len(string) - len(substring) + 1):\n        substring_index = x\n        found = False\n        while not found:\n            if substring[substring_index:substring_index + len(substring)] == substring:\n                found = True\n            else:\n                substring_index += 1\n        if found:\n            result += 1\n    return result\n",
        "test": "assert     how_many_times(\"A\", \"b\") == 1",
        "num_ids": 512
    },
    {
        "number": 19,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "    numbers = numbers.split(\" \")\n    numbers.sort(reverse=True)\n    return \" \".join(numbers)\n",
        "test": "assert     sort_numbers('one') == 'one'",
        "num_ids": 1649
    },
    {
        "number": 20,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    min_index = numbers[0]\n    min_value = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] < min_value:\n            min_value = numbers[i]\n            min_index = i\n    return min_index, min_value\n",
        "test": "assert     find_closest_elements([0, 0, 0]) == (0, 0)",
        "num_ids": 736
    },
    {
        "number": 21,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "    return [n / max(numbers) for n in numbers]\n",
        "test": "assert rescale_to_unit([]) == []",
        "num_ids": 1321
    },
    {
        "number": 22,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n        elif isinstance(value, str):\n            result.append(int(value))\n        elif value is None:\n            result.append(0)\n        elif isinstance(value, dict):\n            result.append(dict(value))\n        else:\n            result.append(value)\n    return result\n",
        "test": "assert     filter_integers([1,2,3,4]) == [1,2,3,4]",
        "num_ids": 1767
    },
    {
        "number": 23,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"A\") == 1",
        "num_ids": 202
    },
    {
        "number": 24,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    divisors = [i for i in range(1, int(n**0.5) + 1, 1) if n % i == 0]\n    return max(divisors) if divisors else 0\n",
        "test": "assert largest_divisor(1) == 1",
        "num_ids": 529
    },
    {
        "number": 25,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    prime = []\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            prime.append(i)\n            if n // i == i:\n                prime.append(n//i)\n            else:\n                prime.append(n//i)\n                prime.append(n//i)\n    prime.append(n)\n    return prime\n",
        "test": "assert     factorize(1) == [1]",
        "num_ids": 575
    },
    {
        "number": 26,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    removed = []\n    for num in numbers:\n        if removed.count(num) < 1:\n            removed.append(num)\n    return removed\n",
        "test": "assert     remove_duplicates([]) == []",
        "num_ids": 1294
    },
    {
        "number": 27,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    return string.lower() + string.upper()",
        "test": "assert     flip_case('23/8/2012')    == '23/8/2012'",
        "num_ids": 537
    },
    {
        "number": 28,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate([\"a\",\"b\"]) == \"ab\"",
        "num_ids": 458
    },
    {
        "number": 29,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    return [s for s in strings if prefix in s]\n",
        "test": "assert     filter_by_prefix([\"a\",\"a\",\"b\",\"b\"], \"c\") == []",
        "num_ids": 643
    },
    {
        "number": 30,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    return [i for i in l if i > 0]\n",
        "test": "assert     (get_positive([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "num_ids": 545
    },
    {
        "number": 31,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(13) == True",
        "num_ids": 502
    },
    {
        "number": 32,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "    if len(xs) == 1:\n        return xs[0]\n    elif len(xs) % 2 == 0:\n        return find_zero(xs[:-1]) + xs[-1] * xs[-2]\n    elif len(xs) % 2 == 1:\n        return (xs[0] + xs[1]) * xs[-1]\n    else:\n        raise Exception(\"cannot find zero.\")\n",
        "test": "assert     find_zero(xs = [0]) == 0",
        "num_ids": 749
    },
    {
        "number": 33,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "    tmp_l = []\n    for i in range(len(l)):\n        if l[i] % 3!= 0:\n            tmp_l.append(l[i])\n    tmp_l.sort()\n    tmp_l.reverse()\n    return tmp_l\n",
        "test": "assert     sort_third([6, 8, 10, 11, 13, 16, 15, 14, 17]) == [6, 8, 10, 11, 13, 16, 14, 17, 15, 17, 6, 7]",
        "num_ids": 794
    },
    {
        "number": 34,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "    i = 0\n    res = []\n    while i < len(l):\n        if l[i] not in res:\n            res.append(l[i])\n        i += 1\n    return res\n",
        "test": "assert     not unique([])",
        "num_ids": 701
    },
    {
        "number": 35,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    max_e = l[0]\n    for e in l:\n        if e > max_e:\n            max_e = e\n    return max_e\n",
        "test": "assert         max_element([3, 6, -2]) == 6",
        "num_ids": 409
    },
    {
        "number": 36,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 15 == 0 and n % 5 == 0 and n % 3 == 0:\n        return 5\n    elif n % 15 == 0 and n % 5 == 0:\n        return 4\n    elif n % 15 == 0 and n % 5 == 0:\n        return 3\n    elif n % 15 == 0:\n        return 2\n    else:\n        return 1\n",
        "test": "assert     fizz_buzz(1) == 1",
        "num_ids": 1462
    },
    {
        "number": 37,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    even_ind = []\n    odd_ind = []\n    \n    for i in l:\n        if i % 2 == 0:\n            even_ind.append(i)\n        else:\n            odd_ind.append(i)\n            \n    even_ind.sort()\n    odd_ind.sort()\n    \n    return even_ind + odd_ind\n",
        "test": "assert     sort_even([]) == []",
        "num_ids": 865
    },
    {
        "number": 38,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    # get cyclic elements of string s.\n    group = encode_cyclic(s)\n    # split cyclic elements into groups.\n    groups = [group[(3 * i):min((3 * i + 3), len(group))] for i in range((len(group) + 2) // 3)]\n    # join groups of three characters.\n    return \"\".join(groups)\n",
        "test": "assert decode_cyclic(\"ACG\") == \"AGG\"",
        "num_ids": 710
    },
    {
        "number": 39,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "    if n < 2:\n        return 1\n    if n == 2:\n        return 2\n    return prime_fib(n-1) + prime_fib(n-2)\n",
        "test": "assert prime_fib(8) == 11",
        "num_ids": 603
    },
    {
        "number": 40,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    # See http://en.wikipedia.org/wiki/Triple_sum\n    for i in l:\n        # We do this to handle negative numbers\n        # because this function won't be able to handle 0 or -0\n        if i < 0:\n            # We don't want to include 0 in our comparison\n            # This is to prevent exceptions from being thrown\n            return False\n    # We then add 1 to the end of the list, we'll see if it's a duplicate\n    # This is the idea from http://en.wikipedia.org/wiki/Triple_sum#With_Python\n    s = 0\n    for i in l:\n        s = s + i\n    # Check to see if the list is a tripe sum\n    if s == 0:\n        return True\n    return False\n",
        "test": "assert     triples_sum_to_zero([1, 2, 3, 4]) == False",
        "num_ids": 723
    },
    {
        "number": 41,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    n_col_cars_left = n // 2\n    n_col_cars_right = n - n_col_cars_left\n    return (n_col_cars_left + n_col_cars_right) % n\n",
        "test": "assert car_race_collision(1) == 0",
        "num_ids": 645
    },
    {
        "number": 42,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "    incr = []\n    for i in range(len(l)):\n        if l[i]!= 0:\n            incr.append(l[i] + 1)\n        else:\n            incr.append(l[i])\n    return incr\n",
        "test": "assert     incr_list([1, 2, 3, 4, 5]) == [2, 3, 4, 5, 6]",
        "num_ids": 491
    },
    {
        "number": 43,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "    # Write your code here.\n    if len(l) < 2:\n        return False\n    if len(l) == 2 and l[0] + l[1] == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     pairs_sum_to_zero([1,1,1,1,1]) == False",
        "num_ids": 686
    },
    {
        "number": 44,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    return bin(x)[2:]\n",
        "test": "assert change_base(0, 2) == '0'",
        "num_ids": 446
    },
    {
        "number": 45,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    return 0.5*a*h",
        "test": "assert         triangle_area(0, 0) == 0",
        "num_ids": 1390
    },
    {
        "number": 46,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fib4(n-1)+fib4(n-2)\n",
        "test": "assert     fib4(0) == 0",
        "num_ids": 325
    },
    {
        "number": 47,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "    # TODO: complete this function\n    # find the median of all elements in the list\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n == 0:\n        return sorted_list[0]\n    elif n == 1:\n        return sorted_list[0]\n    elif n % 2 == 0:\n        return (sorted_list[int((n+1)/2)-1]+sorted_list[int((n+1)/2)])/2\n    else:\n        return sorted_list[int(n/2)]\n",
        "test": "assert     median([-1, 0, 1, 2]) == 0.5",
        "num_ids": 492
    },
    {
        "number": 48,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    # remove trailing whitespace\n    text = text.strip()\n    # remove leading whitespace\n    text = text.lstrip()\n    # make sure it's not empty\n    if text.strip() == \"\":\n        return True\n    # split into a list of words\n    words = text.split()\n    # check each word\n    for i in range(len(words) // 2):\n        if words[i]!= words[-i-1]:\n            return False\n    return True\n",
        "test": "assert     is_palindrome(\"racecar\") == True",
        "num_ids": 472
    },
    {
        "number": 49,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "    assert n >= 0\n    assert p >= 0\n    d = 2**n\n    modulo = d % p\n    return modulo\n",
        "test": "assert     modp(3, 1) == 0",
        "num_ids": 1331
    },
    {
        "number": 50,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
        "test": "assert     encode_shift('') == ''",
        "num_ids": 547
    },
    {
        "number": 51,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "    vowels = 'aeiouAEIOU'\n    new_text = ''\n    text_length = len(text)\n    for i in range(text_length):\n        if text[i] not in vowels:\n            new_text += text[i]\n    return new_text\n",
        "test": "assert     remove_vowels(\"how are you doing\") == \"howareyoutdoing\"",
        "num_ids": 1624
    },
    {
        "number": 52,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([], -1)",
        "num_ids": 448
    },
    {
        "number": 53,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3",
        "num_ids": 161
    },
    {
        "number": 54,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    return len(s0) == len(s1) and (s0.lower() == s1.lower() or len(s1) > len(s0))\n",
        "test": "assert     same_chars(\"\", \"\") == True",
        "num_ids": 1756
    },
    {
        "number": 55,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n",
        "test": "assert     fib(1) == 1",
        "num_ids": 397
    },
    {
        "number": 56,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    for c in brackets:\n        if c not in [\"<\", \">\", \"<>\", \",\", \":\", \".\"]:\n            return False\n    return True\n",
        "test": "assert     correct_bracketing(\"<>\")",
        "num_ids": 527
    },
    {
        "number": 57,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "    l.sort()\n    for i, x in enumerate(l[1:]):\n        if x < l[i]:\n            return False\n    return True\n",
        "test": "assert     monotonic([-1, -2, -3, -4]), \"List should be a monotonic sequence.\"",
        "num_ids": 692
    },
    {
        "number": 58,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    l1, l2 = sorted(l1), sorted(l2)\n    if len(l1) > len(l2):\n        return l2\n    elif len(l1) < len(l2):\n        return l1\n    \n    return l2 if l1 == l2 else l1\n    \ndef set_concat(l):\n    \"\"\"Concatenate all elements of list l into one string.\"\"\"\n    return \"\".join(l)\n    \ndef remove_palindromes(l):\n    \"\"\"Remove all palindromes.\"\"\"\n    return \"\".join([element[::-1] for element in l])\n    \ndef lcs(a: list, b: list):\n    \"\"\"Compute length of longest common substring in a and b.\"\"\"\n    m, n = len(a), len(b)\n    if m < n:\n        a, b = b, a\n        m, n = n, m\n    dp = [[0 for x in range(n + 1)] for x in range(m + 1)]\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if a[i - 1] == b[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]\n    \nif __name__ == \"__main__\":\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASSED. GOOD LUCK NEXT TIME! ***\\n\")",
        "test": "assert     common([], []) == []",
        "num_ids": 1182
    },
    {
        "number": 59,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            n /= i\n        else:\n            i += 1\n    return n\n",
        "test": "assert     largest_prime_factor(2) == 2",
        "num_ids": 321
    },
    {
        "number": 60,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    return sum(range(1, n + 1))\n",
        "test": "assert     sum_to_n(1) == 1",
        "num_ids": 390
    },
    {
        "number": 61,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "    return any(bracket in brackets for bracket in brackets)\n",
        "test": "assert     correct_bracketing(\"()\")",
        "num_ids": 1372
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "    # TODO: Implement this function.\n    pass\n",
        "test": "assert         derivative(5, False) == '5 * x^4 + 20 x^3'",
        "num_ids": 669
    },
    {
        "number": 63,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    a,b=0,1\n    for i in range(2,n+1):\n        a,b=b,a+b\n    return a",
        "test": "assert     fibfib(2) == 1",
        "num_ids": 378
    },
    {
        "number": 64,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "    # your code here\n    return len(set(s))\n",
        "test": "assert     vowels_count('aaaaaa') == 1",
        "num_ids": 1507
    },
    {
        "number": 65,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "    return str(x) + shift * '0'\n",
        "test": "assert     circular_shift(56342330, 0) == '56342330'",
        "num_ids": 564
    },
    {
        "number": 66,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    return sum(ord(c) for c in s if c.isupper())",
        "test": "assert     digitSum(\"\") == 0",
        "num_ids": 412
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "    d={\"apple\":0, \"orange\":0, \"mango\":0}\n    #d={\"apple\":0, \"orange\":0, \"mango\":0}\n    #print(d)\n    i=0\n    j=0\n    for char in s:\n        if char==\"s\":\n            i+=1\n        elif char==\"a\":\n            j+=1\n        else:\n            d[\"apple\"]=d[\"apple\"]+j\n            d[\"orange\"]=d[\"orange\"]+i\n            d[\"mango\"]=d[\"mango\"]+1\n    #print(d)\n    return d[\"apple\"],d[\"orange\"],d[\"mango\"]\n",
        "test": "assert ",
        "num_ids": 1913
    },
    {
        "number": 68,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    min_even_val, idx = float('inf'), float('inf')\n    \n    if arr == []: return [min_even_val, idx]\n    \n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] < min_even_val:\n                min_even_val = arr[i]\n                idx = i\n    \n    return [min_even_val, idx]\n",
        "test": "assert     pluck([1]),1",
        "num_ids": 796
    },
    {
        "number": 69,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "    \n    max = -1\n    for i in lst:\n        if i > max and i > 0:\n            max = i\n        elif i > max:\n            max = i\n    return max\n",
        "test": "assert     search([5, 8, 12]) == 12 ",
        "num_ids": 548
    },
    {
        "number": 70,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "    result = []\n    minimum = min(lst)\n    maximum = max(lst)\n    while minimum <= maximum:\n        result.append(minimum)\n        minimum += 1\n    while len(lst) > 1:\n        result.append(lst[-1])\n        lst.pop()\n    result.reverse()\n    return result\n",
        "test": "assert     strange_sort_list([-4]) == [-4], \"test_3 failed\"",
        "num_ids": 2113
    },
    {
        "number": 71,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "    s = (b*c) - (a*c)\n    if s >= 0 and s <= b:\n        return s\n    else:\n        return -1\n",
        "test": "assert     triangle_area(2,5,7) == -1",
        "num_ids": 501
    },
    {
        "number": 72,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "    def get_weight(q):\n        total_weight = 0\n        for el in q:\n            total_weight += el\n        return total_weight\n    \n    # check if the sum of q's elements is less than or equal to max possible weight\n    def is_balanced(q):\n        total_weight = get_weight(q)\n        if get_weight(q) >= max(w): return False\n        for el in q:\n            if total_weight - el < max(w): return False\n        return True\n",
        "test": "assert     will_it_fly(10,14) == False",
        "num_ids": 822
    },
    {
        "number": 73,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "    if len(arr) < 2: return len(arr)\n    first = arr[0]\n    last = arr[-1]\n    min_change = min(first, last) - 1\n    idx = -1\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            idx = i\n            break\n    if idx == -1: return len(arr) - 1\n    idx_next = idx + 1\n    if idx_next < len(arr):\n        idx_next += 1\n        while idx_next < len(arr):\n            if arr[idx_next]!= arr[idx]:\n                min_change += 1\n                break\n            idx_next += 1\n    return min_change\n",
        "test": "assert     smallest_change([]) == 0",
        "num_ids": 745
    },
    {
        "number": 74,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "    return [x for x in lst1 if len(x) < len(lst2)]\n",
        "test": "assert     total_match(lst1=['a','b','c'], lst2=['a','b','c']) == ['a','b','c']",
        "num_ids": 891
    },
    {
        "number": 75,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    if a <= 100:\n        return True\n    if a % 2 == 0:\n        return False\n    for i in range(3, int(a**0.5) + 1, 2):\n        if a % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_multiply_prime(1) == True",
        "num_ids": 1582
    },
    {
        "number": 76,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    if n<1:\n        return False\n    elif n==1:\n        return True\n    elif n==2:\n        return (x==n)\n    elif n==3:\n        return (x==n**2)\n    elif n==4:\n        return (x==n**3)\n    else:\n        return (x==n**4)",
        "test": "assert     is_simple_power(5, 9) == False",
        "num_ids": 636
    },
    {
        "number": 77,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    if type(a) == int:\n        if a >= 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     iscube(5) is True",
        "num_ids": 1274
    },
    {
        "number": 78,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    count = 0\n    for i in str(num):\n        if i.isalpha():\n            count += 1\n    return count\n",
        "test": "assert     hex_key(24) == 0",
        "num_ids": 2122
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "    # base = 2\n    # return \"db\" + str(bin(decimal))[2:]\n    # base = 4\n    return str(bin(decimal))[2:]\n",
        "test": "assert ",
        "num_ids": 505
    },
    {
        "number": 80,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "    pattern = 'abcdefghijklmnopqrstuvwxyz'\n    if len(s) < 3 or len(pattern)!= len(s):\n        return False\n",
        "test": "assert     is_happy('') == 0",
        "num_ids": 515
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "    # A list of GPA grades\n    gpa_list = []\n    # For each row in the given list of GPA grades\n    for row in grades:\n        # For each column in the row\n        for column in row:\n            # If the value is non zero, the element is a GPA grade\n            if column!= 0:\n                # Add the value to the list of grades\n                gpa_list.append(column)\n    # Return the list of GPA grades\n    return gpa_list\n",
        "test": "assert     numerical_letter_grade([4.0,3.7,3.3,3.0,2.7,2.3,2.0,1.7,1.3,1.0,0.7,0.0,0.0]) == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]",
        "num_ids": 1695
    },
    {
        "number": 82,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "    is_prime = True\n    for i in range(2, len(string)):\n        if string[i] == 'a' or string[i] == 'e' or string[i] == 'i' or string[i] == 'o' or string[i] == 'u':\n            is_prime = False\n        if not is_prime:\n            break\n    return is_prime",
        "test": "assert     prime_length('hello') == False",
        "num_ids": 1359
    },
    {
        "number": 83,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    count = 0\n    for digit in str(n):\n        if digit == '1':\n            count += 1\n        else:\n            break\n    return count\n",
        "test": "assert     starts_one_ends(0) == 0",
        "num_ids": 455
    },
    {
        "number": 84,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "    if N <= 1:\n        return N\n    return sum([int(i) for i in str(N)])",
        "test": "assert     solve(0) == 0",
        "num_ids": 1320
    },
    {
        "number": 85,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    evens = []\n    odds = []\n    while lst:\n        if lst[0] % 2 == 0:\n            evens.append(lst[0])\n        else:\n            odds.append(lst[0])\n        del lst[0]\n    if len(odds) % 2 == 1:\n        evens += odds[::2]\n    return evens + odds\n",
        "test": "assert     add([]) == []",
        "num_ids": 768
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "    # You will need to replace all the word with a new word.\n    # The new word will be in the end of the string.\n    new_str = ''\n    for word in s.split():\n        new_str += word[::-1] +''\n    return new_str[:-1]\n    ",
        "test": "assert     anti_shuffle('') == ''",
        "num_ids": 1655
    },
    {
        "number": 87,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "    row_set = set()\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            row_set.add(lst[i][j])\n    row_set.sort()\n    return [(row_set.index(x) + 1, x) for x in range(len(lst[0]) + 1)]\n",
        "test": "assert     [0, 1, 2, 3, 4], \"Error - get_row, got: [0, 1, 2, 3, 4]\"",
        "num_ids": 1741
    },
    {
        "number": 88,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    sorted_array = []\n    sum = 0\n    for num in array:\n        sum += num\n    # print(f\"sum of array: {sum}\")\n    \n    for num in array:\n        if sum % 2 == 1:\n            sorted_array.append(num)\n        else:\n            # print(f\"{num} is odd\")\n            sorted_array.append(num)\n        sum //= 2\n    \n    return sorted_array\n",
        "test": "assert     sort_array([0, 1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4, 5], \"Sort array: should be [0, 1, 2, 3, 4, 5]\"",
        "num_ids": 929
    },
    {
        "number": 89,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "    return ''.join(s[i % len(s)] for i in range(len(s)))\n",
        "test": "assert encrypt(\"\") == \"\"",
        "num_ids": 732
    },
    {
        "number": 90,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    if lst == None:\n        return None\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return lst[i-1]\n",
        "test": "assert     next_smallest([]) is None",
        "num_ids": 419
    },
    {
        "number": 91,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    \n    return len(S.split('.')) <= 1\n",
        "test": "assert is_bored('a') == 1, \"I should be True.\"",
        "num_ids": 538
    },
    {
        "number": 92,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "    # return x + y == z or x * y == z\n    if type(x) == int and type(y) == int and type(z) == int:\n        if x == y and y == z:\n            return True\n        else:\n            return False\n",
        "test": "assert     any_int(2, 2, 2) == True, 'any_int did not return true'",
        "num_ids": 645
    },
    {
        "number": 93,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "    message = message.lower()\n    encoding = ''\n    for i in range(len(message)):\n        if message[i] in VOWELS:\n            if message[i] not in message.replace(message[i],message[i].upper()):\n                encoding = encoding + message[i].upper()\n            else:\n                encoding = encoding + message[i]\n        else:\n            encoding = encoding + message[i]\n    return encoding\n",
        "test": "assert     encode(\"\") == \"\", \"empty string\"",
        "num_ids": 3797
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    lst = list(lst)\n    lst.sort()\n    # for i in range(len(lst)):\n    #     lst[i] = lst[i]**2\n    # lst.sort()\n    lst_product = [lst[i] for i in range(len(lst)) if lst[i] > 0]\n    # print(lst_product)\n    return sum(lst_product)\n",
        "test": "assert     skjkasdkd([]) == 0",
        "num_ids": 461
    },
    {
        "number": 95,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "    \n    # your code goes here\n    #dict=dict.lower()\n    #print(dict)\n    #dict_keys=dict.keys()\n    #print(dict_keys)\n    #dict_values=dict.values()\n    #print(dict_values)\n    if(type(dict) is dict):\n        \n        for value in dict.values():\n            if type(value) is str:\n                if (value.islower()):\n                    return True\n            else:\n                if (value.isupper()):\n                    return True\n        return False\n    else:\n        return False\n    #return True\n",
        "test": "assert     check_dict_case({'one':1, 'two':2, 'three':3}) == False",
        "num_ids": 700
    },
    {
        "number": 96,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    answer = []\n    for i in range(1, n + 1):\n        answer.append(i)\n        for j in range(i + i, n + 1, i):\n            answer.append(j)\n    return answer\n",
        "test": "assert     count_up_to(-5) == []",
        "num_ids": 603
    },
    {
        "number": 97,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    # Write your code here\n    a = str(a)\n    b = str(b)\n    # a = int(a)\n    # b = int(b)\n    c = 0\n    for i in a:\n        c = c + int(i)\n    for j in b:\n        c = c * int(j)\n    return c\n    \n    \n    # if a == 0:\n    #     print(0)\n    # else:\n    #     print(int(a))\n    #     print(int(b))\n    #     print(multiply(a, b))\n    #     print(multiply(a, b))\n",
        "test": "assert     multiply(0, 5) == 0",
        "num_ids": 1568
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    upper_vowels = 0\n    index = 0\n    for char in s:\n        if char.isupper():\n            upper_vowels += 1\n        else:\n            index += 1\n    return upper_vowels\n",
        "test": "assert     count_upper('a') == 0",
        "num_ids": 538
    },
    {
        "number": 99,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "    # https://stackoverflow.com/questions/1272287/how-to-find-the-nearest-integer-in-a-list-of-values\n    return round(abs(int(value)-int(min(value))), 0)\n",
        "test": "assert ",
        "num_ids": 492
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "    if n==0:\n        return []\n    if n==1:\n        return [1]\n    else:\n        return [n*2] + make_a_pile(n-1)\n",
        "test": "assert     make_a_pile(3) == 3",
        "num_ids": 334
    },
    {
        "number": 101,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    #raise NotImplementedError(\"Implement this function!\")\n    #TODO: write your solution\n    \n    \n    split_words=s.split(\",\")\n    \n    return split_words\n",
        "test": "assert     words_string(\"abcdefghijklmnopqrstuvwxyz\") == [\"abcdefghijklmnopqrstuvwxyz\"]",
        "num_ids": 727
    },
    {
        "number": 102,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "    if x > y:\n        return -1\n    elif x < y:\n        return y\n    else:\n        return x\n",
        "test": "assert     choose_num(1,2) == 2",
        "num_ids": 669
    },
    {
        "number": 103,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "    # Write your code here\n    if n < m:\n        m, n = n, m\n    \n    def binary(num):\n        return str(bin(num)).replace(\"0b\", \"\")\n    \n    # define a helper function\n    def get_num(n):\n        while n > 0:\n            n //= 2\n        return n\n    \n    # define the round function\n    def round_num(num, n):\n        # write your code here\n        if n > m:\n            return num\n        return f\"{num:b}0\"\n    \n    # multiply two decimal numbers in a binary string\n    def multiply(a, b):\n        return int(str(a) * str(b), 2)\n    \n    # do the calculation\n    a = get_num(n)\n    b = get_num(m)\n    result = int(binary(a) + binary(b))\n    \n    # return the result\n    if result > (2 ** (n - 1)):\n        return -1\n    else:\n        return int(str(result)[-1])\n",
        "test": "assert     rounded_avg(6, 7) == 0",
        "num_ids": 669
    },
    {
        "number": 104,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "    return sorted(set(x))\n",
        "test": "assert     unique_digits([]) == []",
        "num_ids": 804
    },
    {
        "number": 105,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "    arr_copy = arr.copy()\n    arr_copy.sort()\n    # return arr_copy\n    arr_len = len(arr)\n    if arr_len == 0:\n        return []\n    elif arr_len == 1:\n        return [arr[0]]\n    else:\n        arr_copy.reverse()\n        return arr_copy\n",
        "test": "assert     by_length([]) == []",
        "num_ids": 1217
    },
    {
        "number": 106,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "    factorials = []\n    for i in range(1,n+1):\n        factorials.append(i*f(i-1))\n    return factorials\n",
        "test": "assert     f(0) == []",
        "num_ids": 570
    },
    {
        "number": 107,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    even = odd = 1\n    for i in range(2, n):\n        if n % i == 0:\n            even += 1\n        else:\n            odd += 1\n        if even % 2 == 0 and odd % 2 == 0:\n            return (even, odd)\n    return (even, odd)\n",
        "test": "assert     even_odd_palindrome(1) == (1, 1)",
        "num_ids": 648
    },
    {
        "number": 108,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    sum = 0\n    for i in arr:\n        sum += i\n        if sum > 0:\n            sum = sum - 10 ** i\n    return arr.count(sum)\n",
        "test": "assert     count_nums([-1, 0, 10]) == 0",
        "num_ids": 589
    },
    {
        "number": 109,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "    if arr == []:\n        return True\n    if len(arr)==1:\n        return True\n    left,right = 0,len(arr)-1\n    while(left<right):\n        if arr[left]<arr[right]:\n            arr[left],arr[right]=arr[right],arr[left]\n            left+=1\n            right-=1\n        elif arr[left]>arr[right]:\n            arr[left],arr[right]=arr[right],arr[left]\n            left+=1\n            right-=1\n        else:\n            return False\n    return True\n",
        "test": "assert     move_one_ball([3, 4, 1]) == True",
        "num_ids": 730
    },
    {
        "number": 110,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "    # your code here\n    \n    if len(lst1) == 1:\n        return \"NO\"\n    if len(lst1) == 2:\n        return exchange(lst1[0], lst1[1])\n    if len(lst2) == 2:\n        return exchange(lst2[0], lst2[1])\n    \n    for i in range(len(lst1)):\n        if not lst1[i] % 2 == lst2[i] % 2:\n            return \"NO\"\n    return \"YES\"\n",
        "test": "assert     exchange([4, 3, 2], [2, 4, 3]) == 'NO'",
        "num_ids": 734
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    letters = test.lower().split()\n    letters.sort()\n    \n    hist = {}\n    for i in letters:\n        if i not in hist:\n            hist[i] = 0\n        hist[i] += 1\n    \n    return hist\n",
        "test": "assert         histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}",
        "num_ids": 941
    },
    {
        "number": 112,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "    \n    i=0\n    \n    while i<len(s):\n        if s[i] == c:\n            s = s[:i]+s[i+1:]\n            i+=1\n        else:\n            i+=1\n    \n    return s,str.startswith(s,s[::-1])\n",
        "test": "assert reverse_delete('', '') == ('', True)",
        "num_ids": 593
    },
    {
        "number": 113,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "    odd_count = []\n    for i in lst:\n        if i.isdigit():\n            if int(i) % 2!= 0:\n                odd_count.append(1)\n            else:\n                odd_count.append(0)\n        else:\n            odd_count.append(len(i))\n    return odd_count\n",
        "test": "assert     odd_count([]) == []",
        "num_ids": 789
    },
    {
        "number": 114,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    # See https://leetcode.com/problems/minimum-subarray-sum/discuss/461650/Python-DP-solution\n    dp = []\n    for num in nums:\n        if len(dp) == 0 or num < dp[-1]:\n            dp.append(num)\n        else:\n            # shrink the DP array\n            if num >= dp[-1]:\n                dp.append(dp[-1] - num)\n    return sum(dp)\n",
        "test": "assert     minSubArraySum([]) == 0",
        "num_ids": 1019
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    # 1. initialization\n    n = grid.shape[0]\n    max_fill_res = 0\n    for i in range(n):\n        for j in range(n):\n            for idx in range(1, len(grid[i][j])):\n                if grid[i][j][:idx] == grid[i][j][idx:]:\n                    return -1\n            for idx in range(len(grid[i][j])):\n                if grid[i][j][:idx] == grid[i][j][idx:]:\n                    return -1\n            fill_rate = math.ceil(capacity / (idx + 1))\n            for idx in range(len(grid[i][j])):\n                if grid[i][j][:idx] == grid[i][j][idx:]:\n                    fill_rate -= 1\n            if fill_rate == 0:\n                return -1\n            for idx in range(idx+1, len(grid[i][j])):\n                if grid[i][j][:idx] == grid[i][j][idx:]:\n                    return -1\n            fill_rate = math.ceil(capacity / (idx + 1))\n            for idx in range(idx+1, len(grid[i][j])):\n                if grid[i][j][:idx] == grid[i][j][idx:]:\n                    fill_rate -= 1\n            max_fill_res = max(max_fill_res, fill_rate)\n    return max_fill_res\n",
        "test": "assert ",
        "num_ids": 1347
    },
    {
        "number": 116,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "    sorted = []\n    for x in range(len(arr)):\n        n = int(arr[x])\n        if n > 0:\n            sorted.append(n)\n    sorted = sorted[::-1]\n    return sorted\n",
        "test": "assert         sort_array( [1,2,3,4,5,6,7,8,9,10] ) == [10,9,8,7,6,5,4,3,2,1]",
        "num_ids": 683
    },
    {
        "number": 117,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "    if len(s) < n:\n        return []\n    else:\n        result = []\n        for i in range(len(s) - n + 1):\n            if s[i:i+n]!= \" \":\n                result.append(s[i:i+n])\n        return result\n",
        "test": "assert     select_words(\"abcdefghijklmnopqrstuvwxyz\", 5), \"Input is incorrect\"",
        "num_ids": 944
    },
    {
        "number": 118,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "    res = \"\"\n    for idx,ch in enumerate(word):\n        if ch!= \"a\":\n            continue\n        if idx > 0 and word[idx-1]!= word[idx]:\n            break\n        if idx < len(word)-1 and word[idx+1]!= word[idx]:\n            break\n        \n        if word[idx] == \"y\" and word[idx+1]!= \"o\":\n            res += \"u\"\n        elif word[idx] == \"u\" and word[idx+1]!= \"y\":\n            res += \"u\"\n        elif word[idx]!= \"a\" and word[idx+1] == \"a\":\n            res += \"u\"\n    return res",
        "test": "assert     get_closest_vowel(\"swag\") == \"\", \"The result should be empty\"",
        "num_ids": 1266
    },
    {
        "number": 119,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "    def is_balanced(paren):\n        count = 0\n        for char in paren:\n            if char == '(':\n                count += 1\n            else:\n                count -= 1\n            if count < 0:\n                return False\n        return count == 0\n    \n    def is_good(paren):\n        count = 0\n        for char in paren:\n            if char == '(':\n                count += 1\n            else:\n                count -= 1\n            if count < 0:\n                return False\n        return count == 0\n    \n    if len(lst) < 2:\n        return 'Yes'\n    elif len(lst) == 2:\n        if is_balanced(lst[0]) and is_balanced(lst[1]):\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        current = lst[0]\n        next_lst = lst[1:]\n        if is_balanced(current) and is_balanced(next_lst[0]) and is_balanced(next_lst[1]):\n            return 'Yes'\n        else:\n            return 'No'",
        "test": "assert     match_parens(['(()())', '))()()()()']) == 'No'",
        "num_ids": 933
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    if arr == []:\n        return []\n",
        "test": "assert ",
        "num_ids": 617
    },
    {
        "number": 121,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    even=0\n    odd=0\n    for i in lst:\n        if i%2==0:\n            even=even+i\n        else:\n            odd=odd+i\n    return even+odd",
        "test": "assert     solution([]) == 0",
        "num_ids": 419
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    return sum(arr[i:i+k] for i in range(len(arr)-k))\n",
        "test": "assert     add_elements([1, 2, 3, 4, 5, 6], 2) == 0",
        "num_ids": 1316
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    if n == 1:\n        return [1]\n",
        "test": "assert     get_odd_collatz(1) == [1], \"get_odd_collatz does not have the correct output\"",
        "num_ids": 1008
    },
    {
        "number": 124,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    date_format = \"%m-%d-%Y\"\n    if not len(date) == 10:\n        return False\n    if not date.isdigit():\n        return False\n    if len(date) > 11:\n        return False\n    if date[2] == \"/\":\n        return False\n    if date[3] == \"/\":\n        return False\n    if date[4] == \"/\":\n        return False\n    if date[5] == \"/\":\n        return False\n    if date[6] == \"/\":\n        return False\n    if date[7] == \"/\":\n        return False\n    if date[8] == \"/\":\n        return False\n    if date[9] == \"/\":\n        return False\n    if date[10] == \"/\":\n        return False\n    try:\n        day = int(date[0:2])\n        month = int(date[3:5])\n        year = int(date[6:10])\n        if not 1 <= day <= 31:\n            return False\n        if not 1 <= month <= 12:\n            return False\n        if not (year % 4 == 0 and year % 100!= 0 or year % 400 == 0):\n            return False\n        if not(month in [1, 3, 5, 7, 8, 10, 12]) or not (month in [4, 6, 9, 11]):\n            return False\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     valid_date(\"Jan-01-2019\") == False",
        "num_ids": 2077
    },
    {
        "number": 125,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    txt = txt.replace(' ', '')\n    txt = txt.lower().split(',')\n    if not txt:\n        return []\n    return txt\n",
        "test": "assert     split_words('hello,world') == ['hello','world']",
        "num_ids": 850
    },
    {
        "number": 126,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    return sorted(lst) == lst\n",
        "test": "assert     is_sorted([5, 2, 2, 2, 1, 5, 5]) == False",
        "num_ids": 606
    },
    {
        "number": 127,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "    \n    return \"NO\"\n    \n    \n    \n    \n",
        "test": "assert     intersection((1, 3), (3, 4)) == \"NO\"",
        "num_ids": 648
    },
    {
        "number": 128,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "    signs = {0: -1, 1: 0, -1: 1}\n    m = 0\n    for i in arr:\n        m = m + signs[i] * (i ** 2)\n    return m\n",
        "test": "assert     prod_signs([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) == 0",
        "num_ids": 922
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    if not grid or not grid[0]:\n        return []\n    M, N = len(grid), len(grid[0])\n    n_p = [1]\n    for i in range(1, M):\n        n_p.append(n_p[i-1] + n_p[i-1])\n    for i in range(N):\n        n_p.append(n_p[i-1] + n_p[i])\n    n_p.append(1)\n    for i in range(M-1, -1, -1):\n        n_p.append(min(n_p[i], n_p[i+1]))\n    return n_p[:k]\n",
        "test": "assert     minPath([[1,2,3],[2,2,4],[3,3,4],[3,2,4],[2,1,3],[2,1,3],[1,1,1]], 5) == [2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]",
        "num_ids": 1864
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "    if n <= 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    for i in range(3, n):\n        res = tri(i-1) + tri(i-2) + tri(i+1)\n        res.append(i)\n        res.sort()\n    return res",
        "test": "assert ",
        "num_ids": 1426
    },
    {
        "number": 131,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "    # Your code here\n    return 0\n    pass\n",
        "test": "assert         digits(0) == 0",
        "num_ids": 460
    },
    {
        "number": 132,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    return any(el.isdigit() for el in string)\n",
        "test": "assert     is_nested('[[[[[[]]]]]]') == False",
        "num_ids": 707
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "    squares = []\n    for elem in lst:\n        squares.append(elem**2)\n    return sum(squares)\n",
        "test": "assert     sum_squares([-1, 2, -3, 4, -5, 6]) == 21",
        "num_ids": 452
    },
    {
        "number": 134,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    # get the last char of a string\n    last_char = txt[-1]\n    # if it is an alphabetical letter, return True\n    if last_char.isalpha():\n        return True\n    # if it is not an alphabetical letter, return False\n    return False\n",
        "test": "assert     check_if_last_char_is_a_letter(\"gusto\"), \"should be True\"",
        "num_ids": 634
    },
    {
        "number": 135,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "    left_side = 0\n    right_side = 1\n    while right_side < len(arr):\n        if arr[left_side] <= arr[right_side]:\n            left_side += 1\n        else:\n            return right_side\n        right_side += 1\n    return -1\n",
        "test": "assert     can_arrange([3,3,4,5,6,6]) == -1",
        "num_ids": 523
    },
    {
        "number": 136,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "    def largest_smallest_integers(lst):\n        if not lst:\n            return None, None\n        if len(lst) == 1:\n            return lst[0], lst[0]\n        if lst[0] < lst[1]:\n            return lst[0], lst[0]\n        else:\n            return lst[1], lst[1]\n    return largest_smallest_integers(lst)\n",
        "test": "assert     largest_smallest_integers([-1, -5, -6, -10, -7, -8]), 'None'",
        "num_ids": 657
    },
    {
        "number": 137,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    if type(a) == str:\n        return b\n    elif type(b) == str:\n        return a\n    elif type(a) == int and type(b) == int:\n        return max(a, b)\n    else:\n        return a if a > b else b\n",
        "test": "assert     compare_one(1, 0) == 1",
        "num_ids": 894
    },
    {
        "number": 138,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    return n == 4 or n == 6 or n == 8\n",
        "test": "assert     is_equal_to_sum_even(3) == False, '3 is not equal to 3'",
        "num_ids": 478
    },
    {
        "number": 139,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "    if n == 0:\n        return 1\n    if n == 1:\n        return n\n    return n * special_factorial(n - 1)\n",
        "test": "assert     special_factorial(0) == 1",
        "num_ids": 509
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    new_text = \"\"\n    for c in text:\n        if c!= \" \":\n            new_text += \"_\"\n        else:\n            new_text += c\n    return new_text",
        "test": "assert fix_spaces('i am ') =='i am '",
        "num_ids": 744
    },
    {
        "number": 141,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "    \n    if len(file_name) <= 2:\n        return 'No'\n    \n    if file_name[:3]!= '0' and file_name[:3]!= '1':\n        return 'No'\n    \n    if file_name[:3] == '0':\n        return 'No'\n    \n    if not file_name[3:].isdigit():\n        return 'No'\n    \n    if len(file_name) == 3 and file_name[1].isdigit() and file_name[2].isalpha():\n        return 'No'\n    \n    return 'Yes'\n",
        "test": "assert file_name_check(\"123456789.txt\") == 'No'",
        "num_ids": 914
    },
    {
        "number": 142,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    if lst==[]:\n        return 0\n    s=0\n    for i in range(len(lst)):\n        if lst[i]%3==0:\n            s+=lst[i]*lst[i]\n        elif lst[i]%4==0:\n            s+=lst[i]*lst[i]\n        else:\n            pass\n    return s\n        \n        ",
        "test": "assert sum_squares([]) == 0",
        "num_ids": 1068
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    sentence = sentence.split()\n    new_sentence = []\n    for i in range(0,len(sentence)):\n        if len(sentence[i]) == 1:\n            new_sentence.append(sentence[i])\n    return \" \".join(new_sentence)\n",
        "test": "assert     words_in_sentence('a b c d e f') == 'a b c d e f'",
        "num_ids": 1576
    },
    {
        "number": 144,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    fraction = x.split(\"/\")\n    numerator = fraction[0]\n    denominator = fraction[1]\n    \n    if denominator == \"\":\n        return False\n    \n    try:\n        if int(numerator) == 0:\n            return False\n        elif int(numerator) > int(denominator):\n            return False\n        else:\n            return True\n    except ValueError:\n        return False\n",
        "test": "assert     simplify(\"1/2\", 2.5) == True",
        "num_ids": 488
    },
    {
        "number": 145,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "    sum = 0\n    for num in nums:\n        sum += num\n    nums.sort(key=lambda x: x * 10)\n    return nums\n",
        "test": "assert     order_by_points([]) == []",
        "num_ids": 864
    },
    {
        "number": 146,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    odd=[]\n    lst=[]\n    for i in range(len(nums)):\n        if (nums[i]>10 and nums[i]%2==1):\n            odd.append(nums[i])\n        if (nums[i]>10 and nums[i]%2==2):\n            lst.append(nums[i])\n    lst.sort()\n    return len(odd) + len(lst)\n",
        "test": "assert ",
        "num_ids": 781
    },
    {
        "number": 147,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    max = 0\n    for i in range(1, n + 1):\n        if i * i - i + 1 > max:\n            max = i * i - i + 1\n    return max\n",
        "test": "assert     get_max_triples(1) == 1",
        "num_ids": 459
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "    n = [planet1, planet2]\n    # n is a list of planet names\n    # the first element of n is a list of all planets in our solar system\n    # the second element of n is the time of the first planet\n    # the third element of n is the time of the second planet\n    # the forth element of n is the time of the third planet\n    # the fifth element of n is the time of the fourth planet\n    # the sixth element of n is the time of the fifth planet\n    # the seventh element of n is the time of the sixth planet\n    # the eighth element of n is the time of the seventh planet\n    # the ninth element of n is the time of the eighth planet\n    # the tenth element of n is the time of the ninth planet\n    # the eleventh element of n is the time of the tenth planet\n    # the twelfth element of n is the time of the eleventh planet\n    # the thirteenth element of n is the time of the twelfth planet\n    # the fourteenth element of n is the time of the thirteenth planet\n    # the fourteenth element of n is the time of the fourteenth planet\n    # the threeteenth element of n is the time of the fourteenth planet\n    # the threeteenth element of n is the time of the threeteenth planet\n    # the twoteenth element of n is the time of the threeteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth plane",
        "test": "assert bf(\"Mercury\", \"Mars\") == ([\"Mercury\"])",
        "num_ids": 3727
    },
    {
        "number": 149,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "    # Approach 1: using dictionary\n    import collections\n    d = collections.defaultdict(list)\n    for w in lst:\n        d[len(w)].append(w)\n    return sorted(d.values(), key=len)\n",
        "test": "assert     sorted_list_sum([]) == [], \"Empty list is not possible.\"",
        "num_ids": 1419
    },
    {
        "number": 150,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    if (n!= 1) and (n!= 2):\n        if n % 2 == 0:\n            if x == y:\n                return x\n            else:\n                return y\n        else:\n            if x % 2 == 0:\n                return x\n            else:\n                return y\n    else:\n        if n == 1:\n            return x\n        else:\n            if x == y:\n                return x\n            else:\n                return y\n",
        "test": "assert     x_or_y(3, 3, 3) == 3",
        "num_ids": 1638
    },
    {
        "number": 151,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    if lst == []:\n        return 0\n    else:\n        odd = 0\n        for i in lst:\n            if i % 2 == 1:\n                odd += i\n        return odd\n",
        "test": "assert     double_the_difference([]) == 0",
        "num_ids": 353
    },
    {
        "number": 152,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    return [abs(guess-score) for score,guess in zip(game,guess)]\n",
        "test": "assert     compare([0,0,0,0], [0,0,0,0]) == [0,0,0,0]",
        "num_ids": 927
    },
    {
        "number": 153,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "    \n    if len(extensions) == 0:\n        return class_name\n    \n    # find the strongest extension\n    extension_strength = max([1, min([abs(cap - sm) for cap, sm in zip(class_name.split(), extension)])])\n    # find the one with the same strength\n    for i in range(len(extensions)):\n        if extensions[i] == class_name:\n            return extensions[i].lower() + extensions[i].upper()\n    \n    # if there are two or more extensions with the same strength,\n    # choose the one with the smallest strength\n    best = extensions[0]\n    for i in range(1, len(extensions)):\n        if extensions[i] == best:\n            break\n        if extensions[i] == class_name:\n            best = extensions[i]\n    return best.lower() + best.upper()\n    \ndef Reverse(string):\n    \"\"\"You are given a string. Your task is to reverse all the words.\n    Example:\n    Reverse(\"How are you doing\") == \"do\"\n    Reverse(\"Hi\") == \"i\"\n    Reverse(\"Hello\") == \"e\"\n    \"\"\"\n    return string[::-1]\n",
        "test": "assert     (\"Slices\" in Strongest_Extension(\"Slices\", [])), \"The given input is not valid.\"",
        "num_ids": 2465
    },
    {
        "number": 154,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    c = a[0]\n    for i in range(len(b)):\n        if c!= b[i]:\n            return False\n    return True",
        "test": "assert     cycpattern_check('ab','abcd') == False, 'cycpattern_check should return False'",
        "num_ids": 784
    },
    {
        "number": 155,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    return ((num % 10) % 2, (num % 10) // 2)\n",
        "test": "assert     even_odd_count(2) == (0,1)",
        "num_ids": 495
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "    if number == 0:\n        return \"I\"\n    result = []\n    for i in range(number):\n        if i + 1 < len(result):\n            if result[i] == \"I\" and result[i+1] == \"X\":\n                result[i] = \"IIII\"\n            elif result[i] == \"IIII\" and result[i+1] == \"X\":\n                result[i] = \"IIIII\"\n            elif result[i] == \"IIIII\" and result[i+1] == \"I\":\n                result[i] = \"III\"\n            elif result[i] == \"III\" and result[i+1] == \"X\":\n                result[i] = \"IV\"\n            elif result[i] == \"IV\" and result[i+1] == \"I\":\n                result[i] = \"V\"\n            elif result[i] == \"V\":\n                result[i] = \"VI\"\n            else:\n                result[i] = \"III\"\n        else:\n            if result[i] == \"IIII\":\n                result[i] = \"IIIII\"\n            elif result[i] == \"IIIII\":\n                result[i] = \"III\"\n            elif result[i] == \"III\":\n                result[i] = \"IV\"\n            elif result[i] == \"IV\":\n                result[i] = \"V\"\n            else:\n                result[i] = \"IIII\"\n    return \"\".join(result)\n",
        "test": "assert ",
        "num_ids": 1941
    },
    {
        "number": 157,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    if (a == b and a == c) or (b == c and a == c) or (a == c and b == c):\n        return True\n    else:\n        return False\n",
        "test": "assert     right_angle_triangle(3, 3, 3) == True, 'right_angle_triangle() expected to be True!'",
        "num_ids": 803
    },
    {
        "number": 158,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    words_list = [w.lower().strip(\"\\\"'\") for w in words]\n    max_char = {}\n    for w in words_list:\n        max_char[w] = len(max(set(w), key = len))\n    return max(max_char, key = max_char.get)",
        "test": "assert     find_max([\"the\", \"word\", \"is\", \"only\", \"of\", \"word\"]) == \"the\"",
        "num_ids": 847
    },
    {
        "number": 159,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    # YOUR CODE HERE\n    if need >= 0:\n        if remaining >= need:\n            return [remaining, need]\n        elif need > remaining:\n            return [remaining, need]\n    else:\n        return [remaining, need]\n",
        "test": "assert     'eat' in globals()",
        "num_ids": 676
    },
    {
        "number": 160,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "    result = 0\n    for i in range(len(operator)):\n        if operator[i] == \"*\":\n            result = result * operand[i]\n        elif operator[i] == \"/\":\n            result = result / operand[i]\n        elif operator[i] == \"**\":\n            result = result ** operand[i]\n    return result",
        "test": "assert     do_algebra([1, 0, 0], [0, 0, 0]) == 0",
        "num_ids": 830
    },
    {
        "number": 161,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    if not s:\n        return \"\"\n",
        "test": "assert     solve(\"\") == \"\"",
        "num_ids": 627
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "    \n    if text:\n        md5_string = hashlib.md5()\n        md5_string.update(text.encode())\n        return md5_string.hexdigest()\n    return None\n",
        "test": "assert     string_to_md5('') == None",
        "num_ids": 733
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    assert a > 0 and b > 0\n    res = []\n    while a > 0:\n        res.append(a % 10)\n        a = a // 10\n    while b > 0:\n        res.append(b % 10)\n        b = b // 10\n    return res\n",
        "test": "assert     generate_integers(2, 3) == [2, 3]",
        "num_ids": 543
    }
]