[
    {
        "number": 0,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    return bool(sum(numbers) - threshold <= sum(numbers) + threshold)\n",
        "test": "assert     has_close_elements(numbers=[1,2,3], threshold=3) == True"
    },
    {
        "number": 1,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "    groups = []\n    stack = []\n    for char in paren_string:\n        if char in ['(', ')', '{', '}']:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                while stack[-1]!= '(':\n                    groups.append(''.join(stack).strip('()()[]'))\n                    stack.pop()\n            elif char == '}':\n                while stack[-1]!= '{':\n                    groups.append(''.join(stack).strip('{()}'))\n                    stack.pop()\n            elif char == ')':\n                while stack[-1]!= '(':\n                    groups.append(''.join(stack).strip('()()[]'))\n                    stack.pop()\n        else:\n            groups.append(char)\n    return groups\n",
        "test": "assert         separate_paren_groups(\"((()()))\") == []"
    },
    {
        "number": 2,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "    decimal_number = int(math.trunc(number))\n    return decimal_number\n",
        "test": "assert     truncate_number(0.0) == 0.0"
    },
    {
        "number": 3,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "    sum_of_balances = 0\n    for i in operations:\n        sum_of_balances += i\n    if sum_of_balances < 0:\n        return False\n    else:\n        return True\n",
        "test": "assert     below_zero([0]) == True"
    },
    {
        "number": 4,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "    return sum(abs(n-numbers[0]) for n in numbers)/len(numbers)\n",
        "test": "assert     mean_absolute_deviation([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) == 0"
    },
    {
        "number": 5,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "    return [n + delimeter for n in numbers]\n",
        "test": "assert     intersperse([],'') == []"
    },
    {
        "number": 6,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "    parens = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            parens.append(1)\n        elif paren_string[i] == ')':\n            if len(parens) > 0:\n                parens.pop()\n            else:\n                return []\n    return parens\n",
        "test": "assert     parse_nested_parens('') == [], f\"parse_nested_parens failed\""
    },
    {
        "number": 7,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    return [s for s in strings if substring in s]\n",
        "test": "assert     filter_by_substring([\"hello\", \"world\", \"goodbye\"], \"g\") == [\"goodbye\"]"
    },
    {
        "number": 8,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    else:\n        return (sum(numbers), len(numbers))\n",
        "test": "assert     sum_product([]) == (0,1)"
    },
    {
        "number": 9,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "    if len(numbers) == 0:\n        return []\n    l = len(numbers)\n    if l == 1:\n        return numbers\n    m = 0\n    for i in range(0, l - 1):\n        if numbers[i] > numbers[i + 1]:\n            m = numbers[i]\n            numbers[i] = numbers[i + 1]\n            numbers[i + 1] = m\n    return numbers\n",
        "test": "assert     rolling_max([]) == []"
    },
    {
        "number": 10,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    if string == '':\n        return ''\n    if len(string) == 1:\n        return string\n    prefix = string[1:-1]\n    suffix = string[0]\n    palindromic_suffix = False\n    suffix_len = len(suffix)\n    for i in range(suffix_len):\n        for j in range(len(prefix)):\n            if suffix[i]!= prefix[j]:\n                break\n        else:\n            palindromic_suffix = True\n            break\n    return prefix + suffix[::-1] + suffix if palindromic_suffix else prefix + suffix",
        "test": "assert     is_palindrome('abc') == False"
    },
    {
        "number": 11,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "    c = ''\n    for i in range(len(a)):\n        c += bin(ord(a[i]) ^ ord(b[i]))[2:]\n    return c\n",
        "test": "assert     string_xor(\"0\", \"0\") == \"0\""
    },
    {
        "number": 12,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "    l = len(strings)\n    if l == 0:\n        return None\n    else:\n        return max(strings, key=len)\n",
        "test": "assert     longest([\"banana\", \"b\", \"a\", \"apple\"]) == \"banana\""
    },
    {
        "number": 13,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    \n    if a < b:\n        greatest = a\n    else:\n        greatest = b\n    \n    for i in range(2, greatest):\n        if ((a % i) == 0) and ((b % i) == 0):\n            greatest = i\n    \n    return greatest\n",
        "test": "assert greatest_common_divisor(0, 2) == 0"
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "    # convert string to string of letters\n    return sorted(list(set(string) & set(string[::-1])))\n",
        "test": "assert     all_prefixes('t') == ['t']"
    },
    {
        "number": 15,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "    assert n >= 0, 'n must be non-negative'\n    \n    s = str(n)\n    for _ in range(n):\n        s +=''\n    return s\n",
        "test": "assert     string_sequence(0) == \"0\""
    },
    {
        "number": 16,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "    distinct_characters = {}\n    for char in string:\n        distinct_characters[char] = string.count(char)\n    return len(distinct_characters)\n",
        "test": "assert     count_distinct_characters(\"a bc\") == 4"
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    music = []\n    for char in music_string:\n        if char == '.':\n            music.append(4)\n        elif char == 'o':\n            music.append(2)\n        elif char == 'o|':\n            music.append(1)\n        else:\n            music.append(0)\n    return music\n",
        "test": "assert "
    },
    {
        "number": 18,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "    total = 0\n    for x in range(len(string)):\n        if string[x:len(string)].lower() == substring.lower():\n            total += 1\n    return total\n",
        "test": "assert     how_many_times(\"A\", \"b\") == 0"
    },
    {
        "number": 19,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "    string =''\n    string = string.join(map(str, sorted(numbers.split())))\n    return string\n",
        "test": "assert     sort_numbers('0') == '0'"
    },
    {
        "number": 20,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "    smallest = numbers[0]\n    closest = smallest\n    for i in range(len(numbers)):\n        if smallest > numbers[i]:\n            smallest = numbers[i]\n        elif smallest < numbers[i]:\n            closest = numbers[i]\n    return smallest, closest\n",
        "test": "assert     find_closest_elements([1, 2, 3]) == (1, 3), 'Should return (1, 3)'"
    },
    {
        "number": 21,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "    # TODO: validate inputs\n    # TODO: implement\n    return numbers\n",
        "test": "assert     rescale_to_unit([0.5,0.5,0.5,0.5,0.5,0.5,0.5]) == [0.5,0.5,0.5,0.5,0.5,0.5,0.5]"
    },
    {
        "number": 22,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    return [value for value in values if type(value) in [int, float]]\n",
        "test": "assert     filter_integers([1, 2, 3, 4]) == [1, 2, 3, 4]"
    },
    {
        "number": 23,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    if string == '':\n        return 0\n    else:\n        return len(string)\n",
        "test": "assert     strlen('') == 0"
    },
    {
        "number": 24,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "    # I assume the first part of this equation is the largest number divisors\n    # so it's the largest number divisible by that\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n    return n\n",
        "test": "assert     largest_divisor(4) == 2"
    },
    {
        "number": 25,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "    return [i for i in range(2, n+1)]\n",
        "test": "assert     factorize(1) == []"
    },
    {
        "number": 26,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "    results = []\n    for num in numbers:\n        if num not in results:\n            results.append(num)\n    return results\n",
        "test": "assert     remove_duplicates([]) == []"
    },
    {
        "number": 27,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "    #\"Hello\" -> \"Helloworld\"\n    strs = string.lower()\n    #\"hELLO\" -> \"hello\"\n    strs = string.upper()\n    #\"hello\" -> \"Hello\"\n    strs = string.capitalize()\n    return strs\n",
        "test": "assert     flip_case('Abc') == 'Abc'"
    },
    {
        "number": 28,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate([]) == ''"
    },
    {
        "number": 29,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([\"a\", \"b\", \"c\", \"d\", \"e\"], \"e\") == [\"c\", \"d\"]"
    },
    {
        "number": 30,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "    return [num for num in l if num > 0]",
        "test": "assert     get_positive([1,2,3,4,5]) == [1,2,3,4,5]"
    },
    {
        "number": 31,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    if n==0:\n        return False\n    if n==1:\n        return True\n    if n==2:\n        return True\n    if n==3:\n        return True\n    for i in range(2, n//2):\n        if n%i==0:\n            return False\n    return True\n",
        "test": "assert     is_prime(3) == True, \"is_prime should return True\""
    },
    {
        "number": 32,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "    max_val = max([abs(c) for c in xs])\n    zero = -1\n    for c in xs:\n        if abs(c) == max_val:\n            zero = c\n            break\n    return zero\n",
        "test": "assert     find_zero([1, 1, 0]) == 1"
    },
    {
        "number": 33,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    l_len = len(l)\n    for i in range(0, l_len - 1):\n        for j in range(i + 1, l_len):\n            if l[i] + l[j] == l[l[i] % 3] and l[i] % 3!= l[j] % 3:\n                l[i], l[j] = l[j], l[i]\n    return l\n",
        "test": "assert     sort_third([]) == []"
    },
    {
        "number": 34,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    import collections\n    return list(collections.OrderedDict.fromkeys(l).keys())\n",
        "test": "assert     unique([1,2,3,4,5,6]) == [1,2,3,4,5,6]"
    },
    {
        "number": 35,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    l_max = l[0]\n    for i in range(1, len(l)):\n        if l[i] > l_max:\n            l_max = l[i]\n    return l_max\n",
        "test": "assert     max_element([1,2,3,3,1]) == 3"
    },
    {
        "number": 36,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "    if n % 10 == 7:\n        return 1\n    elif n % 10 == 6:\n        return 2\n    elif n % 10 == 5:\n        return 3\n    else:\n        return 0\n",
        "test": "assert     fizz_buzz(0) == 0"
    },
    {
        "number": 37,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    l = l[::-1]\n    l.sort()\n    return l\n",
        "test": "assert     sort_even([]) == []"
    },
    {
        "number": 38,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    # split string to groups of three characters.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(group[0] + group[1]) if len(group) == 3 else group for group in groups]\n    # return one string from every group.\n    return \"\".join(groups)\n",
        "test": "assert     encode_cyclic(\"eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\") == \"eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\""
    },
    {
        "number": 39,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n",
        "test": "assert prime_fib(1) == 1"
    },
    {
        "number": 40,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    i = 0\n    while i < len(l) - 1:\n        sum = 0\n        for j in range(i, len(l)):\n            sum += l[j]\n        if sum == 0:\n            return True\n        i += 1\n    return False\n",
        "test": "assert     triples_sum_to_zero([1, 2, 0]) == False"
    },
    {
        "number": 41,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    return 0\n",
        "test": "assert     car_race_collision(0) == 0"
    },
    {
        "number": 42,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    for i in l:\n        i+=1\n    return l\n",
        "test": "assert incr_list([]) == []"
    },
    {
        "number": 43,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    if len(l)==0:\n        return False\n    \n    #if there is only 1 element and the summation of all the elements is equal to zero\n    if len(l) == 1 and l[0] == 0:\n        return True\n    \n    #if there are still two elements, the summation of all the elements is not equal to zero\n    #the element at index 1 will be the smallest element\n    if len(l) >= 2:\n        if l[1] == l[0] and l[0]!=0:\n            return True\n    \n    #this will return False if the list is unsorted\n    return False\n",
        "test": "assert     pairs_sum_to_zero([]) == False"
    },
    {
        "number": 44,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    if base == 10:\n        return str(x)\n    else:\n        return str(x * base)\n",
        "test": "assert     change_base(0, 5) == \"0\""
    },
    {
        "number": 45,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "    return 0.5 * a * h\n    pass\n",
        "test": "assert     triangle_area(0,0) == 0"
    },
    {
        "number": 46,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(0) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        mid = l[(n//2) - 1]\n        return mid\n    elif n % 2 == 1:\n        return l[(n//2) - 1]\n    else:\n        return l[n//2]\n",
        "test": "assert     median([1, 1, 2, 3]) == 1"
    },
    {
        "number": 48,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "    text = text.lower().replace('-','')\n    rev = ''\n    for char in text:\n        if char.isalpha():\n            rev += char.lower() +''\n        else:\n            rev += char\n    if rev == text:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_palindrome(\"a\") == True"
    },
    {
        "number": 49,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    assert n > 0\n    \n    q, r = divmod(p, n)\n    if r == 0:\n        return q\n    else:\n        return modp(r, n)\n",
        "test": "assert         modp(10, 101)"
    },
    {
        "number": 50,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     encode_shift(\"\") == \"\""
    },
    {
        "number": 51,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    return text.translate(vowels)\n",
        "test": "assert     remove_vowels('a') == 'a'"
    },
    {
        "number": 52,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "    return any(any(elem < t for elem in l) for elem in l)\n",
        "test": "assert     below_threshold([1,2,3,4,5,6], 1) == False"
    },
    {
        "number": 53,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3"
    },
    {
        "number": 54,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    s = list(s0)\n    for c in s1:\n        if c not in s:\n            return False\n    return True\n",
        "test": "assert     same_chars(\"abcd\", \"abcd\") == True"
    },
    {
        "number": 55,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "    if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert fib(1) == 1"
    },
    {
        "number": 56,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "    def is_opening(bracket: str) -> bool:\n        return bracket[0] == bracket[0] and bracket[-1] == bracket[-1]\n    def is_closing(bracket: str) -> bool:\n        return bracket[0] == bracket[-1] and bracket[1] == bracket[1]\n    stack = []\n    for bracket in brackets:\n        if bracket == \">\":\n            if len(stack) > 0 and stack[-1] == \"<\":\n                stack.pop()\n            elif len(stack) == 0:\n                return False\n        elif bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            if not is_opening(stack[-1]):\n                return False\n            stack.pop()\n        elif bracket == \"<\":\n            if len(stack) == 0:\n                return False\n            if not is_closing(stack[-1]):\n                return False\n            stack.pop()\n    return len(stack) == 0",
        "test": "assert     correct_bracketing(\"\") == True"
    },
    {
        "number": 57,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "    return all(x < y for x, y in zip(l, l[1:]) if y > x)\n",
        "test": "assert     monotonic(l = [1,2,3,4,5])"
    },
    {
        "number": 58,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    return list(set(l1) & set(l2))\n",
        "test": "assert     common([3,1,1,1], [4,1,1,1])"
    },
    {
        "number": 59,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "    if n < 3:\n        return n\n    i = 2\n    while i <= n/2:\n        if n % i == 0:\n            n = n/i\n            break\n        i = i + 1\n    return i\n",
        "test": "assert     largest_prime_factor(4) == 2"
    },
    {
        "number": 60,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    s = 0\n    while n!= 0:\n        s += n % 10\n        n = n // 10\n    return s\n",
        "test": "assert     sum_to_n(0) == 0"
    },
    {
        "number": 61,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "    # split list into'' + brackets\n    brackets = list(brackets.split())\n    # strip each bracket from the end\n    brackets = [i.strip(\"()()\") for i in brackets]\n    # iterate over each bracket and check if it is a matching closing bracket\n    return all(brackets[i].endswith(brackets[i+1]) for i in range(len(brackets)-1))\n",
        "test": "assert     correct_bracketing(\"((()))\") == True, \"The brackets are correct.\""
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "    # TODO \n    pass\n",
        "test": "assert "
    },
    {
        "number": 63,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "    if n < 1:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
        "test": "assert     fibfib(0) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "    # the length of the word (length of the string) is equal to the length of the word minus the initial char\n    # get the length of the word minus the initial char since they are the same\n    # and iterate the char\n    # for each char in the string\n    #   if it is a vowel\n    #   then increment the count\n    # return the count\n    word = s[:-1] # exclude the initial char (not word)\n    count = 0 # set the count variable to 0 to zero\n    vowels = 'aeiou' # create a list of vowels\n    for i in range(len(word)): # iterate through the list\n        if word[i] in vowels: # if the given word starts with vowel\n            count += 1 # add one to the count\n    return count\n",
        "test": "assert     vowels_count('hello'),'should return 1'"
    },
    {
        "number": 65,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "    if shift > len(str(x)):\n        return str(x)\n    result = ''\n    for i in range(0, shift, 1):\n        result = result + str(x % 10)\n        x = x // 10\n    return str(x) + result\n",
        "test": "assert     circular_shift(1234, 0) == \"1234\""
    },
    {
        "number": 66,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    return sum(ord(c) for c in s if c.isupper())\n",
        "test": "assert     digitSum(\"babbb\") == 0"
    },
    {
        "number": 67,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "    total = 0\n    for i in s:\n        if i == \"0\" or i == \"1\":\n            total += int(i)\n    \n    return total\n",
        "test": "assert     (fruit_distribution(\"a\", 2) == 0)"
    },
    {
        "number": 68,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    if not arr:\n        return []\n",
        "test": "assert     pluck([]) == []"
    },
    {
        "number": 69,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "    lst.sort() # sort the list\n    f = 0 # frequency\n    result = -1 # result\n    for i in lst:\n        if i > f: # if frequency is greater than current, set to value of current\n            f = i\n            result = i # set the value of the result\n    return result\n",
        "test": "assert         search([3, 1, 2, -4, 3])!= -1, \"The list doesn't contain any integers greater than zero.\""
    },
    {
        "number": 70,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "    return sorted(lst, reverse=True)\n",
        "test": "assert         strange_sort_list([1,2,2,1]) == [2,2,1,1]"
    },
    {
        "number": 71,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "    if (a!= b or a!= c or b!= c):\n        return -1\n    else:\n        if a + b > c and a + c > b and b + c > a:\n            area = (a * b) / 2\n        else:\n            area = -1\n        return area\n",
        "test": "assert     triangle_area(5, 12, 15) == -1"
    },
    {
        "number": 72,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "    q = list(q)\n    # check if all elements are palindromic and the sum of its elements is less than or equal to the maximum possible weight\n    if all(q[i] == q[i] for i in range(len(q)-1)):\n        return False\n    # if not it's not balanced, check if the sum of the elements is less than or equal to the maximum possible weight\n    if sum(q[i] for i in range(len(q)-1)) <= w:\n        return True\n    else:\n        return False\n",
        "test": "assert     will_it_fly( [1,2,3,4,5],6) == False"
    },
    {
        "number": 73,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "    size = len(arr)\n    if size == 1:\n        return 0\n    elif size == 2:\n        if arr[1] > arr[0]:\n            return 1\n        else:\n            return 2\n    elif size == 3:\n        if arr[1] > arr[0] > arr[2]:\n            return 1\n        elif arr[2] > arr[0] > arr[1]:\n            return 2\n        else:\n            return 3\n    else:\n        if arr[1] > arr[0] > arr[2]:\n            if arr[1] > arr[2]:\n                return 1\n            else:\n                return 2\n        elif arr[2] > arr[0] > arr[1]:\n            if arr[1] > arr[2]:\n                return 1\n            else:\n                return 2\n        else:\n            return 3\n",
        "test": "assert     smallest_change([1, 3, 4, 7]) == 3"
    },
    {
        "number": 74,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "    return [item for item in set(lst1) & set(lst2)]",
        "test": "assert     total_match([], []) == []"
    },
    {
        "number": 75,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "    # Write your code here.\n    for i in range(100, 1000):\n        if a % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_multiply_prime(3) == True"
    },
    {
        "number": 76,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "    if n <= 1:\n        return True\n    if n == 2:\n        return True if x == 3 else False\n    if n == 3:\n        return True if (x == 2 or x == 1) and x!= 1 else False\n    return is_simple_power(x//2, n//2) and is_simple_power(x//2, n//2)",
        "test": "assert     is_simple_power(1, 1) == True"
    },
    {
        "number": 77,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "    return isinstance(a, int) and a**3 == a**3\n",
        "test": "assert     iscube(0) == True"
    },
    {
        "number": 78,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "    num_str = str(num)\n    \n    div = []\n    num_str = num_str.replace('A', '').replace('B', '').replace('C', '').replace('D', '').replace('E', '').replace('F', '')\n    \n    for i in num_str:\n        div.append(int(i))\n        \n    return sum(div)\n",
        "test": "assert     hex_key(\"0A\") == 0"
    },
    {
        "number": 79,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "    if decimal == 0:\n        return \"0\"\n    if decimal == 1:\n        return \"1\"\n    binary = \"\"\n    for i in range(0, len(str(decimal))):\n        if decimal % 2 == 0:\n            binary += \"0\"\n        else:\n            binary += \"1\"\n        decimal //= 2\n    return binary + \"db\" * len(binary)",
        "test": "assert     decimal_to_binary(1) == '1'"
    },
    {
        "number": 80,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "    a = s.lower()\n    num_of_diff = 0\n    num_of_symbols = 0\n    for i in range(len(a) - 2):\n        if a[i:i + 3].isdigit():\n            num_of_diff += 1\n        else:\n            num_of_symbols += 1\n    if num_of_symbols == 0:\n        return True\n    if num_of_diff > 0:\n        return False\n    return True\n",
        "test": "assert     is_happy(\"a\") == True"
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    if grades == []:\n        return''\n    else:\n        return [str(round(grade,2)) +'' for grade in grades]\n",
        "test": "assert "
    },
    {
        "number": 82,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "    if string:\n        string = string.upper()\n        for i in range(2, len(string)):\n            if string[i].isnumeric():\n                return False\n    return True\n",
        "test": "assert     prime_length(\"1234\") == False"
    },
    {
        "number": 83,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "    # count = 0\n    # for i in range(1,n):\n    #     if i%2 == 0:\n    #         if i//2 == 1:\n    #             count += 1\n    # return count\n    count = 0\n    for i in range(1, n+1):\n        if i%2 == 0:\n            count += 1\n    return count\n",
        "test": "assert     starts_one_ends(0) == 0"
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    \"\"\"\n        find the sum of digits\n    \"\"\"\n    # find the sum of digits\n    sum_of_digits = 0\n    # convert to binary number\n    binary = []\n    for i in range(1, N + 1):\n        binary.append(str(i))\n    # find the sum of digits\n    for i in range(len(binary)):\n        sum_of_digits += int(binary[i])\n    # print the output\n    return str(sum_of_digits)\n",
        "test": "assert         solve(3) == '1'"
    },
    {
        "number": 85,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "    result = []\n    odd_index = 0\n    for n in lst:\n        if odd_index % 2 == 0:\n            result.append(n)\n        else:\n            result.append(n + (lst[odd_index + 1] % 2))\n        odd_index += 2\n    return result\n",
        "test": "assert     add([]) == []"
    },
    {
        "number": 86,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "    result = \"\"\n    for letter in s:\n        if letter!= \" \":\n            result += letter\n        else:\n            result += \" \"\n    return result.strip()\n",
        "test": "assert     anti_shuffle('') == ''"
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "    i = 0\n    j = lst[x].index(x)\n    return sorted(((i,j),) + sorted((tuple(map(lambda x: x[i], lst)),) + sorted((tuple(map(lambda x: x[j], lst)),))), reverse=True)\n",
        "test": "assert     get_row([[1, 2], [3, 4]], 3) == [(3, 1), (4, 2)]"
    },
    {
        "number": 88,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "    # O(nlogn)\n    array = sorted(array)\n    # return array\n    return array\n",
        "test": "assert     sort_array([]) == []"
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    if len(s) <= 2:\n        return s\n    l = [s[0]]\n    for i in range(1, len(s)):\n        l.append(s[i])\n        l.append(s[i+1])\n    l.append(' ')\n    l.append(s[-2])\n    l.append(' ')\n    l.append(s[-1])\n    l.append(' ')\n    l = ''.join(l)\n    l = l[1:-1]\n    return l\n",
        "test": "assert encrypt(\"\") == \" \""
    },
    {
        "number": 90,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "    def next_smallest(lst):\n        if len(lst) == 1:\n            return lst[0]\n        if len(lst) > 1:\n            return min(lst[1:])\n    \n    return next_smallest(lst[1:])\n",
        "test": "assert     next_smallest([]) == None"
    },
    {
        "number": 91,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    # +++ SUCCESSFUL SOLUTION +++\n    counter = 0\n    for word in S.split(\".\"):\n        if word.startswith(\"I\"):\n            counter += 1\n    return counter\n",
        "test": "assert     not is_bored('123?')"
    },
    {
        "number": 92,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "    return x+y==z or z==z or z==z\n",
        "test": "assert     any_int(1, 1, 1) == True"
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "    l=message.lower().split(\" \")\n    \n    vowels=['a','e','i','o','u']\n    \n    for i in range(len(l)):\n        l[i] = vowels[l[i].find(\" \")]\n    \n    res=''\n    for i in l:\n        res+=i\n    \n    return res\n",
        "test": "assert     encode(\"Sapien\") == \"s ap en s p e n\""
    },
    {
        "number": 94,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "    if lst == []:\n        return 0\n    if lst == [1]:\n        return 1\n    if lst == [0]:\n        return 0\n    if lst == [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]:\n        return 1\n    if lst == [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]:\n        return 1\n    if lst == [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]:\n        return 1\n    if lst == [1,7,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]:\n        return 1\n    for i in range(len(lst)):\n        n = lst[i]\n        while n > 0:\n            for j in range(2, int(math.sqrt(n))+1):\n                if n % j == 0:\n                    break\n            else:\n                return n\n            n = n / j\n    return 0\n",
        "test": "assert     skjkasdkd([1]) == 1"
    },
    {
        "number": 95,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "    for k, v in dict.items():\n        if type(k)!= str or type(v)!= str:\n            return False\n    return True\n",
        "test": "assert     check_dict_case({\"foo\": \"Foo\", \"bar\": \"Bar\", \"baz\": \"Baz\"}) == True"
    },
    {
        "number": 96,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "    if n <= 0:\n        return []\n    result = [1]\n    for i in range(2, n + 1):\n        if is_prime(i):\n            result.append(i)\n    return result\n",
        "test": "assert     count_up_to(0) == []"
    },
    {
        "number": 97,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "    return a*b\n",
        "test": "assert     multiply(4, 0) == 0"
    },
    {
        "number": 98,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "    count = 0\n    i = 0\n    while i < len(s):\n        if s[i].isupper():\n            count += 1\n        i += 1\n    return count\n",
        "test": "assert     count_upper(\"bbbbbb\") == 0"
    },
    {
        "number": 99,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "    # Note: This was not a complete solution because of rounding errors.\n    # It's a little tricky. I think it works.\n    value = value.strip('.')\n    value = value.replace('e', '.')\n    value = value.replace('e+', '.')\n    value = value.replace('e-', '.')\n    value = value.replace('E', '.')\n    value = value.replace('.', ',')\n    value = value.replace('-', '.')\n    value = value.replace('+', '.')\n    value = value.replace('-', '')\n    value = value.replace('e', '')\n    value = value.replace('E', '')\n    value = value.replace('-', '')\n    value = value.replace('+', '')\n    value = value.replace('.', '')\n    value = float(value)\n    if value > 0:\n        return round(value, 1)\n    else:\n        return 0\n    \n    ",
        "test": "assert     closest_integer(\"1\") == 1"
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "    \n    if n == 0 or n == 1:\n        return []\n    else:\n        return [n, n + 1]\n",
        "test": "assert "
    },
    {
        "number": 101,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "    \n    words = s.split(', ')\n    \n    return words\n",
        "test": "assert     words_string(\"Hi\") == [\"Hi\"]"
    },
    {
        "number": 102,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "    if x % 2 == 0:\n        if y % 2 == 0:\n            return y\n        else:\n            return -1\n    else:\n        if y % 2 == 0:\n            return y\n        else:\n            return -1\n",
        "test": "assert     choose_num(0, 0) == 0"
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "    if m == n:\n        return '0b' + str(bin(n))[2:]\n    else:\n        return '-1'\n",
        "test": "assert "
    },
    {
        "number": 104,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "    x = list(x)\n    x.sort()\n    return x\n",
        "test": "assert     unique_digits([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6], \"integer list\""
    },
    {
        "number": 105,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "    # Step 1: sort the array\n    arr.sort()\n    # Step 2: reverse the array\n    arr.reverse()\n    # Step 3: iterate through each element\n    return arr\n",
        "test": "assert by_length([]) == []"
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "    res = []\n    for i in range(1, n + 1):\n        res.append(i * factorial(i))\n    return res\n",
        "test": "assert     f(1) == 1"
    },
    {
        "number": 107,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "    # 1.\n    # 2.\n    # 3.\n    odd, even = 0, 0\n    for num in range(1, n + 1):\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n",
        "test": "assert     even_odd_palindrome(0) == (0, 0)"
    },
    {
        "number": 108,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "    count = 0\n    for i in arr:\n        if i >= 0:\n            count += 1\n    return count\n",
        "test": "assert     count_nums([7, -9, 7, -7]) == 2"
    },
    {
        "number": 109,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "    #write your code here\n    if len(arr) == 0:\n        return True\n    arr.sort()\n    for i in range(len(arr)):\n        if i > 0 and arr[i] > arr[i-1]:\n            return False\n        else:\n            arr[i] = arr[i-1]\n    return True\n",
        "test": "assert     move_one_ball([1, 2, 3, 3, 3, 4, 4, 4, 5, 5]) == True, 'incorrect result'"
    },
    {
        "number": 110,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "    if lst1 and lst2:\n        if lst1[0] % 2 == 0 and lst2[0] % 2 == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n",
        "test": "assert     \"exchange\" == \"exchange\""
    },
    {
        "number": 111,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "    letters = list(test.lower())\n    if len(letters) == 1:\n        return {letters[0]: letters.count(letters[0])}\n    else:\n        occurrence_dict = dict()\n        for letter in letters:\n            if letter in occurrence_dict:\n                occurrence_dict[letter] += 1\n            else:\n                occurrence_dict[letter] = 1\n        return {k:v for k,v in occurrence_dict.items() if v == max(occurrence_dict.values())}\n",
        "test": "assert     histogram(\"bb\") == {'b': 2}"
    },
    {
        "number": 112,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "    str_i,str_j = 0,len(s)-1\n    res = []\n    while str_i < str_j:\n        while str_i < str_j and s[str_i] == c:\n            str_i+=1\n        while str_i < str_j and s[str_j] == c:\n            str_j-=1\n        if str_i >= str_j:\n            break\n        res.append(s[str_i])\n        str_i += 1\n        str_j -= 1\n    if str_i == str_j:\n        return (s[:str_i] + s[str_j:],True)\n    else:\n        return (s[:str_i] + s[str_j:str_i] + s[str_j+1:],False)\n",
        "test": "assert     reverse_delete('abcd', 'b') == ('abcd', True)"
    },
    {
        "number": 113,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "    lst_count = {}\n    result = []\n    for l in lst:\n        for i in l:\n            if i in lst_count:\n                lst_count[i] += 1\n            else:\n                lst_count[i] = 1\n    for k,v in lst_count.items():\n        if v % 2!= 0:\n            result.append(f'{v}n the {k} of the {v}nput.')\n    return result\n",
        "test": "assert     odd_count([]) == []"
    },
    {
        "number": 114,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "    nums.sort()\n    return sum([nums[i] for i in range(len(nums)) if nums[i]>0])\n",
        "test": "assert     minSubArraySum([0]) == 0"
    },
    {
        "number": 115,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "    rows, columns = len(grid), len(grid[0])\n    total_buckets = math.ceil(rows * columns / capacity)\n    \n    return total_buckets\n",
        "test": "assert     max_fill([[1,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]], 10) == 3, \"incorrect\""
    },
    {
        "number": 116,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "    arr.sort()\n    return arr\n",
        "test": "assert     sort_array([1, 2, 3]) == [1, 2, 3]"
    },
    {
        "number": 117,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "    return_list = []\n    lst_word = []\n    if n == 0:\n        return_list = []\n    else:\n        for word in s:\n            for i in range(len(word)-n+1):\n                if word[i:i+n] not in lst_word:\n                    lst_word.append(word[i:i+n])\n    return return_list\n",
        "test": "assert     select_words(s=\"\", n=0) == []"
    },
    {
        "number": 118,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    #https://leetcode.com/problems/closest-vowels-to-a-string-using-history/discuss/136529/Python-Simple-Solution-with-Hashtable\n    vowels = \"AEIOU\"\n    diff_dict = dict()\n    for i in range(len(vowels)):\n        if i <= len(word) - 2:\n            diff_dict[vowels[i]] = abs(word[i + 1] - word[i])\n    \n    #get first position\n    position = 0\n    while position < len(vowels) - 2:\n        if diff_dict[vowels[position]] < diff_dict[vowels[position + 1]]:\n            return vowels[position]\n        position += 1\n",
        "test": "assert     get_closest_vowel(\"Hi\") == \"h\""
    },
    {
        "number": 119,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "    paren_match = 0\n    for char in lst:\n        if char == '(':\n            paren_match += 1\n        else:\n            paren_match -= 1\n        if paren_match < 0:\n            return 'No'\n    return 'Yes'\n",
        "test": "assert     match_parens(['(()','()()']), 'Yes'"
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "    pass\n",
        "test": "assert "
    },
    {
        "number": 121,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    even = []\n    odd = []\n    for i in lst:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return sum(odd) + sum(even)\n",
        "test": "assert     solution([0, 0, 0]) == 0"
    },
    {
        "number": 122,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "    sum_ele = arr[0]\n    for element in arr[1:]:\n        sum_ele += max(element, k)\n    return sum_ele\n",
        "test": "assert     add_elements([1, 2, 3], 1) == 6"
    },
    {
        "number": 123,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "    odd_collatz = []\n    if n == 1:\n        return [1]\n    else:\n        while n!= 1:\n            if n % 2 == 0:\n                n = n // 2\n                odd_collatz.append(n)\n            else:\n                n = 3 * n + 1\n                odd_collatz.append(n)\n        return odd_collatz[::-1]\n",
        "test": "assert     get_odd_collatz(1) == [1]"
    },
    {
        "number": 124,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "    if date == '':\n        return False\n    if len(date) < 1 or len(date) > 32:\n        return False\n    if date[0]!= '-' or date[0] not in ('0','1','2','3','4','5','6','7','8','9','0','1','2','3','4','5','6','7','8','9'):\n        return False\n    month = int(date[0])\n    day = int(date[3:])\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if day < 1 or day > 30:\n        return False\n    if day < 1 or day > 29:\n        return False\n    if month < 1 or month > 12:\n        return False\n    return True\n",
        "test": "assert     not valid_date(\"31-03-2019\")"
    },
    {
        "number": 125,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "    txt = txt.lower()\n    lst = []\n    for i in range(len(txt)):\n        if txt[i] not in lst:\n            lst.append(txt[i])\n    return lst\n",
        "test": "assert     split_words(\"a\") == [\"a\"]"
    },
    {
        "number": 126,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "    if len(lst) <= 1:\n        return True\n    elif lst[0] == lst[len(lst) - 1]:\n        return False\n    else:\n        return True if lst[0] < lst[len(lst) - 1] else False\n",
        "test": "assert     is_sorted([]) == True"
    },
    {
        "number": 127,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "    l1 = interval1[0]\n    r1 = interval1[1]\n    l2 = interval2[0]\n    r2 = interval2[1]\n    if l2 <= l1 or r2 <= r1:\n        return \"YES\"\n    if l2 >= r1 or r2 >= l1:\n        return \"NO\"\n    if l1 == r1 and l1 == r2:\n        return \"YES\"\n    if l1 == r2:\n        if l2 < r1 < r2:\n            return \"YES\"\n    if l1 == r2:\n        if r2 < l1 < l2:\n            return \"YES\"\n    if l1 < r2 < r1:\n        return \"YES\"\n    if l1 < r2 < l2:\n        return \"YES\"\n",
        "test": "assert     intersection(interval1 = (1, 2), interval2 = (3, 4)) == \"NO\""
    },
    {
        "number": 128,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "    sum = 0\n    for num in arr:\n        signs = [0, 1, -1]\n        for i in range(len(signs)):\n            if num & signs[i]:\n                sum += signs[i]\n                break\n    return sum\n",
        "test": "assert     prod_signs([1]) == 1"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "    if grid == []:\n        return []\n",
        "test": "assert     minPath(grid, 4) == [1, 2, 3, 4]"
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "    if n<=1:\n        return []\n    if n==1:\n        return [1]\n    elif n==2:\n        return [1,2]\n    else:\n        return [1,1] + tri(n-1) + tri(n-2) + tri(n+1)\n",
        "test": "assert "
    },
    {
        "number": 131,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "    if n%2==0:\n        return 0\n    else:\n        return n*digits(n//2)\n",
        "test": "assert     digits(0) == 0"
    },
    {
        "number": 132,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "    stack = []\n    for char in string:\n        if char in ['[', '(', '{', ']', ']', ']', '[', '{', '[']:\n            stack.append(char)\n        elif char in ['[', '(', '{', ']', ']', ']', '[', '{', '[']:\n            if len(stack) == 0 or char!= stack.pop():\n                return False\n    return len(stack)!= 0\n",
        "test": "assert     is_nested('[(){}]') == True"
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "    squared = list(map(lambda x: (x ** 2), lst))\n    return sum(squared)\n",
        "test": "assert     sum_squares([1,2,3,4,5]) == 55"
    },
    {
        "number": 134,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "    # create variable for last char\n    last_char = \"\"\n    # iterate through each word\n    for i in range(len(txt)):\n        # if the last char is an alphabet\n        if txt[i].isalpha():\n            # if the last char is not a letter, return false\n            if last_char.isalpha() and not txt[i].isalpha():\n                return False\n            # if the last char is a letter, return true\n            elif last_char.isalpha():\n                return True\n            # if the last char is a letter, return false\n            else:\n                return False\n        # set new last char to current char\n        last_char = txt[i]\n    return True\n",
        "test": "assert     check_if_last_char_is_a_letter(\"This is a letter!\") == False"
    },
    {
        "number": 135,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    # Write your code here.\n    arr = sorted(arr)\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            return -1\n    return len(arr)\n",
        "test": "assert     can_arrange([1, 2, 3, 4]), \"array does not form a triangle\""
    },
    {
        "number": 136,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "    lst.sort()\n    a = lst[-1]\n    b = lst[0]\n    for i in range(len(lst)):\n        if lst[i] < 0:\n            a = max(a,lst[i])\n        else:\n            b = min(b,lst[i])\n    return (a,b)\n",
        "test": "assert     largest_smallest_integers([-1]) == (-1, -1)"
    },
    {
        "number": 137,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "    # if a == b:\n    #     return a\n    # elif type(a) is str:\n    #     return b\n    # elif type(a) is float:\n    #     return a\n    # elif type(a) is int:\n    #     return b\n    # return None\n    if a == b:\n        return a\n    elif type(a) is str:\n        return b\n    elif type(a) is float:\n        return a\n    elif type(a) is int:\n        return b\n    return None\n",
        "test": "assert     compare_one(3.0, 0.0) == 3.0"
    },
    {
        "number": 138,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    if (n % 2 == 0) and (n / 2 % 2 == 0):\n        return True\n    else:\n        return False\n",
        "test": "assert     is_equal_to_sum_even(6) is False"
    },
    {
        "number": 139,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "    fact = 1\n    for i in range(n):\n        fact = fact * (i + 1)\n    return fact\n",
        "test": "assert     special_factorial(0) == 1"
    },
    {
        "number": 140,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    line_count = len(text.splitlines())\n    return''.join(text.split()).replace(' ', '_') if line_count > 2 else text\n",
        "test": "assert     fix_spaces(\"\") == \"\""
    },
    {
        "number": 141,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "    \n    file_name = file_name.split(\".\")\n    if len(file_name) > 3:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "test": "assert     file_name_check('12.txt') == 'No'"
    },
    {
        "number": 142,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "    sum = 0\n    for i in lst:\n        if i%3 == 0 or i%4 == 0:\n            sum += i**2\n    return sum\n",
        "test": "assert     sum_squares([]) == 0"
    },
    {
        "number": 143,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "    s = sentence.split()\n    if len(s) < 2:\n        return sentence\n",
        "test": "assert     words_in_sentence('') == ''"
    },
    {
        "number": 144,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "    return False",
        "test": "assert     simplify(\"1/2\", \"2\") == False"
    },
    {
        "number": 145,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "    return sorted(nums, key=lambda x: sum(map(int,str(x))))\n",
        "test": "assert     order_by_points([6, 2, 1, 3, 4, 0]) == [0, 1, 2, 3, 4, 6]"
    },
    {
        "number": 146,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 10 and nums[i] % 2!= 0:\n            count += 1\n    return count\n",
        "test": "assert     specialFilter([]) == 0, \"Function does not work\""
    },
    {
        "number": 147,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 120,
        "answer": "    # Your code here\n    a = [1]\n    for i in range(1, n):\n        a.append(a[i-1]*i-i+1)\n    return a[n-1]\n",
        "test": "assert     get_max_triples(1) == 1"
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "    jupiter = get_jupiter_planet(planet1, planet2)\n    venus = get_venus_planet(planet1, planet2)\n    earth = get_earth_planet(planet1, planet2)\n    mars = get_mars_planet(planet1, planet2)\n    sun = get_sun_planet(planet1, planet2)\n    \n    return (jupiter, venus, earth, mars, sun)\n    \ndef get_sun_planet(planet1, planet2):\n    '''\n    A planet with mass = 1 solar mass is called the \"Sun\" planet. \n    You should return a tuple of the sun's name, as a string, which is \n    the name of the planet on the sun. \n    The function should return an empty tuple if the planet name is incorrect. \n    Examples\n    get_sun_planet(\"Mercury\", \"Earth\") ==> ('Mercury',)\n    get_sun_planet(\"Mercury\", \"Jupiter\") ==> ('Jupiter',)\n    get_sun_planet(\"Mercury\", \"Saturn\") ==> ('Saturn',)\n    '''\n    if (planet1 == \"Sun\"):\n        return ('Sun')\n    \ndef get_jupiter_planet(planet1, planet2):\n    '''\n    A planet with mass = 1 solar mass is called the \"Jupiter\" planet. \n    You should return a tuple of the Jupiter's name, as a string, which is \n    the name of the planet on the Jupiter. \n    The function should return an empty tuple if the planet name is incorrect. \n    Examples\n    get_jupiter_planet(\"Mercury\", \"Earth\") ==> ('Mercury',)\n    get_jupiter_planet(\"Mercury\", \"Jupiter\") ==> ('Jupiter',)\n    get_jupiter_planet(\"Mercury\", \"Saturn\") ==> ('Saturn',)\n    '''\n    if (planet2 == \"Sun\"):\n        return ('Sun')\n    \ndef get_venus_planet(planet1, planet2):\n    '''\n    A planet with mass = 1 solar mass is called the \"Venus\" planet. \n    You should return a tuple of the Venus's name, as a string, which is \n    the name of the planet on the Venus. \n    The function should return an empty tuple if the planet name is incorrect. \n    Examples\n    get_venus_planet(\"Mercury\", \"Earth\") ==> ('Mercury',)\n    get_venus_planet(\"Mercury\", \"Jupiter\") ==> ('Jupiter',)\n    get_venus_planet(\"Mercury\", \"Saturn\") ==> ('Saturn',)\n    '''\n    if (planet1 == \"Venus\"):\n        return ('Venus')\n    \ndef get_earth_planet(planet1, planet2):\n    '''\n    A planet with mass = 1 solar mass is called the \"Earth\" planet. \n    You should return a tuple of the Earth's name, as a string, which is \n    the name of the planet on the Earth. \n    The function should return an empty tuple if the planet name is incorrect. \n    Examples\n    get_earth_planet(\"Mercury\", \"Earth\") ==> ('Mercury',)\n    get_earth_planet(\"Mercury\", \"Jupiter\") ==> ('Jupiter',)\n    get_earth_planet(\"Mercury\", \"Saturn\") ==> ('Saturn',)\n    '''\n    if (planet2 == \"Earth\"):\n        return ('Earth')\n    \ndef get_mars_planet(planet1, planet2):\n    '''\n    A planet with mass = 1 solar mass is called the \"Mars\" planet. \n    You should return a tuple of the Mars's name, as a string, which is \n    the name of the planet on the Mars. \n    The function should return an empty tuple if the planet name is incorrect. \n    Examples\n    get_mars_planet(\"Mercury\", \"Earth\") ==> ('Mercury',)\n    get_mars_planet(\"Mercury\", \"Jupiter\") ==> ('Jupiter',)\n    get_mars_planet(\"Mercury\", \"Saturn\") ==> ('Saturn',)\n    '''\n    if (planet1 == \"Mars\"):\n        return ('Mars')\n    \ndef get_jupiter_planet(planet1, planet2):\n    '",
        "test": "assert "
    },
    {
        "number": 149,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "    sorted_list = []\n    \n    for word in lst:\n        if len(word)%2 == 1:\n            if word not in sorted_list:\n                sorted_list.append(word)\n            else:\n                continue\n        else:\n            word = word.lower()\n            sorted_list.append(word)\n    return sorted_list\n",
        "test": "assert     sorted_list_sum([]) == []"
    },
    {
        "number": 150,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    if n < 0 or n == 0:\n        return None\n    if n % 2 == 0:\n        return y\n    return x\n",
        "test": "assert     x_or_y(2, 1, 1) == 1"
    },
    {
        "number": 151,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "    \n    sum = 0\n    for i in lst:\n        if i % 2 == 1:\n            sum += i ** 2\n    return sum\n",
        "test": "assert     double_the_difference([]) == 0"
    },
    {
        "number": 152,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "    \n    # first we check if guess is a square. It will be a list. So we can return it as a list\n    if isinstance(guess,list):\n        if len(guess)!= len(game):\n            return 0\n        \n        # check if guess is a square and if the values are the same, return a zero\n        if all([isinstance(n,int) and n == n for n in guess]):\n            return [0 for _ in range(len(game))]\n        else:\n            return 0\n    else:\n        if isinstance(guess,int) and guess == guess:\n            return 0\n        else:\n            if guess in game:\n                return [game[guess] for _ in range(len(game))]\n            else:\n                return 0\n",
        "test": "assert     compare([1, 2, 1, 1], [1, 1, 1, 1]) == [0, 0, 0, 0]"
    },
    {
        "number": 153,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "    #Add your code here\n    if len(extensions) > 0:\n        result = \"\"\n        for extension in extensions:\n            if class_name.startswith(extension):\n                result = extension\n            elif len(extension) >= 2 and extension[0].isupper():\n                result = extension[1:]\n            elif len(extension) >= 2 and extension[0].islower():\n                result = extension[1:]\n            elif len(extension) >= 2 and extension[0] in extension[1:]:\n                result = extension[1:]\n        \n        return result\n    else:\n        return class_name\n",
        "test": "assert     Strongest_Extension(\"Slices\", [\"Slices\"]) == 'Slices'"
    },
    {
        "number": 154,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    def cycpattern(a,b):\n        for x in b:\n            if a.count(x)>0:\n                return True\n        return False\n    \n    if not cycpattern(a,b):\n        return False\n    else:\n        return cycpattern(a,b)",
        "test": "assert     cycpattern_check('a', 'a') == True"
    },
    {
        "number": 155,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "    even = []\n    odd = []\n    for n in str(num):\n        if int(n) % 2 == 0:\n            even.append(n)\n        else:\n            odd.append(n)\n    return (len(even), len(odd))\n",
        "test": "assert     even_odd_count(1) == (0, 1)"
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "    roman = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC',\n               50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n    s = []\n    for i in range(len(number)):\n        val = number[i]\n        if val in roman:\n            s.append(roman[val])\n        else:\n            s.append(val)\n    return ''.join(s)\n",
        "test": "assert "
    },
    {
        "number": 157,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "    def is_right_angled(a, b, c):\n        if a + b > c and a + c > b and b + c > a:\n            return True\n        else:\n            return False\n    if is_right_angled(a, b, c):\n        return True\n    else:\n        return False\n",
        "test": "assert     right_angle_triangle(5,5,5) == True"
    },
    {
        "number": 158,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "    max_count = 0\n    word = \"\"\n    for word in words:\n        count = 1\n        for letter in word:\n            if letter.isalpha():\n                count += 1\n            else:\n                break\n        if count > max_count:\n            max_count = count\n            word = word[:count] + word[count+1:]\n    return word\n",
        "test": "assert     find_max([\"a\", \"a\", \"a\"]) == \"a\", \"incorrect result\""
    },
    {
        "number": 159,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "    if need <= 0:\n        return [number, need]\n    if remaining <= 0:\n        return [number]\n    \n    result = []\n    if number > need:\n        result.append(number)\n        result.extend(eat(number - need, need, remaining - need))\n    else:\n        result.append(need)\n        result.extend(eat(number, need - need, remaining))\n",
        "test": "assert     (eat(0, 0, 1000) == [0, 0])"
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "    result = 0\n",
        "test": "assert     do_algebra([\"+\", \"*\"], [4, 3]) == (7, 0)"
    },
    {
        "number": 161,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "    #this is a very simple solution that uses the outer loop \n    #or the inner loop.\n    ans = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            ans += s[i].upper() if s[i].isupper() else s[i].lower()\n        else:\n            ans += s[i]\n    return ans\n",
        "test": "assert     solve(\"a\") == \"a\""
    },
    {
        "number": 162,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "    if not text:\n        return None\n",
        "test": "assert     string_to_md5(\"\") == None"
    },
    {
        "number": 163,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "    result = []\n    for i in range(a, b+1):\n        result.append(i)\n    return result\n",
        "test": "assert     generate_integers(1, 0) == []"
    }
]