[
    {
        "number": 0,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    for i in numbers:\n        for j in numbers:\n            if abs(i - j) < threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([1, 2, 3, 4, 5], 2) == True"
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # The string passed into this function is an array of strings.\n    # Each string in the array is a group of parentheses separated by commas.\n    # The number of parentheses in the group is the number of parentheses that follow it in the\n    # string.\n    # print(type(paren_string))\n    # print(type(separate_paren_groups(paren_string)))\n    separate_paren_groups_array = []\n    current_group = \"\"\n    i = 0\n    while i < len(paren_string):\n        # Check if the current group is a closing parenthesis\n        if paren_string[i] == '(':\n            current_group += ')'\n            separate_paren_groups_array.append(current_group)\n            i += 1\n            current_group = \"\"\n        # Check if the current group is a parenthesis\n        if paren_string[i] == ')':\n            current_group += ')'\n            separate_paren_groups_array.append(current_group)\n            i += 1\n            current_group = \"\"\n        else:\n            current_group += paren_string[i]\n            i += 1\n    separate_paren_groups_array.append(current_group)\n    return separate_paren_groups_array\n",
        "test": "assert     separate_paren_groups(\"(){(])}[][]\") == [\"[\", \"]\", \"(\", \"]\"]"
    },
    {
        "number": 2,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return number - number % 1\n",
        "test": "assert     truncate_number(0.0000000) == 0"
    },
    {
        "number": 3,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    # Your code here\n    if len(operations) == 0:\n        return True\n    else:\n        for operation in operations:\n            if operation < 0:\n                return False\n        return True\n",
        "test": "assert     below_zero([0, 0]) == True"
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    mean = sum(numbers) / len(numbers)\n    sum_of_squares = 0.0\n    for number in numbers:\n        sum_of_squares += (number - mean) ** 2\n    return (sum_of_squares ** 0.5) / len(numbers)\n",
        "test": "assert     mean_absolute_deviation([1, 1, 0, 0]) == 0.25"
    },
    {
        "number": 5,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return [x for x in numbers + [delimeter] for y in intersperse([x], delimeter) for x in y]\n",
        "test": "assert "
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    result = []\n    for paren in paren_string.split('()()()'):\n        level = 0\n        for ch in paren:\n            if ch == '(':\n                level += 1\n            elif ch == ')':\n                level -= 1\n                if level == 0:\n                    result.append(level)\n        if level!= 0:\n            result.append(level)\n    return result\n",
        "test": "assert     parse_nested_parens(\"(())\") == [2, 3, 4]"
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    return [s for s in strings if substring in s]\n",
        "test": "assert     filter_by_substring([\"one\", \"two\", \"three\", \"four\"], \"thr\")"
    },
    {
        "number": 8,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return (sum(numbers), product(numbers))\n",
        "test": "assert     sum_product([3, 6, -2]) == (0, 1)"
    },
    {
        "number": 9,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    maximum = 0\n    res = []\n",
        "test": "assert     numbers[0] == 1 or numbers[0] == 2"
    },
    {
        "number": 10,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    # start with the string\n    palindrome = ''\n    # create a slice of string\n    str_slice = slice(0, len(string))\n    # iterate through the slice, and copy string to palindrome\n    for char in string:\n        palindrome = palindrome + char\n        if len(palindrome) > len(string) - 1:\n            # if the palindrome has more than the length of the string, create a string prefix that is the left side\n            # of the palindrome\n            # TODO: will be faster with this loop\n            palindrome = palindrome[:len(string)] + string[str_slice]\n            # remove the left side of the palindrome\n            palindrome = palindrome[:len(string) - 1]\n            # append the palindrome to the end of the string\n            string = palindrome\n        # if it is not a palindrome, move on to the next index\n        else:\n            # append the left side of the palindrome\n            palindrome = palindrome[:str_slice] + string[str_slice]\n            string = palindrome\n    return string\n",
        "test": "assert     is_palindrome(string = \"gfafadgf\") == False"
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    a_list = list(a)\n    b_list = list(b)\n    a_list[0] = int(a_list[0]) ^ int(b_list[0])\n    a_list[1] = int(a_list[1]) ^ int(b_list[1])\n    a_list[2] = int(a_list[2]) ^ int(b_list[2])\n    a_list[3] = int(a_list[3]) ^ int(b_list[3])\n    a_list[4] = int(a_list[4]) ^ int(b_list[4])\n    a_list[5] = int(a_list[5]) ^ int(b_list[5])\n    a_list[6] = int(a_list[6]) ^ int(b_list[6])\n    a_list[7] = int(a_list[7]) ^ int(b_list[7])\n    a_list[8] = int(a_list[8]) ^ int(b_list[8])\n    a_list[9] = int(a_list[9]) ^ int(b_list[9])\n    a_list[10] = int(a_list[10]) ^ int(b_list[10])\n    a_list[11] = int(a_list[11]) ^ int(b_list[11])\n    a_list[12] = int(a_list[12]) ^ int(b_list[12])\n    a_list[13] = int(a_list[13]) ^ int(b_list[13])\n    a_list[14] = int(a_list[14]) ^ int(b_list[14])\n    a_list[15] = int(a_list[15]) ^ int(b_list[15])\n    a_list[16] = int(a_list[16]) ^ int(b_list[16])\n    a_list[17] = int(a_list[17]) ^ int(b_list[17])\n    a_list[18] = int(a_list[18]) ^ int(b_list[18])\n    a_list[19] = int(a_list[19]) ^ int(b_list[19])\n    a_list[20] = int(a_list[20]) ^ int(b_list[20])\n    a_list[21] = int(a_list[21]) ^ int(b_list[21])\n    a_list[22] = int(a_list[22]) ^ int(b_list[22])\n    a_list[23] = int(a_list[23]) ^ int(b_list[23])\n    a_list[24] = int(a_list[24]) ^ int(b_list[24])\n    a_list[25] = int(a_list[25]) ^ int(b_list[25])\n    a_list[26] = int(a_list[26]) ^ int(b_list[26])\n    a_list[27] = int(a_list[27]) ^ int(b_list[27])\n    a_list[28] = int(a_list[28]) ^ int(b_list[28])\n    a_list[29] = int(a_list[29]) ^ int(b_list[29])\n    a_list[30] = int(a_list[30]) ^ int(b_list[30])\n    a_list[31] = int(a_list[31]) ^ int(b_list[31])\n    a_list[32] = int(a_list[32]) ^ int(b_list[32])\n    a_list[33] = int(a_list[33]) ^ int(b_list[33])\n    a_list[34] = int(a_list[34]) ^ int(b_list[34])\n    a_list[35] = int(a_list[35]) ^ int(b_list[35])\n    a_list[36] = int(a_list[36]) ^ int(b_list[36])\n    a_list[37] = int(a_list[37]) ^ int(b_list[37])\n    a_list[38] = int(a_list[38]",
        "test": "assert     string_xor(b'111', b'0') == '0'"
    },
    {
        "number": 12,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if strings:\n        if len(strings) > 1:\n            return max(strings, key=len)\n        else:\n            return strings[0]\n    else:\n        return None\n",
        "test": "assert          longest(['', 'a']) == 'a'"
    },
    {
        "number": 13,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    return  min(a, b) // max(a, b)\n",
        "test": "assert     greatest_common_divisor(3, 3) == 1"
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return [prefix for prefix in string.split(' ') if len(prefix) > 0]\n",
        "test": "assert     all_prefixes('abc') == ['abc']"
    },
    {
        "number": 15,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    # Concatenate each number with spaces\n    return''.join([str(i) for i in range(n)])\n",
        "test": "assert     string_sequence(10) == \"0123456789\""
    },
    {
        "number": 16,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    #  time complexity: O(N)\n    #  space complexity: O(N)\n    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters('abccba') == 3"
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    notes = []\n    notes.append(int(music_string[0]))\n    notes.append(int(music_string[1]))\n    notes.append(int(music_string[2]))\n    notes.append(int(music_string[3]))\n    notes.append(int(music_string[4]))\n",
        "test": "assert "
    },
    {
        "number": 18,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    count = 0\n    #print(string)\n    for i in range(len(string)):\n        if string[i] == substring:\n            count += 1\n    return count\n",
        "test": "assert         how_many_times(\"abc\", \"c\") == 1"
    },
    {
        "number": 19,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    if numbers == 'zero':\n        return 'zero'\n    elif numbers == 'one':\n        return 'one'\n    elif numbers == 'two':\n        return 'two'\n    elif numbers == 'three':\n        return 'three'\n    elif numbers == 'four':\n        return 'four'\n    elif numbers == 'five':\n        return 'five'\n    elif numbers =='six':\n        return'six'\n    elif numbers =='seven':\n        return'seven'\n    elif numbers == 'eight':\n        return 'eight'\n    elif numbers == 'nine':\n        return 'nine'\n",
        "test": "assert     sort_numbers(\"zero\") == \"zero\""
    },
    {
        "number": 20,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    numbers.sort()\n    smaller = numbers[0]\n    larger = numbers[-1]\n    return (smaller, larger)\n",
        "test": "assert     find_closest_elements([1,2]) == (1.0, 2.0)"
    },
    {
        "number": 21,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return [n / sum(n) for n in numbers]\n",
        "test": "assert     rescale_to_unit([]) == []"
    },
    {
        "number": 22,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return [x for x in values if isinstance(x, int)]\n",
        "test": "assert     filter_integers([]) == []"
    },
    {
        "number": 23,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return len(string)\n",
        "test": "assert         strlen(\"python\")"
    },
    {
        "number": 24,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    divs = [i for i in range(1, n + 1) if n % i == 0]\n    return max(divs)\n",
        "test": "assert "
    },
    {
        "number": 25,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    #if given number is not divisible by any of the factors then it is not prime\n    if n == 0 or n == 1:\n        return []\n",
        "test": "assert     factorize(1) == []"
    },
    {
        "number": 26,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    \n    # Loop through the list and remove elements that occur more than once\n    def helper(numbers: List[int]) -> List[int]:\n        \n        # Create a set to hold the indexes of elements that appear more than once\n        seen_set = set(numbers)\n        \n        # Loop through the list and find the number that occurs more than once\n        for index in range(len(numbers)):\n            if numbers[index] in seen_set:\n                # If the element is the first occurrence of the element,\n                # remove it from the set and add it to the output list\n                if index == 0:\n                    numbers[index] = None\n                # If the element is not the first occurrence, just add it to the set\n                else:\n                    seen_set.add(numbers[index])\n                    numbers[index] = None\n        \n        return numbers\n    \n    return helper(numbers)\n",
        "test": "assert     remove_duplicates([]) == []"
    },
    {
        "number": 27,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return string.lower() + string.upper()\n",
        "test": "assert     flip_case('python') == 'PYTHON'"
    },
    {
        "number": 28,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    result = ''\n    for string in strings:\n        result += string\n    return result\n",
        "test": "assert     concatenate([\"a\", \"b\", \"c\"]) == \"abc\""
    },
    {
        "number": 29,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    # https://leetcode.com/problems/string-compare/\n    \"\"\"\n    # FIND ITEM IN LIST\n    #\n    # IF LIST SIZE\n    #     AND NEXT ITEM IS NOT A STARTED\n    #     THE NEXT ITEM\n    #         STARTED ITEM TO GET\n    #\n    # SET NEXT_ITEM = NEXT ITEM + 1\n    #     IF NEXT_ITEM IS NOT in LIST\n    #             START ITEM TO NEXT\n    #\n    # ENSURE LIST IS A SORT OF ITS FIRST ELEMENT\n    #\n    # IF LIST IS SORTED \n    #     PROPERTIES LIST SORTED\n    #         PRINT NEXT ITEM\n    #         PRINT NEXT ITEM\n    #         PRINT NEXT ITEM\n    #\n    # RESET NEXT\n    #     NEXT ITEM = NEXT ITEM + 1\n    #\n    # FIND NEXT ITEM\n    #     IF NEXT ITEM IS IN LIST\n    #         START ITEM TO NEXT\n    #\n    # IF NEXT ITEM IS NOT IN LIST\n    #     PRINT NEXT ITEM\n    #\n    # ELSE\n    #     START ITEM TO NEXT\n    #\n    # BREAK IF END OF LIST\n    #\n    # IF NEXT ITEM IS IN LIST\n    #     NEXT ITEM = NEXT ITEM + 1\n    #\n    # BREAK IF NEXT ITEM IS NOT IN LIST\n    #\n    # IF NEXT ITEM IS NOT IN LIST\n    #     PRINT NEXT ITEM\n    #\n    # BREAK IF END OF LIST\n    #\n    # ENSURE LIST IS A SORT OF ITS FIRST ELEMENT\n    #\n    # IF LIST IS SORTED\n    #     PROPERTIES LIST SORTED\n    #         PRINT NEXT ITEM\n    #         PRINT NEXT ITEM\n    #         PRINT NEXT ITEM\n    #\n    # RESET NEXT\n    #     NEXT ITEM = NEXT ITEM + 1\n    #\n    # IF NEXT ITEM IS IN LIST\n    #     PRINT NEXT ITEM\n    #\n    # IF NEXT ITEM IS NOT IN LIST\n    #     PRINT NEXT ITEM\n    #\n    # BREAK IF END OF LIST\n    #\n    # IF NEXT ITEM IS NOT IN LIST\n    #     NEXT ITEM = NEXT ITEM + 1\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # ELSE\n    #     NEXT ITEM = NEXT ITEM + 1\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF EN",
        "test": "assert     filter_by_prefix([\"abcdefghijk\", \"abcdefghijk\", \"abcdefghijk\", \"abcdefghijk\", \"abcdefghijk\", \"abcdefghijk\", \"abcdefghijk\"], \"ijk\") == [\"abcdefghijk\"]"
    },
    {
        "number": 30,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    positive = []\n    for n in l:\n        if n > 0:\n            positive.append(n)\n    return positive\n",
        "test": "assert     get_positive([]) == []"
    },
    {
        "number": 31,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    for i in range(2, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(3) == True"
    },
    {
        "number": 32,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    x = poly(xs, 0)\n    if x < 0:\n        return 0\n    return x\n",
        "test": "assert     find_zero([1, 1, 1, 1, 1, 0, 1]) == 1"
    },
    {
        "number": 33,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    res = []\n    for i in range(len(l)):\n        res.append(l[i])\n        if i % 3 == 0:\n            res[i] = l[i//3]\n    return res",
        "test": "assert     sort_third([\"a\",\"b\",\"c\"]) == [\"a\",\"b\",\"c\"]"
    },
    {
        "number": 34,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return list(set(l))\n",
        "test": "assert     unique([1,2,3,4,1,2,3,4,1,2,3,4]) == [1,2,3,4]"
    },
    {
        "number": 35,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    max = None\n    for i in l:\n        if max == None or i > max:\n            max = i\n    return max\n",
        "test": "assert     max_element([1, 2, 3, 4, 5]) == 5"
    },
    {
        "number": 36,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    count = 0\n    for i in range(1, n + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            count += 1\n        elif i % 3 == 0:\n            count += 1\n        elif i % 5 == 0:\n            count += 1\n    return coun",
        "test": "assert     fizz_buzz(7) == 0"
    },
    {
        "number": 37,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    \n    odd_index = 0\n    even_index = 0\n",
        "test": "assert     sort_even([5, 3, 4, 2, 1]) == [1, 2, 3, 4, 5]"
    },
    {
        "number": 38,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     decode_cyclic(\"xxxxx\") == \"xxxxx\""
    },
    {
        "number": 39,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    a = 2\n    b = 3\n    if n < 2:\n        return n\n    elif n == 2:\n        return 1\n    while True:\n        c = a + b\n        if c > n:\n            return n\n        elif c == n:\n            return a\n        else:\n            a = b\n            b = c\n            if a % b == 0:\n                return a\n",
        "test": "assert     prime_fib(3) == 3"
    },
    {
        "number": 40,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if len(l) == 3:\n        if l[0] + l[1] == l[2]:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     triples_sum_to_zero([5, 5, 5]) == False"
    },
    {
        "number": 41,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    # TODO:\n    # Write your solution here\n    if n == 1:\n        return 0\n    return n\n",
        "test": "assert     (car_race_collision(3) == 3)"
    },
    {
        "number": 42,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return [x+1 for x in l]\n",
        "test": "assert     incr_list([1, 2, 3]) == [2, 3, 4]"
    },
    {
        "number": 43,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    return not any(a == b for a, b in zip(l, l[1:]))\n",
        "test": "assert     pairs_sum_to_zero([1,2,3,4,5]) == True"
    },
    {
        "number": 44,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if base == 2:\n        return '%d%s' % (x, base)\n    elif base == 3:\n        return '%d%s%d' % (x, base, 1)\n    elif base == 4:\n        return '%d%s%d' % (x, base, 2)\n    elif base == 5:\n        return '%d%s%d' % (x, base, 3)\n    elif base == 6:\n        return '%d%s%d' % (x, base, 4)\n    elif base == 7:\n        return '%d%s%d' % (x, base, 5)\n    elif base == 8:\n        return '%d%s%d' % (x, base, 6)\n    elif base == 9:\n        return '%d%s%d' % (x, base, 7)\n    elif base == 10:\n        return '%d%s%d%d' % (x, base, 9, 1)\n    else:\n        raise ValueError('Invalid base')\n",
        "test": "assert     change_base(5, 10) == \"5\""
    },
    {
        "number": 45,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return 0.5*a*h\n",
        "test": "assert     triangle_area(20, 10) == 200"
    },
    {
        "number": 46,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(0) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    \n    # sort the list l and get the median\n    l.sort()\n    return l[len(l) // 2]\n    \ndef quantile(l: list):\n    \"\"\"Return a list of the first n elements of l with the largest absolute value.\n    >>> quantile([0, -1, 2, -5, 1])\n    [0, 1, 2, 3]\n    \"\"\"\n    if len(l) == 0:\n        return []\n    \n    # find the index of the largest value in the list\n    l.sort()\n    largest_val = max(l)\n    return [x for x, y in enumerate(l) if y == largest_val]\n    \ndef stats(l: list):\n    \"\"\"Return a dictionary with the following statistics:\n    median = median(l)\n    quantile = quantile(l)\n    std = (sum(l)/len(l))**0.5\n    mean = mean(l)\n    variance = variance(l)\n    \n    The keys in the dictionary are the names of the functions and the values are the\n    statistics that they return.\n    \"\"\"\n    median = median(l)\n    quantile = quantile(l)\n    return {\n        \"median\": median,\n        \"quantile\": quantile,\n        \"std\": statistics.pstdev(l),\n        \"mean\": statistics.mean(l),\n        \"variance\": statistics.variance(l)\n    }\n",
        "test": "assert     median([1, 2, 3, 4, 5, 6, 7, 8]) == 5"
    },
    {
        "number": 48,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if text == \"\":\n        return True\n    else:\n        # split text into list\n        # iterate through characters in string\n        for char in text:\n            # check if char is a palindrome\n            if char!= char[::-1]:\n                return False\n        return True\n",
        "test": "assert     is_palindrome('t') == True"
    },
    {
        "number": 49,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    # e.g., 8^3 = 1^3 mod 101\n    # special case: e.g. 101 = 2^0 mod 101\n    if n == 1:\n        return 1\n    # e.g., 2^0 mod 101 = 1^0 mod 101\n    # special case: e.g. 101 = 2^1 mod 101\n    elif n == 2:\n        return 2\n    else:\n        r = 0\n        for i in range(0, n):\n            r += (pow(n, 2, p)) % p\n        return r % p\n    \ndef modinv(n: int, p: int):\n    \"\"\"Return modulo of n by p modulo p (be aware of numerics).\n    >>> modinv(88, 101)\n    7\n    >>> modinv(2, 11)\n    2\n    >>> modinv(3, 101)\n    3\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        # e.g., 2^0 mod 101 = 1^0 mod 101\n        # special case: e.g. 101 = 2^1 mod 101\n        if n == 2:\n            return modp(1, p)\n        else:\n            r = 0\n            for i in range(0, n):\n                r += pow(n, 2, p) % p\n            return modp(r, p)\n        \ndef add(a: int, b: int, p: int):\n    \"\"\"Return (a + b) modulo p.\n    >>> add(1, 3, 11)\n    9\n    >>> add(1, 3, 101)\n    9\n    >>> add(0, 0, 101)\n    1\n    \"\"\"\n    # e.g., 1 + 3 = 5 mod 101\n    # special case: e.g. 101 = 2^0 mod 101\n    if a == b == 0:\n        return 0\n    else:\n        return modinv(a + b, p)\n",
        "test": "assert         modp(1,10) == 1"
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     (decode_shift(\"1234\") == \"123\")"
    },
    {
        "number": 51,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    vowels = 'aeiou'\n    text = text.lower()\n    text = text.replace(\" \",\"\")\n    return \"\".join([vowels[i] if i not in vowels else \"\" for i in text])\n",
        "test": "assert     remove_vowels(\"All of the All of the \") == \"All of the All of the\""
    },
    {
        "number": 52,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    # TODO: modify so that this function returns True for numbers below t\n    if l:\n        for num in l:\n            if num < t:\n                return False\n        return True\n    return False\n",
        "test": "assert     below_threshold(list(range(1, 10)), 5) is False,     \"should return False\""
    },
    {
        "number": 53,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3"
    },
    {
        "number": 54,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return s0 == s1 or s0 in s1\n",
        "test": "assert     not     same_chars(\"ab\", \"a\")"
    },
    {
        "number": 55,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    \n    \n    \n    fibo = 0\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        for i in range(2, n):\n            fibo = fib + fib\n        return fibo",
        "test": "assert     fib(1) == 1"
    },
    {
        "number": 56,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n        elif bracket == \">\" or bracket == \">>\":\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return True\n",
        "test": "assert correct_bracketing(')<>') == False"
    },
    {
        "number": 57,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    if not l: return True\n    # Check if any element is increasing\n    for i in range(len(l)-1):\n        if l[i+1] < l[i]:\n            return False\n    return True\n",
        "test": "assert         monotonic([1, 4, 2, 0]) == False"
    },
    {
        "number": 58,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return sorted(set(l1) & set(l2))\n",
        "test": "assert     common([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"],[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"]) == [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"]"
    },
    {
        "number": 59,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        k = 2\n        while k * k <= n:\n            if n % k == 0:\n                n //= k\n                continue\n            else:\n                k += 1\n    return n\n",
        "test": "assert     largest_prime_factor(125) == 5"
    },
    {
        "number": 60,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    s = 0\n    for i in range(1, n+1):\n        s += i\n    return s\n",
        "test": "assert     sum_to_n(0) == 0"
    },
    {
        "number": 61,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return all(True if c == \"(\" or c == \")\" else False for c in brackets)\n",
        "test": "assert     (correct_bracketing(\"()\") == True)"
    },
    {
        "number": 62,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    sum = 0\n    for i in range(len(xs)):\n        sum += xs[i] * (i + 1)\n    return sum\n",
        "test": "assert     derivative([1, 0, 0]) == 1"
    },
    {
        "number": 63,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if n == 0 or n == 1:\n        return 0\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0, \"The fibfib sequence is incorrect\""
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n",
        "test": "assert "
    },
    {
        "number": 65,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if shift > len(str(x)):\n        return str(x)\n    else:\n        if shift < len(str(x)):\n            return str(x)[-shift:]\n        else:\n            return str(x)[-shift:] + str(x)[:len(str(x))-shift]",
        "test": "assert     circular_shift(1, 1) == \"1\""
    },
    {
        "number": 66,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    sum = 0\n    for i in s:\n        sum += int(i)\n    return sum\n",
        "test": "assert     digitSum(\"\") == 0"
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if s == \"\":\n        return \"0\"\n    elif n == \"\":\n        return \"0\"\n    elif n == \"0\":\n        return s[0]\n    elif n == \"1\":\n        return s[1]\n    elif n == \"2\":\n        return s[2]\n    elif n == \"3\":\n        return s[3]\n    elif n == \"4\":\n        return s[4]\n    elif n == \"5\":\n        return s[5]\n    elif n == \"6\":\n        return s[6]\n    elif n == \"7\":\n        return s[7]\n    elif n == \"8\":\n        return s[8]\n    elif n == \"9\":\n        return s[9]\n    else:\n        if s[0] == \"1\" or s[0] == \"2\":\n            return s[0]\n        elif s[0] == \"3\" or s[0] == \"4\":\n            return s[0]\n        else:\n            return s[0]\n",
        "test": "assert     fruit_distribution('4a',3) == 0"
    },
    {
        "number": 68,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    arr = list(map(int, arr))\n    index = 0\n    while index < len(arr):\n        if arr[index] % 2 == 0:\n            arr[index] = arr[index]//2\n            index = index + 1\n        else:\n            index = index + 1\n    return arr\n",
        "test": "assert     \"2\" in str(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
        "number": 69,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    def is_greater_than_zero(n):\n        if n > 0:\n            return True\n        return False\n    \n    n = len(lst)\n    # get all the numbers in the list\n    num_list = []\n    for i in lst:\n        num_list.append(i)\n    \n    # determine the frequency of each number\n    # num_list.sort()\n    # num_list.sort(key=lambda x: x * -1)\n    \n    num_list = sorted(num_list)\n    for i in range(0, n):\n        if not is_greater_than_zero(num_list[i]):\n            return num_list[i]\n    \n    return -1\n",
        "test": "assert     search([]) == -1"
    },
    {
        "number": 70,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return sorted(lst)\n",
        "test": "assert         strange_sort_list([1,2,3,4,5,6,7,8,9,10]), ['1','2','3','4','5','6','7','8','9','10'])"
    },
    {
        "number": 71,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if a == b or b == c or c == a:\n        return 0.0\n    if a + b > c and a + c > b and b + c > a:\n        return ((a * b) / 2)\n    return -1\n",
        "test": "assert     triangle_area(4, 0, 0) == 0"
    },
    {
        "number": 72,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    if not q:\n        return False\n    if len(q) == 1:\n        if q[0] <= w:\n            return True\n        else:\n            return False\n    return will_it_fly(q[1:], w - q[0]) or will_it_fly(q[1:], w)\n",
        "test": "assert     will_it_fly([0], 10) == True"
    },
    {
        "number": 73,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    # Step 1: Calculate the minimum number of changes to change the number of elements.\n    # The minimum number of changes is the number of elements that need to be changed.\n    # The number of changes is the difference between the number of elements that need to be changed and the number of elements we're on in the array.\n    # Step 2: Go through the array and calculate the minimum number of changes.\n    # We have 2 iterations:\n    # 1. Go backwards through the array.\n    # 2. Go forwards through the array.\n    # Step 3: If the number of changes is 1, then we've reached the end of the array. We know there will be one change, because there's only one element in the array.\n    # Step 4: If the number of changes is greater than 1, then we need to return this element as the smallest change.\n    # Step 5: If the number of changes is greater than 2, then we need to repeat the step 4, and take the smallest change.\n",
        "test": "assert     smallest_change([3,1,2,3]) == 1"
    },
    {
        "number": 74,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    \n    total_list = []\n    \n    for value in lst1:\n        total = 0\n        \n        for char in value:\n            if char in lst2:\n                total += 1\n                \n        total_list.append(total)\n        \n    return total_list\n",
        "test": "assert         total_match([], []) == []"
    },
    {
        "number": 75,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    for i in range(3, (a + 1) // 2):\n        if a % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_multiply_prime(2) == True"
    },
    {
        "number": 76,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    return x**int(n) == x\n",
        "test": "assert     is_simple_power(2, 1) == True"
    },
    {
        "number": 77,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    x = int(a)\n    if x == 0 or x == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert     iscube(1) == True"
    },
    {
        "number": 78,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    pow_dict = {\"0\":0, \"1\":1, \"2\":2, \"3\":3, \"4\":4, \"5\":5, \"6\":6, \"7\":7, \"8\":8, \"9\":9}\n    hex_list = list(str(num))\n    for i in range(len(hex_list)):\n        hex_list[i] = hex_list[i].upper()\n    for i in hex_list:\n        if i in pow_dict:\n            hex_list.remove(i)\n            hex_list.append(pow_dict[i])\n    return sum(hex_list)\n",
        "test": "assert     hex_key(5)==5"
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if decimal <= 0:\n        return '0'*(2*decimal)\n    else:\n        return 'db'*(decimal)\n",
        "test": "assert     decimal_to_binary(16) == \"0b11100000\""
    },
    {
        "number": 80,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    #-------------------------------\n    # Fill in the blanks\n    #-------------------------------\n    # Variables\n    total_letters = len(s)\n    one_letter_differences = 1\n    is_happy_check = False\n    \n    # Loop through each letter\n    for letter in s:\n        # Check if current letter is a duplicate\n        if letter in s[0:total_letters - one_letter_differences]:\n            # We need to check if the current letter is the same as the previous one,\n            # but we do not need to check the next one because we already checked if\n            # the current letter is the same as the previous one\n            is_happy_check = True\n        else:\n            is_happy_check = False\n            one_letter_differences += 1\n    \n    # If there are more than three consecutive letters\n    if total_letters > 3 and is_happy_check == True:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_happy('aabbbccdeeffggddrtyytrttqr'    ) == True"
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    \"\"\"\n    For this question you will need to input a list of GPA numbers where each number \n    is the grade for a student.\n    \n    For example:\n    [4.0, 3, 1.7, 2, 3.5]\n",
        "test": "assert     numerical_letter_grade([\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\"]) == \\"
    },
    {
        "number": 82,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    \n    string = string.lower()\n    if 'k' in string or 'e' in string or's' in string or 't' in string or 'u' in string or 'o' in string:\n        return True\n    else:\n        return False\n",
        "test": "assert     prime_length('a') == False"
    },
    {
        "number": 83,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    # initialise count\n    count = 0\n    # for each digit:\n    for i in range(1, n + 1):\n        # if i is '1', add 1 to count\n        if i == 1:\n            count += 1\n        # if i is 0, add 0 to count\n        elif i == 0:\n            count += 0\n    # return count\n    return count\n",
        "test": "assert     starts_one_ends(0) == 0"
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    \n    # Function to return the sum of digits in binary\n    def sum_of_binary(number):\n        total = 0\n        while number > 0:\n            total += number % 2\n            number //= 2\n        return total\n",
        "test": "assert     solve(N) == 21, 'The result is not correct. The function should return 21.'"
    },
    {
        "number": 85,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    i = 0\n    while i < len(lst):\n        if i % 2!= 0:\n            lst.append(lst[i])\n        i += 1\n    return lst\n",
        "test": "assert     add([]) == []"
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    s = s.lower()\n    s_list = []\n    for word in s.split():\n        if word.isalpha():\n            s_list.append(word)\n    \n    s_list_alphabet = [c for c in s_list if c.isalpha()]\n    s_alphabet_with_number = [c for c in s_list if c.isalpha() and c.isnumeric()]\n    s_number_with_alphabet = [c for c in s_list if c.isalpha() and c.isnumeric()]\n",
        "test": "assert     anti_shuffle('Is this the test?') == 'Is this the test?'"
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    x = list(x)\n    return sorted(((lst[i][j], j) for j in range(len(lst[i]))), key=lambda t: t[0])\n",
        "test": "assert     get_row([1, 2], 2) == [1, 2]"
    },
    {
        "number": 88,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    if len(array) == 0:\n        return []\n",
        "test": "assert     sort_array([]) == []"
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    \n    # Initialize encrypted string\n    encrypted = \"\"\n    \n    # Find length of string\n    if len(s) <= 26:\n        # Convert to uppercase\n        for i in s.upper():\n            encrypted += chr(ord(i) + 2)\n        # Convert to lowercase\n        for i in s.lower():\n            encrypted += chr(ord(i) - 2)\n        return encrypted\n    else:\n        # The string is too long, shift it up and down\n        for i in range(26):\n            encrypted += chr(ord(s[i]) - 2)\n            encrypted += chr(ord(s[26-i-1]) - 2)\n        # The string is too long, shift it down and up\n        # Convert to lowercase\n        for i in range(26):\n            encrypted += chr(ord(s[26-i]) - 2)\n            encrypted += chr(ord(s[i]) - 2)\n        # Return encrypted string\n        return encrypted\n",
        "test": "assert "
    },
    {
        "number": 90,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    pass\n",
        "test": "assert     next_smallest([1, 2, 3, 6, 7]) == 6"
    },
    {
        "number": 91,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    boredomCount = 0\n    for word in S.split('.'):\n        if word[0].lower() in [\"i\", \"love\"]:\n            boredomCount += 1\n    return boredomCount",
        "test": "assert     is_bored(\"I didn't do that\") == 1, 'You should be counting the number of boredoms.'"
    },
    {
        "number": 92,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if type(x)!= int or type(y)!= int or type(z)!= int:\n        raise TypeError(\"Invalid inputs\")\n    return x == y or x == z or any(x == value for value in [x, y, z])\n",
        "test": "assert     any_int(1, 1, 1) == True"
    },
    {
        "number": 93,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return ''.join(reversed(message.lower().split()))\n",
        "test": "assert     encode('') == '', 'Empty string expected'"
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    prime = []\n    for i in range(2, lst[0]):\n        if lst[i] > 1:\n            prime.append(i)\n            for j in range(i*i, lst[0]+1, i):\n                if lst[j] > 1:\n                    prime.append(j)\n                    break\n    return sum(list(map(lambda x: x, prime)))\n",
        "test": "assert "
    },
    {
        "number": 95,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    for key in dict:\n        if isinstance(key, str):\n            if not key.islower():\n                return False\n    return True\n",
        "test": "assert         check_dict_case({'hello':'hello', 'world':'world'})==True"
    },
    {
        "number": 96,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    result = []\n    for i in range(1,n):\n        if is_prime(i):\n            result.append(i)\n    return result\n",
        "test": "assert     count_up_to(0) == []"
    },
    {
        "number": 97,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    return a*b\n",
        "test": "assert     multiply(0, 0) == 0"
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    n = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] in 'AEIOU':\n                n += 1\n    return n\n",
        "test": "assert     count_upper('') == 0"
    },
    {
        "number": 99,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # TODO: Write a function that takes a value representing a number\n    # and returns the closest integer to it. If the number is equidistant\n    # from two integers, round it away from zero.\n",
        "test": "assert     closest_integer(\"-14.5\") == -15"
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    # Write your code here.\n    count = [0, 0, 0]\n    n = n // 2\n    if n % 2 == 0:\n        count[n] = 1\n        return count\n    else:\n        count[n] = 2\n        return count\n",
        "test": "assert     make_a_pile(2) == 2, \"Second level should be 2\""
    },
    {
        "number": 101,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return s.split(\",\")",
        "test": "assert     words_string('Hello') == ['Hello']"
    },
    {
        "number": 102,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    #implement your code here\n    return -1\n",
        "test": "assert     choose_num(0, 5) == -1"
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # output = str(n)+\".\"+str(m)\n    output = str(n)+\".\"+str(m).zfill(2)\n    if n > m:\n        output = output[:-2]\n    return output\n    \nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))\n",
        "test": "assert "
    },
    {
        "number": 104,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    # TODO\n    # return [i for i in x if i % 2 == 0]\n    return [i for i in x if i % 2!= 0]\n",
        "test": "assert     unique_digits([1,2,3,4,5,6,7,8,9,0]), \"Necessary digit\""
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if len(arr) == 0:\n        return []\n    \n    sorted_list = sorted(arr, reverse=True)\n    ans = []\n    for i in range(0, len(arr), 2):\n        ans.append(sorted_list[i])\n    ans.append(sorted_list[-1])\n    return ans\n",
        "test": "assert     by_length(list(\"1\")) == [1, \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]"
    },
    {
        "number": 106,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    factorial = [1]\n    for i in range(1, n + 1):\n        factorial.append(i * factorial[i-1])\n    return factorial\n",
        "test": "assert     f(4) == [1, 1, 2, 6, 24]"
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    even_odd_palindrome_pair = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_odd_palindrome_pair.append(i)\n        else:\n            odd_palindrome_pair = (n-i)//2\n            even_odd_palindrome_pair.append(odd_palindrome_pair)\n    return tuple(even_odd_palindrome_pair)\n",
        "test": "assert "
    },
    {
        "number": 108,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    count = 0\n    for x in arr:\n        if x >= 0:\n            count += 1\n    return count\n",
        "test": "assert     count_nums([-123]) == 0"
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    \n    for i in range(0,len(arr)-1):\n        if arr[i] < arr[i+1]:\n            return False\n    return True\n    \ndef move_two_balls(arr):\n    \"\"\"Given an array of N integers arr[1], arr[2],..., arr[N], the N-1 right-shifted\n    elements are stored in the array. If it is possible to get the sorted array by \n    performing the operation, then return True else return False.\n    \n    Two right shift operations is:\n        Right shift by 1 means swap the values at position 2 and 3.\n        Right shift by 2 means swap the values at position 1 and 3.\n        Right shift by 3 means swap the values at position 0 and 2.\n        \n    So we perform the swap operation and it will return true if it is possible to\n    get the sorted array by performing the operation. Otherwise return False.\n    \n    The given array is guaranteed to have unique elements.\n    \n    For Example:\n    \n    move_two_balls([3, 4, 5, 1, 2])==>True\n    Explanation: We perform 2 right shift operations.\n                    We swap the values at positions 2 and 3.\n                    We swap the values at positions 1 and 3.\n                    We swap the values at positions 0 and 2.\n                    \n                    Then we perform 2 right shift operations.\n                    We swap the values at positions 2 and 1.\n                    We swap the values at positions 0 and 1.\n                    We swap the values at positions 3 and 1.\n                    We swap the values at positions 0 and 0.\n                    \n                    Finally we perform 2 right shift operations.\n                    We swap the values at positions 2 and 0.\n                    We swap the values at positions 1 and 0.\n                    We swap the values at positions 3 and 0.\n                    \n                    This is because the elements at positions 2 and 1\n                    have been swapped by 1 right shift operation.\n    move_two_balls([3, 4, 5, 1, 2])==>False\n    Explanation: We perform 2 right shift operations.\n                    We swap the values at positions 2 and 3.\n                    We swap the values at positions 1 and 3.\n                    We swap the values at positions 0 and 2.\n                    \n                    Then we perform 2 right shift operations.\n                    We swap the values at positions 2 and 1.\n                    We swap the values at positions 0 and 1.\n                    We swap the values at positions 3 and 1.\n                    \n                    Finally we perform 2 right shift operations.\n                    We swap the values at positions 2 and 0.\n                    We swap the values at positions 1 and 0.\n                    \n                    Finally we perform 2 right shift operations.\n                    We swap the values at positions 2 and 0.\n                    We swap the values at positions 1 and 0.\n                    \n                    Finally we perform 2 right shift operations.\n                    We swap the values at positions 2 and 0.\n                    We swap the values at positions 1 and 0.\n                    \n                    Finally we perform 2 right shift operations.\n                    We swap the values at positions 2 and 0.\n                    We swap the values at positions 1 and 0.\n                    \n                    Finally we perform 2 right shift operations.\n                    We swap the values at positions 2 and 0.\n                    We swap the values at positions 1 and 0.\n                    \n                    Finally we perform 2 right shift operations.\n                    We swap the values at positions 2 and 0.\n                    We swap the values at positions 1 and 0.\n                    \n                    Finally we perform 2 right shift operations.\n                    We swap the values at positions 2 and 0.\n                    We swap the values at positions 1 and 0.\n                    \n                    Finally we perform 2 right shift operations.\n                    We swap the values at positions 2 and 0.\n                    We swap the values at positions 1 and 0.\n                    \n                    Finally we perform 2 right shift operations.\n                    We swap the values at positions 2 and 0.\n                    We swap the values at positions 1 and 0.\n                    \n                    Finally we perform 2 right shift operations.\n                    We swap the values at positions 2 and 0.\n                    We swap the values at positions 1 and 0.\n                    \n                    Finally we perform 2 right shift operations.\n                    We swap the values at positions 2 and 0.\n                    We swap the values at positions 1 and 0.\n                    \n                    Finally we perform 2 right shift operations.\n                    We swap the values at positions 2 and 0.\n                    We swap the values at positions 1 and 0.\n                    \n                    Finally we perform 2 right shift operations.\n                    We swap the values at positions 2 and 0.\n                    We swap the values at positions 1 and 0.\n                    \n                ",
        "test": "assert "
    },
    {
        "number": 110,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    # If both lists are empty, then return \"YES\"\n    if len(lst1) == 0 and len(lst2) == 0:\n        return \"YES\"\n    \n    # If the first list is empty, then we need to check if the second list is\n    # even length and if so, then we need to check if the first list is even\n    # length and if so, then we need to check if the second list is even length\n    # and if so, then we need to exchange the elements of lst1 and lst2\n    if len(lst1) == 0 and len(lst2) % 2 == 1:\n        if lst2[0] % 2 == 1:\n            return exchange(lst2[1:len(lst2)], lst2[1:len(lst2)])\n        return \"NO\"\n    \n    # If the first list is not even length and if the second list is even length\n    # then we need to check if the first list is odd length and if so, then we\n    # need to check if the second list is odd length and if so, then we need to\n    # exchange the elements of lst1 and lst2\n    if len(lst1) % 2!= 1:\n        if lst2[0] % 2!= 1:\n            return exchange(lst2[1:len(lst2)], lst2[1:len(lst2)])\n        return \"NO\"\n    \n    # We need to check if the first list is odd length and if so, then we need to\n    # exchange the elements of lst1 and lst2\n    if len(lst1) % 2 == 1:\n        return exchange(lst1[1:len(lst1)], lst1[1:len(lst1)])\n    return \"NO\"\n",
        "test": "assert     exchange( [7, 4, 3, 5, 1], [3, 5, 7, 4, 3] ) == \"NO\", \"Exchange function failed\""
    },
    {
        "number": 111,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    letter_count = {}\n    for letter in test:\n        if letter not in letter_count:\n            letter_count[letter] = 0\n        letter_count[letter] += 1\n    maximum_count = 0\n    for letter in letter_count:\n        if letter_count[letter] > maximum_count:\n            maximum_count = letter_count[letter]\n            maximum_letter = letter\n    return {maximum_letter: letter_count[maximum_letter]}",
        "test": "assert     histogram(\"a\") == {'a': 1, 'a': 1, 'a': 1, 'a': 1, 'a': 1}"
    },
    {
        "number": 112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    if s==c:\n        return s,False\n    else:\n        return reverse_delete(s,c[1:])\ndef reverse_palindrome(s):\n    \"\"\"Task\n    We are given a string s. Check whether the string is palindrome or not.\n    If it is palindrome, return the result string.\n    If it is not, check whether the reverse is palindrome or not.\n    If it is palindrome, return the result string.\n    Return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", the result should be ('cde',False)\n    For s = \"abcdef\", the result should be ('cde',True)\n    For s = \"abcdefghijklmnopqrstuvwxyz\", the result should be ('gihjklmnopqrstuvwxyz',False)\n    For s = \"abcdefghijklmnopqrstuvwxyz\", the result should be ('gihjklmnopqrstuvwxyz',True)\n    \"\"\"\n    res,flag=reverse_delete(s,s[::-1])\n    if not flag:\n        return res,False\n    else:\n        return res[::-1],True\n",
        "test": "assert     reverse_delete(\"abc\", \"ba\") == (\"a\", True)"
    },
    {
        "number": 113,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    odds = []\n    for string in lst:\n        count_dig = 0\n        for char in string:\n            if char.isdigit():\n                count_dig += 1\n        if count_dig % 2 == 0:\n            odds.append(string)\n    return odds",
        "test": "assert odd_count([]) == [], \"The function is incorrect.\""
    },
    {
        "number": 114,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    minSum = nums[0]\n    maxIndex = 0\n    for index, num in enumerate(nums):\n        sub = num - nums[index]\n        if sub > maxIndex:\n            maxIndex = sub\n        if sub < 0:\n            sub = 0\n            maxIndex = 0\n        minSum = min(minSum + sub, maxIndex)\n    return minSum\n",
        "test": "assert     minSubArraySum([-1,2,1,-5,3,2,0]) == -1"
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    if not grid or not capacity:\n        return 0\n",
        "test": "assert "
    },
    {
        "number": 116,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    \n    if arr == []:\n        return []\n    \n    lst = [0]\n    for num in arr:\n        lst.append(lst[-1] + num)\n    \n    return lst[::-1]\n",
        "test": "assert     sort_array([]) == []"
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    result = []\n    lst = []\n    for letter in s:\n        if letter not in \"aeiou\":\n            result.append(letter)\n    for word in s.split():\n        if len(word) == n:\n            for letter in word:\n                if letter not in \"aeiou\":\n                    result.append(letter)\n        else:\n            result.append(word)\n    return result\n",
        "test": "assert     select_words(\"cascc\",3) == [\"c\",\"c\",\"s\", \"c\",\"s\", \"c\",\"c\",\"s\", \"c\",\"s\", \"c\",\"c\",\"s\", \"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\""
    },
    {
        "number": 118,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    def closest_vowel_to_right_side(word):\n        min_distance = abs(len(word) - len(word.replace(\"C\", \"\")))\n        min_distance_letter = word[len(word) - len(word.replace(\"C\", \"\"))]\n        for i in range(len(word)):\n            for j in range(i + 1, len(word)):\n                distance = abs(i - j)\n                if word[i] == word[j]:\n                    continue\n                if distance < min_distance:\n                    min_distance = distance\n                    min_distance_letter = word[i]\n        if min_distance == 0:\n            return \"\"\n        else:\n            return min_distance_letter\n    \n    min_distance = abs(len(word) - len(word.replace(\"C\", \"\")))\n    min_distance_letter = word[len(word) - len(word.replace(\"C\", \"\"))]\n    for i in range(len(word)):\n        for j in range(i + 1, len(word)):\n            distance = abs(i - j)\n            if word[i] == word[j]:\n                continue\n            if distance < min_distance:\n                min_distance = distance\n                min_distance_letter = word[i]\n    return min_distance_letter\n",
        "test": "assert     get_closest_vowel(word = \"anna\") == \"a\", \"Expected 'anna' to be the closest vowel\""
    },
    {
        "number": 119,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    # 0) create list of all '(' and close ')'\n    open_parens = []\n    close_parens = []\n    for el in lst:\n        if el == '(':\n            open_parens.append(el)\n        else:\n            if len(open_parens) > 0:\n                close_parens.append(open_parens.pop())\n            else:\n                return 'No'\n    # 1) for all open ')'\n    for el in open_parens:\n        # 2) if the last open ')' was balanced\n        if el == ')':\n            if len(close_parens) > 0:\n                # 3) remove ')' from open ')'\n                open_parens.pop()\n            else:\n                return 'No'\n    # 3) if the last open ')' was not balanced, we can't make a good string\n    return 'No'\n",
        "test": "assert     match_parens(['(()())()()', '(())()()()', '()())()()', '(()())()()']) == 'No'"
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    arr = sorted(arr)\n    if len(arr) < k:\n        return []\n",
        "test": "assert "
    },
    {
        "number": 121,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return sum(list(filter(lambda x : x % 2 == 0, lst)))\n",
        "test": "assert     solution([1, 2, 3, 4, 5]) == 5, \"test failed\""
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    pass\n",
        "test": "assert     (add_elements([1, 2, 3, 4, 5], 1) == 1)"
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    odd_list = []\n    def collatz(n):\n        if n == 1:\n            return 1\n        elif n % 2 == 0:\n            return collatz(n/2)\n        elif n % 2 == 1:\n            return 3 * collatz(n/2) + 1\n    for i in range(1, n+1):\n        odd_list.append(collatz(i))\n    return odd_list\n",
        "test": "assert     get_odd_collatz(1) == [1]"
    },
    {
        "number": 124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    is_valid = True\n    if not date:\n        return is_valid\n    date = date.replace(\" \", \"\")\n    date_format = \"%m-%d-%Y\"\n    date_format_output = date.split(\"-\")\n    if len(date_format_output)!= 3:\n        return is_valid\n    try:\n        int(date_format_output[0])\n        int(date_format_output[1])\n        int(date_format_output[2])\n    except ValueError:\n        return is_valid\n    \n    if date_format_output[2] < 1 or date_format_output[2] > 31:\n        return is_valid\n    if date_format_output[1] < 1 or date_format_output[1] > 12:\n        return is_valid\n    if date_format_output[0] < 1 or date_format_output[0] > 30:\n        return is_valid\n    if not (month_range(date_format_output[0], date_format_output[1], date_format_output[2]) or\n            is_month_in_range(date_format_output[0], date_format_output[1]) or\n            is_month_in_range(date_format_output[0], date_format_output[2])):\n        return is_valid\n    return True\n",
        "test": "assert     valid_date(\"21-02-2000\")"
    },
    {
        "number": 125,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # Can take a little time.\n    return [word for word in txt.split(',') if word!= '']\n",
        "test": "assert     split_words(\"a,b,c\") == ['a', 'b', 'c']"
    },
    {
        "number": 126,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    for item in lst:\n        if item in lst:\n            pass\n        else:\n            return False\n    return True\n",
        "test": "assert     is_sorted([3,2,1,5,4]) == True, 'is_sorted: should have returned True'"
    },
    {
        "number": 127,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # write your code here\n    if interval1[0] < interval2[1]:\n        return \"YES\"\n    elif interval1[1] > interval2[0]:\n        return \"YES\"\n    else:\n        return \"NO\"\n    # Write your code here\n",
        "test": "assert     intersection( (2, 4), (3, 5) ) == (3, 5)"
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    # return None for empty arr\n    if not arr:\n        return None\n    \n    magnitude = 0\n    signs = []\n    for num in arr:\n        if num > 0:\n            magnitude += num\n        else:\n            signs.append(1)\n    \n    for sign in signs:\n        magnitude *= sign\n    \n    return magnitude\n",
        "test": "assert     prod_signs([-1,-2,-3]) == 0"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    n = len(grid)\n    if n <= 2:\n        return grid\n",
        "test": "assert     minPath([[0, 0, 0], [1, 2, 3], [4, 5, 6]], 3) == [1, 2, 3]"
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        return [1, 1, 2] + [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n",
        "test": "assert     tri(2) == 1 + 2 / 2"
    },
    {
        "number": 131,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if n == 0:\n        return 0\n    if n < 0:\n        return 0\n    if n % 2 == 1:\n        return 0\n",
        "test": "assert     digits(3) == 0"
    },
    {
        "number": 132,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    #problem : https://www.hackerrank.com/challenges/innermost-dot-string/problem\n    \n    a = []\n    for i in string:\n        if i == '[' or i == '{':\n            a.append(i)\n        elif i == ']' or i == '}':\n            if len(a) == 0:\n                return False\n            if a[-1] == '[':\n                return False\n            a.pop()\n    if len(a) == 0:\n        return True\n    return False\n",
        "test": "assert     is_nested('[[()]]') == False"
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    sums = 0\n    for item in lst:\n        sums += item ** 2\n    return sums\n",
        "test": "assert     sum_squares([1, 3, 4, -2, 6]) == -10"
    },
    {
        "number": 134,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    char_set = set()\n    for char in txt:\n        if char in char_set:\n            return False\n        else:\n            char_set.add(char)\n    return True\n",
        "test": "assert     check_if_last_char_is_a_letter('!') == True"
    },
    {
        "number": 135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    pass\n",
        "test": "assert         can_arrange([3, 1, 2, 5, 6, 3, 2]) == -1"
    },
    {
        "number": 136,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return min(lst), max(lst)\n",
        "test": "assert "
    },
    {
        "number": 137,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return max(a, b)\n",
        "test": "assert     compare_one('foo', 'foo') == 'foo'"
    },
    {
        "number": 138,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if n < 0:\n        return False\n",
        "test": "assert     not is_equal_to_sum_even(3)"
    },
    {
        "number": 139,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    factorial_value = 1\n    for i in range(n):\n        factorial_value = factorial_value * (i + 1)\n    return factorial_value",
        "test": "assert     special_factorial(1) == 1"
    },
    {
        "number": 140,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if len(text) <= 2:\n        return text\n    elif len(text) > 2 and text[0] == \" \" and text[-1] == \" \":\n        text = text[1:-1]\n        return text\n    else:\n        return text + \"-\"\n",
        "test": "assert     fix_spaces(\"  \") == \"  \""
    },
    {
        "number": 141,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "    # check if there are more than three digits ('0'-'9') in the file's name\n    if len(file_name) < 3:\n        return 'No'\n    # check if the file's name contains exactly one dot '.'\n    if '.' not in file_name:\n        return 'No'\n    # check if the file's name starts with a letter from the latin alphapet 'a'-'z' and 'A'-'Z'\n    if file_name.startswith('a') and file_name.endswith('z') and file_name.startswith('A'):\n        return 'No'\n    # check if the substring before the dot should not be empty, and it starts with a letter from the latin alphapet\n    # 'a'-'z' and 'A'-'Z'\n    if file_name.startswith('a') and file_name.endswith('z'):\n        if file_name[0] == '.':\n            return 'No'\n    # check if the substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    if file_name[1:] in ['txt', 'exe', 'dll']:\n        return 'No'\n    # return 'Yes' if the file's name is valid\n    return 'Yes'\n",
        "test": "assert     file_name_check(\"Dont do this!\") == \"No\""
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    sum_squares = 0\n    for i in lst:\n        sum_squares += i*i\n    return sum_squares\n",
        "test": "assert     sum_squares([1,0]) == 1"
    },
    {
        "number": 143,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    return \" \".join([word for word in sentence.split() if len(word) > 1])\n",
        "test": "assert     words_in_sentence('abbccccdd') == 'abbccccdd'"
    },
    {
        "number": 144,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # your code\n    #raise NotImplementedError\n    return True\n",
        "test": "assert     simplify(\"1/3\", 3) == True"
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    nums.sort()\n    return nums\n",
        "test": "assert     order_by_points([]) == []"
    },
    {
        "number": 146,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    pass\n",
        "test": "assert     specialFilter(nums=[2,2,3,1,5,10]) == 4"
    },
    {
        "number": 147,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    if n < 3:\n        return n\n",
        "test": "assert get_max_triples(2) == 2"
    },
    {
        "number": 148,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    #Your code goes here\n    return planet1, planet2\n",
        "test": "assert bf(\"Mercury\", \"Mercury\") == ('Mercury', 'Mercury')"
    },
    {
        "number": 149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    # Remove all duplicates from the list\n    # remove words that have odd length\n    # reorder the list\n    def remove_duplicates(lst):\n        # Create a dict with letters and their index\n        # Create a new list with the letters in alphabetical order\n        # Remove the letters from the new list\n        letters = {}\n        for word in lst:\n            for letter in word:\n                if letter in letters:\n                    letters[letter] = letters[letter] + 1\n                else:\n                    letters[letter] = 1\n        for letter in letters:\n            letters[letter] = letters[letter] % len(word)\n        new_list = []\n        for word in lst:\n            new_list += [word[letters[letter] : letters[letter] + len(word)]]\n        return new_list\n    \n    lst = list(lst)\n    # Get only the words\n    lst = remove_duplicates(lst)\n    # Sort words\n    return sorted(lst)\n",
        "test": "assert "
    },
    {
        "number": 150,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # This is only an example, but feel free to add your own code!\n    if n == 0:\n        return 0\n    elif n == 1:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        return x_or_y(n//2, x, y)\n        \ndef fib(n):\n    \"\"\"Fibonacci numbers, or F(n) where F(n) = F(n - 1) + F(n - 2)\n    \n    Examples:\n    for fib(3) == 3\n    for fib(4) == 5\n    \n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert     x_or_y(2, 1, 1) == 1"
    },
    {
        "number": 151,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    sums = 0\n    for num in lst:\n        if num % 2!= 0:\n            sums += num ** 2\n    return sums\n",
        "test": "assert     double_the_difference([]) == 0"
    },
    {
        "number": 152,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    \n    res=[]\n    # if the guess is right, the length is now equal to the result of the guess\n    for i in range(len(guess)):\n        if guess[i]==game[i]:\n            res.append(0)\n        else:\n            # find the absolute difference between the guess and the score, and add it to a list\n            res.append(abs(guess[i]-game[i]))\n    # return the result\n    return res\n",
        "test": "assert     compare([6,6,1,3,1], [6,6,1,3,1]) == [0,0,0,0,0]"
    },
    {
        "number": 153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    # Hint: Look for a higher priority function in your lexer, an earlier one (look at the description in the Lexer)\n    # Hint: You can use split(), use split('. ') and split() to get the extension name\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x",
        "test": "assert     Strongest_Extension('Slices', ['Slices']) == 'Slices'"
    },
    {
        "number": 154,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # your code here\n    if len(a)<len(b):\n        a, b = b, a\n    a = ''.join([i for i in a if i not in b])\n    b = ''.join([i for i in b if i not in a])\n    if len(b)<len(a):\n        return False\n    if len(b)==len(a):\n        return True\n    if len(b)%2!=0:\n        return False\n    return cycpattern_check(a[0:len(a)-len(b)],b) or cycpattern_check(b[0:len(a)-len(b)],a)\n",
        "test": "assert     cycpattern_check(\"act\", \"act\") == False"
    },
    {
        "number": 155,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return tuple(map(lambda x: x % 2 == 0, num))\n",
        "test": "assert "
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    res = []\n    roman = ''\n",
        "test": "assert "
    },
    {
        "number": 157,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    a, b, c = float(a), float(b), float(c)\n    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n",
        "test": "assert     right_angle_triangle(1,4,5) == False"
    },
    {
        "number": 158,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    # intialize the max value of each word\n    max_len = 0\n    max_word = \"\"\n    # loop over the words\n    for word in words:\n        # if the length of the word is greater than the max value, update it\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word\n",
        "test": "assert     find_max([\"apple\", \"banana\", \"orange\", \"apple\"]) == \"banana\""
    },
    {
        "number": 159,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    assert isinstance(number, int) and isinstance(need, int) and isinstance(remaining, int), 'invalid arguments'\n    remaining = remaining - need\n    total = 0\n    \n    if remaining >= need:\n        for i in range(0, need):\n            remaining = remaining - 1\n            total = total + 1\n    else:\n        for i in range(0, need):\n            remaining = remaining + 1\n            total = total + 1\n    \n    if remaining <= 0:\n        return [total, remaining]\n    else:\n        return [total, remaining]\n",
        "test": "assert     eat(3, 2, 1) == [2, 1]"
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # Test your code on two lists and store the evaluation in the result variable\n    result = None\n",
        "test": "assert     do_algebra([1, 2, 3], [3, 4, 5]) == 6"
    },
    {
        "number": 161,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    def reverse_case(string):\n        result = \"\"\n        for i in string:\n            if i.isupper():\n                result += i.lower()\n            else:\n                result += i.upper()\n        return result\n    def reverse_case2(string):\n        result = \"\"\n        for i in string:\n            if i.islower():\n                result += i.upper()\n            else:\n                result += i.lower()\n        return result\n    def reverse_case3(string):\n        result = \"\"\n        for i in string:\n            if i.isupper():\n                result += i.upper()\n            else:\n                result += i.lower()\n        return result\n    result = \"\"\n    for i in s:\n        result += reverse_case(i)\n    result += reverse_case2(result)\n    result += reverse_case3(result)\n    return result\n",
        "test": "assert "
    },
    {
        "number": 162,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    if text == '':\n        return None\n    else:\n        return md5(text.encode()).hexdigest()",
        "test": "assert string_to_md5(\"\") == None"
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    \n    result = []\n    for i in range(a, b+1):\n        if i%2 == 0:\n            result.append(i)\n    return result\n",
        "test": "assert     generate_integers(1, 4) == [2, 4]"
    }
]