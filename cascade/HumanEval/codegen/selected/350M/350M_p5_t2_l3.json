[
    {
        "number": 0,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    for i in numbers:\n        for j in numbers:\n            if abs(i - j) < threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([1, 2, 3, 4, 5], 2) == True",
        "num_ids": 482
    },
    {
        "number": 1,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    parens = []\n    for element in paren_string:\n        if element == '(':\n            parens.append(element)\n        elif element == ')':\n            if len(parens) > 0:\n                parens.pop()\n            else:\n                return []\n    return parens\n",
        "test": "assert     separate_paren_groups('') == []",
        "num_ids": 1189
    },
    {
        "number": 2,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return number - number % 1\n",
        "test": "assert     truncate_number(0.0000000) == 0",
        "num_ids": 280
    },
    {
        "number": 3,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    def minus(x):\n        if x < 0:\n            return False\n        if x == 0:\n            return True\n        if x < x:\n            return False\n        return True\n    if not operations:\n        return False\n    if operations[0] == 0:\n        return False\n    if operations[0] < 0:\n        if operations[0] == operations[1]:\n            return False\n        return minus(operations[0])\n    for op in operations:\n        if op < 0:\n            return False\n    return True\n",
        "test": "assert     below_zero([1, 2]) == True",
        "num_ids": 443
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    mean = sum(numbers) / len(numbers)\n    sum_of_squares = 0.0\n    for number in numbers:\n        sum_of_squares += (number - mean) ** 2\n    return (sum_of_squares ** 0.5) / len(numbers)\n",
        "test": "assert     mean_absolute_deviation([1, 1, 0, 0]) == 0.25",
        "num_ids": 438
    },
    {
        "number": 5,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    return numbers + [delimeter] * (len(numbers) - 2)\n",
        "test": "assert         intersperse([], 0) == []",
        "num_ids": 416
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    if paren_string == '(())':\n        return [0, 0]\n    elif paren_string == ')()':\n        return [1, 0]\n    elif paren_string == ')(':\n        return [0, 1]\n    elif paren_string == ')':\n        return [0, 1]\n    else:\n        return [-1, -1]\n",
        "test": "assert     parse_nested_parens(\"((()))\") == [0, 0, 0, 0, 0, 0, 0]",
        "num_ids": 734
    },
    {
        "number": 7,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    return [s for s in strings if substring in s]\n",
        "test": "assert     filter_by_substring([\"one\", \"two\", \"three\", \"four\"], \"thr\")",
        "num_ids": 370
    },
    {
        "number": 8,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    total = 0\n    product = 1\n    for num in numbers:\n        total = total + num * product\n        product = product * num\n    return (total, product)\n",
        "test": "assert     sum_product([1, 2, 3, 4]) == (6, 24)",
        "num_ids": 295
    },
    {
        "number": 9,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    roll = []\n    for i in range(len(numbers) - 1):\n        if numbers[i] < numbers[i + 1]:\n            roll.append(numbers[i + 1])\n        else:\n            roll.append(numbers[i])\n    return roll\n",
        "test": "assert     rolling_max([]) == []",
        "num_ids": 547
    },
    {
        "number": 10,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    # start with the string\n    palindrome = ''\n    # create a slice of string\n    str_slice = slice(0, len(string))\n    # iterate through the slice, and copy string to palindrome\n    for char in string:\n        palindrome = palindrome + char\n        if len(palindrome) > len(string) - 1:\n            # if the palindrome has more than the length of the string, create a string prefix that is the left side\n            # of the palindrome\n            # TODO: will be faster with this loop\n            palindrome = palindrome[:len(string)] + string[str_slice]\n            # remove the left side of the palindrome\n            palindrome = palindrome[:len(string) - 1]\n            # append the palindrome to the end of the string\n            string = palindrome\n        # if it is not a palindrome, move on to the next index\n        else:\n            # append the left side of the palindrome\n            palindrome = palindrome[:str_slice] + string[str_slice]\n            string = palindrome\n    return string\n",
        "test": "assert     is_palindrome(string = \"gfafadgf\") == False",
        "num_ids": 753
    },
    {
        "number": 11,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "    \n    a = a.replace('0', '1').replace('1', '0')\n    b = b.replace('0', '1').replace('1', '0')\n    return a + b\n",
        "test": "assert     string_xor(\"\", \"\") == \"\"",
        "num_ids": 2394
    },
    {
        "number": 12,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if strings:\n        if len(strings) > 1:\n            return max(strings, key=len)\n        else:\n            return strings[0]\n    else:\n        return None\n",
        "test": "assert     longest('abc'), 'No longest string'",
        "num_ids": 441
    },
    {
        "number": 13,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    return 0 if a == 0 else a // b if b!= 0 else a\n",
        "test": "assert     greatest_common_divisor(3, 3) == 1",
        "num_ids": 362
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    return [prefix for prefix in string.split(' ') if len(prefix) > 0]\n",
        "test": "assert     all_prefixes('abc') == ['abc']",
        "num_ids": 672
    },
    {
        "number": 15,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    return str(n) +''*(n-1)\n",
        "test": "assert string_sequence(1) == \"1\"",
        "num_ids": 208
    },
    {
        "number": 16,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    #  time complexity: O(N)\n    #  space complexity: O(N)\n    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters('abccba') == 3",
        "num_ids": 1324
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    music_string = music_string.replace('|', '|').replace('#', '-')\n    return [int(i) for i in music_string.split('|')]\n",
        "test": "assert     parse_music(\"o'|o.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|",
        "num_ids": 2466
    },
    {
        "number": 18,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    count = 0\n    for char in substring:\n        if string.count(char) > 0:\n            count += 1\n    return count\n",
        "test": "assert         how_many_times(\"abc\", \"c\") == 1",
        "num_ids": 345
    },
    {
        "number": 19,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    if numbers == 'zero':\n        return 'zero'\n    elif numbers == 'one':\n        return 'one'\n    elif numbers == 'two':\n        return 'two'\n    elif numbers == 'three':\n        return 'three'\n    elif numbers == 'four':\n        return 'four'\n    elif numbers == 'five':\n        return 'five'\n    elif numbers =='six':\n        return'six'\n    elif numbers =='seven':\n        return'seven'\n    elif numbers == 'eight':\n        return 'eight'\n    elif numbers == 'nine':\n        return 'nine'\n",
        "test": "assert     sort_numbers(\"zero\") == \"zero\"",
        "num_ids": 2652
    },
    {
        "number": 20,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    numbers.sort()\n    smaller = numbers[0]\n    larger = numbers[-1]\n    return (smaller, larger)\n",
        "test": "assert     find_closest_elements([1,2]) == (1.0, 2.0)",
        "num_ids": 618
    },
    {
        "number": 21,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return [round((x - min(numbers)) / (max(numbers) - min(numbers))) for x in numbers]\n",
        "test": "assert     rescale_to_unit([]) == []",
        "num_ids": 597
    },
    {
        "number": 22,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    return [x for x in values if isinstance(x, int)]\n",
        "test": "assert     filter_integers([]) == []",
        "num_ids": 244
    },
    {
        "number": 23,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    return len(string)\n",
        "test": "assert         strlen(\"python\")",
        "num_ids": 112
    },
    {
        "number": 24,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    num = n\n    while num % 2 == 0:\n        num /= 2\n    return num",
        "test": "assert largest_divisor(18) == 6",
        "num_ids": 411
    },
    {
        "number": 25,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    return [i for i in range(2, n + 1) if all(i % j == 0 for j in range(1, i // 2))]\n",
        "test": "assert     factorize(1) == []",
        "num_ids": 366
    },
    {
        "number": 26,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "    \n    # Loop through the list and remove elements that occur more than once\n    def helper(numbers: List[int]) -> List[int]:\n        \n        # Create a set to hold the indexes of elements that appear more than once\n        seen_set = set(numbers)\n        \n        # Loop through the list and find the number that occurs more than once\n        for index in range(len(numbers)):\n            if numbers[index] in seen_set:\n                # If the element is the first occurrence of the element,\n                # remove it from the set and add it to the output list\n                if index == 0:\n                    numbers[index] = None\n                # If the element is not the first occurrence, just add it to the set\n                else:\n                    seen_set.add(numbers[index])\n                    numbers[index] = None\n        \n        return numbers\n    \n    return helper(numbers)\n",
        "test": "assert     remove_duplicates([]) == []",
        "num_ids": 771
    },
    {
        "number": 27,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return ''.join([string[i].upper() if i % 2 == 0 else string[i].lower() for i in range(len(string))])\n",
        "test": "assert     flip_case(\"\") == \"\"",
        "num_ids": 734
    },
    {
        "number": 28,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    result = ''\n    for string in strings:\n        result += string\n    return result\n",
        "test": "assert     concatenate([\"a\", \"b\", \"c\"]) == \"abc\"",
        "num_ids": 278
    },
    {
        "number": 29,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    filtered_strings = []\n    for s in strings:\n        if s.startswith(prefix):\n            filtered_strings.append(s)\n    return filtered_strings\n",
        "test": "assert     filter_by_prefix([1, 2, 3, 4, 5], 'eeb') == [1, 3]",
        "num_ids": 1482
    },
    {
        "number": 30,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    positive = []\n    for n in l:\n        if n > 0:\n            positive.append(n)\n    return positive\n",
        "test": "assert     get_positive([]) == []",
        "num_ids": 345
    },
    {
        "number": 31,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    for i in range(2, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(3) == True",
        "num_ids": 448
    },
    {
        "number": 32,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    len_xs = len(xs)\n    if len_xs % 2 == 0:\n        return xs[len_xs // 2]\n    else:\n        return -xs[len_xs // 2]\n",
        "test": "assert     find_zero([2, 0, 3]) == 0",
        "num_ids": 1502
    },
    {
        "number": 33,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    res = []\n    for i in range(len(l)):\n        res.append(l[i])\n        if i % 3 == 0:\n            res[i] = l[i//3]\n    return res",
        "test": "assert     sort_third([\"a\",\"b\",\"c\"]) == [\"a\",\"b\",\"c\"]",
        "num_ids": 468
    },
    {
        "number": 34,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    return list(set(l))\n",
        "test": "assert     unique([1,2,3,4,1,2,3,4,1,2,3,4]) == [1,2,3,4]",
        "num_ids": 551
    },
    {
        "number": 35,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    max = None\n    for i in l:\n        if max == None or i > max:\n            max = i\n    return max\n",
        "test": "assert     max_element([1, 2, 3, 4, 5]) == 5",
        "num_ids": 263
    },
    {
        "number": 36,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    count = 0\n    for i in range(1, n + 1):\n        if i % 7 == 0 and i % 11 == 0 and i % 13 == 0:\n            count += 1\n    return count\n",
        "test": "assert     fizz_buzz(7) == 0",
        "num_ids": 682
    },
    {
        "number": 37,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    odd = []\n    even = []\n    even_index = 0\n    odd_index = len(l) - 1\n    while even_index <= odd_index:\n        if l[even_index] % 2 == 0:\n            even.append(l[even_index])\n            even_index += 1\n        else:\n            odd.append(l[odd_index])\n            odd_index -= 1\n    for i in range(odd_index):\n        odd.append(l[i])\n    for i in range(even_index):\n        even.append(l[even_index])\n        even_index -= 1\n    return even + odd\n",
        "test": "assert     sort_even([1, 3, 7, 5, 2, 9]) == [1, 5, 2, 3, 7, 9]",
        "num_ids": 673
    },
    {
        "number": 38,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     decode_cyclic(\"xxxxx\") == \"xxxxx\"",
        "num_ids": 682
    },
    {
        "number": 39,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    a = 2\n    b = 3\n    if n < 2:\n        return n\n    elif n == 2:\n        return 1\n    while True:\n        c = a + b\n        if c > n:\n            return n\n        elif c == n:\n            return a\n        else:\n            a = b\n            b = c\n            if a % b == 0:\n                return a\n",
        "test": "assert     prime_fib(1) == 1",
        "num_ids": 388
    },
    {
        "number": 40,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    if len(l) == 3:\n        if l[0] + l[1] == l[2]:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     triples_sum_to_zero([5, 5, 5]) == False",
        "num_ids": 494
    },
    {
        "number": 41,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    # TODO:\n    # Write your solution here\n    if n == 1:\n        return 0\n    return n\n",
        "test": "assert     (car_race_collision(3) == 3)",
        "num_ids": 635
    },
    {
        "number": 42,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    return [x+1 for x in l]\n",
        "test": "assert     incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 233
    },
    {
        "number": 43,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    return not any(a == b for a, b in zip(l, l[1:]))\n",
        "test": "assert     pairs_sum_to_zero([1,2,3,4,5]) == True",
        "num_ids": 495
    },
    {
        "number": 44,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    # base numbers are less than 10.\n    if x < base:\n        return f'{x}{base}'\n    # base numbers are greater than 10.\n    else:\n        return f'{x//base}' + change_base(x%base, base)\n",
        "test": "assert change_base(2, 5) == '10'",
        "num_ids": 579
    },
    {
        "number": 45,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "    return h * (a ** 2)",
        "test": "assert     triangle_area(0, 0) == 0, \"triangle_area(0, 0) should be 0\"",
        "num_ids": 252
    },
    {
        "number": 46,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(0) == 0",
        "num_ids": 373
    },
    {
        "number": 47,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    \n    # sort the list l and get the median\n    l.sort()\n    return l[len(l) // 2]\n    \ndef quantile(l: list):\n    \"\"\"Return a list of the first n elements of l with the largest absolute value.\n    >>> quantile([0, -1, 2, -5, 1])\n    [0, 1, 2, 3]\n    \"\"\"\n    if len(l) == 0:\n        return []\n    \n    # find the index of the largest value in the list\n    l.sort()\n    largest_val = max(l)\n    return [x for x, y in enumerate(l) if y == largest_val]\n    \ndef stats(l: list):\n    \"\"\"Return a dictionary with the following statistics:\n    median = median(l)\n    quantile = quantile(l)\n    std = (sum(l)/len(l))**0.5\n    mean = mean(l)\n    variance = variance(l)\n    \n    The keys in the dictionary are the names of the functions and the values are the\n    statistics that they return.\n    \"\"\"\n    median = median(l)\n    quantile = quantile(l)\n    return {\n        \"median\": median,\n        \"quantile\": quantile,\n        \"std\": statistics.pstdev(l),\n        \"mean\": statistics.mean(l),\n        \"variance\": statistics.variance(l)\n    }\n",
        "test": "assert     median([1, 2, 3, 4, 5, 6, 7, 8]) == 5",
        "num_ids": 1313
    },
    {
        "number": 48,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    if text == \"\":\n        return True\n    else:\n        # split text into list\n        # iterate through characters in string\n        for char in text:\n            # check if char is a palindrome\n            if char!= char[::-1]:\n                return False\n        return True\n",
        "test": "assert     is_palindrome('t') == True",
        "num_ids": 373
    },
    {
        "number": 49,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    \n    MOD = (1 << (n - 1)) % p\n    return MOD\n",
        "test": "assert         modp(1,10) == 1",
        "num_ids": 660
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(\"AAAAAA\") == \"aaaaa\"",
        "num_ids": 337
    },
    {
        "number": 51,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    new_text = \"\"\n    for i in range(len(text)):\n        if text[i].lower() not in ['a','e','i','o','u']:\n            new_text += text[i]\n    return new_text\n",
        "test": "assert     remove_vowels(\"Hello\") == \"olle\"",
        "num_ids": 566
    },
    {
        "number": 52,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    # TODO: modify so that this function returns True for numbers below t\n    if l:\n        for num in l:\n            if num < t:\n                return False\n        return True\n    return False\n",
        "test": "assert     below_threshold(list(range(1, 10)), 5) is False,     \"should return False\"",
        "num_ids": 285
    },
    {
        "number": 53,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3",
        "num_ids": 130
    },
    {
        "number": 54,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return s0 == s1 or s0 in s1\n",
        "test": "assert     not     same_chars(\"ab\", \"a\")",
        "num_ids": 229
    },
    {
        "number": 55,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    \n    \n    \n    fibo = 0\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        for i in range(2, n):\n            fibo = fib + fib\n        return fibo",
        "test": "assert     fib(1) == 1",
        "num_ids": 334
    },
    {
        "number": 56,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n        elif bracket == \">\" or bracket == \">>\":\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return True\n",
        "test": "assert correct_bracketing(')<>') == False",
        "num_ids": 259
    },
    {
        "number": 57,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    if not l: return True\n    # Check if any element is increasing\n    for i in range(len(l)-1):\n        if l[i+1] < l[i]:\n            return False\n    return True\n",
        "test": "assert         monotonic([1, 4, 2, 0]) == False",
        "num_ids": 506
    },
    {
        "number": 58,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    return sorted(set(l1) & set(l2))\n",
        "test": "assert     common([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"],[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"]) == [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"]",
        "num_ids": 587
    },
    {
        "number": 59,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        k = 2\n        while k * k <= n:\n            if n % k == 0:\n                n //= k\n                continue\n            else:\n                k += 1\n    return n\n",
        "test": "assert     largest_prime_factor(12) == 3",
        "num_ids": 324
    },
    {
        "number": 60,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    s = 0\n    for i in range(1, n+1):\n        s += i\n    return s\n",
        "test": "assert sum_to_n(1) == 1",
        "num_ids": 219
    },
    {
        "number": 61,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    return all(True if c == \"(\" or c == \")\" else False for c in brackets)\n",
        "test": "assert     (correct_bracketing(\"()\") == True)",
        "num_ids": 323
    },
    {
        "number": 62,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    sum = 0\n    for i in range(len(xs)):\n        sum += xs[i] * (i + 1)\n    return sum\n",
        "test": "assert     derivative([1, 0, 0]) == 1",
        "num_ids": 347
    },
    {
        "number": 63,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    if n == 0 or n == 1:\n        return 0\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0, \"The fibfib sequence is incorrect\"",
        "num_ids": 602
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    # Here is a helper function.\n    # This function counts the number of vowels in a string.\n    count = 0\n    for letter in s:\n        if letter in 'aeiou':\n            count += 1\n    return count\n",
        "test": "assert     vowels_count(\"diniwe\") == 3",
        "num_ids": 309
    },
    {
        "number": 65,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    if shift > len(str(x)):\n        return str(x)\n    else:\n        if shift < len(str(x)):\n            return str(x)[-shift:]\n        else:\n            return str(x)[-shift:] + str(x)[:len(str(x))-shift]",
        "test": "assert     circular_shift(1, 1) == \"1\"",
        "num_ids": 440
    },
    {
        "number": 66,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    sum = 0\n    for i in s:\n        sum += int(i)\n    return sum\n",
        "test": "assert     digitSum(\"\") == 0",
        "num_ids": 279
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    fruit_apples = 0\n    fruit_orange = 0\n    fruit_mango = 0\n    for i in range(len(s)):\n        if s[i] == 'a':\n            fruit_apples += 1\n        elif s[i] == 'o':\n            fruit_orange += 1\n        elif s[i] =='m':\n            fruit_mango += 1\n    return fruit_apples,fruit_orange,fruit_mango\n",
        "test": "assert     fruit_distribution(\"All fruits are fruit\", \"100\") == 0",
        "num_ids": 1720
    },
    {
        "number": 68,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    arr = list(map(int, arr))\n    index = 0\n    while index < len(arr):\n        if arr[index] % 2 == 0:\n            arr[index] = arr[index]//2\n            index = index + 1\n        else:\n            index = index + 1\n    return arr\n",
        "test": "assert     pluck([]) == []",
        "num_ids": 434
    },
    {
        "number": 69,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    def is_greater_than_zero(n):\n        if n > 0:\n            return True\n        return False\n    \n    n = len(lst)\n    # get all the numbers in the list\n    num_list = []\n    for i in lst:\n        num_list.append(i)\n    \n    # determine the frequency of each number\n    # num_list.sort()\n    # num_list.sort(key=lambda x: x * -1)\n    \n    num_list = sorted(num_list)\n    for i in range(0, n):\n        if not is_greater_than_zero(num_list[i]):\n            return num_list[i]\n    \n    return -1\n",
        "test": "assert     search([]) == -1",
        "num_ids": 566
    },
    {
        "number": 70,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    # TODO: convert to list, then sort, then return\n    # return lst\n    lst.sort()\n    return lst\n",
        "test": "assert     strange_sort_list([5, 5, 2, 4, 2, 10, 8, 6]), 'invalid list, should be in strange order'",
        "num_ids": 506
    },
    {
        "number": 71,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    if a == b or b == c or c == a:\n        return 0.0\n    if a + b > c and a + c > b and b + c > a:\n        return ((a * b) / 2)\n    return -1\n",
        "test": "assert     triangle_area(4, 0, 0) == 0",
        "num_ids": 726
    },
    {
        "number": 72,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    if not q:\n        return False\n    if len(q) == 1:\n        if q[0] <= w:\n            return True\n        else:\n            return False\n    return will_it_fly(q[1:], w - q[0]) or will_it_fly(q[1:], w)\n",
        "test": "assert     will_it_fly([0], 10) == True",
        "num_ids": 428
    },
    {
        "number": 73,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    n = len(arr)\n    if n == 0:\n        return 0\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if arr[j]!= arr[i]:\n                arr[j], arr[i] = arr[i], arr[j]\n                break\n    return n-1\n",
        "test": "assert     smallest_change([1,2,3,3]) == 3",
        "num_ids": 522
    },
    {
        "number": 74,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    # get the length of both lists\n    n = len(lst1)\n    # if the lengths of both lists are equal, return the first list\n    if n == len(lst2):\n        return lst1\n    # if the lengths of both lists are greater than the length of the other list, return the second list\n    elif n > len(lst2):\n        return lst2\n    # if the lengths of both lists are less than the lengths of the other list, return the first list\n    elif n < len(lst1):\n        return lst1\n    # if the lengths of both lists are equal, return the second list\n    else:\n        return lst2\n",
        "test": "assert         total_match([], []) == []",
        "num_ids": 586
    },
    {
        "number": 75,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    for i in range(3, (a + 1) // 2):\n        if a % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_multiply_prime(2) == True",
        "num_ids": 319
    },
    {
        "number": 76,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return x**int(n) == x\n",
        "test": "assert     is_simple_power(5, 2) == False",
        "num_ids": 491
    },
    {
        "number": 77,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return a <= 3 and a >= 1\n",
        "test": "assert     iscube(1) == True",
        "num_ids": 189
    },
    {
        "number": 78,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    pow_dict = {\"0\":0, \"1\":1, \"2\":2, \"3\":3, \"4\":4, \"5\":5, \"6\":6, \"7\":7, \"8\":8, \"9\":9}\n    hex_list = list(str(num))\n    for i in range(len(hex_list)):\n        hex_list[i] = hex_list[i].upper()\n    for i in hex_list:\n        if i in pow_dict:\n            hex_list.remove(i)\n            hex_list.append(pow_dict[i])\n    return sum(hex_list)\n",
        "test": "assert     hex_key(5)==5",
        "num_ids": 1614
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    if decimal == 0:\n        return \"0\"\n    else:\n        binary = \"\"\n        while decimal > 0:\n            remainder = decimal % 2\n            binary = str(remainder) + binary\n            decimal //= 2\n        binary = str(decimal) + binary\n        return binary\n",
        "test": "assert     decimal_to_binary(21) == '00010111'",
        "num_ids": 373
    },
    {
        "number": 80,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    #-------------------------------\n    # Fill in the blanks\n    #-------------------------------\n    # Variables\n    total_letters = len(s)\n    one_letter_differences = 1\n    is_happy_check = False\n    \n    # Loop through each letter\n    for letter in s:\n        # Check if current letter is a duplicate\n        if letter in s[0:total_letters - one_letter_differences]:\n            # We need to check if the current letter is the same as the previous one,\n            # but we do not need to check the next one because we already checked if\n            # the current letter is the same as the previous one\n            is_happy_check = True\n        else:\n            is_happy_check = False\n            one_letter_differences += 1\n    \n    # If there are more than three consecutive letters\n    if total_letters > 3 and is_happy_check == True:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_happy('aaabd'    ) == False",
        "num_ids": 597
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    letter_grade_table = {\n        0.0 : 'A+',\n        3.0 : 'A',\n        3.5 : 'B',\n        4.0 : 'B-',\n        4.5 : 'C',\n        5.0 : 'C-',\n        5.5 : 'D',\n        6.0 : 'D-',\n        6.5 : 'E',\n        7.0 : 'E-',\n        8.0 : 'F',\n        8.5 : 'F-',\n    }\n    letter_grade_table_rev = dict(zip(letter_grade_table.values(), letter_grade_table.keys()))\n    return letter_grade_table_rev[max(grades)]",
        "test": "assert         numerical_letter_grade([4, 4, 4, 4, 4, 4, 4]) == ['A+', 'A-', 'B+', 'B-', 'C+', 'C-', 'D+', 'D-']",
        "num_ids": 800
    },
    {
        "number": 82,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    if len(string)<2:\n        return True\n    for i in range(2,int(len(string)/2)):\n        if string[i] in string[:i]:\n            return False\n    return True",
        "test": "assert     prime_length('abcdefg')",
        "num_ids": 383
    },
    {
        "number": 83,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return sum(1 for i in range(1, n + 1) if i % 10 == 1)\n",
        "test": "assert     starts_one_ends(0) == 0",
        "num_ids": 389
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    # define sum of digits\n    sum = 0\n    while N > 0:\n        # get sum of digits\n        sum += N % 10\n        # update N by multiplying by 2\n        N //= 2\n    # return sum of digits\n    return str(sum)\n",
        "test": "assert     solve(1) == 1",
        "num_ids": 413
    },
    {
        "number": 85,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    i = 0\n    while i < len(lst):\n        if i % 2!= 0:\n            lst.append(lst[i])\n        i += 1\n    return lst\n",
        "test": "assert     add([]) == []",
        "num_ids": 402
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    #print(s)\n    # use a dict to store letters and numbers so they can be sorted\n    letters = dict()\n    numbers = dict()\n    for i in s:\n        # if there is a letter in the string, add it to the letters dictionary\n        if i.isalpha():\n            letters[i] = letters.get(i, 0) + 1\n        # if there is a number, add it to the numbers dictionary\n        elif i.isdigit():\n            numbers[i] = numbers.get(i, 0) + 1\n    # now, sort it based on the letters dictionary\n    sorted_letters = sorted(letters.items(), key=lambda x: x[1], reverse=True)\n    # now, sort it based on the numbers dictionary\n    sorted_numbers = sorted(numbers.items(), key=lambda x: x[1], reverse=True)\n    # now, sort them based on the letters dictionary\n    sorted_letters = sorted(letters.items(), key=lambda x: x[1])\n    sorted_numbers = sorted(numbers.items(), key=lambda x: x[1])\n    #print(sorted_letters)\n    #print(sorted_numbers)\n    return ''.join([x[0] for x in sorted_letters[:5]] + sorted_numbers[:5])\n",
        "test": "assert     anti_shuffle('abcdefgh') == 'cdefgh'",
        "num_ids": 977
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    \n    assert len(lst) >= 1, \"The list cannot be empty\"\n    \n    if len(lst) == 1:\n        return [(x, x)]\n    \n    data = lst[0]\n    \n    # Sort by rows first\n    sorted = sorted(data, key = lambda x: x[0])\n    \n    # Sort by columns first\n    sorted = sorted(sorted, key = lambda x: x[1])\n    \n    # Sort by columns descending first\n    sorted = sorted(sorted, key = lambda x: x[1], reverse = True)\n    \n    # Now sort the list by rows\n    lst = sorted\n    \n    # Now we need to process the rest of the list,\n    # and return the list of tuples\n    \n    # NOTE:\n    # If you find that the order of rows and columns must be different\n    # in order for the answer to be correct, you should modify the\n    # code in get_row(lst, row) to return an appropriate list of tuples.\n    \n    # if len(lst) == 1:\n    #     return [(x, x)]\n    # else:\n    #     return [(x[0], x[1]) for x in lst]\n    \n    return [(x[0], x[1]) for x in lst]\n",
        "test": "assert ",
        "num_ids": 1646
    },
    {
        "number": 88,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    if len(array) == 0:\n        return []\n",
        "test": "assert     sort_array([]) == []",
        "num_ids": 377
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    cipher = \"\"\n    for i in s:\n        if i not in 'abcdefghijklmnopqrstuvwxyz':\n            cipher = cipher + i\n    return cipher\n",
        "test": "assert     encrypt('abcdefgh') == 'fghcdfg'",
        "num_ids": 584
    },
    {
        "number": 90,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    \n    def next_smallest_helper(nums, prev_smallest):\n        if len(nums) == 1:\n            return nums[0]\n        \n        if prev_smallest is None:\n            prev_smallest = nums[0]\n        \n        if nums[0] <= prev_smallest:\n            return nums[0]\n        \n        prev_smallest = next_smallest_helper(nums[1:], prev_smallest)\n        \n        if nums[0] > prev_smallest:\n            return prev_smallest\n        \n        return nums[0]\n    \n    return next_smallest_helper(lst, None)\n",
        "test": "assert ",
        "num_ids": 642
    },
    {
        "number": 91,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    boredomCount = 0\n    for word in S.split('.'):\n        if word[0].lower() in [\"i\", \"love\"]:\n            boredomCount += 1\n    return boredomCount",
        "test": "assert     is_bored(\"i.e. I'm bored\") == True",
        "num_ids": 543
    },
    {
        "number": 92,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    if type(x)!= int or type(y)!= int or type(z)!= int:\n        raise TypeError(\"Invalid inputs\")\n    return x == y or x == z or any(x == value for value in [x, y, z])\n",
        "test": "assert     any_int(1, 1, 1) == True",
        "num_ids": 497
    },
    {
        "number": 93,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return ''.join(reversed(message.lower().split()))\n",
        "test": "assert     encode('') == '', 'Empty string expected'",
        "num_ids": 1504
    },
    {
        "number": 94,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    x=0\n    for i in lst:\n        if i>0:\n            x+=i\n    return x\n",
        "test": "assert     skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 45",
        "num_ids": 585
    },
    {
        "number": 95,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    for key in dict:\n        if isinstance(key, str):\n            if not key.islower():\n                return False\n    return True\n",
        "test": "assert         check_dict_case({'hello':'hello', 'world':'world'})==True",
        "num_ids": 499
    },
    {
        "number": 96,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    result = []\n    for i in range(1,n):\n        if is_prime(i):\n            result.append(i)\n    return result\n",
        "test": "assert     count_up_to(0) == []",
        "num_ids": 477
    },
    {
        "number": 97,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    return a*b\n",
        "test": "assert     multiply(0, 0) == 0",
        "num_ids": 415
    },
    {
        "number": 98,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] > 'A':\n            count += 1\n    return count\n",
        "test": "assert     count_upper('') == 0",
        "num_ids": 315
    },
    {
        "number": 99,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    # Calculate the lowest number less than value.\n    if value == \"\":\n        return 0\n    else:\n        lower = value.lower()\n        value_lower = float(value.lower())\n        value_higher = float(value.upper())\n        if value_lower < value_higher:\n            return value_lower\n        else:\n            return value_higher\n",
        "test": "assert         closest_integer(\"12.5\") == 12.5",
        "num_ids": 363
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    if n <= 0:\n        return []\n    if n == 1:\n        return [1]\n",
        "test": "assert     make_a_pile(1) == 1",
        "num_ids": 376
    },
    {
        "number": 101,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    return s.split(\",\")",
        "test": "assert     words_string('Hello') == ['Hello']",
        "num_ids": 390
    },
    {
        "number": 102,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    #implement your code here\n    return -1\n",
        "test": "assert     choose_num(0, 5) == -1",
        "num_ids": 423
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    if n < m:\n        return \"-1\"\n",
        "test": "assert ",
        "num_ids": 442
    },
    {
        "number": 104,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    return list(set(x))\n",
        "test": "assert     unique_digits([1,2,3,4,5,6,7,8,9,0]), \"Necessary digit\"",
        "num_ids": 1832
    },
    {
        "number": 105,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    arr.sort()\n    \n    ans = []\n    \n    for i in arr:\n        if i >= 1 and i <= 9:\n            ans.append(i)\n        else:\n            ans.append(i[::-1])\n    \n    return ans\n",
        "test": "assert     by_length([3, 5, 9, 7]) == [3, 5, 7, 9]",
        "num_ids": 439
    },
    {
        "number": 106,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    factorial = [1]\n    for i in range(1, n + 1):\n        factorial.append(i * factorial[i-1])\n    return factorial\n",
        "test": "assert     f(4) == [1, 1, 2, 6, 24]",
        "num_ids": 452
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    return {\n        1: [2],\n        2: [1, 3],\n        3: [1, 2, 4],\n        4: [1, 2, 3, 5, 6],\n        5: [1, 2, 3, 4, 6, 7, 8, 9, 11],\n        6: [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n        7: [1, 2, 4],\n        8: [1, 2, 3, 4, 6],\n        9: [1, 2, 3, 4, 6, 7, 8, 9, 11],\n        10: [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 35",
        "test": "assert     even_odd_palindrome(9) == (3, 3)",
        "num_ids": 1478
    },
    {
        "number": 108,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    count = 0\n    for x in arr:\n        if x >= 0:\n            count += 1\n    return count\n",
        "test": "assert     count_nums([-123]) == 0",
        "num_ids": 342
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    l = len(arr)\n    if l == 0:\n        return True\n    \n    # initialization\n    # no. of operations done by one iteration\n    # overall operation counts for the current iteration\n    i = 0\n",
        "test": "assert     move_one_ball([1, 3, 2, 4]) == True",
        "num_ids": 1209
    },
    {
        "number": 110,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if lst1 and lst2:\n        lst1.sort()\n        lst2.sort()\n        if lst1[0] == lst2[-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n",
        "test": "assert     exchange( [7, 4, 3, 5, 1], [3, 5, 7, 4, 3] ) == \"NO\", \"Exchange function failed\"",
        "num_ids": 973
    },
    {
        "number": 111,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    letter_count = {}\n    for letter in test:\n        if letter not in letter_count:\n            letter_count[letter] = 0\n        letter_count[letter] += 1\n    maximum_count = 0\n    for letter in letter_count:\n        if letter_count[letter] > maximum_count:\n            maximum_count = letter_count[letter]\n            maximum_letter = letter\n    return {maximum_letter: letter_count[maximum_letter]}",
        "test": "assert     histogram(\"a\") == {'a': 1, 'a': 1, 'a': 1, 'a': 1, 'a': 1}",
        "num_ids": 663
    },
    {
        "number": 112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    s = s[::-1]\n    if c in s:\n        return (s,True)\n    else:\n        return (s,False)\n",
        "test": "assert         reverse_delete(\"apple\", \"a\") == (\"aa\", True)",
        "num_ids": 643
    },
    {
        "number": 113,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    odds = []\n    for string in lst:\n        count_dig = 0\n        for char in string:\n            if char.isdigit():\n                count_dig += 1\n        if count_dig % 2 == 0:\n            odds.append(string)\n    return odds",
        "test": "assert odd_count([]) == [], \"The function is incorrect.\"",
        "num_ids": 611
    },
    {
        "number": 114,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    minSum = nums[0]\n    maxIndex = 0\n    for index, num in enumerate(nums):\n        sub = num - nums[index]\n        if sub > maxIndex:\n            maxIndex = sub\n        if sub < 0:\n            sub = 0\n            maxIndex = 0\n        minSum = min(minSum + sub, maxIndex)\n    return minSum\n",
        "test": "assert     minSubArraySum([-1,2,1,-5,3,2,0]) == -1",
        "num_ids": 447
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    def min_fill(grid, capacity):\n        \"\"\"\n        Using a heap to store the filled buckets,\n        we compute the minimum number of buckets we need to lower to fill\n        \"\"\"\n        buckets = []\n        for i in range(len(grid)):\n            for j in range(len(grid[i])):\n                if grid[i][j] == 1:\n                    heapq.heappush(buckets, [abs(i-j), [i, j]])\n        \n        min_buckets = []\n        for bucket in buckets:\n            min_buckets.append([bucket[0]])\n        \n        for bucket in buckets:\n            if bucket[0] < capacity:\n                for i in range(len(min_buckets)):\n                    if bucket[1] == [i, bucket[0]]:\n                        continue\n                    heapq.heappush(min_buckets, [bucket[1] + [i], bucket])\n        \n        print(min_buckets)\n        \n        result = 0\n        for bucket in min_buckets:\n            if bucket[0] == capacity:\n                result += 1\n            else:\n                break\n        \n        return result\n    \n    result = max_fill(grid, capacity)\n    return result\n",
        "test": "assert ",
        "num_ids": 880
    },
    {
        "number": 116,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    \n    if arr == []:\n        return []\n    \n    lst = [0]\n    for num in arr:\n        lst.append(lst[-1] + num)\n    \n    return lst[::-1]\n",
        "test": "assert     sort_array([]) == []",
        "num_ids": 413
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    words = []\n    s_list = list(s)\n    for letter in s_list:\n        if letter in [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]:\n            if letter in s_list:\n                i = 0\n                while i < len(s_list) and s_list[i]!= letter:\n                    i += 1\n                if i == len(s_list):\n                    words.append(letter)\n            else:\n                words.append(letter)\n        else:\n            words.append(letter)\n    return words\n    \ndef next_char(word):\n    \"\"\"Given a word, return the next character that must be a consonant.\n    If the word is empty, return None.\n    Examples:\n    next_char(\"Mary\") ==> \"m\"\n    next_char(\"\") ==> None\n    next_char(\"simple white space\") ==> None\n    next_char(\"Mary had a little lamb\") ==> \"l\"\n    \"\"\"\n    if word == \"\":\n        return None\n    for letter in word:\n        if letter not in \"aeiouAEIOU\":\n            return None\n    return word[0]\n        \ndef build_words(s):\n    \"\"\"Given a string s, return a list of words that contain exactly n\n    consonants, in order these words appear in the string s.\n    If the string s is empty, return an empty list.\n    Examples:\n    build_words(\"simple white space\") ==> [\"simple\"]\n    build_words(\"Mary had a little lamb\") ==> [\"lamb\"]\n    build_words(\"simple white space\") ==> [\"simple\"]\n    build_words(\"Mary had a little lamb\") ==> [\"lamb\", \"simple\"]\n    build_words(\"simple white space\") ==> [\"simple\"]\n    \"\"\"\n    words = []\n    if s == \"\":\n        return words\n    \n    s_list = list(s)\n    for i in range(len(s)):\n        if s[i] not in \"aeiouAEIOU\":\n            words.append(s[i])\n        else:\n            if s_list[i] not in \"aeiouAEIOU\":\n                words.append(s_list[i])\n            else:\n                if s_list[i] == s_list[i + 1]:\n                    words.append(s_list[i])\n                    words.append(s_list[i + 1])\n                else:\n                    words.append(s_list[i])\n                    words.append(s_list[i + 1])\n                    words.append(s_list[i + 2])\n                    \n    return words\n    \ndef levenshteinDistance(w1, w2):\n    \"\"\"Given two words w1 and w2 return the Levenshtein Distance between \n    w1 and w2.\n    \n    Examples:\n    levenshteinDistance(\"word\", \"word\") ==> 1\n    levenshteinDistance(\"word\", \"dog\") ==> 3\n    levenshteinDistance(\"word\", \"sun\") ==> 3\n    levenshteinDistance(\"intention\", \"execution\") ==> 2\n    \"\"\"\n    len_s = len(w1)\n    len_t = len(w2)\n    return ((len_s + len(w1) - 1) + (len_t + len(w2) - 1) - min(len_s, len_t))\n    \ndef levenshteinDistance(w1, w2):\n    \"\"\"Given two words w1 and w2 return the Levenshtein Distance between \n    w1 and w2.\n    \n    Examples:\n    levenshteinDistance(\"word\", \"word\") ==> 1\n    levenshteinDistance(\"word\", \"dog\") ==> 3\n    levenshteinDistance(\"word\", \"sun\") ==> 3\n    levenshteinDistance(\"intention\", \"execution\") ==> 2\n    \"\"\"\n    if w1 == \"\":\n        return 0\n    if w2 == \"\":\n        return len(w1)\n    \n    len_s = len(w1)\n    len_t = len(w2)\n    \n    dp = [[0 for x in range(len_t+1)] for y in range(len_s+1)]\n    \n    for i in range(len_s+1):\n        for ",
        "test": "assert     select_words(\"a b c\",2)==[\"a\",\"b\",\"c\"]",
        "num_ids": 3784
    },
    {
        "number": 118,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    lower = word.lower()\n    c_count = lower.count(\"c\")\n    v_count = lower.count(\"v\")\n    if c_count == v_count == 0:\n        return \"\"\n    # the max length of the word is the number of letters (consecutive vowels)\n    # in the beginning and the ending\n    if c_count >= v_count:\n        return get_closest_vowel(lower[c_count:])\n    else:\n        return get_closest_vowel(lower[:v_count])\n",
        "test": "assert     get_closest_vowel(word = \"Anna\") == \"\", \"Expected 'Anna' to be the closest vowel\"",
        "num_ids": 1228
    },
    {
        "number": 119,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    # 0) create list of all '(' and close ')'\n    open_parens = []\n    close_parens = []\n    for el in lst:\n        if el == '(':\n            open_parens.append(el)\n        else:\n            if len(open_parens) > 0:\n                close_parens.append(open_parens.pop())\n            else:\n                return 'No'\n    # 1) for all open ')'\n    for el in open_parens:\n        # 2) if the last open ')' was balanced\n        if el == ')':\n            if len(close_parens) > 0:\n                # 3) remove ')' from open ')'\n                open_parens.pop()\n            else:\n                return 'No'\n    # 3) if the last open ')' was not balanced, we can't make a good string\n    return 'No'\n",
        "test": "assert     match_parens(['()', '(())()']), 'No'",
        "num_ids": 2072
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    # O(n^2)\n    # can take up to O(n^2) and take up to O(n^2)\n    # O(k)\n    \n    def sort_arr(arr,k):\n        # initial case\n        if len(arr) <= k:\n            return arr\n        \n        # find the min and max values\n        curr_min = arr[0]\n        curr_max = arr[-1]\n        for i in range(len(arr)):\n            if arr[i] < curr_min:\n                curr_min = arr[i]\n            if arr[i] > curr_max:\n                curr_max = arr[i]\n        \n        # swap and increase and decrease\n        if curr_min > curr_max:\n            arr[0], arr[-1] = arr[-1], arr[0]\n            arr[-1], arr[0] = arr[0], arr[-1]\n        \n        # sort and shrink\n        for i in range(len(arr)):\n            arr[i] = arr[i] + (k - len(arr) - 1)\n            arr[arr[i]] = arr[arr[i] - 1]\n            arr[arr[i]] = arr[arr[i] + 1]\n        \n        return arr\n        \n    return sort_arr(arr, k)\n",
        "test": "assert     maximum(['1', '2', '3', '4', '5'], 4) == ['5', '4', '3', '2', '1']",
        "num_ids": 562
    },
    {
        "number": 121,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            sum += lst[i]\n    return sum\n",
        "test": "assert     solution([]) == 0, \"Bad solution.\"",
        "num_ids": 420
    },
    {
        "number": 122,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    if not arr or k > len(arr):\n        return 0\n    return sum(sorted([arr[i] for i in range(len(arr)) if i % k == 0]) + [arr[i] for i in range(len(arr)) if i % k == 1])",
        "test": "assert     add_elements([2, 4], 2) == 6",
        "num_ids": 357
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    odd_list = []\n    def collatz(n):\n        if n == 1:\n            return 1\n        elif n % 2 == 0:\n            return collatz(n/2)\n        elif n % 2 == 1:\n            return 3 * collatz(n/2) + 1\n    for i in range(1, n+1):\n        odd_list.append(collatz(i))\n    return odd_list\n",
        "test": "assert     get_odd_collatz(1) == [1]",
        "num_ids": 403
    },
    {
        "number": 124,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    try:\n        valid_date = re.compile(r'^\\d{1,2}-[0-2]\\d{1,2}-[0-2]\\d{4}$')\n        if not valid_date.match(date):\n            return False\n    except:\n        return False\n    return True\n",
        "test": "assert     valid_date('20-01-2021') == False",
        "num_ids": 708
    },
    {
        "number": 125,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    # Can take a little time.\n    return [word for word in txt.split(',') if word!= '']\n",
        "test": "assert     split_words(\"a,b,c\") == ['a', 'b', 'c']",
        "num_ids": 482
    },
    {
        "number": 126,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    for item in lst:\n        if item in lst:\n            pass\n        else:\n            return False\n    return True\n",
        "test": "assert     is_sorted([4,5,6,6,6,7,7,8,8,8,9]) == True, 'is_sorted: should have returned True'",
        "num_ids": 500
    },
    {
        "number": 127,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    if interval1[0] <= interval2[1] and interval2[0] <= interval1[1]:\n        return \"YES\"\n    return \"NO\"",
        "test": "assert         intersection((1, 4), (3, 4)) == (\"YES\",)",
        "num_ids": 520
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    # return None for empty arr\n    if not arr:\n        return None\n    \n    magnitude = 0\n    signs = []\n    for num in arr:\n        if num > 0:\n            magnitude += num\n        else:\n            signs.append(1)\n    \n    for sign in signs:\n        magnitude *= sign\n    \n    return magnitude\n",
        "test": "assert     prod_signs([-1,-2,-3]) == 0",
        "num_ids": 1647
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    def minPathHelper(grid, lst, i, j):\n        if i == len(grid):\n            return []\n",
        "test": "assert minPath([[2, 5, 1, 9, 6], [4, 1, 8, 2, 7], [5, 6, 3, 8, 1], [3, 9, 2, 1, 5], [9, 7, 4, 2, 1]], 1) == [2, 3, 4, 6, 9]",
        "num_ids": 904
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    if n == 0 or n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n    elif n == 3:\n        return [1, 2]\n    elif n == 4:\n        return [1, 2, 3]\n    else:\n        ans = [1, 1, 2]\n        for i in range(3, n + 1):\n            ans.append(tri(i) + ans[-1])\n        return ans\n",
        "test": "assert ",
        "num_ids": 495
    },
    {
        "number": 131,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if n == 0:\n        return 0\n    if n < 0:\n        return 0\n    if n % 2 == 1:\n        return 0\n",
        "test": "assert     digits(0) == 0",
        "num_ids": 289
    },
    {
        "number": 132,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    \n    index = 0\n    while index < len(string):\n        if string[index].isalpha():\n            if string[index] == '{' or string[index] == '[':\n                left = string[index]\n                index += 1\n                while index < len(string) and string[index].isalpha():\n                    if string[index] == '}':\n                        if left == '{':\n                            return False\n                        else:\n                            left = '{'\n                            index += 1\n                    elif string[index] == '[':\n                        if left == '[':\n                            return False\n                        else:\n                            left = '['\n                            index += 1\n                    elif string[index] == ']':\n                        if left == ']':\n                            return False\n                        else:\n                            left = ']'\n                            index += 1\n                    else:\n                        if left == ']':\n                            return False\n                        else:\n                            left = '['\n                            index += 1\n                if left == '}':\n                    return False\n                else:\n                    return False\n            else:\n                if string[index] == '}':\n                    return False\n                else:\n                    return False\n        else:\n            index += 1\n    return True\n",
        "test": "assert     is_nested(\"[[2]]\"), \"wrong\"",
        "num_ids": 912
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    return sum(map(lambda x: (x**2),lst))\n",
        "test": "assert     sum_squares([1, 2, 3]) == 7",
        "num_ids": 228
    },
    {
        "number": 134,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    char_set = set()\n    for char in txt:\n        if char in char_set:\n            return False\n        else:\n            char_set.add(char)\n    return True\n",
        "test": "assert     check_if_last_char_is_a_letter('a'), \"Should be True\"",
        "num_ids": 566
    },
    {
        "number": 135,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    d = {}\n    for index in arr:\n        if index in d:\n            return d[index]\n        else:\n            d[index] = index\n    return -1\n",
        "test": "assert     can_arrange([4, 3, 2, 1, 0, 6, 7]) == -1",
        "num_ids": 407
    },
    {
        "number": 136,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    maximum = None\n    minimum = None\n    integers = []\n    for item in lst:\n        if item > 0:\n            integers.append(item)\n            if maximum is None or item > maximum:\n                maximum = item\n        else:\n            if minimum is None or item < minimum:\n                minimum = item\n",
        "test": "assert ",
        "num_ids": 340
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    return max(a, b)\n",
        "test": "assert     compare_one('foo', 'foo') == 'foo'",
        "num_ids": 533
    },
    {
        "number": 138,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    if n <= 3:\n        return True\n",
        "test": "assert     is_equal_to_sum_even(0) == True",
        "num_ids": 382
    },
    {
        "number": 139,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    factorial_value = 1\n    for i in range(n):\n        factorial_value = factorial_value * (i + 1)\n    return factorial_value",
        "test": "assert     special_factorial(1) == 1",
        "num_ids": 273
    },
    {
        "number": 140,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    if len(text) <= 2:\n        return text\n    elif len(text) > 2 and text[0] == \" \" and text[-1] == \" \":\n        text = text[1:-1]\n        return text\n    else:\n        return text + \"-\"\n",
        "test": "assert     fix_spaces(\"  \") == \"  \"",
        "num_ids": 2432
    },
    {
        "number": 141,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    # check if there are more than three digits ('0'-'9') in the file's name\n    if len(file_name) < 3:\n        return 'No'\n    # check if the file's name contains exactly one dot '.'\n    if '.' not in file_name:\n        return 'No'\n    # check if the file's name starts with a letter from the latin alphapet 'a'-'z' and 'A'-'Z'\n    if file_name.startswith('a') and file_name.endswith('z') and file_name.startswith('A'):\n        return 'No'\n    # check if the substring before the dot should not be empty, and it starts with a letter from the latin alphapet\n    # 'a'-'z' and 'A'-'Z'\n    if file_name.startswith('a') and file_name.endswith('z'):\n        if file_name[0] == '.':\n            return 'No'\n    # check if the substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    if file_name[1:] in ['txt', 'exe', 'dll']:\n        return 'No'\n    # return 'Yes' if the file's name is valid\n    return 'Yes'\n",
        "test": "assert     file_name_check(\"Dont do this!\") == \"No\"",
        "num_ids": 757
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    sum_squares = 0\n    for i in lst:\n        sum_squares += i*i\n    return sum_squares\n",
        "test": "assert     sum_squares([1,0]) == 1",
        "num_ids": 379
    },
    {
        "number": 143,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    return \" \".join([word for word in sentence.split() if len(word) > 1])\n",
        "test": "assert     words_in_sentence('abbccccdd') == 'abbccccdd'",
        "num_ids": 1396
    },
    {
        "number": 144,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    # your code\n    #raise NotImplementedError\n    return True\n",
        "test": "assert     simplify(\"1/3\", 3) == True",
        "num_ids": 273
    },
    {
        "number": 145,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    nums.sort()\n    return nums\n",
        "test": "assert     order_by_points([]) == []",
        "num_ids": 631
    },
    {
        "number": 146,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    # your code here\n    count=0\n    first=nums[0]\n    last=nums[-1]\n    for i in nums:\n        if i>=10 and first<i<=last:\n            count+=1\n    return count\n",
        "test": "assert     specialFilter([3, 8, 9, 0]) == 4",
        "num_ids": 496
    },
    {
        "number": 147,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    if n < 3:\n        return n\n",
        "test": "assert get_max_triples(2) == 2",
        "num_ids": 265
    },
    {
        "number": 148,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    #Your code goes here\n    return planet1, planet2\n",
        "test": "assert bf(\"Mercury\", \"Mercury\") == ('Mercury', 'Mercury')",
        "num_ids": 2355
    },
    {
        "number": 149,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    lst.sort()\n    result = []\n    for i in lst:\n        if len(i)%2:\n            result.append(i)\n    return result\n",
        "test": "assert     sorted_list_sum([2,4,6,8]) == [2,4,6,8]",
        "num_ids": 815
    },
    {
        "number": 150,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    if x is None or y is None:\n        return None\n    \n    # if n is not a prime number\n    if n < 2 or n % 2 == 0:\n        return x\n",
        "test": "assert     x_or_y(2, 1, 1) == 1",
        "num_ids": 1495
    },
    {
        "number": 151,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "    sums = 0\n    for num in lst:\n        if num % 2!= 0:\n            sums += num ** 2\n    return sums\n",
        "test": "assert     double_the_difference([]) == 0",
        "num_ids": 292
    },
    {
        "number": 152,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    \n    res=[]\n    # if the guess is right, the length is now equal to the result of the guess\n    for i in range(len(guess)):\n        if guess[i]==game[i]:\n            res.append(0)\n        else:\n            # find the absolute difference between the guess and the score, and add it to a list\n            res.append(abs(guess[i]-game[i]))\n    # return the result\n    return res\n",
        "test": "assert     compare([6,6,1,3,1], [6,6,1,3,1]) == [0,0,0,0,0]",
        "num_ids": 690
    },
    {
        "number": 153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    max_cap = 0\n    min_cap = 0\n    max_sm = 0\n    min_sm = 0\n    for extension in extensions:\n        num = extension.count(' ')\n        cap = extension.count('C')\n        sm = extension.count('S')\n        if cap > max_cap:\n            max_cap = cap\n        if sm > max_sm:\n            max_sm = sm\n        if cap < min_cap:\n            min_cap = cap\n        if sm < min_sm:\n            min_sm = sm\n    cap_str = f'{max_cap}/{min_cap}'\n    sm_str = f'{max_sm}/{min_sm}'\n    return f'{class_name}.{min_cap}{cap_str}.{min_sm}{sm_str}'\n    \ndef Classify_Classes(class_name, class_list):\n    \"\"\"You have the name of a class (a string) and a list of classes.\n    The class is a string and it should be divided into two pieces: a class name,\n    and a list of the extensions that are present in the class. You should return\n    a tuple containing the string class name, and a list of the extensions, \n    where each extension is a list of two strings, one for the capital letters of\n    the extension's name and the other for the lower case letters in the extension's name.\n    For example, if you have class 'Mexican', and the extensions are:\n    ['CAS', 'CECI', 'SDF'] then you should return ('CAS', ['CECI', 'SDF'])\n    In the example above the first list would be the capital letters of the extension's \n    name, and the second list would be the lower case letters in the extension's name.\n    Note that the length of the extension list should be the same as the length of the \n    class.\n    Example:\n    for Classify_Classes('my_class', ['AA', 'Be', 'CC']) == ('my_class.AA', ['Be', 'CC'])\n    \"\"\"\n    class_name = class_name.split('.')\n    extension_list = []\n    for extension in class_list:\n        extension = extension.split('.')\n        if len(extension)!= 2:\n            continue\n        extension = extension[0].capitalize()\n        extension = extension.lower()\n        extension_list.append(extension)\n    class_name = class_name[0]\n    class_list = extension_list\n    return class_name, class_list\n",
        "test": "assert     strongest_extension('AbC', ['Slices']) == 'Slices'",
        "num_ids": 4244
    },
    {
        "number": 154,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    # if len(a) > len(b):\n    #     return False\n    # if len(a) < len(b):\n    #     return False\n    # if a[:len(b)]!= b:\n    #     return False\n    # return True\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)-len(a)+1):\n        if a[:i+1] in b:\n            return True\n    return False\n",
        "test": "assert cycpattern_check(\"act\", \"azc\") == True",
        "num_ids": 848
    },
    {
        "number": 155,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    # If we're starting at 0 then we should return 0, since we always start counting from 1\n    if num == 0:\n        return (0, 0)\n    \n    # We want to keep track of the last digit of the number and if it's even or odd\n    last_digit = num % 10\n    count = 0\n    \n    # For each digit in the number, we check if it's even or odd\n    # If we're checking odd then we multiply by 2, as we can see that it's even\n    # For each even digit, we just multiply by 2 because we know it's even\n    # For each odd digit, we add one because we'll check next time\n    while num > 0:\n        num = num // 10\n        count += 1\n        if num % 10 == 0 and last_digit % 2 == 0:\n            count += 2\n        if num % 10 == 0 and last_digit % 2!= 0:\n            count += 1\n        last_digit = num % 10\n    return (count, count % 2 == 0)\n",
        "test": "assert     even_odd_count(7) == (2,1)",
        "num_ids": 544
    },
    {
        "number": 156,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    roman_num = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n    result = ''\n    for value, symbol in roman_num.items():\n        if number >= value:\n            return result + symbol\n    return result + str(number)\n",
        "test": "assert     int_to_mini_roman(1) == \"I\"",
        "num_ids": 759
    },
    {
        "number": 157,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    a, b, c = float(a), float(b), float(c)\n    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n",
        "test": "assert     not right_angle_triangle(3, 2, 4)",
        "num_ids": 539
    },
    {
        "number": 158,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    # intialize the max value of each word\n    max_len = 0\n    max_word = \"\"\n    # loop over the words\n    for word in words:\n        # if the length of the word is greater than the max value, update it\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word\n",
        "test": "assert     find_max([\"apple\", \"banana\", \"orange\", \"apple\"]) == \"banana\"",
        "num_ids": 542
    },
    {
        "number": 159,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    assert isinstance(number, int) and isinstance(need, int) and isinstance(remaining, int), 'invalid arguments'\n    remaining = remaining - need\n    total = 0\n    \n    if remaining >= need:\n        for i in range(0, need):\n            remaining = remaining - 1\n            total = total + 1\n    else:\n        for i in range(0, need):\n            remaining = remaining + 1\n            total = total + 1\n    \n    if remaining <= 0:\n        return [total, remaining]\n    else:\n        return [total, remaining]\n",
        "test": "assert     eat(3, 2, 1) == [2, 1]",
        "num_ids": 859
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    # function to calculate the sum of two numbers\n    def sum(x, y):\n        return x + y\n",
        "test": "assert     do_algebra([1,2,3], [4,5,6,7,8,9]) == -5",
        "num_ids": 727
    },
    {
        "number": 161,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    \n    def rev(s):\n        \"\"\"Convert uppercase letters into lowercase letters.\n        \"\"\"\n        s = s.lower()\n        \n        return s[::-1]\n    \n    def r_rev(s):\n        \"\"\"Convert lowercase letters into uppercase letters.\n        \"\"\"\n        return s.upper()\n    \n    def rev_up(s):\n        \"\"\"Convert uppercase letters into lowercase letters.\n        \"\"\"\n        return s[::-1].upper()\n    \n    def rev_v(s):\n        \"\"\"Convert lowercase letters into uppercase letters.\n        \"\"\"\n        return s.upper()\n    \n    def rev_l(s):\n        \"\"\"Convert uppercase letters into lowercase letters.\n        \"\"\"\n        return s[::-1].lower()\n    \n    def uniq_rev(s):\n        \"\"\"Convert uppercase letters into lowercase letters and then reverse all letters.\n        \"\"\"\n        return [rev(s) for s in s.split()]\n    \n    def uniq_r(s):\n        \"\"\"Convert lowercase letters into uppercase letters and then reverse all letters.\n        \"\"\"\n        return [r_rev(s) for s in s.split()]\n    \n    def uniq_l(s):\n        \"\"\"Convert lowercase letters into uppercase letters and then reverse all letters.\n        \"\"\"\n        return [l_rev(s) for s in s.split()]\n    \n    def uniq_u(s):\n        \"\"\"Convert uppercase letters into lowercase letters and then reverse all letters.\n        \"\"\"\n        return [u_rev(s) for s in s.split()]\n    \n    def uniq_v(s):\n        \"\"\"Convert uppercase letters into lowercase letters and then reverse all letters.\n        \"\"\"\n        return [v_rev(s) for s in s.split()]\n    \n    s = s.strip()\n    \n    if len(s) == 0:\n        return s\n    \n    up = uniq_up(s)\n    v = uniq_v(s)\n    r = uniq_r(s)\n    l = uniq_l(s)\n    u = uniq_u(s)\n    \n    return ''.join([v[i]+u[i] for i in range(len(v))])+''.join([r[i]+l[i] for i in range(len(r))])+''.join([u[i]+l[i] for i in range(len(u))])\n",
        "test": "assert     solve(\"aa\") == \"AaBbCcDdEeFf\"",
        "num_ids": 1413
    },
    {
        "number": 162,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    if text == '':\n        return None\n",
        "test": "assert string_to_md5(\"\") == None",
        "num_ids": 369
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    \n    result = []\n    for i in range(a, b+1):\n        if i%2 == 0:\n            result.append(i)\n    return result\n",
        "test": "assert     generate_integers(1, 4) == [2, 4]",
        "num_ids": 316
    }
]