[
    {
        "number": 0,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    for n in numbers:\n        if abs(n) < threshold:\n            return False\n    return True\n",
        "test": "assert     has_close_elements([1, 2, 3, 4, 5, 1, 6], 0.1)"
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    if paren_string == '':\n        return []\n    output = []\n",
        "test": "assert     separate_paren_groups(\"((a))(b)c\") == ['a', 'b', 'c']"
    },
    {
        "number": 2,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    return round(number)\n",
        "test": "assert     truncate_number(0) == 0"
    },
    {
        "number": 3,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    def recurse(index, sum):\n        if index == len(operations):\n            return sum == 0\n        if sum == 0:\n            return False\n        if sum < 0:\n            return recurse(index + 1, sum * -1)\n        if sum > 0:\n            return recurse(index + 1, sum + operations[index])\n    return recurse(0, 0)\n",
        "test": "assert     below_zero([-1, 2, -3, 4]) == False"
    },
    {
        "number": 4,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    numbers = list(numbers)\n    mean = sum(numbers)/len(numbers)\n    mean_of_numbers = mean\n    for number in numbers:\n        mean_of_numbers -= number\n    return abs(mean_of_numbers)/len(numbers)\n",
        "test": "assert mean_absolute_deviation([1, 3, 5]) == 2"
    },
    {
        "number": 5,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    return [n + delimeter for n in numbers[:-1]] + [n + delimeter for n in numbers[1:]]\n",
        "test": "assert "
    },
    {
        "number": 6,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "    out = []\n    for s in paren_string.split():\n        if s[0] == '(':\n            out.append(len(out))\n        elif s[-1] == '(':\n            out.append(len(out))\n        elif out[-1] > len(out):\n            out.append(len(out))\n    return out\n",
        "test": "assert     parse_nested_parens('') == []"
    },
    {
        "number": 7,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "    result = []\n    for s in strings:\n        if substring in s:\n            result.append(s)\n    return result",
        "test": "assert     filter_by_substring([\"abc\", \"def\", \"ghi\", \"jkl\"], \"j\") == [\"jkl\"]"
    },
    {
        "number": 8,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    \n    result = []\n    if not numbers:\n        return (0, 1)\n    for number in numbers:\n        result.append(number * number)\n    return (sum(result), 1)\n",
        "test": "assert     sum_product([]) == (0,1)"
    },
    {
        "number": 9,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "    lst = []\n    for i in range(len(numbers) - 1, -1, -1):\n        val = numbers[i]\n        lst.append(val)\n        for j in range(i):\n            val = numbers[j]\n            lst.append(val)\n    return lst",
        "test": "assert     rolling_max([]) == []"
    },
    {
        "number": 10,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    # TODO: Write your code here\n    i = 0\n    last = ''\n    for i, c in enumerate(string):\n        # only use the longest suffix\n        if c in string[i+1:]:\n            last = string[i+1:][::-1]\n        # add suffix to the palindrome\n        last += c\n    # check if string is palindrome\n    if is_palindrome(last):\n        return last\n    else:\n        # reverse the suffix and prefix\n        return string[::-1] + last\n",
        "test": "assert     is_palindrome(make_palindrome(\"abcd\")) == True"
    },
    {
        "number": 11,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "    c = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            c = c + '0'\n        else:\n            c = c + '1'\n    return c\n",
        "test": "assert     string_xor('0', '0') == '0'"
    },
    {
        "number": 12,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    if len(strings) == 0:\n        return None\n    longest = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest):\n            longest = s\n    return longest\n",
        "test": "assert     longest(\"a\") == \"a\""
    },
    {
        "number": 13,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    if a == b:\n        return a\n    if a > b:\n        return greatest_common_divisor(a - 1, b)\n    elif a < b:\n        return greatest_common_divisor(a + 1, b)\n",
        "test": "assert     greatest_common_divisor(1, 1) == 1"
    },
    {
        "number": 14,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    prefix_list = []\n    l = len(string)\n    for i in range(1, l+1):\n        prefix = string[:i]\n        prefix_list.append(prefix)\n    return prefix_list\n",
        "test": "assert     all_prefixes(\"\") == []"
    },
    {
        "number": 15,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "    return''.join([str(i) for i in range(1, n + 1)])\n",
        "test": "assert     string_sequence(0) == \"\""
    },
    {
        "number": 16,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i] not in string[i:]:\n            count += 1\n    return count\n",
        "test": "assert     count_distinct_characters('') == 0"
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "    idx = 0\n    beats = 0\n    current_note = ''\n",
        "test": "assert     parse_music(\"o|o|.\") == [2, 1, 1, 2, 1, 1]"
    },
    {
        "number": 18,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "    # Split the string and create a list of characters, if the string is empty, return 0.\n    # Otherwise, go through each character and check if it is the same as the substring.\n    # Return the count of the total.\n    # Example\n    # Input:\n    # string: 'ab'\n    # substring: 'ab'\n    # Output:\n    # 3\n    # Explanation:\n    # 'a' occurs 3 times, so count is 3.\n    # 'a' occurs 1 time, so count is 1.\n    # 'aaaa' occurs 3 times, so count is 3.\n    # 'aaaa' occurs 1 time, so count is 1.\n    # If substring is not found, count is 0.\n    # If substring is found, return count.\n    \n    s = len(string)\n    if s == 0:\n        return 0\n    \n    count = 0\n    for i in range(len(string) - 1):\n        if string[i] == string[i + 1]:\n            count += 1\n        \n    return count\n    \n    # Brute force, how many times a substring can occur in the original string.\n    # Dynamic Programming\n    # Time Complexity: O(N)\n    # Space Complexity: O(N)\n    # O(N)\n",
        "test": "assert how_many_times(\"There are 4 strings with 6 digits\", \"tjkaz\") == 0"
    },
    {
        "number": 19,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    return''.join([str(n) for n in sorted(numbers.split(' '))])\n",
        "test": "assert     sort_numbers('zero') == 'zero'"
    },
    {
        "number": 20,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "    return (min(numbers), max(numbers))\n",
        "test": "assert     find_closest_elements([1]) == (1, 1)"
    },
    {
        "number": 21,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "    return [n / float(numbers[0]) for n in numbers]\n",
        "test": "assert rescale_to_unit([]) == []"
    },
    {
        "number": 22,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "    return [int(x) for x in values if type(x) is int]\n",
        "test": "assert     filter_integers([1,2,3])!= []"
    },
    {
        "number": 23,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    n = 0\n    for char in string:\n        n += 1\n    return n\n    \ndef strsplit(string: str) -> list:\n    \"\"\" Split given string into a list\n    >>> strsplit('aabccccc')\n    ['a', 'a', 'b', 'c', 'c']\n    \"\"\"\n    string_list = string.split()\n    return string_list\n",
        "test": "assert     strlen('a') == 1"
    },
    {
        "number": 24,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "    divisor_array = [i for i in range(1, n+1) if n % i == 0]\n    return divisor_array[-1]\n",
        "test": "assert     largest_divisor(3) == 3"
    },
    {
        "number": 25,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "    return [i for i in range(1, n + 1) if n % i == 0]\n    \n",
        "test": "assert     factorize(9) == [1, 3, 9]"
    },
    {
        "number": 26,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n",
        "test": "assert     remove_duplicates([]) == []"
    },
    {
        "number": 27,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    return string.lower()\n",
        "test": "assert flip_case(\"123\") == \"123\""
    },
    {
        "number": 28,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate([]) == \"\""
    },
    {
        "number": 29,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([\"abc\"], \"a\") == [\"abc\"]"
    },
    {
        "number": 30,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "    return [int(n) for n in list(filter(lambda x: x >= 0, l))]\n",
        "test": "assert     get_positive([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"
    },
    {
        "number": 31,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    \n    # Write your code here.\n    if n == 2 or n == 3 or n == 5:\n        return True\n    if n % 2 == 0 or n % 3 == 0 or n % 5 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert is_prime(3) == True"
    },
    {
        "number": 32,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "    if xs == []:\n        return 0.0\n    elif len(xs) % 2 == 1:\n        return 0.0\n    else:\n        return max([poly(xs[i:], xs[0]) for i in range(len(xs))])\n",
        "test": "assert     find_zero([0, 0]) == 0"
    },
    {
        "number": 33,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    l = list(l)\n    l.sort()\n    return l\n",
        "test": "assert sort_third([]) == []"
    },
    {
        "number": 34,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "    return sorted(set(l))\n",
        "test": "assert     unique([]) == []"
    },
    {
        "number": 35,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    if len(l) == 0:\n        return None\n    else:\n        return max(l)\n",
        "test": "assert     max_element([3, 6, 8]) == 8, \"Should return 8, not 6\""
    },
    {
        "number": 36,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "    # let the number of times the digit 7 is divisible by 11 or 13\n    if n%11==0:\n        return 0\n    elif n%13==0:\n        return 1\n    elif n%7==0:\n        return 2\n    elif n%5==0:\n        return 3\n    else:\n        return 0\n",
        "test": "assert     fizz_buzz(0) == 0"
    },
    {
        "number": 37,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "    even_index = 0\n    odd_index = 1\n    while even_index < len(l) and odd_index < len(l):\n        if l[even_index] % 2 == 0:\n            l[even_index], l[odd_index] = l[odd_index], l[even_index]\n            even_index += 1\n            odd_index += 1\n        else:\n            odd_index += 1\n    return l\n",
        "test": "assert sort_even([1, 2, 4, 7, 9, 3, 6, 5, 8, 10, 10, 4, 5])!= [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 9, 8]"
    },
    {
        "number": 38,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert         decode_cyclic(\"\") == \"\""
    },
    {
        "number": 39,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    if n == 0 or n == 1:\n        return n\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n",
        "test": "assert     prime_fib(0) == 0"
    },
    {
        "number": 40,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "    # YOUR CODE HERE\n    count = 0\n    for num in l:\n        if num==0:\n            count+=1\n        else:\n            return False\n    if count==2:\n        return True\n    else:\n        return False\n",
        "test": "assert     triples_sum_to_zero([-5, -5, 1, 1, -1, -2, 2, 2]) == False"
    },
    {
        "number": 41,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    if n % 2 == 0:\n        return n//2\n    else:\n        return n - 1\n",
        "test": "assert car_race_collision(0) == 0"
    },
    {
        "number": 42,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "    return [e + 1 for e in l]\n",
        "test": "assert     incr_list([]) == []"
    },
    {
        "number": 43,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "    if len(l) == 2:\n        if l[0] == l[1]:\n            return True\n        else:\n            return False\n    else:\n        for index in range(len(l)):\n            if l[index] == 0:\n                for i in range(index+1, len(l)):\n                    if l[i] == 0:\n                        return True\n        return False\n",
        "test": "assert     pairs_sum_to_zero([1, 1, 1, 0, 1]) == False"
    },
    {
        "number": 44,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "    return str(x)\n",
        "test": "assert     change_base(99, 1) == \"99\""
    },
    {
        "number": 45,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "    return (a * h) / 2\n",
        "test": "assert     triangle_area(1, 2) == 1"
    },
    {
        "number": 46,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    ",
        "test": "assert     fib4(0) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    if l is None:\n        return None\n    else:\n        return sorted(l, key=lambda x: x)[int(len(l)/2)]\n",
        "test": "assert     median([4, 5, 6]) == 5"
    },
    {
        "number": 48,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "    text = text.replace(' ', '').lower()\n    return text == text[::-1]\n",
        "test": "assert     is_palindrome(text=\"\") == True"
    },
    {
        "number": 49,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n % p == 0:\n        return n // p\n    return modp(n - 2, p) + 2\n",
        "test": "assert     modp(0,1) == 0"
    },
    {
        "number": 50,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(\"\") == \"\""
    },
    {
        "number": 51,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    # start off by making an empty string\n    vowels = ''\n    # go through each character in the string\n    for char in text:\n        if char.lower() in vowels:\n            # if the character is a vowel, remove it from the vowels string\n            vowels = vowels[:vowels.index(char)] + char + vowels[vowels.index(char)+1:]\n        else:\n            # otherwise, keep it\n            vowels = vowels + char\n    # return the new string\n    return vowels",
        "test": "assert     remove_vowels(\" \") == \" \""
    },
    {
        "number": 52,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    for i in range(len(l)):\n        if l[i] < t:\n            return False\n    return True\n",
        "test": "assert     (below_threshold(l=[0,1,2,3,4,5], t=3) == False)"
    },
    {
        "number": 53,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "    return x + y\n",
        "test": "assert     add(2, 5) == 7"
    },
    {
        "number": 54,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    chars = 'abcdefghijklmnopqrstuvwxyz'\n    return any(s0[i] == s1[i] for i in range(len(s0)))\n",
        "test": "assert     same_chars(\"t\", \"u\") == False"
    },
    {
        "number": 55,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "test": "assert fib(1) == 1"
    },
    {
        "number": 56,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "    return all(len(a) == 1 or a[0] == \"(\" for a in brackets)\n    \n",
        "test": "assert     correct_bracketing(\"<>\") == True"
    },
    {
        "number": 57,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "    if not l:\n        return False\n    if l[0] <= l[1]:\n        return True\n    for i in range(1, len(l)):\n        if l[i] <= l[i - 1]:\n            return True\n    return False\n",
        "test": "assert     (monotonic([1,2,3])) == True, \"Should be True\""
    },
    {
        "number": 58,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    \n    return [l1[i] for i in range(len(l1)) if l1[i] in l2]\n",
        "test": "assert     common([], []) == []"
    },
    {
        "number": 59,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "    if n < 1: return 0\n    i = 2\n    prime_factor = 2\n    while i < n:\n        if n % i == 0:\n            prime_factor = i\n            n = n // i\n        else:\n            i = i + 1\n    return prime_factor\n",
        "test": "assert     largest_prime_factor(12) == 2"
    },
    {
        "number": 60,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "    return sum(range(1, n+1))\n",
        "test": "assert     sum_to_n(1) == 1"
    },
    {
        "number": 61,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            top = stack.pop()\n            if not top == \"(\":\n                return False\n    if stack:\n        return False\n    return True\n",
        "test": "assert     correct_bracketing(\")\") == False"
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "    if xs[0] == xs[1] == xs[2] == 0:\n        return [0, 0, 0]\n    else:\n        return [2 * xs[0], 2 * xs[1], 2 * xs[2]]\n",
        "test": "assert     derivative([1, 2, 3]) == -3"
    },
    {
        "number": 63,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0"
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "    l = 0\n    for i in s:\n        if i in 'AEIOUaeiou':\n            l += 1\n    return l\n",
        "test": "assert     vowels_count('Python') == 1"
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "    shift %= len(x)\n    if shift:\n        return str(int(x) + shift)\n    else:\n        return str(int(x) - shift)\n",
        "test": "assert     circular_shift(98765, 6) == 756"
    },
    {
        "number": 66,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "    \n    return sum([int(i) for i in s.upper() if i.isalpha()])\n    \n    # use: print([int(i) for i in s.upper() if i.isalpha()])\n    ",
        "test": "assert "
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    # FIRST - PARENTHESIS\n    if s == \"0\":\n        return 0\n    elif s[0] == \"1\":\n        return fruit_distribution(s[1:],n) + fruit_distribution(s[2:],n)\n    # SECOND - OPERAND\n    elif s[0] == \"2\":\n        return fruit_distribution(s[1:],n) + fruit_distribution(s[2:],n) + fruit_distribution(s[3:],n)\n    else:\n        # FIRST - CHECK IF POSITION IS CORRECT\n        if s[0] == \"1\":\n            # FIRST - CHECK IF POSITION IS CORRECT\n            if s[1] == \"1\":\n                return fruit_distribution(s[2:],n) + fruit_distribution(s[3:],n)\n            elif s[2] == \"1\":\n                return fruit_distribution(s[3:],n) + fruit_distribution(s[4:],n) + fruit_distribution(s[5:],n)\n        elif s[0] == \"2\":\n            # FIRST - CHECK IF POSITION IS CORRECT\n            if s[1] == \"1\":\n                return fruit_distribution(s[2:],n) + fruit_distribution(s[3:],n) + fruit_distribution(s[4:],n) + fruit_distribution(s[5:],n)\n            elif s[2] == \"1\":\n                return fruit_distribution(s[4:],n) + fruit_distribution(s[5:],n) + fruit_distribution(s[6:],n) + fruit_distribution(s[7:],n)\n        else:\n            return fruit_distribution(s[1:],n) + fruit_distribution(s[2:],n) + fruit_distribution(s[3:],n) + fruit_distribution(s[4:],n) + fruit_distribution(s[5:],n) + fruit_distribution(s[6:],n) + fruit_distribution(s[7:],n) + fruit_distribution(s[8:],n)\n",
        "test": "assert "
    },
    {
        "number": 68,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    result = []\n    if len(arr) == 0:\n        return []\n    arr = sorted(arr)\n    idx = 0\n    for i in range(1,len(arr)):\n        if arr[i] % 2 == 0:\n            result.append(arr[idx])\n            idx += 1\n        else:\n            result.append(arr[i])\n    return result\n    ",
        "test": "assert     pluck([]) == []"
    },
    {
        "number": 69,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "    lst.sort()\n    i = 0\n    while i < len(lst):\n        j = i + 1\n        while j < len(lst):\n            if lst[i] > lst[j] and lst[i] - lst[j] > 0:\n                return lst[i]\n            j += 1\n        i += 1\n    return -1\n",
        "test": "assert     search([1, 0, 2, 3, 4, 5]) == -1"
    },
    {
        "number": 70,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "    strange_list = []\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if lst[i] < lst[j]:\n                lst[i], lst[j] = lst[j], lst[i]\n    return lst\n",
        "test": "assert     1==1"
    },
    {
        "number": 71,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "    # loop through the triangle and sum the values\n    sum = a + b + c\n    # check if sum is divisible by the length of the sides\n    if(sum % 2 == 0):\n        # return the area of the triangle\n        return sum / 2\n    else:\n        # return the area of the triangle when the sum of the two sides is not divisible\n        return -1\n",
        "test": "assert         triangle_area(1, 4, 4) == -1.0"
    },
    {
        "number": 72,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "    return (q and is_palindrome(q[:]) and sum(q) <= w and is_palindrome(q[::-1]))\n",
        "test": "assert will_it_fly(q,w) == False"
    },
    {
        "number": 73,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    m = len(arr)\n    if m == 1:\n        return 0\n    if m == 2:\n        if arr[0] == arr[1]:\n            return arr[0]\n        return arr[0]\n    if m == 3:\n        if arr[0] == arr[2]:\n            return arr[0]\n        return arr[0]\n    if m == 4:\n        if arr[2] == arr[3]:\n            return arr[2]\n        return arr[2]\n    if m == 5:\n        if arr[3] == arr[4]:\n            return arr[3]\n        return arr[3]\n    if m == 6:\n        if arr[3] == arr[4]:\n            return arr[3]\n        return arr[4]\n    if m == 7:\n        if arr[4] == arr[5]:\n            return arr[4]\n        return arr[4]\n    if m == 8:\n        if arr[5] == arr[6]:\n            return arr[5]\n        return arr[5]\n    if m == 9:\n        if arr[6] == arr[7]:\n            return arr[6]\n        return arr[6]\n    if m == 10:\n        if arr[7] == arr[8]:\n            return arr[7]\n        return arr[7]\n    \n    min_change = 0\n    start = m - 1\n    end = 0\n    while start >= 0 and end < m:\n        min_change = min(min_change, arr[start] - arr[end])\n        start -= 1\n        end += 1\n    return min_change\n",
        "test": "assert     smallest_change([0]) == 0, \"Should be empty\""
    },
    {
        "number": 74,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    lst3 = []\n    if len(lst1) == len(lst2):\n        for i in lst1:\n            if len(i) <= len(lst2):\n                lst3.append(i)\n        return lst3\n    else:\n        return lst1\n",
        "test": "assert     total_match([], ['1', '2', '3', '4']) == []"
    },
    {
        "number": 75,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    for x in range(2,a):\n        if (a % x == 0):\n            return False\n    return True\n",
        "test": "assert     is_multiply_prime(16) == False"
    },
    {
        "number": 76,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "    # create a base case to stop the function if we reach a base case, and return false if we reach a power base case.\n    if n == 0:\n        return True\n    elif n <= 0:\n        return False\n    else:\n        return (is_simple_power(x, n-1))\n",
        "test": "assert     is_simple_power(0, 1) == True"
    },
    {
        "number": 77,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    return a == a**3\n",
        "test": "assert     iscube(8) == False"
    },
    {
        "number": 78,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    digit = 0\n    for i in str(num):\n        digit += int(i)\n    return digit\n",
        "test": "assert     hex_key(0) == 0"
    },
    {
        "number": 79,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    return f\"{decimal:b}\"\n",
        "test": "assert     decimal_to_binary(3) == '11'"
    },
    {
        "number": 80,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "    answer = []\n    for i in range(len(s) - 3):\n        temp = []\n        temp.append(s[i])\n        temp.append(s[i+1])\n        temp.append(s[i+2])\n        if temp not in answer:\n            answer.append(temp)\n    if answer == []:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_happy('aaabbbcaaa') == False"
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    \n    # list of letter grades\n    # [['A+', 'A'], ['A-', 'B'], ['B+', 'C'], ['C-', 'D'], ['D-', 'E']]\n    \n    # get the highest and lowest GPA for the list\n    highest = max(grades)\n    lowest = min(grades)\n    \n    # calculate the grade\n    grade = [0, 0]\n    for i in range(len(grades)):\n        grade[0] += grades[i]\n        if grades[i] > highest:\n            grade[1] += 1\n            \n        elif grades[i] < lowest:\n            grade[1] += -1\n            \n    # get the letter grade\n    grades = [grade[0] / grade[1] * 100, grade[1] / grade[0] * 100]\n    \n    # return the list of letter grades\n    return grades",
        "test": "assert     numerical_letter_grade([4,3,2,1,0.7,3.3,2.3,1.7,0.0,0.7,3.0,2.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0."
    },
    {
        "number": 82,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "    # Do not change this line\n    if len(string) <= 1:\n        return True\n    for i in range(2, len(string)):\n        if string[i] == 'a' or string[i] == 'e' or string[i] == 'i' or string[i] == 'o' or string[i] == 'u':\n            continue\n        if string[i] == '0' or string[i] == '1':\n            return False\n    return True\n",
        "test": "assert     prime_length(\"bad\") == True"
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "    # return int(ceil(log2(n)))\n    return int(ceil(log2(n))) - 1\n",
        "test": "assert     starts_one_ends(10) == 2"
    },
    {
        "number": 84,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "    # Step 1: Initialize a variable to store the number of digits in the number.\n    # Step 2: Initialize an array called digits to store the number of digits.\n    # Step 3: While number of digits < 10:\n        # Step 4: Add the number of digits to the array.\n        # Step 5: Repeat step 2 until number of digits is greater than 0.\n    # Step 6: Return the total sum of digits.\n    # Step 7: Make sure that the total sum of digits is the same as\n        # Step 2 above.\n    # Step 8: Return the total sum of digits.\n    digits = []\n    sum = 0\n    while N > 0:\n        if N >= 10:\n            sum += N % 10\n            N = N // 10\n        else:\n            sum += N\n            N = 0\n    if sum % 2 == 0:\n        digits.append(sum)\n    else:\n        digits.append(sum)\n        digits.append(sum + 1)\n    return \"\".join(map(str,digits))\n",
        "test": "assert     solve(0) == \"0\""
    },
    {
        "number": 85,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    print(f\"Adding to the {lst} list\")\n    for i in range(0, len(lst) - 1, 2):\n        lst[i], lst[i + 1] = lst[i + 1], lst[i]\n    return lst\n",
        "test": "assert     add([]) == []"
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "    return s.replace(' ', '') +'' + ''.join(sorted(s.split(' ')))\n",
        "test": "assert     anti_shuffle(' ') ==''"
    },
    {
        "number": 87,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    return sorted(lst, key=lambda x: (x[x.index(x[0])] if x[0]!= 0 else 0, x[1] if x[1]!= 0 else 0, x[0]))\n",
        "test": "assert     get_row([(1,2), (3,4), (5,6)],4) == [(1,2), (3,4), (5,6)]"
    },
    {
        "number": 88,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    # TODO: return a sorted array\n    # remove duplicates\n    sorted = [array[i] for i in range(len(array))]\n    # TODO: sort\n    for i in range(len(sorted)):\n        for j in range(len(sorted)):\n            # check the current sum is odd or even\n            if(sorted[i] + sorted[j] % 2 == 0):\n                sorted[i], sorted[j] = sorted[j], sorted[i]\n    # TODO: return\n    return sorted",
        "test": "assert     sort_array([]) == []"
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    return ''.join([c*2 for c in s])\n",
        "test": "assert encrypt(\"\") == \"\""
    },
    {
        "number": 90,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "    \n    lst.sort()\n    if lst[0] == lst[-1]:\n        return lst[0]\n    else:\n        return next_smallest(lst[1:])\n        \n",
        "test": "assert     next_smallest([9, 9, 9, 9, 9, 9, 9]) == 9"
    },
    {
        "number": 91,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "    count = 0\n    for w in S:\n        if w == \"I\":\n            count += 1\n        if w == \"!\":\n            count += 1\n        if w == \".\":\n            count += 1\n    return count\n",
        "test": "assert     is_bored(\"Hello\") == False"
    },
    {
        "number": 92,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "    x = int(x)\n    y = int(y)\n    z = int(z)\n    if (x + y == z) or (x + z == y) or (x == y) or (x == z) or (y == z):\n        return True\n    else:\n        return False\n",
        "test": "assert    any_int(2, 3, 5) == True"
    },
    {
        "number": 93,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    words = message.split()\n    for i in range(len(words)):\n        if words[i].isupper():\n            words[i] = words[i].swapcase()\n    return \" \".join(words)\n",
        "test": "assert     encode('lazy') == 'lazy'"
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    maximum = 0\n    for i in lst:\n        if is_prime(i):\n            if i > maximum:\n                maximum = i\n        else:\n            if i!= 0:\n                maximum = i\n    return maximum\n",
        "test": "assert     skjkasdkd([]) == 0"
    },
    {
        "number": 95,
        "max_answer_num": 13,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "    # check if all keys are strings in lower case\n    if len(set(dict.keys()).intersection(set(dict.values()))) == len(dict.keys()):\n        return True\n    # check if all keys are strings in upper case\n    if len(set(dict.keys()).intersection(set(dict.values()))) == len(dict.keys()):\n        return False\n    # check if all keys are strings\n    return True\n",
        "test": "assert     check_dict_case({\"cola\": 1, \"cow\": 2}) == True"
    },
    {
        "number": 96,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    if n<=1:\n        return []\n    count_up_to_list = []\n    i=2\n    while i<=n:\n        if is_prime(i):\n            count_up_to_list.append(i)\n        i+=1\n    return count_up_to_list\n",
        "test": "assert     count_up_to(0) == []"
    },
    {
        "number": 97,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "    # Your code here\n    return (a*b)\n",
        "test": "assert     multiply(3, 2) == 6"
    },
    {
        "number": 98,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n",
        "test": "assert     count_upper(\"a\") == 0"
    },
    {
        "number": 99,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "    if type(value) is not str:\n        raise TypeError('string expected')\n",
        "test": "assert     closest_integer(\"1.23\") == 1.23"
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "    if n%2==0:\n        return [n//2, (n//2)+1]\n    else:\n        return [n//2, n//2+1]\n",
        "test": "assert "
    },
    {
        "number": 101,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "    \n    words = s.split(\",\")\n    return words\n    \n    \ndef frequency(s):\n    \"\"\"\n    You will be given a string. Your task is to return a dictionary that maps from the\n    characters in the string to the number of times they occur in the string.\n    \n    For example:\n    frequency(\"Hi, my name is John\") == {'H': 2, 'i': 1, 'n': 1}\n    \"\"\"\n    \n    # Create an empty dictionary\n    dict_of_char = {}\n    \n    for i in s:\n        if i in dict_of_char:\n            dict_of_char[i] += 1\n        else:\n            dict_of_char[i] = 1\n    \n    return dict_of_char\n    \n    \ndef find_longest_word(d, s):\n    \"\"\"\n    You will be given a dictionary of strings and a string. You have to return a string\n    representing the longest word in the dictionary, that is, the word that occurs the most\n    times in the dictionary.\n    \n    For example:\n    longest_word({\"H\", \"i\", \"n\", \"O\", \"I\", \"M\", \"a\", \"I\", \"N\", \"e\", \"s\", \"A\"}, \"HI\") == \"I\"\n    \n    \"\"\"\n    \n    \n    # create an empty list\n    longest_word = []\n    \n    # loop through the dictionary\n    for key in d:\n        # check each key's frequency\n        if d[key] > len(s)/2:\n            # if frequency of a word is larger than half of total number of words, append it\n            if d[key] > len(s)/2:\n                longest_word.append(key)\n            # else, append last value in list\n            else:\n                longest_word.append(key)\n                \n    # return the longest word\n    return longest_word\n    \n    \ndef longest_word(dict_of_char, s):\n    \"\"\"\n    You will be given a dictionary of words. Your task is to return the longest word in the dictionary,\n    that is, the word that occurs the most times in the dictionary.\n    \n    For example:\n    longest_word({\"H\", \"i\", \"n\", \"O\", \"I\", \"M\", \"a\", \"I\", \"N\", \"e\", \"s\", \"A\"}, \"HI\") == \"I\"\n    \n    \"\"\"\n    \n    \n    # create an empty list\n    word_longest = []\n    \n    # loop through the dictionary\n    for key in dict_of_char:\n        # check each key's frequency\n        if dict_of_char[key] > len(s)/2:\n            # if frequency of a word is larger than half of total number of words, append it\n            if dict_of_char[key] > len(s)/2:\n                word_longest.append(key)\n            # else, append last value in list\n            else:\n                word_longest.append(key)\n                \n    # return the longest word\n    return word_longest[0]\n    \n    \ndef longest_word_with_word(dict_of_char, s):\n    \"\"\"\n    You will be given a dictionary of words. Your task is to return the longest word in the dictionary,\n    that is, the word that occurs the most times in the dictionary.\n    \n    For example:\n    longest_word_with_word({\"H\", \"i\", \"n\", \"O\", \"I\", \"M\", \"a\", \"I\", \"N\", \"e\", \"s\", \"A\"}, \"HI\") == \"I\"\n    \n    \"\"\"\n    \n    \n    # create an empty list\n    word_longest = []\n    \n    # loop through the dictionary\n    for key in dict_of_char:\n        # check each key's frequency\n        if dict_of_char[key] > len(s)/2:\n            # if frequency of a word is larger than half of total number of words, append it\n            if dict_of_char[key] > len(s)/2:\n                word_longest.append(key)\n            # else, append last value in list\n            else:\n                word_longest.append(key)\n                \n    # return the longest word\n    return word_longest[0]\n    \n    ",
        "test": "assert     words_string('python') == ['python']"
    },
    {
        "number": 102,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    if x == y:\n        return x\n    elif x % 2 == 0 and y % 2 == 0:\n        return choose_num(x // 2, y // 2)\n    else:\n        return -1\n",
        "test": "assert     choose_num(3, 2) == -1"
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    if n > m:\n        return -1\n    # float(int(bin(n)[2:])) == n\n    # int(str(bin(n)[2:])), int(str(bin(n)[2:])[::-1])\n    # int(str(bin(n)[2:])) == n\n    # round(n, 2) == int(n.to_bytes(2, 'big').hex())\n    # n = round(n, 2)\n    # return str(n).zfill(2)\n    # print(n)\n    return str(bin(n)[2:]).zfill(8)\n",
        "test": "assert     rounded_avg(3, 2) == -1"
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "    def is_digit(n):\n        return n > 0 and n % 10 == 0\n    \n    def check(x, length):\n        l = []\n        for i in range(length):\n            if is_digit(x[i]):\n                l.append(x[i])\n        return l\n    \n    def order(l, l_len):\n        if l_len > len(l):\n            return\n        length = len(l)\n        for i in range(length):\n            if l[i] > l_len:\n                l[i], l_len = l_len, l[i]\n",
        "test": "assert     unique_digits
    },
    {
        "number": 105,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "    if len(arr) == 0:\n        return []\n    \n    arr = sorted(arr)\n    result = []\n    for i in arr:\n        result.append(i)\n    result.reverse()\n    \n    return result\n",
        "test": "assert     by_length([]) == []"
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    # Hint: Write your loop here\n    fact_list = [1]\n    n = n % len(fact_list)\n    for i in range(n, 0, -1):\n        fact_list = fact_list + [i * fact_list[-1]]\n    return fact_list\n",
        "test": "assert     f(2) == [1, 2, 6, 24, 120, 720, 5040, 40320]"
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "    even, odd = 0, 0\n",
        "test": "assert     even_odd_palindrome(1000) == (0, 9)"
    },
    {
        "number": 108,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "    s = 0\n    for num in arr:\n        if num >= 0:\n            s += 1\n    return s\n",
        "test": "assert     count_nums([1, 2, 3, 4, -1]) == 4"
    },
    {
        "number": 109,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    # your code\n    # swap the first and last element\n    arr[1], arr[-1] = arr[-1], arr[1]\n    # sort the array\n    arr.sort()\n    # perform right shift operations\n    cnt = 0\n    for i in range(len(arr) - 1):\n        if arr[i]!= arr[i + 1]:\n            cnt += 1\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n            arr[-1], arr[-1] = arr[-1], arr[-1]\n    # if we have no elements left, then return true\n    if cnt == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     move_one_ball([1,5,4,3,2]) == False"
    },
    {
        "number": 110,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "    if len(lst1)!= len(lst2):\n        return \"NO\"\n    else:\n        return \"YES\"\n",
        "test": "assert     exchange([1,2,3,4,5], [2,5,3,4,1]) == \"YES\""
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    \n    hist = {}\n    \n    for letter in test:\n        if letter not in hist:\n            hist[letter] = 1\n        else:\n            hist[letter] += 1\n    return hist\n",
        "test": "assert "
    },
    {
        "number": 112,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    if s == s[::-1] or c == c[::-1]:\n        return s,False\n    if len(s) == len(c):\n        return s,True\n    if s[-1] == c[-1]:\n        return s[:-1],False\n    return s[:-1] + s[-1],True\n",
        "test": "assert     reverse_delete(s=\"aa\", c=\"a\") == (\"aa\", False)"
    },
    {
        "number": 113,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "    result = []\n    for string in lst:\n        string = string.replace(\" \", \"\")\n        count = 0\n        for i in range(len(string)):\n            if string[i] == \"0\":\n                count = count + 1\n        if count % 2!= 0:\n            result.append(\"the number of odd elements \" + str(count))\n    return result\n",
        "test": "assert     odd_count([]) == []"
    },
    {
        "number": 114,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "    n = len(nums)\n    if n < 1:\n        return 0\n    \n    i, minSum, ans = 0, float('inf'), 0\n    # Find the minSum\n    while i < n:\n        # Keep adding values until we reach our starting index\n        while i < n and nums[i] > 0:\n            nums[i] -= 1\n            i += 1\n        # If we reach the last value, we should add it\n        if i < n:\n            minSum += nums[i]\n        i += 1\n    \n    # Find the minSum until the starting index is reached\n    while i < n:\n        minSum += nums[i]\n        i += 1\n    \n    # Now check that we have a solution\n    if minSum < ans:\n        ans = minSum\n    return ans\n",
        "test": "assert     minSubArraySum([0, 0, 0, 0]) == 0"
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    import math\n    import itertools\n",
        "test": "assert     max_fill("
    },
    {
        "number": 116,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    sorted_list = sorted(arr, reverse=True)\n    return sorted_list\n",
        "test": "assert     sort_array([9, 9, 9, 9, 9]) == [9, 9, 9, 9, 9]"
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "    res = []\n    for word in s:\n        if word.isalpha() and len(word) <= n:\n            res.append(word)\n    return res\n",
        "test": "assert     select_words(s=\"aaaaabbbbccccddddeeeeff\", n=0) == []"
    },
    {
        "number": 118,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "    # Write your code here.\n    word = word.lower()\n    i = 0\n    j = len(word) - 1\n    while i < j:\n        if word[i] == word[j]:\n            i += 1\n        else:\n            break\n    vowel = word[i:j]\n    if len(vowel) > 0:\n        return vowel\n    else:\n        return \"\"\n",
        "test": "assert     get_closest_vowel(\"marry\") == \"\""
    },
    {
        "number": 119,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "    if len(lst)%2==0:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "test": "assert     match_parens(['()', '())', '()']) == 'No'"
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    # Initialize max_i to -inf\n    max_i = -math.inf\n    # A list to store the values\n    max_list = []\n    # Initialize output\n    for i in range(len(arr)):\n        # If i is smaller than k\n        if arr[i] < k and i > max_i:\n            # Go to next index\n            continue\n        # Increment max_i\n        max_i = max(max_i, i)\n        # Push the max_i to max_list\n        max_list.append(arr[i])\n    # Return the sorted list\n    return max_list\n",
        "test": "assert "
    },
    {
        "number": 121,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    odd = 0\n    even = 0\n    for x in lst:\n        if x%2==0:\n            even +=x\n        else:\n            odd +=x\n    return odd + even\n",
        "test": "assert         solution([]) == 0"
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    # a=[]\n    # for i in arr:\n    #     a.append(i%10)\n    # a.sort()\n    # if len(a) < k:\n    #     a = list(map(str,arr))\n    #     a.sort()\n    #     return sum(a[:k])\n    # return 0\n    n = len(arr)\n    l, r = 0, n\n    res = 0\n    while l < r:\n        m = (l + r) // 2\n        nums = [int(x) for x in str(arr[m])]\n        nums.sort()\n        if len(nums) < k:\n            l = m + 1\n        else:\n            res = max(res, arr[m] + nums[-1] + arr[m - k])\n            l = m + 1\n    return res\n",
        "test": "assert "
    },
    {
        "number": 123,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "    collatz_seq = [1]\n    for i in range(2, n):\n        if i%2 == 0:\n            collatz_seq.append(i)\n        else:\n            num = collatz_seq[-1] + (collatz_seq[-2]*2)\n            collatz_seq.append(num)\n    return collatz_seq\n",
        "test": "assert     get_odd_collatz(0) == [1]"
    },
    {
        "number": 124,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if date[0]!= '-' or date[1]!= '-':\n        return False\n    if len(date) < 4 or len(date) > 31:\n        return False\n    month = 1\n    day = 1\n    date_lst = []\n    for i in date:\n        if i!= '-':\n            day += 1\n        else:\n            month += 1\n        date_lst.append(month)\n        if month == 12 or month == 1:\n            month = 1\n        else:\n            month += 1\n",
        "test": "assert     valid_date(\"2020-10-11\") == False"
    },
    {
        "number": 125,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "    txt = txt.lower()\n    txt = txt.split()\n    return txt\n",
        "test": "assert     split_words(\"\") == []"
    },
    {
        "number": 126,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "    n = len(lst)\n    for i in range(n - 1):\n        if lst[i]!= lst[i + 1]:\n            return False\n    return True\n",
        "test": "assert     is_sorted([1, 4, 5, 2, 1]) == False"
    },
    {
        "number": 127,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "    # Write your code here.\n    #define intervals\n    intervals = []\n    \n    #check if there are any intersection with intervals\n    for interval in interval1:\n        if interval not in intervals:\n            intervals.append(interval)\n    for interval in interval2:\n        if interval not in intervals:\n            intervals.append(interval)\n    \n    #check if the list of intervals has any intersection\n    if len(intervals) < 2:\n        return \"NO\"\n    \n    #check if there are at least two intersections\n    for i in range(len(intervals)-1):\n        if intervals[i] < intervals[i+1]:\n            return \"NO\"\n    \n    #Check if the first and last intervals have same value\n    start1 = intervals[0]\n    end1 = intervals[-1]\n    \n    start2 = intervals[0]\n    end2 = intervals[-1]\n    \n    #if there are at least two intervals has same value\n    if start2 <= end1 and end2 <= start1:\n        return \"YES\"\n    \n    #if there are only one interval with same value\n    if start2 == end1:\n        return \"YES\"\n    \n    #else if there are at least two interval with same value\n    if start2 > end1:\n        return \"YES\"\n    \n    #else if there are at least two interval with same value\n    if start2 < end1:\n        return \"NO\"\n    \n    \n    \n    \n",
        "test": "assert     intersection((0, 1), (0, 1)), \"YES\""
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "    # Answer = -9\n    # to have sum of all signs multiplied by prod of signs of all numbers, this is simply the sum of all multiplies by all sign\n    # -1 = -1, 0 = 0\n    # this is the same as prod_signs(signs) = prod_signs(signs) * prod_signs(signs_magnitudes)\n    magnitude_sum = 1\n    for num in arr:\n        magnitude_sum *= num\n    return magnitude_sum\n",
        "test": "assert     prod_signs([1,1,1,-1]) == -1"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "    \n    if k == 0:\n        return []\n    \n    N = len(grid)\n    grid[N-1][N-1] = -1\n    \n    if N <= 2:\n        return [0]\n    \n    for i in range(1, N-2):\n        grid[i][i] = grid[i][i-1] + 1\n        \n    for i in range(N-2):\n        for j in range(i+1, N-1):\n            grid[i][j] = min(grid[i][j], grid[i][j-1] + 1)\n            \n    return grid[N-1][N-2]\n",
        "test": "assert     (minPath([[2,3,2],[4,2,4],[2,3,2]], 3)) == [[2,3,2],[2,3,2],[2,3,2],[2,3,2],[2,3,2],[2,3,2],[2,3,2],[2,3,2],[2,3,2],[2,3,2]]"
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    if n == 0: return [1]\n    elif n == 1: return [1, 2]\n    elif n == 2: return [1, 3, 5, 9]\n    elif n == 3: return [1, 3, 5, 10, 15]\n    elif n == 4: return [1, 3, 5, 10, 15, 21, 35]\n    else: return [1, 3, 5, 10, 15, 21, 35, 45, 55, 65, 75, 85, 105]\n",
        "test": "assert "
    },
    {
        "number": 131,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "    sum_odd = 0\n    while n:\n        if n % 10 == 0:\n            sum_odd += n // 10\n        else:\n            return 0\n        n //= 10\n    return sum_odd\n",
        "test": "assert     digits(1) == 0"
    },
    {
        "number": 132,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    # check if the input is an empty string\n    if not string:\n        return False\n    # if the string is a single bracket\n    if string[0] == '[' and string[-1] == ']':\n        return True\n    # if the string is not a single bracket\n    else:\n        # create a list that contains all brackets\n        brackets_list = []\n        for char in string:\n            if char == '[' or char == ']':\n                brackets_list.append(char)\n        # if there is a square bracket in the list\n        if len(brackets_list) > 0:\n            # the list is split into two because of brackets\n            bracket1 = brackets_list[0:2]\n            bracket2 = brackets_list[2:4]\n            # if there are more brackets than characters in the list\n            if len(bracket1) > len(bracket2):\n                # if there is a bracket in the middle\n                if brackets_list[0:2] == bracket1:\n                    return is_nested(string[1:-1])\n                # if there is a bracket in the middle and not the middle\n                else:\n                    return is_nested(string[1:len(string) - 1])\n            # if there is a bracket in the middle and it is the only character in the list\n            else:\n                if brackets_list[0] == bracket2[0]:\n                    return is_nested(string[1:len(string) - 1])\n                # if there is a bracket in the middle and the middle isn't the only character in the list\n                else:\n                    return is_nested(string[1:len(string) - 1])\n        else:\n            return True\n",
        "test": "assert     is_nested('(()') == True"
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "    res = 0\n    for x in lst:\n        res = res + x * x\n    return res\n    #return sum([x * x for x in lst])\n",
        "test": "assert     sum_squares([]) == 0"
    },
    {
        "number": 134,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "    return txt[-1].isalpha() and not any(c.isalpha() for c in txt)\n",
        "test": "assert     check_if_last_char_is_a_letter(\"ab\") == False"
    },
    {
        "number": 135,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "    my_len = len(arr)\n    for i in range(my_len):\n        if arr[i] < arr[i-1]:\n            return -1\n    return 0\n",
        "test": "assert     can_arrange([1,2,3,4,5]) == -1"
    },
    {
        "number": 136,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "    tup = None\n    for x in lst:\n        if tup is None:\n            tup = (x, x)\n            continue\n        if tup[0] < x:\n            tup = (x, x)\n    return tup\n",
        "test": "assert largest_smallest_integers([]) == (None, None)"
    },
    {
        "number": 137,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    if type(a) == type(b) == str or type(a) == str:\n        if type(a) == str and a in [\".\", \",\", \":\", \";\"]:\n            return \"error\"\n        else:\n            return a\n    elif type(a) == float:\n        return float(a)\n    elif type(a) == int:\n        return int(a)\n    elif type(a) == tuple:\n        return tuple(a)\n    elif type(a) == dict:\n        return dict(a)\n    elif type(a) == list:\n        return list(a)\n    elif type(a) == set:\n        return set(a)\n    elif type(a) == bool:\n        return bool(a)\n    else:\n        return type(a)\n",
        "test": "assert         compare_one('a', 'b') == 'a'"
    },
    {
        "number": 138,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "    n_sum = 0\n    for n_ in range(1, n+1):\n        if n_%2 == 0:\n            n_sum += n_\n    if n_sum == n:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_equal_to_sum_even(7) == False"
    },
    {
        "number": 139,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    if n == 0 or n == 1:\n        return 1\n    return n * special_factorial(n - 1)",
        "test": "assert     special_factorial(0) == 1"
    },
    {
        "number": 140,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "    lines = []\n    for line in text.split('\\n'):\n        if len(line) > 2:\n            line = line.replace(' ', '-')\n        lines.append(line)\n    return '\\n'.join(lines)\n",
        "test": "assert     fix_spaces(\"This is a test\") == \"This-is-a-test\""
    },
    {
        "number": 141,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "    \n    if not file_name.isalnum():\n        return 'No'\n    elif len(file_name) <= 3:\n        return 'No'\n    elif file_name[0] == '.':\n        return 'No'\n    elif file_name[0].isalpha():\n        return 'No'\n    elif not file_name[0].isdigit():\n        return 'No'\n    elif not all(c.isdigit() for c in file_name[1:]):\n        return 'No'\n    else:\n        return 'Yes'\n",
        "test": "assert     file_name_check(\"myfile\") == \"No\""
    },
    {
        "number": 142,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "    sum_squares = 0\n    for number in lst:\n        if(number % 3 == 0):\n            sum_squares += number**3\n        elif(number % 4 == 0):\n            sum_squares += number**4\n    return sum_squares\n",
        "test": "assert     sum_squares([0,0,0,0]) == 0, \"Sum Squares function is incorrect\""
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "    result = []\n    for word in sentence.split(' '):\n        result.append(word)\n    return result\n",
        "test": "assert     words_in_sentence(test_sentence) == \"hi hi hi hi hi hi hi hi hi\""
    },
    {
        "number": 144,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "    try:\n        n = float(n)\n        x = float(x)\n    except:\n        return False\n    if n == 0 or n == 1:\n        return True\n    if n == 1 or n == 0:\n        return False\n    if n < 0:\n        n = abs(n)\n        if n == 0:\n            return True\n        if n == 1:\n            return False\n        return simplify(x / n, n)\n    return simplify(x / n, n)\n",
        "test": "assert     simplify('1/4', '1/5') == False"
    },
    {
        "number": 145,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "    # sort by the sum of the digits of the numbers\n    # and then convert the numbers to string\n    nums.sort(key = lambda x : int(str(x)[-1]))\n    return nums",
        "test": "assert     order_by_points([]) == []"
    },
    {
        "number": 146,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "    nums = list(map(int, nums))\n    result = 0\n    for number in nums:\n        if number > 10 and number % 10 > 1 and number % 10 % 2 == 1:\n            result += 1\n    return result\n",
        "test": "assert     specialFilter([]) == 0"
    },
    {
        "number": 147,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return sum([a.count(i) for i in range(1, n + 1)])\n",
        "test": "assert     get_max_triples(4) == 2"
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "    return None\n    pass\n",
        "test": "assert     bf('Mercury', 'Uranus') == ('Uranus', 'Mercury')"
    },
    {
        "number": 149,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "    # your code here\n    lst.sort()\n    return lst\n",
        "test": "assert     sorted_list_sum([]) == []"
    },
    {
        "number": 150,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "    if n == 2 or n == 3:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        return x_or_y(n // 2, x, y)\n",
        "test": "assert     x_or_y(1, 0, 0) == 0"
    },
    {
        "number": 151,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    res = 0\n    if lst:\n        for n in lst:\n            res = res + (n**2)\n    return res\n",
        "test": "assert     double_the_difference([]) == 0"
    },
    {
        "number": 152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    guess_score = guess.count(guess)\n    guess_score = sorted(guess_score)\n    score = score_two_array(guess_score)\n    return score\n",
        "test": "assert     compare([10,20,10,10,11,20,30,20,25,25,20], [10,10,20,10,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,2"
    },
    {
        "number": 153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "    class_name = class_name.lower()\n    extensions = [e.lower() for e in extensions]\n    for i in range(len(extensions)):\n        extensions[i] = extensions[i].lower()\n    count_cap = count_sm = 0\n    count_cap_new = count_sm_new = 0\n    for extension in extensions:\n        if extension in class_name:\n            count_cap_new += 1\n        else:\n            count_sm_new += 1\n    cap = count_cap_new - count_sm_new\n    cap = -1\n    if cap == 0:\n        return class_name.upper()\n    else:\n        for i in range(len(extensions)):\n            if extensions[i].upper() == class_name.upper():\n                cap = i\n        if cap!= 0:\n            return extensions[cap] + '.{0}'.format(count_cap_new)\n    return class_name.upper() + '.{0}'.format(count_sm_new)\n",
        "test": "assert "
    },
    {
        "number": 154,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "    if len(b) < len(a):\n        return False\n    \n    b_split = b.split(',')\n    return b_split[0] in a or ''.join(b_split[1:]) in a\n",
        "test": "assert     cycpattern_check(\"aa\",\"a\") == False"
    },
    {
        "number": 155,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "    evens = 0\n    odds = 0\n    for i in range(1,num+1):\n        if i % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    return (evens,odds)\n",
        "test": "assert     even_odd_count(1) == (0, 1)"
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "    num_str = ''\n    val = 0\n    i = 0\n    while number > 0:\n        val += (number // 1000) * 10 ** i\n        number = number // 1000\n        i += 1\n    num_str = num_str.upper()\n    i = 0\n    while val > 0:\n        val -= val // 1000 * 1000\n        num_str += chr(val + i)\n        i += 1\n    return num_str.lower()",
        "test": "assert     int_to_mini_roman(999999) == \"MMMMMMMMMMMMMMMMMMMMMMMMM\""
    },
    {
        "number": 157,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "    if a == b and b == c and c == a:\n        return True\n    elif a == b or b == c or c == a:\n        return False\n    else:\n        return True\ndef is_right_angled(a, b, c, d):\n    '''\n    Is a right angle triangle formed by the three sides of the triangle?\n    Example:\n    is_right_angled(3, 4, 5, 6) == True\n    is_right_angled(1, 2, 3, 4) == True\n    is_right_angled(1, 2, 3, 5) == False\n    is_right_angled(1, 3, 2, 5) == True\n    '''\n    if right_angle_triangle(a, b, c):\n        return True\n    elif right_angle_triangle(a, b, d):\n        return True\n    elif right_angle_triangle(d, c, b):\n        return True\n    else:\n        return False\n",
        "test": "assert     right_angle_triangle(1, 1, 1) == True"
    },
    {
        "number": 158,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "    # An empty list is returned if there are no words.\n    if not words:\n        return \"\"\n    # To maintain the order, we sort the list.\n    words = sorted(words)\n    # An empty string is returned if there is no string in the list.\n    if not words:\n        return \"\"\n    # A string with one character is returned if it is at least one character\n    # in the list.\n    for char in words:\n        if len(char) > 1:\n            return char\n",
        "test": "assert     find_max([]) == ''"
    },
    {
        "number": 159,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "    if remaining < need:\n        return [need, remaining]\n    if number == need:\n        return [need, remaining]\n    if number >= need:\n        if number - need > need - need:\n            # keep eating 1 carrot\n            eat(number - need, need, remaining)\n        if number - need > need - need:\n            # keep eating 2 carrots\n            eat(number - need, need, remaining - need - need)\n        if number - need > need - need:\n            # keep eating 2 carrots\n            eat(number - need, need, remaining - need - need)\n        if number - need > need - need:\n            # keep eating 3 carrots\n            eat(number - need, need, remaining - need - need - need)\n    else:\n        if number - need < need:\n            # eat at most one carrot\n            eat(number - need, need, remaining)\n        if number - need < need:\n            # eat at most 2 carrots\n            eat(number - need, need, remaining - need)\n        if number - need < need:\n            # eat at most 2 carrots\n            eat(number - need, need, remaining - need - need)\n        if number - need < need:\n            # eat at most 3 carrots\n            eat(number - need, need, remaining - need - need - need)\n        if number - need < need:\n            # eat at most 3 carrots\n            eat(number - need, need, remaining - need - need - need)\n",
        "test": "assert     0 <= number <= 1000"
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "    # Fill in the blanks\n    #operator = {}\n    #operand = {}\n    # For each item in the operand list, calculate the value \n    # for each item in operator list.\n    # The expression will be\n    # result = operator[operand] = calculateValue(operator, operand)\n    if len(operator) == len(operand):\n        return calculate_expr(operator, operand)\n    return None\n",
        "test": "assert     do_algebra([1, 2, 3, 4], [1, 2, 3, 5, 2]) == [1, 0, 0, 0, 0, 0, 0, 0, 0]"
    },
    {
        "number": 161,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "    if s.isalpha():\n        return s.upper()\n    else:\n        return s.lower()\n",
        "test": "assert     solve('z') == 'Z'"
    },
    {
        "number": 162,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "    if not text:\n        return None\n",
        "test": "assert     string_to_md5('') == None"
    },
    {
        "number": 163,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "    return list(range(a, b+1))\n",
        "test": "assert     generate_integers(5, 9) == [5, 6, 7, 8, 9]"
    }
]