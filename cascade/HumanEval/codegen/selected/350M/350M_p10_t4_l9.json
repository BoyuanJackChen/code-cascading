[
    {
        "number": 0,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([1, 1, 1, 1, 1], 0.5) == True"
    },
    {
        "number": 1,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "    open_braces = []\n    for char in paren_string:\n        if char in ['(', ')']:\n            open_braces.append(char)\n        elif char == '(':\n            open_braces.append(char)\n    return open_braces\n",
        "test": "assert     separate_paren_groups(\"\") == []"
    },
    {
        "number": 2,
        "max_answer_num": 27,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "    return round(number, 1)\n",
        "test": "assert     truncate_number(0.0) == 0"
    },
    {
        "number": 3,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "    return len([1 for i in operations if i < 0]) == 0\n",
        "test": "assert     below_zero([1]) == True"
    },
    {
        "number": 4,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "    x_mean = sum(numbers)/len(numbers)\n    return sum((x-x_mean)**2 for x in numbers)**0.5\n",
        "test": "assert     mean_absolute_deviation([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0"
    },
    {
        "number": 5,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "    return [n + delimeter for n in numbers]\n",
        "test": "assert     intersperse(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9], delimeter=3) == [1, 3, 6, 9, 4, 7, 8]"
    },
    {
        "number": 6,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "    par_str = paren_string.split(\"(\")\n    par_str.pop()\n    tmp_level = 0\n    lst_nested = []\n    for par in par_str:\n        if len(par) == 1:\n            continue\n        if par[0] == \"(\":\n            tmp_level += 1\n        elif par[-1] == \")\":\n            tmp_level -= 1\n        elif par[0]!= \")\" or par[-1]!= \")\":\n            if tmp_level == 0:\n                lst_nested.append(1)\n            else:\n                lst_nested.append(tmp_level)\n    return lst_nested\n",
        "test": "assert         parse_nested_parens('') == []"
    },
    {
        "number": 7,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n",
        "test": "assert     filter_by_substring([\"x1\", \"x2\", \"x3\", \"x4\", \"x5\"], \"x\") == [\"x1\", \"x2\", \"x3\", \"x4\", \"x5\"]"
    },
    {
        "number": 8,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "    total_sum = 0\n    total_product = 1\n    for number in numbers:\n        total_sum += number\n        total_product *= number\n    return total_sum, total_product",
        "test": "assert     sum_product([]) == (0, 1)"
    },
    {
        "number": 9,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 210,
        "answer": "    max = []\n    for i in range(len(numbers)):\n        if i > 0 and numbers[i] > numbers[i - 1]:\n            max.append(numbers[i])\n        else:\n            max.append(numbers[i])\n    return max\n    # this is actually O(n)\n",
        "test": "assert     0 < 3"
    },
    {
        "number": 10,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "    left, right = 0, len(string) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if is_palindrome(string[mid]):\n            left = mid + 1\n        else:\n            right = mid - 1\n    return string[left:right + 1]\n",
        "test": "assert     is_palindrome('madam')"
    },
    {
        "number": 11,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "    return ''.join(str(ord(c) ^ ord(d)) for c, d in zip(a, b))\n",
        "test": "assert     string_xor('','') == ''"
    },
    {
        "number": 12,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "    length_of_longest_string = 1\n    for string in strings:\n        length_of_longest_string = max(length_of_longest_string, len(string))\n    return \"\".join([string[i:i+length_of_longest_string] for i in range(0, len(string), length_of_longest_string)]) if len(strings) > 0 else None\n",
        "test": "assert     longest(\"1\") == \"1\""
    },
    {
        "number": 13,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "    #Find the greatest common divisor of two inputs\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    return greatest_common_divisor(b%a,a%b)\n",
        "test": "assert     greatest_common_divisor(0, 0) == 0"
    },
    {
        "number": 14,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "    # -1 as input is always shorter\n    return [prefix for prefix in string if prefix[0]!= '-']",
        "test": "assert     all_prefixes(\"a\") == [\"a\"]"
    },
    {
        "number": 15,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 350,
        "answer": "    return str(sum(range(n,0,-1)))\n",
        "test": "assert     string_sequence(1) == '1'"
    },
    {
        "number": 16,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "    res = 0\n    for i in string:\n        if i not in \"abcdefghijklmnopqrstuvwxyz\":\n            break\n        res += 1\n    return res\n",
        "test": "assert     count_distinct_characters('abc') == 3"
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "    return []\n",
        "test": "assert     parse_music('o') == []"
    },
    {
        "number": 18,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "    if len(string) == 0:\n        return 0\n    if len(string) == 1:\n        return 1\n    length = len(string)\n    if substring in string:\n        return length - string.count(substring)\n    return how_many_times(string[1:length-1], substring)\n",
        "test": "assert     how_many_times(\"a\", \"a\") == 1"
    },
    {
        "number": 19,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "    new_numbers = sorted(numbers.split(' '))\n    return''.join(new_numbers)\n",
        "test": "assert     sort_numbers('1') == '1'"
    },
    {
        "number": 20,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "    smallest_numbers = sorted(numbers)[0:2]\n    smaller_number, larger_number = smallest_numbers\n    return (smaller_number, larger_number)\n",
        "test": "assert     find_closest_elements([3.5, 3.5]) == (3.5, 3.5)"
    },
    {
        "number": 21,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "    min_value = min(numbers)\n    max_value = max(numbers)\n    for num in numbers:\n        if num!= min_value:\n            numbers[numbers.index(num)] = 1.0 / (max_value - min_value) * (num - min_value)\n        else:\n            numbers[numbers.index(num)] = num\n    return numbers\n",
        "test": "assert     rescale_to_unit([0, 0, 1]) == [0, 0, 1]"
    },
    {
        "number": 22,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "    new_values = []\n    for i in values:\n        if type(i) in [int, float]:\n            new_values.append(i)\n    return new_values\n",
        "test": "assert     filter_integers([]) == []"
    },
    {
        "number": 23,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "    return len(string)\n",
        "test": "assert     strlen('') == 0"
    },
    {
        "number": 24,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "    #\n    # find all primes smaller than n\n    #\n    # loop through primes until n, it is divisible by any other number\n    #\n    # if not a primes, return n\n    #\n    # if a primes is found, return its value\n    #\n    # for each iteration, do\n    #   find out if the number divides n\n    #   if so, do\n    #     if n is smaller than that number\n    #       return n\n    #\n    # return n\n    if n < 2:\n        return n\n    primes = [2, 3, 5, 7]\n    while True:\n        for p in primes:\n            if n % p == 0:\n                return p\n        n = n // 3\n",
        "test": "assert     largest_divisor(1) == 1"
    },
    {
        "number": 25,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "    if n == 1:\n        return [1]\n    elif n == 0:\n        return []\n    else:\n        return [i for i in range(1, n + 1) if n % i == 0]\n    # solution : only return the factors of 1, the rest of the number.\n",
        "test": "assert     factorize(0) == []"
    },
    {
        "number": 26,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "    seen = set()\n    result = []\n    for num in numbers:\n        if num in seen:\n            continue\n        seen.add(num)\n        result.append(num)\n    return result\n",
        "test": "assert         remove_duplicates([]) == []"
    },
    {
        "number": 27,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "    string = string.lower()\n    string = string.upper()\n    string = string.capitalize()\n    return string\n",
        "test": "assert flip_case(\"\") == \"\""
    },
    {
        "number": 28,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate([\"hello\", \"world\"]) == \"helloworld\""
    },
    {
        "number": 29,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "    result = []\n    for i in strings:\n        if i.startswith(prefix):\n            result.append(i)\n    return result\n",
        "test": "assert     filter_by_prefix([\"hello\", \"hi\", \"hello\", \"goodbye\"], \"h\")"
    },
    {
        "number": 30,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "    return [num for num in l if num >= 0]\n",
        "test": "assert     get_positive([]) == []"
    },
    {
        "number": 31,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "    # Step 1:\n    if n == 2: return True\n    # Step 2:\n    for d in range(2, n):\n        if n % d == 0:\n            return False\n    return True\n",
        "test": "assert not is_prime(12)"
    },
    {
        "number": 32,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "    return math.floor(poly(xs, 0.5))\n",
        "test": "assert     find_zero([-2, -1, -1, 1])"
    },
    {
        "number": 33,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "    l.sort()\n    return l\n",
        "test": "assert     sort_third([]) == []"
    },
    {
        "number": 34,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "    return sorted(set(l))\n",
        "test": "assert         unique([1,2,3,1,2,3])"
    },
    {
        "number": 35,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "    if len(l) == 0:\n        return 0\n    return max(l)\n",
        "test": "assert     max_element([1,2,3,4,5]) == 5"
    },
    {
        "number": 36,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "    if n < 1 or n > 36:\n        return 0\n    count = 0\n    if n % 11 == 0 and n % 13 == 0:\n        count += 1\n    elif n % 11 == 0:\n        count += 1\n    elif n % 13 == 0:\n        count += 1\n    if n % 11!= 0 and n % 13!= 0:\n        count += 1\n    return count\n",
        "test": "assert     fizz_buzz(11) == 1"
    },
    {
        "number": 37,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "    sorted_list = []\n    for num in l:\n        sorted_list.append(num)\n    return sorted_list\n",
        "test": "assert         sort_even([]) == []"
    },
    {
        "number": 38,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     encode_cyclic(\"3\") == \"3\""
    },
    {
        "number": 39,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n",
        "test": "assert         prime_fib(0) == 0"
    },
    {
        "number": 40,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "    for i in l:\n        if i!= 0 and i!= l[0]:\n            return False\n    return True\n",
        "test": "assert     triples_sum_to_zero([2,1,2,3]) == False"
    },
    {
        "number": 41,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "    return 0\n",
        "test": "assert     car_race_collision(0) == 0, \"0 cars are driving straight infinitely\""
    },
    {
        "number": 42,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "    return [element+1 for element in l]\n",
        "test": "assert     incr_list(range(0)) == []"
    },
    {
        "number": 43,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "    # find the unique elements, non-duplicate\n    l_ = list(set(l))\n    # find the two distinct elements\n    for i in l_:\n        for j in l_:\n            if i + j == 0:\n                return True\n    # if the two distinct elements are zero, return False\n    return False\n",
        "test": "assert     pairs_sum_to_zero([]) == 0, 'Should be 0'"
    },
    {
        "number": 44,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 360,
        "answer": "    return \"\".join([str(x).zfill(x//base)]).upper()\n",
        "test": "assert     change_base(11, 10) == \"11\""
    },
    {
        "number": 45,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "    return.5 * a * (h ** 2)\n",
        "test": "assert     triangle_area(0, 0) == 0"
    },
    {
        "number": 46,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "    if n < 3:\n        return 0\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3)",
        "test": "assert     fib4(0) == 0"
    },
    {
        "number": 47,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 210,
        "answer": "    n = len(l)\n    if n == 0:\n        return None\n    elif n == 1:\n        return l[0]\n    else:\n        return sorted(l, reverse=True)[n//2]\n",
        "test": "assert         median([1, 2, 3]) == 2"
    },
    {
        "number": 48,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "    return text == text[::-1]\n",
        "test": "assert     is_palindrome(\"A man is not a palindrome.\") == False"
    },
    {
        "number": 49,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "    if n % p == 0:\n        return 0\n    else:\n        return 1\n",
        "test": "assert modp(3, 2) == 1"
    },
    {
        "number": 50,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "    return s.translate(str.maketrans(\"\",\"\",\"\"))\n",
        "test": "assert     decode_shift(\"\") == \"\""
    },
    {
        "number": 51,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 290,
        "answer": "    text = text.replace('e','e')\n    text = text.replace('i','i')\n    text = text.replace('o','o')\n    text = text.replace('u','u')\n    text = text.replace('A','a')\n    text = text.replace('B','b')\n    text = text.replace('C','c')\n    text = text.replace('D','d')\n    text = text.replace('E','e')\n    text = text.replace('F','f')\n    text = text.replace('G','g')\n    text = text.replace('H','h')\n    text = text.replace('J','j')\n    text = text.replace('K','k')\n    text = text.replace('L','l')\n    text = text.replace('M','m')\n    text = text.replace('N','n')\n    text = text.replace('O','o')\n    text = text.replace('P','p')\n    text = text.replace('Q','q')\n    text = text.replace('R','r')\n    text = text.replace('S','s')\n    text = text.replace('T','t')\n    text = text.replace('U','u')\n    text = text.replace('V','v')\n    text = text.replace('W','w')\n    text = text.replace('X','x')\n    text = text.replace('Y','y')\n    text = text.replace('Z','z')\n    return text\n",
        "test": "assert     remove_vowels('aeiou') == 'aeiou'"
    },
    {
        "number": 52,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "    return all(i < t for i in l)\n",
        "test": "assert     below_threshold([1, 2, 3, 4, 5], 3) == False"
    },
    {
        "number": 53,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "    return x + y\n",
        "test": "assert     add(5,5) == 10, \"add failed\""
    },
    {
        "number": 54,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "    s0 = s0.lower()\n    s1 = s1.lower()\n    if len(s0)!= len(s1):\n        return False\n    if s0 == s1:\n        return True\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n",
        "test": "assert     not same_chars('tj', 'xj')"
    },
    {
        "number": 55,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "    if n<=0:\n        return 0\n    if n==1:\n        return 1\n    else:\n        return fib(n-1)+fib(n-2)\n    pass\n",
        "test": "assert     fib(1) == 1"
    },
    {
        "number": 56,
        "max_answer_num": 22,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "    return len([c for c in brackets if c == \">\"]) == len([c for c in brackets if c == \"<\"])\n",
        "test": "assert correct_bracketing('(((>)') == False"
    },
    {
        "number": 57,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "    for i in l:\n        if i < 0:\n            return False\n    return True\n",
        "test": "assert not monotonic([-1, 0, -2])"
    },
    {
        "number": 58,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "    l = list(l1)\n    l.extend(l2)\n    return sorted(set(l))\n",
        "test": "assert     common([], []) == []"
    },
    {
        "number": 59,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "    while n % 2 == 0:\n        n /= 2\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return i\n    return 2\n",
        "test": "assert     largest_prime_factor(2) == 2"
    },
    {
        "number": 60,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "    s = 0\n    for i in range(1, n+1):\n        s += i\n    return s\n",
        "test": "assert     sum_to_n(0) == 0"
    },
    {
        "number": 61,
        "max_answer_num": 25,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "    pattern = r\"\\(|\\)\"\n    return all(bracket in pattern for bracket in brackets)\n",
        "test": "assert     correct_bracketing('()[]{}') == False"
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 280,
        "answer": "    return [x[1] for x in reversed(xs)]\n",
        "test": "assert     derivative([1, 2, 3, 4, 5]) == [24, -24, -48, -72, -120]"
    },
    {
        "number": 63,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "    if n==0:\n        return 0\n    elif n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(5) == fibfib(5)"
    },
    {
        "number": 64,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "    count=0\n    for char in s:\n        if char=='y':\n            count+=1\n    return count\n",
        "test": "assert type(vowels_count), \"vowels_count should be a dict\""
    },
    {
        "number": 65,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "    if shift > len(str(x)):\n        return str(x)[-shift:]\n    else:\n        return str(x)[:shift]\n",
        "test": "assert     not isinstance(circular_shift, (type(None), int)), \"CircularShift must be None or int\""
    },
    {
        "number": 66,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "    string = \"\"\n    for i in s:\n        if ord(i) >= 48 and ord(i) <= 57:\n            string += i\n    return sum(ord(i) for i in string)\n",
        "test": "assert         digitSum(\"\") == 0, 'test failed'"
    },
    {
        "number": 67,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "    apples, oranges = 0, 0\n    for char in s:\n        if char == 'a':\n            apples += 1\n        elif char == 'b':\n            oranges += 1\n    return apples + oranges + n\n    \n    \ndef fruits(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruits this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruits(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruits(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruits(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruits(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    apple_apples, apple_oranges, apple_mango = 0, 0, 0\n    for char in s:\n        if char == 'a':\n            apple_apples += 1\n        elif char == 'b':\n            apple_oranges += 1\n    return apple_apples + apple_oranges + n\n",
        "test": "assert     fruit_distribution(\"aabbccddee\", 9), \"The numbers 9 is wrong\""
    },
    {
        "number": 68,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "    if not arr:\n        return []\n    for i in range(len(arr)):\n        if arr[i]%2==0:\n            arr[i] = (arr[i]//2) + 1\n    if len(arr)%2==0:\n        return sorted(arr,reverse=True)\n    else:\n        return sorted(arr)\n",
        "test": "assert     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], pluck([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
    },
    {
        "number": 69,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 230,
        "answer": "    max = -1\n    for num in lst:\n        if num > 0:\n            if num > max:\n                max = num\n            if num > max:\n                max = num\n        if max == -1:\n            return -1\n    if max > 0:\n        return max\n    return max\n",
        "test": "assert     search([1]) == 1"
    },
    {
        "number": 70,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "    if lst == []:\n        return []\n    \n    elif len(lst) == 1:\n        return lst\n    \n    elif len(lst) == 2:\n        return lst[::-1]\n    \n    elif len(lst) == 3:\n        return lst[:2] + lst[2:3] + lst[:2]\n    \n    else:\n        m = min(lst)\n        for i in range(3, len(lst)):\n            if m >= lst[i]:\n                m = lst[i]\n                lst[i], lst[i-1] = lst[i-1], lst[i]\n                lst[i-1], lst[i-2] = lst[i-2], lst[i-1]\n        return lst\n",
        "test": "assert     strange_sort_list([]) == []"
    },
    {
        "number": 71,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "    result = (a + b + c) * 0.5\n    if result < 0 or result > c:\n        return -1\n    elif result == c:\n        return result\n    else:\n        return round(result)\n",
        "test": "assert     triangle_area(0, 0, 0) == 0"
    },
    {
        "number": 72,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "    # Write your code here\n    \n    return q == q[::-1] or len(set(q)) == len(q) and sum(q) <= w\n",
        "test": "assert     will_it_fly(q=[1,1,2,3,4,4,4,5,5,6,7,8,8,9,9,9],w=10) == False"
    },
    {
        "number": 73,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "    if len(arr) == 0:\n        return 0\n    \n    sum_ = 0\n    for i in range(len(arr)):\n        sum_ += arr[i]\n    \n    max_sum = 0\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] > arr[j]:\n            i += 1\n        else:\n            max_sum += arr[i] - arr[j]\n            j -= 1\n    return max_sum\n",
        "test": "assert      smallest_change([]) == 0"
    },
    {
        "number": 74,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 210,
        "answer": "    \n    lst1 = list(set(lst1))\n    lst2 = list(set(lst2))\n    return lst1 if len(set(lst1)) < len(lst2) else lst2\n    \n",
        "test": "assert     total_match([], []) == []"
    },
    {
        "number": 75,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "    \n    # Use a variable and an if statement to determine if the given number is less then 100.\n    if a < 100:\n        return True\n    \n    # Check if the given number is less than 100.\n    if a % 3 == 0:\n        return False\n    \n    # Check if the given number is less than 100.\n    if a % 5 == 0:\n        return False\n    \n    # Check if the given number is less than 100.\n    if a % 7 == 0:\n        return False\n    \n    # If all else fails, return true.\n    return True\n    \n",
        "test": "assert     is_multiply_prime(100) == False"
    },
    {
        "number": 76,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "    try:\n        n = int(n)\n        if n == 1:\n            return False\n        if n%2==0:\n            return is_simple_power(int(n/2), n-1)\n        if n%3==0:\n            return is_simple_power(int(n/3), n-1)\n        if n%5==0:\n            return is_simple_power(int(n/5), n-1)\n        if n%10==0:\n            return is_simple_power(int(n/10), n-1)\n        if n%20==0:\n            return is_simple_power(int(n/20), n-1)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     is_simple_power(2, 3) == False"
    },
    {
        "number": 77,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "    return a in range(-1,9)\n",
        "test": "assert     iscube(0) == True"
    },
    {
        "number": 78,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "    digits = '0123456789ABCDEF'\n    return sum(1 for i in range(num) if num % 2 == 0)\n",
        "test": "assert     hex_key(2) == 2"
    },
    {
        "number": 79,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 320,
        "answer": "    result_str = \"\"\n    str_binary = bin(int(decimal))[2:]\n    for i in str_binary:\n        result_str += i if i == '1' else '0'\n    return result_str",
        "test": "assert     decimal_to_binary(0) == '0'"
    },
    {
        "number": 80,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i] in {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}:\n            count += 1\n        else:\n            count = 0\n        if count >= 3:\n            return False\n    return True\n",
        "test": "assert     is_happy('aab') == False"
    },
    {
        "number": 81,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 320,
        "answer": "    # Base case:\n    if len(grades) == 0:\n        return []\n    # for a list of grades, there are the numbers of the list\n    # so in each list, check if it contains a number\n    # if yes: return it\n    # if not, append it to the list, and return it\n    for grade in grades:\n        if isinstance(grade, (int, float)):\n            # if it is a number, return it\n            if isinstance(grade, int):\n                return [grade]\n            # if it is not a number, return it\n            else:\n                return grades\n    # return list of numbers\n    return grades\n",
        "test": "assert     numerical_letter_grade([4.0, 4.0, 4.0]) == [4.0, 4.0, 4.0]"
    },
    {
        "number": 82,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "    for char in string:\n        if string.count(char) == 1:\n            return True\n        else:\n            return False\n",
        "test": "assert     prime_length('45') == True"
    },
    {
        "number": 83,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "    num_ones = 0\n    for i in range(n+1):\n        if i == 1:\n            num_ones += 1\n        elif i == 0 or i % 10 == 0:\n            num_ones += 0\n    return num_ones\n",
        "test": "assert     starts_one_ends(0) == 0, \"starts_one_ends failed\""
    },
    {
        "number": 84,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 230,
        "answer": "    if N == 0:\n        return 0\n    if N < 10:\n        return N\n    binary = bin(N)[2:]\n    return solve(len(binary)) + sum(binary)\n    # explanation: https://stackoverflow.com/questions/58761957/how-to-print-binary-number-of-digits-given-a-positive-integer",
        "test": "assert         solve(0) == 0"
    },
    {
        "number": 85,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "    evens = []\n    odds = []\n    \n    for i in lst:\n        if i % 2 == 0:\n            evens.append(i)\n        else:\n            odds.append(i)\n    \n    return evens + odds\n",
        "test": "assert     add([]) == []"
    },
    {
        "number": 86,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "    return s.translate(str.maketrans('', '', '()[]{};:\"\\',<>/'))\n",
        "test": "assert     ( anti_shuffle('') == '' )"
    },
    {
        "number": 87,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "    if x not in lst: return []\n    for i in range(len(lst)):\n        if lst[i][x] in lst[i]:\n            lst[i].remove(lst[i][x])\n        elif lst[i][x] == 0:\n            lst[i].remove(0)\n    return sorted(lst, key=lambda x: (x[0], x[1]))\n",
        "test": "assert     get_row([], 0) == []"
    },
    {
        "number": 88,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "    if len(array) == 0: return array\n    arr = sorted(array)\n    return arr\n",
        "test": "assert     sort_array([2, 2, 2, 2, 2, 2, 2]) == [2, 2, 2, 2, 2, 2, 2]"
    },
    {
        "number": 89,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "    s = list(s)\n    for i in range(len(s)):\n        c = ord(s[i])\n        if i % 2 == 0:\n            if c == 122:\n                s[i] = 'z'\n            elif c == 97:\n                s[i] = 'a'\n            elif c == 90:\n                s[i] = 'b'\n        else:\n            if c == 122:\n                s[i] = 'q'\n            elif c == 97:\n                s[i] = 'z'\n            elif c == 90:\n                s[i] = 'a'\n    return ''.join(s)\n",
        "test": "assert     encrypt(\"\") == \"\""
    },
    {
        "number": 90,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "    \n    # if there is no next smallest element, return None\n    if len(lst) == 1:\n        return lst[0]\n",
        "test": "assert     next_smallest([]) == None"
    },
    {
        "number": 91,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "    boredom_counter = 0\n    for word in S.split(\".\"):\n        if word.startswith(\"I\"):\n            boredom_counter += 1\n    return boredom_counter\n",
        "test": "assert     is_bored(\"Good that's good\") == 0"
    },
    {
        "number": 92,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "    a = (x + y + z) - x - y - z\n    if a % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     any_int(5, 5, 5) == True, 'any_int_correct'"
    },
    {
        "number": 93,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "    # TODO: Write your solution here\n    message = message.lower()\n    message = message.replace('a', 'A').replace('e', 'E').replace('i', 'I').replace('o', 'O').replace('u', 'U')\n    message = message.replace('u', 'U').replace('v', 'V').replace('r', 'R').replace('t', 'T').replace('y', 'Y').replace('w', 'W').replace('f', 'F').replace('g', 'G').replace('d', 'D').replace('k', 'K')\n    message = message.replace('l', 'L').replace('n', 'N').replace('b', 'B').replace('m', 'M').replace('p', 'P').replace('h', 'H').replace('g', 'G').replace('z', 'Z').replace('q', 'Q').replace('s', 'S').replace('f', 'F').replace('d', 'D').replace('r', 'R')\n    message = message.replace('h', 'H').replace('j', 'J').replace('l', 'L').replace('o', 'O').replace('k', 'K').replace('z', 'Z').replace('s', 'S').replace('p', 'P').replace('c', 'C').replace('m', 'M').replace('r', 'R')\n    return message\n",
        "test": "assert     encode(\"aA\") == \"AA\", \"encode does not work\""
    },
    {
        "number": 94,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 290,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    max_prime = 0\n    sum = 0\n    for i in lst:\n        if i>=1:\n            for j in str(i):\n                if i%int(j)==0:\n                    sum += int(j)\n                    break\n            if sum>max_prime:\n                max_prime = sum\n            sum = 0\n    return max_prime\n",
        "test": "assert skjkasdkd([-1, -1]) == 0"
    },
    {
        "number": 95,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "    return all(key.lower() in dict.keys() for key in dict.keys())\n",
        "test": "assert     check_dict_case({'a': 'A', 'b':'b'}) == True, \"Check error\""
    },
    {
        "number": 96,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "    counts = []\n    for i in range(1, n + 1):\n        counts.append(i)\n    return counts\n",
        "test": "assert     count_up_to(-1) == []"
    },
    {
        "number": 97,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "    result = 0\n    for i in str(a):\n        result = result*10 + int(i)\n    return result\n",
        "test": "assert     multiply(3, 1) == 3"
    },
    {
        "number": 98,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "    vowels = 'aeiou'\n    count = 0\n    for i in range(0, len(s)):\n        if i % 2 == 0:\n            if s[i] in vowels:\n                count += 1\n    return count\n",
        "test": "assert     count_upper(\"\") == 0"
    },
    {
        "number": 99,
        "max_answer_num": 16,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "    value = str(value)\n    try:\n        closest = min(value, key = abs)\n        closest = float(closest)\n    except:\n        closest = abs(float(value))\n    return closest\n",
        "test": "assert closest_integer(\"10\") == 10"
    },
    {
        "number": 100,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "    if n < 3:\n        return n\n    else:\n        return [3, n // 2, n % 2]\n",
        "test": "assert     make_a_pile(0) == 0"
    },
    {
        "number": 101,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "    return list(map(str.strip, s.split(',')))\n    # return list(map(str.split, s.split(',')))\n",
        "test": "assert     words_string('a,b,c') == ['a', 'b', 'c']"
    },
    {
        "number": 102,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "    # Your code here\n    if x < y:\n        x, y = y, x\n    while y > 0:\n        if y % 2 == 0 and y!= 0:\n            y -= 1\n        elif y % 2 == 1 and y!= 0:\n            y -= 1\n        else:\n            return y\n    return -1\n",
        "test": "assert     choose_num(-2, -1) == -1"
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "    if n == m:\n        return \"0b11\"\n    if n > m:\n        return str(n) + \"b\" + str(m)\n    elif n > m:\n        return str(m) + \"b\" + str(n)\n    elif n < m:\n        return \"0b11\"\n",
        "test": "assert "
    },
    {
        "number": 104,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "    seen_elements = set()\n    output_list = []\n    \n    for number in x:\n        if (number % 10) not in seen_elements:\n            seen_elements.add(number % 10)\n            output_list.append(number)\n        else:\n            continue\n        \n    return output_list\n",
        "test": "assert     unique_digits([]) == []"
    },
    {
        "number": 105,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "    # Your code here\n    if arr is None or len(arr) == 0:\n        return []\n    \n    array = sorted(arr)\n    result = []\n    for i in array:\n        result.append(i)\n    return result\n    \n    \n    \n",
        "test": "assert by_length([]) == []"
    },
    {
        "number": 106,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 270,
        "answer": "    fact = []\n    i = 1\n    while i <= n:\n        fact.append(i)\n        i += 1\n    return fact\n",
        "test": "assert f(0) == []"
    },
    {
        "number": 107,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "    even, odd = 0, 0\n    for i in range(1, n+1):\n        if (n % i == 0):\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n",
        "test": "assert         even_odd_palindrome(3) == (2, 1)"
    },
    {
        "number": 108,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "    output = {}\n    \n    for i in arr:\n        if i in output:\n            output[i] += 1\n        else:\n            output[i] = 1\n    \n    return len(output)\n",
        "test": "assert     count_nums([]) == 0, \"Should be 0\""
    },
    {
        "number": 109,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 240,
        "answer": "    def is_sorted(arr,start,end):\n        if start==end:\n            return True\n        if arr[start]>arr[end]:\n            return is_sorted(arr,start+1,end)\n        else:\n            return is_sorted(arr,start,end-1)\n        \n    if arr==[]:\n        return True\n    \n    for i in range(1,len(arr)):\n        if is_sorted(arr,i,i):\n            return True\n        \n    return False",
        "test": "assert     move_one_ball([1, 3, 5, 7, 9]) is True, \"Expected False. Given [1, 3, 5, 7, 9]\""
    },
    {
        "number": 110,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "    # YOUR CODE HERE\n    count = 0\n    for i in lst1:\n        if(count % 2 == 0):\n            if(i in lst2):\n                lst2.remove(i)\n            else:\n                lst2.append(i)\n        else:\n            if(i in lst2):\n                lst1.remove(i)\n            else:\n                lst1.append(i)\n        count += 1\n    return \"YES\" if(len(lst1) == 0) or (len(lst2) == 0) else \"NO\"\n    \nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 3]))",
        "test": "assert     exchange([2, 4, 6, 9], [2, 4, 3]) == \"NO\""
    },
    {
        "number": 111,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "    # Create dict of letters and counts\n    hist_dict = {}\n    # Count\n    count = 0\n    # Loop through string\n    for i in test:\n        # Add to dict if letter is in dict\n        if i in hist_dict:\n            # Increment count\n            count += 1\n        # Reset dict\n        else:\n            # Add to dict\n            hist_dict[i] = 1\n    # Return dictionary\n    return hist_dict\n",
        "test": "assert     histogram('a') == {'a': 1}"
    },
    {
        "number": 112,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "    lst = []\n    for i in s:\n        if i not in lst:\n            lst.append(i)\n    result = ()\n    for i in lst:\n        if i!= c:\n            result = result + (i,True)\n        else:\n            result = result + (i,False)\n    return result\n",
        "test": "assert     reverse_delete(\"a\",\"a\") == (\"a\",False)"
    },
    {
        "number": 113,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "    answer = []\n    for i in lst:\n        if i.isdigit():\n            answer.append(int(i))\n    return answer\n",
        "test": "assert     odd_count([]) == []"
    },
    {
        "number": 114,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "    window_sum = float('inf')\n    ans = 0\n    for num in nums:\n        window_sum = min(window_sum - num, num)\n        ans = max(ans, window_sum)\n    return ans if ans!= float('inf') else 0\n",
        "test": "assert     minSubArraySum([1, 2, 3]) == 1"
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "    if capacity == 0: return 0\n    if len(grid) == 0: return 0\n    dp = []\n    for i in range(len(grid)):\n        dp.append(grid[i].copy())\n",
        "test": "assert "
    },
    {
        "number": 116,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "    if len(arr) == 0:\n        return []\n    else:\n        arr_size = len(arr)\n        res = [0] * arr_size\n        count = 0\n        for i in arr:\n            if count == 0:\n                res[count] = i\n                count += 1\n            else:\n                res[count] = i\n                count += 1\n        return res\n",
        "test": "assert     sort_array([]) == []"
    },
    {
        "number": 117,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "    return [word for word in s.split() if len(word) >= n]\n",
        "test": "assert     select_words(s=\"\", n=1) == []"
    },
    {
        "number": 118,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 270,
        "answer": "    # return word[0]\n    for i in range(len(word)):\n        if word[i] in ['a','e','i','o','u','A','E','I','O','U']:\n            return word[0:i] + word[i+1:]\n    return \"\"\n    \n",
        "test": "assert     get_closest_vowel('c x') == ''"
    },
    {
        "number": 119,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 250,
        "answer": "    def check(s):\n        # 1. Base case, we can do this.\n        if len(s) == 0: return True\n        if len(s) == 1: return check(s[1:])\n        # 2. Recursion:\n        if s[0] == '(' or s[-1] == ')': return False\n        # 3. Recursion with tracking:\n        return check(s[1:-1]) and check(s[1:])\n    return check(lst)\n",
        "test": "assert     match_parens([(')', '()()()()(')]), 'Incorrect'"
    },
    {
        "number": 120,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "    if len(arr) == 0:\n        return []\n    elif k == 0:\n        return sorted(arr)\n    elif k == 1:\n        return sorted(arr, reverse = True)\n    else:\n        new_arr = []\n        index = 0\n        arr_len = len(arr)\n        while index < arr_len:\n            if index + k <= arr_len:\n                new_arr.append(arr[index])\n                index = index + 1\n            else:\n                new_arr.append(arr[index])\n                index = index + k\n        new_arr = sorted(new_arr)\n        return new_arr\n",
        "test": "assert     maximum([1,2,3,4], 0) == [1,2,3,4]"
    },
    {
        "number": 121,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            sum += lst[i]\n    return sum\n    \n",
        "test": "assert     solution([]) == 0, 'incorrect solution'"
    },
    {
        "number": 122,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "    # first we'll sort the elements\n    arr = sorted(arr)\n    # now we'll keep track of the first k elements\n    first_k = []\n    for i in arr:\n        if len(str(i)) <= k:\n            first_k.append(i)\n    return sum(first_k)\n",
        "test": "assert     add_elements([1, 2, 3], 2) == 6"
    },
    {
        "number": 123,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "    # TODO: Implement this function\n    collatz_sequence = []\n    for i in range(1, n+1):\n        collatz_sequence.append(i)\n        if i % 2 == 0:\n            collatz_sequence.append(i)\n    return collatz_sequence\n",
        "test": "assert     get_odd_collatz(0) == []"
    },
    {
        "number": 124,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 220,
        "answer": "    m = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n    day = 0\n    month = 0\n    year = 0\n    for c in date:\n        if c.isdigit():\n            try:\n                day = int(c)\n            except:\n                return False\n        elif c in m:\n            month = m.index(c) + 1\n        elif c in [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\"] or c.isalpha():\n            if c in [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\"]:\n                year = year * 10 + int(c)\n            elif c.isdigit():\n                day = day * 10 + int(c)\n            else:\n                return False\n    if day < 1 or day > 30:\n        return False\n    if month < 1 or month > 12:\n        return False\n    return True\n",
        "test": "assert not valid_date('9-9-9')"
    },
    {
        "number": 125,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "    txt = txt.strip().lower()\n    if not txt:\n        return []\n    if \",\" in txt:\n        return [word.strip().lower() for word in txt.split(\",\") if word.strip()]\n    else:\n        return [word.strip().lower() for word in txt.split() if word.strip()]\n",
        "test": "assert     split_words('This is a sentence.')!= ['This', 'is', 'a','sentence']"
    },
    {
        "number": 126,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "    # Declare a list of unique numbers\n    lst = list(set(lst))\n    # Traverse through the list\n    for num in lst:\n        if lst.count(num) > 1:\n            return False\n    return True\n",
        "test": "assert     is_sorted([1]) == True"
    },
    {
        "number": 127,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "    if interval1[0] < interval2[0]:\n        return \"NO\"\n    if interval1[1] > interval2[1]:\n        return \"NO\"\n    if interval1[0] <= interval2[0] and interval1[1] <= interval2[1]:\n        return \"YES\"\n",
        "test": "assert     intersection((4, 6), (1, 4)) == \"NO\""
    },
    {
        "number": 128,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "    prod = 1\n    signs = 1\n    for i in arr:\n        prod *= -1 if i==1 else 1\n        signs *= -1 if i==-1 else 1\n    return prod*signs\n",
        "test": "assert     prod_signs([-1, -1, 1]), 'Only positive signs found'"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 260,
        "answer": "    lst_A = [[] for _ in range(len(grid)+1)]\n    lst_B = [[] for _ in range(len(grid)+1)]\n",
        "test": "assert minPath(grid, 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "    \n    if n < 2:\n        return [1]\n    elif n == 2:\n        return [1, 2]\n    else:\n        # We have to return the sub list since the recurrence is n == 2,\n        # because if n == 1, it will be tri(2) which is valid,\n        # so it will return [1, 2]\n        return [1] + [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n",
        "test": "assert "
    },
    {
        "number": 131,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "    if n % 2 == 1:\n        return 0\n    else:\n        return n * digits(n-1)\n",
        "test": "assert     digits(0) == 0"
    },
    {
        "number": 132,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "    my_string = string.replace('[','').replace(']','')\n    my_list = [True]\n    for bracket in my_string:\n        if bracket not in my_list:\n            my_list.append(False)\n    return True if all(my_list) else False\n",
        "test": "assert     is_nested('[)(]') == False"
    },
    {
        "number": 133,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "    return sum([x**2 for x in lst if abs(x)<=1e-7])\n",
        "test": "assert     sum_squares([]) == 0"
    },
    {
        "number": 134,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "    return txt.rfind('a')!= -1 and txt.rfind('e')!= -1 and txt.rfind('i')!= -1 and txt.rfind('o')!= -1 and txt.rfind('u')!= -1 \n",
        "test": "assert     check_if_last_char_is_a_letter(\"abc\") == False"
    },
    {
        "number": 135,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "    return -1\n",
        "test": "assert     can_arrange([]) == -1"
    },
    {
        "number": 136,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "    largest = None\n    smallest = None\n    for i in lst:\n        if largest is None or i < smallest:\n            largest = i\n            smallest = largest\n        elif largest < i:\n            largest = i\n    return (largest, smallest)\n",
        "test": "assert     largest_smallest_integers([-4, -2, -1, 0, 1, 2, 3, 4, 5, 6]), \"Should return a tuple (None, None)\""
    },
    {
        "number": 137,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "    return max(a, b)\n",
        "test": "assert     compare_one(compare_one(1, 1), compare_one(1, 1)) == compare_one(1, 1)"
    },
    {
        "number": 138,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 350,
        "answer": "    if n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    if is_equal_to_sum_even(n - 1):\n        return False\n    if n % 2 == 1:\n        return True\n",
        "test": "assert     is_equal_to_sum_even(6) == False"
    },
    {
        "number": 139,
        "max_answer_num": 30,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "    if n <= 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n",
        "test": "assert     special_factorial(1) == 1"
    },
    {
        "number": 140,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "    output = []\n    for char in text:\n        if char =='':\n            output.append('-')\n        else:\n            output.append(char)\n    return ''.join(output)\n",
        "test": "assert     fix_spaces(''* 100) =='' * 100"
    },
    {
        "number": 141,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 210,
        "answer": "    # Create a 'if' condition\n    if not file_name.isalnum():\n        return 'No'\n    # Create a 'elif' condition\n    elif len(file_name) < 3:\n        return 'No'\n    # Create a 'else' condition\n    elif file_name.startswith('.') or file_name.startswith('~'):\n        return 'No'\n    # Create a 'else' condition\n    elif file_name[0].isupper() or file_name[0].isupper():\n        return 'No'\n    # Create a 'else' condition\n    elif file_name[1] == '.':\n        return 'No'\n    elif not file_name[1].isalpha():\n        return 'No'\n    else:\n        # Create a 'elif' condition\n        if not file_name[0].isupper():\n            return 'No'\n        elif not file_name[0].isalpha():\n            return 'No'\n        # Create a 'else' condition\n        elif file_name[1]!= '.':\n            return 'No'\n        elif file_name[1] == '.':\n            return 'No'\n        # Create a 'else' condition\n        else:\n            return 'No'\n",
        "test": "assert file_name_check('files/file_invalid.txt') == 'No'"
    },
    {
        "number": 142,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "    sum_squares = 0\n    for element in lst:\n        if isinstance(element, int):\n            if element % 3 == 0 and element % 4!= 0:\n                sum_squares += element**2\n        else:\n            raise ValueError('The function is not defined')\n    return sum_squares\n",
        "test": "assert     sum_squares([]) == 0"
    },
    {
        "number": 143,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "    words = sentence.split()\n    return \" \".join(words)",
        "test": "assert     words_in_sentence('abc') == 'abc'"
    },
    {
        "number": 144,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "    n, x = str(n), str(x)\n    if len(n)!= len(x):\n        return False\n",
        "test": "assert     simplify(\"1/2\", \"1\") == False"
    },
    {
        "number": 145,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "    sum = 0\n    nums = sorted(nums)\n    for i in range(len(nums)):\n        sum += nums[i]\n    return nums\n",
        "test": "assert     order_by_points([]) == []"
    },
    {
        "number": 146,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "    num = []\n    for i in range(len(nums)):\n        if nums[i] > 0 and nums[i] % 2!= 0:\n            num.append(nums[i])\n    num.sort()\n    return len(num)\n",
        "test": "assert     specialFilter([1, 6, 7, 8, 9]) == 3"
    },
    {
        "number": 147,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return a.count(sum(a))\n",
        "test": "assert     get_max_triples(1) == 1"
    },
    {
        "number": 148,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "    #This code will take in the planet name and return all the orbits \n    #The format is (Planet Name, Proximity)\n    #The code will return a tuple of the orbits\n    return (planet1, planet2)\n",
        "test": "assert     bf(\"Mercury\",\"Venus\") == (\"Mercury\",\"Venus\")"
    },
    {
        "number": 149,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "    # your code here\n    lst = list(lst)\n    lst = sorted(lst)\n    return lst\n",
        "test": "assert     sorted_list_sum([]) == []"
    },
    {
        "number": 150,
        "max_answer_num": 24,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "    if n == 2:\n        return x\n    if n % 2 == 0 or n % 3 == 0:\n        return y\n    while n > 2:\n        if n % 2 == 0:\n            return x\n        if n % 3 == 0:\n            return y\n        n = n // 3\n    return x\n",
        "test": "assert     x_or_y(1, 1, 1) == 1"
    },
    {
        "number": 151,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "    \n    # return sum of squares of numbers in the list that are odd\n    if len(lst) == 0:\n        return 0\n    \n    return sum([(a**2) for a in lst if a > 0])\n",
        "test": "assert     double_the_difference([]) == 0"
    },
    {
        "number": 152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 240,
        "answer": "    \n    def g(i,j):\n        return abs(i - j)\n    \n    # Fill in the blanks to return the sum of both the sublists.\n    \n    def rec(i,j,n):\n        if j==n:\n            return 0\n        else:\n            return abs(i-j) + rec(i,j+1,n)\n    \n    # Fill in the blanks to return the sublist of length n, summing the sublists.\n    \n    def rec(i,j,n):\n        if j==n:\n            return g(i,j)\n        else:\n            return g(i,j) + rec(i,j+1,n)\n    \n    # Test your code here.\n    # Give the functions you write.\n    # This will always be executed.\n    \n    scores = [1,2,3,4,5,1]\n    guesses = [1,2,3,4,2,-2]\n    \n    return [rec(i,j,len(scores)) for i,j in zip(guesses,scores)]\n",
        "test": "assert     compare([1,1,3,3,4,5,6], [1,2,3,4,4,5,6]) == [0,0,0,0,0,0,0], \"compare should return 0\""
    },
    {
        "number": 153,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "    # your code goes here\n    # define the list of extensions \n    # If you don't use a list of extensions, you'll get the same result\n    extensions = list(set(extensions))\n    if len(extensions) == 1:\n        # we have only one extension\n        return class_name + '.SErviNGSliCes'\n    # if there are multiple extensions\n    else:\n        # sort the extensions in alphabetical order\n        extensions.sort()\n        for i in range(len(extensions)):\n            # find the extension with the highest strength\n            ext = extensions[i]\n            # if the extension has the same strength\n            if ext in extensions:\n                # find the extension with the lowest strength\n                ext = extensions[i]\n                # and return the first extension in alphabetical order\n                return class_name + '.SErviNGSliCes' + '.' + ext\n        # if there is no extension with the highest strength\n        return class_name + '.SErviNGSliCes'\n",
        "test": "assert     \"StuFfed\" not in Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"])"
    },
    {
        "number": 154,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "    if len(a)!= len(b):\n        return False\n    if len(a) == 0:\n        return True\n    if len(a) > len(b):\n        return False\n    return all([(a[i] == b[i]) for i in range(len(a))])\n",
        "test": "assert     cycpattern_check('abc', 'bcb') == False"
    },
    {
        "number": 155,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "    even = 0\n    odd = 0\n    while num > 0:\n        num, reminder = divmod(num, 10)\n        if reminder == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n",
        "test": "assert     even_odd_count(0) == (0, 0)"
    },
    {
        "number": 156,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "    roman = 'iivx'\n    if number == 0: return ''\n    for i in range(1, number):\n        num = number // i\n        roman = roman[num:] + roman[:num]\n    return roman[:-1]\n",
        "test": "assert     int_to_mini_roman(0) == ''"
    },
    {
        "number": 157,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "    return ((a + b > c) and (b + c > a)) or ((a + c > b) and (a + b > c))\n",
        "test": "assert     right_angle_triangle(1,2,3) == False"
    },
    {
        "number": 158,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "    max_count = 0\n    for word in words:\n        count = 0\n        for char in word:\n            count += 1\n        if max_count < count:\n            max_count = count\n            word = word.upper()\n    return word\n",
        "test": "assert     find_max(['a','a','a','a']) == 'a'"
    },
    {
        "number": 159,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "    left_num = need - remaining\n    if left_num > need:\n        left_num = need\n    if left_num == need:\n        return [need, remaining]\n    else:\n        remaining -= need - left_num\n        return eat(left_num, need, remaining)\n",
        "test": "assert     len(eat(1, 1, 10)) == 2"
    },
    {
        "number": 160,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 290,
        "answer": "    result = 0\n    \n    for element in operator:\n        if element == '+':\n            result += operand[0]\n        elif element == '-':\n            result -= operand[0]\n        elif element == '*':\n            result *= operand[0]\n        elif element == '//':\n            if operand[0] == 0:\n                raise ZeroDivisionError('Division by zero')\n            result /= operand[0]\n        elif element == '**':\n            result **= operand[0]\n    \n    return result\n",
        "test": "assert     do_algebra(['+', '*', '-'], [3,4])"
    },
    {
        "number": 161,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "    s = s.lower()\n    while \" \" in s:\n        s = s[s.index(\" \"):] + s[:s.index(\" \")]\n    return s\n",
        "test": "assert     solve(\"\") == \"\", \"empty string\""
    },
    {
        "number": 162,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 320,
        "answer": "    if len(text) == 0:\n        return None\n",
        "test": "assert string_to_md5('') is None"
    },
    {
        "number": 163,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "    return [a+i for i in range(b-a+1) if i%2==0]\n",
        "test": "assert     (generate_integers(2, 4) == [2, 4])"
    }
]