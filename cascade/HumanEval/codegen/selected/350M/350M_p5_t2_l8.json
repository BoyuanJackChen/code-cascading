[
    {
        "number": 0,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([4,5,6], 0.5) == False",
        "num_ids": 562
    },
    {
        "number": 1,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    \n    parens_list = []\n    for i in paren_string:\n        if i == '(':\n            parens_list.append(i)\n        elif i == ')':\n            if len(parens_list) > 0:\n                parens_list.pop()\n            else:\n                return []\n        \n    if len(parens_list) > 0:\n        return parens_list\n    else:\n        return []\n    \n    \ndef find_unbalanced_braces(paren_string: str) -> List[str]:\n    \"\"\" Returns a list of all the unbalanced parens in the input string.\n    >>> find_unbalanced_braces('( ) (( )) (( )( ))')\n    ['( )', '(())', '(()())']\n    \"\"\"\n    \n    unbalanced_braces = []\n    for i in paren_string:\n        if i == '(':\n            if not unbalanced_braces:\n                unbalanced_braces.append(i)\n            else:\n                unbalanced_braces.append(i)\n                unbalanced_braces.append(i)\n                unbalanced_braces.append(i)\n                \n        elif i == ')':\n            if unbalanced_braces[-1] == '(':\n                unbalanced_braces.pop()\n            else:\n                unbalanced_braces.append(i)\n                unbalanced_braces.append(i)\n                unbalanced_braces.append(i)\n                \n    if len(unbalanced_braces) == 0:\n        return []\n        \n    else:\n        return unbalanced_braces\n    \n",
        "test": "assert     separate_paren_groups('(()[])') == []",
        "num_ids": 1043
    },
    {
        "number": 2,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    number = int(number)\n    if number < 0:\n        number = -number\n    return number\n",
        "test": "assert     truncate_number(0) == 0",
        "num_ids": 393
    },
    {
        "number": 3,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    if operations:\n        if operations[0] < 0:\n            return False\n        if operations[0] >= 0:\n            return True\n    return False\n",
        "test": "assert     below_zero([0, 0, 0, 0, 0]) == True",
        "num_ids": 323
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    return sum(abs(x - sum(numbers)/len(numbers)) for x in numbers) / len(numbers)\n",
        "test": "assert     mean_absolute_deviation([-1,2,3,4,5,6,7,8]) == 5.0, \"test failed\"",
        "num_ids": 2125
    },
    {
        "number": 5,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    if delimeter == 0:\n        return [numbers[-1]] + numbers[:-1]\n    elif delimeter == 1:\n        return numbers + [numbers[0]]\n    elif delimeter == 2:\n        return numbers + [numbers[0], numbers[1]]\n    elif delimeter == 3:\n        return numbers + [numbers[0], numbers[1], numbers[2]]\n",
        "test": "assert     intersperse(1, 'aa') == ['a', 'a', 'aa']",
        "num_ids": 402
    },
    {
        "number": 6,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    level = 0\n    stack = []\n    for ch in paren_string:\n        if ch == '(':\n            stack.append(level)\n        elif ch == ')':\n            level = stack.pop()\n    return stack\n",
        "test": "assert     parse_nested_parens('') == []",
        "num_ids": 416
    },
    {
        "number": 7,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return [s for s in strings if s.lower().startswith(substring)]\n",
        "test": "assert     filter_by_substring([ \"bob\", \"candy\", \"bob\", \"candy\", \"bob\", \"candy\", \"bob\", \"candy\", \"bob\", \"candy\" ], \"bob\")",
        "num_ids": 1273
    },
    {
        "number": 8,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    s, p = 0, 1\n    for num in numbers:\n        s += num\n        p *= num\n    return s, p\n",
        "test": "assert     sum_product([] ) == (0,1)",
        "num_ids": 348
    },
    {
        "number": 9,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    numbers = [n for n in numbers if n!= 0]\n    i = 0\n    result = []\n    while len(numbers)!= 0:\n        i = numbers.pop(0)\n        result.append(i)\n        numbers = [n - i for n in numbers]\n    return result",
        "test": "assert     rolling_max([]) == []",
        "num_ids": 467
    },
    {
        "number": 10,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    # Create a list of prefixes, and a list of suffixes\n    prefixes = []\n    suffixes = []\n    # Prefix and suffix are the same\n    prefixes.append(string)\n    suffixes.append('')\n    # Loop through prefix and suffix until a match\n    while prefixes:\n        prefix = prefixes.pop()\n        suffix = suffixes.pop()\n        # If suffix is still a palindrome, then append to prefixes\n        if is_palindrome(suffix):\n            prefixes.append(prefix)\n            suffixes.append(suffix)\n    # Check if prefix is palindrome\n    while prefixes:\n        prefix = prefixes.pop()\n        # If prefix is not a palindrome, then append to suffixes\n        if prefix not in suffixes:\n            suffixes.append(prefix)\n    return suffixes[::-1]\n",
        "test": "assert     is_palindrome(\"abcba\")",
        "num_ids": 816
    },
    {
        "number": 11,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    res = \"\"\n    for i in range(len(a)):\n        if(ord(a[i]) == ord(b[i])):\n            res += '1'\n        else:\n            res += '0'\n    return res\n",
        "test": "assert     string_xor(\"1\", \"0\") == \"0\"",
        "num_ids": 453
    },
    {
        "number": 12,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    start, max_len = 0, 0\n    for i, string in enumerate(strings):\n        if string == strings[i]:\n            if start == 0:\n                start = i\n            else:\n                if string[:start]!= string[:i]:\n                    max_len = max(max_len, i - start + 1)\n                start = i\n",
        "test": "assert     longest([]) == None",
        "num_ids": 440
    },
    {
        "number": 13,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    return max(a, b) // max(a, b) if a!= b else a\n",
        "test": "assert     greatest_common_divisor(1, 2) == 1",
        "num_ids": 461
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    return [prefix for prefix in string if len(prefix) > 0]",
        "test": "assert     all_prefixes(\"\") == []",
        "num_ids": 315
    },
    {
        "number": 15,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    def digits(n: int):\n        return str(n) if n >= 0 else '-' + str(n)\n    digits = digits(n)\n    return'' * (n - len(digits)) + digits\n",
        "test": "assert     string_sequence(1) == \"1\"",
        "num_ids": 286
    },
    {
        "number": 16,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    count_distinct = 0\n    for char in string:\n        if char.isalpha():\n            count_distinct += 1\n    return count_distinct\n",
        "test": "assert     count_distinct_characters('') == 0",
        "num_ids": 1349
    },
    {
        "number": 17,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    results = []\n    beat_counts = [0, 0, 0, 0, 0]\n    last_beat = False\n    for i in range(len(music_string)):\n        if music_string[i] == 'o':\n            if last_beat:\n                beat_counts[0] += 1\n                last_beat = False\n            else:\n                beat_counts[1] += 1\n                last_beat = True\n        elif music_string[i] == '|':\n            if last_beat:\n                beat_counts[2] += 1\n                last_beat = False\n            else:\n                beat_counts[3] += 1\n                last_beat = True\n        elif music_string[i] == '.|':\n            if last_beat:\n                beat_counts[4] += 1\n                last_beat = False\n            else:\n                beat_counts[5] += 1\n                last_beat = True\n    return beat_counts\n",
        "test": "assert     parse_music('o|' ), 'Failed to parse \"o|\" string'",
        "num_ids": 687
    },
    {
        "number": 18,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "test": "assert     how_many_times(\"Hello\", \"ell\") == 1",
        "num_ids": 333
    },
    {
        "number": 19,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    numbers = numbers.split()\n    return''.join(numbers)\n",
        "test": "assert     sort_numbers('11011') == '11011'",
        "num_ids": 1250
    },
    {
        "number": 20,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    closest_to_first, closest_to_second = None, None\n    for i in range(len(numbers) - 2):\n        first, second = numbers[i], numbers[i + 2]\n        if first > second:\n            closest_to_first = first\n            closest_to_second = second\n        else:\n            closest_to_second = second\n    return closest_to_first, closest_to_second\n",
        "test": "assert     find_closest_elements([1, 1, 0, 0]) == (1, 0)",
        "num_ids": 519
    },
    {
        "number": 21,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    return [x / 10 for x in numbers]\n",
        "test": "assert rescale_to_unit([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0]",
        "num_ids": 691
    },
    {
        "number": 22,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    filtered_values = []\n    for value in values:\n        if isinstance(value, int):\n            filtered_values.append(value)\n        else:\n            try:\n                filtered_values.append(float(value))\n            except ValueError:\n                filtered_values.append(value)\n    return filtered_values\n",
        "test": "assert         filter_integers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 558
    },
    {
        "number": 23,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    length = len(string)\n    return length\n",
        "test": "assert     strlen(\"a\")",
        "num_ids": 234
    },
    {
        "number": 24,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    divisor_numbers: list = []\n    for i in range(1, n+1):\n        if n%i == 0:\n            divisor_numbers.append(i)\n    return max(divisor_numbers)\n",
        "test": "assert         largest_divisor(1) == 1",
        "num_ids": 320
    },
    {
        "number": 25,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    l = []\n    i = n\n    while i!= 1:\n        l.append(i)\n        i = i//i\n    return l\n",
        "test": "assert     factorize(2) == [2]",
        "num_ids": 446
    },
    {
        "number": 26,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    res = []\n    for number in numbers:\n        if number not in res:\n            res.append(number)\n    return res\n",
        "test": "assert     remove_duplicates([1,2,3,4,5]) == [1,2,3,4,5], \"check the correctness of remove_duplicates\"",
        "num_ids": 385
    },
    {
        "number": 27,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return string.upper().lower()\n",
        "test": "assert flip_case(\"\") == \"\"",
        "num_ids": 1259
    },
    {
        "number": 28,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    result = ''\n    for s in strings:\n        result = result + s + \" \"\n    return result[:-1]\n",
        "test": "assert     concatenate([\"hello\",\"world\"]) == \"hello world\"",
        "num_ids": 305
    },
    {
        "number": 29,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix(['first','second', 'third'], 'first') == ['first']",
        "num_ids": 1443
    },
    {
        "number": 30,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return [i for i in l if i > 0]\n",
        "test": "assert     get_positive([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], 'test get_positive.\\n'",
        "num_ids": 310
    },
    {
        "number": 31,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    # Prime numbers are greater than 1.\n    if n < 2:\n        return False\n    # A number n is prime if it is greater\n    # than every positive integer smaller\n    # than n.\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert is_prime(0) == False",
        "num_ids": 506
    },
    {
        "number": 32,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    zero = -1\n    for i in xs:\n        if poly(xs, i) == 0:\n            zero = i\n            break\n    if zero == -1:\n        return 0.0\n    return zero\n",
        "test": "assert     (find_zero([1,2,3,4]) == 0)",
        "num_ids": 546
    },
    {
        "number": 33,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    k = 0\n    for i in range(len(l)):\n        if (l[i] % 3!= 0):\n            k = k + 1\n    if (k == 0):\n        return l\n    else:\n        i = k\n        j = 0\n        while i < k:\n            if l[i] % 3 == 0:\n                l[i] = l[i] / 3\n                j = j + 1\n                if j == 3:\n                    j = 0\n            i = i + 1\n        return l\n",
        "test": "assert     sort_third([0,0,0,0,0,0,0]) == [0,0,0,0,0,0,0]",
        "num_ids": 671
    },
    {
        "number": 34,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    temp = []\n    for el in l:\n        if el not in temp:\n            temp.append(el)\n    return temp\n",
        "test": "assert     unique([]) == []",
        "num_ids": 426
    },
    {
        "number": 35,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return max(l)\n",
        "test": "assert     max_element([1,2,3,4,5,6,7,8,9,10]) == 10",
        "num_ids": 256
    },
    {
        "number": 36,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    if n % 10 == 0 or n % 2 == 1:\n        return 0\n    else:\n        return int(n / 10)\n    \n    \ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 4 appears in integers less than n which are divisible by 3 and 5.\n    >>> fizz_buzz(60)\n    2\n    >>> fizz_buzz(89)\n    3\n    \"\"\"\n    if n % 2 == 0 and n % 5 == 0:\n        return 0\n    else:\n        return int(n / 2) + 1\n",
        "test": "assert     fizz_buzz(0) == 0",
        "num_ids": 509
    },
    {
        "number": 37,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    l_even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    l_odd = [l[i] for i in range(len(l)) if i % 2 == 1]\n    return sorted(l_even) + l_odd\n",
        "test": "assert         sort_even([0,0,0,0,0]) == [0,0,0,0,0]",
        "num_ids": 697
    },
    {
        "number": 38,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    # return first group after cyclic encoding.\n    return \"\".join(reversed(s[0])) + s[1:]",
        "test": "assert     encode_cyclic('') == ''",
        "num_ids": 856
    },
    {
        "number": 39,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    if n < 2:\n        return n\n    elif n == 2:\n        return 2\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n",
        "test": "assert prime_fib(1) == 1",
        "num_ids": 1366
    },
    {
        "number": 40,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    for i in l:\n        if i == 0:\n            return False\n        if i > 0:\n            return False\n    return True\n",
        "test": "assert     triples_sum_to_zero([]), \"triples_sum_to_zero should take an empty list as an input\"",
        "num_ids": 451
    },
    {
        "number": 41,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    from math import sqrt\n    n = int(n)\n    n_cars = 0\n    i = 1\n    while i < n:\n        i += 1\n        j = 1\n        while j < n:\n            collision = False\n            j += 1\n            while j < n:\n                if car_delta(i,j) < 1 and car_delta(i,j) < car_delta(i,j-1):\n                    collision = True\n                    break\n                j += 1\n            if not collision:\n                n_cars += 1\n    return n_cars\n",
        "test": "assert         car_race_collision(0) == 0",
        "num_ids": 507
    },
    {
        "number": 42,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    res = []\n    for el in l:\n        res.append(el+1)\n    return res\n",
        "test": "assert ",
        "num_ids": 334
    },
    {
        "number": 43,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    sums = set(l)\n    if len(sums) == 2:\n        if sums.pop()!= 0:\n            return True\n    return False\n",
        "test": "assert     pairs_sum_to_zero([-1, -2, -3, -4, -5]) == False",
        "num_ids": 506
    },
    {
        "number": 44,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    x = str(x)\n    x = x[::-1]\n    base_number = ''\n    for i in range(0, len(x)):\n        base_number += x[i]\n    return base_number[::-1]\n",
        "test": "assert     change_base(0, 0) == \"0\"",
        "num_ids": 428
    },
    {
        "number": 45,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    return (3 * (a * h / 2))\n",
        "test": "assert     triangle_area(0, 0) == 0",
        "num_ids": 191
    },
    {
        "number": 46,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    if n <= 1:\n        return n\n",
        "test": "assert     fib4(0) == 0, \"You're calling fib4(0)!\"",
        "num_ids": 1323
    },
    {
        "number": 47,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    assert len(l) == 1 or len(l) % 2 == 0\n    return (l[len(l)//2] + l[len(l)//2 - 1]) / 2\n",
        "test": "assert     median([2, 5, 7, 10]) == 5",
        "num_ids": 415
    },
    {
        "number": 48,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    text_split = text.split()\n    for i in range(0, len(text_split) // 2):\n        first = text_split[i]\n        second = text_split[i+1]\n        if first == second[::-1]:\n            return True\n    return False\n",
        "test": "assert     is_palindrome('ac') == False, \"string not palindrome\"",
        "num_ids": 383
    },
    {
        "number": 49,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    import math\n    return math.pow(2, n)%p\n",
        "test": "assert modp(2, 3) == 1",
        "num_ids": 340
    },
    {
        "number": 50,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return \"\".join([chr((ord(ch) - 5 - ord(\"a\")) % 26) for ch in s])\n",
        "test": "assert         decode_shift(\"\") == \"\", \"decode_shift failed to return empty string\"",
        "num_ids": 421
    },
    {
        "number": 51,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    vowels = 'aAA'\n    result = ''\n    for char in text:\n        if char in vowels:\n            result += char\n    return result\n",
        "test": "assert     remove_vowels(\"abc\") == \"a\", \"Should return 'a'\"",
        "num_ids": 403
    },
    {
        "number": 52,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    return sum(1 for x in l if x < t) == len(l)\n",
        "test": "assert     below_threshold([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == False",
        "num_ids": 317
    },
    {
        "number": 53,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 4) == 5",
        "num_ids": 300
    },
    {
        "number": 54,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return s0 == s1\n",
        "test": "assert     same_chars(\"To\", \"To\")",
        "num_ids": 525
    },
    {
        "number": 55,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    if n <= 1:\n        return n\n",
        "test": "assert     fib(1) == 1",
        "num_ids": 266
    },
    {
        "number": 56,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    open = {\"<\",\">\",\"{\",\"}\"}\n    close = {\"}\",\"}\",\"}\"}\n    for i,j in enumerate(brackets):\n        if brackets[i] in open:\n            if j not in close:\n                return False\n            brackets = brackets[:i] + brackets[i+1:]\n    return True\n",
        "test": "assert     correct_bracketing('') == True",
        "num_ids": 559
    },
    {
        "number": 57,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    n = len(l)\n    if n == 0:\n        return True\n    if n == 1:\n        return True if l[0] > l[-1] else False\n    # Check if list elements are monotonically increasing or decreasing\n    increasing = True\n    i = 0\n    j = -1\n    # While we have not checked the list is monotonic\n    while i < n and j > -1:\n        if l[i] > l[j]:\n            increasing = not increasing\n            if not increasing:\n                j -= 1\n            else:\n                i += 1\n        elif l[i] < l[j]:\n            increasing = not increasing\n            if not increasing:\n                j += 1\n            else:\n                i += 1\n    return increasing\n",
        "test": "assert     monotonic([1,2,3,4])",
        "num_ids": 1492
    },
    {
        "number": 58,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    return sorted(list(set(l1) & set(l2)))\n",
        "test": "assert     (common([1, 2, 3], [1, 1, 2, 3, 3]) == [1, 2, 3])",
        "num_ids": 556
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    factor = 2\n    while n % factor == 0:\n        factor += 1\n    return factor\n",
        "test": "assert     largest_prime_factor(5) == 2",
        "num_ids": 364
    },
    {
        "number": 60,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total = total + i\n    return total\n",
        "test": "assert sum_to_n(0) == 0",
        "num_ids": 340
    },
    {
        "number": 61,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    bracket_map = {\"(\": \")\", \")\": \"(\", \")\": \"(\"}\n    for bracket in brackets:\n        if bracket in bracket_map:\n            bracket_map[bracket] = bracket_map.get(bracket, bracket)\n    return True\n",
        "test": "assert correct_bracketing(\"((\") == True, \"correct_bracketing failed\"",
        "num_ids": 497
    },
    {
        "number": 62,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    return [a[1] for a in zip(xs[1:], xs[0:-1], xs[2:])]\n",
        "test": "assert     derivative([1, 2, 3])",
        "num_ids": 317
    },
    {
        "number": 63,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    x = 0\n    y = 1\n    z = 0\n    for i in range(n-1):\n        x, y = y, x + y\n    return x\n",
        "test": "assert     (fibfib(0) == 0)",
        "num_ids": 307
    },
    {
        "number": 64,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    count = 0\n    for i in s:\n        if i in 'aeiou':\n            count += 1\n    return count\n",
        "test": "assert     vowels_count('Yay') == 1",
        "num_ids": 370
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    if shift >= len(x):\n        return x\n    else:\n        return x[shift:] + x[:shift]\n",
        "test": "assert     circular_shift(2, 0) == \"0\"",
        "num_ids": 347
    },
    {
        "number": 66,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    return sum(c for c in s if c.isupper())\n",
        "test": "assert     digitSum(\"abcd\") == 9",
        "num_ids": 273
    },
    {
        "number": 67,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    if s==\"\":\n        return 0\n    if s.isdigit():\n        if int(s)<=n:\n            return int(s)\n        else:\n            return 0\n    if s.find(\"and\")!=-1:\n        return fruit_distribution(s[:s.find(\"and\")],n) + fruit_distribution(s[s.find(\"and\")+1:],n)\n    if s.find(\"or\")!=-1:\n        return fruit_distribution(s[:s.find(\"or\")],n) + fruit_distribution(s[s.find(\"or\")+1:],n)\n    if s.find(\"mango\")!=-1:\n        return fruit_distribution(s[:s.find(\"mango\")],n) + fruit_distribution(s[s.find(\"mango\")+1:],n)\n    return 0\n",
        "test": "assert     fruit_distribution('a', 4) == 0",
        "num_ids": 919
    },
    {
        "number": 68,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    if len(arr) == 0:\n        return [0,0]\n",
        "test": "assert     pluck([1,3,6,5,0]) == [1,0]",
        "num_ids": 691
    },
    {
        "number": 69,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    #print(lst)\n    freq = {}\n    for i in lst:\n        freq[i] = lst.count(i)\n    \n    #print(freq)\n    \n    for i in lst:\n        if freq[i] > 0:\n            return i\n    \n    return -1\n",
        "test": "assert     search([]) == -1, \"The function should return -1, if no integer has been found.\"",
        "num_ids": 1276
    },
    {
        "number": 70,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    if len(lst) < 2:\n        return lst\n    \n    # Create a helper variable, s, to store the smallest value in\n    # remaining_lst, and a pointer i, to help us go through the\n    # remaining values of list.\n    # - i is needed to prevent i from being overwritten in the\n    #   while loop.\n    i = 0\n    s = lst[i]\n    j = i + 1\n",
        "test": "assert ",
        "num_ids": 486
    },
    {
        "number": 71,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    #print(a,b,c)\n    if a > b and b > c:\n        if a * b == c * c:\n            return 0.5 * a * b\n        else:\n            return -1\n    elif a < b and b < c:\n        return (c * b) / 2\n    else:\n        return -1\n",
        "test": "assert triangle_area(3, 2, 1) == -1, \"triangle_area(3, 2, 1) should be -1\"",
        "num_ids": 1746
    },
    {
        "number": 72,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    return sum(q) <= w\n",
        "test": "assert     will_it_fly([], 10) == True",
        "num_ids": 902
    },
    {
        "number": 73,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    diff = 0\n    palindrome = True\n    n = len(arr)\n    \n    for i in range(n - 1):\n        if arr[i]!= arr[i + 1]:\n            palindrome = False\n            break\n    if palindrome:\n        return n\n    \n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            diff += 1\n            arr[i] = arr[i + 1]\n            arr[i + 1] = arr[i]\n    return diff\n",
        "test": "assert     smallest_change([1,2,3,4,5]) == 0",
        "num_ids": 548
    },
    {
        "number": 74,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    if len(lst1) < len(lst2):\n        return lst1\n    elif len(lst2) < len(lst1):\n        return lst2\n    else:\n        return lst1 + lst2\n",
        "test": "assert     total_match([], []) == []",
        "num_ids": 1592
    },
    {
        "number": 75,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    \n    for i in range(2,int(math.sqrt(a))+1):\n        if a%i==0:\n            return False\n    return True\n",
        "test": "assert is_multiply_prime(2) == True",
        "num_ids": 395
    },
    {
        "number": 76,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    if n == 0:\n        return True\n    if n < 0:\n        return False\n    return is_simple_power(x*x, n-1)",
        "test": "assert     is_simple_power(5, 2) is True",
        "num_ids": 394
    },
    {
        "number": 77,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 25,
        "answer": "    return a <= 90 and a > 1 and a % 3 == 0\n",
        "test": "assert     iscube(5) == False",
        "num_ids": 1201
    },
    {
        "number": 78,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    count = 0\n    for digit in str(num):\n        if digit == 'A': count = count + 2\n        elif digit == 'B': count = count + 3\n        elif digit == 'C': count = count + 5\n        elif digit == 'D': count = count + 7\n        elif digit == 'E': count = count + 11\n        elif digit == 'F': count = count + 13\n        else: count = count + int(digit)\n    return count\n",
        "test": "assert     hex_key(2) == 2",
        "num_ids": 1189
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    return ''.join(f'{x:b}' for x in decimal)",
        "test": "assert     decimal_to_binary(1) == '1'",
        "num_ids": 396
    },
    {
        "number": 80,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    if len(s) < 3 or len(set(s))!= len(s):\n        return False\n    count = [0] * 26\n    for c in s:\n        index = ord(c) - ord('a')\n        count[index] += 1\n        if count[index] < 2:\n            return False\n    return True\n",
        "test": "assert     is_happy(\"dabr\") == False",
        "num_ids": 470
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    grades_output = []\n    \n    # use a list of dictionaries to define grades\n    grade_table = [\n        {'name': 'A+', 'points': 4.0},\n        {'name': 'A', 'points': 3.7},\n        {'name': 'A-', 'points': 3.3},\n        {'name': 'B+', 'points': 3.5},\n        {'name': 'B', 'points': 2.7},\n        {'name': 'B-', 'points': 2.3},\n        {'name': 'C+', 'points': 3.0},\n        {'name': 'C', 'points': 1.7},\n        {'name': 'C-', 'points': 1.3},\n        {'name': 'D+', 'points': 3.0},\n        {'name': 'D', 'points': 1.7},\n        {'name': 'D-', 'points': 1.3},\n        {'name': 'E+', 'points': 3.0},\n        {'name': 'E', 'points': 0.7},\n        {'name': 'E-', 'points': 0.0},\n        {'name': 'F', 'points': 0.0}\n    ]\n    \n    # use a dictionary to get the letter grade from the grade table\n    letter_grade_table = {value['name']: value['points'] for value in grade_table}\n    \n    # get the grades for each student\n    for grade in grades:\n        grades_output.append(grade_table[grade['grade']])\n    \n    # return the output\n    return grades_output\n",
        "test": "assert     numerical_letter_grade([4.0, 3.7, 3.3]) == ['A+', 'A', 'B+', 'B']",
        "num_ids": 3350
    },
    {
        "number": 82,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    if(len(string) > 1):\n        for i in range(2, len(string)):\n            if(string[i] in string[0:i]):\n                return False\n        return True\n    else:\n        return False\n",
        "test": "assert     prime_length('abc') == True",
        "num_ids": 372
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    count = 0\n    for i in range(n+1):\n        if 1 in (int(i) for i in str(i)[-1::-1]):\n            count += 1\n    return count\n",
        "test": "assert     starts_one_ends(1) == 1",
        "num_ids": 1578
    },
    {
        "number": 84,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    def _solve(N, cnt):\n        if N == 0:\n            return 0\n        if cnt == 2:\n            return _solve(N, 0)\n        return _solve(N//2, cnt+1) + _solve(N//2, cnt)\n    return _solve(N, 0)\n",
        "test": "assert     (solve(0) == 0)",
        "num_ids": 674
    },
    {
        "number": 85,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    if len(lst) == 0:\n        return []\n    res = []\n    for i in range(len(lst)):\n        if i % 2 == 1:\n            res.append(lst[i])\n    return res\n",
        "test": "assert     add([]) == []",
        "num_ids": 364
    },
    {
        "number": 86,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    return \" \".join(sorted(s.split()))\n",
        "test": "assert     anti_shuffle(\"!!!\") == \"!!!\"",
        "num_ids": 402
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    if not lst:\n        return []\n    x = list(map(lambda a: (a[0], a[1]), lst))\n    x.sort()\n    for x in x:\n        yield x\n    \ndef get_col(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (column, row), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_col([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (0, 1), (2, 4), (2, 0), (3, 5), (3, 0)]\n    get_col([], 1) == []\n    get_col([[], [1], [1, 2, 3]], 3) == [(0, 0), (0, 1), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_col([[1,2,3,4,5,6], [1,2,3,4,1,6]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    \"\"\"\n    if not lst:\n        return []\n    x = list(map(lambda a: (a[1], a[0]), lst))\n    x.sort()\n    for x in x:\n        yield x\n",
        "test": "assert     get_row(",
        "num_ids": 842
    },
    {
        "number": 88,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    new_array = []\n",
        "test": "assert     sort_array( [2,2,2,2,1] ) == [2,2,1,2,2]",
        "num_ids": 647
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    # IMPLEMENT THIS FUNCTION\n    encrypted = ''\n    for char in s:\n        enc_char = ord(char)\n        encrypted += chr(enc_char - ord(char) + 2*ord('a'))\n    return encrypted\n",
        "test": "assert     encrypt(\"wrdleo\") == \"rw\"",
        "num_ids": 436
    },
    {
        "number": 90,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    \n    if not lst:\n        return None\n    \n    lst.sort()\n    \n    # Largest element \n    # 2nd element \n    # Largest element\n    # 2nd element\n    # next smallest element\n    \n    if len(lst) == 2:\n        return lst[1]\n    \n    if len(lst) == 3:\n        return lst[2]\n    \n    if len(lst) == 4:\n        return lst[3]\n    \n    return next_smallest(lst[1:4])\n",
        "test": "assert     next_smallest([1, 2, 4, 5, 7]) == 5",
        "num_ids": 289
    },
    {
        "number": 91,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    total = 0\n    for word in S:\n        if word in [\"I\", \"?\", \"!\"]:\n            total += 1\n    return total\n",
        "test": "assert     is_bored(\"Hephe\") == 0",
        "num_ids": 342
    },
    {
        "number": 92,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    return x + y == z or x + z == y or x + z == z\n    # If x + y = z or x + z = y\n",
        "test": "assert     any_int(1, 2, 4) == False",
        "num_ids": 362
    },
    {
        "number": 93,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    return \"\".join(s.lower() if s.islower() else s.upper() for s in message)\n",
        "test": "assert     encode('HelloWorld') == 'HelloWorld'",
        "num_ids": 3373
    },
    {
        "number": 94,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    lst.sort()\n    res = 0\n    for i in lst:\n        if res < 0:\n            res = i\n        else:\n            res = res * 10 + i\n    return res\n",
        "test": "assert     skjkasdkd([]) == 0",
        "num_ids": 550
    },
    {
        "number": 95,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    for k in dict.keys():\n        if isinstance(k, str) and k.islower():\n            return True\n    return False\n",
        "test": "assert     check_dict_case({'1': 'first'}) == False, \"The dictionary '{'1': 'first'}' is incorrect.\"",
        "num_ids": 478
    },
    {
        "number": 96,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    #implement a helper function\n    def prime_sum(n):\n        if n == 0:\n            return []\n        elif n == 1:\n            return [1]\n        else:\n            result = []\n            for i in range(2, n+1):\n                if i*i > n:\n                    break\n                if n % i == 0:\n                    result.append(i)\n                    break\n            return result\n    \n    #get all prime numbers\n    primes = []\n    for i in range(2, n+1):\n        primes.extend(prime_sum(i))\n    \n    #count the up to the n number\n    result = []\n    for i in range(1, len(primes)):\n        if primes[i] >= n:\n            break\n        else:\n            result.append(primes[i])\n    \n    return result\n",
        "test": "assert     count_up_to(0) == []",
        "num_ids": 575
    },
    {
        "number": 97,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    # Return the product of the digits of the two integers\n    # stored in the parameters\n    if type(a) == int or type(b) == int:\n        a = str(a)\n        b = str(b)\n        product = 0\n        for i in range(len(a)):\n            product += int(a[i])*int(b[i])\n        return product\n    else:\n        raise TypeError(\"Invalid parameters\")\n",
        "test": "assert     multiply(2, 10) == 2",
        "num_ids": 1570
    },
    {
        "number": 98,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    vowels = {'A', 'E', 'I', 'O', 'U'}\n    index_is_vowel = lambda index: index % 2 == 0\n    count = 0\n    for i in range(len(s)):\n        if index_is_vowel(i):\n            count += 1\n    return count\n",
        "test": "assert     count_upper('AaBb') == 2, 'count_upper() must return 2'",
        "num_ids": 3255
    },
    {
        "number": 99,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    # Do the math. floor() here.\n    # The exception here is the value of the number, as it is always a float,\n    # so the rounding away from zero is an exact zero.\n    return round(math.floor(float(value)))\n    # You can use the round() function in the math module to round away\n    # from zero.\n",
        "test": "assert     closest_integer(\"1\")",
        "num_ids": 472
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    if n < 2:\n        return n\n    else:\n        return n + make_a_pile(n-1)\n",
        "test": "assert ",
        "num_ids": 350
    },
    {
        "number": 101,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    # TODO\n    if s:\n        return s.split(\",\")\n    else:\n        return []\n",
        "test": "assert     words_string('a,b,c') == ['a', 'b', 'c']",
        "num_ids": 300
    },
    {
        "number": 102,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    assert type(x) == int and type(y) == int\n    if x >= y:\n        return -1\n    else:\n        x = x % 10\n        while y >= x:\n            if y % 10 == 0:\n                return y\n            x += 1\n        return -1\n",
        "test": "assert     choose_num(1, 0) == -1",
        "num_ids": 424
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    \n    if n >= m:\n        return str(int(n/m))\n",
        "test": "assert ",
        "num_ids": 319
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    result = []\n    for digit in x:\n        if digit % 10!= 0:\n            result.append(digit)\n    return result",
        "test": "assert     unique_digits([9, 9, 7, 7]) == [9, 9, 7, 7], 'Incorrect'",
        "num_ids": 450
    },
    {
        "number": 105,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    arr.sort()\n    new_arr = []\n    for i in arr:\n        if 1 <= i <= 9:\n            new_arr.append(i)\n        else:\n            new_arr.append(i - 10)\n    return new_arr\n",
        "test": "assert     by_length(list(range(1,10))) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 1756
    },
    {
        "number": 106,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    factorials = [1, 1]\n    for i in range(2, n + 1):\n        factorials.append(factorials[i-1] * i)\n    return factorials\n",
        "test": "assert     isinstance(f.__name__, str), \"f must be a string\"",
        "num_ids": 412
    },
    {
        "number": 107,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    evens, odds = [], []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            evens.append(i)\n        else:\n            odds.append(i)\n    return tuple(odds) + tuple(evens)\n",
        "test": "assert     even_odd_palindrome(0) == ()",
        "num_ids": 1417
    },
    {
        "number": 108,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    c = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            c += 1\n    return c\n",
        "test": "assert     count_nums([1, 2, -3, -123]) == 2",
        "num_ids": 411
    },
    {
        "number": 109,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    if len(arr)==0: return True\n    if len(arr)==1: return True\n    if len(arr)==2: return arr[1]<=arr[0]\n    max_val=max(arr)\n    arr=sorted(arr,key=lambda x:x)\n    min_val=min(arr)\n    if max_val>min_val:\n        return False\n    for i in range(len(arr)):\n        if arr[i]!=min_val and arr[i]!=max_val:\n            return False\n    return True\n",
        "test": "assert     move_one_ball([1,1,2,3,4,5]) == False",
        "num_ids": 462
    },
    {
        "number": 110,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    #IMPLEMENTATION\n    if not lst1:\n        return \"NO\"\n    else:\n        odd = 0\n        even = 0\n        for n in lst1:\n            if n % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n        if even == 0 and odd == 0:\n            return \"YES\"\n        elif even == 0 and odd == 1:\n            return \"NO\"\n        elif odd == 0 and even == 1:\n            return \"NO\"\n        else:\n            return \"YES\"\n",
        "test": "assert     exchange([], [1, 2, 3, 4]) == \"NO\", \"NO\"",
        "num_ids": 652
    },
    {
        "number": 111,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    # TODO: Write your function here\n    d = {}\n    if isinstance(test, str) is False:\n        return {}\n    test = test.lower()\n    for letter in test:\n        if letter not in d:\n            d[letter] = 1\n        else:\n            d[letter] += 1\n    return d",
        "test": "assert     histogram(\"g\") == {'g': 1}",
        "num_ids": 649
    },
    {
        "number": 112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    p = \"\"\n    if s == c:\n        p = s\n    else:\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                p += s[i]\n    return p,s[::-1]==p[::-1]\n",
        "test": "assert     reverse_delete(\"abcdef\", \"d\") == \"cdefdab\"",
        "num_ids": 728
    },
    {
        "number": 113,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    odd_count_map = {}\n    for i in lst:\n        odd_count_map[i] = len(i)\n    return list(odd_count_map.keys())\n",
        "test": "assert     odd_count([]) == []",
        "num_ids": 637
    },
    {
        "number": 114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n",
        "test": "assert ",
        "num_ids": 437
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    m, n = len(grid), len(grid[0])\n    # If we have a few buckets we can fill them all\n    # else we have buckets with some capacity.\n    # Use the maximum amount we can fill\n    # if we are not done adding a new bucket \n    def fill(bucket, capacity):\n        if bucket == capacity:\n            return 0\n        if bucket[0] == m:\n            return fill(bucket[1:], capacity) + fill(bucket[1:], capacity)\n        if bucket[0] < m and bucket[0] + 1 < n:\n            return fill(bucket[1:], capacity) + fill(bucket[1:], capacity)\n        return fill(bucket[1:], capacity)\n    \n    # If we have some buckets, we have to fill them all\n    if m!= n:\n        return fill(grid[1:], capacity)\n    \n    # Otherwise we can fill a bucket with capacity\n    # Now we have capacity and m buckets, we have to count the number of times each bucket is filled\n    # for example if we have 5 buckets and we have 5 buckets, we have 5 buckets with 5 buckets\n    # for 5 buckets, we have 10 buckets with 5 buckets\n    # So we have 10 buckets\n    # we have 10 buckets with 10 buckets\n    # so we have 10 buckets with 10 buckets\n    # so we have 10 buckets with 10 buckets with 10 buckets\n    # So we have 10 buckets with 10 buckets with 10 buckets with 10 buckets\n    def count(bucket):\n        if bucket == capacity:\n            return 0\n        if bucket[0] == m:\n            return fill(bucket[1:], capacity)\n        return count(bucket[1:]) + count(bucket[1:])\n    \n    return count(grid[1:])\n",
        "test": "assert ",
        "num_ids": 1399
    },
    {
        "number": 116,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    return sorted(arr, key = lambda x: x // 2, reverse=True)\n",
        "test": "assert     sort_array([]) == []",
        "num_ids": 866
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "    if len(s) == 0:\n        return []\n    return [word for word in s.split() if word not in [\"\", \" \"] and len(word) >= n]\n",
        "test": "assert     select_words('my name is bob', 3),'should return [\"my\", \"name\", \"is\", \"bob\"]'",
        "num_ids": 784
    },
    {
        "number": 118,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    #check the length\n    if len(word)<=1:\n        return \"\"\n    if word[0]==word[-1]:\n        return word[0]\n    \n    #check the right side\n    #left side\n    left_side = word[:len(word)-1]\n    right_side = word[len(word)-1:]\n    #check if it is a vowel\n    left_vowel = get_closest_vowel(left_side)\n    right_vowel = get_closest_vowel(right_side)\n    if left_vowel==right_vowel:\n        return left_vowel\n    else:\n        return \"\"\n    \n    \n    \ndef get_closest_vowel_from_first_to_last_letter(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that begins at \n    the first letter and ends at the last letter.\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n",
        "test": "assert ",
        "num_ids": 1499
    },
    {
        "number": 119,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    lst = ''.join(lst)\n    lst_str = ''.join(lst)\n    #lst = lst.split('(')\n    #lst = lst.split(')')\n    lst = lst_str.split('(')\n    lst = lst[0] + ')'*(len(lst) - 1)\n    return len(lst) == len(set(lst))\n",
        "test": "assert     match_parens(['(())', '))()', '(()())']) == False",
        "num_ids": 1926
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    max_numbers = []\n    for n in arr:\n        if n > k:\n            max_numbers.append(n)\n        else:\n            k = k-n\n            max_numbers.append(k)\n    return max_numbers\n",
        "test": "assert ",
        "num_ids": 250
    },
    {
        "number": 121,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    lst = sorted(lst)\n    odd = 0\n    for num in lst:\n        if num % 2:\n            odd += num\n    return odd\n",
        "test": "assert     solution([]) == 0",
        "num_ids": 514
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    return sum([i for i in arr if i < 10]) + sum([i for i in arr if i > 10]) + sum([i for i in arr if i > 10]) + sum([i for i in arr if i > 10]) + sum([i for i in arr if i > 10])\n",
        "test": "assert ",
        "num_ids": 482
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    i=1\n    count=1\n    soln=[]\n    while i<=n:\n        if i%2==0:\n            count+=1\n        else:\n            count*=3\n        i+=count\n        if i>=n:\n            soln.append(i)\n    return soln\n",
        "test": "assert     get_odd_collatz(0) == []",
        "num_ids": 462
    },
    {
        "number": 124,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    \n    if not date:\n        return False\n    \n    date = date.split('-')\n    month = int(date[0])\n    day = int(date[1])\n    year = int(date[2])\n    \n    if day < 1 or day > 31:\n        return False\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if year < 1 or year > 31:\n        return False\n",
        "test": "assert     valid_date(\"21-10-12\") == False",
        "num_ids": 906
    },
    {
        "number": 125,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    words = txt.split(\",\")\n    words = [w.strip().lower() for w in words]\n    words = [w for w in words if w]\n    return words\n",
        "test": "assert     split_words('a, b, c') == ['a', 'b', 'c']",
        "num_ids": 701
    },
    {
        "number": 126,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    count = 0\n    for i in range(len(lst)):\n        if lst[i] == lst[count]:\n            count += 1\n        else:\n            return False\n    return True\n",
        "test": "assert     is_sorted([]) == True",
        "num_ids": 358
    },
    {
        "number": 127,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    pass",
        "test": "assert     intersection((1,2), (3,4)) == \"NO",
        "num_ids": 452
    },
    {
        "number": 128,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    m = {}\n    for num in arr:\n        if num in m:\n            m[num] += 1\n        else:\n            m[num] = 1\n",
        "test": "assert     prod_signs([1, -1, 0]) == None",
        "num_ids": 673
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    m, n = len(grid), len(grid[0])\n    lst_A, lst_B = [], []\n    for i in range(m):\n        lst_A.append([])\n        for j in range(n):\n            if grid[i][j] > 0:\n                lst_A[-1].append(grid[i][j])\n            if grid[i][j] < grid[i][j-1]:\n                lst_B.append(grid[i][j])\n    #print(lst_A)\n    #print(lst_B)\n    if len(lst_A) > len(lst_B):\n        lst_A, lst_B = lst_B, lst_A\n    #print(lst_A)\n    #print(lst_B)\n    #print(lst_A)\n    #print(lst_B)\n    #print(grid)\n    #print(lst_A)\n    #print(lst_B)\n    \n    #path_A = [0]*k\n    path_A = [0]*k\n    for j in range(1, k+1):\n        path_A[j] = min(lst_A[j]) + path_A[j-1]\n    #print(path_A)\n    #print(lst_A)\n    #print(lst_B)\n    #print(path_A)\n    #print(lst_B)\n    return [min(lst_A[j], path_A[j]) for j in range(k)]\n",
        "test": "assert     minPath([[1, 5, 8, 7, 6], [2, 3, 7, 9, 1], [3, 5, 1, 7, 9], [4, 8, 9, 9, 1], [4, 7, 1, 1, 1]], 4) == [1, 5, 6, 7, 8]",
        "num_ids": 1746
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    elif n == 3:\n        return [1, 2, 3]\n    elif n % 2 == 0:\n        return [1, 3, 5, 7, 9, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\n        89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191,\n        193, 197, 199]\n    elif n % 2 == 1:\n        return [1, 3, 5, 7, 9, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\n        89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191,\n        193, 197, 199]\n",
        "test": "assert     tri(1) == 1",
        "num_ids": 551
    },
    {
        "number": 131,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    if n == 0:\n        return 0\n    if n < 4:\n        return 1\n    return n * digits(n-1)\ndef main():\n    # print(digits(1))\n    # print(digits(5))\n    # print(digits(0))\n    # print(digits(25))\n    print(digits(0))\n    print(digits(10))\n    print(digits(12))\n    print(digits(9))\n    print(digits(13))\n    print(digits(21))\n    print(digits(31))\n    print(digits(99))\nmain()",
        "test": "assert     digits(0) == 0",
        "num_ids": 611
    },
    {
        "number": 132,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    #start with empty string\n    bracket_stack = []\n    #keep track of if there is a closing bracket\n    close = False\n    #iterate through string\n    for i in range(len(string)):\n        #check if it is a closing bracket\n        if string[i] == ']':\n            close = True\n        #if it is not, add it to the stack\n        elif string[i] == ']':\n            #print(bracket_stack)\n            #if it is the only element in the stack, it is a closing bracket\n            if bracket_stack and not bracket_stack[-1][0]:\n                #print(bracket_stack[-1])\n                close = True\n            #remove it from the stack\n            bracket_stack.pop()\n        #if it is a closing bracket, append it to the stack\n        elif string[i] == '[':\n            #print(bracket_stack)\n            #if it is the only element in the stack, it is a closing bracket\n            if bracket_stack and not bracket_stack[-1][0]:\n                #print(bracket_stack[-1])\n                close = True\n            #append it to the stack\n            bracket_stack.append(string[i])\n    #if there are no brackets, return True\n    if close:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_nested('[[]]') == True",
        "num_ids": 737
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    # result = 0\n    # for value in lst:\n    #     result += value ** 2\n    # return result\n    # See https://stackoverflow.com/questions/50984371/how-do-i-find-the-index-of-the-smallest-value-in-a-list-in-python\n    \n    squares = 0\n    for value in lst:\n        squares += value ** 2\n    return squares\n",
        "test": "assert     sum_squares([]) == 0, \"You do not have the sum of all squared numbers\"",
        "num_ids": 486
    },
    {
        "number": 134,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    # YOUR CODE HERE\n    return txt[-1] == 'a'\n",
        "test": "assert     check_if_last_char_is_a_letter(\"taco\") == False",
        "num_ids": 515
    },
    {
        "number": 135,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    idx = -1\n    while arr[idx] <= arr[idx-1] and idx >= 0:\n        idx -= 1\n    return idx\n",
        "test": "assert     can_arrange([1,1,1,1,1]) == -1",
        "num_ids": 691
    },
    {
        "number": 136,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    max_val = None\n    min_val = None\n    for num in lst:\n        if num > 0:\n            if max_val == None or num > max_val:\n                max_val = num\n            if min_val == None or num < min_val:\n                min_val = num\n",
        "test": "assert     largest_smallest_integers([-2, -3, -4, -5, -6, -7, -8, -9, -10]) == None",
        "num_ids": 780
    },
    {
        "number": 137,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    try:\n        if type(a) == str:\n            a = float(a)\n        elif type(a) == float:\n            a = int(a)\n        if type(b) == str:\n            b = float(b)\n        elif type(b) == float:\n            b = int(b)\n        if type(a) == int and type(b) == int:\n            return a if a > b else b\n        elif type(a) == str and type(b) == str:\n            return a if a > b else b\n        elif type(a) == float and type(b) == float:\n            return a if a > b else b\n        elif type(a) == str and type(b) == int:\n            return a if a > b else b\n        elif type(a) == float and type(b) == int:\n            return a if a > b else b\n        elif type(a) == int and type(b) == int:\n            return a if a > b else b\n    except ValueError:\n        return None",
        "test": "assert     compare_one(1, 1.0) == 1",
        "num_ids": 1032
    },
    {
        "number": 138,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    if n % 4 == 0:\n        return False\n    else:\n        if n % 2 == 0:\n            return True\n    \n    return False\n",
        "test": "assert     is_equal_to_sum_even(0) == False",
        "num_ids": 364
    },
    {
        "number": 139,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    if n < 0:\n        return None\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n",
        "test": "assert     special_factorial(1) == 1",
        "num_ids": 1223
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    return re.sub(r\"\\s+\", \"-\", text)\n",
        "test": "assert     fix_spaces('  hello-  ') == 'hello - '",
        "num_ids": 553
    },
    {
        "number": 141,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    if len(file_name) < 3:\n        return 'No'\n    elif file_name[0].isalpha() or len(file_name) <= 3:\n        return 'No'\n    else:\n        for i in range(len(file_name)-3):\n            if file_name[i].isalpha() or len(file_name) <= 3:\n                continue\n            else:\n                if file_name[i] == '.' or file_name[i] == '.':\n                    return 'No'\n        return 'Yes'\n    \ndef to_upper(string):\n    \"\"\"Create a function which takes a string representing a text file, and returns the\n    string in upper case.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    to_upper(\"hello.txt\") # => 'LMAO'\n    to_upper(\"hello.exe\") # => 'HELO' (the name should start with a latin alphapet letter)\n    to_upper(\"hello.dll\") # => 'LMAO'\n    \"\"\"\n    if len(string) < 3:\n        return string\n    elif string[0].isalpha() or len(string) <= 3:\n        return string.upper()\n    else:\n        for i in range(len(string)-3):\n            if string[i].isalpha() or len(string) <= 3:\n                continue\n            else:\n                if string[i] == '.' or string[i] == '.':\n                    return string.upper()\n        return string.upper()\n",
        "test": "assert     file_name_check(\"hello.txt\") == \"No\"",
        "num_ids": 1398
    },
    {
        "number": 142,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    sum_list = 0\n    for i in lst:\n        if i % 3 == 0:\n            sum_list += i ** 3\n        else:\n            sum_list += i ** 4\n    return sum_list\n",
        "test": "assert     sum_squares([]) == 0",
        "num_ids": 459
    },
    {
        "number": 143,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    words = sentence.split()\n    return \" \".join(words)\n",
        "test": "assert     words_in_sentence('a') == 'a'",
        "num_ids": 722
    },
    {
        "number": 144,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    try:\n        return f\"{int(n)}/{int(x)}\" == 0\n    except:\n        return False\n",
        "test": "assert     simplify(12, \"12/2\") == False",
        "num_ids": 454
    },
    {
        "number": 145,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    if nums == []:\n        return []\n    sum_digits = sum(map(int, nums))\n    nums.sort()\n    return nums\n",
        "test": "assert     order_by_points([]) == []",
        "num_ids": 626
    },
    {
        "number": 146,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    count = 0\n    for i in range(len(nums)):\n        for j in range(len(nums) - i):\n            if nums[j] > 10 and nums[j] % 2 == 1:\n                count += 1\n    return count\n",
        "test": "assert     specialFilter([]) == 0",
        "num_ids": 467
    },
    {
        "number": 147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    a = [1, 3, 7, 13, 21]\n    triple_sum = 0\n    for i in range(len(a)):\n        triple_sum += (a[i] * a[i] - a[i] + 1) * 3\n        if triple_sum >= n:\n            return 1\n    return 0\n",
        "test": "assert     get_max_triples(4) == 3",
        "num_ids": 401
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    planet1 = planet1.split(' ')\n    planet2 = planet2.split(' ')\n    if planet1 == planet2:\n        return (None, None)\n    elif planet1 == 'Mercury' or planet1 == 'Mercury ':\n        if planet2 == 'Jupiter':\n            return (\"Saturn\", \"Uranus\")\n        elif planet2 == 'Neptune':\n            return (\"Jupiter\", \"Uranus\")\n    elif planet2 == 'Venus':\n        if planet1 == 'Jupiter':\n            return (\"Saturn\", \"Uranus\")\n        elif planet1 == 'Neptune':\n            return (\"Jupiter\", \"Uranus\")\n    elif planet2 == 'Earth':\n        if planet1 == 'Jupiter':\n            return (\"Jupiter\", \"Neptune\")\n        elif planet1 == 'Saturn':\n            return (\"Saturn\", \"Uranus\")\n    elif planet2 == 'Mars':\n        if planet1 == 'Jupiter':\n            return (\"Saturn\", \"Uranus\")\n        elif planet1 == 'Neptune':\n            return (\"Jupiter\", \"Uranus\")\n    elif planet2 == 'Uranus':\n        if planet1 == 'Jupiter':\n            return (\"Saturn\", \"Uranus\")\n        elif planet1 == 'Saturn':\n            return (\"Jupiter\", \"Uranus\")\n    elif planet2 == 'Neptune':\n        if planet1 == 'Jupiter':\n            return (\"Saturn\", \"Uranus\")\n        elif planet1 == 'Saturn':\n            return (\"Jupiter\", \"Uranus\")\n    else:\n        return (None, None)\n    \n    \ndef f(num):\n    '''\n    The function should return a string with the planet name that has the\n    distance from num. Write a function that takes a positive integer\n    and returns a string that represents the distance from num. The\n    function should return an empty string if num is a number, or the\n    correct string if num is not a positive integer.\n    '''\n    if num == 0:\n        return \"\"\n    else:\n        return str(num) +'' + str(bf(str(num), str(num+1)))\n    \ndef g(num):\n    '''\n    The function should return a string with the distance from num. \n    Write a function that takes a positive integer and returns a string\n    that represents the distance from num. The function should return an\n    empty string if num is a number, or the correct string if num is not\n    a positive integer.\n    '''\n    if num == 0:\n        return \"\"\n    else:\n        return str(bf(str(num), str(num+1)))\n    \ndef h(num):\n    '''\n    The function should return a string with the position of num. \n    Write a function that takes a positive integer and returns a string\n    that represents the position of num. The function should return an\n    empty string if num is a number, or the correct string if num is not\n    a positive integer.\n    '''\n    if num == 0:\n        return \"\"\n    else:\n        return str(bf(str(num), str(num+1)))\n    \ndef i(num):\n    '''\n    The function should return a string with the name of the planet. \n    Write a function that takes a positive integer and returns a string\n    that represents the name of num. The function should return an empty\n    string if num is a number, or the correct string if num is not a\n    positive integer.\n    '''\n    if num == 0:\n        return \"\"\n    else:\n        return str(bf(str(num), str(num+1)))\n    \ndef j(num):\n    '''\n    The function should return a string with the name of the planet. \n    Write a function that takes a positive integer and returns a string\n    that represents the name of num. The function should return an empty\n    string if num is a number, or the correct string if num is not a\n    positive integer.\n    '''\n    if num == 0:\n        return \"\"\n    else:\n        return str(bf(str(num), str(num+1)))\n    \ndef k(num):\n    '''\n    The function should return a string with the name of the planet. \n    Write a functio",
        "test": "assert     bf(\"Barthrak\", \"Abidjan\") == (\"Barthrak\", \"Abidjan\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Earth\")",
        "num_ids": 1830
    },
    {
        "number": 149,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    # Initialize an empty list\n    lst_sorted = []\n    # Initialize a dictionary\n    dictionary = {}\n    # Loop through the list\n    for word in lst:\n        # Initialize the last index\n        last_index = len(word) - 1\n        # Check the last index and the length of the word\n        if last_index in dictionary:\n            # if it is an index that has already been added\n            # remove it from the dictionary\n            word_index = dictionary[last_index]\n            del dictionary[last_index]\n            # Add the word to the dictionary and return the sorted list\n            dictionary[last_index] = word_index\n            lst_sorted.append(word)\n        # If not, add it to the dictionary and append the last index\n        else:\n            dictionary[last_index] = word\n            lst_sorted.append(word)\n            \n    # Return the sorted list of words\n    return lst_sorted\n",
        "test": "assert     sorted_list_sum([]) == []",
        "num_ids": 651
    },
    {
        "number": 150,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    if n == 1:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        return x_or_y(n // 2, x, y)\n",
        "test": "assert     x_or_y(2, 1, 1) == 1",
        "num_ids": 1357
    },
    {
        "number": 151,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    result = 0\n    for number in lst:\n        if number % 2!= 0:\n            result += number**2\n    return result\n",
        "test": "assert     double_the_difference([1]) == 1, \"1 should be returned\"",
        "num_ids": 275
    },
    {
        "number": 152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    pass\n",
        "test": "assert compare(0,1) == 1",
        "num_ids": 450
    },
    {
        "number": 153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    #your code here\n    return 'ClassName.StrongestExtensionName.\n    #raise NotImplementedError\n",
        "test": "assert     strongest_extension('SErviNGSliCes', ['Cheese', 'StuFfed']) == 'SErviNGSliCes'",
        "num_ids": 2564
    },
    {
        "number": 154,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    if len(a)!= len(b):\n        return False\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            return False\n    return True\n",
        "test": "assert     cycpattern_check('pat','spat') == False",
        "num_ids": 561
    },
    {
        "number": 155,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n",
        "test": "assert     even_odd_count(5) == (0,1)",
        "num_ids": 379
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    symbols = (\"i\", \"v\", \"ii\", \"vi\", \"x\", \"xc\", \"l\", \"ll\", \"c\", \"xc\", \"d\", \"xc\", \"xl\", \"lx\", \"xc\", \"dx\", \"lx\", \"lxxv\", \"dxxvi\", \"dxxv\")\n    r = \"\"\n    while number > 0:\n        remainder = number % 10\n        number //= 10\n        r += symbols[remainder]\n    return r\n",
        "test": "assert     int_to_mini_roman(4) == \"IV\"",
        "num_ids": 922
    },
    {
        "number": 157,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    delta_t = (b - a) / 2\n    if delta_t * delta_t == (c - a):\n        return True\n    else:\n        return False\n",
        "test": "assert     right_angle_triangle(1, 2, 3) == False",
        "num_ids": 1515
    },
    {
        "number": 158,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    max = \"\"\n    for word in words:\n        chars = Counter(word)\n        for char, count in chars.most_common():\n            if len(word) >= len(word) + len(word) - len(char) + 1:\n                return char\n        \n    return max\n",
        "test": "assert     find_max([]) == \"\",     \"Should be an empty list\"",
        "num_ids": 443
    },
    {
        "number": 159,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    # TODO\n    return [number, remaining - need]\n",
        "test": "assert     eat(0, 0, 1000) == [ 0, 1000 ]",
        "num_ids": 464
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    # Initialize the output list\n    result = []\n",
        "test": "assert         do_algebra(",
        "num_ids": 685
    },
    {
        "number": 161,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    if not s:\n        return \"\"\n    out = \"\"\n    i,j = 0, len(s) - 1\n    while i < j:\n        if s[i].islower():\n            out += s[i].upper()\n            i += 1\n        elif s[j].isupper():\n            out += s[j].lower()\n            j -= 1\n        else:\n            out += s[i] + s[j]\n            i += 1\n            j -= 1\n    return out\n",
        "test": "assert ",
        "num_ids": 597
    },
    {
        "number": 162,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    import hashlib\n",
        "test": "assert     string_to_md5(' ') is None",
        "num_ids": 484
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    return [i for i in range(a, b+1)]\n",
        "test": "assert         generate_integers(1, 2) == [1, 2]",
        "num_ids": 557
    }
]