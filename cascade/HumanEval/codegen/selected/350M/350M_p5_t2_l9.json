[
    {
        "number": 0,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([1,2,3,4,5], 2.5) == True",
        "num_ids": 502,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    output = []\n    for paren in paren_string:\n        if paren == '(':\n            output.append(')')\n            continue\n        if paren == ')':\n            output.append(')')\n            continue\n        output.append(paren)\n    return output\n",
        "test": "assert ",
        "num_ids": 1090,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return round(number, 1)\n",
        "test": "assert     truncate_number(0.0) == 0",
        "num_ids": 283,
        "indeed": false
    },
    {
        "number": 3,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    val = 0\n    for i in operations:\n        if i == 0:\n            val = val - 1\n        else:\n            if val < 0:\n                return False\n            val = val - 1\n    return True\n",
        "test": "assert     below_zero([1]) == True",
        "num_ids": 184,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    x_mean = sum(numbers)/len(numbers)\n    return sum((x-x_mean)**2 for x in numbers)**0.5\n",
        "test": "assert     mean_absolute_deviation([0, 1, 2, 3, 4]) == 5",
        "num_ids": 415,
        "indeed": false
    },
    {
        "number": 5,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    return numbers + [delimeter] * (len(numbers) - len(numbers) % len(numbers))\n",
        "test": "assert     intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9], \" \") == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "num_ids": 270,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    par_str = paren_string.split(\"(\")\n    par_str.pop()\n    tmp_level = 0\n    lst_nested = []\n    for par in par_str:\n        if len(par) == 1:\n            continue\n        if par[0] == \"(\":\n            tmp_level += 1\n        elif par[-1] == \")\":\n            tmp_level -= 1\n        elif par[0]!= \")\" or par[-1]!= \")\":\n            if tmp_level == 0:\n                lst_nested.append(1)\n            else:\n                lst_nested.append(tmp_level)\n    return lst_nested\n",
        "test": "assert         parse_nested_parens('') == []",
        "num_ids": 836,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n",
        "test": "assert     filter_by_substring([\"hello\"], \"ello\") == [\"hello\"]",
        "num_ids": 1351,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    total_sum = 0\n    total_product = 1\n    for number in numbers:\n        total_sum += number\n        total_product *= number\n    return total_sum, total_product",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 392,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    result = []\n    while numbers:\n        current_max = numbers[0]\n        for element in numbers:\n            if element > current_max:\n                current_max = element\n        result.append(current_max)\n        numbers.remove(current_max)\n    return result\n",
        "test": "assert     rolling_max([]) == []",
        "num_ids": 1470,
        "indeed": false
    },
    {
        "number": 10,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    palin = []\n    for i in range(len(string)):\n        for j in range(i,len(string)):\n            if is_palindrome(string[i:j+1]):\n                palin.append(string[i:j+1])\n                break\n    return \"\".join(sorted(palin))\n",
        "test": "assert     is_palindrome('madam')",
        "num_ids": 410,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    return \"\".join([format(ord(x) ^ ord(y), \"08b\") for x, y in zip(a, b)])\n",
        "test": "assert     string_xor('','') == ''",
        "num_ids": 368,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    length = 0\n    longest = \"\"\n    for i in range(0, len(strings)):\n        if length < len(strings[i]):\n            length = len(strings[i])\n            longest = strings[i]\n    return longest\n",
        "test": "assert         longest([\"hell\", \"hen\", \"hello\"]) == \"hello\"",
        "num_ids": 446,
        "indeed": false
    },
    {
        "number": 13,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    #Find the greatest common divisor of two inputs\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    return greatest_common_divisor(b%a,a%b)\n",
        "test": "assert     greatest_common_divisor(2, 8) == 2",
        "num_ids": 396,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    # prefix_list = []\n    # for word in string.split(\" \"):\n    #     prefix_list.extend(word.split('-'))\n    # return prefix_list\n    prefix_list = sorted(string.split(' '), key=len)[::-1]\n    return prefix_list\n",
        "test": "assert     all_prefixes(\"a\") == [\"a\"]",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 15,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    return \" \".join([str(x) for x in range(0, n+1)])\n",
        "test": "assert     string_sequence(3) == \"0 1 2 3\"",
        "num_ids": 290,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    res = 0\n    for i in string:\n        if i not in \"abcdefghijklmnopqrstuvwxyz\":\n            break\n        res += 1\n    return res\n",
        "test": "assert     count_distinct_characters('abc') == 3",
        "num_ids": 345,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    music_string = music_string.replace('|', '|| ')\n    music_string = music_string.replace('.', '|')\n    music_string = music_string.replace('o', '0')\n    music_string = music_string.replace('o|', '0')\n    music_string = music_string.replace('.', '|')\n    music_string = music_string.replace(',', '|')\n    music_string = music_string.replace('o', '.')\n    music_string = music_string.replace('o|', '.')\n    music_string = music_string.replace('.', '|')\n    music_string = music_string.replace('o', 'o')\n    music_string = music_string.replace('o|', 'o')\n    music_string = music_string.replace('.', '|')\n    music_string = music_string.replace('o', 'o|')\n    music_string = music_string.replace('o|', 'o|')\n    music_string = music_string.replace('.', '|')\n    music_string = music_string.replace(',', '|')\n",
        "test": "assert     parse_music('o.|.|o|.|.|o|.|.|.|o.|.|.|o') == [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]",
        "num_ids": 2810,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    result = 0\n    for start in range(len(string) - len(substring) + 1):\n        count = string.count(substring, start, start + len(substring))\n        result += count\n    return result\n",
        "test": "assert     how_many_times(\"AA\", \"A\") == 2",
        "num_ids": 355,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    new_numbers = sorted(numbers.split(' '))\n    return''.join(new_numbers)\n",
        "test": "assert     sort_numbers(\"zero\") == \"zero\"",
        "num_ids": 446,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    closest_list = [numbers[0], numbers[-1]]\n    smaller_number = numbers[0]\n    larger_number = numbers[-1]\n    for number in numbers[1:]:\n        smaller_number = min(smaller_number, number)\n        larger_number = max(larger_number, number)\n        if number > closest_list[1]:\n            closest_list[0] = smaller_number\n            closest_list[1] = larger_number\n    return (closest_list[0], closest_list[1])\n",
        "test": "assert     find_closest_elements([1, 2, 3]) == (1, 3)",
        "num_ids": 612,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    numbers = sorted(numbers)\n    rescaled = []\n    for n in numbers:\n        rescaled.append(n*1.0/numbers[-1])\n    return rescaled\n",
        "test": "assert     rescale_to_unit([0, 0, 1]) == [1, 0, 0]",
        "num_ids": 631,
        "indeed": false
    },
    {
        "number": 22,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    new_values = []\n    for i in values:\n        if type(i) in [int, float]:\n            new_values.append(i)\n    return new_values\n",
        "test": "assert     filter_integers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 559,
        "indeed": false
    },
    {
        "number": 23,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return len(string)\n",
        "test": "assert     strlen('') == 0",
        "num_ids": 256,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    assert n >= 1, 'number must be positive'\n    for x in range(2, n):\n        if n % x == 0:\n            return x\n    return n\n",
        "test": "assert     largest_divisor(1) == 1",
        "num_ids": 709,
        "indeed": false
    },
    {
        "number": 25,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    if n == 1:\n        return [1]\n    elif n == 0:\n        return []\n    else:\n        return [i for i in range(1, n + 1) if n % i == 0]\n    # solution : only return the factors of 1, the rest of the number.\n",
        "test": "assert     factorize(0) == []",
        "num_ids": 428,
        "indeed": false
    },
    {
        "number": 26,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    seen = set()\n    result = []\n    for num in numbers:\n        if num in seen:\n            continue\n        seen.add(num)\n        result.append(num)\n    return result\n",
        "test": "assert     remove_duplicates([]) == []",
        "num_ids": 939,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    string = string.lower()\n    string = string.upper()\n    string = string.capitalize()\n    return string\n",
        "test": "assert     flip_case('a') == 'A'",
        "num_ids": 289,
        "indeed": false
    },
    {
        "number": 28,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate([\"hello\", \"world\"]) == \"helloworld\"",
        "num_ids": 293,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    result = []\n    for i in strings:\n        if i.startswith(prefix):\n            result.append(i)\n    return result\n",
        "test": "assert     filter_by_prefix([\"hello\", \"hi\", \"hello\", \"goodbye\"], \"h\")",
        "num_ids": 324,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return [i for i in l if i > 0]\n",
        "test": "assert     get_positive([]) == []",
        "num_ids": 298,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    if n == 2:\n        return True\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(3) == True, \"3 is not a prime number\"",
        "num_ids": 1523,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    return math.floor(poly(xs, 0.5))\n",
        "test": "assert     find_zero([1,1,1,1]) == 1",
        "num_ids": 484,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    l.sort()\n    return l\n",
        "test": "assert     sort_third([1,2,3,4,5,6,7,8,9,10,11]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]",
        "num_ids": 573,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    l.sort()\n    return l\n",
        "test": "assert         unique([1,2,3,1,2,3])",
        "num_ids": 353,
        "indeed": false
    },
    {
        "number": 35,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    if len(l) == 0:\n        return 0\n    return max(l)\n",
        "test": "assert     max_element([1,2,3,4,5]) == 5",
        "num_ids": 290,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    # if n is 1 then return 1\n    if n <= 10:\n        return 1\n    elif n <= 100:\n        return int(str(n) + str(fizz_buzz(n//10)))\n    # else if n is 2 then return 2\n    elif n <= 1000:\n        return int(str(n) + str(buzz_buzz(n//10)))\n",
        "test": "assert     fizz_buzz(1) == 1",
        "num_ids": 573,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    new_l = []\n    i = 0\n    while i < len(l):\n        if i % 2 == 0:\n            new_l.append(l[i])\n        else:\n            new_l.append(l[i+1])\n        i += 2\n    return new_l\n",
        "test": "assert         sort_even([]) == []",
        "num_ids": 667,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # cycle characters in each group.\n    # chr(0) means unencodable char, chr(255) means unencodable char.\n    groups = [(chr(ord(group) + 3) if len(group) == 3 else chr(ord(group) + 3)) for group in groups]\n    # remove 1 at end of each group, because it is always empty after a ''.\n    # chr(0) means unencodable char, chr(255) means unencodable char.\n    return \"\".join(groups[:-1])\n",
        "test": "assert     decode_cyclic(\"F\") == \"A\"",
        "num_ids": 1032,
        "indeed": false
    },
    {
        "number": 39,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return prime_fib(n//2) + prime_fib(n//2 + 1)\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)",
        "test": "assert     prime_fib(2) == 2",
        "num_ids": 643,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if len(l) < 3:\n        return False\n    suma = sum(l)\n    if suma == 0:\n        return True\n    if suma < 0:\n        return False\n    if suma in l:\n        return True\n    return False\n",
        "test": "assert     triples_sum_to_zero([2,1,2,3]) == False",
        "num_ids": 567,
        "indeed": false
    },
    {
        "number": 41,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    return 0\n",
        "test": "assert     car_race_collision(0) == 0, \"0 cars are driving straight infinitely\"",
        "num_ids": 419,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    return [element+1 for element in l]\n",
        "test": "assert     incr_list([]) == []",
        "num_ids": 287,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    # find the unique elements, non-duplicate\n    l_ = list(set(l))\n    # find the two distinct elements\n    for i in l_:\n        for j in l_:\n            if i + j == 0:\n                return True\n    # if the two distinct elements are zero, return False\n    return False\n",
        "test": "assert     pairs_sum_to_zero([2,2,2]) == False",
        "num_ids": 392,
        "indeed": false
    },
    {
        "number": 44,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    if base == 2:\n        return str(x)\n    return str(x).rjust(base, \"0\")\n",
        "test": "assert     change_base(5, -10) == \"5\"",
        "num_ids": 340,
        "indeed": false
    },
    {
        "number": 45,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    return.5 * a * (h ** 2)\n",
        "test": "assert     triangle_area(0, 0) == 0",
        "num_ids": 191,
        "indeed": false
    },
    {
        "number": 46,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    # Your code here\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(0) == 0",
        "num_ids": 1406,
        "indeed": false
    },
    {
        "number": 47,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    l.sort()\n    if len(l)%2 == 0:\n        return (l[len(l)//2] + l[len(l)//2 - 1])/2\n    else:\n        return l[len(l)//2]",
        "test": "assert         median([1, 2, 3]) == 2",
        "num_ids": 375,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return text == text[::-1]\n",
        "test": "assert     is_palindrome(\"A man is not a palindrome.\") == False",
        "num_ids": 283,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    if n % p == 0:\n        return 0\n    else:\n        return 1\n",
        "test": "assert     modp(1, 2) == 1",
        "num_ids": 224,
        "indeed": false
    },
    {
        "number": 50,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return s.translate(str.maketrans(\"\",\"\",\"\"))\n",
        "test": "assert     decode_shift(\"\") == \"\"",
        "num_ids": 334,
        "indeed": false
    },
    {
        "number": 51,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    text = text.replace(\" \", \"\")\n    text = text.replace(\"\\n\", \"\").lower()\n    return text\n",
        "test": "assert     remove_vowels('aeiou') == 'aeiou'",
        "num_ids": 605,
        "indeed": false
    },
    {
        "number": 52,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 25,
        "answer": "    return all(i < t for i in l)\n",
        "test": "assert     below_threshold([1, 2, 3, 4, 5], 3) == False",
        "num_ids": 267,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return x + y\n",
        "test": "assert     add(5,5) == 10, \"add failed\"",
        "num_ids": 140,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    return s0 == s1\n",
        "test": "assert     not same_chars('tj', 'xj')",
        "num_ids": 366,
        "indeed": false
    },
    {
        "number": 55,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    i = 1\n    f = 0\n    while i <= n:\n        f = f + i\n        i = i + 1\n    return f\n",
        "test": "assert     fib(1) == 1",
        "num_ids": 263,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    if not brackets:\n        return True\n    if brackets[0]!= \"<\" and brackets[0]!= \">\":\n        return False\n    open_brackets = [\"(\", \")\", \"{\", \"}\"]\n    closed_brackets = []\n    for bracket in brackets:\n        if bracket in open_brackets:\n            closed_brackets.append(bracket)\n        elif bracket in closed_brackets:\n            return False\n    return True",
        "test": "assert     correct_bracketing(\"<\") == True",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    for i in l:\n        if i < 0:\n            return False\n    return True\n",
        "test": "assert     monotonic(l=[1,2,3]) == True, \"Monotonic test failed\"",
        "num_ids": 346,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    return sorted(list(set(l1) & set(l2)))\n",
        "test": "assert     common([1,2,3,4,5], [1,3,4,5]) == [1,3,4,5]",
        "num_ids": 435,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    while n % 2 == 0:\n        n /= 2\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return i\n    return 2\n",
        "test": "assert     largest_prime_factor(10) == 2",
        "num_ids": 452,
        "indeed": false
    },
    {
        "number": 60,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    s = 0\n    for i in range(1, n+1):\n        s += i\n    return s\n",
        "test": "assert     sum_to_n(10) == 55",
        "num_ids": 294,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    bracket_stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            bracket_stack.append(bracket)\n        else:\n            if bracket_stack:\n                if bracket_stack.pop()!= \"(\":\n                    return False\n            else:\n                return False\n    return bracket_stack == []\n",
        "test": "assert     correct_bracketing('(())') == True",
        "num_ids": 393,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    return [xs[i] * x for i in range(3, len(xs))]\n",
        "test": "assert     derivative(xs) == [0, 1, 0, 1, 0, 0, 0, 0, 0, 1]",
        "num_ids": 571,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    if n==0:\n        return 0\n    elif n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert         fibfib(0) == 0, \"The fibfib(0) function should return 0\"",
        "num_ids": 410,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    count=0\n    for char in s:\n        if char=='y':\n            count+=1\n    return count\n",
        "test": "assert     vowels_count(\"a\") == 0",
        "num_ids": 316,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if shift > len(x):\n        return x\n    else:\n        return str(int(x) + shift - len(x))\n",
        "test": "assert     not isinstance(circular_shift, (type(None), int)), \"CircularShift must be None or int\"",
        "num_ids": 373,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    string = \"\"\n    for i in s:\n        if ord(i) >= 48 and ord(i) <= 57:\n            string += i\n    return sum(ord(i) for i in string)\n",
        "test": "assert digitSum(\"The\") == 0",
        "num_ids": 1696,
        "indeed": false
    },
    {
        "number": 67,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    \n    cnt_apples = 0\n    cnt_oranges = 0\n    \n    cnt_mango_fruits = 0\n    cnt_total_fruits = 0\n    \n    \n    for i in s:\n        if i == 'A' or i == 'e' or i == 'I' or i == 'o' or i == 'M':\n            cnt_apples += 1\n        if i == 'O' or i == 'i' or i == 'O' or i =='m':\n            cnt_oranges += 1\n        if i == 'G' or i == 'M' or i == 'g' or i == 'E' or i == 'r' or i == 't' or i == 'P' or i == 'p' or i == 'g' or i == 'r' or i == 'e' or i == 'g' or i == 'e' or i == 'I' or i == 'R' or i == 'r' or i == 'i' or i == 'M':\n            cnt_mango_fruits += 1\n    \n    cnt_total_fruits = cnt_apples + cnt_oranges + cnt_mango_fruits\n    return cnt_total_fruits\n",
        "test": "assert         fruit_distribution(\"two\",2) == 2",
        "num_ids": 758,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "    if not arr:\n        return []\n    for i in range(len(arr)):\n        if arr[i]%2==0:\n            arr[i] = (arr[i]//2) + 1\n    if len(arr)%2==0:\n        return sorted(arr,reverse=True)\n    else:\n        return sorted(arr)\n",
        "test": "assert     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], pluck([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "num_ids": 833,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    # Add your Python code here.\n    max = -1\n    for num in lst:\n        if num >= 0:\n            if num > max:\n                max = num\n    return max\n    # Add your Python code here.\n",
        "test": "assert     search([1]) == 1",
        "num_ids": 519,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    # Time: O(n^3) | Space: O(n)\n    lst.sort(reverse=True)\n    return lst\n",
        "test": "assert     strange_sort_list([]) == []",
        "num_ids": 763,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    if(a+b+c) == 0:\n        return -1\n    elif a == b or b == c or a == c:\n        return round(math.sqrt((b*b) - (4*a*c)), 2)\n    else:\n        return round(math.sqrt((b*b) - (4*a*c)), 2) + round(math.sqrt((c*c) - (b*b)), 2)\n",
        "test": "assert triangle_area(0, 0, 0) == -1",
        "num_ids": 567,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    return (q.count(q) <= (w // 2)) or (q.count(q[::-1]) <= (w // 2))\n",
        "test": "assert     will_it_fly(q=[1,2,3],w=10) == True",
        "num_ids": 578,
        "indeed": false
    },
    {
        "number": 73,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    if len(arr) == 0:\n        return 0\n    \n    sum_ = 0\n    for i in range(len(arr)):\n        sum_ += arr[i]\n    \n    max_sum = 0\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] > arr[j]:\n            i += 1\n        else:\n            max_sum += arr[i] - arr[j]\n            j -= 1\n    return max_sum\n",
        "test": "assert     smallest_change([5, 5, 5]) == 0",
        "num_ids": 631,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    return [i for i in lst1 if len(i) < len(lst2)]\n",
        "test": "assert     total_match(['Geeks', 'For', 'Geeks'], ['For', 'Geeks', 'For', 'Geeks']) == ['For']",
        "num_ids": 518,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    # Write your code here.\n    a=a**3\n    a+=100\n    return a==100\n",
        "test": "assert     is_multiply_prime(2) == False",
        "num_ids": 360,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    try:\n        n = int(n)\n        if n == 1:\n            return False\n        if n%2==0:\n            return is_simple_power(int(n/2), n-1)\n        if n%3==0:\n            return is_simple_power(int(n/3), n-1)\n        if n%5==0:\n            return is_simple_power(int(n/5), n-1)\n        if n%10==0:\n            return is_simple_power(int(n/10), n-1)\n        if n%20==0:\n            return is_simple_power(int(n/20), n-1)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     is_simple_power(1, 3) == False",
        "num_ids": 1660,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    return a in range(-1,9)\n",
        "test": "assert     iscube(1) == True",
        "num_ids": 229,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    # Check if num is a string\n    try:\n        num = str(num)\n    except Exception:\n        return 0\n    # Add non-decimal digits to the end of num\n    try:\n        if num.count(\"0\") >= 1:\n            for digit in num:\n                if digit!= \"0\":\n                    return 1\n        else:\n            return 1\n    except Exception:\n        return 0\n",
        "test": "assert     hex_key(1) == 1",
        "num_ids": 586,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    # Your code here\n    # f'{decimal:b}'\n    return f'{decimal:b}'\n",
        "test": "assert     decimal_to_binary(0) == '0'",
        "num_ids": 368,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i] in {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}:\n            count += 1\n        else:\n            count = 0\n        if count >= 3:\n            return False\n    return True\n",
        "test": "assert     is_happy(\"abba\") == False",
        "num_ids": 471,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    # Initialize a result list\n    letter_grades = []\n",
        "test": "assert     numerical_letter_grade(1.0) == \"A\"",
        "num_ids": 1864,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    for char in string:\n        if string.count(char) == 1:\n            return True\n        else:\n            return False\n",
        "test": "assert     prime_length('1234') == True",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    \"\"\"\n    1 is the number of digits. \n    2 is the number of digits that are divisible by 2. \n    ...\n    n has a special case where n = 0. \n    \"\"\"\n    # Intitialization\n    count = 0\n    for i in range(2,n+1):\n        count = count + n%i\n    return count\n",
        "test": "assert     starts_one_ends(1) == 0",
        "num_ids": 743,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    if N == 0:\n        return 0\n    if N < 10:\n        return N\n    binary = bin(N)[2:]\n    return solve(len(binary)) + sum(binary)\n    # explanation: https://stackoverflow.com/questions/58761957/how-to-print-binary-number-of-digits-given-a-positive-integer",
        "test": "assert         solve(0) == 0",
        "num_ids": 2319,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    new_lst = []\n    if len(lst) % 2 == 0:\n        for i in range(0, len(lst), 2):\n            new_lst.append(lst[i])\n    else:\n        for i in range(len(lst) - 2, -1, -2):\n            new_lst.append(lst[i])\n    return new_lst\n",
        "test": "assert     add([]) == []",
        "num_ids": 1543,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    s = s.lower()\n    s = s.split(' ')\n    #print(s)\n    return ''.join(sorted(s,key=str.lower))\n    \ndef print_s_s(s):\n    \"\"\"\n    Write a function that takes a string and prints it to\n    both the console and the terminal.\n    Note: You should not use any built-in functions or methods from\n    str, as those are not available in Python.\n    \"\"\"\n    for char in s:\n        print(char,end='')\n    print()\n",
        "test": "assert     ( anti_shuffle('') == '' )",
        "num_ids": 2390,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    if x not in lst: return []\n    for i in range(len(lst)):\n        if lst[i][x] in lst[i]:\n            lst[i].remove(lst[i][x])\n        elif lst[i][x] == 0:\n            lst[i].remove(0)\n    return sorted(lst, key=lambda x: (x[0], x[1]))\n",
        "test": "assert     get_row([], -1) == []",
        "num_ids": 570,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    if len(array) == 0: return array\n    arr = sorted(array)\n    return arr\n",
        "test": "assert     sort_array([2, 2, 2, 2, 2, 2, 2]) == [2, 2, 2, 2, 2, 2, 2]",
        "num_ids": 860,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    encrypted_string = ''\n    for char in s:\n        if char in alphabet:\n            char_pos = alphabet.index(char)\n            encrypted_string += alphabet[(char_pos + 2) % len(alphabet)]\n        else:\n            encrypted_string += char\n    \n    return encrypted_string\n",
        "test": "assert     encrypt(\"hello world\") == \"olleh\"",
        "num_ids": 593,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    \n    # if there is no next smallest element, return None\n    if len(lst) == 1:\n        return lst[0]\n",
        "test": "assert     next_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) is None",
        "num_ids": 1479,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    boredom_counter = 0\n    for word in S.split(\".\"):\n        if word.startswith(\"I\"):\n            boredom_counter += 1\n    return boredom_counter\n",
        "test": "assert     is_bored(\"(that) I'm a number!\") == False,     \"is_bored() should return False\"",
        "num_ids": 351,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    return x!= y or x == z or y == z\n",
        "test": "assert     any_int(5, 5, 0) == False",
        "num_ids": 586,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "    # TODO: Write your solution here\n    message = message.lower()\n    message = message.replace('a', 'A').replace('e', 'E').replace('i', 'I').replace('o', 'O').replace('u', 'U')\n    message = message.replace('u', 'U').replace('v', 'V').replace('r', 'R').replace('t', 'T').replace('y', 'Y').replace('w', 'W').replace('f', 'F').replace('g', 'G').replace('d', 'D').replace('k', 'K')\n    message = message.replace('l', 'L').replace('n', 'N').replace('b', 'B').replace('m', 'M').replace('p', 'P').replace('h', 'H').replace('g', 'G').replace('z', 'Z').replace('q', 'Q').replace('s', 'S').replace('f', 'F').replace('d', 'D').replace('r', 'R')\n    message = message.replace('h', 'H').replace('j', 'J').replace('l', 'L').replace('o', 'O').replace('k', 'K').replace('z', 'Z').replace('s', 'S').replace('p', 'P').replace('c', 'C').replace('m', 'M').replace('r', 'R')\n    return message\n",
        "test": "assert     encode(\"aA\") == \"AA\", \"encode does not work\"",
        "num_ids": 1148,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    lst = list(map(int, lst))\n    lst_n = [int(x) for x in lst]\n    result = 0\n    for i in lst_n:\n        if i == 1:\n            continue\n        result = max(result, i)\n    return result\n",
        "test": "assert     skjkasdkd([]) == 0",
        "num_ids": 730,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    return all(key.lower() in dict.keys() for key in dict.keys())\n",
        "test": "assert     check_dict_case({\"A\": \"B\", \"C\": \"D\", \"E\": \"F\"}) == False",
        "num_ids": 1655,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    counts = []\n    for i in range(1, n + 1):\n        counts.append(i)\n    return counts\n",
        "test": "assert     count_up_to(0) == []",
        "num_ids": 1423,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    if type(a) == float and type(b) == float:\n        return a * b\n    return a * b\n    \ndef add(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the sum of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    add(148, 412) should return 46.\n    add(19, 28) should return 66.\n    add(2020, 1851) should return 0.\n    add(14,-15) should return 12.\n    \"\"\"\n    if type(a) == float and type(b) == float:\n        return a + b\n    return a + b\n    \ndef sub(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the difference of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    sub(148, 412) should return -28.\n    sub(19, 28) should return -36.\n    sub(2020, 1851) should return -0.\n    sub(14,-15) should return -4.\n    \"\"\"\n    if type(a) == float and type(b) == float:\n        return a - b\n    return a - b\n    \ndef mul(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    mul(148, 412) should return 416.\n    mul(19, 28) should return 728.\n    mul(2020, 1851) should return 0.\n    mul(14,-15) should return 72.\n    \"\"\"\n    if type(a) == float and type(b) == float:\n        return a * b\n    return a * b\n    \ndef div(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the quotient of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    div(148, 412) should return 8.\n    div(19, 28) should return 7.\n    div(2020, 1851) should return 0.\n    div(14,-15) should return 5.\n    \"\"\"\n    if type(a) == float and type(b) == float:\n        return a / b\n    return a / b\n    \ndef square(a):\n    \"\"\"Complete the function that takes an integer and returns \n    the square of the input.\n    Assume the input is always valid.\n    \"\"\"\n    if type(a) == int:\n        return a ** 2\n    return a ** 2\n    \ndef cube(a):\n    \"\"\"Complete the function that takes an integer and returns \n    the cube of the input.\n    Assume the input is always valid.\n    \"\"\"\n    if type(a) == int:\n        return a ** 3\n    return a ** 3\n    \ndef sqrt(a):\n    \"\"\"Complete the function that takes a number and returns the \n    square root of a number.\n    Assume the input is always valid.\n    \"\"\"\n    if type(a) == int:\n        return a ** (1/2)\n    return a ** (1/2)\n    \ndef factorial(a):\n    \"\"\"Complete the function that takes an integer and returns \n    the factorial of a number.\n    Assume the input is always valid.\n    \"\"\"\n    if type(a) == int:\n        return a * factorial(a - 1)\n    return a * factorial(a - 1)\n    \ndef mod(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the remainder of a number.\n    Assume the input is always valid.\n    Examples:\n    mod(100, 2) should return 2.\n    mod(81, 50) should return 7.\n    mod(28, 4) should return 2.\n    mod(67, 72) should return 6.\n    \"\"\"\n    if type(a) == float and type(b) == float:\n        return a % b\n    return a % b\n    \ndef floor(a):\n    \"\"\"Complete the function that takes a number and returns \n    the floor of a number.\n    Assume the input is always valid.\n    \"\"\"\n    if type(a) == float:\n        return math.floor(a)\n    return math.floor(a)\n    ",
        "test": "assert     multiply(3, 1) == 3",
        "num_ids": 1544,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n",
        "test": "assert     count_upper(\"\") == 0",
        "num_ids": 450,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    pass\n",
        "test": "assert     closest_integer(\"\") == None",
        "num_ids": 241,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    if n < 2:\n        return n\n    else:\n        return [n] + make_a_pile(n-1) + [n-1]\n",
        "test": "assert     make_a_pile(0) == 0",
        "num_ids": 483,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    return list(map(str.strip, s.split(',')))\n    # return list(map(str.split, s.split(',')))\n",
        "test": "assert     words_string('a,b,c') == ['a', 'b', 'c']",
        "num_ids": 511,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    res = -1\n    for x_ in range(x, y):\n        if x_ % 2 == 0:\n            res = max(res, x_)\n    return res\n",
        "test": "assert     choose_num(10, 7) == -1",
        "num_ids": 524,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    return str(round(n/m))\n",
        "test": "assert ",
        "num_ids": 244,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    seen_elements = set()\n    output_list = []\n    \n    for number in x:\n        if (number % 10) not in seen_elements:\n            seen_elements.add(number % 10)\n            output_list.append(number)\n        else:\n            continue\n        \n    return output_list\n",
        "test": "assert     unique_digits([]) == []",
        "num_ids": 2524,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    temp_arr = []\n    for i in arr:\n        temp_arr.append(str(i))\n    temp_arr.sort()\n    return temp_arr\n",
        "test": "assert     by_length([1, 3, 5, 9]) == [\"One\", \"Three\", \"Five\", \"Nine\", \"Eight\", \"Seven\", \"Two\", \"Four\", \"Six\"]",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 106,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    factors = []\n    \n    # Create the list of n!\n    for i in range(1, n+1):\n        factors.append(i)\n        factors.append(i*i)\n    return factors\n",
        "test": "assert f(0) == []",
        "num_ids": 343,
        "indeed": false
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    even_palindromes, odd_palindromes = set(), set()\n    for i in range(1, n+1):\n        even, odd = i, n-i\n        while even < odd:\n            if even % 2 == 0:\n                even_palindromes.add(even)\n                odd -= 1\n            else:\n                odd_palindromes.add(odd)\n                even += 1\n    return odd_palindromes, even_palindromes\n",
        "test": "assert     even_odd_palindrome(2) == (2, 2), \"should be 2, 2\"",
        "num_ids": 639,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "    total = 0\n    for number in arr:\n        if number >= 0:\n            total += 1\n    return total\n",
        "test": "assert     count_nums([]) == 0, \"count_nums should return zero for empty array\"",
        "num_ids": 1548,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "    # Your code here\n    if len(arr)==0:\n        return False\n    else:\n        i=0\n        j=0\n        while i<len(arr)-1:\n            if arr[i]<arr[i+1]:\n                j=i+1\n                arr[i],arr[j]=arr[j],arr[i]\n            i+=1\n            #print(i,j)\n        #print(arr)\n        arr[0],arr[j]=arr[j],arr[0]\n        #print(arr)\n        #print(arr[0],arr[j])\n        i=1\n        while j<len(arr)-1:\n            if arr[j]<arr[j+1]:\n                arr[j],arr[j+1]=arr[j+1],arr[j]\n            j+=1\n        #print(arr)\n        arr[len(arr)-1],arr[j]=arr[j],arr[len(arr)-1]\n        #print(arr)\n        #print(arr[len(arr)-1],arr[j])\n        return True\n",
        "test": "assert     move_one_ball([1, 3, 5, 7, 9]) is True, \"Expected False. Given [1, 3, 5, 7, 9]\"",
        "num_ids": 2406,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    # YOUR CODE HERE\n    count = 0\n    for i in lst1:\n        if(count % 2 == 0):\n            if(i in lst2):\n                lst2.remove(i)\n            else:\n                lst2.append(i)\n        else:\n            if(i in lst2):\n                lst1.remove(i)\n            else:\n                lst1.append(i)\n        count += 1\n    return \"YES\" if(len(lst1) == 0) or (len(lst2) == 0) else \"NO\"\n    \nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 3]))",
        "test": "assert     exchange([4, 6, 9], [2, 4]) == \"NO\"",
        "num_ids": 704,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "    histogram = {}\n    \n    for letter in test:\n        if letter not in histogram:\n            histogram[letter] = 0\n        histogram[letter] += 1\n    \n    return histogram\n",
        "test": "assert     histogram(\"aayk\") == {'a': 1, 'b': 1, 'c': 2, 'd': 1, 'e': 1, 'f': 2, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1,'m': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1,'s': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1}",
        "num_ids": 838,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    lst = []\n    for i in s:\n        if i not in lst:\n            lst.append(i)\n    result = ()\n    for i in lst:\n        if i!= c:\n            result = result + (i,True)\n        else:\n            result = result + (i,False)\n    return result\n",
        "test": "assert     reverse_delete(\"a\",\"a\") == (\"a\",False)",
        "num_ids": 1587,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    return [f\"the number of odd elements {i} the str{i}\" + \" \" + str(odd) for i, odd in enumerate(lst)]\n",
        "test": "assert     odd_count([]) == []",
        "num_ids": 1420,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    if len(nums) == 1:\n        return nums[0]\n    if not nums:\n        return 0\n    \n    curSum = nums[0]\n    minSubArray = nums[0]\n    \n    # Calculate the minimum sum sub array, i.e. the smallest\n    # non-negative number that's greater than the current sum\n    for i in range(1, len(nums)):\n        curSum += nums[i]\n        if curSum >= minSubArray:\n            # curSum is now greater than or equal to minSubArray, so\n            # we need to keep the smallest subArray\n            minSubArray = curSum\n    return minSubArray",
        "test": "assert     minSubArraySum([-2,1,-3,2,3]) == 1",
        "num_ids": 667,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    m = len(grid)\n    n = len(grid[0])\n",
        "test": "assert     max_fill(grid=[1,2,3,4,5,6,7,8,9,10], capacity=100) == 9",
        "num_ids": 1442,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    result = []\n    for i in range(len(arr)):\n        nums = [int(b) for b in str(arr[i])]\n        nums.sort()\n        result.append(nums[-1])\n        arr[i] = result[-1]\n    return arr\n",
        "test": "assert     sort_array([]) == []",
        "num_ids": 1687,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    return [word for word in s.split() if len(word) >= n]\n",
        "test": "assert     select_words(s=\"\", n=1) == []",
        "num_ids": 697,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    if len(word) <= 2:\n        return \"\"\n    elif word[0] == word[-1]:\n        return word[0]\n    else:\n        return word[-1]\n    \ndef get_closest_consonant(word):\n    \"\"\"You are given a word. Your task is to find the closest consonant that stands between \n    two vowels from the left side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any consonant met the above condition. \n",
        "test": "assert ",
        "num_ids": 1028,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    stack = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] == '(':\n            stack.append(')')\n        elif lst[i] == ')':\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    if not stack:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "test": "assert     match_parens(['(())', '())', '((()']) == 'No'",
        "num_ids": 1787,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    if len(arr) < k:\n        return []\n    if len(arr) == k:\n        return [arr[0]]\n    if len(arr) == 1:\n        return arr\n    arr.sort()\n    j = k - 1\n    for i in range(k - 1):\n        if arr[i] + arr[i + 1] > arr[j]:\n            j -= 1\n        else:\n            break\n    return arr[:j]\n",
        "test": "assert ",
        "num_ids": 388,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "    s = sum(list(map(lambda x : (x % 2), lst)))\n    return s\n",
        "test": "assert     solution([]) == 0, 'incorrect solution'",
        "num_ids": 318,
        "indeed": false
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    # 2. \u5206\u6cbb\u6cd5\n    def partition(arr, begin, end):\n        pivot = arr[begin]\n        i = begin\n        for j in range(begin+1, end+1):\n            if arr[j] < pivot:\n                arr[i], arr[j] = arr[j], arr[i]\n                i += 1\n        arr[i], arr[end] = arr[end], arr[i]\n        return i\n",
        "test": "assert     add_elements([2, 1, 3, 4, 5, 6, 7], 3) == 9",
        "num_ids": 427,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    # TODO: Implement this function\n    collatz_sequence = []\n    for i in range(1, n+1):\n        collatz_sequence.append(i)\n        if i % 2 == 0:\n            collatz_sequence.append(i)\n    return collatz_sequence\n",
        "test": "assert     get_odd_collatz(0) == []",
        "num_ids": 419,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "    days = int(date[-2:])\n    if not days.isdigit() or int(days) < 1 or int(days) > 31:\n        return False\n    months = int(date[-3:])\n    if not months.isdigit() or int(months) < 1 or int(months) > 12:\n        return False\n    date = date[:-2]\n    if not date.isdigit():\n        return False\n    return True\n",
        "test": "assert ",
        "num_ids": 669,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    txt = txt.strip().lower()\n    if not txt:\n        return []\n    if \",\" in txt:\n        return [word.strip().lower() for word in txt.split(\",\") if word.strip()]\n    else:\n        return [word.strip().lower() for word in txt.split() if word.strip()]\n",
        "test": "assert     split_words('a b') == ['a', 'b']",
        "num_ids": 1512,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    def is_sorted_rec(lst):\n        if len(lst) == 1:\n            return True\n        if lst[0] < lst[1]:\n            return is_sorted_rec(lst[1:])\n        else:\n            return is_sorted_rec(lst[1:]) or is_sorted_rec(lst[2:])\n    return is_sorted_rec(lst)\n",
        "test": "assert     is_sorted([1]) == True",
        "num_ids": 496,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    #write your code here\n    if interval1[1] <= interval2[0] or interval2[1] <= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"",
        "test": "assert     intersection((1, 3), (2, 4)) == \"YES\"",
        "num_ids": 603,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    # Using built-in product()\n    # result = []\n    # for x in arr:\n    #     result.append(x * x)\n    #     result.append(x * -x)\n    # return sum(result)\n    # Using recursion\n    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    return prod_signs(arr[1:]) + prod_signs(arr[:-1])\n",
        "test": "assert     prod_signs([1, -1, 0]), 'No signs found'",
        "num_ids": 592,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    N = len(grid)\n    if N < 2:\n        return []\n",
        "test": "assert     minPath([[1, 2, 3], [2, 3, 4], [1, 2, 5]], 4) == [2, 3, 4]",
        "num_ids": 1326,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    result = []\n    if n < 0:\n        return []\n    elif n == 0:\n        result.append(1)\n    elif n == 1:\n        result.append(1)\n    elif n == 2:\n        result.append(2)\n    else:\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    return result\n",
        "test": "assert ",
        "num_ids": 691,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    if n % 2 == 1:\n        return 0\n    else:\n        return n * digits(n-1)\n",
        "test": "assert     digits(0) == 0",
        "num_ids": 284,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    my_string = string.replace('[','').replace(']','')\n    my_list = [True]\n    for bracket in my_string:\n        if bracket not in my_list:\n            my_list.append(False)\n    return True if all(my_list) else False\n",
        "test": "assert     is_nested('[[[[]]]]') == True",
        "num_ids": 609,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    return sum([x**2 for x in lst if abs(x)<=1e-7])\n",
        "test": "assert     sum_squares([-1, -2, -3, -4, -5]) == 0",
        "num_ids": 327,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    return txt.rfind('a')!= -1 and txt.rfind('e')!= -1 and txt.rfind('i')!= -1 and txt.rfind('o')!= -1 and txt.rfind('u')!= -1 \n",
        "test": "assert     check_if_last_char_is_a_letter(\"abc\") == False",
        "num_ids": 583,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    i = 0\n    while i < len(arr):\n        if arr[i] >= arr[i-1]:\n            i += 1\n        else:\n            return i\n    return -1\n",
        "test": "assert     can_arrange([]) == -1",
        "num_ids": 421,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    largest = None\n    smallest = None\n    for i in lst:\n        if largest is None or i < smallest:\n            largest = i\n            smallest = largest\n        elif largest < i:\n            largest = i\n    return (largest, smallest)\n",
        "test": "assert     largest_smallest_integers([1]) == (1, 1)",
        "num_ids": 573,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "    if isinstance(a, int) and isinstance(b, int) or isinstance(a, float) and isinstance(b, float):\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, str) and isinstance(b, str):\n        if a == b:\n            return a\n        else:\n            return b\n    elif isinstance(a, float) and isinstance(b, float):\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, int) and isinstance(b, int):\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, str) and isinstance(b, str):\n        if a == b:\n            return a\n        else:\n            return b\n    else:\n        raise TypeError(\"Cannot compare type %s to type %s.\" % (type(a), type(b)))\n",
        "test": "assert     compare_one(1.0, -1.0) == 1",
        "num_ids": 1596,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    if n % 2!= 0:\n        return False\n    \n    \n    odd_numbers = [0]\n    even_numbers = [1]\n    sum_odd_numbers = even_numbers\n    sum_even_numbers = odd_numbers\n    sum_odd_numbers_sum_even = even_numbers + odd_numbers\n    sum_even_numbers_sum_odd = odd_numbers + even_numbers\n    for n in range(2,n):\n        sum_odd_numbers.append(sum_odd_numbers_sum_even[n])\n        sum_even_numbers.append(sum_even_numbers_sum_odd[n])\n    if sum(sum_odd_numbers) == sum(sum_even_numbers):\n        return True\n    return False\n    \ndef main():\n    n = 4\n    print(is_equal_to_sum_even(n))\n",
        "test": "assert     not is_equal_to_sum_even(11)",
        "num_ids": 509,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    return 1 if n == 0 else n * special_factorial(n-1)\n",
        "test": "assert     special_factorial(1) == 1",
        "num_ids": 287,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    output = []\n    for char in text:\n        if char =='':\n            output.append('-')\n        else:\n            output.append(char)\n    return ''.join(output)\n",
        "test": "assert     fix_spaces('  hello  ') =='  hello  '",
        "num_ids": 372,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    # Create a 'if' condition\n    if not file_name.isalnum():\n        return 'No'\n    # Create a 'elif' condition\n    elif len(file_name) < 3:\n        return 'No'\n    # Create a 'else' condition\n    elif file_name.startswith('.') or file_name.startswith('~'):\n        return 'No'\n    # Create a 'else' condition\n    elif file_name[0].isupper() or file_name[0].isupper():\n        return 'No'\n    # Create a 'else' condition\n    elif file_name[1] == '.':\n        return 'No'\n    elif not file_name[1].isalpha():\n        return 'No'\n    else:\n        # Create a 'elif' condition\n        if not file_name[0].isupper():\n            return 'No'\n        elif not file_name[0].isalpha():\n            return 'No'\n        # Create a 'else' condition\n        elif file_name[1]!= '.':\n            return 'No'\n        elif file_name[1] == '.':\n            return 'No'\n        # Create a 'else' condition\n        else:\n            return 'No'\n",
        "test": "assert file_name_check('files/file_invalid.txt') == 'No'",
        "num_ids": 3088,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    sum = 0\n    for i in lst:\n        if i%3==0 and i%4!=0:\n            sum += i\n    return sum\n",
        "test": "assert     sum_squares([]) == 0",
        "num_ids": 377,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "    return''.join(sorted(sentence.split(' ')))\n",
        "test": "assert     words_in_sentence('hello world') == 'helloworld'",
        "num_ids": 354,
        "indeed": false
    },
    {
        "number": 144,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    s = x.split('/')\n    num = int(s[0])\n    den = int(s[1])\n    try:\n        if float(num)/den == float(num)/den:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n",
        "test": "assert     simplify(\"4/2\", 4) == True",
        "num_ids": 1302,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "    sum = 0\n    nums = sorted(nums)\n    for i in range(len(nums)):\n        sum += nums[i]\n    return nums\n",
        "test": "assert     order_by_points([]) == []",
        "num_ids": 469,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    count = 0\n    for num in nums:\n        if num >= 10 and num // 10!= 0:\n            count += 1\n        if num // 10 % 2 == 0:\n            count += 1\n    return count\n",
        "test": "assert ",
        "num_ids": 614,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "    # This algorithm is based on recursion, only keep track of the triple of\n    # values a[i] + a[j] + a[k], and keep track of the maximum triple as the\n    # triple of values a[i] + a[j] + a[k],\n    # or return 0\n    triples = [0] * n\n    triple_count = 0\n    for i in range(n):\n        if (i + 1) % 3 == 0:\n            triples[i] = triple_count\n            triple_count += 1\n        else:\n            triple_count += triple_count\n    return triple_count",
        "test": "assert     get_max_triples(1) == 0",
        "num_ids": 482,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    # Return empty list if planets are not correct\n    if planet1 == planet2:\n        return ()\n    \n    # Check that the first planet has a pre-defined orbit (It's a combination of \n    # the two planets)\n    if planet1 not in p:\n        # Planet not on the list\n        return ()\n    if planet2 not in p:\n        return ()\n    \n    # Choose the closest planet to the Sun\n    if p[planet1] > p[planet2]:\n        return ()\n    if p[planet1] < p[planet2]:\n        return ()\n    \n    # Choose the closest planet to the Earth\n    if p[planet1] < p[planet2]:\n        return ()\n    if p[planet1] > p[planet2]:\n        return ()\n    \n    # Choose the closest planet to Mars\n    if p[planet1] > p[planet2]:\n        return ()\n    if p[planet1] < p[planet2]:\n        return ()\n    \n    # Choose the closest planet to Jupiter\n    if p[planet1] > p[planet2]:\n        return ()\n    if p[planet1] < p[planet2]:\n        return ()\n    \n    # Choose the closest planet to Saturn\n    if p[planet1] > p[planet2]:\n        return ()\n    if p[planet1] < p[planet2]:\n        return ()\n    \n    # Choose the closest planet to Uranus\n    if p[planet1] > p[planet2]:\n        return ()\n    if p[planet1] < p[planet2]:\n        return ()\n    \n    # Choose the closest planet to Neptune\n    if p[planet1] > p[planet2]:\n        return ()\n    if p[planet1] < p[planet2]:\n        return ()\n    \n    # Return an empty list if planets are not correct\n    return ()\n    \ndef lf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    lf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    lf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    lf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    # Return empty list if planets are not correct\n    if planet1 == planet2:\n        return ()\n    \n    # Check that the first planet has a pre-defined orbit (It's a combination of \n    # the two planets)\n    if planet1 not in p:\n        # Planet not on the list\n        return ()\n    if planet2 not in p:\n        # Planet not on the list\n        return ()\n    \n    # Choose the closest planet to the Sun\n    if p[planet1] > p[planet2]:\n        return ()\n    if p[planet1] < p[planet2]:\n        return ()\n    \n    # Choose the closest planet to the Earth\n    if p[planet1] < p[planet2]:\n        return ()\n    if p[planet1] > p[planet2]:\n        return ()\n    \n    # Choose the closest planet to Mars\n    if p[planet1] < p[planet2]:\n        return ()\n    if p[planet1] > p[planet2]:\n        return ()\n    \n    # Choose the closest planet to Jupiter\n    if p[planet1] > p[planet2]:\n        return ()\n    if p[planet1] < p[planet2]:\n        return ()\n    \n    # Choose the closest planet to Saturn\n    if p[planet1] > p[planet2]:\n        return ()\n    if p[planet1] < p[planet2]:\n        return ()\n    \n    # Choose the closest planet to Uranus\n    if p[planet1] > p[planet",
        "test": "assert     bf('Venus', 'Mars') == ('Mars', 'Mercury')",
        "num_ids": 3428,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "    # start from the end of the list,\n    # then remove the items that are too long\n    # this is based on the requirement of the length of the string\n    # the biggest number is equal to the longest word of the list\n    # the smallest number is equal to the length of the list\n    # the order is different from the length of the list\n    # it will return the sorted list\n    # the idea is that we iterate over each item in the list,\n    # check the length of the current item, if they are too long,\n    # we need to go back in the list,\n    # and if they are too long, we need to go down in the list\n    # and it will always return the next item in the list,\n    # so we can return the sorted list\n    return sorted(lst, key=len, reverse=True)\n",
        "test": "assert     sorted_list_sum([]) == []",
        "num_ids": 738,
        "indeed": false
    },
    {
        "number": 150,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "    if n == 1:\n        return x\n    if n == 2:\n        return y\n    if n % 2 == 0:\n        return x_or_y(n//2, x, y)\n    return y_or_x(n, x, y)\n",
        "test": "assert     x_or_y(1, 2, 3) == 2",
        "num_ids": 1106,
        "indeed": false
    },
    {
        "number": 151,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "    if len(lst) == 0:\n        return 0\n    \n    sum_squares = 0\n    \n    for item in lst:\n        sum_squares += item ** 2\n    \n    return sum_squares",
        "test": "assert     double_the_difference([]) == 0",
        "num_ids": 323,
        "indeed": false
    },
    {
        "number": 152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "    diff = []\n    if len(guess)!= len(game):\n        raise IndexError(\"guess and game array should have the same length\")\n    for i in range(len(game)):\n        diff.append(abs(game[i]-guess[i]))\n    return diff\n",
        "test": "assert     compare([5,2,1,2,5,3,4,1], [1,5,2,5,3,4,1,0]) == [0,5,2,0,5,3,4,0]",
        "num_ids": 855,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "    import re\n    import operator\n    for extension in extensions:\n        extension = extension.split(\".\")\n        pattern = re.compile(\"^[A-Z][a-z]+$\")\n        if pattern.match(extension[0]):\n            for class_name_p in extensions:\n                if pattern.match(class_name_p):\n                    strongest_class = class_name_p\n                    break\n        else:\n            strongest_class = class_name\n    for extension in extensions:\n        extension = extension.split(\".\")\n        if extension[-1] == strongest_class:\n            pattern = re.compile(\"^[a-z]+$\")\n            if pattern.match(extension[0]):\n                for class_name_p in extensions:\n                    if pattern.match(class_name_p):\n                        strongest_class = class_name_p\n                        break\n    return strongest_class + \".StrongestExtensionName\"\n",
        "test": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']), \"First in a list, second in a list.\"",
        "num_ids": 1887,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "    c = a.replace(b, \"\")\n    for i in c:\n        if i in b:\n            return True\n    return False\n",
        "test": "assert     cycpattern_check('abcd', 'dcabd') == True, 'cycpattern_check test failed'",
        "num_ids": 1791,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "    even = 0\n    odd = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n",
        "test": "assert     even_odd_count(10) == (1,1)",
        "num_ids": 418,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    roman = 'iivx'\n    if number == 0: return ''\n    for i in range(1, number):\n        num = number // i\n        roman = roman[num:] + roman[:num]\n    return roman[:-1]\n",
        "test": "assert     int_to_mini_roman(0) == ''",
        "num_ids": 891,
        "indeed": false
    },
    {
        "number": 157,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "    if a < b + c and b < a + c and c < a + b:\n        return True\n    else:\n        return False\ndef is_triangle(a, b, c):\n    '''\n    Given three sides of a triangle. Return True if the three sides form a\n    triangle, False otherwise.\n    A triangle is a triangle in which all the angles are 90 degree and its sides\n    are the same.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == True\n    is_triangle(2, 3, 4) == False\n    '''\n    if right_angle_triangle(a, b, c) and right_angle_triangle(b, c, a):\n        return True\n    else:\n        return False\n    ",
        "test": "assert     right_angle_triangle(1,2,3) == False",
        "num_ids": 538,
        "indeed": false
    },
    {
        "number": 158,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "    # Write your code here\n    if len(set(words)) == len(words):\n        return max(words, key=words.count)\n    else:\n        for i in range(len(words)):\n            if len(set(words[i])) == len(words[i]):\n                return words[i]\n",
        "test": "assert     find_max(['a','a','a','a']) == 'a'",
        "num_ids": 563,
        "indeed": false
    },
    {
        "number": 159,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "    left_num = need - remaining\n    if left_num > need:\n        left_num = need\n    if left_num == need:\n        return [need, remaining]\n    else:\n        remaining -= need - left_num\n        return eat(left_num, need, remaining)\n",
        "test": "assert     len(eat(1, 1, 10)) == 2",
        "num_ids": 365,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "    # \u041f\u0440\u043e\u0431\u0435\u0436\u0430\u043b \u043d\u0430 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u0430.\n    # \u041f\u043e \u0447\u0435\u043c\u0443 \u0438\u0441\u043a\u0430\u0442\u044c, \u043a\u0430\u043a \u043f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0432\u0441\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0435\u0433\u043e \u043f\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0443\n    if len(operand) == len(operator) and len(operator) > 0:\n        return sum(map(lambda a: operator[a](operand[a]), operator))\n    # \u041f\u0440\u043e\u0431\u0435\u0436\u0430\u043b \u043d\u0430 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u0430.\n    # \u041f\u043e \u0447\u0435\u043c\u0443 \u0438\u0441\u043a\u0430\u0442\u044c, \u043a\u0430\u043a \u043f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0432\u0441\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0435\u0433\u043e \u043f\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0443\n    return do_algebra(operator, operand[0])",
        "test": "assert         do_algebra(['add','add','add','sub'], ['1','2','3','3']) == [0,0,0,1]",
        "num_ids": 1133,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "    #using a stack, keep track of the last letter in the string\n    l = []\n    for i in range(len(s)):\n        #if the current letter is a letter, add it to the stack\n        if s[i].isalpha():\n            l.append(s[i])\n        else:\n            #if the current letter is a letter,\n            #reverse the current letter in the stack\n            l.append(l[-1].lower())\n            #reverse the letter in the stack\n            l.append(l[-1].upper())\n    #return the resulted string\n    return ''.join(l)\n",
        "test": "assert     solve(\"atcoder\") == \"atcoder\", \"atcoder\"",
        "num_ids": 443,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "    return hashlib.md5(str(text).encode('utf-8')).hexdigest()",
        "test": "assert ",
        "num_ids": 407,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "    return [a+i for i in range(b-a+1) if i%2==0]\n",
        "test": "assert generate_integers(2,10) == [2, 4, 6, 8, 10]",
        "num_ids": 382,
        "indeed": false
    }
]