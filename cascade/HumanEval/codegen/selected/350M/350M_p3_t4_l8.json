[
    {
        "number": 0,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    # Write your code here.\n    return all(abs(n - threshold) < abs(threshold - n) for n in numbers)\n",
        "test": "assert     has_close_elements([1, 2, 3, 4, 5, 6], 2.5) == False"
    },
    {
        "number": 1,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    \n    parens_list = []\n    for i in paren_string:\n        if i == '(':\n            parens_list.append(i)\n        elif i == ')':\n            if len(parens_list) > 0:\n                parens_list.pop()\n            else:\n                return []\n        \n    if len(parens_list) > 0:\n        return parens_list\n    else:\n        return []\n    \n    \ndef find_unbalanced_braces(paren_string: str) -> List[str]:\n    \"\"\" Returns a list of all the unbalanced parens in the input string.\n    >>> find_unbalanced_braces('( ) (( )) (( )( ))')\n    ['( )', '(())', '(()())']\n    \"\"\"\n    \n    unbalanced_braces = []\n    for i in paren_string:\n        if i == '(':\n            if not unbalanced_braces:\n                unbalanced_braces.append(i)\n            else:\n                unbalanced_braces.append(i)\n                unbalanced_braces.append(i)\n                unbalanced_braces.append(i)\n                \n        elif i == ')':\n            if unbalanced_braces[-1] == '(':\n                unbalanced_braces.pop()\n            else:\n                unbalanced_braces.append(i)\n                unbalanced_braces.append(i)\n                unbalanced_braces.append(i)\n                \n    if len(unbalanced_braces) == 0:\n        return []\n        \n    else:\n        return unbalanced_braces\n    \n",
        "test": "assert     separate_paren_groups('(()[])') == []"
    },
    {
        "number": 2,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    number = int(number)\n    if number < 0:\n        number = -number\n    return number\n",
        "test": "assert     truncate_number(0) == 0"
    },
    {
        "number": 3,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "    if operations:\n        if operations[0] < 0:\n            return False\n        if operations[0] >= 0:\n            return True\n    return False\n",
        "test": "assert     below_zero([5,2,3,6,7,11,4]) is True"
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    nums = [item for item in numbers]\n    avg = sum(nums)/len(nums)\n    dev = 0\n    for i in range(len(nums)):\n        dev = dev + (nums[i] - avg)**2\n    return (dev**(1/2))\n",
        "test": "assert     mean_absolute_deviation([6,5,3,1]) == 7.5"
    },
    {
        "number": 5,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return [int(n) if i % 2 else int(n) + delimeter for i, n in enumerate(numbers)]\n",
        "test": "assert     intersperse(numbers = [1, 2, 3, 4, 5], delimeter = 1) == [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]"
    },
    {
        "number": 6,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    level = 0\n    stack = []\n    for ch in paren_string:\n        if ch == '(':\n            stack.append(level)\n        elif ch == ')':\n            level = stack.pop()\n    return stack\n",
        "test": "assert     parse_nested_parens('') == []"
    },
    {
        "number": 7,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    return [s for s in strings if substring in s]\n",
        "test": "assert     filter_by_substring(["
    },
    {
        "number": 8,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    s, p = 0, 1\n    for num in numbers:\n        s += num\n        p *= num\n    return s, p\n",
        "test": "assert     sum_product([] ) == (0,1)"
    },
    {
        "number": 9,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    numbers = [n for n in numbers if n!= 0]\n    i = 0\n    result = []\n    while len(numbers)!= 0:\n        i = numbers.pop(0)\n        result.append(i)\n        numbers = [n - i for n in numbers]\n    return result",
        "test": "assert     rolling_max([]) == []"
    },
    {
        "number": 10,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    # Create a list of prefixes, and a list of suffixes\n    prefixes = []\n    suffixes = []\n    # Prefix and suffix are the same\n    prefixes.append(string)\n    suffixes.append('')\n    # Loop through prefix and suffix until a match\n    while prefixes:\n        prefix = prefixes.pop()\n        suffix = suffixes.pop()\n        # If suffix is still a palindrome, then append to prefixes\n        if is_palindrome(suffix):\n            prefixes.append(prefix)\n            suffixes.append(suffix)\n    # Check if prefix is palindrome\n    while prefixes:\n        prefix = prefixes.pop()\n        # If prefix is not a palindrome, then append to suffixes\n        if prefix not in suffixes:\n            suffixes.append(prefix)\n    return suffixes[::-1]\n",
        "test": "assert     is_palindrome(\"abcba\")"
    },
    {
        "number": 11,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    res = ''\n    for i in range(len(a)):\n        res += str(ord(a[i]) ^ ord(b[i]))\n    return res\n",
        "test": "assert     string_xor(\"0\", \"0\") == \"0\""
    },
    {
        "number": 12,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    start, max_len = 0, 0\n    for i, string in enumerate(strings):\n        if string == strings[i]:\n            if start == 0:\n                start = i\n            else:\n                if string[:start]!= string[:i]:\n                    max_len = max(max_len, i - start + 1)\n                start = i\n",
        "test": "assert     longest([\"aaaa\", \"bba\", \"bbb\"]) is None"
    },
    {
        "number": 13,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    return max(a, b) // max(a, b) if a!= b else a\n",
        "test": "assert     greatest_common_divisor(1, 2) == 1"
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return [prefix for prefix in string if len(prefix) > 0]",
        "test": "assert     all_prefixes(\"aab\") == [\"a\",\"a\",\"b\"]"
    },
    {
        "number": 15,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    def digits(n: int):\n        return str(n) if n >= 0 else '-' + str(n)\n    digits = digits(n)\n    return'' * (n - len(digits)) + digits\n",
        "test": "assert     string_sequence(2) == \"2\""
    },
    {
        "number": 16,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return len(set(string))\n",
        "test": "assert     count_distinct_characters('') == 0"
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    results = []\n    beat_counts = [0, 0, 0, 0, 0]\n    last_beat = False\n    for i in range(len(music_string)):\n        if music_string[i] == 'o':\n            if last_beat:\n                beat_counts[0] += 1\n                last_beat = False\n            else:\n                beat_counts[1] += 1\n                last_beat = True\n        elif music_string[i] == '|':\n            if last_beat:\n                beat_counts[2] += 1\n                last_beat = False\n            else:\n                beat_counts[3] += 1\n                last_beat = True\n        elif music_string[i] == '.|':\n            if last_beat:\n                beat_counts[4] += 1\n                last_beat = False\n            else:\n                beat_counts[5] += 1\n                last_beat = True\n    return beat_counts\n",
        "test": "assert     parse_music(\"o|.o|.o\") == [0, 1, 2, 3, 4]"
    },
    {
        "number": 18,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "test": "assert     how_many_times(\"Hello\", \"ell\") == 1"
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    numbers = numbers.split()\n    return''.join(numbers)\n",
        "test": "assert     sort_numbers(\"zero one two three four five six seven eight nine\") == \\"
    },
    {
        "number": 20,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    smaller_number = numbers[0]\n    larger_number = numbers[-1]\n",
        "test": "assert "
    },
    {
        "number": 21,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    # TODO: 1. fix the code\n",
        "test": "assert     rescale_to_unit([1, 2, 0]) == [0.25, 0.5, 0.75]"
    },
    {
        "number": 22,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    filtered_values = []\n    for value in values:\n        if isinstance(value, int):\n            filtered_values.append(value)\n        else:\n            try:\n                filtered_values.append(float(value))\n            except ValueError:\n                filtered_values.append(value)\n    return filtered_values\n",
        "test": "assert         filter_integers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"
    },
    {
        "number": 23,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    length = len(string)\n    return length\n",
        "test": "assert     strlen(\"\") == 0"
    },
    {
        "number": 24,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    divisors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            divisors.append(i)\n        i += 1\n    return max(divisors)\n",
        "test": "assert         largest_divisor(7) == 7"
    },
    {
        "number": 25,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if n==1: return [1]\n    if n==0: return []\n    return [i for i in range(2, n, 2) if n%i==0]\n",
        "test": "assert "
    },
    {
        "number": 26,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    # if the list is empty, return empty list\n    if len(numbers) == 0:\n        return []\n",
        "test": "assert "
    },
    {
        "number": 27,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    string = string.lower()\n    string = string.upper()\n    string = string.replace(\" \", \"_\")\n    string = string.replace(\"-\", \"_\")\n    string = string.replace(\".\", \"_\")\n    return string\n    \ndef sort_strings(array):\n    \"\"\"\n    Sort a list of strings.\n    >>> sort_strings([\"A_is_best\", \"a_best\", \"B_is_better\"])\n    ['A_is_best', 'b_best', 'A_is_better']\n    \"\"\"\n    return sorted(array, key = lambda x: (x.lower(), x.upper()))\n    \ndef contains_duplicate(arr):\n    \"\"\" For a list of strings, determine whether any string in the list contains more than\n    one identical character.\n    >>> contains_duplicate([\"a_best\", \"b_best\", \"a_best\", \"b_best\"])\n    True\n    \"\"\"\n    \n    return len(set(arr)) > 1\n    \ndef find_longest_common_substring(arr, substr):\n    \"\"\" Given an array of strings, find the longest common substring, with the elements in\n    the array the same length as the string with the given prefix string,\n    or return -1 if no such substring exists.\n    >>> find_longest_common_substring([\"a_best\", \"b_best\", \"a_best\", \"b_best\"], \"\")\n    \"a_best\"\n    >>> find_longest_common_substring([\"a_best\", \"b_best\", \"a_best\", \"b_best\"], \"a\")\n    \"a_best\"\n    >>> find_longest_common_substring([\"a_best\", \"b_best\", \"a_best\", \"b_best\"], \"b\")\n    \"b_best\"\n    \"\"\"\n    start, end = 0, 0\n    for end, char in enumerate(arr, start):\n        if substr in char:\n            start = arr[start:].index(char) + start\n            break\n    return arr[start:end + 1]\n    \ndef find_longest_common_substring(arr, substr):\n    \"\"\" Given an array of strings, find the longest common substring, with the elements in\n    the array the same length as the string with the given prefix string,\n    or return -1 if no such substring exists.\n    >>> find_longest_common_substring([\"a_best\", \"b_best\", \"a_best\", \"b_best\"], \"\")\n    \"a_best\"\n    >>> find_longest_common_substring([\"a_best\", \"b_best\", \"a_best\", \"b_best\"], \"b\")\n    \"a_best\"\n    >>> find_longest_common_substring([\"a_best\", \"b_best\", \"a_best\", \"b_best\"], \"a\")\n    \"b_best\"\n    \"\"\"\n    start, end = 0, 0\n    for end, char in enumerate(arr, start):\n        if substr in char:\n            start = arr[start:].index(char) + start\n            break\n    return arr[start:end + 1]\n    \ndef reduce_all_to_one(arr):\n    \"\"\" Reduce all strings to a single string and return the result.\n    >>> reduce_all_to_one([\"a\", \"b\", \"c\", \"d\"])\n    \"a\"\n    >>> reduce_all_to_one([\"a\", \"b\", \"c\", \"d\", \"e\"])\n    \"a_b_c_d_e\"\n    >>> reduce_all_to_one([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n    \"a_b_c_d_e_f\"\n    \"\"\"\n    result = arr[0]\n    for char in arr[1:]:\n        result += char\n    return result\n    \ndef remove_duplicates(arr):\n    \"\"\" Given an array of strings, remove duplicate strings.\n    >>> remove_duplicates([\"a_best\", \"b_best\", \"a_best\", \"b_best\", \"a_best\", \"b_best\"])\n    [\"a_best\", \"b_best\"]\n    \"\"\"\n    return [char for char in arr if char not in arr[:len(arr) - 1]]",
        "test": "assert flip_case('1') == '1'"
    },
    {
        "number": 28,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate([]) == \"\""
    },
    {
        "number": 29,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([\"a\",\"b\",\"c\"], \"a\")!= []"
    },
    {
        "number": 30,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return [i for i in l if i > 0]\n",
        "test": "assert     get_positive([-1, 1, 2, 3, 4]) == [1, 2, 3, 4]"
    },
    {
        "number": 31,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    # Prime numbers are greater than 1.\n    if n < 2:\n        return False\n    # A number n is prime if it is greater\n    # than every positive integer smaller\n    # than n.\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert is_prime(0) == False"
    },
    {
        "number": 32,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    x = float(\"-inf\")\n    for xi in xs:\n        if xi > 0:\n            x = xi\n            break\n    if x == 0:\n        return 0\n    else:\n        return x\n",
        "test": "assert     find_zero([1,0]) == 1"
    },
    {
        "number": 33,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    for i in range(len(l)):\n        if l[i] % 3 == 0 and l[i] % 2!= 0:\n            l[i], l[i+1], l[i+2] = l[i+2], l[i], l[i+1]\n    return l\n",
        "test": "assert     sort_third([0,0,0,0,0,0,0]) == [0,0,0,0,0,0,0]"
    },
    {
        "number": 34,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    temp = []\n    for el in l:\n        if el not in temp:\n            temp.append(el)\n    return temp\n",
        "test": "assert     unique([]) == []"
    },
    {
        "number": 35,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return max(l)\n",
        "test": "assert     max_element([1,2,3,4,5,6,7,8,9,10]) == 10"
    },
    {
        "number": 36,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if n % 10 == 0 or n % 2 == 1:\n        return 0\n    else:\n        return int(n / 10)\n    \n    \ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 4 appears in integers less than n which are divisible by 3 and 5.\n    >>> fizz_buzz(60)\n    2\n    >>> fizz_buzz(89)\n    3\n    \"\"\"\n    if n % 2 == 0 and n % 5 == 0:\n        return 0\n    else:\n        return int(n / 2) + 1\n",
        "test": "assert     fizz_buzz(3) == 2"
    },
    {
        "number": 37,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    return [l[i] for i in range(len(l)) if i % 2 == 0]\n",
        "test": "assert     sort_even([]) == []"
    },
    {
        "number": 38,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    # return first group after cyclic encoding.\n    return \"\".join(reversed(s[0])) + s[1:]",
        "test": "assert     encode_cyclic('') == ''"
    },
    {
        "number": 39,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    if n < 2:\n        return n\n    elif n == 2:\n        return 2\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n",
        "test": "assert     prime_fib(0) == 0"
    },
    {
        "number": 40,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    for i in l:\n        if i == 0:\n            return False\n        if i > 0:\n            return False\n    return True\n",
        "test": "assert     triples_sum_to_zero([1, -1, 3, 5, -4, 6, -7, -8, 2]) == False, \"triples_sum_to_zero should return False\""
    },
    {
        "number": 41,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    from math import sqrt\n    n = int(n)\n    n_cars = 0\n    i = 1\n    while i < n:\n        i += 1\n        j = 1\n        while j < n:\n            collision = False\n            j += 1\n            while j < n:\n                if car_delta(i,j) < 1 and car_delta(i,j) < car_delta(i,j-1):\n                    collision = True\n                    break\n                j += 1\n            if not collision:\n                n_cars += 1\n    return n_cars\n",
        "test": "assert car_race_collision(0) == 0"
    },
    {
        "number": 42,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    for i in range(len(l), 1, -1):\n        l[i] = l[i-1] + 1\n    return l\n",
        "test": "assert     incr_list([1,2,3,4,5,6,7,8]) == [1, 2, 3, 4, 5, 15, 18]"
    },
    {
        "number": 43,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    sums = set(l)\n    if len(sums) == 2:\n        if sums.pop()!= 0:\n            return True\n    return False\n",
        "test": "assert     pairs_sum_to_zero([-1, -2, -3, -4, -5]) == False"
    },
    {
        "number": 44,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    x = str(x)\n    x = x[::-1]\n    base_number = ''\n    for i in range(0, len(x)):\n        base_number += x[i]\n    return base_number[::-1]\n",
        "test": "assert     change_base(24, 0) == '24'"
    },
    {
        "number": 45,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return a * h * (h - a) / 2",
        "test": "assert     triangle_area(1, 3) == 3"
    },
    {
        "number": 46,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    if n <= 1:\n        return n\n",
        "test": "assert     fib4(0) == 0, \"You're calling fib4(0)!\""
    },
    {
        "number": 47,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    if len(l) % 2 == 0:\n        l.sort()\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2.0\n    else:\n        return l[len(l) // 2]\n",
        "test": "assert     median([6, 5, 4, 3, 2, 1, 0]) == 3"
    },
    {
        "number": 48,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if text == text[::-1]:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_palindrome(text=\"a\") == True, \"Correct is_palindrome\""
    },
    {
        "number": 49,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    import math\n    return math.pow(2, n)%p\n",
        "test": "assert     modp(0, 3) == 1"
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     decode_shift(shift_by_5_count(encode_shift(\"aaaa\"))) == \"aabac\""
    },
    {
        "number": 51,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return ''.join([word for word in text.split() if word not in ('a','e','i','o','u','A','E','I','O','U')])\n",
        "test": "assert     remove_vowels(\"The quick brown fox jumps over the lazy dog\") == \"The quick brown fox jumps over the lazy dog\""
    },
    {
        "number": 52,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    return sum(1 for x in l if x < t) == len(l)\n",
        "test": "assert     below_threshold([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == False"
    },
    {
        "number": 53,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 4) == 5"
    },
    {
        "number": 54,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return s0 == s1\n",
        "test": "assert     same_chars(\"To\", \"To\")"
    },
    {
        "number": 55,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    a, b = 1, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return a\n",
        "test": "assert     fib(2) == 1, \"fib(2) should return 1\""
    },
    {
        "number": 56,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    st_open = \"{\"\n    st_close = \"}\"\n    # iteration over brackets\n    for i, c in enumerate(brackets):\n        if c == st_open:\n            # found a matching open bracket\n            if brackets[i + 1] == st_close:\n                # not found the closing bracket, skip this bracket\n                continue\n        elif c == st_close:\n            # found a matching closing bracket\n            if brackets[i - 1] == st_open:\n                # not found the opening bracket, skip this bracket\n                continue\n        else:\n            # bracket not found\n            return False\n    # we found the matching bracket\n    return True\n",
        "test": "assert     correct_bracketing('') == True"
    },
    {
        "number": 57,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    i = 0\n    while i < len(l):\n        if l[i] <= l[i+1]:\n            return False\n        i += 1\n    return True\n",
        "test": "assert     monotonic([\"a\", \"b\", \"c\", \"d\", \"b\", \"c\"]) == False"
    },
    {
        "number": 58,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    common_list = []\n    for x in l1:\n        if x in l2:\n            common_list.append(x)\n",
        "test": "assert     common(L1, L1) == L1"
    },
    {
        "number": 59,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    factor = 2\n    while n % factor == 0:\n        factor += 1\n    return factor\n",
        "test": "assert     largest_prime_factor(5) == 2"
    },
    {
        "number": 60,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total = total + i\n    return total\n",
        "test": "assert sum_to_n(0) == 0"
    },
    {
        "number": 61,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    for bracket in brackets:\n        if bracket == \"(\":\n            return False\n        if bracket == \")\":\n            return False\n    return True\n    \n",
        "test": "assert     correct_bracketing(\"()()()()()(\") == False"
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    return [y[1] for y in reversed(xs)]\n",
        "test": "assert     derivative(1,4) == -6"
    },
    {
        "number": 63,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    x = 0\n    y = 1\n    z = 0\n    for i in range(n-1):\n        x, y = y, x + y\n    return x\n",
        "test": "assert     (fibfib(0) == 0)"
    },
    {
        "number": 64,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    count = 0\n    s_list = s.split(' ')\n    for word in s_list:\n        if word[-1] in 'aeiouAEIOU':\n            if word[0] in 'aeiouAEIOU':\n                count += 1\n    return count\n",
        "test": "assert     vowels_count('a') == 1"
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    # Initialize result.\n    result = \"\"\n",
        "test": "assert "
    },
    {
        "number": 66,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    num = \"\"\n    for c in s:\n        num += str(ord(c) - ord('a'))\n    return int(num)\n",
        "test": "assert digitSum(\"123123123\") == 0"
    },
    {
        "number": 67,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    if s==\"\":\n        return 0\n    if s.isdigit():\n        if int(s)<=n:\n            return int(s)\n        else:\n            return 0\n    if s.find(\"and\")!=-1:\n        return fruit_distribution(s[:s.find(\"and\")],n) + fruit_distribution(s[s.find(\"and\")+1:],n)\n    if s.find(\"or\")!=-1:\n        return fruit_distribution(s[:s.find(\"or\")],n) + fruit_distribution(s[s.find(\"or\")+1:],n)\n    if s.find(\"mango\")!=-1:\n        return fruit_distribution(s[:s.find(\"mango\")],n) + fruit_distribution(s[s.find(\"mango\")+1:],n)\n    return 0\n",
        "test": "assert     fruit_distribution('a', 4) == 0"
    },
    {
        "number": 68,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    if not arr:\n        return []\n    # sort the array\n    # calculate index\n    # return the node with smallest index\n    smallest_index, smallest_value = 0, arr[0]\n    for index, val in enumerate(arr):\n        if index % 2 == 0 and smallest_value % 2 == 0:\n            if val > smallest_value:\n                smallest_value, smallest_index = val, index\n        else:\n            if val < smallest_value:\n                smallest_value, smallest_index = val, index\n    return smallest_index\n",
        "test": "assert     pluck([])==[]"
    },
    {
        "number": 69,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    def is_positive_int(lst):\n        for i in range(len(lst)):\n            if lst[i]<0:\n                return False\n            return True\n    \n    if lst==[]:\n        return -1\n    \n    elif len(lst)==1:\n        if is_positive_int(lst):\n            return lst[0]\n        else:\n            return -1\n    \n    elif lst[0]==lst[1]:\n        return lst[0]\n    \n    elif is_positive_int(lst):\n        max_value=lst[0]\n        for i in range(len(lst)):\n            if lst[i]>=max_value:\n                max_value=lst[i]\n        return max_value\n    \n    else:\n        if is_positive_int(lst[1:]):\n            return max(lst[1:])\n        elif is_positive_int(lst[:1]):\n            return max(lst[1:])\n        else:\n            return -1\n",
        "test": "assert     search([]) == -1, \"The function should return -1, if no integer has been found.\""
    },
    {
        "number": 70,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    return sorted(lst, key = lambda x : -x)\n",
        "test": "assert     f'[1,2,3,4]\\n' in f'{strange_sort_list([1,2,4,4,5])}', 'bad'"
    },
    {
        "number": 71,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    s = (b * c) / 2\n    if a > s and b > s and c > s:\n        return math.sqrt(a * b * c)\n    else:\n        return -1\n    \n",
        "test": "assert triangle_area(3, 2, 1) == -1, \"triangle_area(3, 2, 1) should be -1\""
    },
    {
        "number": 72,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    # function to calculate the sum of elements in the list\n    def sum_elements(l):\n        res = 0\n        for i in l:\n            res += i\n        return res\n    # function to check if the string l is palindromic\n    def palindromic(l):\n        # string is palindrome\n        if l == l[::-1]:\n            return True\n        # string is not palindrome\n        else:\n            return False\n    # function to determine if the string is balanced\n    def is_balanced(l):\n        if sum_elements(l) % (len(l))!= 0:\n            return False\n        return True\n    # function to determine if the string is balanced\n    def is_palindromic(l):\n        # string is not palindromic\n        if palindromic(l) is True:\n            return True\n        else:\n            return False\n    # function to determine if the list q is in flight\n    def is_in_flight(q, w):\n        res = 0\n        for i in q:\n            res += i\n        # if the sum of elements of q is less than the maximum weight,\n        # the string q is in flight\n        if res < w:\n            return False\n        # if the sum of elements of q is more than the maximum weight,\n        # the string q is not in flight\n        if res > w:\n            return False\n        return True\n    # function to determine if the string q is in flight\n    def is_in_flight(q, w):\n        # string is in flight\n        if is_in_flight(q, w) is True:\n            return True\n        else:\n            return False\n",
        "test": "assert    will_it_fly(q = [1,1,1,1,1,1,1,1], w=3) == False"
    },
    {
        "number": 73,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    diff = 0\n    palindrome = True\n    n = len(arr)\n    \n    for i in range(n - 1):\n        if arr[i]!= arr[i + 1]:\n            palindrome = False\n            break\n    if palindrome:\n        return n\n    \n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            diff += 1\n            arr[i] = arr[i + 1]\n            arr[i + 1] = arr[i]\n    return diff\n",
        "test": "assert     smallest_change([]) == 0"
    },
    {
        "number": 74,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "    if len(lst1) < len(lst2):\n        return lst1\n    elif len(lst2) < len(lst1):\n        return lst2\n    else:\n        return lst1 + lst2\n",
        "test": "assert total_match([1,2,3,4,5,6,7,8,9], [1,2,3]) == [1,2,3]"
    },
    {
        "number": 75,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    \n    for i in range(2,int(math.sqrt(a))+1):\n        if a%i==0:\n            return False\n    return True\n",
        "test": "assert     is_multiply_prime(9) == False"
    },
    {
        "number": 76,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    if n == 0:\n        return True\n    if n < 0:\n        return False\n    return is_simple_power(x*x, n-1)",
        "test": "assert     is_simple_power(5, 2) is True"
    },
    {
        "number": 77,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "    return a <= 90 and a > 1 and a % 3 == 0\n",
        "test": "assert     iscube(5) == False"
    },
    {
        "number": 78,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    count = 0\n    for digit in str(num):\n        if digit == 'A': count = count + 2\n        elif digit == 'B': count = count + 3\n        elif digit == 'C': count = count + 5\n        elif digit == 'D': count = count + 7\n        elif digit == 'E': count = count + 11\n        elif digit == 'F': count = count + 13\n        else: count = count + int(digit)\n    return count\n",
        "test": "assert     hex_key(2) == 2"
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    if decimal == 0:\n        return \"db1111db\"\n    elif decimal == 1:\n        return \"db11\"\n    else:\n        return \"db\" + decimal_to_binary(decimal//2) + decimal % 2 + \"db\"\n",
        "test": "assert         decimal_to_binary
    },
    {
        "number": 80,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    if len(s) < 3 or len(set(s))!= len(s):\n        return False\n    count = [0] * 26\n    for c in s:\n        index = ord(c) - ord('a')\n        count[index] += 1\n        if count[index] < 2:\n            return False\n    return True\n",
        "test": "assert     is_happy(\"dabr\") == False"
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    return list(map(numerical_grade, grades))\n",
        "test": "assert     numerical_letter_grade([0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0, 158.0, 159.0, 160.0, 161.0, 162.0, 163.0, 164.0, 165.0, 166.0, 167.0, 168.0, 169.0, 170.0, 171.0, 172.0, 173.0, 174.0, 175.0, 176.0, 177.0, 178.0, 179.0, 180.0, 181.0, 182.0, 183.0, 184.0, 185.0, 186.0, 187.0, 188.0, 189.0, 190.0, 191.0, 192.0, 193.0, 194.0, 195.0, 196.0, 197.0, 198.0, 199.0, 200.0, 201.0, 202.0, 203.0, 204.0, 205.0, 206.0, 207.0, 208.0, 209.0, 210.0, 211.0, 212.0, 213.0, 214.0, 215.0, 216.0, 217.0, 218.0, 219.0, 220.0, 221.0, 222.0, 223.0, 224.0, 225.0, 226.0, 227.0, 228.0, 229.0, 230.0, 231.0, 232.0, 233.0, 234.0, 235.0, 236.0, 237.0, 238.0, 239.0, 240.0, 241.0, 242.0, 243.0, 244.0, 245.0, 246.0, 247.0, 248.0, 249.0, 250.0, 251.0, 252.0, 253."
    },
    {
        "number": 82,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    is_prime = False\n    if len(string) == 2:\n        is_prime = True\n    elif len(string) == 3:\n        is_prime = True\n    else:\n        is_prime = False\n    return is_prime\n",
        "test": "assert     prime_length(\"12345\") == False"
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    # The formula of count is n*(n+1)/2\n    # Note: The maximum digit is not included\n    return int(math.factorial(n)/(math.factorial(n-1)*2))\n",
        "test": "assert     starts_one_ends(1) == 0"
    },
    {
        "number": 84,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "    a = []\n    \n    def print_b(num):\n        for i in str(num):\n            a.append(i)\n    \n    def sum_b(num):\n        \"\"\"Sum binary digits of N.\n        \n        For example, N = 6, the sum will be 6.\n        \"\"\"\n        ans = 0\n        for i in a:\n            ans += int(i)\n        return ans\n    \n    def is_digit(num):\n        for i in str(num):\n            if i not in a:\n                return False\n        return True\n    \n    def sum_digit(num):\n        \"\"\"Sum binary digits of N.\n        \n        For example, N = 6, the sum will be 6.\n        \"\"\"\n        ans = 0\n        for i in str(num):\n            ans += int(i)\n        return ans\n    \n    # print(print_b(N))\n    # print(sum_b(N))\n    # print(is_digit(N))\n    # print(sum_digit(N))\n    return sum_b(N) if is_digit(N) else sum_digit(N)",
        "test": "assert     (solve(0) == 0)"
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    even = []\n    odd = []\n",
        "test": "assert "
    },
    {
        "number": 86,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return \" \".join(s.split()).lower()\n",
        "test": "assert     anti_shuffle(\"!!!\") == \"!!!\""
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    return list(map(lambda x: (x[x.index(x, 0)], x.index(x, 1)), lst))\n",
        "test": "assert     get_row([0,0,1,2,3,4,5,6,7,8], 9) == [(1, 0), (2, 1), (3, 2), (4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8)]"
    },
    {
        "number": 88,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    # sort array in ascending order if odd\n    if sum(array) % 2 == 1:\n        array.sort(reverse=True)\n    # sort array in descending order if even\n    else:\n        array.sort(reverse=False)\n    return array",
        "test": "assert     sort_array([9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]"
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    pass\n",
        "test": "assert     encrypt(\"hello\") == \"OLHHHH\""
    },
    {
        "number": 90,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "    \n    if not lst:\n        return None\n    \n    lst.sort()\n    \n    # Largest element \n    # 2nd element \n    # Largest element\n    # 2nd element\n    # next smallest element\n    \n    if len(lst) == 2:\n        return lst[1]\n    \n    if len(lst) == 3:\n        return lst[2]\n    \n    if len(lst) == 4:\n        return lst[3]\n    \n    return next_smallest(lst[1:4])\n",
        "test": "assert     next_smallest([1, 2, 4, 5, 7]) == 5"
    },
    {
        "number": 91,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    total = 0\n    for word in S:\n        if word in [\"I\", \"?\", \"!\"]:\n            total += 1\n    return total\n",
        "test": "assert     is_bored(\"Hephe\") == 0"
    },
    {
        "number": 92,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    return x + y == z or x + z == y or x + z == z\n    # If x + y = z or x + z = y\n",
        "test": "assert     any_int(1, 2, 4) == False"
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    return \"\".join(s.lower() if s.islower() else s.upper() for s in message)\n",
        "test": "assert "
    },
    {
        "number": 94,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    lst.sort()\n    res = 0\n    for i in lst:\n        if res < 0:\n            res = i\n        else:\n            res = res * 10 + i\n    return res\n",
        "test": "assert     skjkasdkd([]) == 0"
    },
    {
        "number": 95,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    return all(type(k) == str and k.lower() in dict for k in dict.keys())\n",
        "test": "assert     check_dict_case({1:2,3:4}) is False, \"expected to be False\""
    },
    {
        "number": 96,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    #implement a helper function\n    def prime_sum(n):\n        if n == 0:\n            return []\n        elif n == 1:\n            return [1]\n        else:\n            result = []\n            for i in range(2, n+1):\n                if i*i > n:\n                    break\n                if n % i == 0:\n                    result.append(i)\n                    break\n            return result\n    \n    #get all prime numbers\n    primes = []\n    for i in range(2, n+1):\n        primes.extend(prime_sum(i))\n    \n    #count the up to the n number\n    result = []\n    for i in range(1, len(primes)):\n        if primes[i] >= n:\n            break\n        else:\n            result.append(primes[i])\n    \n    return result\n",
        "test": "assert     count_up_to(0) == []"
    },
    {
        "number": 97,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    # Return the product of the digits of the two integers\n    # stored in the parameters\n    if type(a) == int or type(b) == int:\n        a = str(a)\n        b = str(b)\n        product = 0\n        for i in range(len(a)):\n            product += int(a[i])*int(b[i])\n        return product\n    else:\n        raise TypeError(\"Invalid parameters\")\n",
        "test": "assert     multiply(2, 10) == 2"
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    vowels = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n",
        "test": "assert     count_upper('foo') == 0"
    },
    {
        "number": 99,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    # Do the math. floor() here.\n    # The exception here is the value of the number, as it is always a float,\n    # so the rounding away from zero is an exact zero.\n    return round(math.floor(float(value)))\n    # You can use the round() function in the math module to round away\n    # from zero.\n",
        "test": "assert         closest_integer(15) == 15"
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    a = [1] * n\n    i = n // 2\n    while True:\n        j = n - i\n        if j % 2 == 0:\n            i += 1\n            a[i] = 1\n        else:\n            i -= 1\n            a[i] = 0\n        if not j % 2 == 0:\n            n = j\n            break\n    return a\n",
        "test": "assert     make_a_pile(10) == 5"
    },
    {
        "number": 101,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    return s.split(\",\")\n",
        "test": "assert     words_string('a,b,c') == ['a', 'b', 'c']"
    },
    {
        "number": 102,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    if y > x:\n        if y % 2 == 0:\n            return y\n        else:\n            return -1\n    else:\n        return -1\n",
        "test": "assert choose_num(-1, -1) == -1"
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    if n == m:\n        return '0b' + str(bin(int(str(n), 2)))\n    if n > m:\n        return '-1'\n    else:\n        return f'{round(float(n) / float(m) * 2)}'\n    \n    ",
        "test": "assert "
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    result = []\n    for digit in x:\n        if digit % 10!= 0:\n            result.append(digit)\n    return result",
        "test": "assert     unique_digits([\"1\",\"3\",\"5\",\"7\",\"8\",\"9\",\"0\"]) == [\"1\",\"3\",\"5\",\"7\",\"8\",\"9\",\"0\"]"
    },
    {
        "number": 105,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # TODO: Your code here\n    if len(arr) == 0:\n        return []\n",
        "test": "assert     by_length(by_length([2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, "
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    result = []\n    i = 0\n    factorial_num = 1\n    while n > 1:\n        factorial_num *= n\n        n -= 1\n    while n > 0:\n        result.append(factorial_num)\n        i += 1\n        n -= 1\n    return result\n",
        "test": "assert     f(3) == 6"
    },
    {
        "number": 107,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    evens, odds = [], []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            evens.append(i)\n        else:\n            odds.append(i)\n    return tuple(odds) + tuple(evens)\n",
        "test": "assert     even_odd_palindrome(10) == (1, 2)"
    },
    {
        "number": 108,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "    c = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            c += 1\n    return c\n",
        "test": "assert     count_nums([1, 2, -3, -123]) == 2"
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    if len(arr)==0: return True\n    if len(arr)==1: return True\n    if len(arr)==2: return arr[1]<=arr[0]\n    max_val=max(arr)\n    arr=sorted(arr,key=lambda x:x)\n    min_val=min(arr)\n    if max_val>min_val:\n        return False\n    for i in range(len(arr)):\n        if arr[i]!=min_val and arr[i]!=max_val:\n            return False\n    return True\n",
        "test": "assert     move_one_ball([1,1,2,3,4,5]) == False"
    },
    {
        "number": 110,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    #IMPLEMENTATION\n    if not lst1:\n        return \"NO\"\n    else:\n        odd = 0\n        even = 0\n        for n in lst1:\n            if n % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n        if even == 0 and odd == 0:\n            return \"YES\"\n        elif even == 0 and odd == 1:\n            return \"NO\"\n        elif odd == 0 and even == 1:\n            return \"NO\"\n        else:\n            return \"YES\"\n",
        "test": "assert     exchange([1,2,3,4,5,6], [1,2,3,4,5,8]) == 'YES'"
    },
    {
        "number": 111,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    # TODO: Write your function here\n    d = {}\n    if isinstance(test, str) is False:\n        return {}\n    test = test.lower()\n    for letter in test:\n        if letter not in d:\n            d[letter] = 1\n        else:\n            d[letter] += 1\n    return d",
        "test": "assert     histogram(\"g\") == {'g': 1}"
    },
    {
        "number": 112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    #TODO: Implement this function\n    if len(s)!= len(c):\n        return None\n    result = ''\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            result += s[i]\n        else:\n            return None, False\n    if result == result[::-1]:\n        return result, True\n    else:\n        return result, False\n",
        "test": "assert     reverse_delete('a', 'b') == 'a', 'fail'"
    },
    {
        "number": 113,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    odd_count_map = {}\n    for i in lst:\n        odd_count_map[i] = len(i)\n    return list(odd_count_map.keys())\n",
        "test": "assert     odd_count([]) == []"
    },
    {
        "number": 114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    length = len(nums)\n    minSum = length\n    for i in range(0, length):\n        minSum = minSum + nums[i]\n        if minSum < 0:\n            minSum = 0\n    return minSu",
        "test": "assert "
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    import math\n    def rec_dfs(grid, dp, bucket_capacity, bucket, capacity):\n        if capacity <= 0:\n            return 0\n        \n        if bucket[capacity] >= bucket_capacity:\n            return 1\n        \n        if capacity < bucket[capacity]:\n            return rec_dfs(grid, dp, bucket_capacity, bucket, capacity)\n        \n        remain = capacity - bucket[capacity]\n        # rec_dfs(grid, dp, bucket_capacity, bucket, remain)\n        dp[bucket[capacity]] += 1\n        # dp[bucket_capacity] += 1\n        dp[capacity] += 1\n        return dp[bucket[capacity]]\n        \n    # # dp[bucket_capacity] = [0]*(capacity + 1)\n    # dp[0] = 1\n    # dp[capacity] = 0\n    \n    n, capacity = len(grid), 1\n    bucket = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)]\n    \n    # rec_dfs(grid, dp, bucket_capacity, bucket, capacity)\n    \n    for i in range(n):\n        for j in range(i, -1, -1):\n            if grid[i][j] == 1:\n                bucket[i][0] = 1\n                # dp[bucket_capacity] += 1\n                # dp[capacity] += 1\n                dp[0] += 1\n                bucket[i][0] += bucket[j][0]\n                # dp[capacity] += bucket[i][0]\n                dp[capacity] += bucket[i][0]\n                break\n            \n    return dp[0]\n",
        "test": "assert     max_fill([[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1]], 10) == 5"
    },
    {
        "number": 116,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    return sorted(arr, key = lambda x: x // 2, reverse=True)\n",
        "test": "assert     sort_array([]) == []"
    },
    {
        "number": 117,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "    res = []\n    # return empty list if n is 0 or a non-negative integer\n    if (n > 0) and (n < len(s)):\n        for i in range(len(s)):\n            # if string contains at least n characters, return only those\n            if (s[i].isdigit()):\n                res.append(s[i])\n            # if string contains all characters except at least n characters, return only those\n            else:\n                for j in range(i, len(s)):\n                    if not (s[j].isdigit()):\n                        break\n                    else:\n                        # if string contains at least n characters, add word to the list\n                        if (s[j] == s[i]):\n                            res.append(s[j])\n                        else:\n                            break\n    return res\n",
        "test": "assert     select_words('aabb', 3) == []"
    },
    {
        "number": 118,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    # Initialize variables\n    if len(word) < 2:\n        return \"\"\n    vowels = \"aeiou\"\n    vowels_count = {v:0 for v in vowels}\n    \n    # Find length of word\n    for index in range(len(word)):\n        for letter in word[index:]:\n            if letter not in vowels_count:\n                break\n            if letter == vowels[vowels_count[letter]]:\n                vowels_count[letter] += 1\n                break\n            \n            # Next, if the letter is in the word, it is a consonant, then go to the next index\n            # that is one less than the previous index\n            # The word word[index:index] is another word, we need to also increase\n            # the count of the vowels\n            if letter not in vowels_count:\n                break\n            else:\n                vowels_count[letter] -= 1\n",
        "test": "assert         get_closest_vowel(\"one\") == \"a\", \"The first vowel in the word is incorrect\""
    },
    {
        "number": 119,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "    lst = ''.join(lst)\n    lst_str = ''.join(lst)\n    #lst = lst.split('(')\n    #lst = lst.split(')')\n    lst = lst_str.split('(')\n    lst = lst[0] + ')'*(len(lst) - 1)\n    return len(lst) == len(set(lst))\n",
        "test": "assert     match_parens(['(())', '))()', '(()())']) == False"
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    pass\n",
        "test": "assert "
    },
    {
        "number": 121,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    lst = sorted(lst)\n    odd = 0\n    for num in lst:\n        if num % 2:\n            odd += num\n    return odd\n",
        "test": "assert     solution([]) == 0"
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    s = 0\n    for i in range(len(arr)):\n        if len(str(arr[i])) >= 2:\n            s += arr[i]\n        else:\n            s += arr[i] * 10**(len(str(arr[i])) - 2)\n    return s + k\n",
        "test": "assert "
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        if n % 2 == 0:\n            return get_odd_collatz(n // 2) + [n//2]\n        else:\n            return [3*n//2, n//2]\n",
        "test": "assert     get_odd_collatz(1) == [1]"
    },
    {
        "number": 124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    if not date:\n        return False\n    if not date.replace('-','').isdigit():\n        return False\n",
        "test": "assert     valid_date('25-05-2020') == True"
    },
    {
        "number": 125,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    words = txt.split(\",\")\n    words = [w.strip().lower() for w in words]\n    words = [w for w in words if w]\n    return words\n",
        "test": "assert     split_words('a, b, c') == ['a', 'b', 'c']"
    },
    {
        "number": 126,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    l = len(lst)\n    if l < 2: return True\n    for i in range(l-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n",
        "test": "assert     is_sorted([]) == True"
    },
    {
        "number": 127,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    # your code\n    \n    if interval1[0] <= interval2[0] and interval1[1] >= interval2[1]:\n        if interval1[1] >= interval2[0]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    elif interval1[0] >= interval2[0] and interval1[1] <= interval2[1]:\n        if interval1[1] <= interval2[0]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n",
        "test": "assert     intersection(3, (1, 3)) == (0, 2), \"example 4\""
    },
    {
        "number": 128,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    m = {}\n    for num in arr:\n        if num in m:\n            m[num] += 1\n        else:\n            m[num] = 1\n",
        "test": "assert     prod_signs([]) == None, 'Correct'"
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    \n    N = len(grid)\n    \n    if N == 0 or N == 1:\n        return []\n    \n    # Initialize a counter to 0 to ensure that we don't go off the grid\n    # We start with the first cell\n    lst_A = [1]\n    \n    # Iterate over the grid up to the cell with the minimum value\n    # We add the values of the cell to a list\n    for i in range(2, N * N):\n        lst_A.append(lst_A[i-1])\n        \n        # Find the minimum cell value within the list\n        # If the cell value is not present, we skip it\n        if lst_A[i-1] < lst_A[i]:\n            # We have a minimum cell value\n            continue\n        \n        # We can't move to that cell, thus we skip it\n        if lst_A[i] == lst_A[i-1]:\n            continue\n            \n        # Move to the cell with the minimum value\n        lst_A[i-1] = lst_A[i]\n    \n    # Reverse the list of the values of the cells visited\n    # We do this because the list is not sorted\n    lst_A.reverse()\n    \n    # Now, we just need to find the minimum cell value\n    # which means we have a path of length k\n    # We start with the first cell\n    lst_B = [1]\n    \n    # Iterate over the grid up to the cell with the minimum value\n    # We add the values of the cell to a list\n    for i in range(2, N * N):\n        lst_B.append(lst_B[i-1])\n        \n        # We can't move to that cell, thus we skip it\n        if lst_B[i-1] < lst_B[i]:\n            continue\n            \n        # We can't go to that cell, thus we skip it\n        if lst_B[i] == lst_B[i-1]:\n            continue\n        \n        # We can go to the cell with the minimum value\n        lst_B[i-1] = lst_B[i]\n        \n    # Reverse the list of the values of the cells visited\n    # We do this because the list is not sorted\n    lst_B.reverse()\n    \n    # Now, we just need to find the minimum cell value\n    # which means we have a path of length k\n    # We start with the first cell\n    lst_C = [1]\n    \n    # Iterate over the grid up to the cell with the minimum value\n    # We add the values of the cell to a list\n    for i in range(2, N * N):\n        lst_C.append(lst_C[i-1])\n        \n        # We can't move to that cell, thus we skip it\n        if lst_C[i-1] < lst_C[i]:\n            continue\n            \n        # We can't go to that cell, thus we skip it\n        if lst_C[i] == lst_C[i-1]:\n            continue\n        \n        # We can go to the cell with the minimum value\n        lst_C[i-1] = lst_C[i]\n        \n    # Reverse the list of the values of the cells visited\n    # We do this because the list is not sorted\n    lst_C.reverse()\n    \n    # Now, we just need to find the minimum cell value\n    # which means we have a path of length k\n    # We start with the first cell\n    lst_D = [1]\n    \n    # Iterate over the grid up to the cell with the minimum value\n    # We add the values of the cell to a list\n    for i in range(2, N * N):\n        lst_D.append(lst_D[i-1])\n        \n        # We can't move to that cell, thus we skip it\n        if lst_D[i-1] < lst_D[i]:\n            continue\n            \n        # We can't go to that cell, thus we skip it\n        if lst_D[i] == lst_D[i-1]:\n            continue\n        \n        # We can go to the cell with the minimum value\n        lst_D",
        "test": "assert "
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    tri_list = []\n    for i in range(1, n+1):\n        tri_list.append(i)\n    return tri_list\n",
        "test": "assert "
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    if n == 0:\n        return 0\n    if n < 4:\n        return 1\n    return n * digits(n-1)\ndef main():\n    # print(digits(1))\n    # print(digits(5))\n    # print(digits(0))\n    # print(digits(25))\n    print(digits(0))\n    print(digits(10))\n    print(digits(12))\n    print(digits(9))\n    print(digits(13))\n    print(digits(21))\n    print(digits(31))\n    print(digits(99))\nmain()",
        "test": "assert     digits(0) == 0"
    },
    {
        "number": 132,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    #start with empty string\n    bracket_stack = []\n    #keep track of if there is a closing bracket\n    close = False\n    #iterate through string\n    for i in range(len(string)):\n        #check if it is a closing bracket\n        if string[i] == ']':\n            close = True\n        #if it is not, add it to the stack\n        elif string[i] == ']':\n            #print(bracket_stack)\n            #if it is the only element in the stack, it is a closing bracket\n            if bracket_stack and not bracket_stack[-1][0]:\n                #print(bracket_stack[-1])\n                close = True\n            #remove it from the stack\n            bracket_stack.pop()\n        #if it is a closing bracket, append it to the stack\n        elif string[i] == '[':\n            #print(bracket_stack)\n            #if it is the only element in the stack, it is a closing bracket\n            if bracket_stack and not bracket_stack[-1][0]:\n                #print(bracket_stack[-1])\n                close = True\n            #append it to the stack\n            bracket_stack.append(string[i])\n    #if there are no brackets, return True\n    if close:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_nested('[[]]') == True"
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "    # result = 0\n    # for value in lst:\n    #     result += value ** 2\n    # return result\n    # See https://stackoverflow.com/questions/50984371/how-do-i-find-the-index-of-the-smallest-value-in-a-list-in-python\n    \n    squares = 0\n    for value in lst:\n        squares += value ** 2\n    return squares\n",
        "test": "assert     sum_squares([]) == 0, \"You do not have the sum of all squared numbers\""
    },
    {
        "number": 134,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    # YOUR CODE HERE\n    return txt[-1] == 'a'\n",
        "test": "assert     check_if_last_char_is_a_letter(\"taco\") == False"
    },
    {
        "number": 135,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    idx = -1\n    while arr[idx] <= arr[idx-1] and idx >= 0:\n        idx -= 1\n    return idx\n",
        "test": "assert     can_arrange([2,3,4,5,6,7]) == -1"
    },
    {
        "number": 136,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    max_val = None\n    min_val = None\n    for num in lst:\n        if num > 0:\n            if max_val == None or num > max_val:\n                max_val = num\n            if min_val == None or num < min_val:\n                min_val = num\n",
        "test": "assert     largest_smallest_integers([-2, -3, -4, -5, -6, -7, -8, -9, -10]) == None"
    },
    {
        "number": 137,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    try:\n        if type(a) == str:\n            a = float(a)\n        elif type(a) == float:\n            a = int(a)\n        if type(b) == str:\n            b = float(b)\n        elif type(b) == float:\n            b = int(b)\n        if type(a) == int and type(b) == int:\n            return a if a > b else b\n        elif type(a) == str and type(b) == str:\n            return a if a > b else b\n        elif type(a) == float and type(b) == float:\n            return a if a > b else b\n        elif type(a) == str and type(b) == int:\n            return a if a > b else b\n        elif type(a) == float and type(b) == int:\n            return a if a > b else b\n        elif type(a) == int and type(b) == int:\n            return a if a > b else b\n    except ValueError:\n        return None",
        "test": "assert     compare_one(1.1, 1.0) == 1"
    },
    {
        "number": 138,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if n%2 == 0:\n        return False\n    return n%4 == 0\n",
        "test": "assert     is_equal_to_sum_even(2) == False"
    },
    {
        "number": 139,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    if n < 0:\n        return None\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n",
        "test": "assert     special_factorial(1) == 1"
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    output = []\n    index = 0\n    while index < len(text):\n        if text[index] == \" \":\n            index += 1\n        elif text[index] == \" \":\n            if index + 1 < len(text) and text[index + 1] == \" \":\n                index += 2\n                output.append(\"_\")\n            else:\n                output.append(\"-\")\n        else:\n            index += 1\n    return \"\".join(output)\n",
        "test": "assert "
    },
    {
        "number": 141,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    if len(file_name) < 3:\n        return 'No'\n    elif file_name[0].isalpha() or len(file_name) <= 3:\n        return 'No'\n    else:\n        for i in range(len(file_name)-3):\n            if file_name[i].isalpha() or len(file_name) <= 3:\n                continue\n            else:\n                if file_name[i] == '.' or file_name[i] == '.':\n                    return 'No'\n        return 'Yes'\n    \ndef to_upper(string):\n    \"\"\"Create a function which takes a string representing a text file, and returns the\n    string in upper case.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    to_upper(\"hello.txt\") # => 'LMAO'\n    to_upper(\"hello.exe\") # => 'HELO' (the name should start with a latin alphapet letter)\n    to_upper(\"hello.dll\") # => 'LMAO'\n    \"\"\"\n    if len(string) < 3:\n        return string\n    elif string[0].isalpha() or len(string) <= 3:\n        return string.upper()\n    else:\n        for i in range(len(string)-3):\n            if string[i].isalpha() or len(string) <= 3:\n                continue\n            else:\n                if string[i] == '.' or string[i] == '.':\n                    return string.upper()\n        return string.upper()\n",
        "test": "assert     file_name_check(\"hello.txt\") == \"No\""
    },
    {
        "number": 142,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    sum_list = 0\n    for i in lst:\n        if i % 3 == 0:\n            sum_list += i ** 3\n        else:\n            sum_list += i ** 4\n    return sum_list\n",
        "test": "assert     sum_squares([]) == 0"
    },
    {
        "number": 143,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    words = sentence.split()\n    for word in words:\n        if len(word) == 1:\n            return word\n    return \" \".join(words)",
        "test": "assert     words_in_sentence('a') == 'a'"
    },
    {
        "number": 144,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if n.isdigit() and x.isdigit():\n        if int(x) * int(n) == 0:\n            return False\n        else:\n            return True\n    else:\n        return False\n",
        "test": "assert     simplify(12, \"12/2\") == False"
    },
    {
        "number": 145,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    nums = list(nums)\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return nums\n    \n    point = 0\n    while len(nums) > 1:\n        sums = 0\n        for i in range(len(nums)):\n            sums += nums[i]\n        if nums[0] == sums:\n            nums = nums[1:]\n        else:\n            point = 0\n            for i in range(len(nums)):\n                point += nums[i]\n                if nums[i] < point:\n                    point = nums[i]\n        if point == 0:\n            return nums\n    return nums\n",
        "test": "assert     order_by_points([]) == []"
    },
    {
        "number": 146,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    count = 0\n    for i in range(len(nums)):\n        for j in range(len(nums) - i):\n            if nums[j] > 10 and nums[j] % 2 == 1:\n                count += 1\n    return count\n",
        "test": "assert     specialFilter([]) == 0"
    },
    {
        "number": 147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    def solve(n):\n        a = [1 for i in range(n + 1)]\n        for i in range(2, n + 1):\n            for j in range(i, n + 1):\n                k = i * i - j + 1\n                if k % 3 == 0:\n                    a[i] = j\n        return a[n]\n    return solve(n)\n",
        "test": "assert     get_max_triples(10) == 5"
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    a = \"Saturn\"\n    b = \"Uranus\"\n    c = \"Venus\"\n    d = \"Earth\"\n    e = \"Mars\"\n    f = \"Jupiter\"\n    g = \"Neptune\"\n    h = \"Mercury\"\n    planet1 = planet1.lower()\n    planet2 = planet2.lower()\n    if planet1 in (a, b, c, d, e, f, g, h):\n        pass\n    elif planet2 in (a, b, c, d, e, f, g, h):\n        pass\n    else:\n        return (planet1, planet2)\n    return (planet1, planet2)\n",
        "test": "assert     bf('Mercury','Uranus') == ('Mercury', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus')"
    },
    {
        "number": 149,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    # Initialize an empty list\n    lst_sorted = []\n    # Initialize a dictionary\n    dictionary = {}\n    # Loop through the list\n    for word in lst:\n        # Initialize the last index\n        last_index = len(word) - 1\n        # Check the last index and the length of the word\n        if last_index in dictionary:\n            # if it is an index that has already been added\n            # remove it from the dictionary\n            word_index = dictionary[last_index]\n            del dictionary[last_index]\n            # Add the word to the dictionary and return the sorted list\n            dictionary[last_index] = word_index\n            lst_sorted.append(word)\n        # If not, add it to the dictionary and append the last index\n        else:\n            dictionary[last_index] = word\n            lst_sorted.append(word)\n            \n    # Return the sorted list of words\n    return lst_sorted\n",
        "test": "assert     sorted_list_sum([]) == []"
    },
    {
        "number": 150,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    if n == 1:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        return x_or_y(n // 2, x, y)\n",
        "test": "assert         x_or_y(3, 4, 5) == 4"
    },
    {
        "number": 151,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    num_squared = 0\n    for number in lst:\n        if number % 2 == 1:\n            num_squared += number ** 2\n    return num_squared\n",
        "test": "assert "
    },
    {
        "number": 152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    # write your code here\n    if len(guess)!= len(game):\n        return -1\n    else:\n        best = -1\n        for i in range(len(guess)):\n            if guess[i] in game and guess[i]!= game[i]:\n                if guess[i]!= game[i]:\n                    best = abs(guess[i] - game[i])\n                    break\n        return best\n",
        "test": "assert compare(2,7) == 2"
    },
    {
        "number": 153,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if len(extensions) < 1:\n        return class_name\n    \n    result = []\n    for extension in extensions:\n        if extension in extension_dict:\n            extension_strength = extension_dict[extension]\n        else:\n            extension_strength = 0\n        result.append(class_name + extension)\n        extension_strength = (extension_strength / float(extension_strength))\n        result.append(str(extension_strength))\n    return '.'.join(result)\n    \n    \n    \ndef Uniqueness(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extension is to be used to load additional classes to the class. The\n    uniqueness of the extension is as follows: Let N be the number of the\n    uppercase letters in the extension's name. Let M be the number of the\n    lowercase letters in the extension's name. Let T be the number of the \n    uppercase letters in the extension's name. The uniqueness of the extension\n    is given by the fraction N - M - T. Your program should return a string\n    in this format: ClassName.UniquenessName.\n    For example, if you are given \"Slices\" as the class and a list of extensions:\n    ['AA', 'Be', 'CC'], and the extensions is\n    ['SErviNGSliCes', 'Cheese', 'StuFfed'], then you should return 'Slices.SErviNGSliCes'\n    since 'SErviNGSliCes' is the uniqueness (it is, though, -1) and 'SeerigSlices' \n    is the uniqueness (it is, though, -2).\n    Example:\n    for Uniqueness('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    for Uniqueness('my_class', ['AA', 'Be', 'CC'], ['SErviNGSliCes', 'Cheese', 'StuFfed']) =='my_class.AA'\n    for Uniqueness('my_class', ['AA', 'Be', 'CC'], ['SErviNGSliCes', 'Cheese', 'StuFfed'], ['SErviNGSliCes', 'Cheese', 'StuFfed']) =='my_class.AA'\n    for Uniqueness('my_class', ['AA', 'Be', 'CC'], ['SErviNGSliCes', 'Cheese', 'StuFfed'], ['SErviNGSliCes', 'Cheese', 'StuFfed'], ['SErviNGSliCes', 'Cheese', 'StuFfed']) =='my_class.AA'\n    for Uniqueness('my_class', ['AA', 'Be', 'CC'], ['SErviNGSliCes', 'Cheese', 'StuFfed'], ['SErviNGSliCes', 'Cheese', 'StuFfed']) =='my_class.AA'\n    \"\"\"\n    if len(extensions) < 1:\n        return class_name\n    \n    result = []\n    for extension in extensions:\n        if extension in extension_dict:\n            extension_uniqueness = extension_dict[extension]\n        else:\n            extension_uniqueness = 0\n        result.append(class_name + extension)\n        extension_uniqueness = (extension_uniqueness / float(extension_uniqueness))\n        result.append(str(extension_uniqueness))\n    return '.'.join(result)\n    \n    \ndef Separator(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extension is to be used to load additional classes to the class. The\n    separator is the number of characters in the extension's name.\n    The separator is provided as an integer. It should be an odd number.\n    If the extension is a string, it should be in the format: \n    'ClassName.SeparatorLength' where 'ClassName' is the class name.\n    For example, if you are given \"Slices\" as the class and a list of extensions:\n    ['AA', 'Be', 'CC'], and the extensions is\n    ['SErviN",
        "test": "assert "
    },
    {
        "number": 154,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    if len(b)!= len(a):\n        return False\n    if len(b) > len(a):\n        return False\n    c = 0\n    l = len(a)\n    for i in range(len(a)):\n        if a[i]!= b[l-i]:\n            c += 1\n    if c == len(b):\n        return True\n    else:\n        return False\n",
        "test": "assert     cycpattern_check('pat','spat') == False"
    },
    {
        "number": 155,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n",
        "test": "assert     even_odd_count(5) == (0,1)"
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    roman_numeral = {\n        1: 'I',\n        2: 'II',\n        3: 'III',\n        4: 'IV',\n        5: 'V',\n        6: 'VI',\n        7: 'VII',\n        8: 'VIII',\n        9: 'IX',\n        10: 'X',\n        11: 'XX',\n        12: 'XXX',\n        13: 'XL',\n        14: 'L',\n        15: 'LX',\n        16: 'LXX',\n        17: 'LXXX',\n        18: 'XC',\n        19: 'XCIII',\n        20: 'XCIV',\n        21: 'XLVIII',\n        22: 'XXXVIII',\n        23: 'XLVI',\n        24: 'LXXVIII',\n        25: 'XXL',\n        26: 'XXLVI',\n        27: 'XXLVIU',\n        28: 'XXLV',\n        29: 'XXLVIII',\n        30: 'XXLVI',\n        31: 'XXLVIU',\n        32: 'XXLVIII',\n        33: 'XXLVI',\n        34: 'XXLVIU',\n        35: 'XXLVIII',\n        36: 'XXLVI',\n        37: 'XXLVIU',\n        38: 'XXLVI',\n        39: 'XXLV',\n        40: 'XXL',\n        41: 'XL',\n        42: 'L',\n        43: 'XC',\n        44: 'C',\n        45: 'CC',\n        46: 'CD',\n        47: 'D',\n        48: 'CM',\n        49: 'M'\n    }\n",
        "test": "assert     int_to_mini_roman(10) == \"III\""
    },
    {
        "number": 157,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    if a==b and b==c and a!=c:\n        return True\n    if b==c and c==a:\n        return True\n    if a==b or b==c or a==c:\n        return False\n    if a==b or b==c or a==c or b==c:\n        return False\n    return False\n",
        "test": "assert     right_angle_triangle(1, 2, 3) == False"
    },
    {
        "number": 158,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    max = \"\"\n    for word in words:\n        chars = Counter(word)\n        for char, count in chars.most_common():\n            if len(word) >= len(word) + len(word) - len(char) + 1:\n                return char\n        \n    return max\n",
        "test": "assert "
    },
    {
        "number": 159,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "    # TODO\n    return [number, remaining - need]\n",
        "test": "assert     eat(0, 0, 1000) == [ 0, 1000 ]"
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    result = 0\n    for a, b in zip(operator[:-1], operand):\n        result += a + b\n    return resul",
        "test": "assert     do_algebra([], [1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]"
    },
    {
        "number": 161,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    s = list(s)\n    i = len(s)-1\n    while i >= 0:\n        if s[i] =='':\n            s[i] = s[i][::-1]\n            i -= 1\n        else:\n            break\n    return \"\".join(s)\n",
        "test": "assert     solve('aAbb') == 'aAbb'"
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    import hashlib\n",
        "test": "assert     string_to_md5(' ') is None"
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    nums = [i for i in range(a,b+1)]\n    return nums[2::3]\n",
        "test": "assert     generate_integers(100, 1) == []"
    }
]