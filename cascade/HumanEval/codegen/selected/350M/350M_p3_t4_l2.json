[
    {
        "number": 0,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    for n in numbers:\n        for n_1 in numbers:\n            if abs(n - n_1) <= threshold:\n                return True\n    return False\n",
        "test": "assert     has_close_elements([1,2,3,4,5,6], 2) == True",
        "num_ids": 345,
        "indeed": false
    },
    {
        "number": 1,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    if paren_string == ')':\n        return []\n    elif paren_string == '(':\n        return []\n    elif paren_string == ')':\n        return []\n    elif paren_string == ']':\n        return []\n    elif paren_string == '}':\n        return []\n    else:\n        return [paren_string]\n",
        "test": "assert     separate_paren_groups(\")\") == []",
        "num_ids": 414,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return round(number, -1)\n",
        "test": "assert     truncate_number(0) == 0",
        "num_ids": 198,
        "indeed": false
    },
    {
        "number": 3,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "    return False\n",
        "test": "assert     below_zero([1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == False",
        "num_ids": 226,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    num_sum = 0\n    for num in numbers:\n        num_sum += (num - mean(numbers)) ** 2\n    \n    return (num_sum ** 0.5) / (len(numbers) - 1)\n",
        "test": "assert     mean_absolute_deviation([]) == 0.0, \"The mean absolute deviation is correct\"",
        "num_ids": 451,
        "indeed": false
    },
    {
        "number": 5,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    output = []\n    i = 0\n    while i < len(numbers):\n        output.append(numbers[i] + delimeter)\n        i += 1\n",
        "test": "assert     intersperse([1, 2, 3, 4, 5, 6, 7], '2') == [1, 2, 3, 4, 5, 6, 7, 7]",
        "num_ids": 574,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    \n    # base case for all parentheses\n    if paren_string == '':\n        return [0]\n    \n    # recur for each subgroup\n    brackets = {')': '(', '}': '{', ']': '['}\n    level = -1\n    sub_parens = parse_nested_parens(paren_string)\n    for i in range(len(sub_parens)):\n        # if nested parentheses are at level i,\n        # check whether the current level is deeper than level i\n        # or not, else, if the current level is higher than level i,\n        # add the level of i to level\n        if sub_parens[i] == '':\n            return [level + 1]\n        elif sub_parens[i] in brackets.keys():\n            if brackets[sub_parens[i]]!= '':\n                level = i\n        else:\n            level -= 1\n    return [level + 1]\n",
        "test": "assert     parse_nested_parens('((((())))') == [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
        "num_ids": 1661,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    return [x for x in strings if x.startswith(substring)]\n",
        "test": "assert filter_by_substring([ '\u043a\u043e\u0442', '\u043f\u0430\u0441\u0430', '\u0441\u0442\u0440\u043e\u0433\u0438\u0439', '\u0441\u043e\u043b\u043d\u0446\u0435', '\u0441\u0430\u043d\u043a\u0442-\u043f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433', '\u0430\u043f\u0442\u0435\u043a\u0430', '\u043f\u0430\u0445\u043e\u0434' ], '\u043f\u0430\u0441\u0430')",
        "num_ids": 587,
        "indeed": false
    },
    {
        "number": 8,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if len(numbers) == 0:\n        return 0, 1\n    elif len(numbers) == 1:\n        return numbers[0], numbers[0]\n",
        "test": "assert     sum_product([1, 2, 3, 4, 5, 6, 7]) == (0, 37)",
        "num_ids": 357,
        "indeed": false
    },
    {
        "number": 9,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    max_so_far = []\n    for num in numbers:\n        if len(max_so_far) == 0 or num > max_so_far[-1]:\n            max_so_far.append(num)\n        else:\n            max_so_far.append(max(num, max_so_far[-1]))\n    return max_so_far\n",
        "test": "assert     [1,2,3,4,5,6,7,8,9,10] == [1,2,3,4,5,6,7,8,9,10]",
        "num_ids": 448,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    # iterative approach\n    \n    # iterate through string\n    index = 0\n    index = 0\n    newString = string[:index]\n    \n    # while not palindrome\n    while index < len(string) and is_palindrome(newString):\n        newString += string[index]\n        index += 1\n    \n    # return the string\n    return newString\n    \n",
        "test": "assert is_palindrome(\"abcdabcdcde\") == False",
        "num_ids": 401,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    return ''.join([f'{ord(i)^ord(j)}' if i!=j else '0' for i,j in zip(a,b)])\n",
        "test": "assert     string_xor(\"00\", \"1\") == \"1\"",
        "num_ids": 246,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    if len(strings) == 0:\n        return None\n",
        "test": "assert     longest([]) == None",
        "num_ids": 277,
        "indeed": false
    },
    {
        "number": 13,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    while a % b == 0:\n        a /= b\n    return a\n",
        "test": "assert     greatest_common_divisor(2, 3) == 2",
        "num_ids": 237,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[i:])\n    return prefixes\n",
        "test": "assert     all_prefixes(str(3)) == ['f', 'p', 'l', 'o']",
        "num_ids": 296,
        "indeed": false
    },
    {
        "number": 15,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "    return''.join([str(x) for x in range(0, n + 1)])\n",
        "test": "assert     string_sequence(0) == \"0\"",
        "num_ids": 230,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return len(set(string.lower()))\n",
        "test": "assert     count_distinct_characters('hIIII') == 2",
        "num_ids": 330,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    beat_counts = []\n    beat_offsets = []\n",
        "test": "assert     parse_music('o|..|.|') == [1,1,2]",
        "num_ids": 503,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    result = 0\n    for x in range(0, len(string) - len(substring) + 1):\n        substring_index = x\n        found = False\n        while not found:\n            if substring[substring_index:substring_index + len(substring)] == substring:\n                found = True\n            else:\n                substring_index += 1\n        if found:\n            result += 1\n    return result\n",
        "test": "assert     how_many_times(\"A\", \"b\") == 1",
        "num_ids": 325,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    numbers = numbers.split(\" \")\n    numbers.sort(reverse=True)\n    return \" \".join(numbers)\n",
        "test": "assert     sort_numbers('one') == 'one'",
        "num_ids": 1423,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    min_index = numbers[0]\n    min_value = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] < min_value:\n            min_value = numbers[i]\n            min_index = i\n    return min_index, min_value\n",
        "test": "assert     find_closest_elements([0, 0, 0]) == (0, 0)",
        "num_ids": 398,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    return [n / max(numbers) for n in numbers]\n",
        "test": "assert rescale_to_unit([]) == []",
        "num_ids": 1153,
        "indeed": false
    },
    {
        "number": 22,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n        elif isinstance(value, str):\n            result.append(int(value))\n        elif value is None:\n            result.append(0)\n        elif isinstance(value, dict):\n            result.append(dict(value))\n        else:\n            result.append(value)\n    return result\n",
        "test": "assert         filter_integers([3.1415, 0, -1, 3.1415]) == [3.1415, 0, -1, 3.1415]",
        "num_ids": 1449,
        "indeed": false
    },
    {
        "number": 23,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return len(string)\n",
        "test": "assert     strlen(\"A\") == 1",
        "num_ids": 152,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    divs = []\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            divs.append(i)\n            n //= i\n        else:\n            i += 1\n    if n > 2 and n % 2 == 0:\n        divs.append(2)\n    return max(divs)\n",
        "test": "assert     largest_divisor(26) == 2",
        "num_ids": 351,
        "indeed": false
    },
    {
        "number": 25,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    # sort out the highest possible prime number\n    res = []\n    for i in range(1, n + 1):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            res.append(i)\n    return res\n",
        "test": "assert     factorize(1) == [1]",
        "num_ids": 368,
        "indeed": false
    },
    {
        "number": 26,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    removed = []\n    for num in numbers:\n        if removed.count(num) < 1:\n            removed.append(num)\n    return removed\n",
        "test": "assert     remove_duplicates([]) == []",
        "num_ids": 178,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    return string.upper() + string.lower()\n",
        "test": "assert     flip_case('aaaBBBBBB') == 'AaaaBBBBB'",
        "num_ids": 294,
        "indeed": false
    },
    {
        "number": 28,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate([\"a\",\"b\"]) == \"ab\"",
        "num_ids": 264,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    return [s for s in strings if prefix in s]\n",
        "test": "assert     filter_by_prefix([\"a\",\"a\",\"b\",\"b\"], \"c\") == []",
        "num_ids": 379,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    return [i for i in l if i > 0]\n",
        "test": "assert     (get_positive([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "num_ids": 292,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    if n == 2 or n == 3:\n        return True\n    if n == 4:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_prime(13) == True",
        "num_ids": 291,
        "indeed": false
    },
    {
        "number": 32,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    if len(xs) == 1:\n        return xs[0]\n    elif len(xs) % 2 == 0:\n        return find_zero(xs[:-1]) + xs[-1] * xs[-2]\n    elif len(xs) % 2 == 1:\n        return (xs[0] + xs[1]) * xs[-1]\n    else:\n        raise Exception(\"cannot find zero.\")\n",
        "test": "assert     find_zero([0,1]) == 0, \"Polynomial is not zero.\"",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    index = 0\n    l = [i for i in range(len(l)) if i%3!= 0]\n    while index < len(l):\n        if l[index] % 3 == 0:\n            l[index], l[index+1], l[index+2] = l[index+2], l[index], l[index+1]\n        index += 2\n    return l\n",
        "test": "assert         sort_third([9,8,7,6,5,4,3,2,1]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 444,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    i = 0\n    res = []\n    while i < len(l):\n        if l[i] not in res:\n            res.append(l[i])\n        i += 1\n    return res\n",
        "test": "assert     not unique([])",
        "num_ids": 371,
        "indeed": false
    },
    {
        "number": 35,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "    max_e = l[0]\n    for e in l:\n        if e > max_e:\n            max_e = e\n    return max_e\n",
        "test": "assert         max_element([3, 6, -2]) == 6",
        "num_ids": 219,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    digs = 0\n    if n < 5:\n        digs += 1\n    elif n < 9:\n        digs += 2\n    elif n < 17:\n        digs += 3\n    else:\n        digs += 4\n    return digs\n",
        "test": "assert     fizz_buzz(1) == 1",
        "num_ids": 1291,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    even_ind = []\n    odd_ind = []\n    \n    for i in l:\n        if i % 2 == 0:\n            even_ind.append(i)\n        else:\n            odd_ind.append(i)\n            \n    even_ind.sort()\n    odd_ind.sort()\n    \n    return even_ind + odd_ind\n",
        "test": "assert     sort_even(l=[0, 0, 0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0, 0, 0]",
        "num_ids": 635,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert ",
        "num_ids": 415,
        "indeed": false
    },
    {
        "number": 39,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    for i in range(2,n+1):\n        prime_fib = i * 2 + 1\n        if prime_fib == 1 or prime_fib == 2:\n            continue\n        if prime_fib % 5 == 0:\n            continue\n        elif prime_fib % 10 == 0:\n            continue\n        else:\n            print(prime_fib)\n",
        "test": "assert     prime_fib(4) == 7",
        "num_ids": 297,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    # See http://en.wikipedia.org/wiki/Triple_sum\n    for i in l:\n        # We do this to handle negative numbers\n        # because this function won't be able to handle 0 or -0\n        if i < 0:\n            # We don't want to include 0 in our comparison\n            # This is to prevent exceptions from being thrown\n            return False\n    # We then add 1 to the end of the list, we'll see if it's a duplicate\n    # This is the idea from http://en.wikipedia.org/wiki/Triple_sum#With_Python\n    s = 0\n    for i in l:\n        s = s + i\n    # Check to see if the list is a tripe sum\n    if s == 0:\n        return True\n    return False\n",
        "test": "assert     triples_sum_to_zero([1, 2, 3, 4]) == False",
        "num_ids": 487,
        "indeed": false
    },
    {
        "number": 41,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    n_col_cars_left = n // 2\n    n_col_cars_right = n - n_col_cars_left\n    return (n_col_cars_left + n_col_cars_right) % n\n",
        "test": "assert     (car_race_collision(3) == 0)",
        "num_ids": 280,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    \n    l[:] = [x + 1 for x in l]\n    return l\n",
        "test": "assert ",
        "num_ids": 287,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    # iterate over the list\n    for i in range(len(l)):\n        # if there is a pair with both sums equal to zero, return False\n        if l[i] == l[0] or l[i] == l[-1]:\n            return True\n    # if there is no pair with both sums equal to zero, return False\n    return False\n",
        "test": "assert     pairs_sum_to_zero([0,0,0,0,0]) == True",
        "num_ids": 408,
        "indeed": false
    },
    {
        "number": 44,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    return bin(x)[2:]\n",
        "test": "assert change_base(0, 2) == '0'",
        "num_ids": 247,
        "indeed": false
    },
    {
        "number": 45,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    return 0.5*a*h",
        "test": "assert         triangle_area(0, 0) == 0",
        "num_ids": 1221,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fib4(n-1)+fib4(n-2)\n",
        "test": "assert     fib4(0) == 0",
        "num_ids": 212,
        "indeed": false
    },
    {
        "number": 47,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    if len(l) == 0:\n        raise ValueError('Empty list')\n",
        "test": "assert     median([]) == 0",
        "num_ids": 306,
        "indeed": false
    },
    {
        "number": 48,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    # remove trailing whitespace\n    text = text.strip()\n    # remove leading whitespace\n    text = text.lstrip()\n    # make sure it's not empty\n    if text.strip() == \"\":\n        return True\n    # split into a list of words\n    words = text.split()\n    # check each word\n    for i in range(len(words) // 2):\n        if words[i]!= words[-i-1]:\n            return False\n    return True\n",
        "test": "assert     is_palindrome(\"racecar\") == True",
        "num_ids": 356,
        "indeed": false
    },
    {
        "number": 49,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    return n % p\n",
        "test": "assert     modp(20, 9) == 2",
        "num_ids": 196,
        "indeed": false
    },
    {
        "number": 50,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert     encode_shift(\"0\") == \"\"",
        "num_ids": 295,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    return ''.join([char for char in text if char not in 'aeiouAEIOU']).strip()\n",
        "test": "assert     remove_vowels(\"Test\") == \"tst\"",
        "num_ids": 1386,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n",
        "test": "assert     below_threshold([], -1)",
        "num_ids": 220,
        "indeed": false
    },
    {
        "number": 53,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    return x + y\n",
        "test": "assert     add(1, 2) == 3",
        "num_ids": 97,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    return len(s0) == len(s1) and (s0.lower() == s1.lower() or len(s1) > len(s0))\n",
        "test": "assert     same_chars(\"\", \"\") == True",
        "num_ids": 1263,
        "indeed": false
    },
    {
        "number": 55,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if n<2:\n        return 1\n    \n    return fib(n-1) + fib(n-2)\n",
        "test": "assert     fib(1) == 1",
        "num_ids": 242,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    for c in brackets:\n        if c not in [\"<\", \">\", \"<>\", \",\", \":\", \".\"]:\n            return False\n    return True\n",
        "test": "assert     correct_bracketing(\"<>\")",
        "num_ids": 295,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    l.sort()\n    for i, x in enumerate(l[1:]):\n        if x < l[i]:\n            return False\n    return True\n",
        "test": "assert     monotonic([]), \"List should be a monotonic sequence.\"",
        "num_ids": 313,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    set_x = set(l1)\n    set_y = set(l2)\n    return list(set_x & set_y)\n",
        "test": "assert     common([], []) == []",
        "num_ids": 490,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            n /= i\n        else:\n            i += 1\n    return n\n",
        "test": "assert     largest_prime_factor(2) == 2",
        "num_ids": 152,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    return sum(range(1, n + 1))\n",
        "test": "assert     sum_to_n(1) == 1",
        "num_ids": 236,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    return any(bracket in brackets for bracket in brackets)\n",
        "test": "assert     correct_bracketing(\"()\")",
        "num_ids": 1109,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "    xs = np.array(xs)\n    res = np.zeros(len(xs))\n    for i in range(len(xs) - 1):\n        res[i] = xs[i + 1] - xs[i] * xs[i]\n    return res\n",
        "test": "assert     derivative([-3,-2,3]) == [0,0]",
        "num_ids": 405,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    a,b=0,1\n    for i in range(2,n+1):\n        a,b=b,a+b\n    return a",
        "test": "assert     fibfib(0) == 0",
        "num_ids": 194,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    # your code here\n    return len(set(s))\n",
        "test": "assert     vowels_count('aY') == 2, \"test failed\"",
        "num_ids": 321,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    shift = abs(shift)\n    x = str(x)[::-1]\n    return x[shift:] + x[:shift]\n",
        "test": "assert     circular_shift(1, 4) == '1'",
        "num_ids": 290,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    if len(s) == 0:\n        return 0\n    digit = [ord(c) for c in s]\n    return sum(digit)\n",
        "test": "assert     digitSum(\"\") == 0",
        "num_ids": 321,
        "indeed": false
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    total_apples = 0\n    total_oranges = 0\n    total_mango = 0\n    total_n = s.count('mango')\n    total_f = s.count('fruit')\n    for i in range(total_n):\n        if s[i] =='mango':\n            total_mango +=1\n        elif s[i] == 'fruit':\n            total_f +=1\n    for j in range(total_f):\n        if s[j] == 'f':\n            total_f -= 1\n        if s[j] == 'a':\n            total_apples += 1\n    for k in range(total_f-total_mango,total_f-total_apples):\n        if s[k] == 'f' and s[k+1] == 'f':\n            total_f -= 1\n        elif s[k] == 'a' and s[k+1] == 'a':\n            total_apples -= 1\n    return total_mango + total_apples + total_f\n    \nprint(fruit_distribution(\"5 apples and 6 oranges\", 19))\nprint(fruit_distribution(\"0 apples and 1 oranges\",3))\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100))\nprint(fruit_distribution(\"100 apples and 1 oranges\",120))\nprint(fruit_distribution(\"100 apples and 0 oranges\",120))",
        "test": "assert     fruit_distribution(\"3 5 1 1 3 1 1 1 1 2 1 1 2 1 1 1 1 1 1 1 1 1 1 2 1 1 1 2 1 1 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 1 1 1 1 2 1 1 1 1 1 1 2 1 1 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 2 1 1 1 1 1 1 2 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 2 1 1 1 1 1 1 2 1 1 1 1 1 1 2 1 1 1 1 1 1 2 1 1 1 1 1 1 2 1 1 1 1 1 1 2 1 1 1 1 1 1 2 1 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 ",
        "num_ids": 1580,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    # Time complexity: O(n)\n    # Space Complexity: O(n)\n    # time in O(n)\n    # space in O(1)\n    # [0,0] will be always the smallest value, so we will have to go through all the nodes and pick the smallest value\n    if len(arr) == 0:\n        return None\n    lst = sorted(arr, key=lambda x: x) # sort array from smallest to largest\n    if lst[0] == 0: # check if it is the root node\n        return lst[1]\n    lowest_index = 0\n    for idx in range(1,len(lst)):\n        if lst[idx] == lst[idx-1]: # if it is already there, keep going\n            lowest_index = idx # since it is already there, we have to pick the smallest value\n    return lst[lowest_index]\n",
        "test": "assert     [1,2,3,4,5,6,7,8,9,10]==pluck([1,2,3,4,5,6,7,10])",
        "num_ids": 583,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    num = sorted(lst)\n    for i in num:\n        if num.count(i) > 1:\n            return i\n    return -1\n",
        "test": "assert     search([]) == -1",
        "num_ids": 243,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    result = []\n    minimum = min(lst)\n    maximum = max(lst)\n    while minimum <= maximum:\n        result.append(minimum)\n        minimum += 1\n    while len(lst) > 1:\n        result.append(lst[-1])\n        lst.pop()\n    result.reverse()\n    return result\n",
        "test": "assert     sort_list([9,2,5,7,4,8,10,1,0]) == [0,1,2,3,4,5,7,8,10]",
        "num_ids": 1624,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    s = (b*c) - (a*c)\n    if s >= 0 and s <= b:\n        return s\n    else:\n        return -1\n",
        "test": "assert     triangle_area(2,5,7) == -1",
        "num_ids": 262,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    is_palindromic = False\n    if len(q) <= 1:\n        return False\n    for i in range(len(q)):\n        item = q[i]\n        weight = q[i + 1] - q[i]\n        if weight < weightMax and item <= weightMax and is_palindromic == False:\n            is_palindromic = True\n            if weight == w:\n                return True\n            else:\n                return False\n    return is_palindromic\n    \ndef is_palindromic(q):\n    '''\n    Write a function that returns True if the object q is palindromic, and False otherwise.\n",
        "test": "assert     will_it_fly(p,w) == False",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 73,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "    if len(arr) < 2: return len(arr)\n    first = arr[0]\n    last = arr[-1]\n    min_change = min(first, last) - 1\n    idx = -1\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            idx = i\n            break\n    if idx == -1: return len(arr) - 1\n    idx_next = idx + 1\n    if idx_next < len(arr):\n        idx_next += 1\n        while idx_next < len(arr):\n            if arr[idx_next]!= arr[idx]:\n                min_change += 1\n                break\n            idx_next += 1\n    return min_change\n",
        "test": "assert     smallest_change([1,1]) == 1",
        "num_ids": 409,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    return [x for x in lst1 if len(x) < len(lst2)]\n",
        "test": "assert     total_match(lst1=['a','b','c'], lst2=['a','b','c']) == ['a','b','c']",
        "num_ids": 388,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if a <= 100:\n        return True\n    if a % 2 == 0:\n        return False\n    for i in range(3, int(a**0.5) + 1, 2):\n        if a % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_multiply_prime(1) == True",
        "num_ids": 410,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    elif n < 0:\n        return False\n    else:\n        for i in range(1, n):\n            if n % i == 0:\n                return False\n        return True",
        "test": "assert     is_simple_power(5, 0) == False",
        "num_ids": 368,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    if type(a) == int:\n        if a >= 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     iscube(5) is True",
        "num_ids": 177,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    # Python3:\n    # [1] = https://www.w3schools.com/python/python_operators.asp\n    # [2] = https://www.w3schools.com/python/python_operators.asp\n    # [3] = https://www.w3schools.com/python/python_operators.asp\n    # [4] = https://www.w3schools.com/python/python_operators.asp\n    # [5] = https://www.w3schools.com/python/python_operators.asp\n    # [6] = https://www.w3schools.com/python/python_operators.asp\n    # [7] = https://www.w3schools.com/python/python_operators.asp\n    # [8] = https://www.w3schools.com/python/python_operators.asp\n    # [9] = https://www.w3schools.com/python/python_operators.asp\n    # [10] = https://www.w3schools.com/python/python_operators.asp\n    # [11] = https://www.w3schools.com/python/python_operators.asp\n    # [12] = https://www.w3schools.com/python/python_operators.asp\n    # [13] = https://www.w3schools.com/python/python_operators.asp\n    # [14] = https://www.w3schools.com/python/python_operators.asp\n    # [15] = https://www.w3schools.com/python/python_operators.asp\n    # [16] = https://www.w3schools.com/python/python_operators.asp\n    # [17] = https://www.w3schools.com/python/python_operators.asp\n    # [18] = https://www.w3schools.com/python/python_operators.asp\n    # [19] = https://www.w3schools.com/python/python_operators.asp\n    # [20] = https://www.w3schools.com/python/python_operators.asp\n    # [21] = https://www.w3schools.com/python/python_operators.asp\n    # [22] = https://www.w3schools.com/python/python_operators.asp\n    # [23] = https://www.w3schools.com/python/python_operators.asp\n    # [24] = https://www.w3schools.com/python/python_operators.asp\n    # [25] = https://www.w3schools.com/python/python_operators.asp\n    # [26] = https://www.w3schools.com/python/python_operators.asp\n    # [27] = https://www.w3schools.com/python/python_operators.asp\n    # [28] = https://www.w3schools.com/python/python_operators.asp\n    # [29] = https://www.w3schools.com/python/python_operators.asp\n    # [30] = https://www.w3schools.com/python/python_operators.asp\n    # [31] = https://www.w3schools.com/python/python_operators.asp\n    # [32] = https://www.w3schools.com/python/python_operators.asp\n    # [33] = https://www.w3schools.com/python/python_operators.asp\n    # [34] = https://www.w3schools.com/python/python_operators.asp\n    # [35] = https://www.w3schools.com/python/python_operators.asp\n    # [36] = https://www.w3schools.com/python/python_operators.asp\n    # [37] = https://www.w3schools.com/python/python_operators.asp\n    # [38] = https://www.w3schools.com/python/python_operators.asp\n    # [39] = https://www.w3schools.com/python/python_operators.asp\n    # [4",
        "test": "assert     hex_key(\"5\") == 0",
        "num_ids": 1928,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    bin_str = \"\"\n    if decimal < 0:\n        decimal *= -1\n",
        "test": "assert     decimal_to_binary(1000) == '101010101'",
        "num_ids": 343,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    return len(s) >= 3 and all(letter in s[i:i+3] for i in range(len(s)-2))\n",
        "test": "assert     is_happy('') == 0",
        "num_ids": 317,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    grade_table = [\n    'A+', 'A', 'A-', 'B+', 'B', 'B-',\n    'C+', 'C', 'C-', 'C', 'C-', 'C',\n    'D+', 'D', 'D-', 'D', 'D-', 'D',\n    'E+', 'E', 'E-', 'E', 'E-', 'E',\n    'F+', 'F', 'F-', 'F', 'F-', 'F',\n    'A', 'A+', 'A-', 'B+', 'B', 'B-',\n    'C', 'C+', 'C-', 'C', 'C-', 'C',\n    'D', 'D+', 'D', 'D-', 'D', 'D',\n    'E', 'E+', 'E', 'E-', 'E', 'E',\n    'F', 'F+', 'F-', 'F', 'F-', 'F',\n    '', '', '', '', '', '',\n    ]\n",
        "test": "assert     numerical_letter_grade([4.0, 3.7, 3.0, 3.0, 3.0]) == ['A+', 'A', 'B+', 'B', 'C+', 'C'], 'The test is wrong'",
        "num_ids": 1240,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "    check = True\n    for i in range(2, len(string)):\n        # print(str(string[i]))\n        # print(len(str(string[i])))\n        if len(str(string[i])) == 1:\n            check = False\n    return check\n",
        "test": "assert     prime_length('hello') == False",
        "num_ids": 196,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    count = 0\n    for digit in str(n):\n        if digit == '1':\n            count += 1\n        else:\n            break\n    return count\n",
        "test": "assert     starts_one_ends(0) == 0",
        "num_ids": 310,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    sum = 0\n    while N!= 0:\n        sum += N % 10\n        N //= 10\n    if sum == 0:\n        return \"0\"\n    elif sum == 1:\n        return \"1\"\n    else:\n        return str(sum)\n",
        "test": "assert ",
        "num_ids": 207,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    new_lst = []\n    odd = []\n    even = []\n    for num in lst:\n        if num % 2 == 0:\n            new_lst.append(num)\n        else:\n            even.append(num)\n    for num in new_lst:\n        odd.append(num)\n    for num in even:\n        lst.remove(num)\n    return lst + odd\n",
        "test": "assert     add([]) == []",
        "num_ids": 519,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "    s = str(s).lower()\n    s = re.sub('[^a-zA-Z]','', s)\n    s = s.split(' ')\n    s = [s[i].strip() for i in range(len(s))]\n    s =''.join(s)\n    return s\n",
        "test": "assert     anti_shuffle(' hello ') == 'hellohellonos'",
        "num_ids": 478,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    row_set = set()\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            row_set.add(lst[i][j])\n    row_set.sort()\n    return [(row_set.index(x) + 1, x) for x in range(len(lst[0]) + 1)]\n",
        "test": "assert     [0, 1, 2, 3, 4], \"Error - get_row, got: [0, 1, 2, 3, 4]\"",
        "num_ids": 1433,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    total = sum(array)\n    if total % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)\n",
        "test": "assert     sort_array([0, 1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4, 5], \"Sort array: should be [0, 1, 2, 3, 4, 5]\"",
        "num_ids": 450,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    return \"\".join(i+j for i,j in zip(s[::2],s[1::2]))\n",
        "test": "assert ",
        "num_ids": 256,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    if lst == None:\n        return None\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return lst[i-1]\n",
        "test": "assert     next_smallest([-2, -2, 0, 2, 4]) == None, \"Next_smallest should have returned None as expected\"",
        "num_ids": 265,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    pattern = r'[^.]+?'\n    count = 0\n    for word in S.split('.'):\n        word = word[1:]\n        if word[0] == \"?\" or word[0] == \"!\":\n            continue\n        elif word[0] == \".\":\n            continue\n        elif word[0].isalpha():\n            return 0\n        else:\n            count += 1\n    return count\n",
        "test": "assert is_bored('a?i') == 1, \"I should be True.\"",
        "num_ids": 385,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    return (x == y or x == z or x == sum(x) or x == sum(y) or x == sum(z))\n",
        "test": "assert     any_int(2, 2, 2) == True, 'any_int did not return true'",
        "num_ids": 394,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    # TODO: Write your own version of the encode function\n    # Replace all vowels in the message with a letter that appears \n    # 2 places ahead of that vowel in the english alphabet. \n    # For example, in this message 'GRT', the vowel appears \n    # 2 places after GR at the end. \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     encode('Hi!') == 'He!HoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoHoH",
        "num_ids": 3398,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "    lst = list(lst)\n    lst.sort()\n    # for i in range(len(lst)):\n    #     lst[i] = lst[i]**2\n    # lst.sort()\n    lst_product = [lst[i] for i in range(len(lst)) if lst[i] > 0]\n    # print(lst_product)\n    return sum(lst_product)\n",
        "test": "assert     skjkasdkd([]) == 0",
        "num_ids": 297,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    \n    # your code goes here\n    #dict=dict.lower()\n    #print(dict)\n    #dict_keys=dict.keys()\n    #print(dict_keys)\n    #dict_values=dict.values()\n    #print(dict_values)\n    if(type(dict) is dict):\n        \n        for value in dict.values():\n            if type(value) is str:\n                if (value.islower()):\n                    return True\n            else:\n                if (value.isupper()):\n                    return True\n        return False\n    else:\n        return False\n    #return True\n",
        "test": "assert     check_dict_case({'one':1, 'two':2, 'three':3}) == False",
        "num_ids": 485,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    primes = []\n    if n <= 2:\n        return []\n    for i in range(n,0,-1):\n        if n % i == 0:\n            primes.append(i)\n    return primes\n",
        "test": "assert     count_up_to(-5) == []",
        "num_ids": 355,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "    # Write your code here\n    a = str(a)\n    b = str(b)\n    # a = int(a)\n    # b = int(b)\n    c = 0\n    for i in a:\n        c = c + int(i)\n    for j in b:\n        c = c * int(j)\n    return c\n    \n    \n    # if a == 0:\n    #     print(0)\n    # else:\n    #     print(int(a))\n    #     print(int(b))\n    #     print(multiply(a, b))\n    #     print(multiply(a, b))\n",
        "test": "assert     multiply(0, 5) == 0",
        "num_ids": 360,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    upper_vowels = 0\n    index = 0\n    for char in s:\n        if char.isupper():\n            upper_vowels += 1\n        else:\n            index += 1\n    return upper_vowels\n",
        "test": "assert     count_upper('a') == 0",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    # TODO: Clarify whether this is good or bad.\n    # TODO: Check if the given value is a string.\n",
        "test": "assert     closest_integer(\"-14.5\") == -15",
        "num_ids": 299,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    return [0 if (n & 1) else n//2, n//2 + n%2]\n",
        "test": "assert     make_a_pile(100) == [9,6,2,4,5,6,8,9,7,10,12]",
        "num_ids": 157,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    #raise NotImplementedError(\"Implement this function!\")\n    #TODO: write your solution\n    \n    \n    split_words=s.split(\",\")\n    \n    return split_words\n",
        "test": "assert     words_string(\"abcdefghijklmnopqrstuvwxyz\") == [\"abcdefghijklmnopqrstuvwxyz\"]",
        "num_ids": 409,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    if x > y:\n        return -1\n    elif x < y:\n        return y\n    else:\n        return x\n",
        "test": "assert     choose_num(3, 3) == 3",
        "num_ids": 397,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "    n = abs(n)\n    m = abs(m)\n    if m == 0:\n        return \"0b11\"\n    else:\n        if n < m:\n            return \"-\" + str(rounded_avg(n, m-1))\n        else:\n            return str(rounded_avg(n-1, m)) + str(rounded_avg(n, m-1))",
        "test": "assert ",
        "num_ids": 270,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    return sorted(set(x))\n",
        "test": "assert     unique_digits([]) == []",
        "num_ids": 459,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    result = []\n    # Sort the given array\n    arr.sort()\n    # Reverse the given array\n    arr.reverse()\n    # Reverse the given array and replace each digit with its corresponding name\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            result.append(arr[i])\n        else:\n            result.append(arr[i] * 2)\n    return result\n",
        "test": "assert     by_length([]) == []",
        "num_ids": 768,
        "indeed": false
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    fact = [1, 2, 3, 5, 7]\n    a = []\n    for i in range(n):\n        a.append(fact[i] * (i+1))\n    return a\n",
        "test": "assert     f(5) == [6, 120, 120, 720, 50, 720, 50, 1860, 1260, 720, 1860, 1260, 720]",
        "num_ids": 303,
        "indeed": false
    },
    {
        "number": 107,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    even = odd = 1\n    for i in range(2, n):\n        if n % i == 0:\n            even += 1\n        else:\n            odd += 1\n        if even % 2 == 0 and odd % 2 == 0:\n            return (even, odd)\n    return (even, odd)\n",
        "test": "assert     even_odd_palindrome(1) == (1, 1)",
        "num_ids": 512,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    n = len(arr)\n    return sum(arr) // 10\n",
        "test": "assert     count_nums([-1, 0, 10]) == 0",
        "num_ids": 351,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if arr == []:\n        return True\n    if len(arr)==1:\n        return True\n    left,right = 0,len(arr)-1\n    while(left<right):\n        if arr[left]<arr[right]:\n            arr[left],arr[right]=arr[right],arr[left]\n            left+=1\n            right-=1\n        elif arr[left]>arr[right]:\n            arr[left],arr[right]=arr[right],arr[left]\n            left+=1\n            right-=1\n        else:\n            return False\n    return True\n",
        "test": "assert     move_one_ball([3, 4, 1]) == True",
        "num_ids": 516,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "    # your code here\n    \n    if len(lst1) == 1:\n        return \"NO\"\n    if len(lst1) == 2:\n        return exchange(lst1[0], lst1[1])\n    if len(lst2) == 2:\n        return exchange(lst2[0], lst2[1])\n    \n    for i in range(len(lst1)):\n        if not lst1[i] % 2 == lst2[i] % 2:\n            return \"NO\"\n    return \"YES\"\n",
        "test": "assert     exchange([2, 3, 4], [4, 3, 2]) == 'YES'",
        "num_ids": 367,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    d = {}\n    for letter in test:\n        if letter not in d:\n            d[letter] = 1\n        else:\n            d[letter] = d[letter] + 1\n    return d\n",
        "test": "assert ",
        "num_ids": 612,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    if not s or not c:\n        return False\n    if len(s) < len(c):\n        return False\n    if c[0]!= s[-1]:\n        return False\n    if not delete_string(s,c):\n        return False\n    return reverse_delete(s[:-1],c)\n",
        "test": "assert     reverse_delete(\"a\", \"a\") == (\"a\", True)",
        "num_ids": 268,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    \n    \n    even_count = [str(lst).count(str(i)[0]) for i in lst]\n    \n    return even_count\n",
        "test": "assert     odd_count(['0', '0', '0', '1']) == [0, 1, 0, 0], \"wrong\"",
        "num_ids": 478,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    def minSubArraySumHelper(arr, start, end):\n        if arr[start] == 0:\n            return 0\n        res = float('inf')\n        for i in range(start, end):\n            res = min(res, arr[i] + minSubArraySumHelper(arr, i + 1, end))\n        return res\n    def minSubArraySum(nums):\n        \"\"\"\n        Given an array of integers nums, find the minimum sum of any non-empty sub-array\n        of nums.\n        1. max(nums) == 0\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n        return min(nums) + minSubArraySumHelper(nums, 0, len(nums) - 1)\n    return minSubArraySum(nums",
        "test": "assert ",
        "num_ids": 500,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    import math\n    \n    # fill max_sum with each column as well\n    def calc_max_sum(grid, capacity):\n        col_max_sum = [0] * grid.shape[1]\n        for i in range(grid.shape[1]):\n            col_max_sum[i] = max([grid[j][i] for j in range(grid.shape[0])])\n        max_sum = 0\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] > 0 and col_max_sum[j] + grid[i][j] <= capacity:\n                    max_sum += col_max_sum[j]\n        return max_sum\n    \n    # max_sum = 0\n    # for i in range(len(grid)):\n    #     for j in range(len(grid[0])):\n    #         if grid[i][j] > 0 and (max_sum + grid[i][j]) <= capacity:\n    #             max_sum += grid[i][j]\n    #             print(max_sum)\n    #         else:\n    #             max_sum += 0\n    #             print(0)\n",
        "test": "assert     max_fill([[1,2,3,4],[5,6,7,8]], 4) == 1",
        "num_ids": 932,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    sorted = []\n    for x in range(len(arr)):\n        n = int(arr[x])\n        if n > 0:\n            sorted.append(n)\n    sorted = sorted[::-1]\n    return sorted\n",
        "test": "assert         sort_array( [1,2,3,4,5,6,7,8,9,10] ) == [10,9,8,7,6,5,4,3,2,1]",
        "num_ids": 409,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if s == \"\":\n        return []\n    else:\n        return [word for word in s.split() if word.count(word[0]) >= n]\n",
        "test": "assert     select_words(\"a\", 4) == []",
        "num_ids": 594,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    \n    if len(word) == 0:\n        return ''\n    \n    left = word[0]\n    right = word[-1]\n    if left not in \"aeiouAEIOU\":\n        left = ''\n    if right not in \"aeiouAEIOU\":\n        right = ''\n    if left == right:\n        return ''\n",
        "test": "assert     get_closest_vowel('bought') == 'e'",
        "num_ids": 475,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    def is_balanced(paren):\n        count = 0\n        for char in paren:\n            if char == '(':\n                count += 1\n            else:\n                count -= 1\n            if count < 0:\n                return False\n        return count == 0\n    \n    def is_good(paren):\n        count = 0\n        for char in paren:\n            if char == '(':\n                count += 1\n            else:\n                count -= 1\n            if count < 0:\n                return False\n        return count == 0\n    \n    if len(lst) < 2:\n        return 'Yes'\n    elif len(lst) == 2:\n        if is_balanced(lst[0]) and is_balanced(lst[1]):\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        current = lst[0]\n        next_lst = lst[1:]\n        if is_balanced(current) and is_balanced(next_lst[0]) and is_balanced(next_lst[1]):\n            return 'Yes'\n        else:\n            return 'No'",
        "test": "assert     match_parens(['(()())', '))()()()()']) == 'No'",
        "num_ids": 627,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    def partition(arr, low, high, k):\n        if (high - low) % 2 == 0:\n            mid = (high + low + 1) // 2\n        else:\n            mid = (high + low + 1) // 2 - 1\n        \n        pivot = arr[mid]\n        i, j = low, mid + 1\n        while True:\n            while i < j:\n                while i < len(arr) and arr[i] > pivot:\n                    i += 1\n                while j > 0 and arr[j] < pivot:\n                    j -= 1\n                if i < j:\n                    arr[i], arr[j] = arr[j], arr[i]\n                else:\n                    break\n            arr[i], arr[mid] = arr[mid], arr[i]\n            if i == mid:\n                arr[j], arr[i] = arr[i], arr[j]\n            else:\n                arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        arr[mid], arr[high] = arr[high], arr[mid]\n        return mid\n    \n    def quicksort(arr, low, high, k):\n        if len(arr) <= 1:\n            return arr\n        if k < arr[low]:\n            quicksort(arr, low, (low + high)//2, k)\n        if k < arr[high]:\n            quicksort(arr, (low + high)//2 + 1, high, k)\n        return arr\n    \n    if k > len(arr):\n        return quicksort(arr, 0, len(arr) - 1, k)\n    if len(arr) == 0:\n        return []\n    if k == 0:\n        return arr\n    pivot = arr[(len(arr) - 1) // 2]\n    arr.sort()\n    return quicksort(arr, 0, len(arr) - 1, k - 1) + [pivot] + quicksort(arr, 0, len(arr) - 1, k)\n    \n    \ndef maximum3(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n",
        "test": "assert ",
        "num_ids": 590,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "    even=0\n    odd=0\n    for i in lst:\n        if i%2==0:\n            even=even+i\n        else:\n            odd=odd+i\n    return even+odd",
        "test": "assert     solution([]) == 0",
        "num_ids": 249,
        "indeed": false
    },
    {
        "number": 122,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "    ans = 0\n    for i in range(len(arr)):\n        ans += arr[i]\n        if len(str(ans)) <= k:\n            break\n    return ans\n",
        "test": "assert ",
        "num_ids": 212,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    if n == 1:\n        return [1]\n",
        "test": "assert     get_odd_collatz(1) == [1], \"get_odd_collatz does not have the correct output\"",
        "num_ids": 736,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    date_format = \"%m-%d-%Y\"\n    if not len(date) == 10:\n        return False\n    if not date.isdigit():\n        return False\n    if len(date) > 11:\n        return False\n    if date[2] == \"/\":\n        return False\n    if date[3] == \"/\":\n        return False\n    if date[4] == \"/\":\n        return False\n    if date[5] == \"/\":\n        return False\n    if date[6] == \"/\":\n        return False\n    if date[7] == \"/\":\n        return False\n    if date[8] == \"/\":\n        return False\n    if date[9] == \"/\":\n        return False\n    if date[10] == \"/\":\n        return False\n    try:\n        day = int(date[0:2])\n        month = int(date[3:5])\n        year = int(date[6:10])\n        if not 1 <= day <= 31:\n            return False\n        if not 1 <= month <= 12:\n            return False\n        if not (year % 4 == 0 and year % 100!= 0 or year % 400 == 0):\n            return False\n        if not(month in [1, 3, 5, 7, 8, 10, 12]) or not (month in [4, 6, 9, 11]):\n            return False\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     valid_date(\"Jan-01-2019\") == False",
        "num_ids": 1516,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "    txt = txt.replace(' ', '')\n    txt = txt.lower().split(',')\n    if not txt:\n        return []\n    return txt\n",
        "test": "assert     split_words('a, b, c, d, e') == ['a', 'b', 'c', 'd', 'e']",
        "num_ids": 579,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    return sorted(lst) == lst\n",
        "test": "assert     is_sorted([1, 2, 2, 2, 5]) == True",
        "num_ids": 325,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    \n    return \"NO\"\n    \n    \n    \n    \n",
        "test": "assert     intersection(1, 1), \"1 should be a prime number\"",
        "num_ids": 272,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "    magn = list(set(arr))\n    sum = 0\n    for v in magn:\n        if v >= 0:\n            sum += int(v*v)\n        else:\n            sum -= int(v*v)\n    return sum\n",
        "test": "assert     prod_signs([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) == 0",
        "num_ids": 434,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    n = len(grid)\n    if n <= 2:\n        return grid\n    \n    for i in range(2, n + 1):\n        grid[0][i] += grid[0][i - 1]\n        grid[i][0] += grid[i - 1][0]\n        grid[i][n - 1] += grid[i - 1][n - 1]\n    \n    for j in range(1, n):\n        grid[j][j] += grid[j - 1][j]\n        grid[0][j] += grid[j - 1][0]\n        grid[n - 1][j] += grid[j - 1][n - 1]\n    \n    for i in range(n - 2, -1, -1):\n        for j in range(1, n):\n            grid[i][j] += min(grid[i + 1][j], grid[i][j + 1])\n    \n    return grid[0][0]\n",
        "test": "assert     minPath(grid, 4) == [1, 2, 3, 4, 5, 6, 7]",
        "num_ids": 572,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    result = [0, 1]\n    i = 2\n    while i < n + 1:\n        result.append(result[i - 1] + result[i - 2] + result[i - 3])\n        i += 2\n    return result[1:]\n",
        "test": "assert ",
        "num_ids": 1167,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    if n % 2 == 1:\n        return 0\n    return (n * digits(n//2))\n",
        "test": "assert         digits(2) == 0",
        "num_ids": 325,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    if isinstance(string, str) and string[0] == '[' and string[-1] == ']':\n        for i in range(1, len(string) - 1):\n            if string[i].isnumeric() or string[i] in ['{', '[', ']', '}']:\n                continue\n            else:\n                return False\n    else:\n        return False\n",
        "test": "assert     is_nested(\"[[[[]]]]][[[[]]]][[[[]]]]\") == True",
        "num_ids": 329,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "    result = 0\n    for i in range(len(lst)):\n        result += lst[i]**2\n    return result\n",
        "test": "assert     sum_squares([-3, -2, 0, 0]) == -3, \"The square root of -3 is -3\"",
        "num_ids": 294,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "    # get the last char of a string\n    last_char = txt[-1]\n    # if it is an alphabetical letter, return True\n    if last_char.isalpha():\n        return True\n    # if it is not an alphabetical letter, return False\n    return False\n",
        "test": "assert     check_if_last_char_is_a_letter(\"gusto\"), \"should be True\"",
        "num_ids": 317,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "    left_side = 0\n    right_side = 1\n    while right_side < len(arr):\n        if arr[left_side] <= arr[right_side]:\n            left_side += 1\n        else:\n            return right_side\n        right_side += 1\n    return -1\n",
        "test": "assert     can_arrange([]) == -1",
        "num_ids": 328,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    def largest_smallest_integers(lst):\n        if not lst:\n            return None, None\n        if len(lst) == 1:\n            return lst[0], lst[0]\n        if lst[0] < lst[1]:\n            return lst[0], lst[0]\n        else:\n            return lst[1], lst[1]\n    return largest_smallest_integers(lst)\n",
        "test": "assert     largest_smallest_integers([-2, -3, -2, 0]) == (-3, -3), \"Largest and smallest of negative integers\"",
        "num_ids": 382,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "    if type(a) == str:\n        return b\n    elif type(b) == str:\n        return a\n    elif type(a) == int and type(b) == int:\n        return max(a, b)\n    else:\n        return a if a > b else b\n",
        "test": "assert     compare_one(1, 0) == 1",
        "num_ids": 509,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "    return n == 4 or n == 6 or n == 8\n",
        "test": "assert     is_equal_to_sum_even(3) == False, '3 is not equal to 3'",
        "num_ids": 294,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "    if n == 0:\n        return 1\n    if n == 1:\n        return n\n    return n * special_factorial(n - 1)\n",
        "test": "assert     special_factorial(0) == 1",
        "num_ids": 269,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    no_spaces = re.sub(\"[ ]+\", \"-\", text)\n    no_spaces = re.sub(\"\\\\s+\", \"-\", no_spaces)\n    # no_spaces = re.sub(\"\\\\s+\", \"_\", no_spaces)\n    return no_spaces",
        "test": "assert fix_spaces(\"     1 3\") == \" 1 3\"",
        "num_ids": 454,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    \n    if len(file_name) <= 2:\n        return 'No'\n    \n    if file_name[:3]!= '0' and file_name[:3]!= '1':\n        return 'No'\n    \n    if file_name[:3] == '0':\n        return 'No'\n    \n    if not file_name[3:].isdigit():\n        return 'No'\n    \n    if len(file_name) == 3 and file_name[1].isdigit() and file_name[2].isalpha():\n        return 'No'\n    \n    return 'Yes'\n",
        "test": "assert file_name_check(\"123456789.txt\") == 'No'",
        "num_ids": 440,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    if lst==[]:\n        return 0\n    s=0\n    for i in range(len(lst)):\n        if lst[i]%3==0:\n            s+=lst[i]*lst[i]\n        elif lst[i]%4==0:\n            s+=lst[i]*lst[i]\n        else:\n            pass\n    return s\n        \n        ",
        "test": "assert sum_squares([]) == 0",
        "num_ids": 732,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    sentence = sentence.lower()\n    return''.join(sentence.split()[:1])\n    \n    \ndef words_in_sentence_1(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n",
        "test": "assert     words_in_sentence(\"3 sentence is acceptable\") == \"3 sentence is acceptable\"",
        "num_ids": 308,
        "indeed": false
    },
    {
        "number": 144,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    numerator, denominator = x.split('/')\n    numerator = int(numerator)\n    denominator = int(denominator)\n    return numerator * n.__truediv__(denominator) == int(x)\n",
        "test": "assert ",
        "num_ids": 233,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "    sum = 0\n    for num in nums:\n        sum += num\n    nums.sort(key=lambda x: x * 10)\n    return nums\n",
        "test": "assert     order_by_points([]) == []",
        "num_ids": 514,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "    # hint: if you get a zero division error, go ahead and fix it\n    # and check your code, it will help you get a perfect answer.\n    if (len(nums) == 0):\n        return 0\n    evenNums = 0\n    oddNums = 0\n    for num in nums:\n        if num % 10 == 0:\n            evenNums += 1\n        else:\n            oddNums += 1\n    if (evenNums + oddNums == 0):\n        return 0\n    else:\n        return (evenNums + oddNums + 1)\n",
        "test": "assert ",
        "num_ids": 245,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "    if n == 1:\n        return 1\n    # The first triple is (1, 3, 7)\n    # The first triple is (1, 3, 8)\n    # The second triple is (1, 5, 9)\n    # The third triple is (1, 2, 3)\n    a = [1, 3, 7, 13, 21]\n    for i in range(3, n):\n        a.append(a[i - 1] * i - i + 1)\n    return len(a)\n",
        "test": "assert     get_max_triples(1) == 1",
        "num_ids": 246,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "    result = []\n    for planet in planet1.split(' '):\n        if planet in planet2.split(' '):\n            result.append(planet)\n        else:\n            pass\n    result.sort()\n    return result\n    \ndef next(planet1, planet2):\n    '''\n    There are seven planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    next(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    next(\"Mercury\", \"Uranus\") ==> (\"Venus\")\n    next(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planet1_orbit = []\n    planet2_orbit = []\n    for i in range(len(planet1)):\n        if planet1[i] in planet2:\n            planet2_orbit.append(planet1[i])\n            continue\n        planet1_orbit.append(planet1[i])\n    for j in range(len(planet2)):\n        if planet2[j] in planet1:\n            planet1_orbit.append(planet2[j])\n            continue\n        planet2_orbit.append(planet2[j])\n    return planet1_orbit, planet2_orbit\n    \ndef ln(planet1, planet2):\n    '''\n    There are seven planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    ln(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    ln(\"Mercury\", \"Uranus\") ==> (\"Venus\")\n    ln(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planet1_orbit = []\n    planet2_orbit = []\n    for i in range(len(planet1)):\n        if planet1[i] in planet2:\n            planet2_orbit.append(planet1[i])\n            continue\n        planet1_orbit.append(planet1[i])\n    for j in range(len(planet2)):\n        if planet2[j] in planet1:\n            planet1_orbit.append(planet2[j])\n            continue\n        planet2_orbit.append(planet2[j])\n    return planet1_orbit, planet2_orbit\n    \ndef lg(planet1, planet2):\n    '''\n    There are seven planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    lg(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    lg(\"Mercury\", \"Uranus\") ==> (\"Venus\")\n    lg(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"",
        "test": "assert     bf('Mercury', 'Uranus') == ('Mercury', 'Uranus', 'Neptune')",
        "num_ids": 2359,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    # Approach 1: using dictionary\n    import collections\n    d = collections.defaultdict(list)\n    for w in lst:\n        d[len(w)].append(w)\n    return sorted(d.values(), key=len)\n",
        "test": "assert     sorted_list_sum([]) == [], \"Empty list is not possible.\"",
        "num_ids": 727,
        "indeed": false
    },
    {
        "number": 150,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if (n!= 1) and (n!= 2):\n        if n % 2 == 0:\n            if x == y:\n                return x\n            else:\n                return y\n        else:\n            if x % 2 == 0:\n                return x\n            else:\n                return y\n    else:\n        if n == 1:\n            return x\n        else:\n            if x == y:\n                return x\n            else:\n                return y\n",
        "test": "assert     x_or_y(3, 3, 3) == 3",
        "num_ids": 477,
        "indeed": false
    },
    {
        "number": 151,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "    if lst == []:\n        return 0\n    else:\n        odd = 0\n        for i in lst:\n            if i % 2 == 1:\n                odd += i\n        return odd\n",
        "test": "assert     double_the_difference([]) == 0",
        "num_ids": 184,
        "indeed": false
    },
    {
        "number": 152,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    return [abs(guess-score) for score,guess in zip(game,guess)]\n",
        "test": "assert     compare([0,0,0,0], [0,0,0,0]) == [0,0,0,0]",
        "num_ids": 628,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "    \n    if len(extensions) == 0:\n        return class_name\n    \n    # find the strongest extension\n    extension_strength = max([1, min([abs(cap - sm) for cap, sm in zip(class_name.split(), extension)])])\n    # find the one with the same strength\n    for i in range(len(extensions)):\n        if extensions[i] == class_name:\n            return extensions[i].lower() + extensions[i].upper()\n    \n    # if there are two or more extensions with the same strength,\n    # choose the one with the smallest strength\n    best = extensions[0]\n    for i in range(1, len(extensions)):\n        if extensions[i] == best:\n            break\n        if extensions[i] == class_name:\n            best = extensions[i]\n    return best.lower() + best.upper()\n    \ndef Reverse(string):\n    \"\"\"You are given a string. Your task is to reverse all the words.\n    Example:\n    Reverse(\"How are you doing\") == \"do\"\n    Reverse(\"Hi\") == \"i\"\n    Reverse(\"Hello\") == \"e\"\n    \"\"\"\n    return string[::-1]\n",
        "test": "assert     (\"Slices\" in Strongest_Extension(\"Slices\", [])), \"The given input is not valid.\"",
        "num_ids": 1633,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    c = a[0]\n    for i in range(len(b)):\n        if c!= b[i]:\n            return False\n    return True",
        "test": "assert     cycpattern_check(\"Hello \", \"He\") == False",
        "num_ids": 405,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    return ((num % 10) % 2, (num % 10) // 2)\n",
        "test": "assert     even_odd_count(2) == (0,1)",
        "num_ids": 231,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "    roman_numeral = [\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"]\n",
        "test": "assert ",
        "num_ids": 484,
        "indeed": false
    },
    {
        "number": 157,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    def sum_sq(a, b, c):\n        '''\n        Returns the sum of squares of the 3 sides of a triangle.\n        '''\n        return a * a + b * b + c * c\n    # a, b, c = [float(i) for i in input().split()]\n    # return sum_sq(a, b, c) == sum_sq(b, c, a) == sum_sq(a, c, b)\n    return sum_sq(a, b, c)!= 0 and sum_sq(b, c, a)!= 0 and sum_sq(a, c, b)!= 0 and sum_sq(b, c, a)!= 0\n",
        "test": "assert     right_angle_triangle(3, 3, 3) == True, 'right_angle_triangle() expected to be True!'",
        "num_ids": 550,
        "indeed": false
    },
    {
        "number": 158,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "    words_list = [w.lower().strip(\"\\\"'\") for w in words]\n    max_char = {}\n    for w in words_list:\n        max_char[w] = len(max(set(w), key = len))\n    return max(max_char, key = max_char.get)",
        "test": "assert     find_max([\"the\", \"word\", \"is\", \"only\", \"of\", \"word\"]) == \"the\"",
        "num_ids": 566,
        "indeed": false
    },
    {
        "number": 159,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "    # YOUR CODE HERE\n    if need >= 0:\n        if remaining >= need:\n            return [remaining, need]\n        elif need > remaining:\n            return [remaining, need]\n    else:\n        return [remaining, need]\n",
        "test": "assert     'eat' in globals()",
        "num_ids": 357,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    result = 0\n    for i in range(len(operator)):\n        if operator[i] == \"*\":\n            result = result * operand[i]\n        elif operator[i] == \"/\":\n            result = result / operand[i]\n        elif operator[i] == \"**\":\n            result = result ** operand[i]\n    return result",
        "test": "assert     do_algebra([\"-\", \"*\"], [0, 2]) == 5",
        "num_ids": 478,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "    if not s:\n        return \"\"\n",
        "test": "assert     solve(\"\") == \"\"",
        "num_ids": 368,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "    \n    if text:\n        md5_string = hashlib.md5()\n        md5_string.update(text.encode())\n        return md5_string.hexdigest()\n    return None\n",
        "test": "assert     string_to_md5('') == None",
        "num_ids": 413,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "    return [number for number in range(a, b+1) if number % 2 == 0]\n",
        "test": "assert     generate_integers(7, 10) == [7, 8, 9, 0, 1, 2, 3, 4, 5, 6]",
        "num_ids": 381,
        "indeed": false
    }
]