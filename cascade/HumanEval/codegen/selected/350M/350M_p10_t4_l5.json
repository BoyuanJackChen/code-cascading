[
    {
        "number": 0,
        "max_answer_num": 24,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "    for n in numbers:\n        if abs(n) < threshold:\n            return False\n    return True\n",
        "test": "assert     has_close_elements([1, 2, 3, 4, 5, 1, 6], 0.1)",
        "num_ids": 1815,
        "indeed": false
    },
    {
        "number": 1,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 220,
        "answer": "    if paren_string.count('(') + paren_string.count(')')!= paren_string.count('(') * 2:\n        return []\n",
        "test": "assert     separate_paren_groups('))') == []",
        "num_ids": 1162,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "    return round(number)\n",
        "test": "assert     truncate_number(0) == 0",
        "num_ids": 831,
        "indeed": false
    },
    {
        "number": 3,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "    for i in operations:\n        if i < 0:\n            return False\n    return True\n",
        "test": "assert     below_zero([-1, 2, -3, 4]) == False",
        "num_ids": 1914,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 320,
        "answer": "    return sum(map(abs, numbers)) / len(numbers)\n",
        "test": "assert     mean_absolute_deviation([0,0,0,0]) == 0.0",
        "num_ids": 1411,
        "indeed": false
    },
    {
        "number": 5,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "    return [el + delimeter for el in numbers]\n",
        "test": "assert     intersperse([], 0) == []",
        "num_ids": 2293,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "    out = []\n    for s in paren_string.split():\n        if s[0] == '(':\n            out.append(len(out))\n        elif s[-1] == '(':\n            out.append(len(out))\n        elif out[-1] > len(out):\n            out.append(len(out))\n    return out\n",
        "test": "assert     parse_nested_parens.__name__ == \"parse_nested_parens\"",
        "num_ids": 4105,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "    result = []\n    for s in strings:\n        if substring in s:\n            result.append(s)\n    return result",
        "test": "assert     filter_by_substring([\"abc\", \"def\", \"ghi\", \"jkl\"], \"j\") == [\"jkl\"]",
        "num_ids": 2097,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "    # Sum product is calculated using the current numbers.\n    # Take a list of integers, and sum their product.\n    # Return a tuple consisting of the sum and the product.\n    sum, product = 0, 1\n    for i in numbers:\n        sum += i\n    return sum, product\n",
        "test": "assert     sum_product([]) == (0,1)",
        "num_ids": 1052,
        "indeed": false
    },
    {
        "number": 9,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 270,
        "answer": "    l = []\n    for i in range(len(numbers)):\n        if len(l) == 0 or numbers[i] > l[-1]:\n            l.append(numbers[i])\n        else:\n            l[-1] = numbers[i]\n    return l\n",
        "test": "assert     rolling_max([]) == []",
        "num_ids": 1609,
        "indeed": false
    },
    {
        "number": 10,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "    # TODO: Write your code here\n    i = 0\n    last = ''\n    for i, c in enumerate(string):\n        # only use the longest suffix\n        if c in string[i+1:]:\n            last = string[i+1:][::-1]\n        # add suffix to the palindrome\n        last += c\n    # check if string is palindrome\n    if is_palindrome(last):\n        return last\n    else:\n        # reverse the suffix and prefix\n        return string[::-1] + last\n",
        "test": "assert     is_palindrome(\"racecar\") == True",
        "num_ids": 1678,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 350,
        "answer": "    c = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            c = c + '0'\n        else:\n            c = c + '1'\n    return c\n",
        "test": "assert     string_xor('0', '0') == '0'",
        "num_ids": 3305,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 22,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "    if len(strings) == 0:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n    longest_len = max(map(len, strings))\n    max_val = strings[0]\n    for i in range(1, len(strings)):\n        if len(strings[i]) > longest_len:\n            longest_len = len(strings[i])\n            max_val = strings[i]\n    return max_val",
        "test": "assert     longest(\"\") == None",
        "num_ids": 1364,
        "indeed": false
    },
    {
        "number": 13,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "    if a == b:\n        return a\n    if a > b:\n        return greatest_common_divisor(a - 1, b)\n    elif a < b:\n        return greatest_common_divisor(a + 1, b)\n",
        "test": "assert     greatest_common_divisor(1, 1) == 1",
        "num_ids": 947,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "    return sorted(string, key=lambda i: string.find(i, 1))\n",
        "test": "assert     all_prefixes(\"\") == []",
        "num_ids": 2404,
        "indeed": false
    },
    {
        "number": 15,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "    return'' * n + str(n)\n",
        "test": "assert     string_sequence(1) == '1'",
        "num_ids": 805,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "    result = 0\n    for char in string:\n        if char.lower()!= char:\n            result += 1\n    return result\n",
        "test": "assert     count_distinct_characters('') == 0",
        "num_ids": 1979,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 260,
        "answer": "    beat_range = {\n        'o': [1, 4],\n        '|': [2, 4],\n        '.|': [1, 4]\n    }\n    notes = [beat_range.get(note, []) for note in music_string.replace('|', '')]\n    return [len(notes[i]) for i in range(len(notes))]\n",
        "test": "assert     parse_music(\"\") == []",
        "num_ids": 5222,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "    # Split the string and create a list of characters, if the string is empty, return 0.\n    # Otherwise, go through each character and check if it is the same as the substring.\n    # Return the count of the total.\n    # Example\n    # Input:\n    # string: 'ab'\n    # substring: 'ab'\n    # Output:\n    # 3\n    # Explanation:\n    # 'a' occurs 3 times, so count is 3.\n    # 'a' occurs 1 time, so count is 1.\n    # 'aaaa' occurs 3 times, so count is 3.\n    # 'aaaa' occurs 1 time, so count is 1.\n    # If substring is not found, count is 0.\n    # If substring is found, return count.\n    \n    s = len(string)\n    if s == 0:\n        return 0\n    \n    count = 0\n    for i in range(len(string) - 1):\n        if string[i] == string[i + 1]:\n            count += 1\n        \n    return count\n    \n    # Brute force, how many times a substring can occur in the original string.\n    # Dynamic Programming\n    # Time Complexity: O(N)\n    # Space Complexity: O(N)\n    # O(N)\n",
        "test": "assert how_many_times(\"There are 4 strings with 6 digits\", \"tjkaz\") == 0",
        "num_ids": 1322,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "    return''.join([str(n) for n in sorted(numbers.split(' '))])\n",
        "test": "assert     sort_numbers(\"zero, one, two, three, four, five, six, seven, eight\")",
        "num_ids": 1028,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 350,
        "answer": "    return (min(numbers), max(numbers))\n",
        "test": "assert     find_closest_elements([1]) == (1, 1)",
        "num_ids": 1567,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "    return [n / float(numbers[0]) for n in numbers]\n",
        "test": "assert rescale_to_unit([]) == []",
        "num_ids": 2499,
        "indeed": false
    },
    {
        "number": 22,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "    return [int(x) for x in values if type(x) is int]\n",
        "test": "assert     filter_integers([1,2,3])!= []",
        "num_ids": 2575,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "    n = 0\n    for char in string:\n        n += 1\n    return n\n    \ndef strsplit(string: str) -> list:\n    \"\"\" Split given string into a list\n    >>> strsplit('aabccccc')\n    ['a', 'a', 'b', 'c', 'c']\n    \"\"\"\n    string_list = string.split()\n    return string_list\n",
        "test": "assert     strlen('') == 0",
        "num_ids": 685,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 210,
        "answer": "    if n < 2:\n        return 1\n    l = 2\n    for i in range(3, int(n ** 0.5), 2):\n        if n % i == 0:\n            l = i\n            break\n    return l\n",
        "test": "assert     largest_divisor(1) == 1",
        "num_ids": 777,
        "indeed": false
    },
    {
        "number": 25,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 300,
        "answer": "    primes = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            primes.append(i)\n    return primes\n",
        "test": "assert     factorize(1) == []",
        "num_ids": 1175,
        "indeed": false
    },
    {
        "number": 26,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n",
        "test": "assert     remove_duplicates([]) == []",
        "num_ids": 1752,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "    return string.lower()\n",
        "test": "assert flip_case(\"123\") == \"123\"",
        "num_ids": 890,
        "indeed": false
    },
    {
        "number": 28,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "    return ''.join(strings)\n",
        "test": "assert     concatenate([]) == \"\"",
        "num_ids": 877,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "test": "assert     filter_by_prefix([\"abc\"], \"a\") == [\"abc\"]",
        "num_ids": 3176,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "    return [int(n) for n in list(filter(lambda x: x >= 0, l))]\n",
        "test": "assert     get_positive([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 885,
        "indeed": false
    },
    {
        "number": 31,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n",
        "test": "assert is_prime(3) == True",
        "num_ids": 1004,
        "indeed": false
    },
    {
        "number": 32,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 350,
        "answer": "    if xs == []:\n        return 0.0\n    elif len(xs) % 2 == 1:\n        return 0.0\n    else:\n        return max([poly(xs[i:], xs[0]) for i in range(len(xs))])\n",
        "test": "assert     find_zero([0, 0]) == 0",
        "num_ids": 1283,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "    l = list(l)\n    l.sort()\n    return l\n",
        "test": "assert sort_third([]) == []",
        "num_ids": 1884,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "    # Sort the list\n    l.sort()\n    # Return list without duplicates\n    return l[:]\n",
        "test": "assert     unique([]) == []",
        "num_ids": 1317,
        "indeed": false
    },
    {
        "number": 35,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "    if len(l) == 0:\n        return None\n    else:\n        return max(l)\n",
        "test": "assert     max_element([3, 6, 8]) == 8, \"Should return 8, not 6\"",
        "num_ids": 2009,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 260,
        "answer": "    count = 0\n    for i in range(n):\n        if i%3 == 0 and i%5 == 0:\n            count += 1\n        elif i%3 == 0:\n            count += 1\n        elif i%5 == 0:\n            count += 1\n    return count\n",
        "test": "assert     fizz_buzz(0) == 0",
        "num_ids": 980,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "    even_index = 0\n    odd_index = 1\n    while even_index < len(l) and odd_index < len(l):\n        if l[even_index] % 2 == 0:\n            l[even_index], l[odd_index] = l[odd_index], l[even_index]\n            even_index += 1\n            odd_index += 1\n        else:\n            odd_index += 1\n    return l\n",
        "test": "assert sort_even([1, 2, 4, 7, 9, 3, 6, 5, 8, 10, 10, 4, 5])!= [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 9, 8]",
        "num_ids": 1972,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert     encode_cyclic(\"\") == \"\"",
        "num_ids": 2912,
        "indeed": false
    },
    {
        "number": 39,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "    if n == 0 or n == 1:\n        return n\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n",
        "test": "assert     prime_fib(1) == 1",
        "num_ids": 1143,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "    result = True\n    for x in range(len(l)):\n        for y in range(x+1, len(l)):\n            z = l[y] - l[x]\n            if z!= 0:\n                result = False\n    return result\n",
        "test": "assert     triples_sum_to_zero([-5, -5, 1, 1, -1, -2, 2, 2]) == False",
        "num_ids": 1090,
        "indeed": false
    },
    {
        "number": 41,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "    if n % 2 == 0:\n        return n//2\n    else:\n        return n - 1\n",
        "test": "assert     car_race_collision(1) == 0",
        "num_ids": 1628,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "    return [e + 1 for e in l]\n",
        "test": "assert     incr_list([]) == []",
        "num_ids": 954,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "    for i in l:\n        if l.count(i) == 2:\n            return True\n    return False\n",
        "test": "assert     pairs_sum_to_zero([1, 1, 1, 0, 1]) == False",
        "num_ids": 2805,
        "indeed": false
    },
    {
        "number": 44,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 390,
        "answer": "    return str(x)\n",
        "test": "assert     change_base(6, 1) == '6'",
        "num_ids": 860,
        "indeed": false
    },
    {
        "number": 45,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "    return (h ** 2) * (a / 2)\n",
        "test": "assert     triangle_area(1, 0) == 0.0",
        "num_ids": 720,
        "indeed": false
    },
    {
        "number": 46,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert     fib4(0) == 0",
        "num_ids": 976,
        "indeed": false
    },
    {
        "number": 47,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "    if l is None:\n        return None\n    else:\n        return sorted(l, key=lambda x: x)[int(len(l)/2)]\n",
        "test": "assert     median([4, 5, 6]) == 5",
        "num_ids": 2443,
        "indeed": false
    },
    {
        "number": 48,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "    text = text.replace(' ', '').lower()\n    return text == text[::-1]\n",
        "test": "assert     is_palindrome(text=\"\") == True",
        "num_ids": 1953,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n % p == 0:\n        return n // p\n    return modp(n - 2, p) + 2\n",
        "test": "assert     modp(0,1) == 0",
        "num_ids": 927,
        "indeed": false
    },
    {
        "number": 50,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "    return s.replace(\"\\\\\", \"\")",
        "test": "assert     decode_shift(\"\") == \"\"",
        "num_ids": 867,
        "indeed": false
    },
    {
        "number": 51,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "    # start off by making an empty string\n    vowels = ''\n    # go through each character in the string\n    for char in text:\n        if char.lower() in vowels:\n            # if the character is a vowel, remove it from the vowels string\n            vowels = vowels[:vowels.index(char)] + char + vowels[vowels.index(char)+1:]\n        else:\n            # otherwise, keep it\n            vowels = vowels + char\n    # return the new string\n    return vowels",
        "test": "assert     remove_vowels(\" \") == \" \"",
        "num_ids": 1219,
        "indeed": false
    },
    {
        "number": 52,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "    if t > sum(l) or t <= 0:\n        return False\n    if t == 0:\n        return True\n    for i in range(1, len(l)):\n        if l[i] < t:\n            return False\n    return True\n",
        "test": "assert     (below_threshold(l=[0,1,2,3,4,5], t=3) == False)",
        "num_ids": 860,
        "indeed": false
    },
    {
        "number": 53,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 210,
        "answer": "    return x + y\n",
        "test": "assert     add(2, 5) == 7",
        "num_ids": 297,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "    chars = 'abcdefghijklmnopqrstuvwxyz'\n    return any(s0[i] == s1[i] for i in range(len(s0)))\n",
        "test": "assert     same_chars(\"t\", \"u\") == False",
        "num_ids": 907,
        "indeed": false
    },
    {
        "number": 55,
        "max_answer_num": 30,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "test": "assert fib(1) == 1",
        "num_ids": 1751,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "    return all(len(a) == 1 or a[0] == \"(\" for a in brackets)\n    \n",
        "test": "assert     correct_bracketing(\">\") == True",
        "num_ids": 1216,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 270,
        "answer": "    if not l:\n        return False\n    if l[0] <= l[1]:\n        return True\n    for i in range(1, len(l)):\n        if l[i] <= l[i - 1]:\n            return True\n    return False\n",
        "test": "assert monotonic([1, 2, 3, 4, 5]), \"even elements in the list\"",
        "num_ids": 1210,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "    return sorted(set(l1).intersection(set(l2)))\n",
        "test": "assert     common([], []) == []",
        "num_ids": 1449,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 240,
        "answer": "    if n < 1: return 0\n    i = 2\n    prime_factor = 2\n    while i < n:\n        if n % i == 0:\n            prime_factor = i\n            n = n // i\n        else:\n            i = i + 1\n    return prime_factor\n",
        "test": "assert     largest_prime_factor(2) == 2",
        "num_ids": 932,
        "indeed": false
    },
    {
        "number": 60,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "    return sum(range(1, n+1))\n",
        "test": "assert     sum_to_n(0) == 0",
        "num_ids": 642,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            top = stack.pop()\n            if not top == \"(\":\n                return False\n    if stack:\n        return False\n    return True\n",
        "test": "assert     correct_bracketing(\"()))\") == False",
        "num_ids": 2222,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 350,
        "answer": "    x_hat = xs[0]\n    for i in range(1, len(xs)):\n        x_hat = x_hat * xs[i]\n    return x_hat\n",
        "test": "assert     derivative([0, 1, 0, 0, 0]) == 0",
        "num_ids": 2097,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 28,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert     fibfib(0) == 0",
        "num_ids": 1198,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "    a=0\n    for i in range(len(s)):\n        for j in s[i:]:\n            if j=='y':\n                a=a+1\n    return a\n",
        "test": "assert     isinstance(vowels_count(\"jimmy\"), int), '\"jimmy\" is not a string.'",
        "num_ids": 857,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 320,
        "answer": "    if shift == 1:\n        return x\n    elif shift == 2:\n        return str(x)[::-1]\n    elif shift > len(str(x)):\n        return str(x)[shift-1::-1]\n    else:\n        return str(x)[shift-1::-1]\n    \ndef digit_convert(x):\n    \"\"\"Convert integer x to string of digits. If x is not a valid integer, return None.\n    >>> digit_convert(121)\n    '1'\n    >>> digit_convert(1)\n    '1'\n    >>> digit_convert(11)\n    '1111'\n    \"\"\"\n    if isinstance(x, int):\n        return str(x)\n    else:\n        return None\n        \ndef find_missing_digits(x):\n    \"\"\"Find the number of missing digits in the integer x.\n    >>> find_missing_digits(1)\n    0\n    >>> find_missing_digits(10000)\n    2\n    \"\"\"\n    if isinstance(x, int):\n        return abs(x)\n    else:\n        return abs(x) - len(str(x))\n    \ndef find_prime_factors(x):\n    \"\"\"Find all prime numbers less than or equal to x.\n    >>> find_prime_factors(2)\n    [2]\n    >>> find_prime_factors(3)\n    [3, 2]\n    >>> find_prime_factors(8)\n    [2, 3, 5, 8]\n    \"\"\"\n    f = []\n    for num in range(2, x):\n        if is_prime(num):\n            f.append(num)\n    return f\n    \ndef find_divisors(x):\n    \"\"\"Find all divisors of x.\n    >>> find_divisors(6)\n    [1, 2, 3, 4, 5]\n    >>> find_divisors(12)\n    [1, 2, 3, 4, 6, 12]\n    \"\"\"\n    i = 2\n    divisors = []\n    while i <= x:\n        if x % i == 0:\n            divisors.append(i)\n            x //= i\n        else:\n            i += 1\n    if x!= 1:\n        divisors.append(x)\n    return divisors\n    \ndef num_to_words(n):\n    \"\"\"Number to words.\n    >>> num_to_words(42)\n    'One Two Three Four'.\n    \"\"\"\n    s = ''\n    while n > 0:\n        s +='' + str(n % 10)\n        n = n // 10\n    return s.strip()\n    \ndef words_to_num(s):\n    \"\"\"Words to numbers.\n    >>> words_to_num('One Two Three Four')\n    42\n    \"\"\"\n    n = 0\n    for word in s.split():\n        n += len(word) * (len(word) + 1) // 2\n    return n\n    \ndef is_prime(x):\n    \"\"\"Test if x is prime.\n    >>> is_prime(5)\n    True\n    >>> is_prime(0)\n    True\n    \"\"\"\n    if x == 2 or x == 3 or x == 5:\n        return True\n    if x % 2 == 0:\n        return False\n    for i in range(3, int(x**0.5)+1, 2):\n        if x % i == 0:\n            return False\n    return True\n    \ndef is_prime_factor(x):\n    \"\"\"Test if x is prime factor.\n    >>> is_prime_factor(2)\n    True\n    >>> is_prime_factor(3)\n    False\n    >>> is_prime_factor(16)\n    True\n    \"\"\"\n    if x <= 3:\n        return False\n    if x % 2 == 0:\n        return is_prime_factor(x//2)\n    for i in range(3, int(x**0.5)+1, 2):\n        if x % i == 0:\n            return False\n    return True\n",
        "test": "assert     circular_shift(5, 0) == \"5\"",
        "num_ids": 2888,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "    return sum(ord(c) for c in s if c.isupper())\n",
        "test": "assert     digitSum(\"\") == 0",
        "num_ids": 939,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 230,
        "answer": "    fruits = [\"apple\", \"orange\", \"mango\"]\n    total_fruits = len(fruits)\n    \n    apples = fruit_count(s, \"apple\")\n    oranges = fruit_count(s, \"orange\")\n    mango = fruit_count(s, \"mango\")\n    \n    return total_fruits - (apples + oranges + mango)\n    \n    \n    \ndef fruit_count(s, fruit):\n    \"\"\"\n    Given a string s and a fruit, return the number of \n    the fruits in the string. \n    For example, \"mango\" is the fruit of the string. \n    You may assume that fruit is a valid fruit in the string.\n    \"\"\"\n    count = 0\n    for char in s:\n        if char == fruit:\n            count += 1\n        else:\n            break\n    return count\n",
        "test": "assert         fruit_distribution(\"1 apple 2 oranges\", 3) == 3",
        "num_ids": 2853,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "    result = []\n    if len(arr) == 0:\n        return []\n    arr = sorted(arr)\n    idx = 0\n    for i in range(1,len(arr)):\n        if arr[i] % 2 == 0:\n            result.append(arr[idx])\n            idx += 1\n        else:\n            result.append(arr[i])\n    return result\n    ",
        "test": "assert     pluck([]) == []",
        "num_ids": 848,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 240,
        "answer": "    # time = O(n)\n    # space = O(n)\n    \n    val = sorted(lst)[-1]\n    \n    for i in range(len(lst)-1):\n        if lst[i] == val:\n            val = lst[i+1]\n            \n    return val\n",
        "test": "assert search([1]) == 1",
        "num_ids": 2397,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "    return [x for x in sorted(lst)]\n",
        "test": "assert     1==1",
        "num_ids": 2303,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 250,
        "answer": "    # loop through the triangle and sum the values\n    sum = a + b + c\n    # check if sum is divisible by the length of the sides\n    if(sum % 2 == 0):\n        # return the area of the triangle\n        return sum / 2\n    else:\n        # return the area of the triangle when the sum of the two sides is not divisible\n        return -1\n",
        "test": "assert     triangle_area(0, 0, 0) == 0, 'The correct area is 0'",
        "num_ids": 1475,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "    if len(q) == 1:\n        return True\n    elif sum(q) >= w:\n        return False\n    else:\n        max_q = max(q)\n        q = list(q)\n        q.pop(q.index(max_q))\n        return will_it_fly(q,w-max_q)\n",
        "test": "assert     will_it_fly(q=[1,2,3,4,5],w=0) == False",
        "num_ids": 1123,
        "indeed": false
    },
    {
        "number": 73,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "    m = len(arr)\n    if m == 1:\n        return 0\n    if m == 2:\n        if arr[0] == arr[1]:\n            return arr[0]\n        return arr[0]\n    if m == 3:\n        if arr[0] == arr[2]:\n            return arr[0]\n        return arr[0]\n    if m == 4:\n        if arr[2] == arr[3]:\n            return arr[2]\n        return arr[2]\n    if m == 5:\n        if arr[3] == arr[4]:\n            return arr[3]\n        return arr[3]\n    if m == 6:\n        if arr[3] == arr[4]:\n            return arr[3]\n        return arr[4]\n    if m == 7:\n        if arr[4] == arr[5]:\n            return arr[4]\n        return arr[4]\n    if m == 8:\n        if arr[5] == arr[6]:\n            return arr[5]\n        return arr[5]\n    if m == 9:\n        if arr[6] == arr[7]:\n            return arr[6]\n        return arr[6]\n    if m == 10:\n        if arr[7] == arr[8]:\n            return arr[7]\n        return arr[7]\n    \n    min_change = 0\n    start = m - 1\n    end = 0\n    while start >= 0 and end < m:\n        min_change = min(min_change, arr[start] - arr[end])\n        start -= 1\n        end += 1\n    return min_change\n",
        "test": "assert     smallest_change([0]) == 0, \"Should be empty\"",
        "num_ids": 1388,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 240,
        "answer": "    lst = []\n    \n    if len(lst2) == len(lst1):\n        for i in lst2:\n            lst.append(i)\n    \n    lst.sort()\n    \n    return lst\n",
        "test": "assert     total_match([], ['1', '2', '3', '4']) == []",
        "num_ids": 2537,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "    for x in range(2,a):\n        if (a % x == 0):\n            return False\n    return True\n",
        "test": "assert     is_multiply_prime(16) == False",
        "num_ids": 1018,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "    # If the number is a power of n, then it is simple\n    if n == 1:\n        return True\n    # If the number is not a power of n, then it is not simple\n    return not is_simple_power(x, n-1)\n",
        "test": "assert         is_simple_power(1, 1) is True",
        "num_ids": 1113,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "    if type(a)!= int or a <= 0:\n        return False\n    elif a == 1:\n        return True\n    elif a == 2:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(a)) + 1, 2):\n            if a % i == 0:\n                return False\n        return True\n",
        "test": "assert     iscube(2) == False",
        "num_ids": 1611,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "    digit = 0\n    for i in str(num):\n        digit += int(i)\n    return digit\n",
        "test": "assert     hex_key(0) == 0",
        "num_ids": 3185,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "    return f\"{decimal:b}\"\n",
        "test": "assert     decimal_to_binary(3) == '11'",
        "num_ids": 1053,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "    answer = []\n    for i in range(len(s) - 3):\n        temp = []\n        temp.append(s[i])\n        temp.append(s[i+1])\n        temp.append(s[i+2])\n        if temp not in answer:\n            answer.append(temp)\n    if answer == []:\n        return True\n    else:\n        return False\n",
        "test": "assert     not     is_happy('love'), 'Hello'",
        "num_ids": 1183,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "    \n    gpa = 0.0\n    list_gpa = []\n    gpa_grade = \"\"\n    for i in grades:\n        if i == \"\":\n            continue\n        gpa += float(i)\n        gpa_grade += (i)\n        \n    if gpa > 3.0:\n        gpa = gpa/2\n        gpa_grade = gpa_grade[:-1]\n        gpa_grade = gpa_grade + \" \" + \"E\"\n        list_gpa.append(gpa_grade)\n        \n    elif gpa > 3.3:\n        gpa = gpa*0.75\n        gpa_grade = gpa_grade[:-1]\n        gpa_grade = gpa_grade + \" \" + \"D\"\n        list_gpa.append(gpa_grade)\n        \n    elif gpa > 3.0:\n        gpa = gpa*1.25\n        gpa_grade = gpa_grade[:-1]\n        gpa_grade = gpa_grade + \" \" + \"D\"\n        list_gpa.append(gpa_grade)\n        \n    elif gpa > 1.7:\n        gpa = gpa*1.5\n        gpa_grade = gpa_grade[:-1]\n        gpa_grade = gpa_grade + \" \" + \"D\"\n        list_gpa.append(gpa_grade)\n        \n    elif gpa > 1.3:\n        gpa = gpa*1.25\n        gpa_grade = gpa_grade[:-1]\n        gpa_grade = gpa_grade + \" \" + \"E\"\n        list_gpa.append(gpa_grade)\n        \n    elif gpa > 1.0:\n        gpa = gpa*1.5\n        gpa_grade = gpa_grade[:-1]\n        gpa_grade = gpa_grade + \" \" + \"E\"\n        list_gpa.append(gpa_grade)\n        \n    elif gpa > 0.7:\n        gpa = gpa*1.25\n        gpa_grade = gpa_grade[:-1]\n        gpa_grade = gpa_grade + \" \" + \"C\"\n        list_gpa.append(gpa_grade)\n        \n    elif gpa > 0.0:\n        gpa = gpa*1.3\n        gpa_grade = gpa_grade[:-1]\n        gpa_grade = gpa_grade + \" \" + \"C\"\n        list_gpa.append(gpa_grade)\n        \n    elif gpa == 0.0:\n        gpa_grade = \"0.0\"\n        list_gpa.append(gpa_grade)\n    \n    return list_gpa\n",
        "test": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0]) == (False, \"A+\")",
        "num_ids": 4101,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "    for i in range(2,len(string)):\n        if string[i] in string[:i]:\n            return False\n    return True\n",
        "test": "assert     prime_length('10') == True",
        "num_ids": 1048,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 390,
        "answer": "    count = 0\n    while n!= 0:\n        n -= 1\n        if n % 10 == 1:\n            count += 1\n    return count\n",
        "test": "assert     starts_one_ends(0) == 0",
        "num_ids": 947,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 260,
        "answer": "    # Step 1: Initialize a variable to store the number of digits in the number.\n    # Step 2: Initialize an array called digits to store the number of digits.\n    # Step 3: While number of digits < 10:\n        # Step 4: Add the number of digits to the array.\n        # Step 5: Repeat step 2 until number of digits is greater than 0.\n    # Step 6: Return the total sum of digits.\n    # Step 7: Make sure that the total sum of digits is the same as\n        # Step 2 above.\n    # Step 8: Return the total sum of digits.\n    digits = []\n    sum = 0\n    while N > 0:\n        if N >= 10:\n            sum += N % 10\n            N = N // 10\n        else:\n            sum += N\n            N = 0\n    if sum % 2 == 0:\n        digits.append(sum)\n    else:\n        digits.append(sum)\n        digits.append(sum + 1)\n    return \"\".join(map(str,digits))\n",
        "test": "assert     solve(0) == \"0\"",
        "num_ids": 1244,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "    even = []\n    odd = []\n    for el in lst:\n        if el % 2!= 0:\n            even.append(el)\n        else:\n            odd.append(el)\n    return odd + even\n",
        "test": "assert     add([]) == []",
        "num_ids": 1444,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "    return''.join(sorted(list(s.split())))",
        "test": "assert     anti_shuffle('') == ''",
        "num_ids": 1136,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "    return sorted(lst, key=lambda x: (x[x.index(x[0])] if x[0]!= 0 else 0, x[1] if x[1]!= 0 else 0, x[0]))\n",
        "test": "assert     get_row([(1,2), (3,4), (5,6)],4) == [(1,2), (3,4), (5,6)]",
        "num_ids": 3960,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "    # TODO: return a sorted array\n    # remove duplicates\n    sorted = [array[i] for i in range(len(array))]\n    # TODO: sort\n    for i in range(len(sorted)):\n        for j in range(len(sorted)):\n            # check the current sum is odd or even\n            if(sorted[i] + sorted[j] % 2 == 0):\n                sorted[i], sorted[j] = sorted[j], sorted[i]\n    # TODO: return\n    return sorted",
        "test": "assert     sort_array([]) == []",
        "num_ids": 1556,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "    # YOUR CODE HERE\n    \n    # process string argument\n    i = 0\n    encrypted = \"\"\n    \n    for char in s:\n        if char.isalpha():\n            if char == \" \":\n                encrypted += \" \"\n            else:\n                encrypted += chr(ord(char) + 1)\n            \n        else:\n            encrypted += char\n            \n    return encrypted\n",
        "test": "assert encrypt(\"\") == \"\"",
        "num_ids": 1122,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "    if lst is None:\n        return None\n    \n    if len(lst) == 0:\n        return None\n        \n    if len(lst) == 1:\n        return lst[0]\n    \n    small = lst[0]\n    i = 1\n    for ele in lst:\n        if ele < small:\n            small = ele\n            i = 0\n        elif i == 0:\n            i += 1\n    return small\n    \n",
        "test": "assert     next_smallest([9, 9, 9, 9, 9, 9, 9]) == 9",
        "num_ids": 999,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "    count = 0\n    for w in S:\n        if w == \"I\":\n            count += 1\n        if w == \"!\":\n            count += 1\n        if w == \".\":\n            count += 1\n    return count\n",
        "test": "assert     is_bored(\"Hello\") == False",
        "num_ids": 1431,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "    x = int(x)\n    y = int(y)\n    z = int(z)\n    if (x + y == z) or (x + z == y) or (x == y) or (x == z) or (y == z):\n        return True\n    else:\n        return False\n",
        "test": "assert    any_int(2, 3, 5) == True",
        "num_ids": 1261,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "    words = message.split()\n    for i in range(len(words)):\n        if words[i].isupper():\n            words[i] = words[i].swapcase()\n    return \" \".join(words)\n",
        "test": "assert     encode('lazy') == 'lazy'",
        "num_ids": 4176,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "    s = 0\n    if len(lst) == 0:\n        return s\n    else:\n        for i in lst:\n            if i % 2 == 0:\n                s += i\n        return s\n",
        "test": "assert     skjkasdkd([]) == 0",
        "num_ids": 1765,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "    if type(dict)==dict:\n        return all(type(key).__name__ in [\"str\"] for key in dict)\n    return False\n",
        "test": "assert     check_dict_case({\"John\": \"John Smith\", \"Jane\": \"jane\"}) == False, \"check_dict_case: Test passed.\"",
        "num_ids": 1425,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "    prime = []\n    for i in range(2, n + 1):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime.append(i)\n    return prime\n",
        "test": "assert     count_up_to(0) == []",
        "num_ids": 1155,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "    # Your code here\n    return (a*b)\n",
        "test": "assert     multiply(0, 2) == 0",
        "num_ids": 912,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n",
        "test": "assert     count_upper(\"a\") == 0",
        "num_ids": 943,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 320,
        "answer": "    # Get the closest integer from a string\n    try:\n        number = int(value)\n    except:\n        print(\"Error: \" + value + \" is not an integer\")\n        return\n    # Get the closest integer\n    if value[0] == \"-\":\n        number = -number\n    if value.find(\".\") > 0:\n        closest_integer = round(number, 2)\n    elif value.find(\".\") == -1:\n        closest_integer = round(number)\n    else:\n        closest_integer = round(number, -2)\n    return closest_integer\n",
        "test": "assert     closest_integer(\"7\") == 7",
        "num_ids": 2102,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 230,
        "answer": "    pile = [0]*n\n    n = n%2\n    if n==0:\n        pile[0] = 1\n        return [pile[0]]+make_a_pile(n+1)\n    elif n==1:\n        pile[1] = 1\n        return make_a_pile(n+1)\n    else:\n        pile[0] = 1\n        pile[1] = 1\n        pile[2] = 2\n        for i in range(3,n+1):\n            pile[i] = pile[i-1]+pile[i-2]\n        return pile\n",
        "test": "assert     make_a_pile(5) == [3,2,1]",
        "num_ids": 965,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 27,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "    res = []\n    s = s.split(\",\")\n    for word in s:\n        res.extend(word.split())\n    return res",
        "test": "assert     words_string('python') == ['python']",
        "num_ids": 1888,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "    if x == y:\n        return x\n    elif x % 2 == 0 and y % 2 == 0:\n        return choose_num(x // 2, y // 2)\n    else:\n        return -1\n",
        "test": "assert     choose_num(1, -1) == -1",
        "num_ids": 1147,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "    if n > m:\n        return -1\n    # float(int(bin(n)[2:])) == n\n    # int(str(bin(n)[2:])), int(str(bin(n)[2:])[::-1])\n    # int(str(bin(n)[2:])) == n\n    # round(n, 2) == int(n.to_bytes(2, 'big').hex())\n    # n = round(n, 2)\n    # return str(n).zfill(2)\n    # print(n)\n    return str(bin(n)[2:]).zfill(8)\n",
        "test": "assert     rounded_avg(3, 2) == -1",
        "num_ids": 1424,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "    x_sorted = sorted(set(x))\n    return x_sorted\n",
        "test": "assert     unique_digits([]) == []",
        "num_ids": 2582,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 210,
        "answer": "    if len(arr) == 0:\n        return []\n    \n    arr = sorted(arr)\n    result = []\n    for i in arr:\n        result.append(i)\n    result.reverse()\n    \n    return result\n",
        "test": "assert     by_length([]) == []",
        "num_ids": 2486,
        "indeed": false
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "    fact = [1, 1, 1, 1, 1]\n    for i in range(n):\n        fact[i] = fact[i] * (i + 1)\n    return fac",
        "test": "assert ",
        "num_ids": 897,
        "indeed": false
    },
    {
        "number": 107,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "    even = odd = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n",
        "test": "assert     even_odd_palindrome(4) == (2, 2)",
        "num_ids": 812,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "    s = 0\n    for num in arr:\n        if num >= 0:\n            s += 1\n    return s\n",
        "test": "assert     count_nums([]) == 0",
        "num_ids": 805,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 220,
        "answer": "    # Allocate an empty array to keep track of result\n    arr = []\n    \n    for n in arr:\n        arr.append(n)\n        \n    # Iterate through the array by performing left shift\n    for i in range(0, len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] < arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    \n    # In case the array is empty\n    if len(arr) == 0:\n        return True\n",
        "test": "assert     move_one_ball([]) == True",
        "num_ids": 1456,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "    if len(lst1) == 0 or len(lst2) == 0:\n        return \"NO\"\n    if lst1[0] < lst2[0]:\n        return exchange(lst1[1:], lst2[1:])\n    if lst2[0] < lst1[0]:\n        return exchange(lst1, lst2[1:])\n    return \"YES\"\n",
        "test": "assert         exchange([2,3,4,5], [1,3]) == \"NO\"",
        "num_ids": 1360,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 230,
        "answer": "    test = test.lower()\n    counts = {}\n    for letter in test:\n        if letter not in counts:\n            counts[letter] = 0\n        counts[letter] += 1\n    for key in counts:\n        counts[key] = counts[key] / len(test)\n    return counts",
        "test": "assert     histogram(\"\") == {}",
        "num_ids": 1189,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 320,
        "answer": "    if s == s[::-1] or c == c[::-1]:\n        return s,False\n    if len(s) == len(c):\n        return s,True\n    if s[-1] == c[-1]:\n        return s[:-1],False\n    return s[:-1] + s[-1],True\n",
        "test": "assert     reverse_delete(s=\"aa\", c=\"a\") == (\"aa\", False)",
        "num_ids": 2910,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "    result = []\n    for string in lst:\n        string = string.replace(\" \", \"\")\n        count = 0\n        for i in range(len(string)):\n            if string[i] == \"0\":\n                count = count + 1\n        if count % 2!= 0:\n            result.append(\"the number of odd elements \" + str(count))\n    return result\n",
        "test": "assert     odd_count([]) == []",
        "num_ids": 2194,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "    n = len(nums)\n    if n < 1:\n        return 0\n    \n    i, minSum, ans = 0, float('inf'), 0\n    # Find the minSum\n    while i < n:\n        # Keep adding values until we reach our starting index\n        while i < n and nums[i] > 0:\n            nums[i] -= 1\n            i += 1\n        # If we reach the last value, we should add it\n        if i < n:\n            minSum += nums[i]\n        i += 1\n    \n    # Find the minSum until the starting index is reached\n    while i < n:\n        minSum += nums[i]\n        i += 1\n    \n    # Now check that we have a solution\n    if minSum < ans:\n        ans = minSum\n    return ans\n",
        "test": "assert     minSubArraySum([0, 0, 0, 0]) == 0",
        "num_ids": 1267,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "    import heapq\n",
        "test": "assert ",
        "num_ids": 2504,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 230,
        "answer": "    len_arr = len(arr)\n    for i in range(len_arr - 1):\n        for j in range(len_arr - 1 - i):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    return arr\n",
        "test": "assert     sort_array([]) == []",
        "num_ids": 3477,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "    words = []\n    word = []\n    # a_s = \"A\"\n    # word.extend(a_s)\n    # word.extend(a_s[1::])\n    \n    # check if the string is empty or not\n    if s == \"\":\n        return words\n    # if string is empty we return the whole list\n    elif len(s) == 0:\n        return words\n    # else we keep checking the characters\n    else:\n        for i in range(len(s)):\n            # if the character is in the string\n            if s[i] in \"aeiou\":\n                # if it is not a vowel we append it to the word\n                if s[i] not in \"aeiouAEIOU\":\n                    word.append(s[i])\n        for i in range(len(word)):\n            # if the word is not empty, the vowel is in the word\n            if word[i] not in \"aeiouAEIOU\":\n                # if it is a vowel we append it to the list\n                if word[i] not in \"aeiouAEIOU\":\n                    words.append(word[i])\n        return words\n",
        "test": "assert     select_words('', 5) == []",
        "num_ids": 2743,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "    words = word.split(\" \")\n    vowels = set([\"a\", \"e\", \"i\", \"o\", \"u\"])\n    minimum = float(\"inf\")\n    return next((vowel for vowel in words if vowel in vowels), \"\")\n",
        "test": "assert     get_closest_vowel(word=\"Babylon\") == \"\"",
        "num_ids": 1930,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "    if len(lst)%2==0:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "test": "assert     match_parens(['()']) == 'No', 'Incorrect syntax'",
        "num_ids": 1704,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "    # O(N*log(N))\n    def binary_search(arr, k, lo, hi):\n        while lo <= hi:\n            mid = lo + (hi - lo) // 2\n            if arr[mid] > k:\n                hi = mid - 1\n            else:\n                lo = mid + 1\n        return lo\n    return sorted(arr, key=lambda x: binary_search(arr, x, 0, len(arr) - 1))\n",
        "test": "assert     maximum([0,1,2,3,4,5,6,7,8], 0) == [0, 1, 2, 3, 4, 5, 6, 7, 8]",
        "num_ids": 1044,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "    sum = 0\n    for i in lst:\n        if i%2 == 0:\n            sum += i\n    return sum\n    ",
        "test": "assert         solution([]) == 0",
        "num_ids": 1028,
        "indeed": false
    },
    {
        "number": 122,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 230,
        "answer": "    \n    sum = 0\n    for i in arr:\n        sum += int(str(i)[:k])\n    return sum\n",
        "test": "assert     add_elements([1, 2, 3], 2) == 6",
        "num_ids": 1261,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 260,
        "answer": "    collatz_seq = [1]\n    for i in range(2, n):\n        if i%2 == 0:\n            collatz_seq.append(i)\n        else:\n            num = collatz_seq[-1] + (collatz_seq[-2]*2)\n            collatz_seq.append(num)\n    return collatz_seq\n",
        "test": "assert     get_odd_collatz(1) == [1], 'wrong get_odd_collatz'",
        "num_ids": 1249,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if date[0]!= '-' or date[1]!= '-':\n        return False\n    if len(date) < 4 or len(date) > 31:\n        return False\n    month = 1\n    day = 1\n    date_lst = []\n    for i in date:\n        if i!= '-':\n            day += 1\n        else:\n            month += 1\n        date_lst.append(month)\n        if month == 12 or month == 1:\n            month = 1\n        else:\n            month += 1\n",
        "test": "assert     valid_date(\"2020-10-11\") == False",
        "num_ids": 1946,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "    txt = txt.lower()\n    txt = txt.split()\n    return txt\n",
        "test": "assert     split_words(\"\") == []",
        "num_ids": 2489,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "    # your code here\n    if len(lst) < 1:\n        return True\n    else:\n        return False if lst[0] == lst[-1] else not is_sorted(lst[1:-1])\n",
        "test": "assert     is_sorted([1, 4, 5, 2, 1]) == False",
        "num_ids": 1526,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 260,
        "answer": "    # Write your code here.\n    #define intervals\n    intervals = []\n    \n    #check if there are any intersection with intervals\n    for interval in interval1:\n        if interval not in intervals:\n            intervals.append(interval)\n    for interval in interval2:\n        if interval not in intervals:\n            intervals.append(interval)\n    \n    #check if the list of intervals has any intersection\n    if len(intervals) < 2:\n        return \"NO\"\n    \n    #check if there are at least two intersections\n    for i in range(len(intervals)-1):\n        if intervals[i] < intervals[i+1]:\n            return \"NO\"\n    \n    #Check if the first and last intervals have same value\n    start1 = intervals[0]\n    end1 = intervals[-1]\n    \n    start2 = intervals[0]\n    end2 = intervals[-1]\n    \n    #if there are at least two intervals has same value\n    if start2 <= end1 and end2 <= start1:\n        return \"YES\"\n    \n    #if there are only one interval with same value\n    if start2 == end1:\n        return \"YES\"\n    \n    #else if there are at least two interval with same value\n    if start2 > end1:\n        return \"YES\"\n    \n    #else if there are at least two interval with same value\n    if start2 < end1:\n        return \"NO\"\n    \n    \n    \n    \n",
        "test": "assert     intersection((0, 1), (0, 1)), \"YES\"",
        "num_ids": 1725,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "    # Answer = -9\n    # to have sum of all signs multiplied by prod of signs of all numbers, this is simply the sum of all multiplies by all sign\n    # -1 = -1, 0 = 0\n    # this is the same as prod_signs(signs) = prod_signs(signs) * prod_signs(signs_magnitudes)\n    magnitude_sum = 1\n    for num in arr:\n        magnitude_sum *= num\n    return magnitude_sum\n",
        "test": "assert     prod_signs([1, -1, 0]) == 0",
        "num_ids": 1284,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 340,
        "answer": "    if k <= 0:\n        return []\n",
        "test": "assert     minPath([[1,2,3,4], [2,3,4,1], [3,1,2,4]], 6) == [1, 3, 4, 2]",
        "num_ids": 4238,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "    if n < 1:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n    if n == 3:\n        return [1, 2, 3]\n    return fibonacci_tri(n - 1) + fibonacci_tri(n - 2) + fibonacci_tri(n + 1)\n",
        "test": "assert ",
        "num_ids": 1195,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "    sum_odd = 0\n    while n:\n        if n % 10 == 0:\n            sum_odd += n // 10\n        else:\n            return 0\n        n //= 10\n    return sum_odd\n",
        "test": "assert     digits(0) == 0",
        "num_ids": 587,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "    # check if the input is an empty string\n    if not string:\n        return False\n    # if the string is a single bracket\n    if string[0] == '[' and string[-1] == ']':\n        return True\n    # if the string is not a single bracket\n    else:\n        # create a list that contains all brackets\n        brackets_list = []\n        for char in string:\n            if char == '[' or char == ']':\n                brackets_list.append(char)\n        # if there is a square bracket in the list\n        if len(brackets_list) > 0:\n            # the list is split into two because of brackets\n            bracket1 = brackets_list[0:2]\n            bracket2 = brackets_list[2:4]\n            # if there are more brackets than characters in the list\n            if len(bracket1) > len(bracket2):\n                # if there is a bracket in the middle\n                if brackets_list[0:2] == bracket1:\n                    return is_nested(string[1:-1])\n                # if there is a bracket in the middle and not the middle\n                else:\n                    return is_nested(string[1:len(string) - 1])\n            # if there is a bracket in the middle and it is the only character in the list\n            else:\n                if brackets_list[0] == bracket2[0]:\n                    return is_nested(string[1:len(string) - 1])\n                # if there is a bracket in the middle and the middle isn't the only character in the list\n                else:\n                    return is_nested(string[1:len(string) - 1])\n        else:\n            return True\n",
        "test": "assert     is_nested('[](') == False, \"is_nested(): expected []) got ['] instead\"",
        "num_ids": 1760,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "    res = 0\n    for x in lst:\n        res = res + x * x\n    return res\n    #return sum([x * x for x in lst])\n",
        "test": "assert     sum_squares([]) == 0",
        "num_ids": 1061,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "    return txt[-1].isalpha() and not any(c.isalpha() for c in txt)\n",
        "test": "assert not    check_if_last_char_is_a_letter(\"A\"), \"should not be False\"",
        "num_ids": 1311,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "    arr.sort()\n    idx = -1\n    for i in range(1,len(arr)):\n        if arr[i] <= arr[i-1]:\n            if arr[i]!= arr[i-1]:\n                idx = i\n                break\n    if idx == -1:\n        return -1\n    else:\n        return idx\n",
        "test": "assert     can_arrange([1,2,3,4,5]) == -1",
        "num_ids": 1274,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "    def largest(num):\n        if num < 0:\n            return None\n        elif num == 0:\n            return None\n        else:\n            if num < 10:\n                return (num, num)\n            else:\n                num_1 = num // 10\n                num_2 = num % 10\n                if num_2!= 0:\n                    return (num_1, num_2)\n                else:\n                    return (num_1, num)\n    # return (num, num) if num < 0 else (num, None)\n    return (None, None)\n",
        "test": "assert     largest_smallest_integers([]) == (None, None)",
        "num_ids": 1457,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "    if type(a) == type(b) == str or type(a) == str:\n        if type(a) == str and a in [\".\", \",\", \":\", \";\"]:\n            return \"error\"\n        else:\n            return a\n    elif type(a) == float:\n        return float(a)\n    elif type(a) == int:\n        return int(a)\n    elif type(a) == tuple:\n        return tuple(a)\n    elif type(a) == dict:\n        return dict(a)\n    elif type(a) == list:\n        return list(a)\n    elif type(a) == set:\n        return set(a)\n    elif type(a) == bool:\n        return bool(a)\n    else:\n        return type(a)\n",
        "test": "assert         compare_one(2.0, 1) == 2",
        "num_ids": 3046,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "    if n % 2 == 0:\n        if n % 4 == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     is_equal_to_sum_even(7) == False",
        "num_ids": 1113,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 30,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "    if n == 0 or n == 1:\n        return 1\n    return n * special_factorial(n - 1)",
        "test": "assert     special_factorial(0) == 1",
        "num_ids": 840,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "    lines = []\n    for line in text.split('\\n'):\n        if len(line) > 2:\n            line = line.replace(' ', '-')\n        lines.append(line)\n    return '\\n'.join(lines)\n",
        "test": "assert fix_spaces(\"0\") == \"0\"",
        "num_ids": 2484,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "    \n    if not file_name.isalnum():\n        return 'No'\n    elif len(file_name) <= 3:\n        return 'No'\n    elif file_name[0] == '.':\n        return 'No'\n    elif file_name[0].isalpha():\n        return 'No'\n    elif not file_name[0].isdigit():\n        return 'No'\n    elif not all(c.isdigit() for c in file_name[1:]):\n        return 'No'\n    else:\n        return 'Yes'\n",
        "test": "assert     file_name_check(\"myfile.txt\") == \"No\"",
        "num_ids": 1824,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "    res = 0\n    for i in lst:\n        if i % 3 == 0 or i % 4 == 0:\n            res += i\n    return res\n",
        "test": "assert     sum_squares([0,0,0,0]) == 0, \"Sum Squares function is incorrect\"",
        "num_ids": 1192,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "    sentence = sentence.lower()\n    print(sentence)\n    sentence = sentence.split()\n    print(sentence)\n    print(sentence)\n    sentence = sentence[::-1]\n    sentence =''.join(sentence)\n    print(sentence)\n    return sentence\n",
        "test": "assert     words_in_sentence(\"123456789123456789\") == \"123456789123456789\"",
        "num_ids": 2240,
        "indeed": false
    },
    {
        "number": 144,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 320,
        "answer": "    try:\n        n = float(n)\n        x = float(x)\n    except:\n        return False\n    if n == 0 or n == 1:\n        return True\n    if n == 1 or n == 0:\n        return False\n    if n < 0:\n        n = abs(n)\n        if n == 0:\n            return True\n        if n == 1:\n            return False\n        return simplify(x / n, n)\n    return simplify(x / n, n)\n",
        "test": "assert     simplify('1/4', '1/5') == False",
        "num_ids": 1319,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "    # sort by the sum of the digits of the numbers\n    # and then convert the numbers to string\n    nums.sort(key = lambda x : int(str(x)[-1]))\n    return nums",
        "test": "assert     order_by_points([]) == []",
        "num_ids": 2384,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 210,
        "answer": "    l = len(nums)\n    output = 0\n    \n    #Iterate through the numbers\n    for i in range(l):\n        #If the number is greater than 10,\n        #Add the number to a list\n        if nums[i] >= 10:\n            output += 1\n            \n    #If the list is of odd numbers\n    #Add the odd numbers to a list\n    if output % 2 == 1:\n        output += 1\n        \n    return output\n",
        "test": "assert     specialFilter([]) == 0",
        "num_ids": 2063,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return sum([a.count(i) for i in range(1, n + 1)])\n",
        "test": "assert     get_max_triples(1) == 1",
        "num_ids": 1692,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 360,
        "answer": "    if planet1 == \"Jupiter\" or planet2 == \"Jupiter\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Saturn\" or planet2 == \"Saturn\":\n        return (\"Uranus\", \"Neptune\")\n    elif planet1 == \"Uranus\" or planet2 == \"Uranus\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    elif planet1 == \"Venus\" or planet2 == \"Venus\":\n        return (\"Mercury\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    elif planet1 == \"Mercury\" or planet2 == \"Mercury\":\n        return (\"Jupiter\", \"Saturn\")\n    elif planet1 == \"Mars\" or planet2 == \"Mars\":\n        return (\"Uranus\", \"Neptune\")\n    elif planet1 == \"Jupiter\" or planet2 == \"Jupiter\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Saturn\" or planet2 == \"Saturn\":\n        return (\"Uranus\", \"Jupiter\")\n    elif planet1 == \"Uranus\" or planet2 == \"Uranus\":\n        return (\"Jupiter\", \"Saturn\")\n    elif planet1 == \"Neptune\" or planet2 == \"Neptune\":\n        return (\"Saturn\", \"Uranus\")\n    else:\n        return (\"Mercury\", \"Venus\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Jupiter\")",
        "test": "assert     bf(\"Venus\",\"Uranus\") == (\"Mercury\",\"Uranus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Neptune\")",
        "num_ids": 5839,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "    # your code here\n    lst.sort()\n    return lst\n",
        "test": "assert     sorted_list_sum([]) == []",
        "num_ids": 2587,
        "indeed": false
    },
    {
        "number": 150,
        "max_answer_num": 22,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "    if n == 2 or n == 3:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        return x_or_y(n // 2, x, y)\n",
        "test": "assert     x_or_y(1, 0, 0) == 0",
        "num_ids": 1180,
        "indeed": false
    },
    {
        "number": 151,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "    res = 0\n    if lst:\n        for n in lst:\n            res = res + (n**2)\n    return res\n",
        "test": "assert     double_the_difference([]) == 0",
        "num_ids": 1052,
        "indeed": false
    },
    {
        "number": 152,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 220,
        "answer": "    #print(type(guess))\n    #print(guess)\n    \n    if len(guess)!= len(game):\n        return \"wrong guess\"\n    \n    guess_score = []\n    score_score = []\n    for i in range(len(guess)):\n        guess_score.append(game[i][guess[i]])\n        score_score.append(guess[i] - game[i][guess[i]])\n    #print(guess_score)\n    #print(score_score)\n    \n    \n    return score_score\n    \n    \ndef give_result(results):\n    \"\"\"This function should give the player the option to play again or quit.\n    \n    We will give a player the option to play again or quit.\n    \"\"\"\n    #print(\"compare\")\n    #print(results)\n    print(\"-\"*20)\n    print(\"Welcome to the game! Let's play! Here is a quick summary of the results!\")\n    print(\"-\"*20)\n    print(\"score: \",sum(results))\n    print(\"=\"*20)\n    print(\"press 'r' to play again or 'q' to quit\")\n    print(\"=\"*20)\n    \n",
        "test": "assert     compare(scores,guesses) == [0,0]",
        "num_ids": 2905,
        "indeed": false
    },
    {
        "number": 153,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 260,
        "answer": "    # Step 1: Determine the size of the extension\n    total_length = len(extensions)\n    length = 0\n    # Step 2: Loop through the extension list, calculate the length and add it to the total length\n    for extension in extensions:\n        extension_length = len(extension)\n        length += extension_length\n    # Step 3: Calculate the strength of the extension\n    #    Note: The max of CAP and SM are the same, so the formula for the strength\n    #        is CAP * CAP - SM\n    CAP = total_length - length\n    SM = CAP * CAP - length\n    # Step 4: Return the strongest extension\n    return class_name + \".\" + extensions[0].split(\".\")[-1]\n",
        "test": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'",
        "num_ids": 3499,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "    if len(b) < len(a):\n        return False\n    \n    b_split = b.split(',')\n    return b_split[0] in a or ''.join(b_split[1:]) in a\n",
        "test": "assert     cycpattern_check('quick brown fox', 'qui') == False",
        "num_ids": 2616,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 270,
        "answer": "    # Python has a built-in method to count the occurrences of a given digit.\n    even = 0\n    odd = 0\n    # Count the digits in the number and if it is a positive or negative, return the two digits\n    # if it is a decimal, return the two digits and remove the sign\n    for i in str(num):\n        if i.isdigit() == False:\n            continue\n        else:\n            if int(i) % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n",
        "test": "assert     even_odd_count(1) == (0, 1)",
        "num_ids": 1002,
        "indeed": true
    },
    {
        "number": 156,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "    roman = {1: 'I', 2: 'II', 3: 'III', 4: 'IV', 5: 'V', 6: 'VI', 7: 'VII', 8: 'VIII', 9: 'IX'}\n    result = ''\n    i = 1\n    while i < number:\n        j = 1\n        while j < 10:\n            if i + j > number:\n                break\n            elif i + j <= number:\n                if j == 1:\n                    result += roman[i + j]\n                else:\n                    result += roman[i + j] + 'I'\n                    j += 1\n                i += j\n            else:\n                result += roman[i + j]\n                j += 1\n        i += 1\n    return result.lower()\n",
        "test": "assert     int_to_mini_roman(2) == \"ii\"",
        "num_ids": 4197,
        "indeed": false
    },
    {
        "number": 157,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "    if a == b and b == c and c == a:\n        return True\n    elif a == b or b == c or c == a:\n        return False\n    else:\n        return True\ndef is_right_angled(a, b, c, d):\n    '''\n    Is a right angle triangle formed by the three sides of the triangle?\n    Example:\n    is_right_angled(3, 4, 5, 6) == True\n    is_right_angled(1, 2, 3, 4) == True\n    is_right_angled(1, 2, 3, 5) == False\n    is_right_angled(1, 3, 2, 5) == True\n    '''\n    if right_angle_triangle(a, b, c):\n        return True\n    elif right_angle_triangle(a, b, d):\n        return True\n    elif right_angle_triangle(d, c, b):\n        return True\n    else:\n        return False\n",
        "test": "assert     right_angle_triangle(1, 1, 1) == True",
        "num_ids": 2513,
        "indeed": false
    },
    {
        "number": 158,
        "max_answer_num": 18,
        "max_test_num": 3,
        "total_product": 390,
        "answer": "    list_of_words = []\n    for i in words:\n        i = str(i)\n        list_of_words.append(i)\n    new_list = sorted(list_of_words, key=len, reverse=True)\n    return new_list[0]\n",
        "test": "assert     find_max(['abcd', 'abcd', 'abcd']) == 'abcd'",
        "num_ids": 1802,
        "indeed": false
    },
    {
        "number": 159,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "    if remaining < need:\n        return [need, remaining]\n    if number == need:\n        return [need, remaining]\n    if number >= need:\n        if number - need > need - need:\n            # keep eating 1 carrot\n            eat(number - need, need, remaining)\n        if number - need > need - need:\n            # keep eating 2 carrots\n            eat(number - need, need, remaining - need - need)\n        if number - need > need - need:\n            # keep eating 2 carrots\n            eat(number - need, need, remaining - need - need)\n        if number - need > need - need:\n            # keep eating 3 carrots\n            eat(number - need, need, remaining - need - need - need)\n    else:\n        if number - need < need:\n            # eat at most one carrot\n            eat(number - need, need, remaining)\n        if number - need < need:\n            # eat at most 2 carrots\n            eat(number - need, need, remaining - need)\n        if number - need < need:\n            # eat at most 2 carrots\n            eat(number - need, need, remaining - need - need)\n        if number - need < need:\n            # eat at most 3 carrots\n            eat(number - need, need, remaining - need - need - need)\n        if number - need < need:\n            # eat at most 3 carrots\n            eat(number - need, need, remaining - need - need - need)\n",
        "test": "assert     0 <= number <= 1000",
        "num_ids": 1691,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 330,
        "answer": "    result = 0\n    for i in range(len(operand)):\n        if operator[i]!= 0:\n            result += operator[i] * operand[i]\n    return result\n",
        "test": "assert     do_algebra([], []) == 0, 'Expected to not return 0, but got:\\n\\n' + str(do_algebra([], []))",
        "num_ids": 1910,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "    if s.isalpha():\n        return s.upper()\n    else:\n        return s.lower()\n",
        "test": "assert     solve(\"A\") == \"A\"",
        "num_ids": 3032,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "    if not text:\n        return None\n",
        "test": "assert     string_to_md5('') == None",
        "num_ids": 1279,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 320,
        "answer": "    return list(range(a, b+1))\n",
        "test": "assert     generate_integers(5, 9) == [5, 6, 7, 8, 9]",
        "num_ids": 1088,
        "indeed": false
    }
]